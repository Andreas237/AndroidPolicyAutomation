// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate safe 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.*;
import android.support.v4.os.*;
import android.support.v4.view.*;
import android.support.v4.view.accessibility.*;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.*;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import java.lang.annotation.Annotation;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package android.support.v7.widget:
//			ViewInfoStore, DefaultItemAnimator, RecyclerViewAccessibilityDelegate, ChildHelper, 
//			AdapterHelper, FastScroller, GapWorker, ViewBoundsCheck

public class RecyclerView extends ViewGroup
	implements ScrollingView, NestedScrollingChild
{
	public static abstract class Adapter
	{

		public final void bindViewHolder(ViewHolder viewholder, int i)
		{
			viewholder.mPosition = i;
		//    0    0:aload_1         
		//    1    1:iload_2         
		//    2    2:putfield        #32  <Field int RecyclerView$ViewHolder.mPosition>
			if(hasStableIds())
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #36  <Method boolean hasStableIds()>
		//*   5    9:ifeq            21
				viewholder.mItemId = getItemId(i);
		//    6   12:aload_1         
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:invokevirtual   #40  <Method long getItemId(int)>
		//   10   18:putfield        #44  <Field long RecyclerView$ViewHolder.mItemId>
			viewholder.setFlags(1, 519);
		//   11   21:aload_1         
		//   12   22:iconst_1        
		//   13   23:sipush          519
		//   14   26:invokevirtual   #48  <Method void RecyclerView$ViewHolder.setFlags(int, int)>
			TraceCompat.beginSection("RV OnBindView");
		//   15   29:ldc1            #50  <String "RV OnBindView">
		//   16   31:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			onBindViewHolder(viewholder, i, viewholder.getUnmodifiedPayloads());
		//   17   34:aload_0         
		//   18   35:aload_1         
		//   19   36:iload_2         
		//   20   37:aload_1         
		//   21   38:invokevirtual   #60  <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//   22   41:invokevirtual   #64  <Method void onBindViewHolder(RecyclerView$ViewHolder, int, List)>
			viewholder.clearPayload();
		//   23   44:aload_1         
		//   24   45:invokevirtual   #67  <Method void RecyclerView$ViewHolder.clearPayload()>
			viewholder = ((ViewHolder) (viewholder.itemView.getLayoutParams()));
		//   25   48:aload_1         
		//   26   49:getfield        #71  <Field View RecyclerView$ViewHolder.itemView>
		//   27   52:invokevirtual   #77  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   28   55:astore_1        
			if(viewholder instanceof LayoutParams)
		//*  29   56:aload_1         
		//*  30   57:instanceof      #79  <Class RecyclerView$LayoutParams>
		//*  31   60:ifeq            71
				((LayoutParams)viewholder).mInsetsDirty = true;
		//   32   63:aload_1         
		//   33   64:checkcast       #79  <Class RecyclerView$LayoutParams>
		//   34   67:iconst_1        
		//   35   68:putfield        #82  <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			TraceCompat.endSection();
		//   36   71:invokestatic    #85  <Method void TraceCompat.endSection()>
		//   37   74:return          
		}

		public final ViewHolder createViewHolder(ViewGroup viewgroup, int i)
		{
			TraceCompat.beginSection("RV CreateView");
		//    0    0:ldc1            #91  <String "RV CreateView">
		//    1    2:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			viewgroup = ((ViewGroup) (onCreateViewHolder(viewgroup, i)));
		//    2    5:aload_0         
		//    3    6:aload_1         
		//    4    7:iload_2         
		//    5    8:invokevirtual   #94  <Method RecyclerView$ViewHolder onCreateViewHolder(ViewGroup, int)>
		//    6   11:astore_1        
			viewgroup.mItemViewType = i;
		//    7   12:aload_1         
		//    8   13:iload_2         
		//    9   14:putfield        #97  <Field int RecyclerView$ViewHolder.mItemViewType>
			TraceCompat.endSection();
		//   10   17:invokestatic    #85  <Method void TraceCompat.endSection()>
			return ((ViewHolder) (viewgroup));
		//   11   20:aload_1         
		//   12   21:areturn         
		}

		public abstract int getItemCount();

		public long getItemId(int i)
		{
			return -1L;
		//    0    0:ldc2w           #101 <Long -1L>
		//    1    3:lreturn         
		}

		public int getItemViewType(int i)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public final boolean hasObservers()
		{
			return mObservable.hasObservers();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #107 <Method boolean RecyclerView$AdapterDataObservable.hasObservers()>
		//    3    7:ireturn         
		}

		public final boolean hasStableIds()
		{
			return mHasStableIds;
		//    0    0:aload_0         
		//    1    1:getfield        #23  <Field boolean mHasStableIds>
		//    2    4:ireturn         
		}

		public final void notifyDataSetChanged()
		{
			mObservable.notifyChanged();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #111 <Method void RecyclerView$AdapterDataObservable.notifyChanged()>
		//    3    7:return          
		}

		public final void notifyItemChanged(int i)
		{
			mObservable.notifyItemRangeChanged(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemChanged(int i, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, 1, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:aload_2         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemInserted(int i)
		{
			mObservable.notifyItemRangeInserted(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemMoved(int i, int j)
		{
			mObservable.notifyItemMoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #127 <Method void RecyclerView$AdapterDataObservable.notifyItemMoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j)
		{
			mObservable.notifyItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, j, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:aload_3         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemRangeInserted(int i, int j)
		{
			mObservable.notifyItemRangeInserted(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeRemoved(int i, int j)
		{
			mObservable.notifyItemRangeRemoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRemoved(int i)
		{
			mObservable.notifyItemRangeRemoved(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public void onAttachedToRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public abstract void onBindViewHolder(ViewHolder viewholder, int i);

		public void onBindViewHolder(ViewHolder viewholder, int i, List list)
		{
			onBindViewHolder(viewholder, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #135 <Method void onBindViewHolder(RecyclerView$ViewHolder, int)>
		//    4    6:return          
		}

		public abstract ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i);

		public void onDetachedFromRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public boolean onFailedToRecycleView(ViewHolder viewholder)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onViewAttachedToWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewDetachedFromWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewRecycled(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void registerAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.registerObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #151 <Method void RecyclerView$AdapterDataObservable.registerObserver(Object)>
		//    4    8:return          
		}

		public void setHasStableIds(boolean flag)
		{
			if(hasObservers())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #154 <Method boolean hasObservers()>
		//*   2    4:ifeq            17
			{
				throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
		//    3    7:new             #156 <Class IllegalStateException>
		//    4   10:dup             
		//    5   11:ldc1            #158 <String "Cannot change whether this adapter has stable IDs while the adapter has registered observers.">
		//    6   13:invokespecial   #160 <Method void IllegalStateException(String)>
		//    7   16:athrow          
			} else
			{
				mHasStableIds = flag;
		//    8   17:aload_0         
		//    9   18:iload_1         
		//   10   19:putfield        #23  <Field boolean mHasStableIds>
				return;
		//   11   22:return          
			}
		}

		public void unregisterAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.unregisterObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #164 <Method void RecyclerView$AdapterDataObservable.unregisterObserver(Object)>
		//    4    8:return          
		}

		private boolean mHasStableIds;
		private final AdapterDataObservable mObservable = new AdapterDataObservable();

		public Adapter()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #16  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #18  <Class RecyclerView$AdapterDataObservable>
		//    4    8:dup             
		//    5    9:invokespecial   #19  <Method void RecyclerView$AdapterDataObservable()>
		//    6   12:putfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
			mHasStableIds = false;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #23  <Field boolean mHasStableIds>
		//   10   20:return          
		}
	}

	static class AdapterDataObservable extends Observable
	{

		public boolean hasObservers()
		{
			return !mObservers.isEmpty();
		//    0    0:aload_0         
		//    1    1:getfield        #19  <Field ArrayList mObservers>
		//    2    4:invokevirtual   #24  <Method boolean ArrayList.isEmpty()>
		//    3    7:ifne            12
		//    4   10:iconst_1        
		//    5   11:ireturn         
		//    6   12:iconst_0        
		//    7   13:ireturn         
		}

		public void notifyChanged()
		{
			for(int i = mObservers.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            35
				((AdapterDataObserver)mObservers.get(i)).onChanged();
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_1         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:invokevirtual   #38  <Method void RecyclerView$AdapterDataObserver.onChanged()>

		//   14   28:iload_1         
		//   15   29:iconst_1        
		//   16   30:isub            
		//   17   31:istore_1        
		//*  18   32:goto            10
		//   19   35:return          
		}

		public void notifyItemMoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            38
				((AdapterDataObserver)mObservers.get(k)).onItemRangeMoved(i, j, 1);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:iconst_1        
		//   16   28:invokevirtual   #44  <Method void RecyclerView$AdapterDataObserver.onItemRangeMoved(int, int, int)>

		//   17   31:iload_3         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_3        
		//*  21   35:goto            10
		//   22   38:return          
		}

		public void notifyItemRangeChanged(int i, int j)
		{
			notifyItemRangeChanged(i, j, ((Object) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aconst_null     
		//    4    4:invokevirtual   #48  <Method void notifyItemRangeChanged(int, int, Object)>
		//    5    7:return          
		}

		public void notifyItemRangeChanged(int i, int j, Object obj)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            43
				((AdapterDataObserver)mObservers.get(k)).onItemRangeChanged(i, j, obj);
		//    8   16:aload_0         
		//    9   17:getfield        #19  <Field ArrayList mObservers>
		//   10   20:iload           4
		//   11   22:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   28:iload_1         
		//   14   29:iload_2         
		//   15   30:aload_3         
		//   16   31:invokevirtual   #51  <Method void RecyclerView$AdapterDataObserver.onItemRangeChanged(int, int, Object)>

		//   17   34:iload           4
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:istore          4
		//*  21   40:goto            11
		//   22   43:return          
		}

		public void notifyItemRangeInserted(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeInserted(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #55  <Method void RecyclerView$AdapterDataObserver.onItemRangeInserted(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		public void notifyItemRangeRemoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeRemoved(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #59  <Method void RecyclerView$AdapterDataObserver.onItemRangeRemoved(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		AdapterDataObservable()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #12  <Method void Observable()>
		//    2    4:return          
		}
	}

	public static abstract class AdapterDataObserver
	{

		public void onChanged()
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			onItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #18  <Method void onItemRangeChanged(int, int)>
		//    4    6:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
		//    0    0:return          
		}

		public AdapterDataObserver()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface ChildDrawingOrderCallback
	{

		public abstract int onGetChildDrawingOrder(int i, int j);
	}

	public static abstract class ItemAnimator
	{

		static int buildAdapterChangeFlagsForAnimations(ViewHolder viewholder)
		{
			int j = viewholder.mFlags & 0xe;
		//    0    0:aload_0         
		//    1    1:invokestatic    #71  <Method int RecyclerView$ViewHolder.access$1400(RecyclerView$ViewHolder)>
		//    2    4:bipush          14
		//    3    6:iand            
		//    4    7:istore_2        
			if(viewholder.isInvalid())
		//*   5    8:aload_0         
		//*   6    9:invokevirtual   #75  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   7   12:ifeq            17
				return 4;
		//    8   15:iconst_4        
		//    9   16:ireturn         
			int i = j;
		//   10   17:iload_2         
		//   11   18:istore_1        
			if((j & 4) == 0)
		//*  12   19:iload_2         
		//*  13   20:iconst_4        
		//*  14   21:iand            
		//*  15   22:ifne            65
			{
				int k = viewholder.getOldPosition();
		//   16   25:aload_0         
		//   17   26:invokevirtual   #79  <Method int RecyclerView$ViewHolder.getOldPosition()>
		//   18   29:istore_3        
				int l = viewholder.getAdapterPosition();
		//   19   30:aload_0         
		//   20   31:invokevirtual   #82  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//   21   34:istore          4
				i = j;
		//   22   36:iload_2         
		//   23   37:istore_1        
				if(k != -1)
		//*  24   38:iload_3         
		//*  25   39:iconst_m1       
		//*  26   40:icmpeq          65
				{
					i = j;
		//   27   43:iload_2         
		//   28   44:istore_1        
					if(l != -1)
		//*  29   45:iload           4
		//*  30   47:iconst_m1       
		//*  31   48:icmpeq          65
					{
						i = j;
		//   32   51:iload_2         
		//   33   52:istore_1        
						if(k != l)
		//*  34   53:iload_3         
		//*  35   54:iload           4
		//*  36   56:icmpeq          65
							i = j | 0x800;
		//   37   59:iload_2         
		//   38   60:sipush          2048
		//   39   63:ior             
		//   40   64:istore_1        
					}
				}
			}
			return i;
		//   41   65:iload_1         
		//   42   66:ireturn         
		}

		public abstract boolean animateAppearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateDisappearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animatePersistence(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
		{
			return true;
		//    0    0:iconst_1        
		//    1    1:ireturn         
		}

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder, List list)
		{
			return canReuseUpdatedViewHolder(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #96  <Method boolean canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//    3    5:ireturn         
		}

		public final void dispatchAnimationFinished(ViewHolder viewholder)
		{
			onAnimationFinished(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #103 <Method void onAnimationFinished(RecyclerView$ViewHolder)>
			if(mListener != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//*   5    9:ifnull          22
				mListener.onAnimationFinished(viewholder);
		//    6   12:aload_0         
		//    7   13:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    8   16:aload_1         
		//    9   17:invokeinterface #104 <Method void RecyclerView$ItemAnimator$ItemAnimatorListener.onAnimationFinished(RecyclerView$ViewHolder)>
		//   10   22:return          
		}

		public final void dispatchAnimationStarted(ViewHolder viewholder)
		{
			onAnimationStarted(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #108 <Method void onAnimationStarted(RecyclerView$ViewHolder)>
		//    3    5:return          
		}

		public final void dispatchAnimationsFinished()
		{
			int j = mFinishedListeners.size();
		//    0    0:aload_0         
		//    1    1:getfield        #51  <Field ArrayList mFinishedListeners>
		//    2    4:invokevirtual   #112 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          38
				((ItemAnimatorFinishedListener)mFinishedListeners.get(i)).onAnimationsFinished();
		//    9   15:aload_0         
		//   10   16:getfield        #51  <Field ArrayList mFinishedListeners>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #116 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #12  <Class RecyclerView$ItemAnimator$ItemAnimatorFinishedListener>
		//   14   26:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>

		//   15   31:iload_1         
		//   16   32:iconst_1        
		//   17   33:iadd            
		//   18   34:istore_1        
		//*  19   35:goto            10
			mFinishedListeners.clear();
		//   20   38:aload_0         
		//   21   39:getfield        #51  <Field ArrayList mFinishedListeners>
		//   22   42:invokevirtual   #122 <Method void ArrayList.clear()>
		//   23   45:return          
		}

		public abstract void endAnimation(ViewHolder viewholder);

		public abstract void endAnimations();

		public long getAddDuration()
		{
			return mAddDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field long mAddDuration>
		//    2    4:lreturn         
		}

		public long getChangeDuration()
		{
			return mChangeDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #63  <Field long mChangeDuration>
		//    2    4:lreturn         
		}

		public long getMoveDuration()
		{
			return mMoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #61  <Field long mMoveDuration>
		//    2    4:lreturn         
		}

		public long getRemoveDuration()
		{
			return mRemoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #57  <Field long mRemoveDuration>
		//    2    4:lreturn         
		}

		public abstract boolean isRunning();

		public final boolean isRunning(ItemAnimatorFinishedListener itemanimatorfinishedlistener)
		{
			boolean flag = isRunning();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #133 <Method boolean isRunning()>
		//    2    4:istore_2        
			if(itemanimatorfinishedlistener != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          30
			{
				if(!flag)
		//*   5    9:iload_2         
		//*   6   10:ifne            21
				{
					itemanimatorfinishedlistener.onAnimationsFinished();
		//    7   13:aload_1         
		//    8   14:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>
					return flag;
		//    9   19:iload_2         
		//   10   20:ireturn         
				}
				mFinishedListeners.add(((Object) (itemanimatorfinishedlistener)));
		//   11   21:aload_0         
		//   12   22:getfield        #51  <Field ArrayList mFinishedListeners>
		//   13   25:aload_1         
		//   14   26:invokevirtual   #137 <Method boolean ArrayList.add(Object)>
		//   15   29:pop             
			}
			return flag;
		//   16   30:iload_2         
		//   17   31:ireturn         
		}

		public ItemHolderInfo obtainHolderInfo()
		{
			return new ItemHolderInfo();
		//    0    0:new             #18  <Class RecyclerView$ItemAnimator$ItemHolderInfo>
		//    1    3:dup             
		//    2    4:invokespecial   #140 <Method void RecyclerView$ItemAnimator$ItemHolderInfo()>
		//    3    7:areturn         
		}

		public void onAnimationFinished(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onAnimationStarted(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public ItemHolderInfo recordPostLayoutInformation(State state, ViewHolder viewholder)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public ItemHolderInfo recordPreLayoutInformation(State state, ViewHolder viewholder, int i, List list)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public abstract void runPendingAnimations();

		public void setAddDuration(long l)
		{
			mAddDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #55  <Field long mAddDuration>
		//    3    5:return          
		}

		public void setChangeDuration(long l)
		{
			mChangeDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #63  <Field long mChangeDuration>
		//    3    5:return          
		}

		void setListener(ItemAnimatorListener itemanimatorlistener)
		{
			mListener = itemanimatorlistener;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    3    5:return          
		}

		public void setMoveDuration(long l)
		{
			mMoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #61  <Field long mMoveDuration>
		//    3    5:return          
		}

		public void setRemoveDuration(long l)
		{
			mRemoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #57  <Field long mRemoveDuration>
		//    3    5:return          
		}

		public static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		public static final int FLAG_CHANGED = 2;
		public static final int FLAG_INVALIDATED = 4;
		public static final int FLAG_MOVED = 2048;
		public static final int FLAG_REMOVED = 8;
		private long mAddDuration;
		private long mChangeDuration;
		private ArrayList mFinishedListeners;
		private ItemAnimatorListener mListener;
		private long mMoveDuration;
		private long mRemoveDuration;

		public ItemAnimator()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #44  <Method void Object()>
			mListener = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
			mFinishedListeners = new ArrayList();
		//    5    9:aload_0         
		//    6   10:new             #48  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #49  <Method void ArrayList()>
		//    9   17:putfield        #51  <Field ArrayList mFinishedListeners>
			mAddDuration = 120L;
		//   10   20:aload_0         
		//   11   21:ldc2w           #52  <Long 120L>
		//   12   24:putfield        #55  <Field long mAddDuration>
			mRemoveDuration = 120L;
		//   13   27:aload_0         
		//   14   28:ldc2w           #52  <Long 120L>
		//   15   31:putfield        #57  <Field long mRemoveDuration>
			mMoveDuration = 250L;
		//   16   34:aload_0         
		//   17   35:ldc2w           #58  <Long 250L>
		//   18   38:putfield        #61  <Field long mMoveDuration>
			mChangeDuration = 250L;
		//   19   41:aload_0         
		//   20   42:ldc2w           #58  <Long 250L>
		//   21   45:putfield        #63  <Field long mChangeDuration>
		//   22   48:return          
		}
	}

	public static interface ItemAnimator.AdapterChanges
		extends Annotation
	{
	}

	public static interface ItemAnimator.ItemAnimatorFinishedListener
	{

		public abstract void onAnimationsFinished();
	}

	static interface ItemAnimator.ItemAnimatorListener
	{

		public abstract void onAnimationFinished(ViewHolder viewholder);
	}

	public static class ItemAnimator.ItemHolderInfo
	{

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder)
		{
			return setFrom(viewholder, 0);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #26  <Method RecyclerView$ItemAnimator$ItemHolderInfo setFrom(RecyclerView$ViewHolder, int)>
		//    4    6:areturn         
		}

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder, int i)
		{
			viewholder = ((ViewHolder) (viewholder.itemView));
		//    0    0:aload_1         
		//    1    1:getfield        #32  <Field View RecyclerView$ViewHolder.itemView>
		//    2    4:astore_1        
			left = ((View) (viewholder)).getLeft();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #38  <Method int View.getLeft()>
		//    6   10:putfield        #40  <Field int left>
			top = ((View) (viewholder)).getTop();
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:invokevirtual   #43  <Method int View.getTop()>
		//   10   18:putfield        #45  <Field int top>
			right = ((View) (viewholder)).getRight();
		//   11   21:aload_0         
		//   12   22:aload_1         
		//   13   23:invokevirtual   #48  <Method int View.getRight()>
		//   14   26:putfield        #50  <Field int right>
			bottom = ((View) (viewholder)).getBottom();
		//   15   29:aload_0         
		//   16   30:aload_1         
		//   17   31:invokevirtual   #53  <Method int View.getBottom()>
		//   18   34:putfield        #55  <Field int bottom>
			return this;
		//   19   37:aload_0         
		//   20   38:areturn         
		}

		public int bottom;
		public int changeFlags;
		public int left;
		public int right;
		public int top;

		public ItemAnimator.ItemHolderInfo()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	class ItemAnimatorRestoreListener
		implements ItemAnimator.ItemAnimatorListener
	{

		public void onAnimationFinished(ViewHolder viewholder)
		{
			viewholder.setIsRecyclable(true);
		//    0    0:aload_1         
		//    1    1:iconst_1        
		//    2    2:invokevirtual   #27  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			if(viewholder.mShadowedHolder != null && viewholder.mShadowingHolder == null)
		//*   3    5:aload_1         
		//*   4    6:getfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
		//*   5    9:ifnull          24
		//*   6   12:aload_1         
		//*   7   13:getfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		//*   8   16:ifnonnull       24
				viewholder.mShadowedHolder = null;
		//    9   19:aload_1         
		//   10   20:aconst_null     
		//   11   21:putfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			viewholder.mShadowingHolder = null;
		//   12   24:aload_1         
		//   13   25:aconst_null     
		//   14   26:putfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
			if(!viewholder.shouldBeKeptAsChild() && !removeAnimatingView(viewholder.itemView) && viewholder.isTmpDetached())
		//*  15   29:aload_1         
		//*  16   30:invokestatic    #38  <Method boolean RecyclerView$ViewHolder.access$1300(RecyclerView$ViewHolder)>
		//*  17   33:ifne            69
		//*  18   36:aload_0         
		//*  19   37:getfield        #15  <Field RecyclerView this$0>
		//*  20   40:aload_1         
		//*  21   41:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   44:invokevirtual   #46  <Method boolean RecyclerView.removeAnimatingView(View)>
		//*  23   47:ifne            69
		//*  24   50:aload_1         
		//*  25   51:invokevirtual   #50  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  26   54:ifeq            69
				removeDetachedView(viewholder.itemView, false);
		//   27   57:aload_0         
		//   28   58:getfield        #15  <Field RecyclerView this$0>
		//   29   61:aload_1         
		//   30   62:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//   31   65:iconst_0        
		//   32   66:invokevirtual   #54  <Method void RecyclerView.removeDetachedView(View, boolean)>
		//   33   69:return          
		}

		final RecyclerView this$0;

		ItemAnimatorRestoreListener()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #15  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #18  <Method void Object()>
		//    5    9:return          
		}
	}

	public static abstract class ItemDecoration
	{

		public void getItemOffsets(Rect rect, int i, RecyclerView recyclerview)
		{
			rect.set(0, 0, 0, 0);
		//    0    0:aload_1         
		//    1    1:iconst_0        
		//    2    2:iconst_0        
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #21  <Method void Rect.set(int, int, int, int)>
		//    6    8:return          
		}

		public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, State state)
		{
			getItemOffsets(rect, ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition(), recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #29  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    6:checkcast       #31  <Class RecyclerView$LayoutParams>
		//    5    9:invokevirtual   #35  <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    6   12:aload_3         
		//    7   13:invokevirtual   #37  <Method void getItemOffsets(Rect, int, RecyclerView)>
		//    8   16:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDraw(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #42  <Method void onDraw(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDrawOver(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #45  <Method void onDrawOver(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public ItemDecoration()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class LayoutManager
	{

		private void addViewInt(View view, int i, boolean flag)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          6
			if(flag || viewholder.isRemoved())
		//*   3    6:iload_3         
		//*   4    7:ifne            18
		//*   5   10:aload           6
		//*   6   12:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   15:ifeq            33
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    8   18:aload_0         
		//    9   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//   10   22:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   11   25:aload           6
		//   12   27:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  13   30:goto            45
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   14   33:aload_0         
		//   15   34:getfield        #95  <Field RecyclerView mRecyclerView>
		//   16   37:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   17   40:aload           6
		//   18   42:invokevirtual   #108 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//   19   45:aload_1         
		//   20   46:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   21   49:checkcast       #116 <Class RecyclerView$LayoutParams>
		//   22   52:astore          7
			if(viewholder.wasReturnedFromScrap() || viewholder.isScrap())
		//*  23   54:aload           6
		//*  24   56:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  25   59:ifne            70
		//*  26   62:aload           6
		//*  27   64:invokevirtual   #122 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  28   67:ifeq            108
			{
				if(viewholder.isScrap())
		//*  29   70:aload           6
		//*  30   72:invokevirtual   #122 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  31   75:ifeq            86
					viewholder.unScrap();
		//   32   78:aload           6
		//   33   80:invokevirtual   #125 <Method void RecyclerView$ViewHolder.unScrap()>
				else
		//*  34   83:goto            91
					viewholder.clearReturnedFromScrapFlag();
		//   35   86:aload           6
		//   36   88:invokevirtual   #128 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
				mChildHelper.attachViewToParent(view, i, view.getLayoutParams(), false);
		//   37   91:aload_0         
		//   38   92:getfield        #130 <Field ChildHelper mChildHelper>
		//   39   95:aload_1         
		//   40   96:iload_2         
		//   41   97:aload_1         
		//   42   98:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   43  101:iconst_0        
		//   44  102:invokevirtual   #136 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			} else
		//*  45  105:goto            251
			if(view.getParent() == mRecyclerView)
		//*  46  108:aload_1         
		//*  47  109:invokevirtual   #140 <Method ViewParent View.getParent()>
		//*  48  112:aload_0         
		//*  49  113:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  50  116:if_acmpne       210
			{
				int k = mChildHelper.indexOfChild(view);
		//   51  119:aload_0         
		//   52  120:getfield        #130 <Field ChildHelper mChildHelper>
		//   53  123:aload_1         
		//   54  124:invokevirtual   #144 <Method int ChildHelper.indexOfChild(View)>
		//   55  127:istore          5
				int j = i;
		//   56  129:iload_2         
		//   57  130:istore          4
				if(i == -1)
		//*  58  132:iload_2         
		//*  59  133:iconst_m1       
		//*  60  134:icmpne          146
					j = mChildHelper.getChildCount();
		//   61  137:aload_0         
		//   62  138:getfield        #130 <Field ChildHelper mChildHelper>
		//   63  141:invokevirtual   #148 <Method int ChildHelper.getChildCount()>
		//   64  144:istore          4
				if(k == -1)
		//*  65  146:iload           5
		//*  66  148:iconst_m1       
		//*  67  149:icmpne          186
					throw new IllegalStateException((new StringBuilder()).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:").append(mRecyclerView.indexOfChild(view)).toString());
		//   68  152:new             #150 <Class IllegalStateException>
		//   69  155:dup             
		//   70  156:new             #152 <Class StringBuilder>
		//   71  159:dup             
		//   72  160:invokespecial   #153 <Method void StringBuilder()>
		//   73  163:ldc1            #155 <String "Added View has RecyclerView as parent but view is not a real child. Unfiltered index:">
		//   74  165:invokevirtual   #159 <Method StringBuilder StringBuilder.append(String)>
		//   75  168:aload_0         
		//   76  169:getfield        #95  <Field RecyclerView mRecyclerView>
		//   77  172:aload_1         
		//   78  173:invokevirtual   #160 <Method int RecyclerView.indexOfChild(View)>
		//   79  176:invokevirtual   #163 <Method StringBuilder StringBuilder.append(int)>
		//   80  179:invokevirtual   #167 <Method String StringBuilder.toString()>
		//   81  182:invokespecial   #170 <Method void IllegalStateException(String)>
		//   82  185:athrow          
				if(k != j)
		//*  83  186:iload           5
		//*  84  188:iload           4
		//*  85  190:icmpeq          207
					mRecyclerView.mLayout.moveView(k, j);
		//   86  193:aload_0         
		//   87  194:getfield        #95  <Field RecyclerView mRecyclerView>
		//   88  197:getfield        #174 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   89  200:iload           5
		//   90  202:iload           4
		//   91  204:invokevirtual   #178 <Method void moveView(int, int)>
			} else
		//*  92  207:goto            251
			{
				mChildHelper.addView(view, i, false);
		//   93  210:aload_0         
		//   94  211:getfield        #130 <Field ChildHelper mChildHelper>
		//   95  214:aload_1         
		//   96  215:iload_2         
		//   97  216:iconst_0        
		//   98  217:invokevirtual   #181 <Method void ChildHelper.addView(View, int, boolean)>
				layoutparams.mInsetsDirty = true;
		//   99  220:aload           7
		//  100  222:iconst_1        
		//  101  223:putfield        #184 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
				if(mSmoothScroller != null && mSmoothScroller.isRunning())
		//* 102  226:aload_0         
		//* 103  227:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 104  230:ifnull          251
		//* 105  233:aload_0         
		//* 106  234:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 107  237:invokevirtual   #191 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 108  240:ifeq            251
					mSmoothScroller.onChildAttachedToWindow(view);
		//  109  243:aload_0         
		//  110  244:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  111  247:aload_1         
		//  112  248:invokevirtual   #195 <Method void RecyclerView$SmoothScroller.onChildAttachedToWindow(View)>
			}
			if(layoutparams.mPendingInvalidate)
		//* 113  251:aload           7
		//* 114  253:getfield        #198 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//* 115  256:ifeq            273
			{
				viewholder.itemView.invalidate();
		//  116  259:aload           6
		//  117  261:getfield        #202 <Field View RecyclerView$ViewHolder.itemView>
		//  118  264:invokevirtual   #205 <Method void View.invalidate()>
				layoutparams.mPendingInvalidate = false;
		//  119  267:aload           7
		//  120  269:iconst_0        
		//  121  270:putfield        #198 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
			}
		//  122  273:return          
		}

		public static int chooseSize(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(i);
		//    0    0:iload_0         
		//    1    1:invokestatic    #213 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			i = android.view.View.MeasureSpec.getSize(i);
		//    3    5:iload_0         
		//    4    6:invokestatic    #216 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_0        
			switch(l)
		//*   6   10:iload_3         
			{
		//*   7   11:lookupswitch    3: default 44
		//		               -2147483648: 49
		//		               0: 59
		//		               1073741824: 47
		//*   8   44:goto            59
			case 1073741824: 
				return i;
		//    9   47:iload_0         
		//   10   48:ireturn         

			case -2147483648: 
				return Math.min(i, Math.max(j, k));
		//   11   49:iload_0         
		//   12   50:iload_1         
		//   13   51:iload_2         
		//   14   52:invokestatic    #222 <Method int Math.max(int, int)>
		//   15   55:invokestatic    #225 <Method int Math.min(int, int)>
		//   16   58:ireturn         
			}
			return Math.max(j, k);
		//   17   59:iload_1         
		//   18   60:iload_2         
		//   19   61:invokestatic    #222 <Method int Math.max(int, int)>
		//   20   64:ireturn         
		}

		private void detachViewInternal(int i, View view)
		{
			mChildHelper.detachViewFromParent(i);
		//    0    0:aload_0         
		//    1    1:getfield        #130 <Field ChildHelper mChildHelper>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #231 <Method void ChildHelper.detachViewFromParent(int)>
		//    4    8:return          
		}

		public static int getChildMeasureSpec(int i, int j, int k, int l, boolean flag)
		{
			int i1 = Math.max(0, i - k);
		//    0    0:iconst_0        
		//    1    1:iload_0         
		//    2    2:iload_2         
		//    3    3:isub            
		//    4    4:invokestatic    #222 <Method int Math.max(int, int)>
		//    5    7:istore          5
			boolean flag2 = false;
		//    6    9:iconst_0        
		//    7   10:istore          7
			k = 0;
		//    8   12:iconst_0        
		//    9   13:istore_2        
			boolean flag1 = false;
		//   10   14:iconst_0        
		//   11   15:istore          6
			i = 0;
		//   12   17:iconst_0        
		//   13   18:istore_0        
			if(flag)
		//*  14   19:iload           4
		//*  15   21:ifeq            113
			{
				if(l >= 0)
		//*  16   24:iload_3         
		//*  17   25:iflt            36
				{
					k = l;
		//   18   28:iload_3         
		//   19   29:istore_2        
					i = 0x40000000;
		//   20   30:ldc1            #234 <Int 0x40000000>
		//   21   32:istore_0        
				} else
		//*  22   33:goto            173
				if(l == -1)
		//*  23   36:iload_3         
		//*  24   37:iconst_m1       
		//*  25   38:icmpne          94
				{
					switch(j)
		//*  26   41:iload_1         
					{
		//*  27   42:lookupswitch    3: default 76
		//		               -2147483648: 79
		//		               0: 87
		//		               1073741824: 79
		//*  28   76:goto            91
					case -2147483648: 
					case 1073741824: 
						k = i1;
		//   29   79:iload           5
		//   30   81:istore_2        
						i = j;
		//   31   82:iload_1         
		//   32   83:istore_0        
						break;

		//*  33   84:goto            91
					case 0: // '\0'
						k = 0;
		//   34   87:iconst_0        
		//   35   88:istore_2        
						i = 0;
		//   36   89:iconst_0        
		//   37   90:istore_0        
						break;
					}
				} else
		//*  38   91:goto            173
				{
					k = ((int) (flag2));
		//   39   94:iload           7
		//   40   96:istore_2        
					i = ((int) (flag1));
		//   41   97:iload           6
		//   42   99:istore_0        
					if(l == -2)
		//*  43  100:iload_3         
		//*  44  101:bipush          -2
		//*  45  103:icmpne          173
					{
						k = 0;
		//   46  106:iconst_0        
		//   47  107:istore_2        
						i = 0;
		//   48  108:iconst_0        
		//   49  109:istore_0        
					}
				}
			} else
		//*  50  110:goto            173
			if(l >= 0)
		//*  51  113:iload_3         
		//*  52  114:iflt            125
			{
				k = l;
		//   53  117:iload_3         
		//   54  118:istore_2        
				i = 0x40000000;
		//   55  119:ldc1            #234 <Int 0x40000000>
		//   56  121:istore_0        
			} else
		//*  57  122:goto            173
			if(l == -1)
		//*  58  125:iload_3         
		//*  59  126:iconst_m1       
		//*  60  127:icmpne          138
			{
				k = i1;
		//   61  130:iload           5
		//   62  132:istore_2        
				i = j;
		//   63  133:iload_1         
		//   64  134:istore_0        
			} else
		//*  65  135:goto            173
			{
				k = ((int) (flag2));
		//   66  138:iload           7
		//   67  140:istore_2        
				i = ((int) (flag1));
		//   68  141:iload           6
		//   69  143:istore_0        
				if(l == -2)
		//*  70  144:iload_3         
		//*  71  145:bipush          -2
		//*  72  147:icmpne          173
				{
					k = i1;
		//   73  150:iload           5
		//   74  152:istore_2        
					if(j == 0x80000000 || j == 0x40000000)
		//*  75  153:iload_1         
		//*  76  154:ldc1            #235 <Int 0x80000000>
		//*  77  156:icmpeq          165
		//*  78  159:iload_1         
		//*  79  160:ldc1            #234 <Int 0x40000000>
		//*  80  162:icmpne          171
						i = 0x80000000;
		//   81  165:ldc1            #235 <Int 0x80000000>
		//   82  167:istore_0        
					else
		//*  83  168:goto            173
						i = 0;
		//   84  171:iconst_0        
		//   85  172:istore_0        
				}
			}
			return android.view.View.MeasureSpec.makeMeasureSpec(k, i);
		//   86  173:iload_2         
		//   87  174:iload_0         
		//   88  175:invokestatic    #238 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   89  178:ireturn         
		}

		public static int getChildMeasureSpec(int i, int j, int k, boolean flag)
		{
			int l = Math.max(0, i - j);
		//    0    0:iconst_0        
		//    1    1:iload_0         
		//    2    2:iload_1         
		//    3    3:isub            
		//    4    4:invokestatic    #222 <Method int Math.max(int, int)>
		//    5    7:istore          4
			i = 0;
		//    6    9:iconst_0        
		//    7   10:istore_0        
			j = 0;
		//    8   11:iconst_0        
		//    9   12:istore_1        
			if(flag)
		//*  10   13:iload_3         
		//*  11   14:ifeq            36
			{
				if(k >= 0)
		//*  12   17:iload_2         
		//*  13   18:iflt            29
				{
					i = k;
		//   14   21:iload_2         
		//   15   22:istore_0        
					j = 0x40000000;
		//   16   23:ldc1            #234 <Int 0x40000000>
		//   17   25:istore_1        
				} else
		//*  18   26:goto            74
				{
					i = 0;
		//   19   29:iconst_0        
		//   20   30:istore_0        
					j = 0;
		//   21   31:iconst_0        
		//   22   32:istore_1        
				}
			} else
		//*  23   33:goto            74
			if(k >= 0)
		//*  24   36:iload_2         
		//*  25   37:iflt            48
			{
				i = k;
		//   26   40:iload_2         
		//   27   41:istore_0        
				j = 0x40000000;
		//   28   42:ldc1            #234 <Int 0x40000000>
		//   29   44:istore_1        
			} else
		//*  30   45:goto            74
			if(k == -1)
		//*  31   48:iload_2         
		//*  32   49:iconst_m1       
		//*  33   50:icmpne          62
			{
				i = l;
		//   34   53:iload           4
		//   35   55:istore_0        
				j = 0x40000000;
		//   36   56:ldc1            #234 <Int 0x40000000>
		//   37   58:istore_1        
			} else
		//*  38   59:goto            74
			if(k == -2)
		//*  39   62:iload_2         
		//*  40   63:bipush          -2
		//*  41   65:icmpne          74
			{
				i = l;
		//   42   68:iload           4
		//   43   70:istore_0        
				j = 0x80000000;
		//   44   71:ldc1            #235 <Int 0x80000000>
		//   45   73:istore_1        
			}
			return android.view.View.MeasureSpec.makeMeasureSpec(i, j);
		//   46   74:iload_0         
		//   47   75:iload_1         
		//   48   76:invokestatic    #238 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   49   79:ireturn         
		}

		private int[] getChildRectangleOnScreenScrollAmount(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			int k1 = getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #246 <Method int getPaddingLeft()>
		//    2    4:istore          11
			int l = getPaddingTop();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #249 <Method int getPaddingTop()>
		//    5   10:istore          8
			int l1 = getWidth() - getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #252 <Method int getWidth()>
		//    8   16:aload_0         
		//    9   17:invokevirtual   #255 <Method int getPaddingRight()>
		//   10   20:isub            
		//   11   21:istore          12
			int j1 = getHeight();
		//   12   23:aload_0         
		//   13   24:invokevirtual   #258 <Method int getHeight()>
		//   14   27:istore          10
			int k2 = getPaddingBottom();
		//   15   29:aload_0         
		//   16   30:invokevirtual   #261 <Method int getPaddingBottom()>
		//   17   33:istore          15
			int i2 = (view.getLeft() + rect.left) - view.getScrollX();
		//   18   35:aload_2         
		//   19   36:invokevirtual   #264 <Method int View.getLeft()>
		//   20   39:aload_3         
		//   21   40:getfield        #269 <Field int Rect.left>
		//   22   43:iadd            
		//   23   44:aload_2         
		//   24   45:invokevirtual   #272 <Method int View.getScrollX()>
		//   25   48:isub            
		//   26   49:istore          13
			int i1 = (view.getTop() + rect.top) - view.getScrollY();
		//   27   51:aload_2         
		//   28   52:invokevirtual   #275 <Method int View.getTop()>
		//   29   55:aload_3         
		//   30   56:getfield        #278 <Field int Rect.top>
		//   31   59:iadd            
		//   32   60:aload_2         
		//   33   61:invokevirtual   #281 <Method int View.getScrollY()>
		//   34   64:isub            
		//   35   65:istore          9
			int j2 = i2 + rect.width();
		//   36   67:iload           13
		//   37   69:aload_3         
		//   38   70:invokevirtual   #284 <Method int Rect.width()>
		//   39   73:iadd            
		//   40   74:istore          14
			int l2 = rect.height();
		//   41   76:aload_3         
		//   42   77:invokevirtual   #287 <Method int Rect.height()>
		//   43   80:istore          16
			int i = Math.min(0, i2 - k1);
		//   44   82:iconst_0        
		//   45   83:iload           13
		//   46   85:iload           11
		//   47   87:isub            
		//   48   88:invokestatic    #225 <Method int Math.min(int, int)>
		//   49   91:istore          5
			int j = Math.min(0, i1 - l);
		//   50   93:iconst_0        
		//   51   94:iload           9
		//   52   96:iload           8
		//   53   98:isub            
		//   54   99:invokestatic    #225 <Method int Math.min(int, int)>
		//   55  102:istore          6
			int k = Math.max(0, j2 - l1);
		//   56  104:iconst_0        
		//   57  105:iload           14
		//   58  107:iload           12
		//   59  109:isub            
		//   60  110:invokestatic    #222 <Method int Math.max(int, int)>
		//   61  113:istore          7
			j1 = Math.max(0, (i1 + l2) - (j1 - k2));
		//   62  115:iconst_0        
		//   63  116:iload           9
		//   64  118:iload           16
		//   65  120:iadd            
		//   66  121:iload           10
		//   67  123:iload           15
		//   68  125:isub            
		//   69  126:isub            
		//   70  127:invokestatic    #222 <Method int Math.max(int, int)>
		//   71  130:istore          10
			if(getLayoutDirection() == 1)
		//*  72  132:aload_0         
		//*  73  133:invokevirtual   #290 <Method int getLayoutDirection()>
		//*  74  136:iconst_1        
		//*  75  137:icmpne          167
			{
				if(k != 0)
		//*  76  140:iload           7
		//*  77  142:ifeq            152
					i = k;
		//   78  145:iload           7
		//   79  147:istore          5
				else
		//*  80  149:goto            164
					i = Math.max(i, j2 - l1);
		//   81  152:iload           5
		//   82  154:iload           14
		//   83  156:iload           12
		//   84  158:isub            
		//   85  159:invokestatic    #222 <Method int Math.max(int, int)>
		//   86  162:istore          5
			} else
		//*  87  164:goto            187
			if(i == 0)
		//*  88  167:iload           5
		//*  89  169:ifeq            175
		//*  90  172:goto            187
				i = Math.min(i2 - k1, k);
		//   91  175:iload           13
		//   92  177:iload           11
		//   93  179:isub            
		//   94  180:iload           7
		//   95  182:invokestatic    #225 <Method int Math.min(int, int)>
		//   96  185:istore          5
			if(j == 0)
		//*  97  187:iload           6
		//*  98  189:ifeq            195
		//*  99  192:goto            207
				j = Math.min(i1 - l, j1);
		//  100  195:iload           9
		//  101  197:iload           8
		//  102  199:isub            
		//  103  200:iload           10
		//  104  202:invokestatic    #225 <Method int Math.min(int, int)>
		//  105  205:istore          6
			return (new int[] {
				i, j
			});
		//  106  207:iconst_2        
		//  107  208:newarray        int[]
		//  108  210:dup             
		//  109  211:iconst_0        
		//  110  212:iload           5
		//  111  214:iastore         
		//  112  215:dup             
		//  113  216:iconst_1        
		//  114  217:iload           6
		//  115  219:iastore         
		//  116  220:areturn         
		}

		public static Properties getProperties(Context context, AttributeSet attributeset, int i, int j)
		{
			Properties properties = new Properties();
		//    0    0:new             #16  <Class RecyclerView$LayoutManager$Properties>
		//    1    3:dup             
		//    2    4:invokespecial   #293 <Method void RecyclerView$LayoutManager$Properties()>
		//    3    7:astore          4
			context = ((Context) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, j)));
		//    4    9:aload_0         
		//    5   10:aload_1         
		//    6   11:getstatic       #299 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
		//    7   14:iload_2         
		//    8   15:iload_3         
		//    9   16:invokevirtual   #305 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
		//   10   19:astore_0        
			properties.orientation = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_orientation, 1);
		//   11   20:aload           4
		//   12   22:aload_0         
		//   13   23:getstatic       #308 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_orientation>
		//   14   26:iconst_1        
		//   15   27:invokevirtual   #313 <Method int TypedArray.getInt(int, int)>
		//   16   30:putfield        #316 <Field int RecyclerView$LayoutManager$Properties.orientation>
			properties.spanCount = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_spanCount, 1);
		//   17   33:aload           4
		//   18   35:aload_0         
		//   19   36:getstatic       #319 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_spanCount>
		//   20   39:iconst_1        
		//   21   40:invokevirtual   #313 <Method int TypedArray.getInt(int, int)>
		//   22   43:putfield        #322 <Field int RecyclerView$LayoutManager$Properties.spanCount>
			properties.reverseLayout = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_reverseLayout, false);
		//   23   46:aload           4
		//   24   48:aload_0         
		//   25   49:getstatic       #325 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_reverseLayout>
		//   26   52:iconst_0        
		//   27   53:invokevirtual   #329 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   28   56:putfield        #332 <Field boolean RecyclerView$LayoutManager$Properties.reverseLayout>
			properties.stackFromEnd = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_stackFromEnd, false);
		//   29   59:aload           4
		//   30   61:aload_0         
		//   31   62:getstatic       #335 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_stackFromEnd>
		//   32   65:iconst_0        
		//   33   66:invokevirtual   #329 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   34   69:putfield        #338 <Field boolean RecyclerView$LayoutManager$Properties.stackFromEnd>
			((TypedArray) (context)).recycle();
		//   35   72:aload_0         
		//   36   73:invokevirtual   #341 <Method void TypedArray.recycle()>
			return properties;
		//   37   76:aload           4
		//   38   78:areturn         
		}

		private boolean isFocusedChildVisibleAfterScrolling(RecyclerView recyclerview, int i, int j)
		{
			recyclerview = ((RecyclerView) (recyclerview.getFocusedChild()));
		//    0    0:aload_1         
		//    1    1:invokevirtual   #347 <Method View RecyclerView.getFocusedChild()>
		//    2    4:astore_1        
			if(recyclerview == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return false;
		//    5    9:iconst_0        
		//    6   10:ireturn         
			int k = getPaddingLeft();
		//    7   11:aload_0         
		//    8   12:invokevirtual   #246 <Method int getPaddingLeft()>
		//    9   15:istore          4
			int l = getPaddingTop();
		//   10   17:aload_0         
		//   11   18:invokevirtual   #249 <Method int getPaddingTop()>
		//   12   21:istore          5
			int i1 = getWidth();
		//   13   23:aload_0         
		//   14   24:invokevirtual   #252 <Method int getWidth()>
		//   15   27:istore          6
			int j1 = getPaddingRight();
		//   16   29:aload_0         
		//   17   30:invokevirtual   #255 <Method int getPaddingRight()>
		//   18   33:istore          7
			int k1 = getHeight();
		//   19   35:aload_0         
		//   20   36:invokevirtual   #258 <Method int getHeight()>
		//   21   39:istore          8
			int l1 = getPaddingBottom();
		//   22   41:aload_0         
		//   23   42:invokevirtual   #261 <Method int getPaddingBottom()>
		//   24   45:istore          9
			Rect rect = mRecyclerView.mTempRect;
		//   25   47:aload_0         
		//   26   48:getfield        #95  <Field RecyclerView mRecyclerView>
		//   27   51:getfield        #351 <Field Rect RecyclerView.mTempRect>
		//   28   54:astore          10
			getDecoratedBoundsWithMargins(((View) (recyclerview)), rect);
		//   29   56:aload_0         
		//   30   57:aload_1         
		//   31   58:aload           10
		//   32   60:invokevirtual   #355 <Method void getDecoratedBoundsWithMargins(View, Rect)>
			return rect.left - i < i1 - j1 && rect.right - i > k && rect.top - j < k1 - l1 && rect.bottom - j > l;
		//   33   63:aload           10
		//   34   65:getfield        #269 <Field int Rect.left>
		//   35   68:iload_2         
		//   36   69:isub            
		//   37   70:iload           6
		//   38   72:iload           7
		//   39   74:isub            
		//   40   75:icmpge          117
		//   41   78:aload           10
		//   42   80:getfield        #358 <Field int Rect.right>
		//   43   83:iload_2         
		//   44   84:isub            
		//   45   85:iload           4
		//   46   87:icmple          117
		//   47   90:aload           10
		//   48   92:getfield        #278 <Field int Rect.top>
		//   49   95:iload_3         
		//   50   96:isub            
		//   51   97:iload           8
		//   52   99:iload           9
		//   53  101:isub            
		//   54  102:icmpge          117
		//   55  105:aload           10
		//   56  107:getfield        #361 <Field int Rect.bottom>
		//   57  110:iload_3         
		//   58  111:isub            
		//   59  112:iload           5
		//   60  114:icmpgt          119
		//   61  117:iconst_0        
		//   62  118:ireturn         
		//   63  119:iconst_1        
		//   64  120:ireturn         
		}

		private static boolean isMeasurementUpToDate(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(j);
		//    0    0:iload_1         
		//    1    1:invokestatic    #213 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			j = android.view.View.MeasureSpec.getSize(j);
		//    3    5:iload_1         
		//    4    6:invokestatic    #216 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_1        
			if(k > 0 && i != k)
		//*   6   10:iload_2         
		//*   7   11:ifle            21
		//*   8   14:iload_0         
		//*   9   15:iload_2         
		//*  10   16:icmpeq          21
				return false;
		//   11   19:iconst_0        
		//   12   20:ireturn         
			switch(l)
		//*  13   21:iload_3         
			{
		//*  14   22:lookupswitch    3: default 56
		//		               -2147483648: 61
		//		               0: 59
		//		               1073741824: 70
		//*  15   56:goto            79
			case 0: // '\0'
				return true;
		//   16   59:iconst_1        
		//   17   60:ireturn         

			case -2147483648: 
				return j >= i;
		//   18   61:iload_1         
		//   19   62:iload_0         
		//   20   63:icmplt          68
		//   21   66:iconst_1        
		//   22   67:ireturn         
		//   23   68:iconst_0        
		//   24   69:ireturn         

			case 1073741824: 
				return j == i;
		//   25   70:iload_1         
		//   26   71:iload_0         
		//   27   72:icmpne          77
		//   28   75:iconst_1        
		//   29   76:ireturn         
		//   30   77:iconst_0        
		//   31   78:ireturn         
			}
			return false;
		//   32   79:iconst_0        
		//   33   80:ireturn         
		}

		private void onSmoothScrollerStopped(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller == smoothscroller)
		//*   0    0:aload_0         
		//*   1    1:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:aload_1         
		//*   3    5:if_acmpne       13
				mSmoothScroller = null;
		//    4    8:aload_0         
		//    5    9:aconst_null     
		//    6   10:putfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    7   13:return          
		}

		private void scrapOrRecycleView(Recycler recycler, int i, View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_3         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.shouldIgnore())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #368 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*   5   11:ifeq            15
				return;
		//    6   14:return          
			if(viewholder.isInvalid() && !viewholder.isRemoved() && !mRecyclerView.mAdapter.hasStableIds())
		//*   7   15:aload           4
		//*   8   17:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   9   20:ifeq            56
		//*  10   23:aload           4
		//*  11   25:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  12   28:ifne            56
		//*  13   31:aload_0         
		//*  14   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  15   35:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   38:invokevirtual   #380 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  17   41:ifne            56
			{
				removeViewAt(i);
		//   18   44:aload_0         
		//   19   45:iload_2         
		//   20   46:invokevirtual   #383 <Method void removeViewAt(int)>
				recycler.recycleViewHolderInternal(viewholder);
		//   21   49:aload_1         
		//   22   50:aload           4
		//   23   52:invokevirtual   #388 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
				return;
		//   24   55:return          
			} else
			{
				detachViewAt(i);
		//   25   56:aload_0         
		//   26   57:iload_2         
		//   27   58:invokevirtual   #391 <Method void detachViewAt(int)>
				recycler.scrapView(view);
		//   28   61:aload_1         
		//   29   62:aload_3         
		//   30   63:invokevirtual   #394 <Method void RecyclerView$Recycler.scrapView(View)>
				mRecyclerView.mViewInfoStore.onViewDetached(viewholder);
		//   31   66:aload_0         
		//   32   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   70:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   73:aload           4
		//   35   75:invokevirtual   #397 <Method void ViewInfoStore.onViewDetached(RecyclerView$ViewHolder)>
				return;
		//   36   78:return          
			}
		}

		public void addDisappearingView(View view)
		{
			addDisappearingView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #401 <Method void addDisappearingView(View, int)>
		//    4    6:return          
		}

		public void addDisappearingView(View view, int i)
		{
			addViewInt(view, i, true);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_1        
		//    4    4:invokespecial   #403 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void addView(View view)
		{
			addView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #405 <Method void addView(View, int)>
		//    4    6:return          
		}

		public void addView(View view, int i)
		{
			addViewInt(view, i, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:invokespecial   #403 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void assertInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #408 <Method void RecyclerView.assertInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void assertNotInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertNotInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #411 <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void attachView(View view)
		{
			attachView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #414 <Method void attachView(View, int)>
		//    4    6:return          
		}

		public void attachView(View view, int i)
		{
			attachView(view, i, (LayoutParams)view.getLayoutParams());
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:aload_1         
		//    4    4:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    5    7:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    6   10:invokevirtual   #417 <Method void attachView(View, int, RecyclerView$LayoutParams)>
		//    7   13:return          
		}

		public void attachView(View view, int i, LayoutParams layoutparams)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.isRemoved())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   5   11:ifeq            29
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    6   14:aload_0         
		//    7   15:getfield        #95  <Field RecyclerView mRecyclerView>
		//    8   18:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//    9   21:aload           4
		//   10   23:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  11   26:goto            41
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   12   29:aload_0         
		//   13   30:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   33:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   15   36:aload           4
		//   16   38:invokevirtual   #108 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			mChildHelper.attachViewToParent(view, i, ((android.view.ViewGroup.LayoutParams) (layoutparams)), viewholder.isRemoved());
		//   17   41:aload_0         
		//   18   42:getfield        #130 <Field ChildHelper mChildHelper>
		//   19   45:aload_1         
		//   20   46:iload_2         
		//   21   47:aload_3         
		//   22   48:aload           4
		//   23   50:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   24   53:invokevirtual   #136 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//   25   56:return          
		}

		public void calculateItemDecorationsForChild(View view, Rect rect)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       16
			{
				rect.set(0, 0, 0, 0);
		//    3    7:aload_2         
		//    4    8:iconst_0        
		//    5    9:iconst_0        
		//    6   10:iconst_0        
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #422 <Method void Rect.set(int, int, int, int)>
				return;
		//    9   15:return          
			} else
			{
				rect.set(mRecyclerView.getItemDecorInsetsForChild(view));
		//   10   16:aload_2         
		//   11   17:aload_0         
		//   12   18:getfield        #95  <Field RecyclerView mRecyclerView>
		//   13   21:aload_1         
		//   14   22:invokevirtual   #426 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//   15   25:invokevirtual   #429 <Method void Rect.set(Rect)>
				return;
		//   16   28:return          
			}
		}

		public boolean canScrollHorizontally()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean canScrollVertically()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean checkLayoutParams(LayoutParams layoutparams)
		{
			return layoutparams != null;
		//    0    0:aload_1         
		//    1    1:ifnull          6
		//    2    4:iconst_1        
		//    3    5:ireturn         
		//    4    6:iconst_0        
		//    5    7:ireturn         
		}

		public void collectAdjacentPrefetchPositions(int i, int j, State state, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public void collectInitialPrefetchPositions(int i, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public int computeHorizontalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void detachAndScrapAttachedViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #447 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            29
				scrapOrRecycleView(recycler, i, getChildAt(i));
		//    7   11:aload_0         
		//    8   12:aload_1         
		//    9   13:iload_2         
		//   10   14:aload_0         
		//   11   15:iload_2         
		//   12   16:invokevirtual   #451 <Method View getChildAt(int)>
		//   13   19:invokespecial   #453 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>

		//   14   22:iload_2         
		//   15   23:iconst_1        
		//   16   24:isub            
		//   17   25:istore_2        
		//*  18   26:goto            7
		//   19   29:return          
		}

		public void detachAndScrapView(View view, Recycler recycler)
		{
			scrapOrRecycleView(recycler, mChildHelper.indexOfChild(view), view);
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:aload_0         
		//    3    3:getfield        #130 <Field ChildHelper mChildHelper>
		//    4    6:aload_1         
		//    5    7:invokevirtual   #144 <Method int ChildHelper.indexOfChild(View)>
		//    6   10:aload_1         
		//    7   11:invokespecial   #453 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    8   14:return          
		}

		public void detachAndScrapViewAt(int i, Recycler recycler)
		{
			scrapOrRecycleView(recycler, i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:iload_1         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:invokevirtual   #451 <Method View getChildAt(int)>
		//    6    8:invokespecial   #453 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    7   11:return          
		}

		public void detachView(View view)
		{
			int i = mChildHelper.indexOfChild(view);
		//    0    0:aload_0         
		//    1    1:getfield        #130 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #144 <Method int ChildHelper.indexOfChild(View)>
		//    4    8:istore_2        
			if(i >= 0)
		//*   5    9:iload_2         
		//*   6   10:iflt            19
				detachViewInternal(i, view);
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:aload_1         
		//   10   16:invokespecial   #460 <Method void detachViewInternal(int, View)>
		//   11   19:return          
		}

		public void detachViewAt(int i)
		{
			detachViewInternal(i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:iload_1         
		//    4    4:invokevirtual   #451 <Method View getChildAt(int)>
		//    5    7:invokespecial   #460 <Method void detachViewInternal(int, View)>
		//    6   10:return          
		}

		void dispatchAttachedToWindow(RecyclerView recyclerview)
		{
			mIsAttachedToWindow = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onAttachedToWindow(recyclerview);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #465 <Method void onAttachedToWindow(RecyclerView)>
		//    6   10:return          
		}

		void dispatchDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			mIsAttachedToWindow = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onDetachedFromWindow(recyclerview, recycler);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:aload_2         
		//    6    8:invokevirtual   #470 <Method void onDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		//    7   11:return          
		}

		public void endAnimation(View view)
		{
			if(mRecyclerView.mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:getfield        #475 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          24
				mRecyclerView.mItemAnimator.endAnimation(RecyclerView.getChildViewHolderInt(view));
		//    4   10:aload_0         
		//    5   11:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   14:getfield        #475 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:aload_1         
		//    8   18:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    9   21:invokevirtual   #479 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
		//   10   24:return          
		}

		public View findContainingItemView(View view)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
				return null;
		//    3    7:aconst_null     
		//    4    8:areturn         
			view = mRecyclerView.findContainingItemView(view);
		//    5    9:aload_0         
		//    6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   13:aload_1         
		//    8   14:invokevirtual   #483 <Method View RecyclerView.findContainingItemView(View)>
		//    9   17:astore_1        
			if(view == null)
		//*  10   18:aload_1         
		//*  11   19:ifnonnull       24
				return null;
		//   12   22:aconst_null     
		//   13   23:areturn         
			if(mChildHelper.isHidden(view))
		//*  14   24:aload_0         
		//*  15   25:getfield        #130 <Field ChildHelper mChildHelper>
		//*  16   28:aload_1         
		//*  17   29:invokevirtual   #487 <Method boolean ChildHelper.isHidden(View)>
		//*  18   32:ifeq            37
				return null;
		//   19   35:aconst_null     
		//   20   36:areturn         
			else
				return view;
		//   21   37:aload_1         
		//   22   38:areturn         
		}

		public View findViewByPosition(int i)
		{
			int k = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #447 <Method int getChildCount()>
		//    2    4:istore_3        
			for(int j = 0; j < k; j++)
		//*   3    5:iconst_0        
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iload_3         
		//*   7    9:icmpge          82
			{
				View view = getChildAt(j);
		//    8   12:aload_0         
		//    9   13:iload_2         
		//   10   14:invokevirtual   #451 <Method View getChildAt(int)>
		//   11   17:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   12   19:aload           4
		//   13   21:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   24:astore          5
				if(viewholder != null && viewholder.getLayoutPosition() == i && !viewholder.shouldIgnore() && (mRecyclerView.mState.isPreLayout() || !viewholder.isRemoved()))
		//*  15   26:aload           5
		//*  16   28:ifnonnull       34
		//*  17   31:goto            75
		//*  18   34:aload           5
		//*  19   36:invokevirtual   #492 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  20   39:iload_1         
		//*  21   40:icmpne          75
		//*  22   43:aload           5
		//*  23   45:invokevirtual   #368 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  24   48:ifne            75
		//*  25   51:aload_0         
		//*  26   52:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  27   55:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//*  28   58:invokevirtual   #501 <Method boolean RecyclerView$State.isPreLayout()>
		//*  29   61:ifne            72
		//*  30   64:aload           5
		//*  31   66:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  32   69:ifne            75
					return view;
		//   33   72:aload           4
		//   34   74:areturn         
			}

		//   35   75:iload_2         
		//   36   76:iconst_1        
		//   37   77:iadd            
		//   38   78:istore_2        
		//*  39   79:goto            7
			return null;
		//   40   82:aconst_null     
		//   41   83:areturn         
		}

		public abstract LayoutParams generateDefaultLayoutParams();

		public LayoutParams generateLayoutParams(Context context, AttributeSet attributeset)
		{
			return new LayoutParams(context, attributeset);
		//    0    0:new             #116 <Class RecyclerView$LayoutParams>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:aload_2         
		//    4    6:invokespecial   #508 <Method void RecyclerView$LayoutParams(Context, AttributeSet)>
		//    5    9:areturn         
		}

		public LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			if(layoutparams instanceof LayoutParams)
		//*   0    0:aload_1         
		//*   1    1:instanceof      #116 <Class RecyclerView$LayoutParams>
		//*   2    4:ifeq            19
				return new LayoutParams((LayoutParams)layoutparams);
		//    3    7:new             #116 <Class RecyclerView$LayoutParams>
		//    4   10:dup             
		//    5   11:aload_1         
		//    6   12:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    7   15:invokespecial   #512 <Method void RecyclerView$LayoutParams(RecyclerView$LayoutParams)>
		//    8   18:areturn         
			if(layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
		//*   9   19:aload_1         
		//*  10   20:instanceof      #514 <Class android.view.ViewGroup$MarginLayoutParams>
		//*  11   23:ifeq            38
				return new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
		//   12   26:new             #116 <Class RecyclerView$LayoutParams>
		//   13   29:dup             
		//   14   30:aload_1         
		//   15   31:checkcast       #514 <Class android.view.ViewGroup$MarginLayoutParams>
		//   16   34:invokespecial   #517 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$MarginLayoutParams)>
		//   17   37:areturn         
			else
				return new LayoutParams(layoutparams);
		//   18   38:new             #116 <Class RecyclerView$LayoutParams>
		//   19   41:dup             
		//   20   42:aload_1         
		//   21   43:invokespecial   #520 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$LayoutParams)>
		//   22   46:areturn         
		}

		public int getBaseline()
		{
			return -1;
		//    0    0:iconst_m1       
		//    1    1:ireturn         
		}

		public int getBottomDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.bottom;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #361 <Field int Rect.bottom>
		//    5   13:ireturn         
		}

		public View getChildAt(int i)
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #130 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          16
				return mChildHelper.getChildAt(i);
		//    3    7:aload_0         
		//    4    8:getfield        #130 <Field ChildHelper mChildHelper>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #526 <Method View ChildHelper.getChildAt(int)>
		//    7   15:areturn         
			else
				return null;
		//    8   16:aconst_null     
		//    9   17:areturn         
		}

		public int getChildCount()
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #130 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          15
				return mChildHelper.getChildCount();
		//    3    7:aload_0         
		//    4    8:getfield        #130 <Field ChildHelper mChildHelper>
		//    5   11:invokevirtual   #148 <Method int ChildHelper.getChildCount()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public boolean getClipToPadding()
		{
			return mRecyclerView != null && mRecyclerView.mClipToPadding;
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:getfield        #530 <Field boolean RecyclerView.mClipToPadding>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public int getColumnCountForAccessibility(Recycler recycler, State state)
		{
			if(mRecyclerView == null || mRecyclerView.mAdapter == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
			if(canScrollHorizontally())
		//*   9   19:aload_0         
		//*  10   20:invokevirtual   #534 <Method boolean canScrollHorizontally()>
		//*  11   23:ifeq            37
				return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #537 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
			else
				return 1;
		//   17   37:iconst_1        
		//   18   38:ireturn         
		}

		public int getDecoratedBottom(View view)
		{
			return view.getBottom() + getBottomDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #541 <Method int View.getBottom()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #543 <Method int getBottomDecorationHeight(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public void getDecoratedBoundsWithMargins(View view, Rect rect)
		{
			RecyclerView.getDecoratedBoundsWithMarginsInt(view, rect);
		//    0    0:aload_1         
		//    1    1:aload_2         
		//    2    2:invokestatic    #546 <Method void RecyclerView.getDecoratedBoundsWithMarginsInt(View, Rect)>
		//    3    5:return          
		}

		public int getDecoratedLeft(View view)
		{
			return view.getLeft() - getLeftDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #264 <Method int View.getLeft()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #550 <Method int getLeftDecorationWidth(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public int getDecoratedMeasuredHeight(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredHeight() + rect.top + rect.bottom;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #554 <Method int View.getMeasuredHeight()>
		//    7   15:aload_2         
		//    8   16:getfield        #278 <Field int Rect.top>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #361 <Field int Rect.bottom>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedMeasuredWidth(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredWidth() + rect.left + rect.right;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #558 <Method int View.getMeasuredWidth()>
		//    7   15:aload_2         
		//    8   16:getfield        #269 <Field int Rect.left>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #358 <Field int Rect.right>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedRight(View view)
		{
			return view.getRight() + getRightDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #562 <Method int View.getRight()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #565 <Method int getRightDecorationWidth(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public int getDecoratedTop(View view)
		{
			return view.getTop() - getTopDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #275 <Method int View.getTop()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #569 <Method int getTopDecorationHeight(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public View getFocusedChild()
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
				return null;
		//    3    7:aconst_null     
		//    4    8:areturn         
			View view = mRecyclerView.getFocusedChild();
		//    5    9:aload_0         
		//    6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   13:invokevirtual   #347 <Method View RecyclerView.getFocusedChild()>
		//    8   16:astore_1        
			if(view == null || mChildHelper.isHidden(view))
		//*   9   17:aload_1         
		//*  10   18:ifnull          32
		//*  11   21:aload_0         
		//*  12   22:getfield        #130 <Field ChildHelper mChildHelper>
		//*  13   25:aload_1         
		//*  14   26:invokevirtual   #487 <Method boolean ChildHelper.isHidden(View)>
		//*  15   29:ifeq            34
				return null;
		//   16   32:aconst_null     
		//   17   33:areturn         
			else
				return view;
		//   18   34:aload_1         
		//   19   35:areturn         
		}

		public int getHeight()
		{
			return mHeight;
		//    0    0:aload_0         
		//    1    1:getfield        #571 <Field int mHeight>
		//    2    4:ireturn         
		}

		public int getHeightMode()
		{
			return mHeightMode;
		//    0    0:aload_0         
		//    1    1:getfield        #574 <Field int mHeightMode>
		//    2    4:ireturn         
		}

		public int getItemCount()
		{
			Adapter adapter;
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          18
				adapter = mRecyclerView.getAdapter();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #578 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//    6   14:astore_1        
			else
		//*   7   15:goto            20
				adapter = null;
		//    8   18:aconst_null     
		//    9   19:astore_1        
			if(adapter != null)
		//*  10   20:aload_1         
		//*  11   21:ifnull          29
				return adapter.getItemCount();
		//   12   24:aload_1         
		//   13   25:invokevirtual   #537 <Method int RecyclerView$Adapter.getItemCount()>
		//   14   28:ireturn         
			else
				return 0;
		//   15   29:iconst_0        
		//   16   30:ireturn         
		}

		public int getItemViewType(View view)
		{
			return RecyclerView.getChildViewHolderInt(view).getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:invokevirtual   #581 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    3    7:ireturn         
		}

		public int getLayoutDirection()
		{
			return ViewCompat.getLayoutDirection(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #585 <Method int ViewCompat.getLayoutDirection(View)>
		//    3    7:ireturn         
		}

		public int getLeftDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.left;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #269 <Field int Rect.left>
		//    5   13:ireturn         
		}

		public int getMinimumHeight()
		{
			return ViewCompat.getMinimumHeight(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #588 <Method int ViewCompat.getMinimumHeight(View)>
		//    3    7:ireturn         
		}

		public int getMinimumWidth()
		{
			return ViewCompat.getMinimumWidth(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #591 <Method int ViewCompat.getMinimumWidth(View)>
		//    3    7:ireturn         
		}

		public int getPaddingBottom()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingBottom();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #592 <Method int RecyclerView.getPaddingBottom()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingEnd()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingEnd(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #595 <Method int ViewCompat.getPaddingEnd(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingLeft()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingLeft();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #596 <Method int RecyclerView.getPaddingLeft()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingRight()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingRight();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #597 <Method int RecyclerView.getPaddingRight()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingStart()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingStart(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #600 <Method int ViewCompat.getPaddingStart(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingTop()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingTop();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #601 <Method int RecyclerView.getPaddingTop()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPosition(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:invokevirtual   #605 <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    4   10:ireturn         
		}

		public int getRightDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.right;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #358 <Field int Rect.right>
		//    5   13:ireturn         
		}

		public int getRowCountForAccessibility(Recycler recycler, State state)
		{
			if(mRecyclerView == null || mRecyclerView.mAdapter == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
			if(canScrollVertically())
		//*   9   19:aload_0         
		//*  10   20:invokevirtual   #608 <Method boolean canScrollVertically()>
		//*  11   23:ifeq            37
				return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #537 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
			else
				return 1;
		//   17   37:iconst_1        
		//   18   38:ireturn         
		}

		public int getSelectionModeForAccessibility(Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int getTopDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.top;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #278 <Field int Rect.top>
		//    5   13:ireturn         
		}

		public void getTransformedBoundingBox(View view, boolean flag, Rect rect)
		{
			if(flag)
		//*   0    0:iload_2         
		//*   1    1:ifeq            55
			{
				Rect rect1 = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    2    4:aload_1         
		//    3    5:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    8:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    5   11:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          4
				rect.set(-rect1.left, -rect1.top, view.getWidth() + rect1.right, view.getHeight() + rect1.bottom);
		//    7   16:aload_3         
		//    8   17:aload           4
		//    9   19:getfield        #269 <Field int Rect.left>
		//   10   22:ineg            
		//   11   23:aload           4
		//   12   25:getfield        #278 <Field int Rect.top>
		//   13   28:ineg            
		//   14   29:aload_1         
		//   15   30:invokevirtual   #612 <Method int View.getWidth()>
		//   16   33:aload           4
		//   17   35:getfield        #358 <Field int Rect.right>
		//   18   38:iadd            
		//   19   39:aload_1         
		//   20   40:invokevirtual   #613 <Method int View.getHeight()>
		//   21   43:aload           4
		//   22   45:getfield        #361 <Field int Rect.bottom>
		//   23   48:iadd            
		//   24   49:invokevirtual   #422 <Method void Rect.set(int, int, int, int)>
			} else
		//*  25   52:goto            69
			{
				rect.set(0, 0, view.getWidth(), view.getHeight());
		//   26   55:aload_3         
		//   27   56:iconst_0        
		//   28   57:iconst_0        
		//   29   58:aload_1         
		//   30   59:invokevirtual   #612 <Method int View.getWidth()>
		//   31   62:aload_1         
		//   32   63:invokevirtual   #613 <Method int View.getHeight()>
		//   33   66:invokevirtual   #422 <Method void Rect.set(int, int, int, int)>
			}
			if(mRecyclerView != null)
		//*  34   69:aload_0         
		//*  35   70:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  36   73:ifnull          162
			{
				Matrix matrix = view.getMatrix();
		//   37   76:aload_1         
		//   38   77:invokevirtual   #617 <Method Matrix View.getMatrix()>
		//   39   80:astore          4
				if(matrix != null && !matrix.isIdentity())
		//*  40   82:aload           4
		//*  41   84:ifnull          162
		//*  42   87:aload           4
		//*  43   89:invokevirtual   #622 <Method boolean Matrix.isIdentity()>
		//*  44   92:ifne            162
				{
					RectF rectf = mRecyclerView.mTempRectF;
		//   45   95:aload_0         
		//   46   96:getfield        #95  <Field RecyclerView mRecyclerView>
		//   47   99:getfield        #626 <Field RectF RecyclerView.mTempRectF>
		//   48  102:astore          5
					rectf.set(rect);
		//   49  104:aload           5
		//   50  106:aload_3         
		//   51  107:invokevirtual   #629 <Method void RectF.set(Rect)>
					matrix.mapRect(rectf);
		//   52  110:aload           4
		//   53  112:aload           5
		//   54  114:invokevirtual   #633 <Method boolean Matrix.mapRect(RectF)>
		//   55  117:pop             
					rect.set((int)Math.floor(rectf.left), (int)Math.floor(rectf.top), (int)Math.ceil(rectf.right), (int)Math.ceil(rectf.bottom));
		//   56  118:aload_3         
		//   57  119:aload           5
		//   58  121:getfield        #636 <Field float RectF.left>
		//   59  124:f2d             
		//   60  125:invokestatic    #640 <Method double Math.floor(double)>
		//   61  128:d2i             
		//   62  129:aload           5
		//   63  131:getfield        #642 <Field float RectF.top>
		//   64  134:f2d             
		//   65  135:invokestatic    #640 <Method double Math.floor(double)>
		//   66  138:d2i             
		//   67  139:aload           5
		//   68  141:getfield        #644 <Field float RectF.right>
		//   69  144:f2d             
		//   70  145:invokestatic    #647 <Method double Math.ceil(double)>
		//   71  148:d2i             
		//   72  149:aload           5
		//   73  151:getfield        #649 <Field float RectF.bottom>
		//   74  154:f2d             
		//   75  155:invokestatic    #647 <Method double Math.ceil(double)>
		//   76  158:d2i             
		//   77  159:invokevirtual   #422 <Method void Rect.set(int, int, int, int)>
				}
			}
			rect.offset(view.getLeft(), view.getTop());
		//   78  162:aload_3         
		//   79  163:aload_1         
		//   80  164:invokevirtual   #264 <Method int View.getLeft()>
		//   81  167:aload_1         
		//   82  168:invokevirtual   #275 <Method int View.getTop()>
		//   83  171:invokevirtual   #652 <Method void Rect.offset(int, int)>
		//   84  174:return          
		}

		public int getWidth()
		{
			return mWidth;
		//    0    0:aload_0         
		//    1    1:getfield        #654 <Field int mWidth>
		//    2    4:ireturn         
		}

		public int getWidthMode()
		{
			return mWidthMode;
		//    0    0:aload_0         
		//    1    1:getfield        #657 <Field int mWidthMode>
		//    2    4:ireturn         
		}

		boolean hasFlexibleChildInBothOrientations()
		{
			int j = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #447 <Method int getChildCount()>
		//    2    4:istore_2        
			for(int i = 0; i < j; i++)
		//*   3    5:iconst_0        
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iload_2         
		//*   7    9:icmpge          44
			{
				android.view.ViewGroup.LayoutParams layoutparams = getChildAt(i).getLayoutParams();
		//    8   12:aload_0         
		//    9   13:iload_1         
		//   10   14:invokevirtual   #451 <Method View getChildAt(int)>
		//   11   17:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   12   20:astore_3        
				if(layoutparams.width < 0 && layoutparams.height < 0)
		//*  13   21:aload_3         
		//*  14   22:getfield        #662 <Field int android.view.ViewGroup$LayoutParams.width>
		//*  15   25:ifge            37
		//*  16   28:aload_3         
		//*  17   29:getfield        #664 <Field int android.view.ViewGroup$LayoutParams.height>
		//*  18   32:ifge            37
					return true;
		//   19   35:iconst_1        
		//   20   36:ireturn         
			}

		//   21   37:iload_1         
		//   22   38:iconst_1        
		//   23   39:iadd            
		//   24   40:istore_1        
		//*  25   41:goto            7
			return false;
		//   26   44:iconst_0        
		//   27   45:ireturn         
		}

		public boolean hasFocus()
		{
			return mRecyclerView != null && mRecyclerView.hasFocus();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #667 <Method boolean RecyclerView.hasFocus()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public void ignoreView(View view)
		{
			if(view.getParent() != mRecyclerView || mRecyclerView.indexOfChild(view) == -1)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #140 <Method ViewParent View.getParent()>
		//*   2    4:aload_0         
		//*   3    5:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    8:if_acmpne       23
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:aload_1         
		//*   8   16:invokevirtual   #160 <Method int RecyclerView.indexOfChild(View)>
		//*   9   19:iconst_m1       
		//*  10   20:icmpne          34
			{
				throw new IllegalArgumentException("View should be fully attached to be ignored");
		//   11   23:new             #670 <Class IllegalArgumentException>
		//   12   26:dup             
		//   13   27:ldc2            #672 <String "View should be fully attached to be ignored">
		//   14   30:invokespecial   #673 <Method void IllegalArgumentException(String)>
		//   15   33:athrow          
			} else
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//   16   34:aload_1         
		//   17   35:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   18   38:astore_1        
				((ViewHolder) (view)).addFlags(128);
		//   19   39:aload_1         
		//   20   40:sipush          128
		//   21   43:invokevirtual   #676 <Method void RecyclerView$ViewHolder.addFlags(int)>
				mRecyclerView.mViewInfoStore.removeViewHolder(((ViewHolder) (view)));
		//   22   46:aload_0         
		//   23   47:getfield        #95  <Field RecyclerView mRecyclerView>
		//   24   50:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   53:aload_1         
		//   26   54:invokevirtual   #679 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
				return;
		//   27   57:return          
			}
		}

		public boolean isAttachedToWindow()
		{
			return mIsAttachedToWindow;
		//    0    0:aload_0         
		//    1    1:getfield        #68  <Field boolean mIsAttachedToWindow>
		//    2    4:ireturn         
		}

		public boolean isAutoMeasureEnabled()
		{
			return mAutoMeasure;
		//    0    0:aload_0         
		//    1    1:getfield        #70  <Field boolean mAutoMeasure>
		//    2    4:ireturn         
		}

		public boolean isFocused()
		{
			return mRecyclerView != null && mRecyclerView.isFocused();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #684 <Method boolean RecyclerView.isFocused()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public final boolean isItemPrefetchEnabled()
		{
			return mItemPrefetchEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//    2    4:ireturn         
		}

		public boolean isLayoutHierarchical(Recycler recycler, State state)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean isMeasurementCacheEnabled()
		{
			return mMeasurementCacheEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ireturn         
		}

		public boolean isSmoothScrolling()
		{
			return mSmoothScroller != null && mSmoothScroller.isRunning();
		//    0    0:aload_0         
		//    1    1:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #191 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public boolean isViewPartiallyVisible(View view, boolean flag, boolean flag1)
		{
			if(mHorizontalBoundCheck.isViewWithinBoundFlags(view, 24579) && mVerticalBoundCheck.isViewWithinBoundFlags(view, 24579))
		//*   0    0:aload_0         
		//*   1    1:getfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
		//*   2    4:aload_1         
		//*   3    5:sipush          24579
		//*   4    8:invokevirtual   #696 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*   5   11:ifeq            33
		//*   6   14:aload_0         
		//*   7   15:getfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
		//*   8   18:aload_1         
		//*   9   19:sipush          24579
		//*  10   22:invokevirtual   #696 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*  11   25:ifeq            33
				flag1 = true;
		//   12   28:iconst_1        
		//   13   29:istore_3        
			else
		//*  14   30:goto            35
				flag1 = false;
		//   15   33:iconst_0        
		//   16   34:istore_3        
			if(flag)
		//*  17   35:iload_2         
		//*  18   36:ifeq            41
				return flag1;
		//   19   39:iload_3         
		//   20   40:ireturn         
			return !flag1;
		//   21   41:iload_3         
		//   22   42:ifne            47
		//   23   45:iconst_1        
		//   24   46:ireturn         
		//   25   47:iconst_0        
		//   26   48:ireturn         
		}

		public void layoutDecorated(View view, int i, int j, int k, int l)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          6
			view.layout(rect.left + i, rect.top + j, k - rect.right, l - rect.bottom);
		//    5   12:aload_1         
		//    6   13:aload           6
		//    7   15:getfield        #269 <Field int Rect.left>
		//    8   18:iload_2         
		//    9   19:iadd            
		//   10   20:aload           6
		//   11   22:getfield        #278 <Field int Rect.top>
		//   12   25:iload_3         
		//   13   26:iadd            
		//   14   27:iload           4
		//   15   29:aload           6
		//   16   31:getfield        #358 <Field int Rect.right>
		//   17   34:isub            
		//   18   35:iload           5
		//   19   37:aload           6
		//   20   39:getfield        #361 <Field int Rect.bottom>
		//   21   42:isub            
		//   22   43:invokevirtual   #702 <Method void View.layout(int, int, int, int)>
		//   23   46:return          
		}

		public void layoutDecoratedWithMargins(View view, int i, int j, int k, int l)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          6
			Rect rect = layoutparams.mDecorInsets;
		//    4    9:aload           6
		//    5   11:getfield        #525 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          7
			view.layout(rect.left + i + layoutparams.leftMargin, rect.top + j + layoutparams.topMargin, k - rect.right - layoutparams.rightMargin, l - rect.bottom - layoutparams.bottomMargin);
		//    7   16:aload_1         
		//    8   17:aload           7
		//    9   19:getfield        #269 <Field int Rect.left>
		//   10   22:iload_2         
		//   11   23:iadd            
		//   12   24:aload           6
		//   13   26:getfield        #706 <Field int RecyclerView$LayoutParams.leftMargin>
		//   14   29:iadd            
		//   15   30:aload           7
		//   16   32:getfield        #278 <Field int Rect.top>
		//   17   35:iload_3         
		//   18   36:iadd            
		//   19   37:aload           6
		//   20   39:getfield        #709 <Field int RecyclerView$LayoutParams.topMargin>
		//   21   42:iadd            
		//   22   43:iload           4
		//   23   45:aload           7
		//   24   47:getfield        #358 <Field int Rect.right>
		//   25   50:isub            
		//   26   51:aload           6
		//   27   53:getfield        #712 <Field int RecyclerView$LayoutParams.rightMargin>
		//   28   56:isub            
		//   29   57:iload           5
		//   30   59:aload           7
		//   31   61:getfield        #361 <Field int Rect.bottom>
		//   32   64:isub            
		//   33   65:aload           6
		//   34   67:getfield        #715 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   35   70:isub            
		//   36   71:invokevirtual   #702 <Method void View.layout(int, int, int, int)>
		//   37   74:return          
		}

		public void measureChild(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #426 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #269 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #358 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #278 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #361 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #252 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #719 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #246 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #255 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:iload_2         
		//   31   65:iload           6
		//   32   67:iload           7
		//   33   69:iadd            
		//   34   70:iadd            
		//   35   71:iadd            
		//   36   72:aload           8
		//   37   74:getfield        #720 <Field int RecyclerView$LayoutParams.width>
		//   38   77:aload_0         
		//   39   78:invokevirtual   #534 <Method boolean canScrollHorizontally()>
		//   40   81:invokestatic    #722 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   41   84:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   42   85:aload_0         
		//   43   86:invokevirtual   #258 <Method int getHeight()>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #724 <Method int getHeightMode()>
		//   46   93:aload_0         
		//   47   94:invokevirtual   #249 <Method int getPaddingTop()>
		//   48   97:aload_0         
		//   49   98:invokevirtual   #261 <Method int getPaddingBottom()>
		//   50  101:iadd            
		//   51  102:iload_3         
		//   52  103:iload           4
		//   53  105:iload           5
		//   54  107:iadd            
		//   55  108:iadd            
		//   56  109:iadd            
		//   57  110:aload           8
		//   58  112:getfield        #725 <Field int RecyclerView$LayoutParams.height>
		//   59  115:aload_0         
		//   60  116:invokevirtual   #608 <Method boolean canScrollVertically()>
		//   61  119:invokestatic    #722 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   62  122:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  63  123:aload_0         
		//*  64  124:aload_1         
		//*  65  125:iload_2         
		//*  66  126:iload_3         
		//*  67  127:aload           8
		//*  68  129:invokevirtual   #729 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  69  132:ifeq            141
				view.measure(i, j);
		//   70  135:aload_1         
		//   71  136:iload_2         
		//   72  137:iload_3         
		//   73  138:invokevirtual   #732 <Method void View.measure(int, int)>
		//   74  141:return          
		}

		public void measureChildWithMargins(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #426 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #269 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #358 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #278 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #361 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + layoutparams.leftMargin + layoutparams.rightMargin + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #252 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #719 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #246 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #255 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:aload           8
		//   31   66:getfield        #706 <Field int RecyclerView$LayoutParams.leftMargin>
		//   32   69:iadd            
		//   33   70:aload           8
		//   34   72:getfield        #712 <Field int RecyclerView$LayoutParams.rightMargin>
		//   35   75:iadd            
		//   36   76:iload_2         
		//   37   77:iload           6
		//   38   79:iload           7
		//   39   81:iadd            
		//   40   82:iadd            
		//   41   83:iadd            
		//   42   84:aload           8
		//   43   86:getfield        #720 <Field int RecyclerView$LayoutParams.width>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #534 <Method boolean canScrollHorizontally()>
		//   46   93:invokestatic    #722 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   47   96:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + layoutparams.topMargin + layoutparams.bottomMargin + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   48   97:aload_0         
		//   49   98:invokevirtual   #258 <Method int getHeight()>
		//   50  101:aload_0         
		//   51  102:invokevirtual   #724 <Method int getHeightMode()>
		//   52  105:aload_0         
		//   53  106:invokevirtual   #249 <Method int getPaddingTop()>
		//   54  109:aload_0         
		//   55  110:invokevirtual   #261 <Method int getPaddingBottom()>
		//   56  113:iadd            
		//   57  114:aload           8
		//   58  116:getfield        #709 <Field int RecyclerView$LayoutParams.topMargin>
		//   59  119:iadd            
		//   60  120:aload           8
		//   61  122:getfield        #715 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   62  125:iadd            
		//   63  126:iload_3         
		//   64  127:iload           4
		//   65  129:iload           5
		//   66  131:iadd            
		//   67  132:iadd            
		//   68  133:iadd            
		//   69  134:aload           8
		//   70  136:getfield        #725 <Field int RecyclerView$LayoutParams.height>
		//   71  139:aload_0         
		//   72  140:invokevirtual   #608 <Method boolean canScrollVertically()>
		//   73  143:invokestatic    #722 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   74  146:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  75  147:aload_0         
		//*  76  148:aload_1         
		//*  77  149:iload_2         
		//*  78  150:iload_3         
		//*  79  151:aload           8
		//*  80  153:invokevirtual   #729 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  81  156:ifeq            165
				view.measure(i, j);
		//   82  159:aload_1         
		//   83  160:iload_2         
		//   84  161:iload_3         
		//   85  162:invokevirtual   #732 <Method void View.measure(int, int)>
		//   86  165:return          
		}

		public void moveView(int i, int j)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #451 <Method View getChildAt(int)>
		//    3    5:astore_3        
			if(view == null)
		//*   4    6:aload_3         
		//*   5    7:ifnonnull       38
			{
				throw new IllegalArgumentException((new StringBuilder()).append("Cannot move a child from non-existing index:").append(i).toString());
		//    6   10:new             #670 <Class IllegalArgumentException>
		//    7   13:dup             
		//    8   14:new             #152 <Class StringBuilder>
		//    9   17:dup             
		//   10   18:invokespecial   #153 <Method void StringBuilder()>
		//   11   21:ldc2            #735 <String "Cannot move a child from non-existing index:">
		//   12   24:invokevirtual   #159 <Method StringBuilder StringBuilder.append(String)>
		//   13   27:iload_1         
		//   14   28:invokevirtual   #163 <Method StringBuilder StringBuilder.append(int)>
		//   15   31:invokevirtual   #167 <Method String StringBuilder.toString()>
		//   16   34:invokespecial   #673 <Method void IllegalArgumentException(String)>
		//   17   37:athrow          
			} else
			{
				detachViewAt(i);
		//   18   38:aload_0         
		//   19   39:iload_1         
		//   20   40:invokevirtual   #391 <Method void detachViewAt(int)>
				attachView(view, j);
		//   21   43:aload_0         
		//   22   44:aload_3         
		//   23   45:iload_2         
		//   24   46:invokevirtual   #414 <Method void attachView(View, int)>
				return;
		//   25   49:return          
			}
		}

		public void offsetChildrenHorizontal(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenHorizontal(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #738 <Method void RecyclerView.offsetChildrenHorizontal(int)>
		//    7   15:return          
		}

		public void offsetChildrenVertical(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenVertical(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #741 <Method void RecyclerView.offsetChildrenVertical(int)>
		//    7   15:return          
		}

		public void onAdapterChanged(Adapter adapter, Adapter adapter1)
		{
		//    0    0:return          
		}

		public boolean onAddFocusables(RecyclerView recyclerview, ArrayList arraylist, int i, int j)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onAttachedToWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			onDetachedFromWindow(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #750 <Method void onDetachedFromWindow(RecyclerView)>
		//    3    5:return          
		}

		public View onFocusSearchFailed(View view, int i, Recycler recycler, State state)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onInitializeAccessibilityEvent(Recycler recycler, State state, AccessibilityEvent accessibilityevent)
		{
			recycler = ((Recycler) (AccessibilityEventCompat.asRecord(accessibilityevent)));
		//    0    0:aload_3         
		//    1    1:invokestatic    #760 <Method AccessibilityRecordCompat AccessibilityEventCompat.asRecord(AccessibilityEvent)>
		//    2    4:astore_1        
			if(mRecyclerView == null || recycler == null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5    9:ifnull          16
		//*   6   12:aload_1         
		//*   7   13:ifnonnull       17
				return;
		//    8   16:return          
			boolean flag;
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1) || mRecyclerView.canScrollHorizontally(1))
		//*   9   17:aload_0         
		//*  10   18:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  11   21:iconst_1        
		//*  12   22:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  13   25:ifne            61
		//*  14   28:aload_0         
		//*  15   29:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  16   32:iconst_m1       
		//*  17   33:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  18   36:ifne            61
		//*  19   39:aload_0         
		//*  20   40:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  21   43:iconst_m1       
		//*  22   44:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  23   47:ifne            61
		//*  24   50:aload_0         
		//*  25   51:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  26   54:iconst_1        
		//*  27   55:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  28   58:ifeq            67
				flag = true;
		//   29   61:iconst_1        
		//   30   62:istore          4
			else
		//*  31   64:goto            70
				flag = false;
		//   32   67:iconst_0        
		//   33   68:istore          4
			((AccessibilityRecordCompat) (recycler)).setScrollable(flag);
		//   34   70:aload_1         
		//   35   71:iload           4
		//   36   73:invokevirtual   #771 <Method void AccessibilityRecordCompat.setScrollable(boolean)>
			if(mRecyclerView.mAdapter != null)
		//*  37   76:aload_0         
		//*  38   77:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  39   80:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  40   83:ifnull          100
				((AccessibilityRecordCompat) (recycler)).setItemCount(mRecyclerView.mAdapter.getItemCount());
		//   41   86:aload_1         
		//   42   87:aload_0         
		//   43   88:getfield        #95  <Field RecyclerView mRecyclerView>
		//   44   91:getfield        #375 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   45   94:invokevirtual   #537 <Method int RecyclerView$Adapter.getItemCount()>
		//   46   97:invokevirtual   #774 <Method void AccessibilityRecordCompat.setItemCount(int)>
		//   47  100:return          
		}

		public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent)
		{
			onInitializeAccessibilityEvent(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilityevent);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #781 <Method void onInitializeAccessibilityEvent(RecyclerView$Recycler, RecyclerView$State, AccessibilityEvent)>
		//    9   19:return          
		}

		void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			onInitializeAccessibilityNodeInfo(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilitynodeinfocompat);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #786 <Method void onInitializeAccessibilityNodeInfo(RecyclerView$Recycler, RecyclerView$State, AccessibilityNodeInfoCompat)>
		//    9   19:return          
		}

		public void onInitializeAccessibilityNodeInfo(Recycler recycler, State state, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			if(mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1))
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:iconst_m1       
		//*   3    5:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*   4    8:ifne            22
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:iconst_m1       
		//*   8   16:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*   9   19:ifeq            34
			{
				accessibilitynodeinfocompat.addAction(8192);
		//   10   22:aload_3         
		//   11   23:sipush          8192
		//   12   26:invokevirtual   #791 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   13   29:aload_3         
		//   14   30:iconst_1        
		//   15   31:invokevirtual   #792 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollHorizontally(1))
		//*  16   34:aload_0         
		//*  17   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  18   38:iconst_1        
		//*  19   39:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   42:ifne            56
		//*  21   45:aload_0         
		//*  22   46:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  23   49:iconst_1        
		//*  24   50:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  25   53:ifeq            68
			{
				accessibilitynodeinfocompat.addAction(4096);
		//   26   56:aload_3         
		//   27   57:sipush          4096
		//   28   60:invokevirtual   #791 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   29   63:aload_3         
		//   30   64:iconst_1        
		//   31   65:invokevirtual   #792 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			accessibilitynodeinfocompat.setCollectionInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(getRowCountForAccessibility(recycler, state), getColumnCountForAccessibility(recycler, state), isLayoutHierarchical(recycler, state), getSelectionModeForAccessibility(recycler, state)))));
		//   32   68:aload_3         
		//   33   69:aload_0         
		//   34   70:aload_1         
		//   35   71:aload_2         
		//   36   72:invokevirtual   #794 <Method int getRowCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   37   75:aload_0         
		//   38   76:aload_1         
		//   39   77:aload_2         
		//   40   78:invokevirtual   #796 <Method int getColumnCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   41   81:aload_0         
		//   42   82:aload_1         
		//   43   83:aload_2         
		//   44   84:invokevirtual   #798 <Method boolean isLayoutHierarchical(RecyclerView$Recycler, RecyclerView$State)>
		//   45   87:aload_0         
		//   46   88:aload_1         
		//   47   89:aload_2         
		//   48   90:invokevirtual   #800 <Method int getSelectionModeForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   49   93:invokestatic    #806 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat.obtain(int, int, boolean, int)>
		//   50   96:invokevirtual   #810 <Method void AccessibilityNodeInfoCompat.setCollectionInfo(Object)>
		//   51   99:return          
		}

		public void onInitializeAccessibilityNodeInfoForItem(Recycler recycler, State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			int i;
			if(canScrollVertically())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #608 <Method boolean canScrollVertically()>
		//*   2    4:ifeq            17
				i = getPosition(view);
		//    3    7:aload_0         
		//    4    8:aload_3         
		//    5    9:invokevirtual   #814 <Method int getPosition(View)>
		//    6   12:istore          5
			else
		//*   7   14:goto            20
				i = 0;
		//    8   17:iconst_0        
		//    9   18:istore          5
			int j;
			if(canScrollHorizontally())
		//*  10   20:aload_0         
		//*  11   21:invokevirtual   #534 <Method boolean canScrollHorizontally()>
		//*  12   24:ifeq            37
				j = getPosition(view);
		//   13   27:aload_0         
		//   14   28:aload_3         
		//   15   29:invokevirtual   #814 <Method int getPosition(View)>
		//   16   32:istore          6
			else
		//*  17   34:goto            40
				j = 0;
		//   18   37:iconst_0        
		//   19   38:istore          6
			accessibilitynodeinfocompat.setCollectionItemInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, j, 1, false, false))));
		//   20   40:aload           4
		//   21   42:iload           5
		//   22   44:iconst_1        
		//   23   45:iload           6
		//   24   47:iconst_1        
		//   25   48:iconst_0        
		//   26   49:iconst_0        
		//   27   50:invokestatic    #819 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean)>
		//   28   53:invokevirtual   #822 <Method void AccessibilityNodeInfoCompat.setCollectionItemInfo(Object)>
		//   29   56:return          
		}

		void onInitializeAccessibilityNodeInfoForItem(View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_3        
			if(viewholder != null && !viewholder.isRemoved() && !mChildHelper.isHidden(viewholder.itemView))
		//*   3    5:aload_3         
		//*   4    6:ifnull          50
		//*   5    9:aload_3         
		//*   6   10:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   13:ifne            50
		//*   8   16:aload_0         
		//*   9   17:getfield        #130 <Field ChildHelper mChildHelper>
		//*  10   20:aload_3         
		//*  11   21:getfield        #202 <Field View RecyclerView$ViewHolder.itemView>
		//*  12   24:invokevirtual   #487 <Method boolean ChildHelper.isHidden(View)>
		//*  13   27:ifne            50
				onInitializeAccessibilityNodeInfoForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, accessibilitynodeinfocompat);
		//   14   30:aload_0         
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   18   38:aload_0         
		//   19   39:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//   21   45:aload_1         
		//   22   46:aload_2         
		//   23   47:invokevirtual   #825 <Method void onInitializeAccessibilityNodeInfoForItem(RecyclerView$Recycler, RecyclerView$State, View, AccessibilityNodeInfoCompat)>
		//   24   50:return          
		}

		public View onInterceptFocusSearch(View view, int i)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onItemsAdded(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsChanged(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemsRemoved(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj)
		{
			onItemsUpdated(recyclerview, i, j);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:invokevirtual   #837 <Method void onItemsUpdated(RecyclerView, int, int)>
		//    5    7:return          
		}

		public void onLayoutChildren(Recycler recycler, State state)
		{
			Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
		//    0    0:ldc2            #840 <String "RecyclerView">
		//    1    3:ldc2            #842 <String "You must override onLayoutChildren(Recycler recycler, State state) ">
		//    2    6:invokestatic    #848 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void onLayoutCompleted(State state)
		{
		//    0    0:return          
		}

		public void onMeasure(Recycler recycler, State state, int i, int j)
		{
			mRecyclerView.defaultOnMeasure(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_3         
		//    3    5:iload           4
		//    4    7:invokevirtual   #855 <Method void RecyclerView.defaultOnMeasure(int, int)>
		//    5   10:return          
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, State state, View view, View view1)
		{
			return onRequestChildFocus(recyclerview, view, view1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_3         
		//    3    3:aload           4
		//    4    5:invokevirtual   #860 <Method boolean onRequestChildFocus(RecyclerView, View, View)>
		//    5    8:ireturn         
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, View view, View view1)
		{
			return isSmoothScrolling() || recyclerview.isComputingLayout();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #862 <Method boolean isSmoothScrolling()>
		//    2    4:ifne            14
		//    3    7:aload_1         
		//    4    8:invokevirtual   #865 <Method boolean RecyclerView.isComputingLayout()>
		//    5   11:ifeq            16
		//    6   14:iconst_1        
		//    7   15:ireturn         
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void onRestoreInstanceState(Parcelable parcelable)
		{
		//    0    0:return          
		}

		public Parcelable onSaveInstanceState()
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onScrollStateChanged(int i)
		{
		//    0    0:return          
		}

		boolean performAccessibilityAction(int i, Bundle bundle)
		{
			return performAccessibilityAction(mRecyclerView.mRecycler, mRecyclerView.mState, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iload_1         
		//    8   16:aload_2         
		//    9   17:invokevirtual   #875 <Method boolean performAccessibilityAction(RecyclerView$Recycler, RecyclerView$State, int, Bundle)>
		//   10   20:ireturn         
		}

		public boolean performAccessibilityAction(Recycler recycler, State state, int i, Bundle bundle)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
				return false;
		//    3    7:iconst_0        
		//    4    8:ireturn         
			boolean flag = false;
		//    5    9:iconst_0        
		//    6   10:istore          7
			boolean flag1 = false;
		//    7   12:iconst_0        
		//    8   13:istore          8
			int j = 0;
		//    9   15:iconst_0        
		//   10   16:istore          5
			int l = 0;
		//   11   18:iconst_0        
		//   12   19:istore          6
			switch(i)
		//*  13   21:iload_3         
			{
		//*  14   22:lookupswitch    2: default 48
		//		               4096: 119
		//		               8192: 54
			default:
				i = ((int) (flag1));
		//   15   48:iload           8
		//   16   50:istore_3        
				break;

		//*  17   51:goto            183
			case 8192: 
				if(mRecyclerView.canScrollVertically(-1))
		//*  18   54:aload_0         
		//*  19   55:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  20   58:iconst_m1       
		//*  21   59:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  22   62:ifeq            82
					j = -(getHeight() - getPaddingTop() - getPaddingBottom());
		//   23   65:aload_0         
		//   24   66:invokevirtual   #258 <Method int getHeight()>
		//   25   69:aload_0         
		//   26   70:invokevirtual   #249 <Method int getPaddingTop()>
		//   27   73:isub            
		//   28   74:aload_0         
		//   29   75:invokevirtual   #261 <Method int getPaddingBottom()>
		//   30   78:isub            
		//   31   79:ineg            
		//   32   80:istore          5
				i = j;
		//   33   82:iload           5
		//   34   84:istore_3        
				if(mRecyclerView.canScrollHorizontally(-1))
		//*  35   85:aload_0         
		//*  36   86:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  37   89:iconst_m1       
		//*  38   90:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  39   93:ifeq            183
				{
					l = -(getWidth() - getPaddingLeft() - getPaddingRight());
		//   40   96:aload_0         
		//   41   97:invokevirtual   #252 <Method int getWidth()>
		//   42  100:aload_0         
		//   43  101:invokevirtual   #246 <Method int getPaddingLeft()>
		//   44  104:isub            
		//   45  105:aload_0         
		//   46  106:invokevirtual   #255 <Method int getPaddingRight()>
		//   47  109:isub            
		//   48  110:ineg            
		//   49  111:istore          6
					i = j;
		//   50  113:iload           5
		//   51  115:istore_3        
				}
				break;

		//*  52  116:goto            183
			case 4096: 
				int k = ((int) (flag));
		//   53  119:iload           7
		//   54  121:istore          5
				if(mRecyclerView.canScrollVertically(1))
		//*  55  123:aload_0         
		//*  56  124:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  57  127:iconst_1        
		//*  58  128:invokevirtual   #763 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  59  131:ifeq            150
					k = getHeight() - getPaddingTop() - getPaddingBottom();
		//   60  134:aload_0         
		//   61  135:invokevirtual   #258 <Method int getHeight()>
		//   62  138:aload_0         
		//   63  139:invokevirtual   #249 <Method int getPaddingTop()>
		//   64  142:isub            
		//   65  143:aload_0         
		//   66  144:invokevirtual   #261 <Method int getPaddingBottom()>
		//   67  147:isub            
		//   68  148:istore          5
				i = k;
		//   69  150:iload           5
		//   70  152:istore_3        
				if(mRecyclerView.canScrollHorizontally(1))
		//*  71  153:aload_0         
		//*  72  154:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  73  157:iconst_1        
		//*  74  158:invokevirtual   #765 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  75  161:ifeq            183
				{
					l = getWidth() - getPaddingLeft() - getPaddingRight();
		//   76  164:aload_0         
		//   77  165:invokevirtual   #252 <Method int getWidth()>
		//   78  168:aload_0         
		//   79  169:invokevirtual   #246 <Method int getPaddingLeft()>
		//   80  172:isub            
		//   81  173:aload_0         
		//   82  174:invokevirtual   #255 <Method int getPaddingRight()>
		//   83  177:isub            
		//   84  178:istore          6
					i = k;
		//   85  180:iload           5
		//   86  182:istore_3        
				}
				break;
			}
			if(i == 0 && l == 0)
		//*  87  183:iload_3         
		//*  88  184:ifne            194
		//*  89  187:iload           6
		//*  90  189:ifne            194
			{
				return false;
		//   91  192:iconst_0        
		//   92  193:ireturn         
			} else
			{
				mRecyclerView.scrollBy(l, i);
		//   93  194:aload_0         
		//   94  195:getfield        #95  <Field RecyclerView mRecyclerView>
		//   95  198:iload           6
		//   96  200:iload_3         
		//   97  201:invokevirtual   #878 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//   98  204:iconst_1        
		//   99  205:ireturn         
			}
		}

		public boolean performAccessibilityActionForItem(Recycler recycler, State state, View view, int i, Bundle bundle)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean performAccessibilityActionForItem(View view, int i, Bundle bundle)
		{
			return performAccessibilityActionForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #496 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:iload_2         
		//    9   17:aload_3         
		//   10   18:invokevirtual   #883 <Method boolean performAccessibilityActionForItem(RecyclerView$Recycler, RecyclerView$State, View, int, Bundle)>
		//   11   21:ireturn         
		}

		public void postOnAnimation(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				ViewCompat.postOnAnimation(((View) (mRecyclerView)), runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokestatic    #888 <Method void ViewCompat.postOnAnimation(View, Runnable)>
		//    7   15:return          
		}

		public void removeAllViews()
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #447 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iflt            26
				mChildHelper.removeViewAt(i);
		//    7   11:aload_0         
		//    8   12:getfield        #130 <Field ChildHelper mChildHelper>
		//    9   15:iload_1         
		//   10   16:invokevirtual   #890 <Method void ChildHelper.removeViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            7
		//   16   26:return          
		}

		public void removeAndRecycleAllViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #447 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            38
				if(!RecyclerView.getChildViewHolderInt(getChildAt(i)).shouldIgnore())
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:invokevirtual   #451 <Method View getChildAt(int)>
		//*  10   16:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//*  11   19:invokevirtual   #368 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  12   22:ifne            31
					removeAndRecycleViewAt(i, recycler);
		//   13   25:aload_0         
		//   14   26:iload_2         
		//   15   27:aload_1         
		//   16   28:invokevirtual   #894 <Method void removeAndRecycleViewAt(int, RecyclerView$Recycler)>

		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_2        
		//*  21   35:goto            7
		//   22   38:return          
		}

		void removeAndRecycleScrapInt(Recycler recycler)
		{
			int j = recycler.getScrapCount();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #898 <Method int RecyclerView$Recycler.getScrapCount()>
		//    2    4:istore_3        
			for(int i = j - 1; i >= 0; i--)
		//*   3    5:iload_3         
		//*   4    6:iconst_1        
		//*   5    7:isub            
		//*   6    8:istore_2        
		//*   7    9:iload_2         
		//*   8   10:iflt            103
			{
				View view = recycler.getScrapViewAt(i);
		//    9   13:aload_1         
		//   10   14:iload_2         
		//   11   15:invokevirtual   #901 <Method View RecyclerView$Recycler.getScrapViewAt(int)>
		//   12   18:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   13   20:aload           4
		//   14   22:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   15   25:astore          5
				if(viewholder.shouldIgnore())
		//*  16   27:aload           5
		//*  17   29:invokevirtual   #368 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  18   32:ifeq            38
					continue;
		//   19   35:goto            96
				viewholder.setIsRecyclable(false);
		//   20   38:aload           5
		//   21   40:iconst_0        
		//   22   41:invokevirtual   #904 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(viewholder.isTmpDetached())
		//*  23   44:aload           5
		//*  24   46:invokevirtual   #907 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  25   49:ifeq            62
					mRecyclerView.removeDetachedView(view, false);
		//   26   52:aload_0         
		//   27   53:getfield        #95  <Field RecyclerView mRecyclerView>
		//   28   56:aload           4
		//   29   58:iconst_0        
		//   30   59:invokevirtual   #911 <Method void RecyclerView.removeDetachedView(View, boolean)>
				if(mRecyclerView.mItemAnimator != null)
		//*  31   62:aload_0         
		//*  32   63:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  33   66:getfield        #475 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*  34   69:ifnull          84
					mRecyclerView.mItemAnimator.endAnimation(viewholder);
		//   35   72:aload_0         
		//   36   73:getfield        #95  <Field RecyclerView mRecyclerView>
		//   37   76:getfield        #475 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//   38   79:aload           5
		//   39   81:invokevirtual   #479 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
				viewholder.setIsRecyclable(true);
		//   40   84:aload           5
		//   41   86:iconst_1        
		//   42   87:invokevirtual   #904 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				recycler.quickRecycleScrapView(view);
		//   43   90:aload_1         
		//   44   91:aload           4
		//   45   93:invokevirtual   #914 <Method void RecyclerView$Recycler.quickRecycleScrapView(View)>
			}

		//   46   96:iload_2         
		//   47   97:iconst_1        
		//   48   98:isub            
		//   49   99:istore_2        
		//*  50  100:goto            9
			recycler.clearScrap();
		//   51  103:aload_1         
		//   52  104:invokevirtual   #917 <Method void RecyclerView$Recycler.clearScrap()>
			if(j > 0)
		//*  53  107:iload_3         
		//*  54  108:ifle            118
				mRecyclerView.invalidate();
		//   55  111:aload_0         
		//   56  112:getfield        #95  <Field RecyclerView mRecyclerView>
		//   57  115:invokevirtual   #918 <Method void RecyclerView.invalidate()>
		//   58  118:return          
		}

		public void removeAndRecycleView(View view, Recycler recycler)
		{
			removeView(view);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #922 <Method void removeView(View)>
			recycler.recycleView(view);
		//    3    5:aload_2         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #925 <Method void RecyclerView$Recycler.recycleView(View)>
		//    6   10:return          
		}

		public void removeAndRecycleViewAt(int i, Recycler recycler)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #451 <Method View getChildAt(int)>
		//    3    5:astore_3        
			removeViewAt(i);
		//    4    6:aload_0         
		//    5    7:iload_1         
		//    6    8:invokevirtual   #383 <Method void removeViewAt(int)>
			recycler.recycleView(view);
		//    7   11:aload_2         
		//    8   12:aload_3         
		//    9   13:invokevirtual   #925 <Method void RecyclerView$Recycler.recycleView(View)>
		//   10   16:return          
		}

		public boolean removeCallbacks(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          16
				return mRecyclerView.removeCallbacks(runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #929 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    7   15:ireturn         
			else
				return false;
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void removeDetachedView(View view)
		{
			mRecyclerView.removeDetachedView(view, false);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:iconst_0        
		//    4    6:invokevirtual   #911 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//    5    9:return          
		}

		public void removeView(View view)
		{
			mChildHelper.removeView(view);
		//    0    0:aload_0         
		//    1    1:getfield        #130 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #930 <Method void ChildHelper.removeView(View)>
		//    4    8:return          
		}

		public void removeViewAt(int i)
		{
			if(getChildAt(i) != null)
		//*   0    0:aload_0         
		//*   1    1:iload_1         
		//*   2    2:invokevirtual   #451 <Method View getChildAt(int)>
		//*   3    5:ifnull          16
				mChildHelper.removeViewAt(i);
		//    4    8:aload_0         
		//    5    9:getfield        #130 <Field ChildHelper mChildHelper>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #890 <Method void ChildHelper.removeViewAt(int)>
		//    8   16:return          
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			return requestChildRectangleOnScreen(recyclerview, view, rect, flag, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:iconst_0        
		//    6    7:invokevirtual   #935 <Method boolean requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
		//    7   10:ireturn         
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag, boolean flag1)
		{
			view = ((View) (getChildRectangleOnScreenScrollAmount(recyclerview, view, rect, flag)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:invokespecial   #937 <Method int[] getChildRectangleOnScreenScrollAmount(RecyclerView, View, Rect, boolean)>
		//    6    9:astore_2        
			int i = view[0];
		//    7   10:aload_2         
		//    8   11:iconst_0        
		//    9   12:iaload          
		//   10   13:istore          6
			int j = view[1];
		//   11   15:aload_2         
		//   12   16:iconst_1        
		//   13   17:iaload          
		//   14   18:istore          7
			if((!flag1 || isFocusedChildVisibleAfterScrolling(recyclerview, i, j)) && (i != 0 || j != 0))
		//*  15   20:iload           5
		//*  16   22:ifeq            37
		//*  17   25:aload_0         
		//*  18   26:aload_1         
		//*  19   27:iload           6
		//*  20   29:iload           7
		//*  21   31:invokespecial   #939 <Method boolean isFocusedChildVisibleAfterScrolling(RecyclerView, int, int)>
		//*  22   34:ifeq            73
		//*  23   37:iload           6
		//*  24   39:ifne            47
		//*  25   42:iload           7
		//*  26   44:ifeq            73
			{
				if(flag)
		//*  27   47:iload           4
		//*  28   49:ifeq            63
					recyclerview.scrollBy(i, j);
		//   29   52:aload_1         
		//   30   53:iload           6
		//   31   55:iload           7
		//   32   57:invokevirtual   #878 <Method void RecyclerView.scrollBy(int, int)>
				else
		//*  33   60:goto            71
					recyclerview.smoothScrollBy(i, j);
		//   34   63:aload_1         
		//   35   64:iload           6
		//   36   66:iload           7
		//   37   68:invokevirtual   #942 <Method void RecyclerView.smoothScrollBy(int, int)>
				return true;
		//   38   71:iconst_1        
		//   39   72:ireturn         
			} else
			{
				return false;
		//   40   73:iconst_0        
		//   41   74:ireturn         
			}
		}

		public void requestLayout()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          14
				mRecyclerView.requestLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #945 <Method void RecyclerView.requestLayout()>
		//    6   14:return          
		}

		public void requestSimpleAnimationsInNextLayout()
		{
			mRequestedSimpleAnimations = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #66  <Field boolean mRequestedSimpleAnimations>
		//    3    5:return          
		}

		public int scrollHorizontallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void scrollToPosition(int i)
		{
		//    0    0:return          
		}

		public int scrollVerticallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void setAutoMeasureEnabled(boolean flag)
		{
			mAutoMeasure = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #70  <Field boolean mAutoMeasure>
		//    3    5:return          
		}

		void setExactMeasureSpecsFrom(RecyclerView recyclerview)
		{
			setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getHeight(), 0x40000000));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #953 <Method int RecyclerView.getWidth()>
		//    3    5:ldc1            #234 <Int 0x40000000>
		//    4    7:invokestatic    #238 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    5   10:aload_1         
		//    6   11:invokevirtual   #954 <Method int RecyclerView.getHeight()>
		//    7   14:ldc1            #234 <Int 0x40000000>
		//    8   16:invokestatic    #238 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    9   19:invokevirtual   #957 <Method void setMeasureSpecs(int, int)>
		//   10   22:return          
		}

		public final void setItemPrefetchEnabled(boolean flag)
		{
			if(flag != mItemPrefetchEnabled)
		//*   0    0:iload_1         
		//*   1    1:aload_0         
		//*   2    2:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//*   3    5:icmpeq          35
			{
				mItemPrefetchEnabled = flag;
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:putfield        #74  <Field boolean mItemPrefetchEnabled>
				mPrefetchMaxCountObserved = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #960 <Field int mPrefetchMaxCountObserved>
				if(mRecyclerView != null)
		//*  10   18:aload_0         
		//*  11   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   22:ifnull          35
					mRecyclerView.mRecycler.updateViewCacheSize();
		//   13   25:aload_0         
		//   14   26:getfield        #95  <Field RecyclerView mRecyclerView>
		//   15   29:getfield        #779 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   16   32:invokevirtual   #963 <Method void RecyclerView$Recycler.updateViewCacheSize()>
			}
		//   17   35:return          
		}

		void setMeasureSpecs(int i, int j)
		{
			mWidth = android.view.View.MeasureSpec.getSize(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokestatic    #216 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    3    5:putfield        #654 <Field int mWidth>
			mWidthMode = android.view.View.MeasureSpec.getMode(i);
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:invokestatic    #213 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    7   13:putfield        #657 <Field int mWidthMode>
			if(mWidthMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*   8   16:aload_0         
		//*   9   17:getfield        #657 <Field int mWidthMode>
		//*  10   20:ifne            34
		//*  11   23:getstatic       #966 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  12   26:ifne            34
				mWidth = 0;
		//   13   29:aload_0         
		//   14   30:iconst_0        
		//   15   31:putfield        #654 <Field int mWidth>
			mHeight = android.view.View.MeasureSpec.getSize(j);
		//   16   34:aload_0         
		//   17   35:iload_2         
		//   18   36:invokestatic    #216 <Method int android.view.View$MeasureSpec.getSize(int)>
		//   19   39:putfield        #571 <Field int mHeight>
			mHeightMode = android.view.View.MeasureSpec.getMode(j);
		//   20   42:aload_0         
		//   21   43:iload_2         
		//   22   44:invokestatic    #213 <Method int android.view.View$MeasureSpec.getMode(int)>
		//   23   47:putfield        #574 <Field int mHeightMode>
			if(mHeightMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*  24   50:aload_0         
		//*  25   51:getfield        #574 <Field int mHeightMode>
		//*  26   54:ifne            68
		//*  27   57:getstatic       #966 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  28   60:ifne            68
				mHeight = 0;
		//   29   63:aload_0         
		//   30   64:iconst_0        
		//   31   65:putfield        #571 <Field int mHeight>
		//   32   68:return          
		}

		public void setMeasuredDimension(int i, int j)
		{
			mRecyclerView.setMeasuredDimension(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokestatic    #970 <Method void RecyclerView.access$1000(RecyclerView, int, int)>
		//    5    9:return          
		}

		public void setMeasuredDimension(Rect rect, int i, int j)
		{
			int k = rect.width();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #284 <Method int Rect.width()>
		//    2    4:istore          4
			int l = getPaddingLeft();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #246 <Method int getPaddingLeft()>
		//    5   10:istore          5
			int i1 = getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #255 <Method int getPaddingRight()>
		//    8   16:istore          6
			int j1 = rect.height();
		//    9   18:aload_1         
		//   10   19:invokevirtual   #287 <Method int Rect.height()>
		//   11   22:istore          7
			int k1 = getPaddingTop();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #249 <Method int getPaddingTop()>
		//   14   28:istore          8
			int l1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #261 <Method int getPaddingBottom()>
		//   17   34:istore          9
			setMeasuredDimension(chooseSize(i, k + l + i1, getMinimumWidth()), chooseSize(j, j1 + k1 + l1, getMinimumHeight()));
		//   18   36:aload_0         
		//   19   37:iload_2         
		//   20   38:iload           4
		//   21   40:iload           5
		//   22   42:iadd            
		//   23   43:iload           6
		//   24   45:iadd            
		//   25   46:aload_0         
		//   26   47:invokevirtual   #973 <Method int getMinimumWidth()>
		//   27   50:invokestatic    #975 <Method int chooseSize(int, int, int)>
		//   28   53:iload_3         
		//   29   54:iload           7
		//   30   56:iload           8
		//   31   58:iadd            
		//   32   59:iload           9
		//   33   61:iadd            
		//   34   62:aload_0         
		//   35   63:invokevirtual   #977 <Method int getMinimumHeight()>
		//   36   66:invokestatic    #975 <Method int chooseSize(int, int, int)>
		//   37   69:invokevirtual   #979 <Method void setMeasuredDimension(int, int)>
		//   38   72:return          
		}

		void setMeasuredDimensionFromChildren(int i, int j)
		{
			int k2 = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #447 <Method int getChildCount()>
		//    2    4:istore          11
			if(k2 == 0)
		//*   3    6:iload           11
		//*   4    8:ifne            21
			{
				mRecyclerView.defaultOnMeasure(i, j);
		//    5   11:aload_0         
		//    6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   15:iload_1         
		//    8   16:iload_2         
		//    9   17:invokevirtual   #855 <Method void RecyclerView.defaultOnMeasure(int, int)>
				return;
		//   10   20:return          
			}
			int i2 = 0x7fffffff;
		//   11   21:ldc2            #981 <Int 0x7fffffff>
		//   12   24:istore          9
			int i1 = 0x7fffffff;
		//   13   26:ldc2            #981 <Int 0x7fffffff>
		//   14   29:istore          5
			int k1 = 0x80000000;
		//   15   31:ldc1            #235 <Int 0x80000000>
		//   16   33:istore          7
			int l = 0x80000000;
		//   17   35:ldc1            #235 <Int 0x80000000>
		//   18   37:istore          4
			for(int k = 0; k < k2;)
		//*  19   39:iconst_0        
		//*  20   40:istore_3        
		//*  21   41:iload_3         
		//*  22   42:iload           11
		//*  23   44:icmpge          178
			{
				View view = getChildAt(k);
		//   24   47:aload_0         
		//   25   48:iload_3         
		//   26   49:invokevirtual   #451 <Method View getChildAt(int)>
		//   27   52:astore          12
				Rect rect = mRecyclerView.mTempRect;
		//   28   54:aload_0         
		//   29   55:getfield        #95  <Field RecyclerView mRecyclerView>
		//   30   58:getfield        #351 <Field Rect RecyclerView.mTempRect>
		//   31   61:astore          13
				getDecoratedBoundsWithMargins(view, rect);
		//   32   63:aload_0         
		//   33   64:aload           12
		//   34   66:aload           13
		//   35   68:invokevirtual   #355 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				int j1 = i2;
		//   36   71:iload           9
		//   37   73:istore          6
				if(rect.left < i2)
		//*  38   75:aload           13
		//*  39   77:getfield        #269 <Field int Rect.left>
		//*  40   80:iload           9
		//*  41   82:icmpge          92
					j1 = rect.left;
		//   42   85:aload           13
		//   43   87:getfield        #269 <Field int Rect.left>
		//   44   90:istore          6
				int l1 = k1;
		//   45   92:iload           7
		//   46   94:istore          8
				if(rect.right > k1)
		//*  47   96:aload           13
		//*  48   98:getfield        #358 <Field int Rect.right>
		//*  49  101:iload           7
		//*  50  103:icmple          113
					l1 = rect.right;
		//   51  106:aload           13
		//   52  108:getfield        #358 <Field int Rect.right>
		//   53  111:istore          8
				k1 = i1;
		//   54  113:iload           5
		//   55  115:istore          7
				if(rect.top < i1)
		//*  56  117:aload           13
		//*  57  119:getfield        #278 <Field int Rect.top>
		//*  58  122:iload           5
		//*  59  124:icmpge          134
					k1 = rect.top;
		//   60  127:aload           13
		//   61  129:getfield        #278 <Field int Rect.top>
		//   62  132:istore          7
				int j2 = l;
		//   63  134:iload           4
		//   64  136:istore          10
				if(rect.bottom > l)
		//*  65  138:aload           13
		//*  66  140:getfield        #361 <Field int Rect.bottom>
		//*  67  143:iload           4
		//*  68  145:icmple          155
					j2 = rect.bottom;
		//   69  148:aload           13
		//   70  150:getfield        #361 <Field int Rect.bottom>
		//   71  153:istore          10
				k++;
		//   72  155:iload_3         
		//   73  156:iconst_1        
		//   74  157:iadd            
		//   75  158:istore_3        
				i2 = j1;
		//   76  159:iload           6
		//   77  161:istore          9
				i1 = k1;
		//   78  163:iload           7
		//   79  165:istore          5
				k1 = l1;
		//   80  167:iload           8
		//   81  169:istore          7
				l = j2;
		//   82  171:iload           10
		//   83  173:istore          4
			}

		//*  84  175:goto            41
			mRecyclerView.mTempRect.set(i2, i1, k1, l);
		//   85  178:aload_0         
		//   86  179:getfield        #95  <Field RecyclerView mRecyclerView>
		//   87  182:getfield        #351 <Field Rect RecyclerView.mTempRect>
		//   88  185:iload           9
		//   89  187:iload           5
		//   90  189:iload           7
		//   91  191:iload           4
		//   92  193:invokevirtual   #422 <Method void Rect.set(int, int, int, int)>
			setMeasuredDimension(mRecyclerView.mTempRect, i, j);
		//   93  196:aload_0         
		//   94  197:aload_0         
		//   95  198:getfield        #95  <Field RecyclerView mRecyclerView>
		//   96  201:getfield        #351 <Field Rect RecyclerView.mTempRect>
		//   97  204:iload_1         
		//   98  205:iload_2         
		//   99  206:invokevirtual   #983 <Method void setMeasuredDimension(Rect, int, int)>
		//  100  209:return          
		}

		public void setMeasurementCacheEnabled(boolean flag)
		{
			mMeasurementCacheEnabled = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    3    5:return          
		}

		void setRecyclerView(RecyclerView recyclerview)
		{
			if(recyclerview == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       27
			{
				mRecyclerView = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = null;
		//    5    9:aload_0         
		//    6   10:aconst_null     
		//    7   11:putfield        #130 <Field ChildHelper mChildHelper>
				mWidth = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #654 <Field int mWidth>
				mHeight = 0;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #571 <Field int mHeight>
			} else
		//*  14   24:goto            56
			{
				mRecyclerView = recyclerview;
		//   15   27:aload_0         
		//   16   28:aload_1         
		//   17   29:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = recyclerview.mChildHelper;
		//   18   32:aload_0         
		//   19   33:aload_1         
		//   20   34:getfield        #986 <Field ChildHelper RecyclerView.mChildHelper>
		//   21   37:putfield        #130 <Field ChildHelper mChildHelper>
				mWidth = recyclerview.getWidth();
		//   22   40:aload_0         
		//   23   41:aload_1         
		//   24   42:invokevirtual   #953 <Method int RecyclerView.getWidth()>
		//   25   45:putfield        #654 <Field int mWidth>
				mHeight = recyclerview.getHeight();
		//   26   48:aload_0         
		//   27   49:aload_1         
		//   28   50:invokevirtual   #954 <Method int RecyclerView.getHeight()>
		//   29   53:putfield        #571 <Field int mHeight>
			}
			mWidthMode = 0x40000000;
		//   30   56:aload_0         
		//   31   57:ldc1            #234 <Int 0x40000000>
		//   32   59:putfield        #657 <Field int mWidthMode>
			mHeightMode = 0x40000000;
		//   33   62:aload_0         
		//   34   63:ldc1            #234 <Int 0x40000000>
		//   35   65:putfield        #574 <Field int mHeightMode>
		//   36   68:return          
		}

		boolean shouldMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return view.isLayoutRequested() || !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getHeight(), j, layoutparams.height);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #989 <Method boolean View.isLayoutRequested()>
		//    2    4:ifne            46
		//    3    7:aload_0         
		//    4    8:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    5   11:ifeq            46
		//    6   14:aload_1         
		//    7   15:invokevirtual   #612 <Method int View.getWidth()>
		//    8   18:iload_2         
		//    9   19:aload           4
		//   10   21:getfield        #720 <Field int RecyclerView$LayoutParams.width>
		//   11   24:invokestatic    #991 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   12   27:ifeq            46
		//   13   30:aload_1         
		//   14   31:invokevirtual   #613 <Method int View.getHeight()>
		//   15   34:iload_3         
		//   16   35:aload           4
		//   17   37:getfield        #725 <Field int RecyclerView$LayoutParams.height>
		//   18   40:invokestatic    #991 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   19   43:ifne            48
		//   20   46:iconst_1        
		//   21   47:ireturn         
		//   22   48:iconst_0        
		//   23   49:ireturn         
		}

		boolean shouldMeasureTwice()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean shouldReMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getMeasuredWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getMeasuredHeight(), j, layoutparams.height);
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ifeq            39
		//    3    7:aload_1         
		//    4    8:invokevirtual   #558 <Method int View.getMeasuredWidth()>
		//    5   11:iload_2         
		//    6   12:aload           4
		//    7   14:getfield        #720 <Field int RecyclerView$LayoutParams.width>
		//    8   17:invokestatic    #991 <Method boolean isMeasurementUpToDate(int, int, int)>
		//    9   20:ifeq            39
		//   10   23:aload_1         
		//   11   24:invokevirtual   #554 <Method int View.getMeasuredHeight()>
		//   12   27:iload_3         
		//   13   28:aload           4
		//   14   30:getfield        #725 <Field int RecyclerView$LayoutParams.height>
		//   15   33:invokestatic    #991 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   16   36:ifne            41
		//   17   39:iconst_1        
		//   18   40:ireturn         
		//   19   41:iconst_0        
		//   20   42:ireturn         
		}

		public void smoothScrollToPosition(RecyclerView recyclerview, State state, int i)
		{
			Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
		//    0    0:ldc2            #840 <String "RecyclerView">
		//    1    3:ldc2            #997 <String "You must override smoothScrollToPosition to support smooth scrolling">
		//    2    6:invokestatic    #848 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void startSmoothScroll(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller != null && smoothscroller != mSmoothScroller && mSmoothScroller.isRunning())
		//*   0    0:aload_0         
		//*   1    1:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          32
		//*   3    7:aload_1         
		//*   4    8:aload_0         
		//*   5    9:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   6   12:if_acmpeq       32
		//*   7   15:aload_0         
		//*   8   16:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   9   19:invokevirtual   #191 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//*  10   22:ifeq            32
				mSmoothScroller.stop();
		//   11   25:aload_0         
		//   12   26:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   13   29:invokevirtual   #1001 <Method void RecyclerView$SmoothScroller.stop()>
			mSmoothScroller = smoothscroller;
		//   14   32:aload_0         
		//   15   33:aload_1         
		//   16   34:putfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
			mSmoothScroller.start(mRecyclerView, this);
		//   17   37:aload_0         
		//   18   38:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   19   41:aload_0         
		//   20   42:getfield        #95  <Field RecyclerView mRecyclerView>
		//   21   45:aload_0         
		//   22   46:invokevirtual   #1005 <Method void RecyclerView$SmoothScroller.start(RecyclerView, RecyclerView$LayoutManager)>
		//   23   49:return          
		}

		public void stopIgnoringView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			((ViewHolder) (view)).stopIgnoring();
		//    3    5:aload_1         
		//    4    6:invokevirtual   #1009 <Method void RecyclerView$ViewHolder.stopIgnoring()>
			((ViewHolder) (view)).resetInternal();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #1012 <Method void RecyclerView$ViewHolder.resetInternal()>
			((ViewHolder) (view)).addFlags(4);
		//    7   13:aload_1         
		//    8   14:iconst_4        
		//    9   15:invokevirtual   #676 <Method void RecyclerView$ViewHolder.addFlags(int)>
		//   10   18:return          
		}

		void stopSmoothScroller()
		{
			if(mSmoothScroller != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          14
				mSmoothScroller.stop();
		//    3    7:aload_0         
		//    4    8:getfield        #186 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #1001 <Method void RecyclerView$SmoothScroller.stop()>
		//    6   14:return          
		}

		public boolean supportsPredictiveItemAnimations()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean mAutoMeasure;
		ChildHelper mChildHelper;
		private int mHeight;
		private int mHeightMode;
		ViewBoundsCheck mHorizontalBoundCheck;
		private final ViewBoundsCheck.Callback mHorizontalBoundCheckCallback = new _cls1();
		boolean mIsAttachedToWindow;
		private boolean mItemPrefetchEnabled;
		private boolean mMeasurementCacheEnabled;
		int mPrefetchMaxCountObserved;
		boolean mPrefetchMaxObservedInInitialPrefetch;
		RecyclerView mRecyclerView;
		boolean mRequestedSimpleAnimations;
		SmoothScroller mSmoothScroller;
		ViewBoundsCheck mVerticalBoundCheck;
		private final ViewBoundsCheck.Callback mVerticalBoundCheckCallback = new _cls2();
		private int mWidth;
		private int mWidthMode;


/*
		static void access$1200(LayoutManager layoutmanager, SmoothScroller smoothscroller)
		{
			layoutmanager.onSmoothScrollerStopped(smoothscroller);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #81  <Method void onSmoothScrollerStopped(RecyclerView$SmoothScroller)>
			return;
		//    3    5:return          
		}

*/

		public LayoutManager()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #47  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #9   <Class RecyclerView$LayoutManager$1>
		//    4    8:dup             
		//    5    9:aload_0         
		//    6   10:invokespecial   #50  <Method void RecyclerView$LayoutManager$1(RecyclerView$LayoutManager)>
		//    7   13:putfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//    8   16:aload_0         
		//    9   17:new             #11  <Class RecyclerView$LayoutManager$2>
		//   10   20:dup             
		//   11   21:aload_0         
		//   12   22:invokespecial   #53  <Method void RecyclerView$LayoutManager$2(RecyclerView$LayoutManager)>
		//   13   25:putfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
			mHorizontalBoundCheck = new ViewBoundsCheck(mHorizontalBoundCheckCallback);
		//   14   28:aload_0         
		//   15   29:new             #57  <Class ViewBoundsCheck>
		//   16   32:dup             
		//   17   33:aload_0         
		//   18   34:getfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//   19   37:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   20   40:putfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
			mVerticalBoundCheck = new ViewBoundsCheck(mVerticalBoundCheckCallback);
		//   21   43:aload_0         
		//   22   44:new             #57  <Class ViewBoundsCheck>
		//   23   47:dup             
		//   24   48:aload_0         
		//   25   49:getfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
		//   26   52:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   27   55:putfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
			mRequestedSimpleAnimations = false;
		//   28   58:aload_0         
		//   29   59:iconst_0        
		//   30   60:putfield        #66  <Field boolean mRequestedSimpleAnimations>
			mIsAttachedToWindow = false;
		//   31   63:aload_0         
		//   32   64:iconst_0        
		//   33   65:putfield        #68  <Field boolean mIsAttachedToWindow>
			mAutoMeasure = false;
		//   34   68:aload_0         
		//   35   69:iconst_0        
		//   36   70:putfield        #70  <Field boolean mAutoMeasure>
			mMeasurementCacheEnabled = true;
		//   37   73:aload_0         
		//   38   74:iconst_1        
		//   39   75:putfield        #72  <Field boolean mMeasurementCacheEnabled>
			mItemPrefetchEnabled = true;
		//   40   78:aload_0         
		//   41   79:iconst_1        
		//   42   80:putfield        #74  <Field boolean mItemPrefetchEnabled>
		//   43   83:return          
		}
	}

	public static interface LayoutManager.LayoutPrefetchRegistry
	{

		public abstract void addPosition(int i, int j);
	}

	public static class LayoutManager.Properties
	{

		public int orientation;
		public boolean reverseLayout;
		public int spanCount;
		public boolean stackFromEnd;

		public LayoutManager.Properties()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams
	{

		public int getViewAdapterPosition()
		{
			return mViewHolder.getAdapterPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #49  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//    3    7:ireturn         
		}

		public int getViewLayoutPosition()
		{
			return mViewHolder.getLayoutPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #53  <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//    3    7:ireturn         
		}

		public int getViewPosition()
		{
			return mViewHolder.getPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #58  <Method int RecyclerView$ViewHolder.getPosition()>
		//    3    7:ireturn         
		}

		public boolean isItemChanged()
		{
			return mViewHolder.isUpdated();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #64  <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//    3    7:ireturn         
		}

		public boolean isItemRemoved()
		{
			return mViewHolder.isRemoved();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #68  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//    3    7:ireturn         
		}

		public boolean isViewInvalid()
		{
			return mViewHolder.isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #72  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//    3    7:ireturn         
		}

		public boolean viewNeedsUpdate()
		{
			return mViewHolder.needsUpdate();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #76  <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//    3    7:ireturn         
		}

		final Rect mDecorInsets;
		boolean mInsetsDirty;
		boolean mPendingInvalidate;
		ViewHolder mViewHolder;

		public LayoutParams(int i, int j)
		{
			super(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #18  <Method void android.view.ViewGroup$MarginLayoutParams(int, int)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(Context context, AttributeSet attributeset)
		{
			super(context, attributeset);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #33  <Method void android.view.ViewGroup$MarginLayoutParams(Context, AttributeSet)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(LayoutParams layoutparams)
		{
			super(((android.view.ViewGroup.LayoutParams) (layoutparams)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			super(layoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams)
		{
			super(marginlayoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #40  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}
	}

	public static interface OnChildAttachStateChangeListener
	{

		public abstract void onChildViewAttachedToWindow(View view);

		public abstract void onChildViewDetachedFromWindow(View view);
	}

	public static abstract class OnFlingListener
	{

		public abstract boolean onFling(int i, int j);

		public OnFlingListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface OnItemTouchListener
	{

		public abstract boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);

		public abstract void onRequestDisallowInterceptTouchEvent(boolean flag);

		public abstract void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);
	}

	public static abstract class OnScrollListener
	{

		public void onScrollStateChanged(RecyclerView recyclerview, int i)
		{
		//    0    0:return          
		}

		public void onScrolled(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public OnScrollListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class RecycledViewPool
	{

		private ScrapData getScrapDataForType(int i)
		{
			ScrapData scrapdata1 = (ScrapData)mScrap.get(i);
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_3        
			ScrapData scrapdata = scrapdata1;
		//    6   12:aload_3         
		//    7   13:astore_2        
			if(scrapdata1 == null)
		//*   8   14:aload_3         
		//*   9   15:ifnonnull       35
			{
				scrapdata = new ScrapData();
		//   10   18:new             #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   11   21:dup             
		//   12   22:invokespecial   #36  <Method void RecyclerView$RecycledViewPool$ScrapData()>
		//   13   25:astore_2        
				mScrap.put(i, ((Object) (scrapdata)));
		//   14   26:aload_0         
		//   15   27:getfield        #26  <Field SparseArray mScrap>
		//   16   30:iload_1         
		//   17   31:aload_2         
		//   18   32:invokevirtual   #40  <Method void SparseArray.put(int, Object)>
			}
			return scrapdata;
		//   19   35:aload_2         
		//   20   36:areturn         
		}

		void attach(Adapter adapter)
		{
			mAttachCount = mAttachCount + 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:iadd            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		public void clear()
		{
			for(int i = 0; i < mScrap.size(); i++)
		//*   0    0:iconst_0        
		//*   1    1:istore_1        
		//*   2    2:iload_1         
		//*   3    3:aload_0         
		//*   4    4:getfield        #26  <Field SparseArray mScrap>
		//*   5    7:invokevirtual   #47  <Method int SparseArray.size()>
		//*   6   10:icmpge          37
				((ScrapData)mScrap.valueAt(i)).mScrapHeap.clear();
		//    7   13:aload_0         
		//    8   14:getfield        #26  <Field SparseArray mScrap>
		//    9   17:iload_1         
		//   10   18:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   11   21:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   12   24:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   13   27:invokevirtual   #58  <Method void ArrayList.clear()>

		//   14   30:iload_1         
		//   15   31:iconst_1        
		//   16   32:iadd            
		//   17   33:istore_1        
		//*  18   34:goto            2
		//   19   37:return          
		}

		void detach()
		{
			mAttachCount = mAttachCount - 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:isub            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		void factorInBindTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mBindRunningAverageNs = runningAverage(scrapdata.mBindRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//   11   22:return          
		}

		void factorInCreateTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mCreateRunningAverageNs = runningAverage(scrapdata.mCreateRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//   11   22:return          
		}

		public ViewHolder getRecycledView(int i)
		{
			Object obj = ((Object) ((ScrapData)mScrap.get(i)));
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_2        
			if(obj != null && !((ScrapData) (obj)).mScrapHeap.isEmpty())
		//*   6   12:aload_2         
		//*   7   13:ifnull          45
		//*   8   16:aload_2         
		//*   9   17:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//*  10   20:invokevirtual   #81  <Method boolean ArrayList.isEmpty()>
		//*  11   23:ifne            45
			{
				obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//   12   26:aload_2         
		//   13   27:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   14   30:astore_2        
				return (ViewHolder)((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1);
		//   15   31:aload_2         
		//   16   32:aload_2         
		//   17   33:invokevirtual   #82  <Method int ArrayList.size()>
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   21   41:checkcast       #87  <Class RecyclerView$ViewHolder>
		//   22   44:areturn         
			} else
			{
				return null;
		//   23   45:aconst_null     
		//   24   46:areturn         
			}
		}

		public int getRecycledViewCount(int i)
		{
			return getScrapDataForType(i).mScrapHeap.size();
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    4    8:invokevirtual   #82  <Method int ArrayList.size()>
		//    5   11:ireturn         
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			if(adapter != null)
		//*   0    0:aload_1         
		//*   1    1:ifnull          8
				detach();
		//    2    4:aload_0         
		//    3    5:invokevirtual   #93  <Method void detach()>
			if(!flag && mAttachCount == 0)
		//*   4    8:iload_3         
		//*   5    9:ifne            23
		//*   6   12:aload_0         
		//*   7   13:getfield        #28  <Field int mAttachCount>
		//*   8   16:ifne            23
				clear();
		//    9   19:aload_0         
		//   10   20:invokevirtual   #94  <Method void clear()>
			if(adapter1 != null)
		//*  11   23:aload_2         
		//*  12   24:ifnull          32
				attach(adapter1);
		//   13   27:aload_0         
		//   14   28:aload_2         
		//   15   29:invokevirtual   #96  <Method void attach(RecyclerView$Adapter)>
		//   16   32:return          
		}

		public void putRecycledView(ViewHolder viewholder)
		{
			int i = viewholder.getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #101 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    2    4:istore_2        
			ArrayList arraylist = getScrapDataForType(i).mScrapHeap;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    6   10:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    7   13:astore_3        
			if(((ScrapData)mScrap.get(i)).mMaxScrap <= arraylist.size())
		//*   8   14:aload_0         
		//*   9   15:getfield        #26  <Field SparseArray mScrap>
		//*  10   18:iload_2         
		//*  11   19:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//*  12   22:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//*  13   25:getfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
		//*  14   28:aload_3         
		//*  15   29:invokevirtual   #82  <Method int ArrayList.size()>
		//*  16   32:icmpgt          36
			{
				return;
		//   17   35:return          
			} else
			{
				viewholder.resetInternal();
		//   18   36:aload_1         
		//   19   37:invokevirtual   #107 <Method void RecyclerView$ViewHolder.resetInternal()>
				arraylist.add(((Object) (viewholder)));
		//   20   40:aload_3         
		//   21   41:aload_1         
		//   22   42:invokevirtual   #111 <Method boolean ArrayList.add(Object)>
		//   23   45:pop             
				return;
		//   24   46:return          
			}
		}

		long runningAverage(long l, long l1)
		{
			if(l == 0L)
		//*   0    0:lload_1         
		//*   1    1:lconst_0        
		//*   2    2:lcmp            
		//*   3    3:ifne            8
				return l1;
		//    4    6:lload_3         
		//    5    7:lreturn         
			else
				return (l / 4L) * 3L + l1 / 4L;
		//    6    8:lload_1         
		//    7    9:ldc2w           #112 <Long 4L>
		//    8   12:ldiv            
		//    9   13:ldc2w           #114 <Long 3L>
		//   10   16:lmul            
		//   11   17:lload_3         
		//   12   18:ldc2w           #112 <Long 4L>
		//   13   21:ldiv            
		//   14   22:ladd            
		//   15   23:lreturn         
		}

		public void setMaxRecycledViews(int i, int j)
		{
			Object obj = ((Object) (getScrapDataForType(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore_3        
			obj.mMaxScrap = j;
		//    4    6:aload_3         
		//    5    7:iload_2         
		//    6    8:putfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
			obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//    7   11:aload_3         
		//    8   12:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    9   15:astore_3        
			if(obj != null)
		//*  10   16:aload_3         
		//*  11   17:ifnull          42
				for(; ((ArrayList) (obj)).size() > j; ((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1));
		//   12   20:aload_3         
		//   13   21:invokevirtual   #82  <Method int ArrayList.size()>
		//   14   24:iload_2         
		//   15   25:icmple          42
		//   16   28:aload_3         
		//   17   29:aload_3         
		//   18   30:invokevirtual   #82  <Method int ArrayList.size()>
		//   19   33:iconst_1        
		//   20   34:isub            
		//   21   35:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   22   38:pop             
		//*  23   39:goto            20
		//   24   42:return          
		}

		int size()
		{
			int j = 0;
		//    0    0:iconst_0        
		//    1    1:istore_2        
			for(int i = 0; i < mScrap.size();)
		//*   2    2:iconst_0        
		//*   3    3:istore_1        
		//*   4    4:iload_1         
		//*   5    5:aload_0         
		//*   6    6:getfield        #26  <Field SparseArray mScrap>
		//*   7    9:invokevirtual   #47  <Method int SparseArray.size()>
		//*   8   12:icmpge          55
			{
				ArrayList arraylist = ((ScrapData)mScrap.valueAt(i)).mScrapHeap;
		//    9   15:aload_0         
		//   10   16:getfield        #26  <Field SparseArray mScrap>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   13   23:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   14   26:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   15   29:astore          4
				int k = j;
		//   16   31:iload_2         
		//   17   32:istore_3        
				if(arraylist != null)
		//*  18   33:aload           4
		//*  19   35:ifnull          46
					k = j + arraylist.size();
		//   20   38:iload_2         
		//   21   39:aload           4
		//   22   41:invokevirtual   #82  <Method int ArrayList.size()>
		//   23   44:iadd            
		//   24   45:istore_3        
				i++;
		//   25   46:iload_1         
		//   26   47:iconst_1        
		//   27   48:iadd            
		//   28   49:istore_1        
				j = k;
		//   29   50:iload_3         
		//   30   51:istore_2        
			}

		//*  31   52:goto            4
			return j;
		//   32   55:iload_2         
		//   33   56:ireturn         
		}

		boolean willBindInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mBindRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		boolean willCreateInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mCreateRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		private static final int DEFAULT_MAX_SCRAP = 5;
		private int mAttachCount;
		SparseArray mScrap;

		public RecycledViewPool()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #21  <Method void Object()>
			mScrap = new SparseArray();
		//    2    4:aload_0         
		//    3    5:new             #23  <Class SparseArray>
		//    4    8:dup             
		//    5    9:invokespecial   #24  <Method void SparseArray()>
		//    6   12:putfield        #26  <Field SparseArray mScrap>
			mAttachCount = 0;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #28  <Field int mAttachCount>
		//   10   20:return          
		}
	}

	static class RecycledViewPool.ScrapData
	{

		long mBindRunningAverageNs;
		long mCreateRunningAverageNs;
		int mMaxScrap;
		ArrayList mScrapHeap;

		RecycledViewPool.ScrapData()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #22  <Method void Object()>
			mScrapHeap = new ArrayList();
		//    2    4:aload_0         
		//    3    5:new             #24  <Class ArrayList>
		//    4    8:dup             
		//    5    9:invokespecial   #25  <Method void ArrayList()>
		//    6   12:putfield        #27  <Field ArrayList mScrapHeap>
			mMaxScrap = 5;
		//    7   15:aload_0         
		//    8   16:iconst_5        
		//    9   17:putfield        #29  <Field int mMaxScrap>
			mCreateRunningAverageNs = 0L;
		//   10   20:aload_0         
		//   11   21:lconst_0        
		//   12   22:putfield        #31  <Field long mCreateRunningAverageNs>
			mBindRunningAverageNs = 0L;
		//   13   25:aload_0         
		//   14   26:lconst_0        
		//   15   27:putfield        #33  <Field long mBindRunningAverageNs>
		//   16   30:return          
		}
	}

	public final class Recycler
	{

		private void attachAccessibilityDelegate(View view)
		{
			if(isAccessibilityEnabled())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:invokevirtual   #61  <Method boolean RecyclerView.isAccessibilityEnabled()>
		//*   3    7:ifeq            43
			{
				if(ViewCompat.getImportantForAccessibility(view) == 0)
		//*   4   10:aload_1         
		//*   5   11:invokestatic    #67  <Method int ViewCompat.getImportantForAccessibility(View)>
		//*   6   14:ifne            22
					ViewCompat.setImportantForAccessibility(view, 1);
		//    7   17:aload_1         
		//    8   18:iconst_1        
		//    9   19:invokestatic    #71  <Method void ViewCompat.setImportantForAccessibility(View, int)>
				if(!ViewCompat.hasAccessibilityDelegate(view))
		//*  10   22:aload_1         
		//*  11   23:invokestatic    #75  <Method boolean ViewCompat.hasAccessibilityDelegate(View)>
		//*  12   26:ifne            43
					ViewCompat.setAccessibilityDelegate(view, mAccessibilityDelegate.getItemDelegate());
		//   13   29:aload_1         
		//   14   30:aload_0         
		//   15   31:getfield        #30  <Field RecyclerView this$0>
		//   16   34:getfield        #79  <Field RecyclerViewAccessibilityDelegate RecyclerView.mAccessibilityDelegate>
		//   17   37:invokevirtual   #85  <Method android.support.v4.view.AccessibilityDelegateCompat RecyclerViewAccessibilityDelegate.getItemDelegate()>
		//   18   40:invokestatic    #89  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			}
		//   19   43:return          
		}

		private void invalidateDisplayListInt(ViewHolder viewholder)
		{
			if(viewholder.itemView instanceof ViewGroup)
		//*   0    0:aload_1         
		//*   1    1:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//*   2    4:instanceof      #99  <Class ViewGroup>
		//*   3    7:ifeq            22
				invalidateDisplayListInt((ViewGroup)viewholder.itemView, false);
		//    4   10:aload_0         
		//    5   11:aload_1         
		//    6   12:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//    7   15:checkcast       #99  <Class ViewGroup>
		//    8   18:iconst_0        
		//    9   19:invokespecial   #102 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
		//   10   22:return          
		}

		private void invalidateDisplayListInt(ViewGroup viewgroup, boolean flag)
		{
			for(int i = viewgroup.getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #106 <Method int ViewGroup.getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_3        
		//*   5    7:iload_3         
		//*   6    8:iflt            43
			{
				View view = viewgroup.getChildAt(i);
		//    7   11:aload_1         
		//    8   12:iload_3         
		//    9   13:invokevirtual   #110 <Method View ViewGroup.getChildAt(int)>
		//   10   16:astore          4
				if(view instanceof ViewGroup)
		//*  11   18:aload           4
		//*  12   20:instanceof      #99  <Class ViewGroup>
		//*  13   23:ifeq            36
					invalidateDisplayListInt((ViewGroup)view, true);
		//   14   26:aload_0         
		//   15   27:aload           4
		//   16   29:checkcast       #99  <Class ViewGroup>
		//   17   32:iconst_1        
		//   18   33:invokespecial   #102 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
			}

		//   19   36:iload_3         
		//   20   37:iconst_1        
		//   21   38:isub            
		//   22   39:istore_3        
		//*  23   40:goto            7
			if(!flag)
		//*  24   43:iload_2         
		//*  25   44:ifne            48
				return;
		//   26   47:return          
			if(viewgroup.getVisibility() == 4)
		//*  27   48:aload_1         
		//*  28   49:invokevirtual   #113 <Method int ViewGroup.getVisibility()>
		//*  29   52:iconst_4        
		//*  30   53:icmpne          67
			{
				viewgroup.setVisibility(0);
		//   31   56:aload_1         
		//   32   57:iconst_0        
		//   33   58:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(4);
		//   34   61:aload_1         
		//   35   62:iconst_4        
		//   36   63:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				return;
		//   37   66:return          
			} else
			{
				int j = viewgroup.getVisibility();
		//   38   67:aload_1         
		//   39   68:invokevirtual   #113 <Method int ViewGroup.getVisibility()>
		//   40   71:istore_3        
				viewgroup.setVisibility(4);
		//   41   72:aload_1         
		//   42   73:iconst_4        
		//   43   74:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(j);
		//   44   77:aload_1         
		//   45   78:iload_3         
		//   46   79:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				return;
		//   47   82:return          
			}
		}

		private boolean tryBindViewHolderByDeadline(ViewHolder viewholder, int i, int j, long l)
		{
			viewholder.mOwnerRecyclerView = RecyclerView.this;
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #30  <Field RecyclerView this$0>
		//    3    5:putfield        #122 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			int k = viewholder.getItemViewType();
		//    4    8:aload_1         
		//    5    9:invokevirtual   #125 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    6   12:istore          6
			long l1 = getNanoTime();
		//    7   14:aload_0         
		//    8   15:getfield        #30  <Field RecyclerView this$0>
		//    9   18:invokevirtual   #129 <Method long RecyclerView.getNanoTime()>
		//   10   21:lstore          7
			if(l != 0xffffffffL && !mRecyclerPool.willBindInTime(k, l1, l))
		//*  11   23:lload           4
		//*  12   25:ldc2w           #130 <Long 0xffffffffL>
		//*  13   28:lcmp            
		//*  14   29:ifeq            50
		//*  15   32:aload_0         
		//*  16   33:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  17   36:iload           6
		//*  18   38:lload           7
		//*  19   40:lload           4
		//*  20   42:invokevirtual   #139 <Method boolean RecyclerView$RecycledViewPool.willBindInTime(int, long, long)>
		//*  21   45:ifne            50
				return false;
		//   22   48:iconst_0        
		//   23   49:ireturn         
			mAdapter.bindViewHolder(viewholder, i);
		//   24   50:aload_0         
		//   25   51:getfield        #30  <Field RecyclerView this$0>
		//   26   54:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   27   57:aload_1         
		//   28   58:iload_2         
		//   29   59:invokevirtual   #149 <Method void RecyclerView$Adapter.bindViewHolder(RecyclerView$ViewHolder, int)>
			l = getNanoTime();
		//   30   62:aload_0         
		//   31   63:getfield        #30  <Field RecyclerView this$0>
		//   32   66:invokevirtual   #129 <Method long RecyclerView.getNanoTime()>
		//   33   69:lstore          4
			mRecyclerPool.factorInBindTime(viewholder.getItemViewType(), l - l1);
		//   34   71:aload_0         
		//   35   72:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   36   75:aload_1         
		//   37   76:invokevirtual   #125 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   38   79:lload           4
		//   39   81:lload           7
		//   40   83:lsub            
		//   41   84:invokevirtual   #153 <Method void RecyclerView$RecycledViewPool.factorInBindTime(int, long)>
			attachAccessibilityDelegate(viewholder.itemView);
		//   42   87:aload_0         
		//   43   88:aload_1         
		//   44   89:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   45   92:invokespecial   #155 <Method void attachAccessibilityDelegate(View)>
			if(mState.isPreLayout())
		//*  46   95:aload_0         
		//*  47   96:getfield        #30  <Field RecyclerView this$0>
		//*  48   99:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  49  102:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//*  50  105:ifeq            113
				viewholder.mPreLayoutPosition = j;
		//   51  108:aload_1         
		//   52  109:iload_3         
		//   53  110:putfield        #167 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			return true;
		//   54  113:iconst_1        
		//   55  114:ireturn         
		}

		void addViewHolderToRecycledViewPool(ViewHolder viewholder, boolean flag)
		{
			RecyclerView.clearNestedRecyclerViewIfNotNested(viewholder);
		//    0    0:aload_1         
		//    1    1:invokestatic    #172 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
			ViewCompat.setAccessibilityDelegate(viewholder.itemView, ((android.support.v4.view.AccessibilityDelegateCompat) (null)));
		//    2    4:aload_1         
		//    3    5:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//    4    8:aconst_null     
		//    5    9:invokestatic    #89  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			if(flag)
		//*   6   12:iload_2         
		//*   7   13:ifeq            21
				dispatchViewRecycled(viewholder);
		//    8   16:aload_0         
		//    9   17:aload_1         
		//   10   18:invokevirtual   #175 <Method void dispatchViewRecycled(RecyclerView$ViewHolder)>
			viewholder.mOwnerRecyclerView = null;
		//   11   21:aload_1         
		//   12   22:aconst_null     
		//   13   23:putfield        #122 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			getRecycledViewPool().putRecycledView(viewholder);
		//   14   26:aload_0         
		//   15   27:invokevirtual   #179 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//   16   30:aload_1         
		//   17   31:invokevirtual   #182 <Method void RecyclerView$RecycledViewPool.putRecycledView(RecyclerView$ViewHolder)>
		//   18   34:return          
		}

		public void bindViewToPosition(View view, int i)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          5
			if(viewholder == null)
		//*   3    6:aload           5
		//*   4    8:ifnonnull       21
				throw new IllegalArgumentException("The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter");
		//    5   11:new             #189 <Class IllegalArgumentException>
		//    6   14:dup             
		//    7   15:ldc1            #191 <String "The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter">
		//    8   17:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//    9   20:athrow          
			int j = mAdapterHelper.findPositionOffset(i);
		//   10   21:aload_0         
		//   11   22:getfield        #30  <Field RecyclerView this$0>
		//   12   25:getfield        #198 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   13   28:iload_2         
		//   14   29:invokevirtual   #204 <Method int AdapterHelper.findPositionOffset(int)>
		//   15   32:istore_3        
			if(j < 0 || j >= mAdapter.getItemCount())
		//*  16   33:iload_3         
		//*  17   34:iflt            51
		//*  18   37:iload_3         
		//*  19   38:aload_0         
		//*  20   39:getfield        #30  <Field RecyclerView this$0>
		//*  21   42:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  22   45:invokevirtual   #207 <Method int RecyclerView$Adapter.getItemCount()>
		//*  23   48:icmplt          110
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(j).append(").").append("state:").append(mState.getItemCount()).toString());
		//   24   51:new             #209 <Class IndexOutOfBoundsException>
		//   25   54:dup             
		//   26   55:new             #211 <Class StringBuilder>
		//   27   58:dup             
		//   28   59:invokespecial   #212 <Method void StringBuilder()>
		//   29   62:ldc1            #214 <String "Inconsistency detected. Invalid item position ">
		//   30   64:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   31   67:iload_2         
		//   32   68:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   33   71:ldc1            #223 <String "(offset:">
		//   34   73:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   35   76:iload_3         
		//   36   77:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   37   80:ldc1            #225 <String ").">
		//   38   82:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   39   85:ldc1            #227 <String "state:">
		//   40   87:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   41   90:aload_0         
		//   42   91:getfield        #30  <Field RecyclerView this$0>
		//   43   94:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//   44   97:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//   45  100:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   46  103:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   47  106:invokespecial   #233 <Method void IndexOutOfBoundsException(String)>
		//   48  109:athrow          
			tryBindViewHolderByDeadline(viewholder, j, i, 0xffffffffL);
		//   49  110:aload_0         
		//   50  111:aload           5
		//   51  113:iload_3         
		//   52  114:iload_2         
		//   53  115:ldc2w           #130 <Long 0xffffffffL>
		//   54  118:invokespecial   #235 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//   55  121:pop             
			view = ((View) (viewholder.itemView.getLayoutParams()));
		//   56  122:aload           5
		//   57  124:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   58  127:invokevirtual   #241 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   59  130:astore_1        
			if(view == null)
		//*  60  131:aload_1         
		//*  61  132:ifnonnull       158
			{
				view = ((View) ((LayoutParams)generateDefaultLayoutParams()));
		//   62  135:aload_0         
		//   63  136:getfield        #30  <Field RecyclerView this$0>
		//   64  139:invokevirtual   #244 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//   65  142:checkcast       #246 <Class RecyclerView$LayoutParams>
		//   66  145:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   67  146:aload           5
		//   68  148:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   69  151:aload_1         
		//   70  152:invokevirtual   #250 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//*  71  155:goto            198
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (view))))
		//*  72  158:aload_0         
		//*  73  159:getfield        #30  <Field RecyclerView this$0>
		//*  74  162:aload_1         
		//*  75  163:invokevirtual   #254 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//*  76  166:ifne            193
			{
				view = ((View) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (view)))));
		//   77  169:aload_0         
		//   78  170:getfield        #30  <Field RecyclerView this$0>
		//   79  173:aload_1         
		//   80  174:invokevirtual   #258 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//   81  177:checkcast       #246 <Class RecyclerView$LayoutParams>
		//   82  180:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   83  181:aload           5
		//   84  183:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   85  186:aload_1         
		//   86  187:invokevirtual   #250 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//*  87  190:goto            198
			{
				view = ((View) ((LayoutParams)view));
		//   88  193:aload_1         
		//   89  194:checkcast       #246 <Class RecyclerView$LayoutParams>
		//   90  197:astore_1        
			}
			view.mInsetsDirty = true;
		//   91  198:aload_1         
		//   92  199:iconst_1        
		//   93  200:putfield        #262 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			view.mViewHolder = viewholder;
		//   94  203:aload_1         
		//   95  204:aload           5
		//   96  206:putfield        #266 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
			boolean flag;
			if(viewholder.itemView.getParent() == null)
		//*  97  209:aload           5
		//*  98  211:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//*  99  214:invokevirtual   #270 <Method ViewParent View.getParent()>
		//* 100  217:ifnonnull       226
				flag = true;
		//  101  220:iconst_1        
		//  102  221:istore          4
			else
		//* 103  223:goto            229
				flag = false;
		//  104  226:iconst_0        
		//  105  227:istore          4
			view.mPendingInvalidate = flag;
		//  106  229:aload_1         
		//  107  230:iload           4
		//  108  232:putfield        #273 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//  109  235:return          
		}

		public void clear()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #276 <Method void ArrayList.clear()>
			recycleAndClearCachedViews();
		//    3    7:aload_0         
		//    4    8:invokevirtual   #279 <Method void recycleAndClearCachedViews()>
		//    5   11:return          
		}

		void clearOldPositions()
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < l; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          36
				((ViewHolder)mCachedViews.get(i)).clearOldPosition();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   14   26:invokevirtual   #290 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   15   29:iload_1         
		//   16   30:iconst_1        
		//   17   31:iadd            
		//   18   32:istore_1        
		//*  19   33:goto            10
			l = mAttachedScrap.size();
		//   20   36:aload_0         
		//   21   37:getfield        #38  <Field ArrayList mAttachedScrap>
		//   22   40:invokevirtual   #283 <Method int ArrayList.size()>
		//   23   43:istore_2        
			for(int j = 0; j < l; j++)
		//*  24   44:iconst_0        
		//*  25   45:istore_1        
		//*  26   46:iload_1         
		//*  27   47:iload_2         
		//*  28   48:icmpge          72
				((ViewHolder)mAttachedScrap.get(j)).clearOldPosition();
		//   29   51:aload_0         
		//   30   52:getfield        #38  <Field ArrayList mAttachedScrap>
		//   31   55:iload_1         
		//   32   56:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   33   59:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   34   62:invokevirtual   #290 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   35   65:iload_1         
		//   36   66:iconst_1        
		//   37   67:iadd            
		//   38   68:istore_1        
		//*  39   69:goto            46
			if(mChangedScrap != null)
		//*  40   72:aload_0         
		//*  41   73:getfield        #40  <Field ArrayList mChangedScrap>
		//*  42   76:ifnull          115
			{
				int i1 = mChangedScrap.size();
		//   43   79:aload_0         
		//   44   80:getfield        #40  <Field ArrayList mChangedScrap>
		//   45   83:invokevirtual   #283 <Method int ArrayList.size()>
		//   46   86:istore_2        
				for(int k = 0; k < i1; k++)
		//*  47   87:iconst_0        
		//*  48   88:istore_1        
		//*  49   89:iload_1         
		//*  50   90:iload_2         
		//*  51   91:icmpge          115
					((ViewHolder)mChangedScrap.get(k)).clearOldPosition();
		//   52   94:aload_0         
		//   53   95:getfield        #40  <Field ArrayList mChangedScrap>
		//   54   98:iload_1         
		//   55   99:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   56  102:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   57  105:invokevirtual   #290 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   58  108:iload_1         
		//   59  109:iconst_1        
		//   60  110:iadd            
		//   61  111:istore_1        
			}
		//*  62  112:goto            89
		//   63  115:return          
		}

		void clearScrap()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #276 <Method void ArrayList.clear()>
			if(mChangedScrap != null)
		//*   3    7:aload_0         
		//*   4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//*   5   11:ifnull          21
				mChangedScrap.clear();
		//    6   14:aload_0         
		//    7   15:getfield        #40  <Field ArrayList mChangedScrap>
		//    8   18:invokevirtual   #276 <Method void ArrayList.clear()>
		//    9   21:return          
		}

		public int convertPreLayoutPositionToPostLayout(int i)
		{
			if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            18
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          71
				throw new IndexOutOfBoundsException((new StringBuilder()).append("invalid position ").append(i).append(". State ").append("item count is ").append(mState.getItemCount()).toString());
		//    8   18:new             #209 <Class IndexOutOfBoundsException>
		//    9   21:dup             
		//   10   22:new             #211 <Class StringBuilder>
		//   11   25:dup             
		//   12   26:invokespecial   #212 <Method void StringBuilder()>
		//   13   29:ldc2            #294 <String "invalid position ">
		//   14   32:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   15   35:iload_1         
		//   16   36:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   17   39:ldc2            #296 <String ". State ">
		//   18   42:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   19   45:ldc2            #298 <String "item count is ">
		//   20   48:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   21   51:aload_0         
		//   22   52:getfield        #30  <Field RecyclerView this$0>
		//   23   55:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//   24   58:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//   25   61:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   26   64:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   27   67:invokespecial   #233 <Method void IndexOutOfBoundsException(String)>
		//   28   70:athrow          
			if(!mState.isPreLayout())
		//*  29   71:aload_0         
		//*  30   72:getfield        #30  <Field RecyclerView this$0>
		//*  31   75:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  32   78:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//*  33   81:ifne            86
				return i;
		//   34   84:iload_1         
		//   35   85:ireturn         
			else
				return mAdapterHelper.findPositionOffset(i);
		//   36   86:aload_0         
		//   37   87:getfield        #30  <Field RecyclerView this$0>
		//   38   90:getfield        #198 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   39   93:iload_1         
		//   40   94:invokevirtual   #204 <Method int AdapterHelper.findPositionOffset(int)>
		//   41   97:ireturn         
		}

		void dispatchViewRecycled(ViewHolder viewholder)
		{
			if(mRecyclerListener != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #302 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//*   3    7:ifnull          23
				mRecyclerListener.onViewRecycled(viewholder);
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #302 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//    7   17:aload_1         
		//    8   18:invokeinterface #307 <Method void RecyclerView$RecyclerListener.onViewRecycled(RecyclerView$ViewHolder)>
			if(mAdapter != null)
		//*   9   23:aload_0         
		//*  10   24:getfield        #30  <Field RecyclerView this$0>
		//*  11   27:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  12   30:ifnull          44
				mAdapter.onViewRecycled(viewholder);
		//   13   33:aload_0         
		//   14   34:getfield        #30  <Field RecyclerView this$0>
		//   15   37:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   16   40:aload_1         
		//   17   41:invokevirtual   #308 <Method void RecyclerView$Adapter.onViewRecycled(RecyclerView$ViewHolder)>
			if(mState != null)
		//*  18   44:aload_0         
		//*  19   45:getfield        #30  <Field RecyclerView this$0>
		//*  20   48:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  21   51:ifnull          65
				mViewInfoStore.removeViewHolder(viewholder);
		//   22   54:aload_0         
		//   23   55:getfield        #30  <Field RecyclerView this$0>
		//   24   58:getfield        #312 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   61:aload_1         
		//   26   62:invokevirtual   #317 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//   27   65:return          
		}

		ViewHolder getChangedScrapViewForPosition(int i)
		{
			int k;
label0:
			{
				if(mChangedScrap != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mChangedScrap>
		//*   2    4:ifnull          19
				{
					k = mChangedScrap.size();
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:invokevirtual   #283 <Method int ArrayList.size()>
		//    6   14:istore_3        
					if(k != 0)
						break label0;
		//    7   15:iload_3         
		//    8   16:ifne            21
				}
				return null;
		//    9   19:aconst_null     
		//   10   20:areturn         
			}
			for(int j = 0; j < k; j++)
		//*  11   21:iconst_0        
		//*  12   22:istore_2        
		//*  13   23:iload_2         
		//*  14   24:iload_3         
		//*  15   25:icmpge          75
			{
				ViewHolder viewholder = (ViewHolder)mChangedScrap.get(j);
		//   16   28:aload_0         
		//   17   29:getfield        #40  <Field ArrayList mChangedScrap>
		//   18   32:iload_2         
		//   19   33:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   20   36:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   21   39:astore          6
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i)
		//*  22   41:aload           6
		//*  23   43:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  24   46:ifne            68
		//*  25   49:aload           6
		//*  26   51:invokevirtual   #325 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  27   54:iload_1         
		//*  28   55:icmpne          68
				{
					viewholder.addFlags(32);
		//   29   58:aload           6
		//   30   60:bipush          32
		//   31   62:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   32   65:aload           6
		//   33   67:areturn         
				}
			}

		//   34   68:iload_2         
		//   35   69:iconst_1        
		//   36   70:iadd            
		//   37   71:istore_2        
		//*  38   72:goto            23
			if(mAdapter.hasStableIds())
		//*  39   75:aload_0         
		//*  40   76:getfield        #30  <Field RecyclerView this$0>
		//*  41   79:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  42   82:invokevirtual   #331 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  43   85:ifeq            187
			{
				i = mAdapterHelper.findPositionOffset(i);
		//   44   88:aload_0         
		//   45   89:getfield        #30  <Field RecyclerView this$0>
		//   46   92:getfield        #198 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   47   95:iload_1         
		//   48   96:invokevirtual   #204 <Method int AdapterHelper.findPositionOffset(int)>
		//   49   99:istore_1        
				if(i > 0 && i < mAdapter.getItemCount())
		//*  50  100:iload_1         
		//*  51  101:ifle            187
		//*  52  104:iload_1         
		//*  53  105:aload_0         
		//*  54  106:getfield        #30  <Field RecyclerView this$0>
		//*  55  109:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  56  112:invokevirtual   #207 <Method int RecyclerView$Adapter.getItemCount()>
		//*  57  115:icmpge          187
				{
					long l = mAdapter.getItemId(i);
		//   58  118:aload_0         
		//   59  119:getfield        #30  <Field RecyclerView this$0>
		//   60  122:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   61  125:iload_1         
		//   62  126:invokevirtual   #335 <Method long RecyclerView$Adapter.getItemId(int)>
		//   63  129:lstore          4
					for(i = 0; i < k; i++)
		//*  64  131:iconst_0        
		//*  65  132:istore_1        
		//*  66  133:iload_1         
		//*  67  134:iload_3         
		//*  68  135:icmpge          187
					{
						ViewHolder viewholder1 = (ViewHolder)mChangedScrap.get(i);
		//   69  138:aload_0         
		//   70  139:getfield        #40  <Field ArrayList mChangedScrap>
		//   71  142:iload_1         
		//   72  143:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   73  146:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   74  149:astore          6
						if(!viewholder1.wasReturnedFromScrap() && viewholder1.getItemId() == l)
		//*  75  151:aload           6
		//*  76  153:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  77  156:ifne            180
		//*  78  159:aload           6
		//*  79  161:invokevirtual   #337 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  80  164:lload           4
		//*  81  166:lcmp            
		//*  82  167:ifne            180
						{
							viewholder1.addFlags(32);
		//   83  170:aload           6
		//   84  172:bipush          32
		//   85  174:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
							return viewholder1;
		//   86  177:aload           6
		//   87  179:areturn         
						}
					}

		//   88  180:iload_1         
		//   89  181:iconst_1        
		//   90  182:iadd            
		//   91  183:istore_1        
				}
			}
		//*  92  184:goto            133
			return null;
		//   93  187:aconst_null     
		//   94  188:areturn         
		}

		RecycledViewPool getRecycledViewPool()
		{
			if(mRecyclerPool == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnonnull       18
				mRecyclerPool = new RecycledViewPool();
		//    3    7:aload_0         
		//    4    8:new             #135 <Class RecyclerView$RecycledViewPool>
		//    5   11:dup             
		//    6   12:invokespecial   #338 <Method void RecyclerView$RecycledViewPool()>
		//    7   15:putfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			return mRecyclerPool;
		//    8   18:aload_0         
		//    9   19:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   10   22:areturn         
		}

		int getScrapCount()
		{
			return mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:ireturn         
		}

		public List getScrapList()
		{
			return mUnmodifiableAttachedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #50  <Field List mUnmodifiableAttachedScrap>
		//    2    4:areturn         
		}

		ViewHolder getScrapOrCachedViewForId(long l, int i, boolean flag)
		{
			for(int j = mAttachedScrap.size() - 1; j >= 0; j--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//*   2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          5
		//*   6   11:iload           5
		//*   7   13:iflt            142
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//    8   16:aload_0         
		//    9   17:getfield        #38  <Field ArrayList mAttachedScrap>
		//   10   20:iload           5
		//   11   22:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   13   28:astore          6
				if(viewholder.getItemId() != l || viewholder.wasReturnedFromScrap())
					continue;
		//   14   30:aload           6
		//   15   32:invokevirtual   #337 <Method long RecyclerView$ViewHolder.getItemId()>
		//   16   35:lload_1         
		//   17   36:lcmp            
		//   18   37:ifne            133
		//   19   40:aload           6
		//   20   42:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   21   45:ifne            133
				if(i == viewholder.getItemViewType())
		//*  22   48:iload_3         
		//*  23   49:aload           6
		//*  24   51:invokevirtual   #125 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  25   54:icmpne          96
				{
					viewholder.addFlags(32);
		//   26   57:aload           6
		//   27   59:bipush          32
		//   28   61:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
					if(viewholder.isRemoved() && !mState.isPreLayout())
		//*  29   64:aload           6
		//*  30   66:invokevirtual   #348 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  31   69:ifeq            93
		//*  32   72:aload_0         
		//*  33   73:getfield        #30  <Field RecyclerView this$0>
		//*  34   76:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  35   79:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//*  36   82:ifne            93
						viewholder.setFlags(2, 14);
		//   37   85:aload           6
		//   38   87:iconst_2        
		//   39   88:bipush          14
		//   40   90:invokevirtual   #352 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
					return viewholder;
		//   41   93:aload           6
		//   42   95:areturn         
				}
				if(!flag)
		//*  43   96:iload           4
		//*  44   98:ifne            133
				{
					mAttachedScrap.remove(j);
		//   45  101:aload_0         
		//   46  102:getfield        #38  <Field ArrayList mAttachedScrap>
		//   47  105:iload           5
		//   48  107:invokevirtual   #355 <Method Object ArrayList.remove(int)>
		//   49  110:pop             
					removeDetachedView(viewholder.itemView, false);
		//   50  111:aload_0         
		//   51  112:getfield        #30  <Field RecyclerView this$0>
		//   52  115:aload           6
		//   53  117:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   54  120:iconst_0        
		//   55  121:invokevirtual   #359 <Method void RecyclerView.removeDetachedView(View, boolean)>
					quickRecycleScrapView(viewholder.itemView);
		//   56  124:aload_0         
		//   57  125:aload           6
		//   58  127:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   59  130:invokevirtual   #362 <Method void quickRecycleScrapView(View)>
				}
			}

		//   60  133:iload           5
		//   61  135:iconst_1        
		//   62  136:isub            
		//   63  137:istore          5
		//*  64  139:goto            11
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*  65  142:aload_0         
		//*  66  143:getfield        #42  <Field ArrayList mCachedViews>
		//*  67  146:invokevirtual   #283 <Method int ArrayList.size()>
		//*  68  149:iconst_1        
		//*  69  150:isub            
		//*  70  151:istore          5
		//*  71  153:iload           5
		//*  72  155:iflt            231
			{
				ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//   73  158:aload_0         
		//   74  159:getfield        #42  <Field ArrayList mCachedViews>
		//   75  162:iload           5
		//   76  164:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   77  167:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   78  170:astore          6
				if(viewholder1.getItemId() != l)
					continue;
		//   79  172:aload           6
		//   80  174:invokevirtual   #337 <Method long RecyclerView$ViewHolder.getItemId()>
		//   81  177:lload_1         
		//   82  178:lcmp            
		//   83  179:ifne            222
				if(i == viewholder1.getItemViewType())
		//*  84  182:iload_3         
		//*  85  183:aload           6
		//*  86  185:invokevirtual   #125 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  87  188:icmpne          209
				{
					if(!flag)
		//*  88  191:iload           4
		//*  89  193:ifne            206
						mCachedViews.remove(k);
		//   90  196:aload_0         
		//   91  197:getfield        #42  <Field ArrayList mCachedViews>
		//   92  200:iload           5
		//   93  202:invokevirtual   #355 <Method Object ArrayList.remove(int)>
		//   94  205:pop             
					return viewholder1;
		//   95  206:aload           6
		//   96  208:areturn         
				}
				if(!flag)
		//*  97  209:iload           4
		//*  98  211:ifne            222
				{
					recycleCachedViewAt(k);
		//   99  214:aload_0         
		//  100  215:iload           5
		//  101  217:invokevirtual   #365 <Method void recycleCachedViewAt(int)>
					return null;
		//  102  220:aconst_null     
		//  103  221:areturn         
				}
			}

		//  104  222:iload           5
		//  105  224:iconst_1        
		//  106  225:isub            
		//  107  226:istore          5
		//* 108  228:goto            153
			return null;
		//  109  231:aconst_null     
		//  110  232:areturn         
		}

		ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int i, boolean flag)
		{
			int l = mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int j = 0; j < l; j++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          93
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//    9   17:aload_0         
		//   10   18:getfield        #38  <Field ArrayList mAttachedScrap>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i && !viewholder.isInvalid() && (mState.mInPreLayout || !viewholder.isRemoved()))
		//*  15   30:aload           5
		//*  16   32:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  17   35:ifne            86
		//*  18   38:aload           5
		//*  19   40:invokevirtual   #325 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  20   43:iload_1         
		//*  21   44:icmpne          86
		//*  22   47:aload           5
		//*  23   49:invokevirtual   #370 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  24   52:ifne            86
		//*  25   55:aload_0         
		//*  26   56:getfield        #30  <Field RecyclerView this$0>
		//*  27   59:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  28   62:getfield        #373 <Field boolean RecyclerView$State.mInPreLayout>
		//*  29   65:ifne            76
		//*  30   68:aload           5
		//*  31   70:invokevirtual   #348 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  32   73:ifne            86
				{
					viewholder.addFlags(32);
		//   33   76:aload           5
		//   34   78:bipush          32
		//   35   80:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   36   83:aload           5
		//   37   85:areturn         
				}
			}

		//   38   86:iload_3         
		//   39   87:iconst_1        
		//   40   88:iadd            
		//   41   89:istore_3        
		//*  42   90:goto            11
			if(!flag)
		//*  43   93:iload_2         
		//*  44   94:ifne            209
			{
				View view = mChildHelper.findHiddenNonRemovedView(i);
		//   45   97:aload_0         
		//   46   98:getfield        #30  <Field RecyclerView this$0>
		//   47  101:getfield        #377 <Field ChildHelper RecyclerView.mChildHelper>
		//   48  104:iload_1         
		//   49  105:invokevirtual   #382 <Method View ChildHelper.findHiddenNonRemovedView(int)>
		//   50  108:astore          5
				if(view != null)
		//*  51  110:aload           5
		//*  52  112:ifnull          209
				{
					ViewHolder viewholder2 = RecyclerView.getChildViewHolderInt(view);
		//   53  115:aload           5
		//   54  117:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   55  120:astore          6
					mChildHelper.unhide(view);
		//   56  122:aload_0         
		//   57  123:getfield        #30  <Field RecyclerView this$0>
		//   58  126:getfield        #377 <Field ChildHelper RecyclerView.mChildHelper>
		//   59  129:aload           5
		//   60  131:invokevirtual   #385 <Method void ChildHelper.unhide(View)>
					i = mChildHelper.indexOfChild(view);
		//   61  134:aload_0         
		//   62  135:getfield        #30  <Field RecyclerView this$0>
		//   63  138:getfield        #377 <Field ChildHelper RecyclerView.mChildHelper>
		//   64  141:aload           5
		//   65  143:invokevirtual   #388 <Method int ChildHelper.indexOfChild(View)>
		//   66  146:istore_1        
					if(i == -1)
		//*  67  147:iload_1         
		//*  68  148:iconst_m1       
		//*  69  149:icmpne          181
					{
						throw new IllegalStateException((new StringBuilder()).append("layout index should not be -1 after unhiding a view:").append(((Object) (viewholder2))).toString());
		//   70  152:new             #390 <Class IllegalStateException>
		//   71  155:dup             
		//   72  156:new             #211 <Class StringBuilder>
		//   73  159:dup             
		//   74  160:invokespecial   #212 <Method void StringBuilder()>
		//   75  163:ldc2            #392 <String "layout index should not be -1 after unhiding a view:">
		//   76  166:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   77  169:aload           6
		//   78  171:invokevirtual   #395 <Method StringBuilder StringBuilder.append(Object)>
		//   79  174:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   80  177:invokespecial   #396 <Method void IllegalStateException(String)>
		//   81  180:athrow          
					} else
					{
						mChildHelper.detachViewFromParent(i);
		//   82  181:aload_0         
		//   83  182:getfield        #30  <Field RecyclerView this$0>
		//   84  185:getfield        #377 <Field ChildHelper RecyclerView.mChildHelper>
		//   85  188:iload_1         
		//   86  189:invokevirtual   #399 <Method void ChildHelper.detachViewFromParent(int)>
						scrapView(view);
		//   87  192:aload_0         
		//   88  193:aload           5
		//   89  195:invokevirtual   #402 <Method void scrapView(View)>
						viewholder2.addFlags(8224);
		//   90  198:aload           6
		//   91  200:sipush          8224
		//   92  203:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder2;
		//   93  206:aload           6
		//   94  208:areturn         
					}
				}
			}
			l = mCachedViews.size();
		//   95  209:aload_0         
		//   96  210:getfield        #42  <Field ArrayList mCachedViews>
		//   97  213:invokevirtual   #283 <Method int ArrayList.size()>
		//   98  216:istore          4
			for(int k = 0; k < l; k++)
		//*  99  218:iconst_0        
		//* 100  219:istore_3        
		//* 101  220:iload_3         
		//* 102  221:iload           4
		//* 103  223:icmpge          279
			{
				ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//  104  226:aload_0         
		//  105  227:getfield        #42  <Field ArrayList mCachedViews>
		//  106  230:iload_3         
		//  107  231:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//  108  234:checkcast       #93  <Class RecyclerView$ViewHolder>
		//  109  237:astore          5
				if(!viewholder1.isInvalid() && viewholder1.getLayoutPosition() == i)
		//* 110  239:aload           5
		//* 111  241:invokevirtual   #370 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 112  244:ifne            272
		//* 113  247:aload           5
		//* 114  249:invokevirtual   #325 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//* 115  252:iload_1         
		//* 116  253:icmpne          272
				{
					if(!flag)
		//* 117  256:iload_2         
		//* 118  257:ifne            269
						mCachedViews.remove(k);
		//  119  260:aload_0         
		//  120  261:getfield        #42  <Field ArrayList mCachedViews>
		//  121  264:iload_3         
		//  122  265:invokevirtual   #355 <Method Object ArrayList.remove(int)>
		//  123  268:pop             
					return viewholder1;
		//  124  269:aload           5
		//  125  271:areturn         
				}
			}

		//  126  272:iload_3         
		//  127  273:iconst_1        
		//  128  274:iadd            
		//  129  275:istore_3        
		//* 130  276:goto            220
			return null;
		//  131  279:aconst_null     
		//  132  280:areturn         
		}

		View getScrapViewAt(int i)
		{
			return ((ViewHolder)mAttachedScrap.get(i)).itemView;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//    4    8:checkcast       #93  <Class RecyclerView$ViewHolder>
		//    5   11:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:areturn         
		}

		public View getViewForPosition(int i)
		{
			return getViewForPosition(i, false);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #407 <Method View getViewForPosition(int, boolean)>
		//    4    6:areturn         
		}

		View getViewForPosition(int i, boolean flag)
		{
			return tryGetViewHolderForPositionByDeadline(i, flag, 0xffffffffL).itemView;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc2w           #130 <Long 0xffffffffL>
		//    4    6:invokevirtual   #411 <Method RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int, boolean, long)>
		//    5    9:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//    6   12:areturn         
		}

		void markItemDecorInsetsDirty()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          52
			{
				LayoutParams layoutparams = (LayoutParams)((ViewHolder)mCachedViews.get(i)).itemView.getLayoutParams();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   14   26:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   15   29:invokevirtual   #241 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   32:checkcast       #246 <Class RecyclerView$LayoutParams>
		//   17   35:astore_3        
				if(layoutparams != null)
		//*  18   36:aload_3         
		//*  19   37:ifnull          45
					layoutparams.mInsetsDirty = true;
		//   20   40:aload_3         
		//   21   41:iconst_1        
		//   22   42:putfield        #262 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}

		//   23   45:iload_1         
		//   24   46:iconst_1        
		//   25   47:iadd            
		//   26   48:istore_1        
		//*  27   49:goto            10
		//   28   52:return          
		}

		void markKnownViewsInvalid()
		{
			if(mAdapter != null && mAdapter.hasStableIds())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   3    7:ifnull          73
		//*   4   10:aload_0         
		//*   5   11:getfield        #30  <Field RecyclerView this$0>
		//*   6   14:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   7   17:invokevirtual   #331 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*   8   20:ifeq            73
			{
				int j = mCachedViews.size();
		//    9   23:aload_0         
		//   10   24:getfield        #42  <Field ArrayList mCachedViews>
		//   11   27:invokevirtual   #283 <Method int ArrayList.size()>
		//   12   30:istore_2        
				for(int i = 0; i < j; i++)
		//*  13   31:iconst_0        
		//*  14   32:istore_1        
		//*  15   33:iload_1         
		//*  16   34:iload_2         
		//*  17   35:icmpge          72
				{
					ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//   18   38:aload_0         
		//   19   39:getfield        #42  <Field ArrayList mCachedViews>
		//   20   42:iload_1         
		//   21   43:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   22   46:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   23   49:astore_3        
					if(viewholder != null)
		//*  24   50:aload_3         
		//*  25   51:ifnull          65
					{
						viewholder.addFlags(6);
		//   26   54:aload_3         
		//   27   55:bipush          6
		//   28   57:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
						viewholder.addChangePayload(((Object) (null)));
		//   29   60:aload_3         
		//   30   61:aconst_null     
		//   31   62:invokevirtual   #417 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
					}
				}

		//   32   65:iload_1         
		//   33   66:iconst_1        
		//   34   67:iadd            
		//   35   68:istore_1        
		//*  36   69:goto            33
				return;
		//   37   72:return          
			} else
			{
				recycleAndClearCachedViews();
		//   38   73:aload_0         
		//   39   74:invokevirtual   #279 <Method void recycleAndClearCachedViews()>
				return;
		//   40   77:return          
			}
		}

		void offsetPositionRecordsForInsert(int i, int j)
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int k = 0; k < l; k++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          58
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    9   17:aload_0         
		//   10   18:getfield        #42  <Field ArrayList mCachedViews>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(viewholder != null && viewholder.mPosition >= i)
		//*  15   30:aload           5
		//*  16   32:ifnull          51
		//*  17   35:aload           5
		//*  18   37:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  19   40:iload_1         
		//*  20   41:icmplt          51
					viewholder.offsetPosition(j, true);
		//   21   44:aload           5
		//   22   46:iload_2         
		//   23   47:iconst_1        
		//   24   48:invokevirtual   #425 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   25   51:iload_3         
		//   26   52:iconst_1        
		//   27   53:iadd            
		//   28   54:istore_3        
		//*  29   55:goto            11
		//   30   58:return          
		}

		void offsetPositionRecordsForMove(int i, int j)
		{
			int k;
			int l;
			byte byte0;
			if(i < j)
		//*   0    0:iload_1         
		//*   1    1:iload_2         
		//*   2    2:icmpge          16
			{
				k = i;
		//    3    5:iload_1         
		//    4    6:istore_3        
				l = j;
		//    5    7:iload_2         
		//    6    8:istore          4
				byte0 = -1;
		//    7   10:iconst_m1       
		//    8   11:istore          5
			} else
		//*   9   13:goto            24
			{
				k = j;
		//   10   16:iload_2         
		//   11   17:istore_3        
				l = i;
		//   12   18:iload_1         
		//   13   19:istore          4
				byte0 = 1;
		//   14   21:iconst_1        
		//   15   22:istore          5
			}
			int j1 = mCachedViews.size();
		//   16   24:aload_0         
		//   17   25:getfield        #42  <Field ArrayList mCachedViews>
		//   18   28:invokevirtual   #283 <Method int ArrayList.size()>
		//   19   31:istore          7
			for(int i1 = 0; i1 < j1; i1++)
		//*  20   33:iconst_0        
		//*  21   34:istore          6
		//*  22   36:iload           6
		//*  23   38:iload           7
		//*  24   40:icmpge          122
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i1);
		//   25   43:aload_0         
		//   26   44:getfield        #42  <Field ArrayList mCachedViews>
		//   27   47:iload           6
		//   28   49:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   29   52:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   30   55:astore          8
				if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
		//*  31   57:aload           8
		//*  32   59:ifnull          113
		//*  33   62:aload           8
		//*  34   64:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  35   67:iload_3         
		//*  36   68:icmplt          113
		//*  37   71:aload           8
		//*  38   73:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  39   76:iload           4
		//*  40   78:icmple          84
					continue;
		//   41   81:goto            113
				if(viewholder.mPosition == i)
		//*  42   84:aload           8
		//*  43   86:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  44   89:iload_1         
		//*  45   90:icmpne          105
					viewholder.offsetPosition(j - i, false);
		//   46   93:aload           8
		//   47   95:iload_2         
		//   48   96:iload_1         
		//   49   97:isub            
		//   50   98:iconst_0        
		//   51   99:invokevirtual   #425 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				else
		//*  52  102:goto            113
					viewholder.offsetPosition(((int) (byte0)), false);
		//   53  105:aload           8
		//   54  107:iload           5
		//   55  109:iconst_0        
		//   56  110:invokevirtual   #425 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   57  113:iload           6
		//   58  115:iconst_1        
		//   59  116:iadd            
		//   60  117:istore          6
		//*  61  119:goto            36
		//   62  122:return          
		}

		void offsetPositionRecordsForRemove(int i, int j, boolean flag)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            88
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload           4
		//   11   22:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   13   28:astore          5
				if(viewholder == null)
					continue;
		//   14   30:aload           5
		//   15   32:ifnull          79
				if(viewholder.mPosition >= i + j)
		//*  16   35:aload           5
		//*  17   37:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  18   40:iload_1         
		//*  19   41:iload_2         
		//*  20   42:iadd            
		//*  21   43:icmplt          57
				{
					viewholder.offsetPosition(-j, flag);
		//   22   46:aload           5
		//   23   48:iload_2         
		//   24   49:ineg            
		//   25   50:iload_3         
		//   26   51:invokevirtual   #425 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					continue;
		//   27   54:goto            79
				}
				if(viewholder.mPosition >= i)
		//*  28   57:aload           5
		//*  29   59:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  30   62:iload_1         
		//*  31   63:icmplt          79
				{
					viewholder.addFlags(8);
		//   32   66:aload           5
		//   33   68:bipush          8
		//   34   70:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   35   73:aload_0         
		//   36   74:iload           4
		//   37   76:invokevirtual   #365 <Method void recycleCachedViewAt(int)>
				}
			}

		//   38   79:iload           4
		//   39   81:iconst_1        
		//   40   82:isub            
		//   41   83:istore          4
		//*  42   85:goto            11
		//   43   88:return          
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			clear();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #431 <Method void clear()>
			getRecycledViewPool().onAdapterChanged(adapter, adapter1, flag);
		//    2    4:aload_0         
		//    3    5:invokevirtual   #179 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//    4    8:aload_1         
		//    5    9:aload_2         
		//    6   10:iload_3         
		//    7   11:invokevirtual   #433 <Method void RecyclerView$RecycledViewPool.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		//    8   14:return          
		}

		void quickRecycleScrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			view.mScrapContainer = null;
		//    3    5:aload_1         
		//    4    6:aconst_null     
		//    5    7:invokestatic    #437 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$802(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//    6   10:pop             
			view.mInChangeScrap = false;
		//    7   11:aload_1         
		//    8   12:iconst_0        
		//    9   13:invokestatic    #441 <Method boolean RecyclerView$ViewHolder.access$902(RecyclerView$ViewHolder, boolean)>
		//   10   16:pop             
			((ViewHolder) (view)).clearReturnedFromScrapFlag();
		//   11   17:aload_1         
		//   12   18:invokevirtual   #444 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(((ViewHolder) (view)));
		//   13   21:aload_0         
		//   14   22:aload_1         
		//   15   23:invokevirtual   #447 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   16   26:return          
		}

		void recycleAndClearCachedViews()
		{
			for(int i = mCachedViews.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            26
				recycleCachedViewAt(i);
		//    8   14:aload_0         
		//    9   15:iload_1         
		//   10   16:invokevirtual   #365 <Method void recycleCachedViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            10
			mCachedViews.clear();
		//   16   26:aload_0         
		//   17   27:getfield        #42  <Field ArrayList mCachedViews>
		//   18   30:invokevirtual   #276 <Method void ArrayList.clear()>
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  19   33:invokestatic    #450 <Method boolean RecyclerView.access$600()>
		//*  20   36:ifeq            49
				mPrefetchRegistry.clearPrefetchPositions();
		//   21   39:aload_0         
		//   22   40:getfield        #30  <Field RecyclerView this$0>
		//   23   43:getfield        #454 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//   24   46:invokevirtual   #459 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//   25   49:return          
		}

		void recycleCachedViewAt(int i)
		{
			addViewHolderToRecycledViewPool((ViewHolder)mCachedViews.get(i), true);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #42  <Field ArrayList mCachedViews>
		//    3    5:iload_1         
		//    4    6:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//    5    9:checkcast       #93  <Class RecyclerView$ViewHolder>
		//    6   12:iconst_1        
		//    7   13:invokevirtual   #461 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
			mCachedViews.remove(i);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload_1         
		//   11   21:invokevirtual   #355 <Method Object ArrayList.remove(int)>
		//   12   24:pop             
		//   13   25:return          
		}

		public void recycleView(View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_2        
			if(viewholder.isTmpDetached())
		//*   3    5:aload_2         
		//*   4    6:invokevirtual   #465 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*   5    9:ifeq            21
				removeDetachedView(view, false);
		//    6   12:aload_0         
		//    7   13:getfield        #30  <Field RecyclerView this$0>
		//    8   16:aload_1         
		//    9   17:iconst_0        
		//   10   18:invokevirtual   #359 <Method void RecyclerView.removeDetachedView(View, boolean)>
			if(viewholder.isScrap())
		//*  11   21:aload_2         
		//*  12   22:invokevirtual   #468 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  13   25:ifeq            35
				viewholder.unScrap();
		//   14   28:aload_2         
		//   15   29:invokevirtual   #471 <Method void RecyclerView$ViewHolder.unScrap()>
			else
		//*  16   32:goto            46
			if(viewholder.wasReturnedFromScrap())
		//*  17   35:aload_2         
		//*  18   36:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   39:ifeq            46
				viewholder.clearReturnedFromScrapFlag();
		//   20   42:aload_2         
		//   21   43:invokevirtual   #444 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(viewholder);
		//   22   46:aload_0         
		//   23   47:aload_2         
		//   24   48:invokevirtual   #447 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   25   51:return          
		}

		void recycleViewHolderInternal(ViewHolder viewholder)
		{
			int j;
			int k;
			boolean flag4;
label0:
			{
				if(viewholder.isScrap() || viewholder.itemView.getParent() != null)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #468 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*   2    4:ifne            17
		//*   3    7:aload_1         
		//*   4    8:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//*   5   11:invokevirtual   #270 <Method ViewParent View.getParent()>
		//*   6   14:ifnull          82
				{
					StringBuilder stringbuilder = (new StringBuilder()).append("Scrapped or attached views may not be recycled. isScrap:").append(viewholder.isScrap()).append(" isAttached:");
		//    7   17:new             #211 <Class StringBuilder>
		//    8   20:dup             
		//    9   21:invokespecial   #212 <Method void StringBuilder()>
		//   10   24:ldc2            #473 <String "Scrapped or attached views may not be recycled. isScrap:">
		//   11   27:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   12   30:aload_1         
		//   13   31:invokevirtual   #468 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//   14   34:invokevirtual   #476 <Method StringBuilder StringBuilder.append(boolean)>
		//   15   37:ldc2            #478 <String " isAttached:">
		//   16   40:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   17   43:astore          8
					boolean flag3;
					if(viewholder.itemView.getParent() != null)
		//*  18   45:aload_1         
		//*  19   46:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//*  20   49:invokevirtual   #270 <Method ViewParent View.getParent()>
		//*  21   52:ifnull          61
						flag3 = true;
		//   22   55:iconst_1        
		//   23   56:istore          7
					else
		//*  24   58:goto            64
						flag3 = false;
		//   25   61:iconst_0        
		//   26   62:istore          7
					throw new IllegalArgumentException(stringbuilder.append(flag3).toString());
		//   27   64:new             #189 <Class IllegalArgumentException>
		//   28   67:dup             
		//   29   68:aload           8
		//   30   70:iload           7
		//   31   72:invokevirtual   #476 <Method StringBuilder StringBuilder.append(boolean)>
		//   32   75:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   33   78:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//   34   81:athrow          
				}
				if(viewholder.isTmpDetached())
		//*  35   82:aload_1         
		//*  36   83:invokevirtual   #465 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  37   86:ifeq            117
					throw new IllegalArgumentException((new StringBuilder()).append("Tmp detached view should be removed from RecyclerView before it can be recycled: ").append(((Object) (viewholder))).toString());
		//   38   89:new             #189 <Class IllegalArgumentException>
		//   39   92:dup             
		//   40   93:new             #211 <Class StringBuilder>
		//   41   96:dup             
		//   42   97:invokespecial   #212 <Method void StringBuilder()>
		//   43  100:ldc2            #480 <String "Tmp detached view should be removed from RecyclerView before it can be recycled: ">
		//   44  103:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   45  106:aload_1         
		//   46  107:invokevirtual   #395 <Method StringBuilder StringBuilder.append(Object)>
		//   47  110:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   48  113:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//   49  116:athrow          
				if(viewholder.shouldIgnore())
		//*  50  117:aload_1         
		//*  51  118:invokevirtual   #483 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  52  121:ifeq            135
					throw new IllegalArgumentException("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.");
		//   53  124:new             #189 <Class IllegalArgumentException>
		//   54  127:dup             
		//   55  128:ldc2            #485 <String "Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.">
		//   56  131:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//   57  134:athrow          
				flag4 = viewholder.doesTransientStatePreventRecycling();
		//   58  135:aload_1         
		//   59  136:invokestatic    #489 <Method boolean RecyclerView$ViewHolder.access$700(RecyclerView$ViewHolder)>
		//   60  139:istore          7
				boolean flag;
				if(mAdapter != null && flag4 && mAdapter.onFailedToRecycleView(viewholder))
		//*  61  141:aload_0         
		//*  62  142:getfield        #30  <Field RecyclerView this$0>
		//*  63  145:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  64  148:ifnull          175
		//*  65  151:iload           7
		//*  66  153:ifeq            175
		//*  67  156:aload_0         
		//*  68  157:getfield        #30  <Field RecyclerView this$0>
		//*  69  160:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  70  163:aload_1         
		//*  71  164:invokevirtual   #492 <Method boolean RecyclerView$Adapter.onFailedToRecycleView(RecyclerView$ViewHolder)>
		//*  72  167:ifeq            175
					flag = true;
		//   73  170:iconst_1        
		//   74  171:istore_2        
				else
		//*  75  172:goto            177
					flag = false;
		//   76  175:iconst_0        
		//   77  176:istore_2        
				j = 0;
		//   78  177:iconst_0        
		//   79  178:istore_3        
				boolean flag2 = false;
		//   80  179:iconst_0        
		//   81  180:istore          6
				boolean flag1 = false;
		//   82  182:iconst_0        
		//   83  183:istore          5
				if(!flag)
		//*  84  185:iload_2         
		//*  85  186:ifne            200
				{
					k = ((int) (flag1));
		//   86  189:iload           5
		//   87  191:istore          4
					if(!viewholder.isRecyclable())
						break label0;
		//   88  193:aload_1         
		//   89  194:invokevirtual   #495 <Method boolean RecyclerView$ViewHolder.isRecyclable()>
		//   90  197:ifeq            379
				}
				int i = ((int) (flag2));
		//   91  200:iload           6
		//   92  202:istore_2        
				if(mViewCacheMax > 0)
		//*  93  203:aload_0         
		//*  94  204:getfield        #54  <Field int mViewCacheMax>
		//*  95  207:ifle            358
				{
					i = ((int) (flag2));
		//   96  210:iload           6
		//   97  212:istore_2        
					if(!viewholder.hasAnyOfTheFlags(526))
		//*  98  213:aload_1         
		//*  99  214:sipush          526
		//* 100  217:invokevirtual   #499 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 101  220:ifne            358
					{
						j = mCachedViews.size();
		//  102  223:aload_0         
		//  103  224:getfield        #42  <Field ArrayList mCachedViews>
		//  104  227:invokevirtual   #283 <Method int ArrayList.size()>
		//  105  230:istore_3        
						i = j;
		//  106  231:iload_3         
		//  107  232:istore_2        
						if(j >= mViewCacheMax)
		//* 108  233:iload_3         
		//* 109  234:aload_0         
		//* 110  235:getfield        #54  <Field int mViewCacheMax>
		//* 111  238:icmplt          256
						{
							i = j;
		//  112  241:iload_3         
		//  113  242:istore_2        
							if(j > 0)
		//* 114  243:iload_3         
		//* 115  244:ifle            256
							{
								recycleCachedViewAt(0);
		//  116  247:aload_0         
		//  117  248:iconst_0        
		//  118  249:invokevirtual   #365 <Method void recycleCachedViewAt(int)>
								i = j - 1;
		//  119  252:iload_3         
		//  120  253:iconst_1        
		//  121  254:isub            
		//  122  255:istore_2        
							}
						}
						j = i;
		//  123  256:iload_2         
		//  124  257:istore_3        
						k = j;
		//  125  258:iload_3         
		//  126  259:istore          4
						if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 127  261:invokestatic    #450 <Method boolean RecyclerView.access$600()>
		//* 128  264:ifeq            346
						{
							k = j;
		//  129  267:iload_3         
		//  130  268:istore          4
							if(i > 0)
		//* 131  270:iload_2         
		//* 132  271:ifle            346
							{
								k = j;
		//  133  274:iload_3         
		//  134  275:istore          4
								if(!mPrefetchRegistry.lastPrefetchIncludedPosition(viewholder.mPosition))
		//* 135  277:aload_0         
		//* 136  278:getfield        #30  <Field RecyclerView this$0>
		//* 137  281:getfield        #454 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 138  284:aload_1         
		//* 139  285:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//* 140  288:invokevirtual   #502 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 141  291:ifne            346
								{
									i--;
		//  142  294:iload_2         
		//  143  295:iconst_1        
		//  144  296:isub            
		//  145  297:istore_2        
									do
									{
										if(i < 0)
											break;
		//  146  298:iload_2         
		//  147  299:iflt            341
										j = ((ViewHolder)mCachedViews.get(i)).mPosition;
		//  148  302:aload_0         
		//  149  303:getfield        #42  <Field ArrayList mCachedViews>
		//  150  306:iload_2         
		//  151  307:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//  152  310:checkcast       #93  <Class RecyclerView$ViewHolder>
		//  153  313:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//  154  316:istore_3        
										if(!mPrefetchRegistry.lastPrefetchIncludedPosition(j))
		//* 155  317:aload_0         
		//* 156  318:getfield        #30  <Field RecyclerView this$0>
		//* 157  321:getfield        #454 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 158  324:iload_3         
		//* 159  325:invokevirtual   #502 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 160  328:ifne            334
											break;
		//  161  331:goto            341
										i--;
		//  162  334:iload_2         
		//  163  335:iconst_1        
		//  164  336:isub            
		//  165  337:istore_2        
									} while(true);
		//  166  338:goto            298
									k = i + 1;
		//  167  341:iload_2         
		//  168  342:iconst_1        
		//  169  343:iadd            
		//  170  344:istore          4
								}
							}
						}
						mCachedViews.add(k, ((Object) (viewholder)));
		//  171  346:aload_0         
		//  172  347:getfield        #42  <Field ArrayList mCachedViews>
		//  173  350:iload           4
		//  174  352:aload_1         
		//  175  353:invokevirtual   #506 <Method void ArrayList.add(int, Object)>
						i = 1;
		//  176  356:iconst_1        
		//  177  357:istore_2        
					}
				}
				j = i;
		//  178  358:iload_2         
		//  179  359:istore_3        
				k = ((int) (flag1));
		//  180  360:iload           5
		//  181  362:istore          4
				if(i == 0)
		//* 182  364:iload_2         
		//* 183  365:ifne            379
				{
					addViewHolderToRecycledViewPool(viewholder, true);
		//  184  368:aload_0         
		//  185  369:aload_1         
		//  186  370:iconst_1        
		//  187  371:invokevirtual   #461 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
					k = 1;
		//  188  374:iconst_1        
		//  189  375:istore          4
					j = i;
		//  190  377:iload_2         
		//  191  378:istore_3        
				}
			}
			mViewInfoStore.removeViewHolder(viewholder);
		//  192  379:aload_0         
		//  193  380:getfield        #30  <Field RecyclerView this$0>
		//  194  383:getfield        #312 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//  195  386:aload_1         
		//  196  387:invokevirtual   #317 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
			if(j == 0 && k == 0 && flag4)
		//* 197  390:iload_3         
		//* 198  391:ifne            409
		//* 199  394:iload           4
		//* 200  396:ifne            409
		//* 201  399:iload           7
		//* 202  401:ifeq            409
				viewholder.mOwnerRecyclerView = null;
		//  203  404:aload_1         
		//  204  405:aconst_null     
		//  205  406:putfield        #122 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
		//  206  409:return          
		}

		void recycleViewInternal(View view)
		{
			recycleViewHolderInternal(RecyclerView.getChildViewHolderInt(view));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    3    5:invokevirtual   #447 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		void scrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #187 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			if(((ViewHolder) (view)).hasAnyOfTheFlags(12) || !((ViewHolder) (view)).isUpdated() || canReuseUpdatedViewHolder(((ViewHolder) (view))))
		//*   3    5:aload_1         
		//*   4    6:bipush          12
		//*   5    8:invokevirtual   #499 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   6   11:ifne            32
		//*   7   14:aload_1         
		//*   8   15:invokevirtual   #510 <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//*   9   18:ifeq            32
		//*  10   21:aload_0         
		//*  11   22:getfield        #30  <Field RecyclerView this$0>
		//*  12   25:aload_1         
		//*  13   26:invokevirtual   #513 <Method boolean RecyclerView.canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//*  14   29:ifeq            86
				if(((ViewHolder) (view)).isInvalid() && !((ViewHolder) (view)).isRemoved() && !mAdapter.hasStableIds())
		//*  15   32:aload_1         
		//*  16   33:invokevirtual   #370 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  17   36:ifeq            70
		//*  18   39:aload_1         
		//*  19   40:invokevirtual   #348 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  20   43:ifne            70
		//*  21   46:aload_0         
		//*  22   47:getfield        #30  <Field RecyclerView this$0>
		//*  23   50:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  24   53:invokevirtual   #331 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  25   56:ifne            70
				{
					throw new IllegalArgumentException("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.");
		//   26   59:new             #189 <Class IllegalArgumentException>
		//   27   62:dup             
		//   28   63:ldc2            #515 <String "Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.">
		//   29   66:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//   30   69:athrow          
				} else
				{
					((ViewHolder) (view)).setScrapContainer(this, false);
		//   31   70:aload_1         
		//   32   71:aload_0         
		//   33   72:iconst_0        
		//   34   73:invokevirtual   #519 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
					mAttachedScrap.add(((Object) (view)));
		//   35   76:aload_0         
		//   36   77:getfield        #38  <Field ArrayList mAttachedScrap>
		//   37   80:aload_1         
		//   38   81:invokevirtual   #522 <Method boolean ArrayList.add(Object)>
		//   39   84:pop             
					return;
		//   40   85:return          
				}
			if(mChangedScrap == null)
		//*  41   86:aload_0         
		//*  42   87:getfield        #40  <Field ArrayList mChangedScrap>
		//*  43   90:ifnonnull       104
				mChangedScrap = new ArrayList();
		//   44   93:aload_0         
		//   45   94:new             #35  <Class ArrayList>
		//   46   97:dup             
		//   47   98:invokespecial   #36  <Method void ArrayList()>
		//   48  101:putfield        #40  <Field ArrayList mChangedScrap>
			((ViewHolder) (view)).setScrapContainer(this, true);
		//   49  104:aload_1         
		//   50  105:aload_0         
		//   51  106:iconst_1        
		//   52  107:invokevirtual   #519 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
			mChangedScrap.add(((Object) (view)));
		//   53  110:aload_0         
		//   54  111:getfield        #40  <Field ArrayList mChangedScrap>
		//   55  114:aload_1         
		//   56  115:invokevirtual   #522 <Method boolean ArrayList.add(Object)>
		//   57  118:pop             
		//   58  119:return          
		}

		void setAdapterPositionsAsUnknown()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          45
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   14   26:astore_3        
				if(viewholder != null)
		//*  15   27:aload_3         
		//*  16   28:ifnull          38
					viewholder.addFlags(512);
		//   17   31:aload_3         
		//   18   32:sipush          512
		//   19   35:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
			}

		//   20   38:iload_1         
		//   21   39:iconst_1        
		//   22   40:iadd            
		//   23   41:istore_1        
		//*  24   42:goto            10
		//   25   45:return          
		}

		void setRecycledViewPool(RecycledViewPool recycledviewpool)
		{
			if(mRecyclerPool != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnull          14
				mRecyclerPool.detach();
		//    3    7:aload_0         
		//    4    8:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//    5   11:invokevirtual   #528 <Method void RecyclerView$RecycledViewPool.detach()>
			mRecyclerPool = recycledviewpool;
		//    6   14:aload_0         
		//    7   15:aload_1         
		//    8   16:putfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			if(recycledviewpool != null)
		//*   9   19:aload_1         
		//*  10   20:ifnull          37
				mRecyclerPool.attach(getAdapter());
		//   11   23:aload_0         
		//   12   24:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   13   27:aload_0         
		//   14   28:getfield        #30  <Field RecyclerView this$0>
		//   15   31:invokevirtual   #532 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//   16   34:invokevirtual   #536 <Method void RecyclerView$RecycledViewPool.attach(RecyclerView$Adapter)>
		//   17   37:return          
		}

		void setViewCacheExtension(ViewCacheExtension viewcacheextension)
		{
			mViewCacheExtension = viewcacheextension;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #540 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//    3    5:return          
		}

		public void setViewCacheSize(int i)
		{
			mRequestedCacheMax = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #52  <Field int mRequestedCacheMax>
			updateViewCacheSize();
		//    3    5:aload_0         
		//    4    6:invokevirtual   #544 <Method void updateViewCacheSize()>
		//    5    9:return          
		}

		ViewHolder tryGetViewHolderForPositionByDeadline(int i, boolean flag, long l)
		{
			if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            18
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          75
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Invalid item position ").append(i).append("(").append(i).append("). Item count:").append(mState.getItemCount()).toString());
		//    8   18:new             #209 <Class IndexOutOfBoundsException>
		//    9   21:dup             
		//   10   22:new             #211 <Class StringBuilder>
		//   11   25:dup             
		//   12   26:invokespecial   #212 <Method void StringBuilder()>
		//   13   29:ldc2            #547 <String "Invalid item position ">
		//   14   32:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   15   35:iload_1         
		//   16   36:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   17   39:ldc2            #549 <String "(">
		//   18   42:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   19   45:iload_1         
		//   20   46:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   21   49:ldc2            #551 <String "). Item count:">
		//   22   52:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   23   55:aload_0         
		//   24   56:getfield        #30  <Field RecyclerView this$0>
		//   25   59:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//   26   62:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//   27   65:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//   28   68:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   29   71:invokespecial   #233 <Method void IndexOutOfBoundsException(String)>
		//   30   74:athrow          
			boolean flag2 = false;
		//   31   75:iconst_0        
		//   32   76:istore          6
			ViewHolder viewholder = null;
		//   33   78:aconst_null     
		//   34   79:astore          14
			if(mState.isPreLayout())
		//*  35   81:aload_0         
		//*  36   82:getfield        #30  <Field RecyclerView this$0>
		//*  37   85:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  38   88:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//*  39   91:ifeq            115
			{
				viewholder = getChangedScrapViewForPosition(i);
		//   40   94:aload_0         
		//   41   95:iload_1         
		//   42   96:invokevirtual   #553 <Method RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
		//   43   99:astore          14
				if(viewholder != null)
		//*  44  101:aload           14
		//*  45  103:ifnull          112
					flag2 = true;
		//   46  106:iconst_1        
		//   47  107:istore          6
				else
		//*  48  109:goto            115
					flag2 = false;
		//   49  112:iconst_0        
		//   50  113:istore          6
			}
			boolean flag1 = flag2;
		//   51  115:iload           6
		//   52  117:istore          5
			Object obj = ((Object) (viewholder));
		//   53  119:aload           14
		//   54  121:astore          13
			if(viewholder == null)
		//*  55  123:aload           14
		//*  56  125:ifnonnull       233
			{
				viewholder = getScrapOrHiddenOrCachedHolderForPosition(i, flag);
		//   57  128:aload_0         
		//   58  129:iload_1         
		//   59  130:iload_2         
		//   60  131:invokevirtual   #555 <Method RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int, boolean)>
		//   61  134:astore          14
				flag1 = flag2;
		//   62  136:iload           6
		//   63  138:istore          5
				obj = ((Object) (viewholder));
		//   64  140:aload           14
		//   65  142:astore          13
				if(viewholder != null)
		//*  66  144:aload           14
		//*  67  146:ifnull          233
					if(!validateViewHolderForOffsetPosition(viewholder))
		//*  68  149:aload_0         
		//*  69  150:aload           14
		//*  70  152:invokevirtual   #558 <Method boolean validateViewHolderForOffsetPosition(RecyclerView$ViewHolder)>
		//*  71  155:ifne            226
					{
						if(!flag)
		//*  72  158:iload_2         
		//*  73  159:ifne            216
						{
							viewholder.addFlags(4);
		//   74  162:aload           14
		//   75  164:iconst_4        
		//   76  165:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
							if(viewholder.isScrap())
		//*  77  168:aload           14
		//*  78  170:invokevirtual   #468 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  79  173:ifeq            197
							{
								removeDetachedView(viewholder.itemView, false);
		//   80  176:aload_0         
		//   81  177:getfield        #30  <Field RecyclerView this$0>
		//   82  180:aload           14
		//   83  182:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//   84  185:iconst_0        
		//   85  186:invokevirtual   #359 <Method void RecyclerView.removeDetachedView(View, boolean)>
								viewholder.unScrap();
		//   86  189:aload           14
		//   87  191:invokevirtual   #471 <Method void RecyclerView$ViewHolder.unScrap()>
							} else
		//*  88  194:goto            210
							if(viewholder.wasReturnedFromScrap())
		//*  89  197:aload           14
		//*  90  199:invokevirtual   #322 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  91  202:ifeq            210
								viewholder.clearReturnedFromScrapFlag();
		//   92  205:aload           14
		//   93  207:invokevirtual   #444 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
							recycleViewHolderInternal(viewholder);
		//   94  210:aload_0         
		//   95  211:aload           14
		//   96  213:invokevirtual   #447 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
						}
						obj = null;
		//   97  216:aconst_null     
		//   98  217:astore          13
						flag1 = flag2;
		//   99  219:iload           6
		//  100  221:istore          5
					} else
		//* 101  223:goto            233
					{
						flag1 = true;
		//  102  226:iconst_1        
		//  103  227:istore          5
						obj = ((Object) (viewholder));
		//  104  229:aload           14
		//  105  231:astore          13
					}
			}
			int k = ((int) (flag1));
		//  106  233:iload           5
		//  107  235:istore          7
			viewholder = ((ViewHolder) (obj));
		//  108  237:aload           13
		//  109  239:astore          14
			if(obj == null)
		//* 110  241:aload           13
		//* 111  243:ifnonnull       695
			{
				k = mAdapterHelper.findPositionOffset(i);
		//  112  246:aload_0         
		//  113  247:getfield        #30  <Field RecyclerView this$0>
		//  114  250:getfield        #198 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//  115  253:iload_1         
		//  116  254:invokevirtual   #204 <Method int AdapterHelper.findPositionOffset(int)>
		//  117  257:istore          7
				if(k < 0 || k >= mAdapter.getItemCount())
		//* 118  259:iload           7
		//* 119  261:iflt            279
		//* 120  264:iload           7
		//* 121  266:aload_0         
		//* 122  267:getfield        #30  <Field RecyclerView this$0>
		//* 123  270:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 124  273:invokevirtual   #207 <Method int RecyclerView$Adapter.getItemCount()>
		//* 125  276:icmplt          339
					throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(k).append(").").append("state:").append(mState.getItemCount()).toString());
		//  126  279:new             #209 <Class IndexOutOfBoundsException>
		//  127  282:dup             
		//  128  283:new             #211 <Class StringBuilder>
		//  129  286:dup             
		//  130  287:invokespecial   #212 <Method void StringBuilder()>
		//  131  290:ldc1            #214 <String "Inconsistency detected. Invalid item position ">
		//  132  292:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//  133  295:iload_1         
		//  134  296:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//  135  299:ldc1            #223 <String "(offset:">
		//  136  301:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//  137  304:iload           7
		//  138  306:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//  139  309:ldc1            #225 <String ").">
		//  140  311:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//  141  314:ldc1            #227 <String "state:">
		//  142  316:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//  143  319:aload_0         
		//  144  320:getfield        #30  <Field RecyclerView this$0>
		//  145  323:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//  146  326:invokevirtual   #228 <Method int RecyclerView$State.getItemCount()>
		//  147  329:invokevirtual   #221 <Method StringBuilder StringBuilder.append(int)>
		//  148  332:invokevirtual   #232 <Method String StringBuilder.toString()>
		//  149  335:invokespecial   #233 <Method void IndexOutOfBoundsException(String)>
		//  150  338:athrow          
				int i1 = mAdapter.getItemViewType(k);
		//  151  339:aload_0         
		//  152  340:getfield        #30  <Field RecyclerView this$0>
		//  153  343:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  154  346:iload           7
		//  155  348:invokevirtual   #560 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//  156  351:istore          8
				boolean flag3 = flag1;
		//  157  353:iload           5
		//  158  355:istore          6
				viewholder = ((ViewHolder) (obj));
		//  159  357:aload           13
		//  160  359:astore          14
				if(mAdapter.hasStableIds())
		//* 161  361:aload_0         
		//* 162  362:getfield        #30  <Field RecyclerView this$0>
		//* 163  365:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 164  368:invokevirtual   #331 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//* 165  371:ifeq            422
				{
					obj = ((Object) (getScrapOrCachedViewForId(mAdapter.getItemId(k), i1, flag)));
		//  166  374:aload_0         
		//  167  375:aload_0         
		//  168  376:getfield        #30  <Field RecyclerView this$0>
		//  169  379:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  170  382:iload           7
		//  171  384:invokevirtual   #335 <Method long RecyclerView$Adapter.getItemId(int)>
		//  172  387:iload           8
		//  173  389:iload_2         
		//  174  390:invokevirtual   #562 <Method RecyclerView$ViewHolder getScrapOrCachedViewForId(long, int, boolean)>
		//  175  393:astore          13
					flag3 = flag1;
		//  176  395:iload           5
		//  177  397:istore          6
					viewholder = ((ViewHolder) (obj));
		//  178  399:aload           13
		//  179  401:astore          14
					if(obj != null)
		//* 180  403:aload           13
		//* 181  405:ifnull          422
					{
						obj.mPosition = k;
		//  182  408:aload           13
		//  183  410:iload           7
		//  184  412:putfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
						flag3 = true;
		//  185  415:iconst_1        
		//  186  416:istore          6
						viewholder = ((ViewHolder) (obj));
		//  187  418:aload           13
		//  188  420:astore          14
					}
				}
				obj = ((Object) (viewholder));
		//  189  422:aload           14
		//  190  424:astore          13
				if(viewholder == null)
		//* 191  426:aload           14
		//* 192  428:ifnonnull       514
				{
					obj = ((Object) (viewholder));
		//  193  431:aload           14
		//  194  433:astore          13
					if(mViewCacheExtension != null)
		//* 195  435:aload_0         
		//* 196  436:getfield        #540 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//* 197  439:ifnull          514
					{
						View view = mViewCacheExtension.getViewForPositionAndType(this, i, i1);
		//  198  442:aload_0         
		//  199  443:getfield        #540 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//  200  446:aload_0         
		//  201  447:iload_1         
		//  202  448:iload           8
		//  203  450:invokevirtual   #568 <Method View RecyclerView$ViewCacheExtension.getViewForPositionAndType(RecyclerView$Recycler, int, int)>
		//  204  453:astore          15
						obj = ((Object) (viewholder));
		//  205  455:aload           14
		//  206  457:astore          13
						if(view != null)
		//* 207  459:aload           15
		//* 208  461:ifnull          514
						{
							viewholder = getChildViewHolder(view);
		//  209  464:aload_0         
		//  210  465:getfield        #30  <Field RecyclerView this$0>
		//  211  468:aload           15
		//  212  470:invokevirtual   #571 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolder(View)>
		//  213  473:astore          14
							if(viewholder == null)
		//* 214  475:aload           14
		//* 215  477:ifnonnull       491
								throw new IllegalArgumentException("getViewForPositionAndType returned a view which does not have a ViewHolder");
		//  216  480:new             #189 <Class IllegalArgumentException>
		//  217  483:dup             
		//  218  484:ldc2            #573 <String "getViewForPositionAndType returned a view which does not have a ViewHolder">
		//  219  487:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//  220  490:athrow          
							obj = ((Object) (viewholder));
		//  221  491:aload           14
		//  222  493:astore          13
							if(viewholder.shouldIgnore())
		//* 223  495:aload           14
		//* 224  497:invokevirtual   #483 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//* 225  500:ifeq            514
								throw new IllegalArgumentException("getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.");
		//  226  503:new             #189 <Class IllegalArgumentException>
		//  227  506:dup             
		//  228  507:ldc2            #575 <String "getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.">
		//  229  510:invokespecial   #194 <Method void IllegalArgumentException(String)>
		//  230  513:athrow          
						}
					}
				}
				ViewHolder viewholder1 = ((ViewHolder) (obj));
		//  231  514:aload           13
		//  232  516:astore          15
				if(obj == null)
		//* 233  518:aload           13
		//* 234  520:ifnonnull       568
				{
					obj = ((Object) (getRecycledViewPool().getRecycledView(i1)));
		//  235  523:aload_0         
		//  236  524:invokevirtual   #179 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//  237  527:iload           8
		//  238  529:invokevirtual   #578 <Method RecyclerView$ViewHolder RecyclerView$RecycledViewPool.getRecycledView(int)>
		//  239  532:astore          13
					viewholder1 = ((ViewHolder) (obj));
		//  240  534:aload           13
		//  241  536:astore          15
					if(obj != null)
		//* 242  538:aload           13
		//* 243  540:ifnull          568
					{
						((ViewHolder) (obj)).resetInternal();
		//  244  543:aload           13
		//  245  545:invokevirtual   #581 <Method void RecyclerView$ViewHolder.resetInternal()>
						viewholder1 = ((ViewHolder) (obj));
		//  246  548:aload           13
		//  247  550:astore          15
						if(RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST)
		//* 248  552:getstatic       #584 <Field boolean RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST>
		//* 249  555:ifeq            568
						{
							invalidateDisplayListInt(((ViewHolder) (obj)));
		//  250  558:aload_0         
		//  251  559:aload           13
		//  252  561:invokespecial   #586 <Method void invalidateDisplayListInt(RecyclerView$ViewHolder)>
							viewholder1 = ((ViewHolder) (obj));
		//  253  564:aload           13
		//  254  566:astore          15
						}
					}
				}
				k = ((int) (flag3));
		//  255  568:iload           6
		//  256  570:istore          7
				viewholder = viewholder1;
		//  257  572:aload           15
		//  258  574:astore          14
				if(viewholder1 == null)
		//* 259  576:aload           15
		//* 260  578:ifnonnull       695
				{
					long l1 = getNanoTime();
		//  261  581:aload_0         
		//  262  582:getfield        #30  <Field RecyclerView this$0>
		//  263  585:invokevirtual   #129 <Method long RecyclerView.getNanoTime()>
		//  264  588:lstore          9
					if(l != 0xffffffffL && !mRecyclerPool.willCreateInTime(i1, l1, l))
		//* 265  590:lload_3         
		//* 266  591:ldc2w           #130 <Long 0xffffffffL>
		//* 267  594:lcmp            
		//* 268  595:ifeq            615
		//* 269  598:aload_0         
		//* 270  599:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 271  602:iload           8
		//* 272  604:lload           9
		//* 273  606:lload_3         
		//* 274  607:invokevirtual   #589 <Method boolean RecyclerView$RecycledViewPool.willCreateInTime(int, long, long)>
		//* 275  610:ifne            615
						return null;
		//  276  613:aconst_null     
		//  277  614:areturn         
					viewholder = mAdapter.createViewHolder(((ViewGroup) (RecyclerView.this)), i1);
		//  278  615:aload_0         
		//  279  616:getfield        #30  <Field RecyclerView this$0>
		//  280  619:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  281  622:aload_0         
		//  282  623:getfield        #30  <Field RecyclerView this$0>
		//  283  626:iload           8
		//  284  628:invokevirtual   #593 <Method RecyclerView$ViewHolder RecyclerView$Adapter.createViewHolder(ViewGroup, int)>
		//  285  631:astore          14
					if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 286  633:invokestatic    #450 <Method boolean RecyclerView.access$600()>
		//* 287  636:ifeq            668
					{
						obj = ((Object) (RecyclerView.findNestedRecyclerView(viewholder.itemView)));
		//  288  639:aload           14
		//  289  641:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//  290  644:invokestatic    #597 <Method RecyclerView RecyclerView.findNestedRecyclerView(View)>
		//  291  647:astore          13
						if(obj != null)
		//* 292  649:aload           13
		//* 293  651:ifnull          668
							viewholder.mNestedRecyclerView = new WeakReference(obj);
		//  294  654:aload           14
		//  295  656:new             #599 <Class WeakReference>
		//  296  659:dup             
		//  297  660:aload           13
		//  298  662:invokespecial   #601 <Method void WeakReference(Object)>
		//  299  665:putfield        #605 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
					}
					long l2 = getNanoTime();
		//  300  668:aload_0         
		//  301  669:getfield        #30  <Field RecyclerView this$0>
		//  302  672:invokevirtual   #129 <Method long RecyclerView.getNanoTime()>
		//  303  675:lstore          11
					mRecyclerPool.factorInCreateTime(i1, l2 - l1);
		//  304  677:aload_0         
		//  305  678:getfield        #133 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//  306  681:iload           8
		//  307  683:lload           11
		//  308  685:lload           9
		//  309  687:lsub            
		//  310  688:invokevirtual   #608 <Method void RecyclerView$RecycledViewPool.factorInCreateTime(int, long)>
					k = ((int) (flag3));
		//  311  691:iload           6
		//  312  693:istore          7
				}
			}
			if(k != 0 && !mState.isPreLayout() && viewholder.hasAnyOfTheFlags(8192))
		//* 313  695:iload           7
		//* 314  697:ifeq            796
		//* 315  700:aload_0         
		//* 316  701:getfield        #30  <Field RecyclerView this$0>
		//* 317  704:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//* 318  707:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//* 319  710:ifne            796
		//* 320  713:aload           14
		//* 321  715:sipush          8192
		//* 322  718:invokevirtual   #499 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 323  721:ifeq            796
			{
				viewholder.setFlags(0, 8192);
		//  324  724:aload           14
		//  325  726:iconst_0        
		//  326  727:sipush          8192
		//  327  730:invokevirtual   #352 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				if(mState.mRunSimpleAnimations)
		//* 328  733:aload_0         
		//* 329  734:getfield        #30  <Field RecyclerView this$0>
		//* 330  737:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//* 331  740:getfield        #611 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		//* 332  743:ifeq            796
				{
					int j = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder);
		//  333  746:aload           14
		//  334  748:invokestatic    #617 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
		//  335  751:istore          5
					obj = ((Object) (mItemAnimator.recordPreLayoutInformation(mState, viewholder, j | 0x1000, viewholder.getUnmodifiedPayloads())));
		//  336  753:aload_0         
		//  337  754:getfield        #30  <Field RecyclerView this$0>
		//  338  757:getfield        #621 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//  339  760:aload_0         
		//  340  761:getfield        #30  <Field RecyclerView this$0>
		//  341  764:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//  342  767:aload           14
		//  343  769:iload           5
		//  344  771:sipush          4096
		//  345  774:ior             
		//  346  775:aload           14
		//  347  777:invokevirtual   #624 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//  348  780:invokevirtual   #628 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
		//  349  783:astore          13
					recordAnimationInfoIfBouncedHiddenView(viewholder, ((ItemAnimator.ItemHolderInfo) (obj)));
		//  350  785:aload_0         
		//  351  786:getfield        #30  <Field RecyclerView this$0>
		//  352  789:aload           14
		//  353  791:aload           13
		//  354  793:invokevirtual   #632 <Method void RecyclerView.recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				}
			}
			flag = false;
		//  355  796:iconst_0        
		//  356  797:istore_2        
			if(mState.isPreLayout() && viewholder.isBound())
		//* 357  798:aload_0         
		//* 358  799:getfield        #30  <Field RecyclerView this$0>
		//* 359  802:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//* 360  805:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//* 361  808:ifeq            828
		//* 362  811:aload           14
		//* 363  813:invokevirtual   #635 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 364  816:ifeq            828
				viewholder.mPreLayoutPosition = i;
		//  365  819:aload           14
		//  366  821:iload_1         
		//  367  822:putfield        #167 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			else
		//* 368  825:goto            872
			if(!viewholder.isBound() || viewholder.needsUpdate() || viewholder.isInvalid())
		//* 369  828:aload           14
		//* 370  830:invokevirtual   #635 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 371  833:ifeq            852
		//* 372  836:aload           14
		//* 373  838:invokevirtual   #638 <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//* 374  841:ifne            852
		//* 375  844:aload           14
		//* 376  846:invokevirtual   #370 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 377  849:ifeq            872
				flag = tryBindViewHolderByDeadline(viewholder, mAdapterHelper.findPositionOffset(i), i, l);
		//  378  852:aload_0         
		//  379  853:aload           14
		//  380  855:aload_0         
		//  381  856:getfield        #30  <Field RecyclerView this$0>
		//  382  859:getfield        #198 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//  383  862:iload_1         
		//  384  863:invokevirtual   #204 <Method int AdapterHelper.findPositionOffset(int)>
		//  385  866:iload_1         
		//  386  867:lload_3         
		//  387  868:invokespecial   #235 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//  388  871:istore_2        
			obj = ((Object) (viewholder.itemView.getLayoutParams()));
		//  389  872:aload           14
		//  390  874:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//  391  877:invokevirtual   #241 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//  392  880:astore          13
			if(obj == null)
		//* 393  882:aload           13
		//* 394  884:ifnonnull       912
			{
				obj = ((Object) ((LayoutParams)generateDefaultLayoutParams()));
		//  395  887:aload_0         
		//  396  888:getfield        #30  <Field RecyclerView this$0>
		//  397  891:invokevirtual   #244 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//  398  894:checkcast       #246 <Class RecyclerView$LayoutParams>
		//  399  897:astore          13
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
		//  400  899:aload           14
		//  401  901:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//  402  904:aload           13
		//  403  906:invokevirtual   #250 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//* 404  909:goto            958
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj))))
		//* 405  912:aload_0         
		//* 406  913:getfield        #30  <Field RecyclerView this$0>
		//* 407  916:aload           13
		//* 408  918:invokevirtual   #254 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 409  921:ifne            951
			{
				obj = ((Object) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)))));
		//  410  924:aload_0         
		//  411  925:getfield        #30  <Field RecyclerView this$0>
		//  412  928:aload           13
		//  413  930:invokevirtual   #258 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  414  933:checkcast       #246 <Class RecyclerView$LayoutParams>
		//  415  936:astore          13
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
		//  416  938:aload           14
		//  417  940:getfield        #97  <Field View RecyclerView$ViewHolder.itemView>
		//  418  943:aload           13
		//  419  945:invokevirtual   #250 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//* 420  948:goto            958
			{
				obj = ((Object) ((LayoutParams)obj));
		//  421  951:aload           13
		//  422  953:checkcast       #246 <Class RecyclerView$LayoutParams>
		//  423  956:astore          13
			}
			obj.mViewHolder = viewholder;
		//  424  958:aload           13
		//  425  960:aload           14
		//  426  962:putfield        #266 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
			if(k != 0 && flag)
		//* 427  965:iload           7
		//* 428  967:ifeq            979
		//* 429  970:iload_2         
		//* 430  971:ifeq            979
				flag = true;
		//  431  974:iconst_1        
		//  432  975:istore_2        
			else
		//* 433  976:goto            981
				flag = false;
		//  434  979:iconst_0        
		//  435  980:istore_2        
			obj.mPendingInvalidate = flag;
		//  436  981:aload           13
		//  437  983:iload_2         
		//  438  984:putfield        #273 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
			return viewholder;
		//  439  987:aload           14
		//  440  989:areturn         
		}

		void unscrapView(ViewHolder viewholder)
		{
			if(viewholder.mInChangeScrap)
		//*   0    0:aload_1         
		//*   1    1:invokestatic    #643 <Method boolean RecyclerView$ViewHolder.access$900(RecyclerView$ViewHolder)>
		//*   2    4:ifeq            19
				mChangedScrap.remove(((Object) (viewholder)));
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #645 <Method boolean ArrayList.remove(Object)>
		//    7   15:pop             
			else
		//*   8   16:goto            28
				mAttachedScrap.remove(((Object) (viewholder)));
		//    9   19:aload_0         
		//   10   20:getfield        #38  <Field ArrayList mAttachedScrap>
		//   11   23:aload_1         
		//   12   24:invokevirtual   #645 <Method boolean ArrayList.remove(Object)>
		//   13   27:pop             
			viewholder.mScrapContainer = null;
		//   14   28:aload_1         
		//   15   29:aconst_null     
		//   16   30:invokestatic    #437 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$802(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//   17   33:pop             
			viewholder.mInChangeScrap = false;
		//   18   34:aload_1         
		//   19   35:iconst_0        
		//   20   36:invokestatic    #441 <Method boolean RecyclerView$ViewHolder.access$902(RecyclerView$ViewHolder, boolean)>
		//   21   39:pop             
			viewholder.clearReturnedFromScrapFlag();
		//   22   40:aload_1         
		//   23   41:invokevirtual   #444 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//   24   44:return          
		}

		void updateViewCacheSize()
		{
			int i;
			if(mLayout != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #649 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnull          24
				i = mLayout.mPrefetchMaxCountObserved;
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #649 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    7   17:getfield        #654 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
		//    8   20:istore_1        
			else
		//*   9   21:goto            26
				i = 0;
		//   10   24:iconst_0        
		//   11   25:istore_1        
			mViewCacheMax = mRequestedCacheMax + i;
		//   12   26:aload_0         
		//   13   27:aload_0         
		//   14   28:getfield        #52  <Field int mRequestedCacheMax>
		//   15   31:iload_1         
		//   16   32:iadd            
		//   17   33:putfield        #54  <Field int mViewCacheMax>
			for(int j = mCachedViews.size() - 1; j >= 0 && mCachedViews.size() > mViewCacheMax; j--)
		//*  18   36:aload_0         
		//*  19   37:getfield        #42  <Field ArrayList mCachedViews>
		//*  20   40:invokevirtual   #283 <Method int ArrayList.size()>
		//*  21   43:iconst_1        
		//*  22   44:isub            
		//*  23   45:istore_1        
		//*  24   46:iload_1         
		//*  25   47:iflt            76
		//*  26   50:aload_0         
		//*  27   51:getfield        #42  <Field ArrayList mCachedViews>
		//*  28   54:invokevirtual   #283 <Method int ArrayList.size()>
		//*  29   57:aload_0         
		//*  30   58:getfield        #54  <Field int mViewCacheMax>
		//*  31   61:icmple          76
				recycleCachedViewAt(j);
		//   32   64:aload_0         
		//   33   65:iload_1         
		//   34   66:invokevirtual   #365 <Method void recycleCachedViewAt(int)>

		//   35   69:iload_1         
		//   36   70:iconst_1        
		//   37   71:isub            
		//   38   72:istore_1        
		//*  39   73:goto            46
		//   40   76:return          
		}

		boolean validateViewHolderForOffsetPosition(ViewHolder viewholder)
		{
			if(viewholder.isRemoved())
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #348 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   2    4:ifeq            18
				return mState.isPreLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #30  <Field RecyclerView this$0>
		//    5   11:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//    6   14:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//    7   17:ireturn         
			if(viewholder.mPosition < 0 || viewholder.mPosition >= mAdapter.getItemCount())
		//*   8   18:aload_1         
		//*   9   19:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  10   22:iflt            42
		//*  11   25:aload_1         
		//*  12   26:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  13   29:aload_0         
		//*  14   30:getfield        #30  <Field RecyclerView this$0>
		//*  15   33:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   36:invokevirtual   #207 <Method int RecyclerView$Adapter.getItemCount()>
		//*  17   39:icmplt          70
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid view holder adapter position").append(((Object) (viewholder))).toString());
		//   18   42:new             #209 <Class IndexOutOfBoundsException>
		//   19   45:dup             
		//   20   46:new             #211 <Class StringBuilder>
		//   21   49:dup             
		//   22   50:invokespecial   #212 <Method void StringBuilder()>
		//   23   53:ldc2            #656 <String "Inconsistency detected. Invalid view holder adapter position">
		//   24   56:invokevirtual   #218 <Method StringBuilder StringBuilder.append(String)>
		//   25   59:aload_1         
		//   26   60:invokevirtual   #395 <Method StringBuilder StringBuilder.append(Object)>
		//   27   63:invokevirtual   #232 <Method String StringBuilder.toString()>
		//   28   66:invokespecial   #233 <Method void IndexOutOfBoundsException(String)>
		//   29   69:athrow          
			if(!mState.isPreLayout() && mAdapter.getItemViewType(viewholder.mPosition) != viewholder.getItemViewType())
		//*  30   70:aload_0         
		//*  31   71:getfield        #30  <Field RecyclerView this$0>
		//*  32   74:getfield        #159 <Field RecyclerView$State RecyclerView.mState>
		//*  33   77:invokevirtual   #164 <Method boolean RecyclerView$State.isPreLayout()>
		//*  34   80:ifne            106
		//*  35   83:aload_0         
		//*  36   84:getfield        #30  <Field RecyclerView this$0>
		//*  37   87:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  38   90:aload_1         
		//*  39   91:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//*  40   94:invokevirtual   #560 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//*  41   97:aload_1         
		//*  42   98:invokevirtual   #125 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  43  101:icmpeq          106
				return false;
		//   44  104:iconst_0        
		//   45  105:ireturn         
			if(mAdapter.hasStableIds())
		//*  46  106:aload_0         
		//*  47  107:getfield        #30  <Field RecyclerView this$0>
		//*  48  110:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  49  113:invokevirtual   #331 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  50  116:ifeq            145
				return viewholder.getItemId() == mAdapter.getItemId(viewholder.mPosition);
		//   51  119:aload_1         
		//   52  120:invokevirtual   #337 <Method long RecyclerView$ViewHolder.getItemId()>
		//   53  123:aload_0         
		//   54  124:getfield        #30  <Field RecyclerView this$0>
		//   55  127:getfield        #143 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   56  130:aload_1         
		//   57  131:getfield        #421 <Field int RecyclerView$ViewHolder.mPosition>
		//   58  134:invokevirtual   #335 <Method long RecyclerView$Adapter.getItemId(int)>
		//   59  137:lcmp            
		//   60  138:ifne            143
		//   61  141:iconst_1        
		//   62  142:ireturn         
		//   63  143:iconst_0        
		//   64  144:ireturn         
			else
				return true;
		//   65  145:iconst_1        
		//   66  146:ireturn         
		}

		void viewRangeUpdate(int i, int j)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #283 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            74
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   14:aload_0         
		//    9   15:getfield        #42  <Field ArrayList mCachedViews>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #287 <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #93  <Class RecyclerView$ViewHolder>
		//   13   25:astore          5
				if(viewholder == null)
		//*  14   27:aload           5
		//*  15   29:ifnonnull       35
					continue;
		//   16   32:goto            67
				int l = viewholder.getLayoutPosition();
		//   17   35:aload           5
		//   18   37:invokevirtual   #325 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//   19   40:istore          4
				if(l >= i && l < i + j)
		//*  20   42:iload           4
		//*  21   44:iload_1         
		//*  22   45:icmplt          67
		//*  23   48:iload           4
		//*  24   50:iload_1         
		//*  25   51:iload_2         
		//*  26   52:iadd            
		//*  27   53:icmpge          67
				{
					viewholder.addFlags(2);
		//   28   56:aload           5
		//   29   58:iconst_2        
		//   30   59:invokevirtual   #328 <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   31   62:aload_0         
		//   32   63:iload_3         
		//   33   64:invokevirtual   #365 <Method void recycleCachedViewAt(int)>
				}
			}

		//   34   67:iload_3         
		//   35   68:iconst_1        
		//   36   69:isub            
		//   37   70:istore_3        
		//*  38   71:goto            10
		//   39   74:return          
		}

		static final int DEFAULT_CACHE_SIZE = 2;
		final ArrayList mAttachedScrap = new ArrayList();
		final ArrayList mCachedViews = new ArrayList();
		ArrayList mChangedScrap;
		RecycledViewPool mRecyclerPool;
		private int mRequestedCacheMax;
		private final List mUnmodifiableAttachedScrap;
		private ViewCacheExtension mViewCacheExtension;
		int mViewCacheMax;
		final RecyclerView this$0;

		public Recycler()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #30  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #33  <Method void Object()>
		//    5    9:aload_0         
		//    6   10:new             #35  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #36  <Method void ArrayList()>
		//    9   17:putfield        #38  <Field ArrayList mAttachedScrap>
			mChangedScrap = null;
		//   10   20:aload_0         
		//   11   21:aconst_null     
		//   12   22:putfield        #40  <Field ArrayList mChangedScrap>
		//   13   25:aload_0         
		//   14   26:new             #35  <Class ArrayList>
		//   15   29:dup             
		//   16   30:invokespecial   #36  <Method void ArrayList()>
		//   17   33:putfield        #42  <Field ArrayList mCachedViews>
			mUnmodifiableAttachedScrap = Collections.unmodifiableList(((List) (mAttachedScrap)));
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   41:invokestatic    #48  <Method List Collections.unmodifiableList(List)>
		//   22   44:putfield        #50  <Field List mUnmodifiableAttachedScrap>
			mRequestedCacheMax = 2;
		//   23   47:aload_0         
		//   24   48:iconst_2        
		//   25   49:putfield        #52  <Field int mRequestedCacheMax>
			mViewCacheMax = 2;
		//   26   52:aload_0         
		//   27   53:iconst_2        
		//   28   54:putfield        #54  <Field int mViewCacheMax>
		//   29   57:return          
		}
	}

	public static interface RecyclerListener
	{

		public abstract void onViewRecycled(ViewHolder viewholder);
	}

	class RecyclerViewDataObserver extends AdapterDataObserver
	{

		public void onChanged()
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			mState.mStructureChanged = true;
		//    4    8:aload_0         
		//    5    9:getfield        #13  <Field RecyclerView this$0>
		//    6   12:getfield        #26  <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iconst_1        
		//    8   16:putfield        #32  <Field boolean RecyclerView$State.mStructureChanged>
			setDataSetChangedAfterLayout();
		//    9   19:aload_0         
		//   10   20:getfield        #13  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #35  <Method void RecyclerView.setDataSetChangedAfterLayout()>
			if(!mAdapterHelper.hasPendingUpdates())
		//*  12   26:aload_0         
		//*  13   27:getfield        #13  <Field RecyclerView this$0>
		//*  14   30:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*  15   33:invokevirtual   #45  <Method boolean AdapterHelper.hasPendingUpdates()>
		//*  16   36:ifne            46
				requestLayout();
		//   17   39:aload_0         
		//   18   40:getfield        #13  <Field RecyclerView this$0>
		//   19   43:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
		//   20   46:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeChanged(i, j, obj))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:aload_3         
		//*  10   18:invokevirtual   #53  <Method boolean AdapterHelper.onItemRangeChanged(int, int, Object)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeInserted(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #61  <Method boolean AdapterHelper.onItemRangeInserted(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeMoved(i, j, k))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:iload_3         
		//*  10   18:invokevirtual   #66  <Method boolean AdapterHelper.onItemRangeMoved(int, int, int)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeRemoved(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #69  <Method boolean AdapterHelper.onItemRangeRemoved(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		void triggerUpdateProcessor()
		{
			if(RecyclerView.POST_UPDATES_ON_ANIMATION && mHasFixedSize && mIsAttached)
		//*   0    0:getstatic       #72  <Field boolean RecyclerView.POST_UPDATES_ON_ANIMATION>
		//*   1    3:ifeq            41
		//*   2    6:aload_0         
		//*   3    7:getfield        #13  <Field RecyclerView this$0>
		//*   4   10:getfield        #75  <Field boolean RecyclerView.mHasFixedSize>
		//*   5   13:ifeq            41
		//*   6   16:aload_0         
		//*   7   17:getfield        #13  <Field RecyclerView this$0>
		//*   8   20:getfield        #78  <Field boolean RecyclerView.mIsAttached>
		//*   9   23:ifeq            41
			{
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), mUpdateChildViewsRunnable);
		//   10   26:aload_0         
		//   11   27:getfield        #13  <Field RecyclerView this$0>
		//   12   30:aload_0         
		//   13   31:getfield        #13  <Field RecyclerView this$0>
		//   14   34:getfield        #82  <Field Runnable RecyclerView.mUpdateChildViewsRunnable>
		//   15   37:invokestatic    #88  <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   40:return          
			} else
			{
				mAdapterUpdateDuringMeasure = true;
		//   17   41:aload_0         
		//   18   42:getfield        #13  <Field RecyclerView this$0>
		//   19   45:iconst_1        
		//   20   46:putfield        #91  <Field boolean RecyclerView.mAdapterUpdateDuringMeasure>
				requestLayout();
		//   21   49:aload_0         
		//   22   50:getfield        #13  <Field RecyclerView this$0>
		//   23   53:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
				return;
		//   24   56:return          
			}
		}

		final RecyclerView this$0;

		RecyclerViewDataObserver()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #13  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #16  <Method void RecyclerView$AdapterDataObserver()>
		//    5    9:return          
		}
	}

	public static class SavedState extends AbsSavedState
	{

		void copyFrom(SavedState savedstate)
		{
			mLayoutState = savedstate.mLayoutState;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:getfield        #51  <Field Parcelable mLayoutState>
		//    3    5:putfield        #51  <Field Parcelable mLayoutState>
		//    4    8:return          
		}

		public void writeToParcel(Parcel parcel, int i)
		{
			super.writeToParcel(parcel, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #60  <Method void AbsSavedState.writeToParcel(Parcel, int)>
			parcel.writeParcelable(mLayoutState, 0);
		//    4    6:aload_1         
		//    5    7:aload_0         
		//    6    8:getfield        #51  <Field Parcelable mLayoutState>
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #64  <Method void Parcel.writeParcelable(Parcelable, int)>
		//    9   15:return          
		}

		public static final android.os.Parcelable.Creator CREATOR = ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks() {

			public SavedState createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return new SavedState(parcel, classloader);
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return ((Object) (createFromParcel(parcel, classloader)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:aload_2         
			//    3    3:invokevirtual   #25  <Method RecyclerView$SavedState createFromParcel(Parcel, ClassLoader)>
			//    4    6:areturn         
			}

			public SavedState[] newArray(int i)
			{
				return new SavedState[i];
			//    0    0:iload_1         
			//    1    1:anewarray       SavedState[]
			//    2    4:areturn         
			}

			public volatile Object[] newArray(int i)
			{
				return ((Object []) (newArray(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #30  <Method RecyclerView$SavedState[] newArray(int)>
			//    3    5:areturn         
			}

		}
);
		Parcelable mLayoutState;

		static 
		{
		//    0    0:new             #9   <Class RecyclerView$SavedState$1>
		//    1    3:dup             
		//    2    4:invokespecial   #23  <Method void RecyclerView$SavedState$1()>
		//    3    7:invokestatic    #29  <Method android.os.Parcelable$Creator ParcelableCompat.newCreator(ParcelableCompatCreatorCallbacks)>
		//    4   10:putstatic       #31  <Field android.os.Parcelable$Creator CREATOR>
		//*   5   13:return          
		}

		SavedState(Parcel parcel, ClassLoader classloader)
		{
			super(parcel, classloader);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #35  <Method void AbsSavedState(Parcel, ClassLoader)>
			if(classloader == null)
		//*   4    6:aload_2         
		//*   5    7:ifnull          13
		//*   6   10:goto            19
				classloader = ((Class) (android/support/v7/widget/RecyclerView$LayoutManager)).getClassLoader();
		//    7   13:ldc1            #37  <Class RecyclerView$LayoutManager>
		//    8   15:invokevirtual   #43  <Method ClassLoader Class.getClassLoader()>
		//    9   18:astore_2        
			mLayoutState = parcel.readParcelable(classloader);
		//   10   19:aload_0         
		//   11   20:aload_1         
		//   12   21:aload_2         
		//   13   22:invokevirtual   #49  <Method Parcelable Parcel.readParcelable(ClassLoader)>
		//   14   25:putfield        #51  <Field Parcelable mLayoutState>
		//   15   28:return          
		}

		SavedState(Parcelable parcelable)
		{
			super(parcelable);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #54  <Method void AbsSavedState(Parcelable)>
		//    3    5:return          
		}
	}

	public static class SimpleOnItemTouchListener
		implements OnItemTouchListener
	{

		public boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onRequestDisallowInterceptTouchEvent(boolean flag)
		{
		//    0    0:return          
		}

		public void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
		//    0    0:return          
		}

		public SimpleOnItemTouchListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #13  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class SmoothScroller
	{

		private void onAnimation(int i, int j)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:astore          4
			if(!mRunning || mTargetPosition == -1 || recyclerview == null)
		//*   3    6:aload_0         
		//*   4    7:getfield        #47  <Field boolean mRunning>
		//*   5   10:ifeq            26
		//*   6   13:aload_0         
		//*   7   14:getfield        #32  <Field int mTargetPosition>
		//*   8   17:iconst_m1       
		//*   9   18:icmpeq          26
		//*  10   21:aload           4
		//*  11   23:ifnonnull       30
				stop();
		//   12   26:aload_0         
		//   13   27:invokevirtual   #50  <Method void stop()>
			mPendingInitialRun = false;
		//   14   30:aload_0         
		//   15   31:iconst_0        
		//   16   32:putfield        #52  <Field boolean mPendingInitialRun>
			if(mTargetView != null)
		//*  17   35:aload_0         
		//*  18   36:getfield        #54  <Field View mTargetView>
		//*  19   39:ifnull          103
				if(getChildPosition(mTargetView) == mTargetPosition)
		//*  20   42:aload_0         
		//*  21   43:aload_0         
		//*  22   44:getfield        #54  <Field View mTargetView>
		//*  23   47:invokevirtual   #58  <Method int getChildPosition(View)>
		//*  24   50:aload_0         
		//*  25   51:getfield        #32  <Field int mTargetPosition>
		//*  26   54:icmpne          90
				{
					onTargetFound(mTargetView, recyclerview.mState, mRecyclingAction);
		//   27   57:aload_0         
		//   28   58:aload_0         
		//   29   59:getfield        #54  <Field View mTargetView>
		//   30   62:aload           4
		//   31   64:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   32   67:aload_0         
		//   33   68:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   34   71:invokevirtual   #66  <Method void onTargetFound(View, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
					mRecyclingAction.runIfNecessary(recyclerview);
		//   35   74:aload_0         
		//   36   75:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   37   78:aload           4
		//   38   80:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
					stop();
		//   39   83:aload_0         
		//   40   84:invokevirtual   #50  <Method void stop()>
				} else
		//*  41   87:goto            103
				{
					Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
		//   42   90:ldc1            #72  <String "RecyclerView">
		//   43   92:ldc1            #74  <String "Passed over target position while smooth scrolling.">
		//   44   94:invokestatic    #80  <Method int Log.e(String, String)>
		//   45   97:pop             
					mTargetView = null;
		//   46   98:aload_0         
		//   47   99:aconst_null     
		//   48  100:putfield        #54  <Field View mTargetView>
				}
			if(mRunning)
		//*  49  103:aload_0         
		//*  50  104:getfield        #47  <Field boolean mRunning>
		//*  51  107:ifeq            171
			{
				onSeekTargetStep(i, j, recyclerview.mState, mRecyclingAction);
		//   52  110:aload_0         
		//   53  111:iload_1         
		//   54  112:iload_2         
		//   55  113:aload           4
		//   56  115:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   57  118:aload_0         
		//   58  119:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   59  122:invokevirtual   #84  <Method void onSeekTargetStep(int, int, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
				boolean flag = mRecyclingAction.hasJumpTarget();
		//   60  125:aload_0         
		//   61  126:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   62  129:invokevirtual   #88  <Method boolean RecyclerView$SmoothScroller$Action.hasJumpTarget()>
		//   63  132:istore_3        
				mRecyclingAction.runIfNecessary(recyclerview);
		//   64  133:aload_0         
		//   65  134:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   66  137:aload           4
		//   67  139:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
				if(flag)
		//*  68  142:iload_3         
		//*  69  143:ifeq            171
				{
					if(mRunning)
		//*  70  146:aload_0         
		//*  71  147:getfield        #47  <Field boolean mRunning>
		//*  72  150:ifeq            167
					{
						mPendingInitialRun = true;
		//   73  153:aload_0         
		//   74  154:iconst_1        
		//   75  155:putfield        #52  <Field boolean mPendingInitialRun>
						recyclerview.mViewFlinger.postOnAnimation();
		//   76  158:aload           4
		//   77  160:getfield        #92  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   78  163:invokevirtual   #97  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
						return;
		//   79  166:return          
					}
					stop();
		//   80  167:aload_0         
		//   81  168:invokevirtual   #50  <Method void stop()>
				}
			}
		//   82  171:return          
		}

		public View findViewByPosition(int i)
		{
			return mRecyclerView.mLayout.findViewByPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:iload_1         
		//    4    8:invokevirtual   #106 <Method View RecyclerView$LayoutManager.findViewByPosition(int)>
		//    5   11:areturn         
		}

		public int getChildCount()
		{
			return mRecyclerView.mLayout.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:invokevirtual   #110 <Method int RecyclerView$LayoutManager.getChildCount()>
		//    4   10:ireturn         
		}

		public int getChildPosition(View view)
		{
			return mRecyclerView.getChildLayoutPosition(view);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #113 <Method int RecyclerView.getChildLayoutPosition(View)>
		//    4    8:ireturn         
		}

		public LayoutManager getLayoutManager()
		{
			return mLayoutManager;
		//    0    0:aload_0         
		//    1    1:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//    2    4:areturn         
		}

		public int getTargetPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #32  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public void instantScrollToPosition(int i)
		{
			mRecyclerView.scrollToPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #126 <Method void RecyclerView.scrollToPosition(int)>
		//    4    8:return          
		}

		public boolean isPendingInitialRun()
		{
			return mPendingInitialRun;
		//    0    0:aload_0         
		//    1    1:getfield        #52  <Field boolean mPendingInitialRun>
		//    2    4:ireturn         
		}

		public boolean isRunning()
		{
			return mRunning;
		//    0    0:aload_0         
		//    1    1:getfield        #47  <Field boolean mRunning>
		//    2    4:ireturn         
		}

		protected void normalize(PointF pointf)
		{
			double d = Math.sqrt(pointf.x * pointf.x + pointf.y * pointf.y);
		//    0    0:aload_1         
		//    1    1:getfield        #137 <Field float PointF.x>
		//    2    4:aload_1         
		//    3    5:getfield        #137 <Field float PointF.x>
		//    4    8:fmul            
		//    5    9:aload_1         
		//    6   10:getfield        #140 <Field float PointF.y>
		//    7   13:aload_1         
		//    8   14:getfield        #140 <Field float PointF.y>
		//    9   17:fmul            
		//   10   18:fadd            
		//   11   19:f2d             
		//   12   20:invokestatic    #146 <Method double Math.sqrt(double)>
		//   13   23:dstore_2        
			pointf.x = (float)((double)pointf.x / d);
		//   14   24:aload_1         
		//   15   25:aload_1         
		//   16   26:getfield        #137 <Field float PointF.x>
		//   17   29:f2d             
		//   18   30:dload_2         
		//   19   31:ddiv            
		//   20   32:d2f             
		//   21   33:putfield        #137 <Field float PointF.x>
			pointf.y = (float)((double)pointf.y / d);
		//   22   36:aload_1         
		//   23   37:aload_1         
		//   24   38:getfield        #140 <Field float PointF.y>
		//   25   41:f2d             
		//   26   42:dload_2         
		//   27   43:ddiv            
		//   28   44:d2f             
		//   29   45:putfield        #140 <Field float PointF.y>
		//   30   48:return          
		}

		protected void onChildAttachedToWindow(View view)
		{
			if(getChildPosition(view) == getTargetPosition())
		//*   0    0:aload_0         
		//*   1    1:aload_1         
		//*   2    2:invokevirtual   #58  <Method int getChildPosition(View)>
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #150 <Method int getTargetPosition()>
		//*   5    9:icmpne          17
				mTargetView = view;
		//    6   12:aload_0         
		//    7   13:aload_1         
		//    8   14:putfield        #54  <Field View mTargetView>
		//    9   17:return          
		}

		protected abstract void onSeekTargetStep(int i, int j, State state, Action action);

		protected abstract void onStart();

		protected abstract void onStop();

		protected abstract void onTargetFound(View view, State state, Action action);

		public void setTargetPosition(int i)
		{
			mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #32  <Field int mTargetPosition>
		//    3    5:return          
		}

		void start(RecyclerView recyclerview, LayoutManager layoutmanager)
		{
			mRecyclerView = recyclerview;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #45  <Field RecyclerView mRecyclerView>
			mLayoutManager = layoutmanager;
		//    3    5:aload_0         
		//    4    6:aload_2         
		//    5    7:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
			if(mTargetPosition == -1)
		//*   6   10:aload_0         
		//*   7   11:getfield        #32  <Field int mTargetPosition>
		//*   8   14:iconst_m1       
		//*   9   15:icmpne          28
			{
				throw new IllegalArgumentException("Invalid target position");
		//   10   18:new             #157 <Class IllegalArgumentException>
		//   11   21:dup             
		//   12   22:ldc1            #159 <String "Invalid target position">
		//   13   24:invokespecial   #162 <Method void IllegalArgumentException(String)>
		//   14   27:athrow          
			} else
			{
				mRecyclerView.mState.mTargetPosition = mTargetPosition;
		//   15   28:aload_0         
		//   16   29:getfield        #45  <Field RecyclerView mRecyclerView>
		//   17   32:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   18   35:aload_0         
		//   19   36:getfield        #32  <Field int mTargetPosition>
		//   20   39:invokestatic    #168 <Method int RecyclerView$State.access$1102(RecyclerView$State, int)>
		//   21   42:pop             
				mRunning = true;
		//   22   43:aload_0         
		//   23   44:iconst_1        
		//   24   45:putfield        #47  <Field boolean mRunning>
				mPendingInitialRun = true;
		//   25   48:aload_0         
		//   26   49:iconst_1        
		//   27   50:putfield        #52  <Field boolean mPendingInitialRun>
				mTargetView = findViewByPosition(getTargetPosition());
		//   28   53:aload_0         
		//   29   54:aload_0         
		//   30   55:aload_0         
		//   31   56:invokevirtual   #150 <Method int getTargetPosition()>
		//   32   59:invokevirtual   #169 <Method View findViewByPosition(int)>
		//   33   62:putfield        #54  <Field View mTargetView>
				onStart();
		//   34   65:aload_0         
		//   35   66:invokevirtual   #171 <Method void onStart()>
				mRecyclerView.mViewFlinger.postOnAnimation();
		//   36   69:aload_0         
		//   37   70:getfield        #45  <Field RecyclerView mRecyclerView>
		//   38   73:getfield        #92  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   39   76:invokevirtual   #97  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
				return;
		//   40   79:return          
			}
		}

		protected final void stop()
		{
			if(!mRunning)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field boolean mRunning>
		//*   2    4:ifne            8
			{
				return;
		//    3    7:return          
			} else
			{
				onStop();
		//    4    8:aload_0         
		//    5    9:invokevirtual   #173 <Method void onStop()>
				mRecyclerView.mState.mTargetPosition = -1;
		//    6   12:aload_0         
		//    7   13:getfield        #45  <Field RecyclerView mRecyclerView>
		//    8   16:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//    9   19:iconst_m1       
		//   10   20:invokestatic    #168 <Method int RecyclerView$State.access$1102(RecyclerView$State, int)>
		//   11   23:pop             
				mTargetView = null;
		//   12   24:aload_0         
		//   13   25:aconst_null     
		//   14   26:putfield        #54  <Field View mTargetView>
				mTargetPosition = -1;
		//   15   29:aload_0         
		//   16   30:iconst_m1       
		//   17   31:putfield        #32  <Field int mTargetPosition>
				mPendingInitialRun = false;
		//   18   34:aload_0         
		//   19   35:iconst_0        
		//   20   36:putfield        #52  <Field boolean mPendingInitialRun>
				mRunning = false;
		//   21   39:aload_0         
		//   22   40:iconst_0        
		//   23   41:putfield        #47  <Field boolean mRunning>
				mLayoutManager.onSmoothScrollerStopped(this);
		//   24   44:aload_0         
		//   25   45:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//   26   48:aload_0         
		//   27   49:invokestatic    #177 <Method void RecyclerView$LayoutManager.access$1200(RecyclerView$LayoutManager, RecyclerView$SmoothScroller)>
				mLayoutManager = null;
		//   28   52:aload_0         
		//   29   53:aconst_null     
		//   30   54:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
				mRecyclerView = null;
		//   31   57:aload_0         
		//   32   58:aconst_null     
		//   33   59:putfield        #45  <Field RecyclerView mRecyclerView>
				return;
		//   34   62:return          
			}
		}

		private LayoutManager mLayoutManager;
		private boolean mPendingInitialRun;
		private RecyclerView mRecyclerView;
		private final Action mRecyclingAction = new Action(0, 0);
		private boolean mRunning;
		private int mTargetPosition;
		private View mTargetView;


/*
		static void access$400(SmoothScroller smoothscroller, int i, int j)
		{
			smoothscroller.onAnimation(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #43  <Method void onAnimation(int, int)>
			return;
		//    4    6:return          
		}

*/

		public SmoothScroller()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #30  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #32  <Field int mTargetPosition>
		//    5    9:aload_0         
		//    6   10:new             #9   <Class RecyclerView$SmoothScroller$Action>
		//    7   13:dup             
		//    8   14:iconst_0        
		//    9   15:iconst_0        
		//   10   16:invokespecial   #35  <Method void RecyclerView$SmoothScroller$Action(int, int)>
		//   11   19:putfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   12   22:return          
		}
	}

	public static class SmoothScroller.Action
	{

		private void validate()
		{
			if(mInterpolator != null && mDuration < 1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #46  <Field Interpolator mInterpolator>
		//*   2    4:ifnull          25
		//*   3    7:aload_0         
		//*   4    8:getfield        #44  <Field int mDuration>
		//*   5   11:iconst_1        
		//*   6   12:icmpge          25
				throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
		//    7   15:new             #49  <Class IllegalStateException>
		//    8   18:dup             
		//    9   19:ldc1            #51  <String "If you provide an interpolator, you must set a positive duration">
		//   10   21:invokespecial   #54  <Method void IllegalStateException(String)>
		//   11   24:athrow          
			if(mDuration < 1)
		//*  12   25:aload_0         
		//*  13   26:getfield        #44  <Field int mDuration>
		//*  14   29:iconst_1        
		//*  15   30:icmpge          43
				throw new IllegalStateException("Scroll duration must be a positive number");
		//   16   33:new             #49  <Class IllegalStateException>
		//   17   36:dup             
		//   18   37:ldc1            #56  <String "Scroll duration must be a positive number">
		//   19   39:invokespecial   #54  <Method void IllegalStateException(String)>
		//   20   42:athrow          
			else
				return;
		//   21   43:return          
		}

		public int getDuration()
		{
			return mDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mDuration>
		//    2    4:ireturn         
		}

		public int getDx()
		{
			return mDx;
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field int mDx>
		//    2    4:ireturn         
		}

		public int getDy()
		{
			return mDy;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field int mDy>
		//    2    4:ireturn         
		}

		public Interpolator getInterpolator()
		{
			return mInterpolator;
		//    0    0:aload_0         
		//    1    1:getfield        #46  <Field Interpolator mInterpolator>
		//    2    4:areturn         
		}

		boolean hasJumpTarget()
		{
			return mJumpToPosition >= 0;
		//    0    0:aload_0         
		//    1    1:getfield        #34  <Field int mJumpToPosition>
		//    2    4:iflt            9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		public void jumpTo(int i)
		{
			mJumpToPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #34  <Field int mJumpToPosition>
		//    3    5:return          
		}

		void runIfNecessary(RecyclerView recyclerview)
		{
			if(mJumpToPosition >= 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #34  <Field int mJumpToPosition>
		//*   2    4:iflt            28
			{
				int i = mJumpToPosition;
		//    3    7:aload_0         
		//    4    8:getfield        #34  <Field int mJumpToPosition>
		//    5   11:istore_2        
				mJumpToPosition = -1;
		//    6   12:aload_0         
		//    7   13:iconst_m1       
		//    8   14:putfield        #34  <Field int mJumpToPosition>
				recyclerview.jumpToPositionForSmoothScroller(i);
		//    9   17:aload_1         
		//   10   18:iload_2         
		//   11   19:invokevirtual   #71  <Method void RecyclerView.jumpToPositionForSmoothScroller(int)>
				mChanged = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #36  <Field boolean mChanged>
				return;
		//   15   27:return          
			}
			if(mChanged)
		//*  16   28:aload_0         
		//*  17   29:getfield        #36  <Field boolean mChanged>
		//*  18   32:ifeq            151
			{
				validate();
		//   19   35:aload_0         
		//   20   36:invokespecial   #73  <Method void validate()>
				if(mInterpolator == null)
		//*  21   39:aload_0         
		//*  22   40:getfield        #46  <Field Interpolator mInterpolator>
		//*  23   43:ifnonnull       95
				{
					if(mDuration == 0x80000000)
		//*  24   46:aload_0         
		//*  25   47:getfield        #44  <Field int mDuration>
		//*  26   50:ldc1            #13  <Int 0x80000000>
		//*  27   52:icmpne          73
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy);
		//   28   55:aload_1         
		//   29   56:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   30   59:aload_0         
		//   31   60:getfield        #40  <Field int mDx>
		//   32   63:aload_0         
		//   33   64:getfield        #42  <Field int mDy>
		//   34   67:invokevirtual   #82  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int)>
					else
		//*  35   70:goto            118
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration);
		//   36   73:aload_1         
		//   37   74:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   38   77:aload_0         
		//   39   78:getfield        #40  <Field int mDx>
		//   40   81:aload_0         
		//   41   82:getfield        #42  <Field int mDy>
		//   42   85:aload_0         
		//   43   86:getfield        #44  <Field int mDuration>
		//   44   89:invokevirtual   #84  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int)>
				} else
		//*  45   92:goto            118
				{
					recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration, mInterpolator);
		//   46   95:aload_1         
		//   47   96:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   48   99:aload_0         
		//   49  100:getfield        #40  <Field int mDx>
		//   50  103:aload_0         
		//   51  104:getfield        #42  <Field int mDy>
		//   52  107:aload_0         
		//   53  108:getfield        #44  <Field int mDuration>
		//   54  111:aload_0         
		//   55  112:getfield        #46  <Field Interpolator mInterpolator>
		//   56  115:invokevirtual   #86  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int, Interpolator)>
				}
				mConsecutiveUpdates = mConsecutiveUpdates + 1;
		//   57  118:aload_0         
		//   58  119:aload_0         
		//   59  120:getfield        #38  <Field int mConsecutiveUpdates>
		//   60  123:iconst_1        
		//   61  124:iadd            
		//   62  125:putfield        #38  <Field int mConsecutiveUpdates>
				if(mConsecutiveUpdates > 10)
		//*  63  128:aload_0         
		//*  64  129:getfield        #38  <Field int mConsecutiveUpdates>
		//*  65  132:bipush          10
		//*  66  134:icmple          145
					Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
		//   67  137:ldc1            #88  <String "RecyclerView">
		//   68  139:ldc1            #90  <String "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary">
		//   69  141:invokestatic    #96  <Method int Log.e(String, String)>
		//   70  144:pop             
				mChanged = false;
		//   71  145:aload_0         
		//   72  146:iconst_0        
		//   73  147:putfield        #36  <Field boolean mChanged>
				return;
		//   74  150:return          
			} else
			{
				mConsecutiveUpdates = 0;
		//   75  151:aload_0         
		//   76  152:iconst_0        
		//   77  153:putfield        #38  <Field int mConsecutiveUpdates>
				return;
		//   78  156:return          
			}
		}

		public void setDuration(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDuration = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #44  <Field int mDuration>
		//    6   10:return          
		}

		public void setDx(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDx = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #40  <Field int mDx>
		//    6   10:return          
		}

		public void setDy(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDy = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #42  <Field int mDy>
		//    6   10:return          
		}

		public void setInterpolator(Interpolator interpolator)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mInterpolator = interpolator;
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:putfield        #46  <Field Interpolator mInterpolator>
		//    6   10:return          
		}

		public void update(int i, int j, int k, Interpolator interpolator)
		{
			mDx = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #40  <Field int mDx>
			mDy = j;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #42  <Field int mDy>
			mDuration = k;
		//    6   10:aload_0         
		//    7   11:iload_3         
		//    8   12:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//    9   15:aload_0         
		//   10   16:aload           4
		//   11   18:putfield        #46  <Field Interpolator mInterpolator>
			mChanged = true;
		//   12   21:aload_0         
		//   13   22:iconst_1        
		//   14   23:putfield        #36  <Field boolean mChanged>
		//   15   26:return          
		}

		public static final int UNDEFINED_DURATION = 0x80000000;
		private boolean mChanged;
		private int mConsecutiveUpdates;
		private int mDuration;
		private int mDx;
		private int mDy;
		private Interpolator mInterpolator;
		private int mJumpToPosition;

		public SmoothScroller.Action(int i, int j)
		{
			this(i, j, 0x80000000, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc1            #13  <Int 0x80000000>
		//    4    5:aconst_null     
		//    5    6:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    9:return          
		}

		public SmoothScroller.Action(int i, int j, int k)
		{
			this(i, j, k, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:aconst_null     
		//    5    5:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    8:return          
		}

		public SmoothScroller.Action(int i, int j, int k, Interpolator interpolator)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #32  <Method void Object()>
			mJumpToPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #34  <Field int mJumpToPosition>
			mChanged = false;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #36  <Field boolean mChanged>
			mConsecutiveUpdates = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #38  <Field int mConsecutiveUpdates>
			mDx = i;
		//   11   19:aload_0         
		//   12   20:iload_1         
		//   13   21:putfield        #40  <Field int mDx>
			mDy = j;
		//   14   24:aload_0         
		//   15   25:iload_2         
		//   16   26:putfield        #42  <Field int mDy>
			mDuration = k;
		//   17   29:aload_0         
		//   18   30:iload_3         
		//   19   31:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//   20   34:aload_0         
		//   21   35:aload           4
		//   22   37:putfield        #46  <Field Interpolator mInterpolator>
		//   23   40:return          
		}
	}

	public static interface SmoothScroller.ScrollVectorProvider
	{

		public abstract PointF computeScrollVectorForPosition(int i);
	}

	public static class State
	{

		void assertLayoutStep(int i)
		{
			if((mLayoutStep & i) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #45  <Field int mLayoutStep>
		//*   2    4:iload_1         
		//*   3    5:iand            
		//*   4    6:ifne            54
				throw new IllegalStateException((new StringBuilder()).append("Layout state should be one of ").append(Integer.toBinaryString(i)).append(" but it is ").append(Integer.toBinaryString(mLayoutStep)).toString());
		//    5    9:new             #66  <Class IllegalStateException>
		//    6   12:dup             
		//    7   13:new             #68  <Class StringBuilder>
		//    8   16:dup             
		//    9   17:invokespecial   #69  <Method void StringBuilder()>
		//   10   20:ldc1            #71  <String "Layout state should be one of ">
		//   11   22:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   12   25:iload_1         
		//   13   26:invokestatic    #81  <Method String Integer.toBinaryString(int)>
		//   14   29:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   15   32:ldc1            #83  <String " but it is ">
		//   16   34:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   17   37:aload_0         
		//   18   38:getfield        #45  <Field int mLayoutStep>
		//   19   41:invokestatic    #81  <Method String Integer.toBinaryString(int)>
		//   20   44:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   21   47:invokevirtual   #87  <Method String StringBuilder.toString()>
		//   22   50:invokespecial   #90  <Method void IllegalStateException(String)>
		//   23   53:athrow          
			else
				return;
		//   24   54:return          
		}

		public boolean didStructureChange()
		{
			return mStructureChanged;
		//    0    0:aload_0         
		//    1    1:getfield        #49  <Field boolean mStructureChanged>
		//    2    4:ireturn         
		}

		public Object get(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #96  <Field SparseArray mData>
		//*   2    4:ifnonnull       9
				return ((Object) (null));
		//    3    7:aconst_null     
		//    4    8:areturn         
			else
				return mData.get(i);
		//    5    9:aload_0         
		//    6   10:getfield        #96  <Field SparseArray mData>
		//    7   13:iload_1         
		//    8   14:invokevirtual   #100 <Method Object SparseArray.get(int)>
		//    9   17:areturn         
		}

		public int getItemCount()
		{
			if(mInPreLayout)
		//*   0    0:aload_0         
		//*   1    1:getfield        #51  <Field boolean mInPreLayout>
		//*   2    4:ifeq            17
				return mPreviousLayoutItemCount - mDeletedInvisibleItemCountSincePreviousLayout;
		//    3    7:aload_0         
		//    4    8:getfield        #41  <Field int mPreviousLayoutItemCount>
		//    5   11:aload_0         
		//    6   12:getfield        #43  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//    7   15:isub            
		//    8   16:ireturn         
			else
				return mItemCount;
		//    9   17:aload_0         
		//   10   18:getfield        #47  <Field int mItemCount>
		//   11   21:ireturn         
		}

		public int getTargetScrollPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #39  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean hasTargetScrollPosition()
		{
			return mTargetPosition != -1;
		//    0    0:aload_0         
		//    1    1:getfield        #39  <Field int mTargetPosition>
		//    2    4:iconst_m1       
		//    3    5:icmpeq          10
		//    4    8:iconst_1        
		//    5    9:ireturn         
		//    6   10:iconst_0        
		//    7   11:ireturn         
		}

		public boolean isMeasuring()
		{
			return mIsMeasuring;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field boolean mIsMeasuring>
		//    2    4:ireturn         
		}

		public boolean isPreLayout()
		{
			return mInPreLayout;
		//    0    0:aload_0         
		//    1    1:getfield        #51  <Field boolean mInPreLayout>
		//    2    4:ireturn         
		}

		void prepareForNestedPrefetch(Adapter adapter)
		{
			mLayoutStep = 1;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #45  <Field int mLayoutStep>
			mItemCount = adapter.getItemCount();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #114 <Method int RecyclerView$Adapter.getItemCount()>
		//    6   10:putfield        #47  <Field int mItemCount>
			mStructureChanged = false;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #49  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   10   18:aload_0         
		//   11   19:iconst_0        
		//   12   20:putfield        #51  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   13   23:aload_0         
		//   14   24:iconst_0        
		//   15   25:putfield        #53  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   16   28:aload_0         
		//   17   29:iconst_0        
		//   18   30:putfield        #55  <Field boolean mIsMeasuring>
		//   19   33:return          
		}

		public void put(int i, Object obj)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #96  <Field SparseArray mData>
		//*   2    4:ifnonnull       18
				mData = new SparseArray();
		//    3    7:aload_0         
		//    4    8:new             #98  <Class SparseArray>
		//    5   11:dup             
		//    6   12:invokespecial   #117 <Method void SparseArray()>
		//    7   15:putfield        #96  <Field SparseArray mData>
			mData.put(i, obj);
		//    8   18:aload_0         
		//    9   19:getfield        #96  <Field SparseArray mData>
		//   10   22:iload_1         
		//   11   23:aload_2         
		//   12   24:invokevirtual   #119 <Method void SparseArray.put(int, Object)>
		//   13   27:return          
		}

		public void remove(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #96  <Field SparseArray mData>
		//*   2    4:ifnonnull       8
			{
				return;
		//    3    7:return          
			} else
			{
				mData.remove(i);
		//    4    8:aload_0         
		//    5    9:getfield        #96  <Field SparseArray mData>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #122 <Method void SparseArray.remove(int)>
				return;
		//    8   16:return          
			}
		}

		State reset()
		{
			mTargetPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #39  <Field int mTargetPosition>
			if(mData != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #96  <Field SparseArray mData>
		//*   5    9:ifnull          19
				mData.clear();
		//    6   12:aload_0         
		//    7   13:getfield        #96  <Field SparseArray mData>
		//    8   16:invokevirtual   #127 <Method void SparseArray.clear()>
			mItemCount = 0;
		//    9   19:aload_0         
		//   10   20:iconst_0        
		//   11   21:putfield        #47  <Field int mItemCount>
			mStructureChanged = false;
		//   12   24:aload_0         
		//   13   25:iconst_0        
		//   14   26:putfield        #49  <Field boolean mStructureChanged>
			mIsMeasuring = false;
		//   15   29:aload_0         
		//   16   30:iconst_0        
		//   17   31:putfield        #55  <Field boolean mIsMeasuring>
			return this;
		//   18   34:aload_0         
		//   19   35:areturn         
		}

		public String toString()
		{
			return (new StringBuilder()).append("State{mTargetPosition=").append(mTargetPosition).append(", mData=").append(((Object) (mData))).append(", mItemCount=").append(mItemCount).append(", mPreviousLayoutItemCount=").append(mPreviousLayoutItemCount).append(", mDeletedInvisibleItemCountSincePreviousLayout=").append(mDeletedInvisibleItemCountSincePreviousLayout).append(", mStructureChanged=").append(mStructureChanged).append(", mInPreLayout=").append(mInPreLayout).append(", mRunSimpleAnimations=").append(mRunSimpleAnimations).append(", mRunPredictiveAnimations=").append(mRunPredictiveAnimations).append('}').toString();
		//    0    0:new             #68  <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #69  <Method void StringBuilder()>
		//    3    7:ldc1            #129 <String "State{mTargetPosition=">
		//    4    9:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//    5   12:aload_0         
		//    6   13:getfield        #39  <Field int mTargetPosition>
		//    7   16:invokevirtual   #132 <Method StringBuilder StringBuilder.append(int)>
		//    8   19:ldc1            #134 <String ", mData=">
		//    9   21:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   10   24:aload_0         
		//   11   25:getfield        #96  <Field SparseArray mData>
		//   12   28:invokevirtual   #137 <Method StringBuilder StringBuilder.append(Object)>
		//   13   31:ldc1            #139 <String ", mItemCount=">
		//   14   33:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   15   36:aload_0         
		//   16   37:getfield        #47  <Field int mItemCount>
		//   17   40:invokevirtual   #132 <Method StringBuilder StringBuilder.append(int)>
		//   18   43:ldc1            #141 <String ", mPreviousLayoutItemCount=">
		//   19   45:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   20   48:aload_0         
		//   21   49:getfield        #41  <Field int mPreviousLayoutItemCount>
		//   22   52:invokevirtual   #132 <Method StringBuilder StringBuilder.append(int)>
		//   23   55:ldc1            #143 <String ", mDeletedInvisibleItemCountSincePreviousLayout=">
		//   24   57:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   25   60:aload_0         
		//   26   61:getfield        #43  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//   27   64:invokevirtual   #132 <Method StringBuilder StringBuilder.append(int)>
		//   28   67:ldc1            #145 <String ", mStructureChanged=">
		//   29   69:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   30   72:aload_0         
		//   31   73:getfield        #49  <Field boolean mStructureChanged>
		//   32   76:invokevirtual   #148 <Method StringBuilder StringBuilder.append(boolean)>
		//   33   79:ldc1            #150 <String ", mInPreLayout=">
		//   34   81:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   35   84:aload_0         
		//   36   85:getfield        #51  <Field boolean mInPreLayout>
		//   37   88:invokevirtual   #148 <Method StringBuilder StringBuilder.append(boolean)>
		//   38   91:ldc1            #152 <String ", mRunSimpleAnimations=">
		//   39   93:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   40   96:aload_0         
		//   41   97:getfield        #57  <Field boolean mRunSimpleAnimations>
		//   42  100:invokevirtual   #148 <Method StringBuilder StringBuilder.append(boolean)>
		//   43  103:ldc1            #154 <String ", mRunPredictiveAnimations=">
		//   44  105:invokevirtual   #75  <Method StringBuilder StringBuilder.append(String)>
		//   45  108:aload_0         
		//   46  109:getfield        #59  <Field boolean mRunPredictiveAnimations>
		//   47  112:invokevirtual   #148 <Method StringBuilder StringBuilder.append(boolean)>
		//   48  115:bipush          125
		//   49  117:invokevirtual   #157 <Method StringBuilder StringBuilder.append(char)>
		//   50  120:invokevirtual   #87  <Method String StringBuilder.toString()>
		//   51  123:areturn         
		}

		public boolean willRunPredictiveAnimations()
		{
			return mRunPredictiveAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #59  <Field boolean mRunPredictiveAnimations>
		//    2    4:ireturn         
		}

		public boolean willRunSimpleAnimations()
		{
			return mRunSimpleAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #57  <Field boolean mRunSimpleAnimations>
		//    2    4:ireturn         
		}

		static final int STEP_ANIMATIONS = 4;
		static final int STEP_LAYOUT = 2;
		static final int STEP_START = 1;
		private SparseArray mData;
		int mDeletedInvisibleItemCountSincePreviousLayout;
		long mFocusedItemId;
		int mFocusedItemPosition;
		int mFocusedSubChildId;
		boolean mInPreLayout;
		boolean mIsMeasuring;
		int mItemCount;
		int mLayoutStep;
		int mPreviousLayoutItemCount;
		boolean mRunPredictiveAnimations;
		boolean mRunSimpleAnimations;
		boolean mStructureChanged;
		private int mTargetPosition;
		boolean mTrackOldChangeHolders;


/*
		static int access$1102(State state, int i)
		{
			state.mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #39  <Field int mTargetPosition>
			return i;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/

		public State()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #37  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #39  <Field int mTargetPosition>
			mPreviousLayoutItemCount = 0;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #41  <Field int mPreviousLayoutItemCount>
			mDeletedInvisibleItemCountSincePreviousLayout = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #43  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
			mLayoutStep = 1;
		//   11   19:aload_0         
		//   12   20:iconst_1        
		//   13   21:putfield        #45  <Field int mLayoutStep>
			mItemCount = 0;
		//   14   24:aload_0         
		//   15   25:iconst_0        
		//   16   26:putfield        #47  <Field int mItemCount>
			mStructureChanged = false;
		//   17   29:aload_0         
		//   18   30:iconst_0        
		//   19   31:putfield        #49  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   20   34:aload_0         
		//   21   35:iconst_0        
		//   22   36:putfield        #51  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   23   39:aload_0         
		//   24   40:iconst_0        
		//   25   41:putfield        #53  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   26   44:aload_0         
		//   27   45:iconst_0        
		//   28   46:putfield        #55  <Field boolean mIsMeasuring>
			mRunSimpleAnimations = false;
		//   29   49:aload_0         
		//   30   50:iconst_0        
		//   31   51:putfield        #57  <Field boolean mRunSimpleAnimations>
			mRunPredictiveAnimations = false;
		//   32   54:aload_0         
		//   33   55:iconst_0        
		//   34   56:putfield        #59  <Field boolean mRunPredictiveAnimations>
		//   35   59:return          
		}
	}

	public static abstract class ViewCacheExtension
	{

		public abstract View getViewForPositionAndType(Recycler recycler, int i, int j);

		public ViewCacheExtension()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	class ViewFlinger
		implements Runnable
	{

		private int computeScrollDuration(int i, int j, int k, int l)
		{
			int i1 = Math.abs(i);
		//    0    0:iload_1         
		//    1    1:invokestatic    #57  <Method int Math.abs(int)>
		//    2    4:istore          9
			int j1 = Math.abs(j);
		//    3    6:iload_2         
		//    4    7:invokestatic    #57  <Method int Math.abs(int)>
		//    5   10:istore          10
			boolean flag;
			if(i1 > j1)
		//*   6   12:iload           9
		//*   7   14:iload           10
		//*   8   16:icmple          25
				flag = true;
		//    9   19:iconst_1        
		//   10   20:istore          8
			else
		//*  11   22:goto            28
				flag = false;
		//   12   25:iconst_0        
		//   13   26:istore          8
			k = (int)Math.sqrt(k * k + l * l);
		//   14   28:iload_3         
		//   15   29:iload_3         
		//   16   30:imul            
		//   17   31:iload           4
		//   18   33:iload           4
		//   19   35:imul            
		//   20   36:iadd            
		//   21   37:i2d             
		//   22   38:invokestatic    #61  <Method double Math.sqrt(double)>
		//   23   41:d2i             
		//   24   42:istore_3        
			j = (int)Math.sqrt(i * i + j * j);
		//   25   43:iload_1         
		//   26   44:iload_1         
		//   27   45:imul            
		//   28   46:iload_2         
		//   29   47:iload_2         
		//   30   48:imul            
		//   31   49:iadd            
		//   32   50:i2d             
		//   33   51:invokestatic    #61  <Method double Math.sqrt(double)>
		//   34   54:d2i             
		//   35   55:istore_2        
			if(flag)
		//*  36   56:iload           8
		//*  37   58:ifeq            72
				i = getWidth();
		//   38   61:aload_0         
		//   39   62:getfield        #25  <Field RecyclerView this$0>
		//   40   65:invokevirtual   #65  <Method int RecyclerView.getWidth()>
		//   41   68:istore_1        
			else
		//*  42   69:goto            80
				i = getHeight();
		//   43   72:aload_0         
		//   44   73:getfield        #25  <Field RecyclerView this$0>
		//   45   76:invokevirtual   #68  <Method int RecyclerView.getHeight()>
		//   46   79:istore_1        
			l = i / 2;
		//   47   80:iload_1         
		//   48   81:iconst_2        
		//   49   82:idiv            
		//   50   83:istore          4
			float f2 = Math.min(1.0F, ((float)j * 1.0F) / (float)i);
		//   51   85:fconst_1        
		//   52   86:iload_2         
		//   53   87:i2f             
		//   54   88:fconst_1        
		//   55   89:fmul            
		//   56   90:iload_1         
		//   57   91:i2f             
		//   58   92:fdiv            
		//   59   93:invokestatic    #72  <Method float Math.min(float, float)>
		//   60   96:fstore          7
			float f = l;
		//   61   98:iload           4
		//   62  100:i2f             
		//   63  101:fstore          5
			float f1 = l;
		//   64  103:iload           4
		//   65  105:i2f             
		//   66  106:fstore          6
			f2 = distanceInfluenceForSnapDuration(f2);
		//   67  108:aload_0         
		//   68  109:fload           7
		//   69  111:invokespecial   #76  <Method float distanceInfluenceForSnapDuration(float)>
		//   70  114:fstore          7
			if(k > 0)
		//*  71  116:iload_3         
		//*  72  117:ifle            146
			{
				i = Math.round(Math.abs((f + f1 * f2) / (float)k) * 1000F) * 4;
		//   73  120:fload           5
		//   74  122:fload           6
		//   75  124:fload           7
		//   76  126:fmul            
		//   77  127:fadd            
		//   78  128:iload_3         
		//   79  129:i2f             
		//   80  130:fdiv            
		//   81  131:invokestatic    #78  <Method float Math.abs(float)>
		//   82  134:ldc1            #79  <Float 1000F>
		//   83  136:fmul            
		//   84  137:invokestatic    #83  <Method int Math.round(float)>
		//   85  140:iconst_4        
		//   86  141:imul            
		//   87  142:istore_1        
			} else
		//*  88  143:goto            172
			{
				if(flag)
		//*  89  146:iload           8
		//*  90  148:ifeq            157
					j = i1;
		//   91  151:iload           9
		//   92  153:istore_2        
				else
		//*  93  154:goto            160
					j = j1;
		//   94  157:iload           10
		//   95  159:istore_2        
				i = (int)(((float)j / (float)i + 1.0F) * 300F);
		//   96  160:iload_2         
		//   97  161:i2f             
		//   98  162:iload_1         
		//   99  163:i2f             
		//  100  164:fdiv            
		//  101  165:fconst_1        
		//  102  166:fadd            
		//  103  167:ldc1            #84  <Float 300F>
		//  104  169:fmul            
		//  105  170:f2i             
		//  106  171:istore_1        
			}
			return Math.min(i, 2000);
		//  107  172:iload_1         
		//  108  173:sipush          2000
		//  109  176:invokestatic    #87  <Method int Math.min(int, int)>
		//  110  179:ireturn         
		}

		private void disableRunOnAnimationRequests()
		{
			mReSchedulePostAnimationCallback = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mEatRunOnAnimationRequest = true;
		//    3    5:aload_0         
		//    4    6:iconst_1        
		//    5    7:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//    6   10:return          
		}

		private float distanceInfluenceForSnapDuration(float f)
		{
			return (float)Math.sin((float)((double)(f - 0.5F) * 0.4712389167638204D));
		//    0    0:fload_1         
		//    1    1:ldc1            #89  <Float 0.5F>
		//    2    3:fsub            
		//    3    4:f2d             
		//    4    5:ldc2w           #90  <Double 0.4712389167638204D>
		//    5    8:dmul            
		//    6    9:d2f             
		//    7   10:f2d             
		//    8   11:invokestatic    #94  <Method double Math.sin(double)>
		//    9   14:d2f             
		//   10   15:freturn         
		}

		private void enableRunOnAnimationRequests()
		{
			mEatRunOnAnimationRequest = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			if(mReSchedulePostAnimationCallback)
		//*   3    5:aload_0         
		//*   4    6:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//*   5    9:ifeq            16
				postOnAnimation();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #98  <Method void postOnAnimation()>
		//    8   16:return          
		}

		public void fling(int i, int j)
		{
			setScrollState(2);
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:iconst_2        
		//    3    5:invokevirtual   #104 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #106 <Field int mLastFlingY>
			mLastFlingX = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #108 <Field int mLastFlingX>
			mScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
		//   10   18:aload_0         
		//   11   19:getfield        #48  <Field OverScroller mScroller>
		//   12   22:iconst_0        
		//   13   23:iconst_0        
		//   14   24:iload_1         
		//   15   25:iload_2         
		//   16   26:ldc1            #109 <Int 0x80000000>
		//   17   28:ldc1            #110 <Int 0x7fffffff>
		//   18   30:ldc1            #109 <Int 0x80000000>
		//   19   32:ldc1            #110 <Int 0x7fffffff>
		//   20   34:invokevirtual   #113 <Method void OverScroller.fling(int, int, int, int, int, int, int, int)>
			postOnAnimation();
		//   21   37:aload_0         
		//   22   38:invokevirtual   #98  <Method void postOnAnimation()>
		//   23   41:return          
		}

		void postOnAnimation()
		{
			if(mEatRunOnAnimationRequest)
		//*   0    0:aload_0         
		//*   1    1:getfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//*   2    4:ifeq            13
			{
				mReSchedulePostAnimationCallback = true;
		//    3    7:aload_0         
		//    4    8:iconst_1        
		//    5    9:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
				return;
		//    6   12:return          
			} else
			{
				removeCallbacks(((Runnable) (this)));
		//    7   13:aload_0         
		//    8   14:getfield        #25  <Field RecyclerView this$0>
		//    9   17:aload_0         
		//   10   18:invokevirtual   #117 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//   11   21:pop             
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), ((Runnable) (this)));
		//   12   22:aload_0         
		//   13   23:getfield        #25  <Field RecyclerView this$0>
		//   14   26:aload_0         
		//   15   27:invokestatic    #122 <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   30:return          
			}
		}

		public void run()
		{
			if(mLayout == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #25  <Field RecyclerView this$0>
		//*   2    4:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnonnull       15
			{
				stop();
		//    4   10:aload_0         
		//    5   11:invokevirtual   #130 <Method void stop()>
				return;
		//    6   14:return          
			}
			disableRunOnAnimationRequests();
		//    7   15:aload_0         
		//    8   16:invokespecial   #132 <Method void disableRunOnAnimationRequests()>
			consumePendingUpdateOperations();
		//    9   19:aload_0         
		//   10   20:getfield        #25  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #135 <Method void RecyclerView.consumePendingUpdateOperations()>
			OverScroller overscroller = mScroller;
		//   12   26:aload_0         
		//   13   27:getfield        #48  <Field OverScroller mScroller>
		//   14   30:astore          13
			SmoothScroller smoothscroller = mLayout.mSmoothScroller;
		//   15   32:aload_0         
		//   16   33:getfield        #25  <Field RecyclerView this$0>
		//   17   36:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   18   39:getfield        #141 <Field RecyclerView$SmoothScroller RecyclerView$LayoutManager.mSmoothScroller>
		//   19   42:astore          14
			if(overscroller.computeScrollOffset())
		//*  20   44:aload           13
		//*  21   46:invokevirtual   #145 <Method boolean OverScroller.computeScrollOffset()>
		//*  22   49:ifeq            804
			{
				int i3 = overscroller.getCurrX();
		//   23   52:aload           13
		//   24   54:invokevirtual   #148 <Method int OverScroller.getCurrX()>
		//   25   57:istore          11
				int j3 = overscroller.getCurrY();
		//   26   59:aload           13
		//   27   61:invokevirtual   #151 <Method int OverScroller.getCurrY()>
		//   28   64:istore          12
				int k2 = i3 - mLastFlingX;
		//   29   66:iload           11
		//   30   68:aload_0         
		//   31   69:getfield        #108 <Field int mLastFlingX>
		//   32   72:isub            
		//   33   73:istore          9
				int l2 = j3 - mLastFlingY;
		//   34   75:iload           12
		//   35   77:aload_0         
		//   36   78:getfield        #106 <Field int mLastFlingY>
		//   37   81:isub            
		//   38   82:istore          10
				int k1 = 0;
		//   39   84:iconst_0        
		//   40   85:istore          5
				int i = 0;
		//   41   87:iconst_0        
		//   42   88:istore_1        
				int l1 = 0;
		//   43   89:iconst_0        
		//   44   90:istore          6
				int l = 0;
		//   45   92:iconst_0        
		//   46   93:istore_3        
				mLastFlingX = i3;
		//   47   94:aload_0         
		//   48   95:iload           11
		//   49   97:putfield        #108 <Field int mLastFlingX>
				mLastFlingY = j3;
		//   50  100:aload_0         
		//   51  101:iload           12
		//   52  103:putfield        #106 <Field int mLastFlingY>
				int i2 = 0;
		//   53  106:iconst_0        
		//   54  107:istore          7
				int j = 0;
		//   55  109:iconst_0        
		//   56  110:istore_2        
				int j2 = 0;
		//   57  111:iconst_0        
		//   58  112:istore          8
				int j1 = 0;
		//   59  114:iconst_0        
		//   60  115:istore          4
				if(mAdapter != null)
		//*  61  117:aload_0         
		//*  62  118:getfield        #25  <Field RecyclerView this$0>
		//*  63  121:getfield        #155 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  64  124:ifnull          420
				{
					eatRequestLayout();
		//   65  127:aload_0         
		//   66  128:getfield        #25  <Field RecyclerView this$0>
		//   67  131:invokevirtual   #158 <Method void RecyclerView.eatRequestLayout()>
					onEnterLayoutOrScroll();
		//   68  134:aload_0         
		//   69  135:getfield        #25  <Field RecyclerView this$0>
		//   70  138:invokevirtual   #161 <Method void RecyclerView.onEnterLayoutOrScroll()>
					TraceCompat.beginSection("RV Scroll");
		//   71  141:ldc1            #163 <String "RV Scroll">
		//   72  143:invokestatic    #169 <Method void TraceCompat.beginSection(String)>
					if(k2 != 0)
		//*  73  146:iload           9
		//*  74  148:ifeq            183
					{
						i = mLayout.scrollHorizontallyBy(k2, mRecycler, mState);
		//   75  151:aload_0         
		//   76  152:getfield        #25  <Field RecyclerView this$0>
		//   77  155:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   78  158:iload           9
		//   79  160:aload_0         
		//   80  161:getfield        #25  <Field RecyclerView this$0>
		//   81  164:getfield        #173 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   82  167:aload_0         
		//   83  168:getfield        #25  <Field RecyclerView this$0>
		//   84  171:getfield        #177 <Field RecyclerView$State RecyclerView.mState>
		//   85  174:invokevirtual   #181 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//   86  177:istore_1        
						j = k2 - i;
		//   87  178:iload           9
		//   88  180:iload_1         
		//   89  181:isub            
		//   90  182:istore_2        
					}
					if(l2 != 0)
		//*  91  183:iload           10
		//*  92  185:ifeq            221
					{
						l = mLayout.scrollVerticallyBy(l2, mRecycler, mState);
		//   93  188:aload_0         
		//   94  189:getfield        #25  <Field RecyclerView this$0>
		//   95  192:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   96  195:iload           10
		//   97  197:aload_0         
		//   98  198:getfield        #25  <Field RecyclerView this$0>
		//   99  201:getfield        #173 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//  100  204:aload_0         
		//  101  205:getfield        #25  <Field RecyclerView this$0>
		//  102  208:getfield        #177 <Field RecyclerView$State RecyclerView.mState>
		//  103  211:invokevirtual   #184 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//  104  214:istore_3        
						j1 = l2 - l;
		//  105  215:iload           10
		//  106  217:iload_3         
		//  107  218:isub            
		//  108  219:istore          4
					}
					TraceCompat.endSection();
		//  109  221:invokestatic    #187 <Method void TraceCompat.endSection()>
					repositionShadowingViews();
		//  110  224:aload_0         
		//  111  225:getfield        #25  <Field RecyclerView this$0>
		//  112  228:invokevirtual   #190 <Method void RecyclerView.repositionShadowingViews()>
					onExitLayoutOrScroll();
		//  113  231:aload_0         
		//  114  232:getfield        #25  <Field RecyclerView this$0>
		//  115  235:invokevirtual   #193 <Method void RecyclerView.onExitLayoutOrScroll()>
					resumeRequestLayout(false);
		//  116  238:aload_0         
		//  117  239:getfield        #25  <Field RecyclerView this$0>
		//  118  242:iconst_0        
		//  119  243:invokevirtual   #197 <Method void RecyclerView.resumeRequestLayout(boolean)>
					k1 = i;
		//  120  246:iload_1         
		//  121  247:istore          5
					l1 = l;
		//  122  249:iload_3         
		//  123  250:istore          6
					i2 = j;
		//  124  252:iload_2         
		//  125  253:istore          7
					j2 = j1;
		//  126  255:iload           4
		//  127  257:istore          8
					if(smoothscroller != null)
		//* 128  259:aload           14
		//* 129  261:ifnull          420
					{
						k1 = i;
		//  130  264:iload_1         
		//  131  265:istore          5
						l1 = l;
		//  132  267:iload_3         
		//  133  268:istore          6
						i2 = j;
		//  134  270:iload_2         
		//  135  271:istore          7
						j2 = j1;
		//  136  273:iload           4
		//  137  275:istore          8
						if(!smoothscroller.isPendingInitialRun())
		//* 138  277:aload           14
		//* 139  279:invokevirtual   #202 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 140  282:ifne            420
						{
							k1 = i;
		//  141  285:iload_1         
		//  142  286:istore          5
							l1 = l;
		//  143  288:iload_3         
		//  144  289:istore          6
							i2 = j;
		//  145  291:iload_2         
		//  146  292:istore          7
							j2 = j1;
		//  147  294:iload           4
		//  148  296:istore          8
							if(smoothscroller.isRunning())
		//* 149  298:aload           14
		//* 150  300:invokevirtual   #205 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 151  303:ifeq            420
							{
								k1 = mState.getItemCount();
		//  152  306:aload_0         
		//  153  307:getfield        #25  <Field RecyclerView this$0>
		//  154  310:getfield        #177 <Field RecyclerView$State RecyclerView.mState>
		//  155  313:invokevirtual   #210 <Method int RecyclerView$State.getItemCount()>
		//  156  316:istore          5
								if(k1 == 0)
		//* 157  318:iload           5
		//* 158  320:ifne            344
								{
									smoothscroller.stop();
		//  159  323:aload           14
		//  160  325:invokevirtual   #211 <Method void RecyclerView$SmoothScroller.stop()>
									k1 = i;
		//  161  328:iload_1         
		//  162  329:istore          5
									l1 = l;
		//  163  331:iload_3         
		//  164  332:istore          6
									i2 = j;
		//  165  334:iload_2         
		//  166  335:istore          7
									j2 = j1;
		//  167  337:iload           4
		//  168  339:istore          8
								} else
		//* 169  341:goto            420
								if(smoothscroller.getTargetPosition() >= k1)
		//* 170  344:aload           14
		//* 171  346:invokevirtual   #214 <Method int RecyclerView$SmoothScroller.getTargetPosition()>
		//* 172  349:iload           5
		//* 173  351:icmplt          393
								{
									smoothscroller.setTargetPosition(k1 - 1);
		//  174  354:aload           14
		//  175  356:iload           5
		//  176  358:iconst_1        
		//  177  359:isub            
		//  178  360:invokevirtual   #217 <Method void RecyclerView$SmoothScroller.setTargetPosition(int)>
									smoothscroller.onAnimation(k2 - j, l2 - j1);
		//  179  363:aload           14
		//  180  365:iload           9
		//  181  367:iload_2         
		//  182  368:isub            
		//  183  369:iload           10
		//  184  371:iload           4
		//  185  373:isub            
		//  186  374:invokestatic    #221 <Method void RecyclerView$SmoothScroller.access$400(RecyclerView$SmoothScroller, int, int)>
									k1 = i;
		//  187  377:iload_1         
		//  188  378:istore          5
									l1 = l;
		//  189  380:iload_3         
		//  190  381:istore          6
									i2 = j;
		//  191  383:iload_2         
		//  192  384:istore          7
									j2 = j1;
		//  193  386:iload           4
		//  194  388:istore          8
								} else
		//* 195  390:goto            420
								{
									smoothscroller.onAnimation(k2 - j, l2 - j1);
		//  196  393:aload           14
		//  197  395:iload           9
		//  198  397:iload_2         
		//  199  398:isub            
		//  200  399:iload           10
		//  201  401:iload           4
		//  202  403:isub            
		//  203  404:invokestatic    #221 <Method void RecyclerView$SmoothScroller.access$400(RecyclerView$SmoothScroller, int, int)>
									j2 = j1;
		//  204  407:iload           4
		//  205  409:istore          8
									i2 = j;
		//  206  411:iload_2         
		//  207  412:istore          7
									l1 = l;
		//  208  414:iload_3         
		//  209  415:istore          6
									k1 = i;
		//  210  417:iload_1         
		//  211  418:istore          5
								}
							}
						}
					}
				}
				if(!mItemDecorations.isEmpty())
		//* 212  420:aload_0         
		//* 213  421:getfield        #25  <Field RecyclerView this$0>
		//* 214  424:getfield        #225 <Field ArrayList RecyclerView.mItemDecorations>
		//* 215  427:invokevirtual   #230 <Method boolean ArrayList.isEmpty()>
		//* 216  430:ifne            440
					invalidate();
		//  217  433:aload_0         
		//  218  434:getfield        #25  <Field RecyclerView this$0>
		//  219  437:invokevirtual   #233 <Method void RecyclerView.invalidate()>
				if(getOverScrollMode() != 2)
		//* 220  440:aload_0         
		//* 221  441:getfield        #25  <Field RecyclerView this$0>
		//* 222  444:invokevirtual   #236 <Method int RecyclerView.getOverScrollMode()>
		//* 223  447:iconst_2        
		//* 224  448:icmpeq          462
					considerReleasingGlowsOnScroll(k2, l2);
		//  225  451:aload_0         
		//  226  452:getfield        #25  <Field RecyclerView this$0>
		//  227  455:iload           9
		//  228  457:iload           10
		//  229  459:invokevirtual   #239 <Method void RecyclerView.considerReleasingGlowsOnScroll(int, int)>
				if(i2 != 0 || j2 != 0)
		//* 230  462:iload           7
		//* 231  464:ifne            472
		//* 232  467:iload           8
		//* 233  469:ifeq            606
				{
					int i1 = (int)overscroller.getCurrVelocity();
		//  234  472:aload           13
		//  235  474:invokevirtual   #243 <Method float OverScroller.getCurrVelocity()>
		//  236  477:f2i             
		//  237  478:istore_3        
					i = 0;
		//  238  479:iconst_0        
		//  239  480:istore_1        
					if(i2 != i3)
		//* 240  481:iload           7
		//* 241  483:iload           11
		//* 242  485:icmpeq          511
						if(i2 < 0)
		//* 243  488:iload           7
		//* 244  490:ifge            499
							i = -i1;
		//  245  493:iload_3         
		//  246  494:ineg            
		//  247  495:istore_1        
						else
		//* 248  496:goto            511
						if(i2 > 0)
		//* 249  499:iload           7
		//* 250  501:ifle            509
							i = i1;
		//  251  504:iload_3         
		//  252  505:istore_1        
						else
		//* 253  506:goto            511
							i = 0;
		//  254  509:iconst_0        
		//  255  510:istore_1        
					int k = 0;
		//  256  511:iconst_0        
		//  257  512:istore_2        
					if(j2 != j3)
		//* 258  513:iload           8
		//* 259  515:iload           12
		//* 260  517:icmpeq          543
						if(j2 < 0)
		//* 261  520:iload           8
		//* 262  522:ifge            531
							k = -i1;
		//  263  525:iload_3         
		//  264  526:ineg            
		//  265  527:istore_2        
						else
		//* 266  528:goto            543
						if(j2 > 0)
		//* 267  531:iload           8
		//* 268  533:ifle            541
							k = i1;
		//  269  536:iload_3         
		//  270  537:istore_2        
						else
		//* 271  538:goto            543
							k = 0;
		//  272  541:iconst_0        
		//  273  542:istore_2        
					if(getOverScrollMode() != 2)
		//* 274  543:aload_0         
		//* 275  544:getfield        #25  <Field RecyclerView this$0>
		//* 276  547:invokevirtual   #236 <Method int RecyclerView.getOverScrollMode()>
		//* 277  550:iconst_2        
		//* 278  551:icmpeq          563
						absorbGlows(i, k);
		//  279  554:aload_0         
		//  280  555:getfield        #25  <Field RecyclerView this$0>
		//  281  558:iload_1         
		//  282  559:iload_2         
		//  283  560:invokevirtual   #246 <Method void RecyclerView.absorbGlows(int, int)>
					if((i != 0 || i2 == i3 || overscroller.getFinalX() == 0) && (k != 0 || j2 == j3 || overscroller.getFinalY() == 0))
		//* 284  563:iload_1         
		//* 285  564:ifne            582
		//* 286  567:iload           7
		//* 287  569:iload           11
		//* 288  571:icmpeq          582
		//* 289  574:aload           13
		//* 290  576:invokevirtual   #249 <Method int OverScroller.getFinalX()>
		//* 291  579:ifne            606
		//* 292  582:iload_2         
		//* 293  583:ifne            601
		//* 294  586:iload           8
		//* 295  588:iload           12
		//* 296  590:icmpeq          601
		//* 297  593:aload           13
		//* 298  595:invokevirtual   #252 <Method int OverScroller.getFinalY()>
		//* 299  598:ifne            606
						overscroller.abortAnimation();
		//  300  601:aload           13
		//  301  603:invokevirtual   #255 <Method void OverScroller.abortAnimation()>
				}
				if(k1 != 0 || l1 != 0)
		//* 302  606:iload           5
		//* 303  608:ifne            616
		//* 304  611:iload           6
		//* 305  613:ifeq            627
					dispatchOnScrolled(k1, l1);
		//  306  616:aload_0         
		//  307  617:getfield        #25  <Field RecyclerView this$0>
		//  308  620:iload           5
		//  309  622:iload           6
		//  310  624:invokevirtual   #258 <Method void RecyclerView.dispatchOnScrolled(int, int)>
				if(!awakenScrollBars())
		//* 311  627:aload_0         
		//* 312  628:getfield        #25  <Field RecyclerView this$0>
		//* 313  631:invokestatic    #262 <Method boolean RecyclerView.access$500(RecyclerView)>
		//* 314  634:ifne            644
					invalidate();
		//  315  637:aload_0         
		//  316  638:getfield        #25  <Field RecyclerView this$0>
		//  317  641:invokevirtual   #233 <Method void RecyclerView.invalidate()>
				if(l2 != 0 && mLayout.canScrollVertically() && l1 == l2)
		//* 318  644:iload           10
		//* 319  646:ifeq            674
		//* 320  649:aload_0         
		//* 321  650:getfield        #25  <Field RecyclerView this$0>
		//* 322  653:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 323  656:invokevirtual   #265 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
		//* 324  659:ifeq            674
		//* 325  662:iload           6
		//* 326  664:iload           10
		//* 327  666:icmpne          674
					i = 1;
		//  328  669:iconst_1        
		//  329  670:istore_1        
				else
		//* 330  671:goto            676
					i = 0;
		//  331  674:iconst_0        
		//  332  675:istore_1        
				boolean flag1;
				if(k2 != 0 && mLayout.canScrollHorizontally() && k1 == k2)
		//* 333  676:iload           9
		//* 334  678:ifeq            706
		//* 335  681:aload_0         
		//* 336  682:getfield        #25  <Field RecyclerView this$0>
		//* 337  685:getfield        #127 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 338  688:invokevirtual   #268 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
		//* 339  691:ifeq            706
		//* 340  694:iload           5
		//* 341  696:iload           9
		//* 342  698:icmpne          706
					flag1 = true;
		//  343  701:iconst_1        
		//  344  702:istore_2        
				else
		//* 345  703:goto            708
					flag1 = false;
		//  346  706:iconst_0        
		//  347  707:istore_2        
				boolean flag;
				if(k2 == 0 && l2 == 0 || flag1 || i)
		//* 348  708:iload           9
		//* 349  710:ifne            718
		//* 350  713:iload           10
		//* 351  715:ifeq            726
		//* 352  718:iload_2         
		//* 353  719:ifne            726
		//* 354  722:iload_1         
		//* 355  723:ifeq            731
					flag = true;
		//  356  726:iconst_1        
		//  357  727:istore_1        
				else
		//* 358  728:goto            733
					flag = false;
		//  359  731:iconst_0        
		//  360  732:istore_1        
				if(overscroller.isFinished() || !flag)
		//* 361  733:aload           13
		//* 362  735:invokevirtual   #271 <Method boolean OverScroller.isFinished()>
		//* 363  738:ifne            745
		//* 364  741:iload_1         
		//* 365  742:ifne            772
				{
					setScrollState(0);
		//  366  745:aload_0         
		//  367  746:getfield        #25  <Field RecyclerView this$0>
		//  368  749:iconst_0        
		//  369  750:invokevirtual   #104 <Method void RecyclerView.setScrollState(int)>
					if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 370  753:invokestatic    #274 <Method boolean RecyclerView.access$600()>
		//* 371  756:ifeq            804
						mPrefetchRegistry.clearPrefetchPositions();
		//  372  759:aload_0         
		//  373  760:getfield        #25  <Field RecyclerView this$0>
		//  374  763:getfield        #278 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//  375  766:invokevirtual   #283 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
				} else
		//* 376  769:goto            804
				{
					postOnAnimation();
		//  377  772:aload_0         
		//  378  773:invokevirtual   #98  <Method void postOnAnimation()>
					if(mGapWorker != null)
		//* 379  776:aload_0         
		//* 380  777:getfield        #25  <Field RecyclerView this$0>
		//* 381  780:getfield        #287 <Field GapWorker RecyclerView.mGapWorker>
		//* 382  783:ifnull          804
						mGapWorker.postFromTraversal(RecyclerView.this, k2, l2);
		//  383  786:aload_0         
		//  384  787:getfield        #25  <Field RecyclerView this$0>
		//  385  790:getfield        #287 <Field GapWorker RecyclerView.mGapWorker>
		//  386  793:aload_0         
		//  387  794:getfield        #25  <Field RecyclerView this$0>
		//  388  797:iload           9
		//  389  799:iload           10
		//  390  801:invokevirtual   #293 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
				}
			}
			if(smoothscroller != null)
		//* 391  804:aload           14
		//* 392  806:ifnull          836
			{
				if(smoothscroller.isPendingInitialRun())
		//* 393  809:aload           14
		//* 394  811:invokevirtual   #202 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 395  814:ifeq            824
					smoothscroller.onAnimation(0, 0);
		//  396  817:aload           14
		//  397  819:iconst_0        
		//  398  820:iconst_0        
		//  399  821:invokestatic    #221 <Method void RecyclerView$SmoothScroller.access$400(RecyclerView$SmoothScroller, int, int)>
				if(!mReSchedulePostAnimationCallback)
		//* 400  824:aload_0         
		//* 401  825:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//* 402  828:ifne            836
					smoothscroller.stop();
		//  403  831:aload           14
		//  404  833:invokevirtual   #211 <Method void RecyclerView$SmoothScroller.stop()>
			}
			enableRunOnAnimationRequests();
		//  405  836:aload_0         
		//  406  837:invokespecial   #295 <Method void enableRunOnAnimationRequests()>
		//  407  840:return          
		}

		public void smoothScrollBy(int i, int j)
		{
			smoothScrollBy(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #299 <Method void smoothScrollBy(int, int, int, int)>
		//    6    8:return          
		}

		public void smoothScrollBy(int i, int j, int k)
		{
			smoothScrollBy(i, j, k, RecyclerView.sQuinticInterpolator);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    5    7:invokevirtual   #303 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//    6   10:return          
		}

		public void smoothScrollBy(int i, int j, int k, int l)
		{
			smoothScrollBy(i, j, computeScrollDuration(i, j, k, l));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:iload_2         
		//    6    6:iload_3         
		//    7    7:iload           4
		//    8    9:invokespecial   #305 <Method int computeScrollDuration(int, int, int, int)>
		//    9   12:invokevirtual   #307 <Method void smoothScrollBy(int, int, int)>
		//   10   15:return          
		}

		public void smoothScrollBy(int i, int j, int k, Interpolator interpolator)
		{
			if(mInterpolator != interpolator)
		//*   0    0:aload_0         
		//*   1    1:getfield        #33  <Field Interpolator mInterpolator>
		//*   2    4:aload           4
		//*   3    6:if_acmpeq       35
			{
				mInterpolator = interpolator;
		//    4    9:aload_0         
		//    5   10:aload           4
		//    6   12:putfield        #33  <Field Interpolator mInterpolator>
				mScroller = new OverScroller(getContext(), interpolator);
		//    7   15:aload_0         
		//    8   16:new             #39  <Class OverScroller>
		//    9   19:dup             
		//   10   20:aload_0         
		//   11   21:getfield        #25  <Field RecyclerView this$0>
		//   12   24:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   13   27:aload           4
		//   14   29:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   15   32:putfield        #48  <Field OverScroller mScroller>
			}
			setScrollState(2);
		//   16   35:aload_0         
		//   17   36:getfield        #25  <Field RecyclerView this$0>
		//   18   39:iconst_2        
		//   19   40:invokevirtual   #104 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//   20   43:aload_0         
		//   21   44:iconst_0        
		//   22   45:putfield        #106 <Field int mLastFlingY>
			mLastFlingX = 0;
		//   23   48:aload_0         
		//   24   49:iconst_0        
		//   25   50:putfield        #108 <Field int mLastFlingX>
			mScroller.startScroll(0, 0, i, j, k);
		//   26   53:aload_0         
		//   27   54:getfield        #48  <Field OverScroller mScroller>
		//   28   57:iconst_0        
		//   29   58:iconst_0        
		//   30   59:iload_1         
		//   31   60:iload_2         
		//   32   61:iload_3         
		//   33   62:invokevirtual   #311 <Method void OverScroller.startScroll(int, int, int, int, int)>
			postOnAnimation();
		//   34   65:aload_0         
		//   35   66:invokevirtual   #98  <Method void postOnAnimation()>
		//   36   69:return          
		}

		public void smoothScrollBy(int i, int j, Interpolator interpolator)
		{
			int k = computeScrollDuration(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokespecial   #305 <Method int computeScrollDuration(int, int, int, int)>
		//    6    8:istore          4
			if(interpolator == null)
		//*   7   10:aload_3         
		//*   8   11:ifnonnull       21
				interpolator = RecyclerView.sQuinticInterpolator;
		//    9   14:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   10   17:astore_3        
		//*  11   18:goto            21
			smoothScrollBy(i, j, k, interpolator);
		//   12   21:aload_0         
		//   13   22:iload_1         
		//   14   23:iload_2         
		//   15   24:iload           4
		//   16   26:aload_3         
		//   17   27:invokevirtual   #303 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//   18   30:return          
		}

		public void stop()
		{
			removeCallbacks(((Runnable) (this)));
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #117 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    4    8:pop             
			mScroller.abortAnimation();
		//    5    9:aload_0         
		//    6   10:getfield        #48  <Field OverScroller mScroller>
		//    7   13:invokevirtual   #255 <Method void OverScroller.abortAnimation()>
		//    8   16:return          
		}

		private boolean mEatRunOnAnimationRequest;
		Interpolator mInterpolator;
		private int mLastFlingX;
		private int mLastFlingY;
		private boolean mReSchedulePostAnimationCallback;
		private OverScroller mScroller;
		final RecyclerView this$0;

		ViewFlinger()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #25  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #28  <Method void Object()>
			mInterpolator = RecyclerView.sQuinticInterpolator;
		//    5    9:aload_0         
		//    6   10:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    7   13:putfield        #33  <Field Interpolator mInterpolator>
			mEatRunOnAnimationRequest = false;
		//    8   16:aload_0         
		//    9   17:iconst_0        
		//   10   18:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			mReSchedulePostAnimationCallback = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mScroller = new OverScroller(getContext(), RecyclerView.sQuinticInterpolator);
		//   14   26:aload_0         
		//   15   27:new             #39  <Class OverScroller>
		//   16   30:dup             
		//   17   31:aload_1         
		//   18   32:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   19   35:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   20   38:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   21   41:putfield        #48  <Field OverScroller mScroller>
		//   22   44:return          
		}
	}

	public static abstract class ViewHolder
	{

		private void createPayloadsIfNeeded()
		{
			if(mPayloads == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #98  <Field List mPayloads>
		//*   2    4:ifnonnull       29
			{
				mPayloads = ((List) (new ArrayList()));
		//    3    7:aload_0         
		//    4    8:new             #151 <Class ArrayList>
		//    5   11:dup             
		//    6   12:invokespecial   #152 <Method void ArrayList()>
		//    7   15:putfield        #98  <Field List mPayloads>
				mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
		//    8   18:aload_0         
		//    9   19:aload_0         
		//   10   20:getfield        #98  <Field List mPayloads>
		//   11   23:invokestatic    #156 <Method List Collections.unmodifiableList(List)>
		//   12   26:putfield        #100 <Field List mUnmodifiedPayloads>
			}
		//   13   29:return          
		}

		private boolean doesTransientStatePreventRecycling()
		{
			return (mFlags & 0x10) == 0 && ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #119 <Field View itemView>
		//    7   14:invokestatic    #162 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifeq            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		private void onEnteredHiddenState(RecyclerView recyclerview)
		{
			mWasImportantForAccessibilityBeforeHidden = ViewCompat.getImportantForAccessibility(itemView);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #119 <Field View itemView>
		//    3    5:invokestatic    #166 <Method int ViewCompat.getImportantForAccessibility(View)>
		//    4    8:putfield        #108 <Field int mWasImportantForAccessibilityBeforeHidden>
			recyclerview.setChildImportantForAccessibilityInternal(this, 4);
		//    5   11:aload_1         
		//    6   12:aload_0         
		//    7   13:iconst_4        
		//    8   14:invokevirtual   #170 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    9   17:pop             
		//   10   18:return          
		}

		private void onLeftHiddenState(RecyclerView recyclerview)
		{
			recyclerview.setChildImportantForAccessibilityInternal(this, mWasImportantForAccessibilityBeforeHidden);
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:aload_0         
		//    3    3:getfield        #108 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    4    6:invokevirtual   #170 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    5    9:pop             
			mWasImportantForAccessibilityBeforeHidden = 0;
		//    6   10:aload_0         
		//    7   11:iconst_0        
		//    8   12:putfield        #108 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    9   15:return          
		}

		private boolean shouldBeKeptAsChild()
		{
			return (mFlags & 0x10) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		void addChangePayload(Object obj)
		{
			if(obj == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       12
			{
				addFlags(1024);
		//    2    4:aload_0         
		//    3    5:sipush          1024
		//    4    8:invokevirtual   #176 <Method void addFlags(int)>
				return;
		//    5   11:return          
			}
			if((mFlags & 0x400) == 0)
		//*   6   12:aload_0         
		//*   7   13:getfield        #129 <Field int mFlags>
		//*   8   16:sipush          1024
		//*   9   19:iand            
		//*  10   20:ifne            38
			{
				createPayloadsIfNeeded();
		//   11   23:aload_0         
		//   12   24:invokespecial   #178 <Method void createPayloadsIfNeeded()>
				mPayloads.add(obj);
		//   13   27:aload_0         
		//   14   28:getfield        #98  <Field List mPayloads>
		//   15   31:aload_1         
		//   16   32:invokeinterface #184 <Method boolean List.add(Object)>
		//   17   37:pop             
			}
		//   18   38:return          
		}

		void addFlags(int i)
		{
			mFlags = mFlags | i;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #129 <Field int mFlags>
		//    3    5:iload_1         
		//    4    6:ior             
		//    5    7:putfield        #129 <Field int mFlags>
		//    6   10:return          
		}

		void clearOldPosition()
		{
			mOldPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #84  <Field int mOldPosition>
			mPreLayoutPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #92  <Field int mPreLayoutPosition>
		//    6   10:return          
		}

		void clearPayload()
		{
			if(mPayloads != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #98  <Field List mPayloads>
		//*   2    4:ifnull          16
				mPayloads.clear();
		//    3    7:aload_0         
		//    4    8:getfield        #98  <Field List mPayloads>
		//    5   11:invokeinterface #189 <Method void List.clear()>
			mFlags = mFlags & 0xfffffbff;
		//    6   16:aload_0         
		//    7   17:aload_0         
		//    8   18:getfield        #129 <Field int mFlags>
		//    9   21:sipush          -1025
		//   10   24:iand            
		//   11   25:putfield        #129 <Field int mFlags>
		//   12   28:return          
		}

		void clearReturnedFromScrapFlag()
		{
			mFlags = mFlags & 0xffffffdf;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #129 <Field int mFlags>
		//    3    5:bipush          -33
		//    4    7:iand            
		//    5    8:putfield        #129 <Field int mFlags>
		//    6   11:return          
		}

		void clearTmpDetachFlag()
		{
			mFlags = mFlags & 0xfffffeff;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #129 <Field int mFlags>
		//    3    5:sipush          -257
		//    4    8:iand            
		//    5    9:putfield        #129 <Field int mFlags>
		//    6   12:return          
		}

		void flagRemovedAndOffsetPosition(int i, int j, boolean flag)
		{
			addFlags(8);
		//    0    0:aload_0         
		//    1    1:bipush          8
		//    2    3:invokevirtual   #176 <Method void addFlags(int)>
			offsetPosition(j, flag);
		//    3    6:aload_0         
		//    4    7:iload_2         
		//    5    8:iload_3         
		//    6    9:invokevirtual   #197 <Method void offsetPosition(int, boolean)>
			mPosition = i;
		//    7   12:aload_0         
		//    8   13:iload_1         
		//    9   14:putfield        #82  <Field int mPosition>
		//   10   17:return          
		}

		public final int getAdapterPosition()
		{
			if(mOwnerRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #201 <Field RecyclerView mOwnerRecyclerView>
		//*   2    4:ifnonnull       9
				return -1;
		//    3    7:iconst_m1       
		//    4    8:ireturn         
			else
				return mOwnerRecyclerView.getAdapterPositionFor(this);
		//    5    9:aload_0         
		//    6   10:getfield        #201 <Field RecyclerView mOwnerRecyclerView>
		//    7   13:aload_0         
		//    8   14:invokevirtual   #204 <Method int RecyclerView.getAdapterPositionFor(RecyclerView$ViewHolder)>
		//    9   17:ireturn         
		}

		public final long getItemId()
		{
			return mItemId;
		//    0    0:aload_0         
		//    1    1:getfield        #88  <Field long mItemId>
		//    2    4:lreturn         
		}

		public final int getItemViewType()
		{
			return mItemViewType;
		//    0    0:aload_0         
		//    1    1:getfield        #90  <Field int mItemViewType>
		//    2    4:ireturn         
		}

		public final int getLayoutPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #92  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #82  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #92  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		public final int getOldPosition()
		{
			return mOldPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #84  <Field int mOldPosition>
		//    2    4:ireturn         
		}

		public final int getPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #92  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #82  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #92  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		List getUnmodifiedPayloads()
		{
			if((mFlags & 0x400) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #129 <Field int mFlags>
		//*   2    4:sipush          1024
		//*   3    7:iand            
		//*   4    8:ifne            39
			{
				if(mPayloads == null || mPayloads.size() == 0)
		//*   5   11:aload_0         
		//*   6   12:getfield        #98  <Field List mPayloads>
		//*   7   15:ifnull          30
		//*   8   18:aload_0         
		//*   9   19:getfield        #98  <Field List mPayloads>
		//*  10   22:invokeinterface #217 <Method int List.size()>
		//*  11   27:ifne            34
					return FULLUPDATE_PAYLOADS;
		//   12   30:getstatic       #75  <Field List FULLUPDATE_PAYLOADS>
		//   13   33:areturn         
				else
					return mUnmodifiedPayloads;
		//   14   34:aload_0         
		//   15   35:getfield        #100 <Field List mUnmodifiedPayloads>
		//   16   38:areturn         
			} else
			{
				return FULLUPDATE_PAYLOADS;
		//   17   39:getstatic       #75  <Field List FULLUPDATE_PAYLOADS>
		//   18   42:areturn         
			}
		}

		boolean hasAnyOfTheFlags(int i)
		{
			return (mFlags & i) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:iload_1         
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isAdapterPositionUnknown()
		{
			return (mFlags & 0x200) != 0 || isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:sipush          512
		//    3    7:iand            
		//    4    8:ifne            18
		//    5   11:aload_0         
		//    6   12:invokevirtual   #225 <Method boolean isInvalid()>
		//    7   15:ifeq            20
		//    8   18:iconst_1        
		//    9   19:ireturn         
		//   10   20:iconst_0        
		//   11   21:ireturn         
		}

		boolean isBound()
		{
			return (mFlags & 1) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:iconst_1        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isInvalid()
		{
			return (mFlags & 4) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:iconst_4        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		public final boolean isRecyclable()
		{
			return (mFlags & 0x10) == 0 && !ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #119 <Field View itemView>
		//    7   14:invokestatic    #162 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifne            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		boolean isRemoved()
		{
			return (mFlags & 8) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:bipush          8
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean isScrap()
		{
			return mScrapContainer != null;
		//    0    0:aload_0         
		//    1    1:getfield        #104 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:ifnull          9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		boolean isTmpDetached()
		{
			return (mFlags & 0x100) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:sipush          256
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		boolean isUpdated()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean needsUpdate()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		void offsetPosition(int i, boolean flag)
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #84  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #82  <Field int mPosition>
		//    7   13:putfield        #84  <Field int mOldPosition>
			if(mPreLayoutPosition == -1)
		//*   8   16:aload_0         
		//*   9   17:getfield        #92  <Field int mPreLayoutPosition>
		//*  10   20:iconst_m1       
		//*  11   21:icmpne          32
				mPreLayoutPosition = mPosition;
		//   12   24:aload_0         
		//   13   25:aload_0         
		//   14   26:getfield        #82  <Field int mPosition>
		//   15   29:putfield        #92  <Field int mPreLayoutPosition>
			if(flag)
		//*  16   32:iload_2         
		//*  17   33:ifeq            46
				mPreLayoutPosition = mPreLayoutPosition + i;
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #92  <Field int mPreLayoutPosition>
		//   21   41:iload_1         
		//   22   42:iadd            
		//   23   43:putfield        #92  <Field int mPreLayoutPosition>
			mPosition = mPosition + i;
		//   24   46:aload_0         
		//   25   47:aload_0         
		//   26   48:getfield        #82  <Field int mPosition>
		//   27   51:iload_1         
		//   28   52:iadd            
		//   29   53:putfield        #82  <Field int mPosition>
			if(itemView.getLayoutParams() != null)
		//*  30   56:aload_0         
		//*  31   57:getfield        #119 <Field View itemView>
		//*  32   60:invokevirtual   #238 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  33   63:ifnull          80
				((LayoutParams)itemView.getLayoutParams()).mInsetsDirty = true;
		//   34   66:aload_0         
		//   35   67:getfield        #119 <Field View itemView>
		//   36   70:invokevirtual   #238 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   37   73:checkcast       #240 <Class RecyclerView$LayoutParams>
		//   38   76:iconst_1        
		//   39   77:putfield        #243 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//   40   80:return          
		}

		void resetInternal()
		{
			mFlags = 0;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #129 <Field int mFlags>
			mPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #82  <Field int mPosition>
			mOldPosition = -1;
		//    6   10:aload_0         
		//    7   11:iconst_m1       
		//    8   12:putfield        #84  <Field int mOldPosition>
			mItemId = -1L;
		//    9   15:aload_0         
		//   10   16:ldc2w           #85  <Long -1L>
		//   11   19:putfield        #88  <Field long mItemId>
			mPreLayoutPosition = -1;
		//   12   22:aload_0         
		//   13   23:iconst_m1       
		//   14   24:putfield        #92  <Field int mPreLayoutPosition>
			mIsRecyclableCount = 0;
		//   15   27:aload_0         
		//   16   28:iconst_0        
		//   17   29:putfield        #102 <Field int mIsRecyclableCount>
			mShadowedHolder = null;
		//   18   32:aload_0         
		//   19   33:aconst_null     
		//   20   34:putfield        #94  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   21   37:aload_0         
		//   22   38:aconst_null     
		//   23   39:putfield        #96  <Field RecyclerView$ViewHolder mShadowingHolder>
			clearPayload();
		//   24   42:aload_0         
		//   25   43:invokevirtual   #246 <Method void clearPayload()>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   26   46:aload_0         
		//   27   47:iconst_0        
		//   28   48:putfield        #108 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   29   51:aload_0         
		//   30   52:iconst_m1       
		//   31   53:putfield        #110 <Field int mPendingAccessibilityState>
			RecyclerView.clearNestedRecyclerViewIfNotNested(this);
		//   32   56:aload_0         
		//   33   57:invokestatic    #250 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
		//   34   60:return          
		}

		void saveOldPosition()
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #84  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #82  <Field int mPosition>
		//    7   13:putfield        #84  <Field int mOldPosition>
		//    8   16:return          
		}

		void setFlags(int i, int j)
		{
			mFlags = mFlags & ~j | i & j;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #129 <Field int mFlags>
		//    3    5:iload_2         
		//    4    6:iconst_m1       
		//    5    7:ixor            
		//    6    8:iand            
		//    7    9:iload_1         
		//    8   10:iload_2         
		//    9   11:iand            
		//   10   12:ior             
		//   11   13:putfield        #129 <Field int mFlags>
		//   12   16:return          
		}

		public final void setIsRecyclable(boolean flag)
		{
			int i;
			if(flag)
		//*   0    0:iload_1         
		//*   1    1:ifeq            14
				i = mIsRecyclableCount - 1;
		//    2    4:aload_0         
		//    3    5:getfield        #102 <Field int mIsRecyclableCount>
		//    4    8:iconst_1        
		//    5    9:isub            
		//    6   10:istore_2        
			else
		//*   7   11:goto            21
				i = mIsRecyclableCount + 1;
		//    8   14:aload_0         
		//    9   15:getfield        #102 <Field int mIsRecyclableCount>
		//   10   18:iconst_1        
		//   11   19:iadd            
		//   12   20:istore_2        
			mIsRecyclableCount = i;
		//   13   21:aload_0         
		//   14   22:iload_2         
		//   15   23:putfield        #102 <Field int mIsRecyclableCount>
			if(mIsRecyclableCount < 0)
		//*  16   26:aload_0         
		//*  17   27:getfield        #102 <Field int mIsRecyclableCount>
		//*  18   30:ifge            66
			{
				mIsRecyclableCount = 0;
		//   19   33:aload_0         
		//   20   34:iconst_0        
		//   21   35:putfield        #102 <Field int mIsRecyclableCount>
				Log.e("View", (new StringBuilder()).append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ").append(((Object) (this))).toString());
		//   22   38:ldc2            #257 <String "View">
		//   23   41:new             #259 <Class StringBuilder>
		//   24   44:dup             
		//   25   45:invokespecial   #260 <Method void StringBuilder()>
		//   26   48:ldc2            #262 <String "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ">
		//   27   51:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   28   54:aload_0         
		//   29   55:invokevirtual   #269 <Method StringBuilder StringBuilder.append(Object)>
		//   30   58:invokevirtual   #273 <Method String StringBuilder.toString()>
		//   31   61:invokestatic    #279 <Method int Log.e(String, String)>
		//   32   64:pop             
				return;
		//   33   65:return          
			}
			if(!flag && mIsRecyclableCount == 1)
		//*  34   66:iload_1         
		//*  35   67:ifne            90
		//*  36   70:aload_0         
		//*  37   71:getfield        #102 <Field int mIsRecyclableCount>
		//*  38   74:iconst_1        
		//*  39   75:icmpne          90
			{
				mFlags = mFlags | 0x10;
		//   40   78:aload_0         
		//   41   79:aload_0         
		//   42   80:getfield        #129 <Field int mFlags>
		//   43   83:bipush          16
		//   44   85:ior             
		//   45   86:putfield        #129 <Field int mFlags>
				return;
		//   46   89:return          
			}
			if(flag && mIsRecyclableCount == 0)
		//*  47   90:iload_1         
		//*  48   91:ifeq            112
		//*  49   94:aload_0         
		//*  50   95:getfield        #102 <Field int mIsRecyclableCount>
		//*  51   98:ifne            112
				mFlags = mFlags & 0xffffffef;
		//   52  101:aload_0         
		//   53  102:aload_0         
		//   54  103:getfield        #129 <Field int mFlags>
		//   55  106:bipush          -17
		//   56  108:iand            
		//   57  109:putfield        #129 <Field int mFlags>
		//   58  112:return          
		}

		void setScrapContainer(Recycler recycler, boolean flag)
		{
			mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #104 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = flag;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #106 <Field boolean mInChangeScrap>
		//    6   10:return          
		}

		boolean shouldIgnore()
		{
			return (mFlags & 0x80) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:sipush          128
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		void stopIgnoring()
		{
			mFlags = mFlags & 0xffffff7f;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #129 <Field int mFlags>
		//    3    5:sipush          -129
		//    4    8:iand            
		//    5    9:putfield        #129 <Field int mFlags>
		//    6   12:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder((new StringBuilder()).append("ViewHolder{").append(Integer.toHexString(((Object)this).hashCode())).append(" position=").append(mPosition).append(" id=").append(mItemId).append(", oldPos=").append(mOldPosition).append(", pLpos:").append(mPreLayoutPosition).toString());
		//    0    0:new             #259 <Class StringBuilder>
		//    1    3:dup             
		//    2    4:new             #259 <Class StringBuilder>
		//    3    7:dup             
		//    4    8:invokespecial   #260 <Method void StringBuilder()>
		//    5   11:ldc2            #285 <String "ViewHolder{">
		//    6   14:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//    7   17:aload_0         
		//    8   18:invokevirtual   #288 <Method int Object.hashCode()>
		//    9   21:invokestatic    #294 <Method String Integer.toHexString(int)>
		//   10   24:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   11   27:ldc2            #296 <String " position=">
		//   12   30:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   13   33:aload_0         
		//   14   34:getfield        #82  <Field int mPosition>
		//   15   37:invokevirtual   #299 <Method StringBuilder StringBuilder.append(int)>
		//   16   40:ldc2            #301 <String " id=">
		//   17   43:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   18   46:aload_0         
		//   19   47:getfield        #88  <Field long mItemId>
		//   20   50:invokevirtual   #304 <Method StringBuilder StringBuilder.append(long)>
		//   21   53:ldc2            #306 <String ", oldPos=">
		//   22   56:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   23   59:aload_0         
		//   24   60:getfield        #84  <Field int mOldPosition>
		//   25   63:invokevirtual   #299 <Method StringBuilder StringBuilder.append(int)>
		//   26   66:ldc2            #308 <String ", pLpos:">
		//   27   69:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   28   72:aload_0         
		//   29   73:getfield        #92  <Field int mPreLayoutPosition>
		//   30   76:invokevirtual   #299 <Method StringBuilder StringBuilder.append(int)>
		//   31   79:invokevirtual   #273 <Method String StringBuilder.toString()>
		//   32   82:invokespecial   #309 <Method void StringBuilder(String)>
		//   33   85:astore_2        
			if(isScrap())
		//*  34   86:aload_0         
		//*  35   87:invokevirtual   #311 <Method boolean isScrap()>
		//*  36   90:ifeq            125
			{
				StringBuilder stringbuilder1 = stringbuilder.append(" scrap ");
		//   37   93:aload_2         
		//   38   94:ldc2            #313 <String " scrap ">
		//   39   97:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   40  100:astore_3        
				String s;
				if(mInChangeScrap)
		//*  41  101:aload_0         
		//*  42  102:getfield        #106 <Field boolean mInChangeScrap>
		//*  43  105:ifeq            115
					s = "[changeScrap]";
		//   44  108:ldc2            #315 <String "[changeScrap]">
		//   45  111:astore_1        
				else
		//*  46  112:goto            119
					s = "[attachedScrap]";
		//   47  115:ldc2            #317 <String "[attachedScrap]">
		//   48  118:astore_1        
				stringbuilder1.append(s);
		//   49  119:aload_3         
		//   50  120:aload_1         
		//   51  121:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   52  124:pop             
			}
			if(isInvalid())
		//*  53  125:aload_0         
		//*  54  126:invokevirtual   #225 <Method boolean isInvalid()>
		//*  55  129:ifeq            140
				stringbuilder.append(" invalid");
		//   56  132:aload_2         
		//   57  133:ldc2            #319 <String " invalid">
		//   58  136:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   59  139:pop             
			if(!isBound())
		//*  60  140:aload_0         
		//*  61  141:invokevirtual   #321 <Method boolean isBound()>
		//*  62  144:ifne            155
				stringbuilder.append(" unbound");
		//   63  147:aload_2         
		//   64  148:ldc2            #323 <String " unbound">
		//   65  151:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   66  154:pop             
			if(needsUpdate())
		//*  67  155:aload_0         
		//*  68  156:invokevirtual   #325 <Method boolean needsUpdate()>
		//*  69  159:ifeq            170
				stringbuilder.append(" update");
		//   70  162:aload_2         
		//   71  163:ldc2            #327 <String " update">
		//   72  166:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   73  169:pop             
			if(isRemoved())
		//*  74  170:aload_0         
		//*  75  171:invokevirtual   #329 <Method boolean isRemoved()>
		//*  76  174:ifeq            185
				stringbuilder.append(" removed");
		//   77  177:aload_2         
		//   78  178:ldc2            #331 <String " removed">
		//   79  181:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   80  184:pop             
			if(shouldIgnore())
		//*  81  185:aload_0         
		//*  82  186:invokevirtual   #333 <Method boolean shouldIgnore()>
		//*  83  189:ifeq            200
				stringbuilder.append(" ignored");
		//   84  192:aload_2         
		//   85  193:ldc2            #335 <String " ignored">
		//   86  196:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   87  199:pop             
			if(isTmpDetached())
		//*  88  200:aload_0         
		//*  89  201:invokevirtual   #337 <Method boolean isTmpDetached()>
		//*  90  204:ifeq            215
				stringbuilder.append(" tmpDetached");
		//   91  207:aload_2         
		//   92  208:ldc2            #339 <String " tmpDetached">
		//   93  211:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   94  214:pop             
			if(!isRecyclable())
		//*  95  215:aload_0         
		//*  96  216:invokevirtual   #341 <Method boolean isRecyclable()>
		//*  97  219:ifne            256
				stringbuilder.append((new StringBuilder()).append(" not recyclable(").append(mIsRecyclableCount).append(")").toString());
		//   98  222:aload_2         
		//   99  223:new             #259 <Class StringBuilder>
		//  100  226:dup             
		//  101  227:invokespecial   #260 <Method void StringBuilder()>
		//  102  230:ldc2            #343 <String " not recyclable(">
		//  103  233:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  104  236:aload_0         
		//  105  237:getfield        #102 <Field int mIsRecyclableCount>
		//  106  240:invokevirtual   #299 <Method StringBuilder StringBuilder.append(int)>
		//  107  243:ldc2            #345 <String ")">
		//  108  246:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  109  249:invokevirtual   #273 <Method String StringBuilder.toString()>
		//  110  252:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  111  255:pop             
			if(isAdapterPositionUnknown())
		//* 112  256:aload_0         
		//* 113  257:invokevirtual   #347 <Method boolean isAdapterPositionUnknown()>
		//* 114  260:ifeq            271
				stringbuilder.append(" undefined adapter position");
		//  115  263:aload_2         
		//  116  264:ldc2            #349 <String " undefined adapter position">
		//  117  267:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  118  270:pop             
			if(itemView.getParent() == null)
		//* 119  271:aload_0         
		//* 120  272:getfield        #119 <Field View itemView>
		//* 121  275:invokevirtual   #353 <Method ViewParent View.getParent()>
		//* 122  278:ifnonnull       289
				stringbuilder.append(" no parent");
		//  123  281:aload_2         
		//  124  282:ldc2            #355 <String " no parent">
		//  125  285:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  126  288:pop             
			stringbuilder.append("}");
		//  127  289:aload_2         
		//  128  290:ldc2            #357 <String "}">
		//  129  293:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  130  296:pop             
			return stringbuilder.toString();
		//  131  297:aload_2         
		//  132  298:invokevirtual   #273 <Method String StringBuilder.toString()>
		//  133  301:areturn         
		}

		void unScrap()
		{
			mScrapContainer.unscrapView(this);
		//    0    0:aload_0         
		//    1    1:getfield        #104 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #363 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		boolean wasReturnedFromScrap()
		{
			return (mFlags & 0x20) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:bipush          32
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		static final int FLAG_ADAPTER_FULLUPDATE = 1024;
		static final int FLAG_ADAPTER_POSITION_UNKNOWN = 512;
		static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 8192;
		static final int FLAG_BOUND = 1;
		static final int FLAG_IGNORE = 128;
		static final int FLAG_INVALID = 4;
		static final int FLAG_MOVED = 2048;
		static final int FLAG_NOT_RECYCLABLE = 16;
		static final int FLAG_REMOVED = 8;
		static final int FLAG_RETURNED_FROM_SCRAP = 32;
		static final int FLAG_TMP_DETACHED = 256;
		static final int FLAG_UPDATE = 2;
		private static final List FULLUPDATE_PAYLOADS;
		static final int PENDING_ACCESSIBILITY_STATE_NOT_SET = -1;
		public final View itemView;
		private int mFlags;
		private boolean mInChangeScrap;
		private int mIsRecyclableCount;
		long mItemId;
		int mItemViewType;
		WeakReference mNestedRecyclerView;
		int mOldPosition;
		RecyclerView mOwnerRecyclerView;
		List mPayloads;
		int mPendingAccessibilityState;
		int mPosition;
		int mPreLayoutPosition;
		private Recycler mScrapContainer;
		ViewHolder mShadowedHolder;
		ViewHolder mShadowingHolder;
		List mUnmodifiedPayloads;
		private int mWasImportantForAccessibilityBeforeHidden;

		static 
		{
			FULLUPDATE_PAYLOADS = Collections.EMPTY_LIST;
		//    0    0:getstatic       #73  <Field List Collections.EMPTY_LIST>
		//    1    3:putstatic       #75  <Field List FULLUPDATE_PAYLOADS>
		//*   2    6:return          
		}


/*
		static boolean access$1300(ViewHolder viewholder)
		{
			return viewholder.shouldBeKeptAsChild();
		//    0    0:aload_0         
		//    1    1:invokespecial   #125 <Method boolean shouldBeKeptAsChild()>
		//    2    4:ireturn         
		}

*/


/*
		static int access$1400(ViewHolder viewholder)
		{
			return viewholder.mFlags;
		//    0    0:aload_0         
		//    1    1:getfield        #129 <Field int mFlags>
		//    2    4:ireturn         
		}

*/


/*
		static void access$200(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onEnteredHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #135 <Method void onEnteredHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static void access$300(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onLeftHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #139 <Method void onLeftHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static boolean access$700(ViewHolder viewholder)
		{
			return viewholder.doesTransientStatePreventRecycling();
		//    0    0:aload_0         
		//    1    1:invokespecial   #143 <Method boolean doesTransientStatePreventRecycling()>
		//    2    4:ireturn         
		}

*/


/*
		static Recycler access$802(ViewHolder viewholder, Recycler recycler)
		{
			viewholder.mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #104 <Field RecyclerView$Recycler mScrapContainer>
			return recycler;
		//    3    5:aload_1         
		//    4    6:areturn         
		}

*/


/*
		static boolean access$900(ViewHolder viewholder)
		{
			return viewholder.mInChangeScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field boolean mInChangeScrap>
		//    2    4:ireturn         
		}

*/


/*
		static boolean access$902(ViewHolder viewholder, boolean flag)
		{
			viewholder.mInChangeScrap = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #106 <Field boolean mInChangeScrap>
			return flag;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/

		public ViewHolder(View view)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #80  <Method void Object()>
			mPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #82  <Field int mPosition>
			mOldPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #84  <Field int mOldPosition>
			mItemId = -1L;
		//    8   14:aload_0         
		//    9   15:ldc2w           #85  <Long -1L>
		//   10   18:putfield        #88  <Field long mItemId>
			mItemViewType = -1;
		//   11   21:aload_0         
		//   12   22:iconst_m1       
		//   13   23:putfield        #90  <Field int mItemViewType>
			mPreLayoutPosition = -1;
		//   14   26:aload_0         
		//   15   27:iconst_m1       
		//   16   28:putfield        #92  <Field int mPreLayoutPosition>
			mShadowedHolder = null;
		//   17   31:aload_0         
		//   18   32:aconst_null     
		//   19   33:putfield        #94  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   20   36:aload_0         
		//   21   37:aconst_null     
		//   22   38:putfield        #96  <Field RecyclerView$ViewHolder mShadowingHolder>
			mPayloads = null;
		//   23   41:aload_0         
		//   24   42:aconst_null     
		//   25   43:putfield        #98  <Field List mPayloads>
			mUnmodifiedPayloads = null;
		//   26   46:aload_0         
		//   27   47:aconst_null     
		//   28   48:putfield        #100 <Field List mUnmodifiedPayloads>
			mIsRecyclableCount = 0;
		//   29   51:aload_0         
		//   30   52:iconst_0        
		//   31   53:putfield        #102 <Field int mIsRecyclableCount>
			mScrapContainer = null;
		//   32   56:aload_0         
		//   33   57:aconst_null     
		//   34   58:putfield        #104 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = false;
		//   35   61:aload_0         
		//   36   62:iconst_0        
		//   37   63:putfield        #106 <Field boolean mInChangeScrap>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   38   66:aload_0         
		//   39   67:iconst_0        
		//   40   68:putfield        #108 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   41   71:aload_0         
		//   42   72:iconst_m1       
		//   43   73:putfield        #110 <Field int mPendingAccessibilityState>
			if(view == null)
		//*  44   76:aload_1         
		//*  45   77:ifnonnull       90
			{
				throw new IllegalArgumentException("itemView may not be null");
		//   46   80:new             #112 <Class IllegalArgumentException>
		//   47   83:dup             
		//   48   84:ldc1            #114 <String "itemView may not be null">
		//   49   86:invokespecial   #117 <Method void IllegalArgumentException(String)>
		//   50   89:athrow          
			} else
			{
				itemView = view;
		//   51   90:aload_0         
		//   52   91:aload_1         
		//   53   92:putfield        #119 <Field View itemView>
				return;
		//   54   95:return          
			}
		}
	}


	public RecyclerView(Context context)
	{
		this(context, ((AttributeSet) (null)));
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aconst_null     
	//    3    3:invokespecial   #351 <Method void RecyclerView(Context, AttributeSet)>
	//    4    6:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset)
	{
		this(context, attributeset, 0);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iconst_0        
	//    4    4:invokespecial   #355 <Method void RecyclerView(Context, AttributeSet, int)>
	//    5    7:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset, int i)
	{
		super(context, attributeset, i);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iload_3         
	//    4    4:invokespecial   #357 <Method void ViewGroup(Context, AttributeSet, int)>
		mObserver = new RecyclerViewDataObserver();
	//    5    7:aload_0         
	//    6    8:new             #95  <Class RecyclerView$RecyclerViewDataObserver>
	//    7   11:dup             
	//    8   12:aload_0         
	//    9   13:invokespecial   #360 <Method void RecyclerView$RecyclerViewDataObserver(RecyclerView)>
	//   10   16:putfield        #362 <Field RecyclerView$RecyclerViewDataObserver mObserver>
		mRecycler = new Recycler();
	//   11   19:aload_0         
	//   12   20:new             #89  <Class RecyclerView$Recycler>
	//   13   23:dup             
	//   14   24:aload_0         
	//   15   25:invokespecial   #363 <Method void RecyclerView$Recycler(RecyclerView)>
	//   16   28:putfield        #365 <Field RecyclerView$Recycler mRecycler>
		mViewInfoStore = new ViewInfoStore();
	//   17   31:aload_0         
	//   18   32:new             #367 <Class ViewInfoStore>
	//   19   35:dup             
	//   20   36:invokespecial   #368 <Method void ViewInfoStore()>
	//   21   39:putfield        #370 <Field ViewInfoStore mViewInfoStore>
		mUpdateChildViewsRunnable = new Runnable() {

			public void run()
			{
				if(!mFirstLayoutComplete || isLayoutRequested())
			//*   0    0:aload_0         
			//*   1    1:getfield        #14  <Field RecyclerView this$0>
			//*   2    4:getfield        #23  <Field boolean RecyclerView.mFirstLayoutComplete>
			//*   3    7:ifeq            20
			//*   4   10:aload_0         
			//*   5   11:getfield        #14  <Field RecyclerView this$0>
			//*   6   14:invokevirtual   #27  <Method boolean RecyclerView.isLayoutRequested()>
			//*   7   17:ifeq            21
					return;
			//    8   20:return          
				if(!mIsAttached)
			//*   9   21:aload_0         
			//*  10   22:getfield        #14  <Field RecyclerView this$0>
			//*  11   25:getfield        #30  <Field boolean RecyclerView.mIsAttached>
			//*  12   28:ifne            39
				{
					requestLayout();
			//   13   31:aload_0         
			//   14   32:getfield        #14  <Field RecyclerView this$0>
			//   15   35:invokevirtual   #33  <Method void RecyclerView.requestLayout()>
					return;
			//   16   38:return          
				}
				if(mLayoutFrozen)
			//*  17   39:aload_0         
			//*  18   40:getfield        #14  <Field RecyclerView this$0>
			//*  19   43:getfield        #36  <Field boolean RecyclerView.mLayoutFrozen>
			//*  20   46:ifeq            58
				{
					mLayoutRequestEaten = true;
			//   21   49:aload_0         
			//   22   50:getfield        #14  <Field RecyclerView this$0>
			//   23   53:iconst_1        
			//   24   54:putfield        #39  <Field boolean RecyclerView.mLayoutRequestEaten>
					return;
			//   25   57:return          
				} else
				{
					consumePendingUpdateOperations();
			//   26   58:aload_0         
			//   27   59:getfield        #14  <Field RecyclerView this$0>
			//   28   62:invokevirtual   #42  <Method void RecyclerView.consumePendingUpdateOperations()>
					return;
			//   29   65:return          
				}
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//   22   42:aload_0         
	//   23   43:new             #10  <Class RecyclerView$1>
	//   24   46:dup             
	//   25   47:aload_0         
	//   26   48:invokespecial   #371 <Method void RecyclerView$1(RecyclerView)>
	//   27   51:putfield        #373 <Field Runnable mUpdateChildViewsRunnable>
		mTempRect = new Rect();
	//   28   54:aload_0         
	//   29   55:new             #375 <Class Rect>
	//   30   58:dup             
	//   31   59:invokespecial   #376 <Method void Rect()>
	//   32   62:putfield        #378 <Field Rect mTempRect>
		mTempRect2 = new Rect();
	//   33   65:aload_0         
	//   34   66:new             #375 <Class Rect>
	//   35   69:dup             
	//   36   70:invokespecial   #376 <Method void Rect()>
	//   37   73:putfield        #380 <Field Rect mTempRect2>
		mTempRectF = new RectF();
	//   38   76:aload_0         
	//   39   77:new             #382 <Class RectF>
	//   40   80:dup             
	//   41   81:invokespecial   #383 <Method void RectF()>
	//   42   84:putfield        #385 <Field RectF mTempRectF>
		mItemDecorations = new ArrayList();
	//   43   87:aload_0         
	//   44   88:new             #387 <Class ArrayList>
	//   45   91:dup             
	//   46   92:invokespecial   #388 <Method void ArrayList()>
	//   47   95:putfield        #390 <Field ArrayList mItemDecorations>
		mOnItemTouchListeners = new ArrayList();
	//   48   98:aload_0         
	//   49   99:new             #387 <Class ArrayList>
	//   50  102:dup             
	//   51  103:invokespecial   #388 <Method void ArrayList()>
	//   52  106:putfield        #392 <Field ArrayList mOnItemTouchListeners>
		mEatRequestLayout = 0;
	//   53  109:aload_0         
	//   54  110:iconst_0        
	//   55  111:putfield        #394 <Field int mEatRequestLayout>
		mDataSetHasChangedAfterLayout = false;
	//   56  114:aload_0         
	//   57  115:iconst_0        
	//   58  116:putfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
		mLayoutOrScrollCounter = 0;
	//   59  119:aload_0         
	//   60  120:iconst_0        
	//   61  121:putfield        #398 <Field int mLayoutOrScrollCounter>
		mDispatchScrollCounter = 0;
	//   62  124:aload_0         
	//   63  125:iconst_0        
	//   64  126:putfield        #400 <Field int mDispatchScrollCounter>
		mItemAnimator = ((ItemAnimator) (new DefaultItemAnimator()));
	//   65  129:aload_0         
	//   66  130:new             #402 <Class DefaultItemAnimator>
	//   67  133:dup             
	//   68  134:invokespecial   #403 <Method void DefaultItemAnimator()>
	//   69  137:putfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
		mScrollState = 0;
	//   70  140:aload_0         
	//   71  141:iconst_0        
	//   72  142:putfield        #407 <Field int mScrollState>
		mScrollPointerId = -1;
	//   73  145:aload_0         
	//   74  146:iconst_m1       
	//   75  147:putfield        #409 <Field int mScrollPointerId>
		mScrollFactor = 1.401298E-45F;
	//   76  150:aload_0         
	//   77  151:ldc2            #410 <Float 1.401298E-45F>
	//   78  154:putfield        #412 <Field float mScrollFactor>
		mPreserveFocusAfterLayout = true;
	//   79  157:aload_0         
	//   80  158:iconst_1        
	//   81  159:putfield        #414 <Field boolean mPreserveFocusAfterLayout>
		mViewFlinger = new ViewFlinger();
	//   82  162:aload_0         
	//   83  163:new             #121 <Class RecyclerView$ViewFlinger>
	//   84  166:dup             
	//   85  167:aload_0         
	//   86  168:invokespecial   #415 <Method void RecyclerView$ViewFlinger(RecyclerView)>
	//   87  171:putfield        #417 <Field RecyclerView$ViewFlinger mViewFlinger>
		Object obj;
		if(ALLOW_THREAD_GAP_WORK)
	//*  88  174:getstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  89  177:ifeq            192
			obj = ((Object) (new GapWorker.LayoutPrefetchRegistryImpl()));
	//   90  180:new             #419 <Class GapWorker$LayoutPrefetchRegistryImpl>
	//   91  183:dup             
	//   92  184:invokespecial   #420 <Method void GapWorker$LayoutPrefetchRegistryImpl()>
	//   93  187:astore          6
		else
	//*  94  189:goto            195
			obj = null;
	//   95  192:aconst_null     
	//   96  193:astore          6
		mPrefetchRegistry = ((GapWorker.LayoutPrefetchRegistryImpl) (obj));
	//   97  195:aload_0         
	//   98  196:aload           6
	//   99  198:putfield        #422 <Field GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry>
		mState = new State();
	//  100  201:aload_0         
	//  101  202:new             #115 <Class RecyclerView$State>
	//  102  205:dup             
	//  103  206:invokespecial   #423 <Method void RecyclerView$State()>
	//  104  209:putfield        #425 <Field RecyclerView$State mState>
		mItemsAddedOrRemoved = false;
	//  105  212:aload_0         
	//  106  213:iconst_0        
	//  107  214:putfield        #427 <Field boolean mItemsAddedOrRemoved>
		mItemsChanged = false;
	//  108  217:aload_0         
	//  109  218:iconst_0        
	//  110  219:putfield        #429 <Field boolean mItemsChanged>
		mItemAnimatorListener = ((ItemAnimator.ItemAnimatorListener) (new ItemAnimatorRestoreListener()));
	//  111  222:aload_0         
	//  112  223:new             #49  <Class RecyclerView$ItemAnimatorRestoreListener>
	//  113  226:dup             
	//  114  227:aload_0         
	//  115  228:invokespecial   #430 <Method void RecyclerView$ItemAnimatorRestoreListener(RecyclerView)>
	//  116  231:putfield        #432 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
		mPostedAnimatorRunner = false;
	//  117  234:aload_0         
	//  118  235:iconst_0        
	//  119  236:putfield        #434 <Field boolean mPostedAnimatorRunner>
		mMinMaxLayoutPositions = new int[2];
	//  120  239:aload_0         
	//  121  240:iconst_2        
	//  122  241:newarray        int[]
	//  123  243:putfield        #436 <Field int[] mMinMaxLayoutPositions>
		mScrollOffset = new int[2];
	//  124  246:aload_0         
	//  125  247:iconst_2        
	//  126  248:newarray        int[]
	//  127  250:putfield        #438 <Field int[] mScrollOffset>
		mScrollConsumed = new int[2];
	//  128  253:aload_0         
	//  129  254:iconst_2        
	//  130  255:newarray        int[]
	//  131  257:putfield        #440 <Field int[] mScrollConsumed>
		mNestedOffsets = new int[2];
	//  132  260:aload_0         
	//  133  261:iconst_2        
	//  134  262:newarray        int[]
	//  135  264:putfield        #442 <Field int[] mNestedOffsets>
		mPendingAccessibilityImportanceChange = ((List) (new ArrayList()));
	//  136  267:aload_0         
	//  137  268:new             #387 <Class ArrayList>
	//  138  271:dup             
	//  139  272:invokespecial   #388 <Method void ArrayList()>
	//  140  275:putfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//  141  278:aload_0         
	//  142  279:new             #12  <Class RecyclerView$2>
	//  143  282:dup             
	//  144  283:aload_0         
	//  145  284:invokespecial   #445 <Method void RecyclerView$2(RecyclerView)>
	//  146  287:putfield        #447 <Field Runnable mItemAnimatorRunner>
		mViewInfoProcessCallback = new ViewInfoStore.ProcessCallback() {

			public void processAppeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				animateAppearance(viewholder, itemholderinfo, itemholderinfo1);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #23  <Method void RecyclerView.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//    6   10:return          
			}

			public void processDisappeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				mRecycler.unscrapView(viewholder);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    3    7:aload_1         
			//    4    8:invokevirtual   #36  <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
				animateDisappearance(viewholder, itemholderinfo, itemholderinfo1);
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:aload_1         
			//    8   16:aload_2         
			//    9   17:aload_3         
			//   10   18:invokevirtual   #39  <Method void RecyclerView.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//   11   21:return          
			}

			public void processPersistent(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				viewholder.setIsRecyclable(false);
			//    0    0:aload_1         
			//    1    1:iconst_0        
			//    2    2:invokevirtual   #47  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(mDataSetHasChangedAfterLayout)
			//*   3    5:aload_0         
			//*   4    6:getfield        #14  <Field RecyclerView this$0>
			//*   5    9:getfield        #51  <Field boolean RecyclerView.mDataSetHasChangedAfterLayout>
			//*   6   12:ifeq            40
				{
					if(mItemAnimator.animateChange(viewholder, viewholder, itemholderinfo, itemholderinfo1))
			//*   7   15:aload_0         
			//*   8   16:getfield        #14  <Field RecyclerView this$0>
			//*   9   19:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  10   22:aload_1         
			//*  11   23:aload_1         
			//*  12   24:aload_2         
			//*  13   25:aload_3         
			//*  14   26:invokevirtual   #61  <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  15   29:ifeq            63
					{
						postAnimationRunner();
			//   16   32:aload_0         
			//   17   33:getfield        #14  <Field RecyclerView this$0>
			//   18   36:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
						return;
			//   19   39:return          
					}
				} else
				if(mItemAnimator.animatePersistence(viewholder, itemholderinfo, itemholderinfo1))
			//*  20   40:aload_0         
			//*  21   41:getfield        #14  <Field RecyclerView this$0>
			//*  22   44:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  23   47:aload_1         
			//*  24   48:aload_2         
			//*  25   49:aload_3         
			//*  26   50:invokevirtual   #68  <Method boolean RecyclerView$ItemAnimator.animatePersistence(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  27   53:ifeq            63
					postAnimationRunner();
			//   28   56:aload_0         
			//   29   57:getfield        #14  <Field RecyclerView this$0>
			//   30   60:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
			//   31   63:return          
			}

			public void unused(ViewHolder viewholder)
			{
				mLayout.removeAndRecycleView(viewholder.itemView, mRecycler);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #73  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    3    7:aload_1         
			//    4    8:getfield        #77  <Field View RecyclerView$ViewHolder.itemView>
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    8   18:invokevirtual   #83  <Method void RecyclerView$LayoutManager.removeAndRecycleView(View, RecyclerView$Recycler)>
			//    9   21:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//  147  290:aload_0         
	//  148  291:new             #16  <Class RecyclerView$4>
	//  149  294:dup             
	//  150  295:aload_0         
	//  151  296:invokespecial   #448 <Method void RecyclerView$4(RecyclerView)>
	//  152  299:putfield        #450 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
		if(attributeset != null)
	//* 153  302:aload_2         
	//* 154  303:ifnull          337
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, CLIP_TO_PADDING_ATTR, i, 0)));
	//  155  306:aload_1         
	//  156  307:aload_2         
	//  157  308:getstatic       #310 <Field int[] CLIP_TO_PADDING_ATTR>
	//  158  311:iload_3         
	//  159  312:iconst_0        
	//  160  313:invokevirtual   #454 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  161  316:astore          6
			mClipToPadding = ((TypedArray) (obj)).getBoolean(0, true);
	//  162  318:aload_0         
	//  163  319:aload           6
	//  164  321:iconst_0        
	//  165  322:iconst_1        
	//  166  323:invokevirtual   #460 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  167  326:putfield        #462 <Field boolean mClipToPadding>
			((TypedArray) (obj)).recycle();
	//  168  329:aload           6
	//  169  331:invokevirtual   #465 <Method void TypedArray.recycle()>
		} else
	//* 170  334:goto            342
		{
			mClipToPadding = true;
	//  171  337:aload_0         
	//  172  338:iconst_1        
	//  173  339:putfield        #462 <Field boolean mClipToPadding>
		}
		setScrollContainer(true);
	//  174  342:aload_0         
	//  175  343:iconst_1        
	//  176  344:invokevirtual   #469 <Method void setScrollContainer(boolean)>
		setFocusableInTouchMode(true);
	//  177  347:aload_0         
	//  178  348:iconst_1        
	//  179  349:invokevirtual   #472 <Method void setFocusableInTouchMode(boolean)>
		obj = ((Object) (ViewConfiguration.get(context)));
	//  180  352:aload_1         
	//  181  353:invokestatic    #478 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//  182  356:astore          6
		mTouchSlop = ((ViewConfiguration) (obj)).getScaledTouchSlop();
	//  183  358:aload_0         
	//  184  359:aload           6
	//  185  361:invokevirtual   #482 <Method int ViewConfiguration.getScaledTouchSlop()>
	//  186  364:putfield        #484 <Field int mTouchSlop>
		mMinFlingVelocity = ((ViewConfiguration) (obj)).getScaledMinimumFlingVelocity();
	//  187  367:aload_0         
	//  188  368:aload           6
	//  189  370:invokevirtual   #487 <Method int ViewConfiguration.getScaledMinimumFlingVelocity()>
	//  190  373:putfield        #489 <Field int mMinFlingVelocity>
		mMaxFlingVelocity = ((ViewConfiguration) (obj)).getScaledMaximumFlingVelocity();
	//  191  376:aload_0         
	//  192  377:aload           6
	//  193  379:invokevirtual   #492 <Method int ViewConfiguration.getScaledMaximumFlingVelocity()>
	//  194  382:putfield        #494 <Field int mMaxFlingVelocity>
		boolean flag;
		if(getOverScrollMode() == 2)
	//* 195  385:aload_0         
	//* 196  386:invokevirtual   #497 <Method int getOverScrollMode()>
	//* 197  389:iconst_2        
	//* 198  390:icmpne          399
			flag = true;
	//  199  393:iconst_1        
	//  200  394:istore          4
		else
	//* 201  396:goto            402
			flag = false;
	//  202  399:iconst_0        
	//  203  400:istore          4
		setWillNotDraw(flag);
	//  204  402:aload_0         
	//  205  403:iload           4
	//  206  405:invokevirtual   #500 <Method void setWillNotDraw(boolean)>
		mItemAnimator.setListener(mItemAnimatorListener);
	//  207  408:aload_0         
	//  208  409:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  209  412:aload_0         
	//  210  413:getfield        #432 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//  211  416:invokevirtual   #504 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		initAdapterManager();
	//  212  419:aload_0         
	//  213  420:invokevirtual   #507 <Method void initAdapterManager()>
		initChildrenHelper();
	//  214  423:aload_0         
	//  215  424:invokespecial   #510 <Method void initChildrenHelper()>
		if(ViewCompat.getImportantForAccessibility(((View) (this))) == 0)
	//* 216  427:aload_0         
	//* 217  428:invokestatic    #516 <Method int ViewCompat.getImportantForAccessibility(View)>
	//* 218  431:ifne            439
			ViewCompat.setImportantForAccessibility(((View) (this)), 1);
	//  219  434:aload_0         
	//  220  435:iconst_1        
	//  221  436:invokestatic    #520 <Method void ViewCompat.setImportantForAccessibility(View, int)>
		mAccessibilityManager = (AccessibilityManager)getContext().getSystemService("accessibility");
	//  222  439:aload_0         
	//  223  440:aload_0         
	//  224  441:invokevirtual   #524 <Method Context getContext()>
	//  225  444:ldc2            #526 <String "accessibility">
	//  226  447:invokevirtual   #530 <Method Object Context.getSystemService(String)>
	//  227  450:checkcast       #532 <Class AccessibilityManager>
	//  228  453:putfield        #534 <Field AccessibilityManager mAccessibilityManager>
		setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
	//  229  456:aload_0         
	//  230  457:new             #536 <Class RecyclerViewAccessibilityDelegate>
	//  231  460:dup             
	//  232  461:aload_0         
	//  233  462:invokespecial   #537 <Method void RecyclerViewAccessibilityDelegate(RecyclerView)>
	//  234  465:invokevirtual   #541 <Method void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)>
		boolean flag1 = true;
	//  235  468:iconst_1        
	//  236  469:istore          5
		flag = true;
	//  237  471:iconst_1        
	//  238  472:istore          4
		if(attributeset != null)
	//* 239  474:aload_2         
	//* 240  475:ifnull          631
		{
			TypedArray typedarray = context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, 0);
	//  241  478:aload_1         
	//  242  479:aload_2         
	//  243  480:getstatic       #545 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
	//  244  483:iload_3         
	//  245  484:iconst_0        
	//  246  485:invokevirtual   #454 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  247  488:astore          6
			String s = typedarray.getString(android.support.v7.recyclerview.R.styleable.RecyclerView_layoutManager);
	//  248  490:aload           6
	//  249  492:getstatic       #548 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_layoutManager>
	//  250  495:invokevirtual   #552 <Method String TypedArray.getString(int)>
	//  251  498:astore          7
			if(typedarray.getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_descendantFocusability, -1) == -1)
	//* 252  500:aload           6
	//* 253  502:getstatic       #555 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_descendantFocusability>
	//* 254  505:iconst_m1       
	//* 255  506:invokevirtual   #559 <Method int TypedArray.getInt(int, int)>
	//* 256  509:iconst_m1       
	//* 257  510:icmpne          520
				setDescendantFocusability(0x40000);
	//  258  513:aload_0         
	//  259  514:ldc2            #560 <Int 0x40000>
	//  260  517:invokevirtual   #564 <Method void setDescendantFocusability(int)>
			mEnableFastScroller = typedarray.getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollEnabled, false);
	//  261  520:aload_0         
	//  262  521:aload           6
	//  263  523:getstatic       #567 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollEnabled>
	//  264  526:iconst_0        
	//  265  527:invokevirtual   #460 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  266  530:putfield        #569 <Field boolean mEnableFastScroller>
			if(mEnableFastScroller)
	//* 267  533:aload_0         
	//* 268  534:getfield        #569 <Field boolean mEnableFastScroller>
	//* 269  537:ifeq            582
				initFastScroller((StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalTrackDrawable), (StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalTrackDrawable));
	//  270  540:aload_0         
	//  271  541:aload           6
	//  272  543:getstatic       #572 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalThumbDrawable>
	//  273  546:invokevirtual   #576 <Method Drawable TypedArray.getDrawable(int)>
	//  274  549:checkcast       #578 <Class StateListDrawable>
	//  275  552:aload           6
	//  276  554:getstatic       #581 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalTrackDrawable>
	//  277  557:invokevirtual   #576 <Method Drawable TypedArray.getDrawable(int)>
	//  278  560:aload           6
	//  279  562:getstatic       #584 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalThumbDrawable>
	//  280  565:invokevirtual   #576 <Method Drawable TypedArray.getDrawable(int)>
	//  281  568:checkcast       #578 <Class StateListDrawable>
	//  282  571:aload           6
	//  283  573:getstatic       #587 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalTrackDrawable>
	//  284  576:invokevirtual   #576 <Method Drawable TypedArray.getDrawable(int)>
	//  285  579:invokevirtual   #591 <Method void initFastScroller(StateListDrawable, Drawable, StateListDrawable, Drawable)>
			typedarray.recycle();
	//  286  582:aload           6
	//  287  584:invokevirtual   #465 <Method void TypedArray.recycle()>
			createLayoutManager(context, s, attributeset, i, 0);
	//  288  587:aload_0         
	//  289  588:aload_1         
	//  290  589:aload           7
	//  291  591:aload_2         
	//  292  592:iload_3         
	//  293  593:iconst_0        
	//  294  594:invokespecial   #595 <Method void createLayoutManager(Context, String, AttributeSet, int, int)>
			if(android.os.Build.VERSION.SDK_INT >= 21)
	//* 295  597:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//* 296  600:bipush          21
	//* 297  602:icmplt          628
			{
				context = ((Context) (context.obtainStyledAttributes(attributeset, NESTED_SCROLLING_ATTRS, i, 0)));
	//  298  605:aload_1         
	//  299  606:aload_2         
	//  300  607:getstatic       #307 <Field int[] NESTED_SCROLLING_ATTRS>
	//  301  610:iload_3         
	//  302  611:iconst_0        
	//  303  612:invokevirtual   #454 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  304  615:astore_1        
				flag = ((TypedArray) (context)).getBoolean(0, true);
	//  305  616:aload_1         
	//  306  617:iconst_0        
	//  307  618:iconst_1        
	//  308  619:invokevirtual   #460 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  309  622:istore          4
				((TypedArray) (context)).recycle();
	//  310  624:aload_1         
	//  311  625:invokevirtual   #465 <Method void TypedArray.recycle()>
			}
		} else
	//* 312  628:goto            642
		{
			setDescendantFocusability(0x40000);
	//  313  631:aload_0         
	//  314  632:ldc2            #560 <Int 0x40000>
	//  315  635:invokevirtual   #564 <Method void setDescendantFocusability(int)>
			flag = flag1;
	//  316  638:iload           5
	//  317  640:istore          4
		}
		setNestedScrollingEnabled(flag);
	//  318  642:aload_0         
	//  319  643:iload           4
	//  320  645:invokevirtual   #598 <Method void setNestedScrollingEnabled(boolean)>
	//  321  648:return          
	}

	private void addAnimatingView(ViewHolder viewholder)
	{
		View view = viewholder.itemView;
	//    0    0:aload_1         
	//    1    1:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//    2    4:astore_3        
		boolean flag;
		if(view.getParent() == this)
	//*   3    5:aload_3         
	//*   4    6:invokevirtual   #634 <Method ViewParent View.getParent()>
	//*   5    9:aload_0         
	//*   6   10:if_acmpne       18
			flag = true;
	//    7   13:iconst_1        
	//    8   14:istore_2        
		else
	//*   9   15:goto            20
			flag = false;
	//   10   18:iconst_0        
	//   11   19:istore_2        
		mRecycler.unscrapView(getChildViewHolder(view));
	//   12   20:aload_0         
	//   13   21:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   14   24:aload_0         
	//   15   25:aload_3         
	//   16   26:invokevirtual   #638 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   29:invokevirtual   #641 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		if(viewholder.isTmpDetached())
	//*  18   32:aload_1         
	//*  19   33:invokevirtual   #644 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*  20   36:ifeq            54
		{
			mChildHelper.attachViewToParent(view, -1, view.getLayoutParams(), true);
	//   21   39:aload_0         
	//   22   40:getfield        #646 <Field ChildHelper mChildHelper>
	//   23   43:aload_3         
	//   24   44:iconst_m1       
	//   25   45:aload_3         
	//   26   46:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   27   49:iconst_1        
	//   28   50:invokevirtual   #655 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			return;
	//   29   53:return          
		}
		if(!flag)
	//*  30   54:iload_2         
	//*  31   55:ifne            68
		{
			mChildHelper.addView(view, true);
	//   32   58:aload_0         
	//   33   59:getfield        #646 <Field ChildHelper mChildHelper>
	//   34   62:aload_3         
	//   35   63:iconst_1        
	//   36   64:invokevirtual   #659 <Method void ChildHelper.addView(View, boolean)>
			return;
	//   37   67:return          
		} else
		{
			mChildHelper.hide(view);
	//   38   68:aload_0         
	//   39   69:getfield        #646 <Field ChildHelper mChildHelper>
	//   40   72:aload_3         
	//   41   73:invokevirtual   #663 <Method void ChildHelper.hide(View)>
			return;
	//   42   76:return          
		}
	}

	private void animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1, boolean flag, boolean flag1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #669 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(flag)
	//*   3    5:iload           5
	//*   4    7:ifeq            15
			addAnimatingView(viewholder);
	//    5   10:aload_0         
	//    6   11:aload_1         
	//    7   12:invokespecial   #671 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		if(viewholder != viewholder1)
	//*   8   15:aload_1         
	//*   9   16:aload_2         
	//*  10   17:if_acmpeq       58
		{
			if(flag1)
	//*  11   20:iload           6
	//*  12   22:ifeq            30
				addAnimatingView(viewholder1);
	//   13   25:aload_0         
	//   14   26:aload_2         
	//   15   27:invokespecial   #671 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			viewholder.mShadowedHolder = viewholder1;
	//   16   30:aload_1         
	//   17   31:aload_2         
	//   18   32:putfield        #675 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			addAnimatingView(viewholder);
	//   19   35:aload_0         
	//   20   36:aload_1         
	//   21   37:invokespecial   #671 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			mRecycler.unscrapView(viewholder);
	//   22   40:aload_0         
	//   23   41:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   24   44:aload_1         
	//   25   45:invokevirtual   #641 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			viewholder1.setIsRecyclable(false);
	//   26   48:aload_2         
	//   27   49:iconst_0        
	//   28   50:invokevirtual   #669 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			viewholder1.mShadowingHolder = viewholder;
	//   29   53:aload_2         
	//   30   54:aload_1         
	//   31   55:putfield        #678 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		}
		if(mItemAnimator.animateChange(viewholder, viewholder1, itemholderinfo, itemholderinfo1))
	//*  32   58:aload_0         
	//*  33   59:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   62:aload_1         
	//*  35   63:aload_2         
	//*  36   64:aload_3         
	//*  37   65:aload           4
	//*  38   67:invokevirtual   #681 <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  39   70:ifeq            77
			postAnimationRunner();
	//   40   73:aload_0         
	//   41   74:invokevirtual   #684 <Method void postAnimationRunner()>
	//   42   77:return          
	}

	private void cancelTouch()
	{
		resetTouch();
	//    0    0:aload_0         
	//    1    1:invokespecial   #688 <Method void resetTouch()>
		setScrollState(0);
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:invokevirtual   #691 <Method void setScrollState(int)>
	//    5    9:return          
	}

	static void clearNestedRecyclerViewIfNotNested(ViewHolder viewholder)
	{
		if(viewholder.mNestedRecyclerView != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #696 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   2    4:ifnull          61
		{
			for(Object obj = ((Object) ((View)viewholder.mNestedRecyclerView.get())); obj != null;)
	//*   3    7:aload_0         
	//*   4    8:getfield        #696 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   5   11:invokevirtual   #701 <Method Object WeakReference.get()>
	//*   6   14:checkcast       #630 <Class View>
	//*   7   17:astore_1        
	//*   8   18:aload_1         
	//*   9   19:ifnull          56
			{
				if(obj == viewholder.itemView)
	//*  10   22:aload_1         
	//*  11   23:aload_0         
	//*  12   24:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  13   27:if_acmpne       31
					return;
	//   14   30:return          
				obj = ((Object) (((View) (obj)).getParent()));
	//   15   31:aload_1         
	//   16   32:invokevirtual   #634 <Method ViewParent View.getParent()>
	//   17   35:astore_1        
				if(obj instanceof View)
	//*  18   36:aload_1         
	//*  19   37:instanceof      #630 <Class View>
	//*  20   40:ifeq            51
					obj = ((Object) ((View)obj));
	//   21   43:aload_1         
	//   22   44:checkcast       #630 <Class View>
	//   23   47:astore_1        
				else
	//*  24   48:goto            53
					obj = null;
	//   25   51:aconst_null     
	//   26   52:astore_1        
			}

	//*  27   53:goto            18
			viewholder.mNestedRecyclerView = null;
	//   28   56:aload_0         
	//   29   57:aconst_null     
	//   30   58:putfield        #696 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		}
	//   31   61:return          
	}

	private void createLayoutManager(Context context, String s, AttributeSet attributeset, int i, int j)
	{
		String s1;
		if(s == null)
			break MISSING_BLOCK_LABEL_387;
	//    0    0:aload_2         
	//    1    1:ifnull          387
		s = s.trim();
	//    2    4:aload_2         
	//    3    5:invokevirtual   #719 <Method String String.trim()>
	//    4    8:astore_2        
		if(s.length() == 0)
			break MISSING_BLOCK_LABEL_387;
	//    5    9:aload_2         
	//    6   10:invokevirtual   #722 <Method int String.length()>
	//    7   13:ifeq            387
		s1 = getFullClassName(context, s);
	//    8   16:aload_0         
	//    9   17:aload_1         
	//   10   18:aload_2         
	//   11   19:invokespecial   #726 <Method String getFullClassName(Context, String)>
	//   12   22:astore          7
		if(isInEditMode())
	//*  13   24:aload_0         
	//*  14   25:invokevirtual   #729 <Method boolean isInEditMode()>
	//*  15   28:ifeq            42
		{
			s = ((String) (((Object)this).getClass().getClassLoader()));
	//   16   31:aload_0         
	//   17   32:invokevirtual   #735 <Method Class Object.getClass()>
	//   18   35:invokevirtual   #739 <Method ClassLoader Class.getClassLoader()>
	//   19   38:astore_2        
			break MISSING_BLOCK_LABEL_47;
	//   20   39:goto            47
		}
		s = ((String) (context.getClassLoader()));
	//   21   42:aload_1         
	//   22   43:invokevirtual   #740 <Method ClassLoader Context.getClassLoader()>
	//   23   46:astore_2        
		Class class1 = ((ClassLoader) (s)).loadClass(s1).asSubclass(android/support/v7/widget/RecyclerView$LayoutManager);
	//   24   47:aload_2         
	//   25   48:aload           7
	//   26   50:invokevirtual   #746 <Method Class ClassLoader.loadClass(String)>
	//   27   53:ldc1            #55  <Class RecyclerView$LayoutManager>
	//   28   55:invokevirtual   #750 <Method Class Class.asSubclass(Class)>
	//   29   58:astore          8
		s = null;
	//   30   60:aconst_null     
	//   31   61:astore_2        
		Constructor constructor = class1.getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE);
	//   32   62:aload           8
	//   33   64:getstatic       #341 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   34   67:invokevirtual   #754 <Method Constructor Class.getConstructor(Class[])>
	//   35   70:astore          6
		s = ((String) (new Object[] {
			context, attributeset, Integer.valueOf(i), Integer.valueOf(j)
		}));
	//   36   72:iconst_4        
	//   37   73:anewarray       Object[]
	//   38   76:dup             
	//   39   77:iconst_0        
	//   40   78:aload_1         
	//   41   79:aastore         
	//   42   80:dup             
	//   43   81:iconst_1        
	//   44   82:aload_3         
	//   45   83:aastore         
	//   46   84:dup             
	//   47   85:iconst_2        
	//   48   86:iload           4
	//   49   88:invokestatic    #758 <Method Integer Integer.valueOf(int)>
	//   50   91:aastore         
	//   51   92:dup             
	//   52   93:iconst_3        
	//   53   94:iload           5
	//   54   96:invokestatic    #758 <Method Integer Integer.valueOf(int)>
	//   55   99:aastore         
	//   56  100:astore_2        
		context = ((Context) (constructor));
	//   57  101:aload           6
	//   58  103:astore_1        
		break MISSING_BLOCK_LABEL_169;
	//   59  104:goto            169
		NoSuchMethodException nosuchmethodexception;
		nosuchmethodexception;
	//   60  107:astore          6
		try
		{
			context = ((Context) (class1.getConstructor(new Class[0])));
	//   61  109:aload           8
	//   62  111:iconst_0        
	//   63  112:anewarray       Class[]
	//   64  115:invokevirtual   #754 <Method Constructor Class.getConstructor(Class[])>
	//   65  118:astore_1        
			break MISSING_BLOCK_LABEL_169;
	//   66  119:goto            169
		}
		// Misplaced declaration of an exception variable
		catch(Context context) { }
	//   67  122:astore_1        
	//*  68  123:aload_1         
	//*  69  124:aload           6
	//*  70  126:invokevirtual   #762 <Method Throwable NoSuchMethodException.initCause(Throwable)>
	//*  71  129:pop             
	//*  72  130:new             #764 <Class IllegalStateException>
	//*  73  133:dup             
	//*  74  134:new             #766 <Class StringBuilder>
	//*  75  137:dup             
	//*  76  138:invokespecial   #767 <Method void StringBuilder()>
	//*  77  141:aload_3         
	//*  78  142:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//*  79  147:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//*  80  150:ldc2            #776 <String ": Error creating LayoutManager ">
	//*  81  153:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//*  82  156:aload           7
	//*  83  158:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//*  84  161:invokevirtual   #779 <Method String StringBuilder.toString()>
	//*  85  164:aload_1         
	//*  86  165:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//*  87  168:athrow          
	//*  88  169:aload_1         
	//*  89  170:iconst_1        
	//*  90  171:invokevirtual   #787 <Method void Constructor.setAccessible(boolean)>
	//*  91  174:aload_0         
	//*  92  175:aload_1         
	//*  93  176:aload_2         
	//*  94  177:invokevirtual   #791 <Method Object Constructor.newInstance(Object[])>
	//*  95  180:checkcast       #55  <Class RecyclerView$LayoutManager>
	//*  96  183:invokevirtual   #795 <Method void setLayoutManager(RecyclerView$LayoutManager)>
	//*  97  186:return          
		// Misplaced declaration of an exception variable
		catch(Context context)
	//*  98  187:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Unable to find LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//   99  188:new             #764 <Class IllegalStateException>
	//  100  191:dup             
	//  101  192:new             #766 <Class StringBuilder>
	//  102  195:dup             
	//  103  196:invokespecial   #767 <Method void StringBuilder()>
	//  104  199:aload_3         
	//  105  200:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//  106  205:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  107  208:ldc2            #797 <String ": Unable to find LayoutManager ">
	//  108  211:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  109  214:aload           7
	//  110  216:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  111  219:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  112  222:aload_1         
	//  113  223:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//  114  226:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 115  227:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  116  228:new             #764 <Class IllegalStateException>
	//  117  231:dup             
	//  118  232:new             #766 <Class StringBuilder>
	//  119  235:dup             
	//  120  236:invokespecial   #767 <Method void StringBuilder()>
	//  121  239:aload_3         
	//  122  240:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//  123  245:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  124  248:ldc2            #799 <String ": Could not instantiate the LayoutManager: ">
	//  125  251:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  126  254:aload           7
	//  127  256:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  128  259:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  129  262:aload_1         
	//  130  263:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//  131  266:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 132  267:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  133  268:new             #764 <Class IllegalStateException>
	//  134  271:dup             
	//  135  272:new             #766 <Class StringBuilder>
	//  136  275:dup             
	//  137  276:invokespecial   #767 <Method void StringBuilder()>
	//  138  279:aload_3         
	//  139  280:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//  140  285:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  141  288:ldc2            #799 <String ": Could not instantiate the LayoutManager: ">
	//  142  291:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  143  294:aload           7
	//  144  296:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  145  299:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  146  302:aload_1         
	//  147  303:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//  148  306:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 149  307:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Cannot access non-public constructor ").append(s1).toString(), ((Throwable) (context)));
	//  150  308:new             #764 <Class IllegalStateException>
	//  151  311:dup             
	//  152  312:new             #766 <Class StringBuilder>
	//  153  315:dup             
	//  154  316:invokespecial   #767 <Method void StringBuilder()>
	//  155  319:aload_3         
	//  156  320:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//  157  325:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  158  328:ldc2            #801 <String ": Cannot access non-public constructor ">
	//  159  331:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  160  334:aload           7
	//  161  336:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  162  339:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  163  342:aload_1         
	//  164  343:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//  165  346:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 166  347:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Class is not a LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//  167  348:new             #764 <Class IllegalStateException>
	//  168  351:dup             
	//  169  352:new             #766 <Class StringBuilder>
	//  170  355:dup             
	//  171  356:invokespecial   #767 <Method void StringBuilder()>
	//  172  359:aload_3         
	//  173  360:invokeinterface #770 <Method String AttributeSet.getPositionDescription()>
	//  174  365:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  175  368:ldc2            #803 <String ": Class is not a LayoutManager ">
	//  176  371:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  177  374:aload           7
	//  178  376:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  179  379:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  180  382:aload_1         
	//  181  383:invokespecial   #782 <Method void IllegalStateException(String, Throwable)>
	//  182  386:athrow          
		}
		((NoSuchMethodException) (context)).initCause(((Throwable) (nosuchmethodexception)));
		throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Error creating LayoutManager ").append(s1).toString(), ((Throwable) (context)));
		((Constructor) (context)).setAccessible(true);
		setLayoutManager((LayoutManager)((Constructor) (context)).newInstance(((Object []) (s))));
		return;
	//  183  387:return          
	}

	private boolean didChildRangeChange(int i, int j)
	{
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//    3    5:invokespecial   #809 <Method void findMinMaxChildLayoutPositions(int[])>
		return mMinMaxLayoutPositions[0] != i || mMinMaxLayoutPositions[1] != j;
	//    4    8:aload_0         
	//    5    9:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//    6   12:iconst_0        
	//    7   13:iaload          
	//    8   14:iload_1         
	//    9   15:icmpne          28
	//   10   18:aload_0         
	//   11   19:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//   12   22:iconst_1        
	//   13   23:iaload          
	//   14   24:iload_2         
	//   15   25:icmpeq          30
	//   16   28:iconst_1        
	//   17   29:ireturn         
	//   18   30:iconst_0        
	//   19   31:ireturn         
	}

	private void dispatchContentChangedIfNecessary()
	{
		int i = mEatenAccessibilityChangeFlags;
	//    0    0:aload_0         
	//    1    1:getfield        #812 <Field int mEatenAccessibilityChangeFlags>
	//    2    4:istore_1        
		mEatenAccessibilityChangeFlags = 0;
	//    3    5:aload_0         
	//    4    6:iconst_0        
	//    5    7:putfield        #812 <Field int mEatenAccessibilityChangeFlags>
		if(i != 0 && isAccessibilityEnabled())
	//*   6   10:iload_1         
	//*   7   11:ifeq            42
	//*   8   14:aload_0         
	//*   9   15:invokevirtual   #815 <Method boolean isAccessibilityEnabled()>
	//*  10   18:ifeq            42
		{
			AccessibilityEvent accessibilityevent = AccessibilityEvent.obtain();
	//   11   21:invokestatic    #821 <Method AccessibilityEvent AccessibilityEvent.obtain()>
	//   12   24:astore_2        
			accessibilityevent.setEventType(2048);
	//   13   25:aload_2         
	//   14   26:sipush          2048
	//   15   29:invokevirtual   #824 <Method void AccessibilityEvent.setEventType(int)>
			AccessibilityEventCompat.setContentChangeTypes(accessibilityevent, i);
	//   16   32:aload_2         
	//   17   33:iload_1         
	//   18   34:invokestatic    #830 <Method void AccessibilityEventCompat.setContentChangeTypes(AccessibilityEvent, int)>
			sendAccessibilityEventUnchecked(accessibilityevent);
	//   19   37:aload_0         
	//   20   38:aload_2         
	//   21   39:invokevirtual   #834 <Method void sendAccessibilityEventUnchecked(AccessibilityEvent)>
		}
	//   22   42:return          
	}

	private void dispatchLayoutStep1()
	{
		mState.assertLayoutStep(1);
	//    0    0:aload_0         
	//    1    1:getfield        #425 <Field RecyclerView$State mState>
	//    2    4:iconst_1        
	//    3    5:invokevirtual   #838 <Method void RecyclerView$State.assertLayoutStep(int)>
		mState.mIsMeasuring = false;
	//    4    8:aload_0         
	//    5    9:getfield        #425 <Field RecyclerView$State mState>
	//    6   12:iconst_0        
	//    7   13:putfield        #841 <Field boolean RecyclerView$State.mIsMeasuring>
		eatRequestLayout();
	//    8   16:aload_0         
	//    9   17:invokevirtual   #844 <Method void eatRequestLayout()>
		mViewInfoStore.clear();
	//   10   20:aload_0         
	//   11   21:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   12   24:invokevirtual   #847 <Method void ViewInfoStore.clear()>
		onEnterLayoutOrScroll();
	//   13   27:aload_0         
	//   14   28:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
		processAdapterUpdatesAndSetAnimationFlags();
	//   15   31:aload_0         
	//   16   32:invokespecial   #853 <Method void processAdapterUpdatesAndSetAnimationFlags()>
		saveFocusInfo();
	//   17   35:aload_0         
	//   18   36:invokespecial   #856 <Method void saveFocusInfo()>
		State state = mState;
	//   19   39:aload_0         
	//   20   40:getfield        #425 <Field RecyclerView$State mState>
	//   21   43:astore          7
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemsChanged)
	//*  22   45:aload_0         
	//*  23   46:getfield        #425 <Field RecyclerView$State mState>
	//*  24   49:getfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  25   52:ifeq            68
	//*  26   55:aload_0         
	//*  27   56:getfield        #429 <Field boolean mItemsChanged>
	//*  28   59:ifeq            68
			flag = true;
	//   29   62:iconst_1        
	//   30   63:istore          4
		else
	//*  31   65:goto            71
			flag = false;
	//   32   68:iconst_0        
	//   33   69:istore          4
		state.mTrackOldChangeHolders = flag;
	//   34   71:aload           7
	//   35   73:iload           4
	//   36   75:putfield        #862 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
		mItemsChanged = false;
	//   37   78:aload_0         
	//   38   79:iconst_0        
	//   39   80:putfield        #429 <Field boolean mItemsChanged>
		mItemsAddedOrRemoved = false;
	//   40   83:aload_0         
	//   41   84:iconst_0        
	//   42   85:putfield        #427 <Field boolean mItemsAddedOrRemoved>
		mState.mInPreLayout = mState.mRunPredictiveAnimations;
	//   43   88:aload_0         
	//   44   89:getfield        #425 <Field RecyclerView$State mState>
	//   45   92:aload_0         
	//   46   93:getfield        #425 <Field RecyclerView$State mState>
	//   47   96:getfield        #865 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   48   99:putfield        #868 <Field boolean RecyclerView$State.mInPreLayout>
		mState.mItemCount = mAdapter.getItemCount();
	//   49  102:aload_0         
	//   50  103:getfield        #425 <Field RecyclerView$State mState>
	//   51  106:aload_0         
	//   52  107:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   53  110:invokevirtual   #873 <Method int RecyclerView$Adapter.getItemCount()>
	//   54  113:putfield        #876 <Field int RecyclerView$State.mItemCount>
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//   55  116:aload_0         
	//   56  117:aload_0         
	//   57  118:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//   58  121:invokespecial   #809 <Method void findMinMaxChildLayoutPositions(int[])>
		if(mState.mRunSimpleAnimations)
	//*  59  124:aload_0         
	//*  60  125:getfield        #425 <Field RecyclerView$State mState>
	//*  61  128:getfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  62  131:ifeq            295
		{
			int k = mChildHelper.getChildCount();
	//   63  134:aload_0         
	//   64  135:getfield        #646 <Field ChildHelper mChildHelper>
	//   65  138:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//   66  141:istore_2        
			for(int i = 0; i < k; i++)
	//*  67  142:iconst_0        
	//*  68  143:istore_1        
	//*  69  144:iload_1         
	//*  70  145:iload_2         
	//*  71  146:icmpge          295
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   72  149:aload_0         
	//   73  150:getfield        #646 <Field ChildHelper mChildHelper>
	//   74  153:iload_1         
	//   75  154:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   76  157:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   77  160:astore          7
				if(viewholder.shouldIgnore() || viewholder.isInvalid() && !mAdapter.hasStableIds())
	//*  78  162:aload           7
	//*  79  164:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  80  167:ifne            288
	//*  81  170:aload           7
	//*  82  172:invokevirtual   #892 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//*  83  175:ifeq            191
	//*  84  178:aload_0         
	//*  85  179:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  86  182:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  87  185:ifne            191
					continue;
	//   88  188:goto            288
				ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, viewholder, ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder), viewholder.getUnmodifiedPayloads());
	//   89  191:aload_0         
	//   90  192:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   91  195:aload_0         
	//   92  196:getfield        #425 <Field RecyclerView$State mState>
	//   93  199:aload           7
	//   94  201:aload           7
	//   95  203:invokestatic    #899 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//   96  206:aload           7
	//   97  208:invokevirtual   #903 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//   98  211:invokevirtual   #907 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//   99  214:astore          8
				mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//  100  216:aload_0         
	//  101  217:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  102  220:aload           7
	//  103  222:aload           8
	//  104  224:invokevirtual   #911 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore() && !viewholder.isInvalid())
	//* 105  227:aload_0         
	//* 106  228:getfield        #425 <Field RecyclerView$State mState>
	//* 107  231:getfield        #862 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//* 108  234:ifeq            288
	//* 109  237:aload           7
	//* 110  239:invokevirtual   #914 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//* 111  242:ifeq            288
	//* 112  245:aload           7
	//* 113  247:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//* 114  250:ifne            288
	//* 115  253:aload           7
	//* 116  255:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 117  258:ifne            288
	//* 118  261:aload           7
	//* 119  263:invokevirtual   #892 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//* 120  266:ifne            288
				{
					long l1 = getChangedHolderKey(viewholder);
	//  121  269:aload_0         
	//  122  270:aload           7
	//  123  272:invokevirtual   #921 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//  124  275:lstore          5
					mViewInfoStore.addToOldChangeHolders(l1, viewholder);
	//  125  277:aload_0         
	//  126  278:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  127  281:lload           5
	//  128  283:aload           7
	//  129  285:invokevirtual   #925 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
				}
			}

	//  130  288:iload_1         
	//  131  289:iconst_1        
	//  132  290:iadd            
	//  133  291:istore_1        
		}
	//* 134  292:goto            144
		if(mState.mRunPredictiveAnimations)
	//* 135  295:aload_0         
	//* 136  296:getfield        #425 <Field RecyclerView$State mState>
	//* 137  299:getfield        #865 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 138  302:ifeq            490
		{
			saveOldPositions();
	//  139  305:aload_0         
	//  140  306:invokevirtual   #928 <Method void saveOldPositions()>
			boolean flag1 = mState.mStructureChanged;
	//  141  309:aload_0         
	//  142  310:getfield        #425 <Field RecyclerView$State mState>
	//  143  313:getfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
	//  144  316:istore          4
			mState.mStructureChanged = false;
	//  145  318:aload_0         
	//  146  319:getfield        #425 <Field RecyclerView$State mState>
	//  147  322:iconst_0        
	//  148  323:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
			mLayout.onLayoutChildren(mRecycler, mState);
	//  149  326:aload_0         
	//  150  327:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  151  330:aload_0         
	//  152  331:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  153  334:aload_0         
	//  154  335:getfield        #425 <Field RecyclerView$State mState>
	//  155  338:invokevirtual   #937 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
			mState.mStructureChanged = flag1;
	//  156  341:aload_0         
	//  157  342:getfield        #425 <Field RecyclerView$State mState>
	//  158  345:iload           4
	//  159  347:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
			for(int j = 0; j < mChildHelper.getChildCount(); j++)
	//* 160  350:iconst_0        
	//* 161  351:istore_1        
	//* 162  352:iload_1         
	//* 163  353:aload_0         
	//* 164  354:getfield        #646 <Field ChildHelper mChildHelper>
	//* 165  357:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//* 166  360:icmpge          483
			{
				ViewHolder viewholder1 = getChildViewHolderInt(mChildHelper.getChildAt(j));
	//  167  363:aload_0         
	//  168  364:getfield        #646 <Field ChildHelper mChildHelper>
	//  169  367:iload_1         
	//  170  368:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//  171  371:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//  172  374:astore          7
				if(viewholder1.shouldIgnore() || mViewInfoStore.isInPreLayout(viewholder1))
					continue;
	//  173  376:aload           7
	//  174  378:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//  175  381:ifeq            387
	//  176  384:goto            476
	//  177  387:aload_0         
	//  178  388:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  179  391:aload           7
	//  180  393:invokevirtual   #941 <Method boolean ViewInfoStore.isInPreLayout(RecyclerView$ViewHolder)>
	//  181  396:ifne            476
				int i1 = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder1);
	//  182  399:aload           7
	//  183  401:invokestatic    #899 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  184  404:istore_3        
				boolean flag2 = viewholder1.hasAnyOfTheFlags(8192);
	//  185  405:aload           7
	//  186  407:sipush          8192
	//  187  410:invokevirtual   #945 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//  188  413:istore          4
				int l = i1;
	//  189  415:iload_3         
	//  190  416:istore_2        
				if(!flag2)
	//* 191  417:iload           4
	//* 192  419:ifne            428
					l = i1 | 0x1000;
	//  193  422:iload_3         
	//  194  423:sipush          4096
	//  195  426:ior             
	//  196  427:istore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPreLayoutInformation(mState, viewholder1, l, viewholder1.getUnmodifiedPayloads());
	//  197  428:aload_0         
	//  198  429:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  199  432:aload_0         
	//  200  433:getfield        #425 <Field RecyclerView$State mState>
	//  201  436:aload           7
	//  202  438:iload_2         
	//  203  439:aload           7
	//  204  441:invokevirtual   #903 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  205  444:invokevirtual   #907 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  206  447:astore          8
				if(flag2)
	//* 207  449:iload           4
	//* 208  451:ifeq            465
					recordAnimationInfoIfBouncedHiddenView(viewholder1, itemholderinfo1);
	//  209  454:aload_0         
	//  210  455:aload           7
	//  211  457:aload           8
	//  212  459:invokevirtual   #948 <Method void recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				else
	//* 213  462:goto            476
					mViewInfoStore.addToAppearedInPreLayoutHolders(viewholder1, itemholderinfo1);
	//  214  465:aload_0         
	//  215  466:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  216  469:aload           7
	//  217  471:aload           8
	//  218  473:invokevirtual   #951 <Method void ViewInfoStore.addToAppearedInPreLayoutHolders(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
			}

	//  219  476:iload_1         
	//  220  477:iconst_1        
	//  221  478:iadd            
	//  222  479:istore_1        
	//* 223  480:goto            352
			clearOldPositions();
	//  224  483:aload_0         
	//  225  484:invokevirtual   #954 <Method void clearOldPositions()>
		} else
	//* 226  487:goto            494
		{
			clearOldPositions();
	//  227  490:aload_0         
	//  228  491:invokevirtual   #954 <Method void clearOldPositions()>
		}
		onExitLayoutOrScroll();
	//  229  494:aload_0         
	//  230  495:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  231  498:aload_0         
	//  232  499:iconst_0        
	//  233  500:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		mState.mLayoutStep = 2;
	//  234  503:aload_0         
	//  235  504:getfield        #425 <Field RecyclerView$State mState>
	//  236  507:iconst_2        
	//  237  508:putfield        #963 <Field int RecyclerView$State.mLayoutStep>
	//  238  511:return          
	}

	private void dispatchLayoutStep2()
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #844 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
		mState.assertLayoutStep(6);
	//    4    8:aload_0         
	//    5    9:getfield        #425 <Field RecyclerView$State mState>
	//    6   12:bipush          6
	//    7   14:invokevirtual   #838 <Method void RecyclerView$State.assertLayoutStep(int)>
		mAdapterHelper.consumeUpdatesInOnePass();
	//    8   17:aload_0         
	//    9   18:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   10   21:invokevirtual   #971 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		mState.mItemCount = mAdapter.getItemCount();
	//   11   24:aload_0         
	//   12   25:getfield        #425 <Field RecyclerView$State mState>
	//   13   28:aload_0         
	//   14   29:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   15   32:invokevirtual   #873 <Method int RecyclerView$Adapter.getItemCount()>
	//   16   35:putfield        #876 <Field int RecyclerView$State.mItemCount>
		mState.mDeletedInvisibleItemCountSincePreviousLayout = 0;
	//   17   38:aload_0         
	//   18   39:getfield        #425 <Field RecyclerView$State mState>
	//   19   42:iconst_0        
	//   20   43:putfield        #974 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
		mState.mInPreLayout = false;
	//   21   46:aload_0         
	//   22   47:getfield        #425 <Field RecyclerView$State mState>
	//   23   50:iconst_0        
	//   24   51:putfield        #868 <Field boolean RecyclerView$State.mInPreLayout>
		mLayout.onLayoutChildren(mRecycler, mState);
	//   25   54:aload_0         
	//   26   55:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   27   58:aload_0         
	//   28   59:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   29   62:aload_0         
	//   30   63:getfield        #425 <Field RecyclerView$State mState>
	//   31   66:invokevirtual   #937 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = false;
	//   32   69:aload_0         
	//   33   70:getfield        #425 <Field RecyclerView$State mState>
	//   34   73:iconst_0        
	//   35   74:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
		mPendingSavedState = null;
	//   36   77:aload_0         
	//   37   78:aconst_null     
	//   38   79:putfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
		State state = mState;
	//   39   82:aload_0         
	//   40   83:getfield        #425 <Field RecyclerView$State mState>
	//   41   86:astore_2        
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemAnimator != null)
	//*  42   87:aload_0         
	//*  43   88:getfield        #425 <Field RecyclerView$State mState>
	//*  44   91:getfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  45   94:ifeq            109
	//*  46   97:aload_0         
	//*  47   98:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  48  101:ifnull          109
			flag = true;
	//   49  104:iconst_1        
	//   50  105:istore_1        
		else
	//*  51  106:goto            111
			flag = false;
	//   52  109:iconst_0        
	//   53  110:istore_1        
		state.mRunSimpleAnimations = flag;
	//   54  111:aload_2         
	//   55  112:iload_1         
	//   56  113:putfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mLayoutStep = 4;
	//   57  116:aload_0         
	//   58  117:getfield        #425 <Field RecyclerView$State mState>
	//   59  120:iconst_4        
	//   60  121:putfield        #963 <Field int RecyclerView$State.mLayoutStep>
		onExitLayoutOrScroll();
	//   61  124:aload_0         
	//   62  125:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//   63  128:aload_0         
	//   64  129:iconst_0        
	//   65  130:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
	//   66  133:return          
	}

	private void dispatchLayoutStep3()
	{
		mState.assertLayoutStep(4);
	//    0    0:aload_0         
	//    1    1:getfield        #425 <Field RecyclerView$State mState>
	//    2    4:iconst_4        
	//    3    5:invokevirtual   #838 <Method void RecyclerView$State.assertLayoutStep(int)>
		eatRequestLayout();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #844 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    6   12:aload_0         
	//    7   13:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
		mState.mLayoutStep = 1;
	//    8   16:aload_0         
	//    9   17:getfield        #425 <Field RecyclerView$State mState>
	//   10   20:iconst_1        
	//   11   21:putfield        #963 <Field int RecyclerView$State.mLayoutStep>
		if(mState.mRunSimpleAnimations)
	//*  12   24:aload_0         
	//*  13   25:getfield        #425 <Field RecyclerView$State mState>
	//*  14   28:getfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  15   31:ifeq            263
		{
			for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*  16   34:aload_0         
	//*  17   35:getfield        #646 <Field ChildHelper mChildHelper>
	//*  18   38:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//*  19   41:iconst_1        
	//*  20   42:isub            
	//*  21   43:istore_1        
	//*  22   44:iload_1         
	//*  23   45:iflt            252
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   24   48:aload_0         
	//   25   49:getfield        #646 <Field ChildHelper mChildHelper>
	//   26   52:iload_1         
	//   27   53:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   28   56:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   59:astore          6
				if(viewholder.shouldIgnore())
	//*  30   61:aload           6
	//*  31   63:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   66:ifeq            72
					continue;
	//   33   69:goto            245
				long l = getChangedHolderKey(viewholder);
	//   34   72:aload_0         
	//   35   73:aload           6
	//   36   75:invokevirtual   #921 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   37   78:lstore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPostLayoutInformation(mState, viewholder);
	//   38   79:aload_0         
	//   39   80:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   40   83:aload_0         
	//   41   84:getfield        #425 <Field RecyclerView$State mState>
	//   42   87:aload           6
	//   43   89:invokevirtual   #981 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPostLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder)>
	//   44   92:astore          9
				ViewHolder viewholder1 = mViewInfoStore.getFromOldChangeHolders(l);
	//   45   94:aload_0         
	//   46   95:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   47   98:lload_2         
	//   48   99:invokevirtual   #985 <Method RecyclerView$ViewHolder ViewInfoStore.getFromOldChangeHolders(long)>
	//   49  102:astore          7
				if(viewholder1 != null && !viewholder1.shouldIgnore())
	//*  50  104:aload           7
	//*  51  106:ifnull          234
	//*  52  109:aload           7
	//*  53  111:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  54  114:ifne            234
				{
					boolean flag = mViewInfoStore.isDisappearing(viewholder1);
	//   55  117:aload_0         
	//   56  118:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   57  121:aload           7
	//   58  123:invokevirtual   #988 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   59  126:istore          4
					boolean flag1 = mViewInfoStore.isDisappearing(viewholder);
	//   60  128:aload_0         
	//   61  129:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   62  132:aload           6
	//   63  134:invokevirtual   #988 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   64  137:istore          5
					if(flag && viewholder1 == viewholder)
	//*  65  139:iload           4
	//*  66  141:ifeq            165
	//*  67  144:aload           7
	//*  68  146:aload           6
	//*  69  148:if_acmpne       165
					{
						mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   70  151:aload_0         
	//   71  152:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   72  155:aload           6
	//   73  157:aload           9
	//   74  159:invokevirtual   #991 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
						continue;
	//   75  162:goto            231
					}
					ItemAnimator.ItemHolderInfo itemholderinfo = mViewInfoStore.popFromPreLayout(viewholder1);
	//   76  165:aload_0         
	//   77  166:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   78  169:aload           7
	//   79  171:invokevirtual   #995 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPreLayout(RecyclerView$ViewHolder)>
	//   80  174:astore          8
					mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   81  176:aload_0         
	//   82  177:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   83  180:aload           6
	//   84  182:aload           9
	//   85  184:invokevirtual   #991 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					itemholderinfo1 = mViewInfoStore.popFromPostLayout(viewholder);
	//   86  187:aload_0         
	//   87  188:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   88  191:aload           6
	//   89  193:invokevirtual   #998 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPostLayout(RecyclerView$ViewHolder)>
	//   90  196:astore          9
					if(itemholderinfo == null)
	//*  91  198:aload           8
	//*  92  200:ifnonnull       215
						handleMissingPreInfoForChangeError(l, viewholder, viewholder1);
	//   93  203:aload_0         
	//   94  204:lload_2         
	//   95  205:aload           6
	//   96  207:aload           7
	//   97  209:invokespecial   #1002 <Method void handleMissingPreInfoForChangeError(long, RecyclerView$ViewHolder, RecyclerView$ViewHolder)>
					else
	//*  98  212:goto            231
						animateChange(viewholder1, viewholder, itemholderinfo, itemholderinfo1, flag, flag1);
	//   99  215:aload_0         
	//  100  216:aload           7
	//  101  218:aload           6
	//  102  220:aload           8
	//  103  222:aload           9
	//  104  224:iload           4
	//  105  226:iload           5
	//  106  228:invokespecial   #1004 <Method void animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo, boolean, boolean)>
				} else
	//* 107  231:goto            245
				{
					mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//  108  234:aload_0         
	//  109  235:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  110  238:aload           6
	//  111  240:aload           9
	//  112  242:invokevirtual   #991 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				}
			}

	//  113  245:iload_1         
	//  114  246:iconst_1        
	//  115  247:isub            
	//  116  248:istore_1        
	//* 117  249:goto            44
			mViewInfoStore.process(mViewInfoProcessCallback);
	//  118  252:aload_0         
	//  119  253:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  120  256:aload_0         
	//  121  257:getfield        #450 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//  122  260:invokevirtual   #1008 <Method void ViewInfoStore.process(ViewInfoStore$ProcessCallback)>
		}
		mLayout.removeAndRecycleScrapInt(mRecycler);
	//  123  263:aload_0         
	//  124  264:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  125  267:aload_0         
	//  126  268:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  127  271:invokevirtual   #1012 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		mState.mPreviousLayoutItemCount = mState.mItemCount;
	//  128  274:aload_0         
	//  129  275:getfield        #425 <Field RecyclerView$State mState>
	//  130  278:aload_0         
	//  131  279:getfield        #425 <Field RecyclerView$State mState>
	//  132  282:getfield        #876 <Field int RecyclerView$State.mItemCount>
	//  133  285:putfield        #1015 <Field int RecyclerView$State.mPreviousLayoutItemCount>
		mDataSetHasChangedAfterLayout = false;
	//  134  288:aload_0         
	//  135  289:iconst_0        
	//  136  290:putfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
		mState.mRunSimpleAnimations = false;
	//  137  293:aload_0         
	//  138  294:getfield        #425 <Field RecyclerView$State mState>
	//  139  297:iconst_0        
	//  140  298:putfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mRunPredictiveAnimations = false;
	//  141  301:aload_0         
	//  142  302:getfield        #425 <Field RecyclerView$State mState>
	//  143  305:iconst_0        
	//  144  306:putfield        #865 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
		mLayout.mRequestedSimpleAnimations = false;
	//  145  309:aload_0         
	//  146  310:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  147  313:iconst_0        
	//  148  314:putfield        #1018 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
		if(mRecycler.mChangedScrap != null)
	//* 149  317:aload_0         
	//* 150  318:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//* 151  321:getfield        #1021 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//* 152  324:ifnull          337
			mRecycler.mChangedScrap.clear();
	//  153  327:aload_0         
	//  154  328:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  155  331:getfield        #1021 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//  156  334:invokevirtual   #1022 <Method void ArrayList.clear()>
		if(mLayout.mPrefetchMaxObservedInInitialPrefetch)
	//* 157  337:aload_0         
	//* 158  338:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//* 159  341:getfield        #1025 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
	//* 160  344:ifeq            370
		{
			mLayout.mPrefetchMaxCountObserved = 0;
	//  161  347:aload_0         
	//  162  348:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  163  351:iconst_0        
	//  164  352:putfield        #1028 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
			mLayout.mPrefetchMaxObservedInInitialPrefetch = false;
	//  165  355:aload_0         
	//  166  356:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  167  359:iconst_0        
	//  168  360:putfield        #1025 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
			mRecycler.updateViewCacheSize();
	//  169  363:aload_0         
	//  170  364:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  171  367:invokevirtual   #1031 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		}
		mLayout.onLayoutCompleted(mState);
	//  172  370:aload_0         
	//  173  371:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  174  374:aload_0         
	//  175  375:getfield        #425 <Field RecyclerView$State mState>
	//  176  378:invokevirtual   #1035 <Method void RecyclerView$LayoutManager.onLayoutCompleted(RecyclerView$State)>
		onExitLayoutOrScroll();
	//  177  381:aload_0         
	//  178  382:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  179  385:aload_0         
	//  180  386:iconst_0        
	//  181  387:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		mViewInfoStore.clear();
	//  182  390:aload_0         
	//  183  391:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//  184  394:invokevirtual   #847 <Method void ViewInfoStore.clear()>
		if(didChildRangeChange(mMinMaxLayoutPositions[0], mMinMaxLayoutPositions[1]))
	//* 185  397:aload_0         
	//* 186  398:aload_0         
	//* 187  399:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//* 188  402:iconst_0        
	//* 189  403:iaload          
	//* 190  404:aload_0         
	//* 191  405:getfield        #436 <Field int[] mMinMaxLayoutPositions>
	//* 192  408:iconst_1        
	//* 193  409:iaload          
	//* 194  410:invokespecial   #1037 <Method boolean didChildRangeChange(int, int)>
	//* 195  413:ifeq            422
			dispatchOnScrolled(0, 0);
	//  196  416:aload_0         
	//  197  417:iconst_0        
	//  198  418:iconst_0        
	//  199  419:invokevirtual   #1040 <Method void dispatchOnScrolled(int, int)>
		recoverFocusFromState();
	//  200  422:aload_0         
	//  201  423:invokespecial   #1043 <Method void recoverFocusFromState()>
		resetFocusInfo();
	//  202  426:aload_0         
	//  203  427:invokespecial   #1046 <Method void resetFocusInfo()>
	//  204  430:return          
	}

	private boolean dispatchOnItemTouch(MotionEvent motionevent)
	{
		int i = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1053 <Method int MotionEvent.getAction()>
	//    2    4:istore_2        
		if(mActiveOnItemTouchListener != null)
	//*   3    5:aload_0         
	//*   4    6:getfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   5    9:ifnull          52
			if(i == 0)
	//*   6   12:iload_2         
	//*   7   13:ifne            24
			{
				mActiveOnItemTouchListener = null;
	//    8   16:aload_0         
	//    9   17:aconst_null     
	//   10   18:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
			} else
	//*  11   21:goto            52
			{
				mActiveOnItemTouchListener.onTouchEvent(this, motionevent);
	//   12   24:aload_0         
	//   13   25:getfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   14   28:aload_0         
	//   15   29:aload_1         
	//   16   30:invokeinterface #1059 <Method void RecyclerView$OnItemTouchListener.onTouchEvent(RecyclerView, MotionEvent)>
				if(i == 3 || i == 1)
	//*  17   35:iload_2         
	//*  18   36:iconst_3        
	//*  19   37:icmpeq          45
	//*  20   40:iload_2         
	//*  21   41:iconst_1        
	//*  22   42:icmpne          50
					mActiveOnItemTouchListener = null;
	//   23   45:aload_0         
	//   24   46:aconst_null     
	//   25   47:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   26   50:iconst_1        
	//   27   51:ireturn         
			}
		if(i != 0)
	//*  28   52:iload_2         
	//*  29   53:ifeq            111
		{
			int k = mOnItemTouchListeners.size();
	//   30   56:aload_0         
	//   31   57:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//   32   60:invokevirtual   #1062 <Method int ArrayList.size()>
	//   33   63:istore_3        
			for(int j = 0; j < k; j++)
	//*  34   64:iconst_0        
	//*  35   65:istore_2        
	//*  36   66:iload_2         
	//*  37   67:iload_3         
	//*  38   68:icmpge          111
			{
				OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(j);
	//   39   71:aload_0         
	//   40   72:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//   41   75:iload_2         
	//   42   76:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   43   79:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   44   82:astore          4
				if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent))
	//*  45   84:aload           4
	//*  46   86:aload_0         
	//*  47   87:aload_1         
	//*  48   88:invokeinterface #1069 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  49   93:ifeq            104
				{
					mActiveOnItemTouchListener = onitemtouchlistener;
	//   50   96:aload_0         
	//   51   97:aload           4
	//   52   99:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
					return true;
	//   53  102:iconst_1        
	//   54  103:ireturn         
				}
			}

	//   55  104:iload_2         
	//   56  105:iconst_1        
	//   57  106:iadd            
	//   58  107:istore_2        
		}
	//*  59  108:goto            66
		return false;
	//   60  111:iconst_0        
	//   61  112:ireturn         
	}

	private boolean dispatchOnItemTouchIntercept(MotionEvent motionevent)
	{
		int j = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1053 <Method int MotionEvent.getAction()>
	//    2    4:istore_3        
		if(j == 3 || j == 0)
	//*   3    5:iload_3         
	//*   4    6:iconst_3        
	//*   5    7:icmpeq          14
	//*   6   10:iload_3         
	//*   7   11:ifne            19
			mActiveOnItemTouchListener = null;
	//    8   14:aload_0         
	//    9   15:aconst_null     
	//   10   16:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		int k = mOnItemTouchListeners.size();
	//   11   19:aload_0         
	//   12   20:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//   13   23:invokevirtual   #1062 <Method int ArrayList.size()>
	//   14   26:istore          4
		for(int i = 0; i < k; i++)
	//*  15   28:iconst_0        
	//*  16   29:istore_2        
	//*  17   30:iload_2         
	//*  18   31:iload           4
	//*  19   33:icmpge          81
		{
			OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   20   36:aload_0         
	//   21   37:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   24   44:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   25   47:astore          5
			if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent) && j != 3)
	//*  26   49:aload           5
	//*  27   51:aload_0         
	//*  28   52:aload_1         
	//*  29   53:invokeinterface #1069 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  30   58:ifeq            74
	//*  31   61:iload_3         
	//*  32   62:iconst_3        
	//*  33   63:icmpeq          74
			{
				mActiveOnItemTouchListener = onitemtouchlistener;
	//   34   66:aload_0         
	//   35   67:aload           5
	//   36   69:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   37   72:iconst_1        
	//   38   73:ireturn         
			}
		}

	//   39   74:iload_2         
	//   40   75:iconst_1        
	//   41   76:iadd            
	//   42   77:istore_2        
	//*  43   78:goto            30
		return false;
	//   44   81:iconst_0        
	//   45   82:ireturn         
	}

	private void findMinMaxChildLayoutPositions(int ai[])
	{
		int k1 = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          8
		if(k1 == 0)
	//*   4    9:iload           8
	//*   5   11:ifne            23
		{
			ai[0] = -1;
	//    6   14:aload_1         
	//    7   15:iconst_0        
	//    8   16:iconst_m1       
	//    9   17:iastore         
			ai[1] = -1;
	//   10   18:aload_1         
	//   11   19:iconst_1        
	//   12   20:iconst_m1       
	//   13   21:iastore         
			return;
	//   14   22:return          
		}
		int j = 0x7fffffff;
	//   15   23:ldc2            #1071 <Int 0x7fffffff>
	//   16   26:istore_3        
		int l = 0x80000000;
	//   17   27:ldc2            #1072 <Int 0x80000000>
	//   18   30:istore          5
		for(int k = 0; k < k1;)
	//*  19   32:iconst_0        
	//*  20   33:istore          4
	//*  21   35:iload           4
	//*  22   37:iload           8
	//*  23   39:icmpge          121
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(k));
	//   24   42:aload_0         
	//   25   43:getfield        #646 <Field ChildHelper mChildHelper>
	//   26   46:iload           4
	//   27   48:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   28   51:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   54:astore          9
			int j1;
			if(viewholder.shouldIgnore())
	//*  30   56:aload           9
	//*  31   58:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   61:ifeq            71
			{
				j1 = l;
	//   33   64:iload           5
	//   34   66:istore          7
			} else
	//*  35   68:goto            108
			{
				int i1 = viewholder.getLayoutPosition();
	//   36   71:aload           9
	//   37   73:invokevirtual   #1075 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   38   76:istore          6
				int i = j;
	//   39   78:iload_3         
	//   40   79:istore_2        
				if(i1 < j)
	//*  41   80:iload           6
	//*  42   82:iload_3         
	//*  43   83:icmpge          89
					i = i1;
	//   44   86:iload           6
	//   45   88:istore_2        
				j = i;
	//   46   89:iload_2         
	//   47   90:istore_3        
				j1 = l;
	//   48   91:iload           5
	//   49   93:istore          7
				if(i1 > l)
	//*  50   95:iload           6
	//*  51   97:iload           5
	//*  52   99:icmple          108
				{
					j1 = i1;
	//   53  102:iload           6
	//   54  104:istore          7
					j = i;
	//   55  106:iload_2         
	//   56  107:istore_3        
				}
			}
			k++;
	//   57  108:iload           4
	//   58  110:iconst_1        
	//   59  111:iadd            
	//   60  112:istore          4
			l = j1;
	//   61  114:iload           7
	//   62  116:istore          5
		}

	//*  63  118:goto            35
		ai[0] = j;
	//   64  121:aload_1         
	//   65  122:iconst_0        
	//   66  123:iload_3         
	//   67  124:iastore         
		ai[1] = l;
	//   68  125:aload_1         
	//   69  126:iconst_1        
	//   70  127:iload           5
	//   71  129:iastore         
	//   72  130:return          
	}

	static RecyclerView findNestedRecyclerView(View view)
	{
		if(!(view instanceof ViewGroup))
	//*   0    0:aload_0         
	//*   1    1:instanceof      #4   <Class ViewGroup>
	//*   2    4:ifne            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		if(view instanceof RecyclerView)
	//*   5    9:aload_0         
	//*   6   10:instanceof      #2   <Class RecyclerView>
	//*   7   13:ifeq            21
			return (RecyclerView)view;
	//    8   16:aload_0         
	//    9   17:checkcast       #2   <Class RecyclerView>
	//   10   20:areturn         
		view = ((View) ((ViewGroup)view));
	//   11   21:aload_0         
	//   12   22:checkcast       #4   <Class ViewGroup>
	//   13   25:astore_0        
		int j = ((ViewGroup) (view)).getChildCount();
	//   14   26:aload_0         
	//   15   27:invokevirtual   #1078 <Method int ViewGroup.getChildCount()>
	//   16   30:istore_2        
		for(int i = 0; i < j; i++)
	//*  17   31:iconst_0        
	//*  18   32:istore_1        
	//*  19   33:iload_1         
	//*  20   34:iload_2         
	//*  21   35:icmpge          60
		{
			RecyclerView recyclerview = findNestedRecyclerView(((ViewGroup) (view)).getChildAt(i));
	//   22   38:aload_0         
	//   23   39:iload_1         
	//   24   40:invokevirtual   #1079 <Method View ViewGroup.getChildAt(int)>
	//   25   43:invokestatic    #1081 <Method RecyclerView findNestedRecyclerView(View)>
	//   26   46:astore_3        
			if(recyclerview != null)
	//*  27   47:aload_3         
	//*  28   48:ifnull          53
				return recyclerview;
	//   29   51:aload_3         
	//   30   52:areturn         
		}

	//   31   53:iload_1         
	//   32   54:iconst_1        
	//   33   55:iadd            
	//   34   56:istore_1        
	//*  35   57:goto            33
		return null;
	//   36   60:aconst_null     
	//   37   61:areturn         
	}

	private View findNextViewToFocus()
	{
		int i;
		if(mState.mFocusedItemPosition != -1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #425 <Field RecyclerView$State mState>
	//*   2    4:getfield        #1087 <Field int RecyclerView$State.mFocusedItemPosition>
	//*   3    7:iconst_m1       
	//*   4    8:icmpeq          22
			i = mState.mFocusedItemPosition;
	//    5   11:aload_0         
	//    6   12:getfield        #425 <Field RecyclerView$State mState>
	//    7   15:getfield        #1087 <Field int RecyclerView$State.mFocusedItemPosition>
	//    8   18:istore_1        
		else
	//*   9   19:goto            24
			i = 0;
	//   10   22:iconst_0        
	//   11   23:istore_1        
		int k = mState.getItemCount();
	//   12   24:aload_0         
	//   13   25:getfield        #425 <Field RecyclerView$State mState>
	//   14   28:invokevirtual   #1088 <Method int RecyclerView$State.getItemCount()>
	//   15   31:istore_3        
		int j = i;
	//   16   32:iload_1         
	//   17   33:istore_2        
		do
		{
			if(j >= k)
				break;
	//   18   34:iload_2         
	//   19   35:iload_3         
	//   20   36:icmpge          78
			ViewHolder viewholder = findViewHolderForAdapterPosition(j);
	//   21   39:aload_0         
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1092 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   24   44:astore          4
			if(viewholder == null)
	//*  25   46:aload           4
	//*  26   48:ifnonnull       54
				break;
	//   27   51:goto            78
			if(viewholder.itemView.hasFocusable())
	//*  28   54:aload           4
	//*  29   56:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  30   59:invokevirtual   #1095 <Method boolean View.hasFocusable()>
	//*  31   62:ifeq            71
				return viewholder.itemView;
	//   32   65:aload           4
	//   33   67:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   34   70:areturn         
			j++;
	//   35   71:iload_2         
	//   36   72:iconst_1        
	//   37   73:iadd            
	//   38   74:istore_2        
		} while(true);
	//   39   75:goto            34
		for(i = Math.min(k, i) - 1; i >= 0; i--)
	//*  40   78:iload_3         
	//*  41   79:iload_1         
	//*  42   80:invokestatic    #1100 <Method int Math.min(int, int)>
	//*  43   83:iconst_1        
	//*  44   84:isub            
	//*  45   85:istore_1        
	//*  46   86:iload_1         
	//*  47   87:iflt            128
		{
			ViewHolder viewholder1 = findViewHolderForAdapterPosition(i);
	//   48   90:aload_0         
	//   49   91:iload_1         
	//   50   92:invokevirtual   #1092 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   51   95:astore          4
			if(viewholder1 == null)
	//*  52   97:aload           4
	//*  53   99:ifnonnull       104
				return null;
	//   54  102:aconst_null     
	//   55  103:areturn         
			if(viewholder1.itemView.hasFocusable())
	//*  56  104:aload           4
	//*  57  106:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  58  109:invokevirtual   #1095 <Method boolean View.hasFocusable()>
	//*  59  112:ifeq            121
				return viewholder1.itemView;
	//   60  115:aload           4
	//   61  117:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   62  120:areturn         
		}

	//   63  121:iload_1         
	//   64  122:iconst_1        
	//   65  123:isub            
	//   66  124:istore_1        
	//*  67  125:goto            86
		return null;
	//   68  128:aconst_null     
	//   69  129:areturn         
	}

	static ViewHolder getChildViewHolderInt(View view)
	{
		if(view == null)
	//*   0    0:aload_0         
	//*   1    1:ifnonnull       6
			return null;
	//    2    4:aconst_null     
	//    3    5:areturn         
		else
			return ((LayoutParams)view.getLayoutParams()).mViewHolder;
	//    4    6:aload_0         
	//    5    7:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    6   10:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   13:getfield        #1103 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
	//    8   16:areturn         
	}

	static void getDecoratedBoundsWithMarginsInt(View view, Rect rect)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore_2        
		Rect rect1 = layoutparams.mDecorInsets;
	//    4    8:aload_2         
	//    5    9:getfield        #1108 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    6   12:astore_3        
		rect.set(view.getLeft() - rect1.left - layoutparams.leftMargin, view.getTop() - rect1.top - layoutparams.topMargin, view.getRight() + rect1.right + layoutparams.rightMargin, view.getBottom() + rect1.bottom + layoutparams.bottomMargin);
	//    7   13:aload_1         
	//    8   14:aload_0         
	//    9   15:invokevirtual   #1111 <Method int View.getLeft()>
	//   10   18:aload_3         
	//   11   19:getfield        #1114 <Field int Rect.left>
	//   12   22:isub            
	//   13   23:aload_2         
	//   14   24:getfield        #1117 <Field int RecyclerView$LayoutParams.leftMargin>
	//   15   27:isub            
	//   16   28:aload_0         
	//   17   29:invokevirtual   #1120 <Method int View.getTop()>
	//   18   32:aload_3         
	//   19   33:getfield        #1123 <Field int Rect.top>
	//   20   36:isub            
	//   21   37:aload_2         
	//   22   38:getfield        #1126 <Field int RecyclerView$LayoutParams.topMargin>
	//   23   41:isub            
	//   24   42:aload_0         
	//   25   43:invokevirtual   #1129 <Method int View.getRight()>
	//   26   46:aload_3         
	//   27   47:getfield        #1132 <Field int Rect.right>
	//   28   50:iadd            
	//   29   51:aload_2         
	//   30   52:getfield        #1135 <Field int RecyclerView$LayoutParams.rightMargin>
	//   31   55:iadd            
	//   32   56:aload_0         
	//   33   57:invokevirtual   #1138 <Method int View.getBottom()>
	//   34   60:aload_3         
	//   35   61:getfield        #1141 <Field int Rect.bottom>
	//   36   64:iadd            
	//   37   65:aload_2         
	//   38   66:getfield        #1144 <Field int RecyclerView$LayoutParams.bottomMargin>
	//   39   69:iadd            
	//   40   70:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
	//   41   73:return          
	}

	private int getDeepestFocusedViewWithId(View view)
	{
		int i = view.getId();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1152 <Method int View.getId()>
	//    2    4:istore_2        
		do
		{
			if(view.isFocused() || !(view instanceof ViewGroup) || !view.hasFocus())
				break;
	//    3    5:aload_1         
	//    4    6:invokevirtual   #1155 <Method boolean View.isFocused()>
	//    5    9:ifne            50
	//    6   12:aload_1         
	//    7   13:instanceof      #4   <Class ViewGroup>
	//    8   16:ifeq            50
	//    9   19:aload_1         
	//   10   20:invokevirtual   #1158 <Method boolean View.hasFocus()>
	//   11   23:ifeq            50
			view = ((ViewGroup)view).getFocusedChild();
	//   12   26:aload_1         
	//   13   27:checkcast       #4   <Class ViewGroup>
	//   14   30:invokevirtual   #1161 <Method View ViewGroup.getFocusedChild()>
	//   15   33:astore_1        
			if(view.getId() != -1)
	//*  16   34:aload_1         
	//*  17   35:invokevirtual   #1152 <Method int View.getId()>
	//*  18   38:iconst_m1       
	//*  19   39:icmpeq          47
				i = view.getId();
	//   20   42:aload_1         
	//   21   43:invokevirtual   #1152 <Method int View.getId()>
	//   22   46:istore_2        
		} while(true);
	//   23   47:goto            5
		return i;
	//   24   50:iload_2         
	//   25   51:ireturn         
	}

	private String getFullClassName(Context context, String s)
	{
		if(s.charAt(0) == '.')
	//*   0    0:aload_2         
	//*   1    1:iconst_0        
	//*   2    2:invokevirtual   #1165 <Method char String.charAt(int)>
	//*   3    5:bipush          46
	//*   4    7:icmpne          32
			return (new StringBuilder()).append(context.getPackageName()).append(s).toString();
	//    5   10:new             #766 <Class StringBuilder>
	//    6   13:dup             
	//    7   14:invokespecial   #767 <Method void StringBuilder()>
	//    8   17:aload_1         
	//    9   18:invokevirtual   #1168 <Method String Context.getPackageName()>
	//   10   21:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   11   24:aload_2         
	//   12   25:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   13   28:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   14   31:areturn         
		if(s.contains("."))
	//*  15   32:aload_2         
	//*  16   33:ldc2            #1170 <String ".">
	//*  17   36:invokevirtual   #1174 <Method boolean String.contains(CharSequence)>
	//*  18   39:ifeq            44
			return s;
	//   19   42:aload_2         
	//   20   43:areturn         
		else
			return (new StringBuilder()).append(((Class) (android/support/v7/widget/RecyclerView)).getPackage().getName()).append('.').append(s).toString();
	//   21   44:new             #766 <Class StringBuilder>
	//   22   47:dup             
	//   23   48:invokespecial   #767 <Method void StringBuilder()>
	//   24   51:ldc1            #2   <Class RecyclerView>
	//   25   53:invokevirtual   #1178 <Method Package Class.getPackage()>
	//   26   56:invokevirtual   #1183 <Method String Package.getName()>
	//   27   59:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   28   62:bipush          46
	//   29   64:invokevirtual   #1186 <Method StringBuilder StringBuilder.append(char)>
	//   30   67:aload_2         
	//   31   68:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   32   71:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   33   74:areturn         
	}

	private float getScrollFactor()
	{
		if(mScrollFactor == 1.401298E-45F)
	//*   0    0:aload_0         
	//*   1    1:getfield        #412 <Field float mScrollFactor>
	//*   2    4:ldc2            #410 <Float 1.401298E-45F>
	//*   3    7:fcmpl           
	//*   4    8:ifne            60
		{
			TypedValue typedvalue = new TypedValue();
	//    5   11:new             #1190 <Class TypedValue>
	//    6   14:dup             
	//    7   15:invokespecial   #1191 <Method void TypedValue()>
	//    8   18:astore_1        
			if(getContext().getTheme().resolveAttribute(0x101004d, typedvalue, true))
	//*   9   19:aload_0         
	//*  10   20:invokevirtual   #524 <Method Context getContext()>
	//*  11   23:invokevirtual   #1195 <Method android.content.res.Resources$Theme Context.getTheme()>
	//*  12   26:ldc2            #1196 <Int 0x101004d>
	//*  13   29:aload_1         
	//*  14   30:iconst_1        
	//*  15   31:invokevirtual   #1202 <Method boolean android.content.res.Resources$Theme.resolveAttribute(int, TypedValue, boolean)>
	//*  16   34:ifeq            58
				mScrollFactor = typedvalue.getDimension(getContext().getResources().getDisplayMetrics());
	//   17   37:aload_0         
	//   18   38:aload_1         
	//   19   39:aload_0         
	//   20   40:invokevirtual   #524 <Method Context getContext()>
	//   21   43:invokevirtual   #1206 <Method Resources Context.getResources()>
	//   22   46:invokevirtual   #1212 <Method android.util.DisplayMetrics Resources.getDisplayMetrics()>
	//   23   49:invokevirtual   #1216 <Method float TypedValue.getDimension(android.util.DisplayMetrics)>
	//   24   52:putfield        #412 <Field float mScrollFactor>
			else
	//*  25   55:goto            60
				return 0.0F;
	//   26   58:fconst_0        
	//   27   59:freturn         
		}
		return mScrollFactor;
	//   28   60:aload_0         
	//   29   61:getfield        #412 <Field float mScrollFactor>
	//   30   64:freturn         
	}

	private NestedScrollingChildHelper getScrollingChildHelper()
	{
		if(mScrollingChildHelper == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1220 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//*   2    4:ifnonnull       19
			mScrollingChildHelper = new NestedScrollingChildHelper(((View) (this)));
	//    3    7:aload_0         
	//    4    8:new             #1222 <Class NestedScrollingChildHelper>
	//    5   11:dup             
	//    6   12:aload_0         
	//    7   13:invokespecial   #1224 <Method void NestedScrollingChildHelper(View)>
	//    8   16:putfield        #1220 <Field NestedScrollingChildHelper mScrollingChildHelper>
		return mScrollingChildHelper;
	//    9   19:aload_0         
	//   10   20:getfield        #1220 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//   11   23:areturn         
	}

	private void handleMissingPreInfoForChangeError(long l, ViewHolder viewholder, ViewHolder viewholder1)
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          6
		for(int i = 0; i < j; i++)
	//*   4    9:iconst_0        
	//*   5   10:istore          5
	//*   6   12:iload           5
	//*   7   14:iload           6
	//*   8   16:icmpge          157
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   19:aload_0         
	//   10   20:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   23:iload           5
	//   12   25:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   13   28:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          7
			if(viewholder2 != viewholder && getChangedHolderKey(viewholder2) == l)
	//*  15   33:aload           7
	//*  16   35:aload_3         
	//*  17   36:if_acmpne       42
	//*  18   39:goto            148
	//*  19   42:aload_0         
	//*  20   43:aload           7
	//*  21   45:invokevirtual   #921 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//*  22   48:lload_1         
	//*  23   49:lcmp            
	//*  24   50:ifne            148
				if(mAdapter != null && mAdapter.hasStableIds())
	//*  25   53:aload_0         
	//*  26   54:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  27   57:ifnull          109
	//*  28   60:aload_0         
	//*  29   61:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  30   64:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  31   67:ifeq            109
					throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).toString());
	//   32   70:new             #764 <Class IllegalStateException>
	//   33   73:dup             
	//   34   74:new             #766 <Class StringBuilder>
	//   35   77:dup             
	//   36   78:invokespecial   #767 <Method void StringBuilder()>
	//   37   81:ldc2            #1226 <String "Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:">
	//   38   84:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   39   87:aload           7
	//   40   89:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   41   92:ldc2            #1231 <String " \n View Holder 2:">
	//   42   95:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   43   98:aload_3         
	//   44   99:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   45  102:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   46  105:invokespecial   #1234 <Method void IllegalStateException(String)>
	//   47  108:athrow          
				else
					throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).toString());
	//   48  109:new             #764 <Class IllegalStateException>
	//   49  112:dup             
	//   50  113:new             #766 <Class StringBuilder>
	//   51  116:dup             
	//   52  117:invokespecial   #767 <Method void StringBuilder()>
	//   53  120:ldc2            #1236 <String "Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:">
	//   54  123:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   55  126:aload           7
	//   56  128:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   57  131:ldc2            #1231 <String " \n View Holder 2:">
	//   58  134:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   59  137:aload_3         
	//   60  138:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   61  141:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   62  144:invokespecial   #1234 <Method void IllegalStateException(String)>
	//   63  147:athrow          
		}

	//   64  148:iload           5
	//   65  150:iconst_1        
	//   66  151:iadd            
	//   67  152:istore          5
	//*  68  154:goto            12
		Log.e("RecyclerView", (new StringBuilder()).append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ").append(((Object) (viewholder1))).append(" cannot be found but it is necessary for ").append(((Object) (viewholder))).toString());
	//   69  157:ldc1            #165 <String "RecyclerView">
	//   70  159:new             #766 <Class StringBuilder>
	//   71  162:dup             
	//   72  163:invokespecial   #767 <Method void StringBuilder()>
	//   73  166:ldc2            #1238 <String "Problem while matching changed view holders with the newones. The pre-layout information for the change holder ">
	//   74  169:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   75  172:aload           4
	//   76  174:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   77  177:ldc2            #1240 <String " cannot be found but it is necessary for ">
	//   78  180:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   79  183:aload_3         
	//   80  184:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   81  187:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   82  190:invokestatic    #1246 <Method int Log.e(String, String)>
	//   83  193:pop             
	//   84  194:return          
	}

	private boolean hasUpdatedView()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          57
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   13   23:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.isUpdated())
	//*  15   27:aload_3         
	//*  16   28:ifnull          50
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifeq            41
	//*  20   38:goto            50
	//*  21   41:aload_3         
	//*  22   42:invokevirtual   #914 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  23   45:ifeq            50
				return true;
	//   24   48:iconst_1        
	//   25   49:ireturn         
		}

	//   26   50:iload_1         
	//   27   51:iconst_1        
	//   28   52:iadd            
	//   29   53:istore_1        
	//*  30   54:goto            10
		return false;
	//   31   57:iconst_0        
	//   32   58:ireturn         
	}

	private void initChildrenHelper()
	{
		mChildHelper = new ChildHelper(new ChildHelper.Callback() {

			public void addView(View view, int i)
			{
				RecyclerView.this.addView(view, i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #24  <Method void RecyclerView.addView(View, int)>
				dispatchChildAttached(view);
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:aload_1         
			//    8   14:invokevirtual   #28  <Method void RecyclerView.dispatchChildAttached(View)>
			//    9   17:return          
			}

			public void attachViewToParent(View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
			{
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore          4
				if(viewholder != null)
			//*   3    6:aload           4
			//*   4    8:ifnull          60
				{
					if(!viewholder.isTmpDetached() && !viewholder.shouldIgnore())
			//*   5   11:aload           4
			//*   6   13:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*   7   16:ifne            55
			//*   8   19:aload           4
			//*   9   21:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  10   24:ifne            55
						throw new IllegalArgumentException((new StringBuilder()).append("Called attach on a child which is not detached: ").append(((Object) (viewholder))).toString());
			//   11   27:new             #45  <Class IllegalArgumentException>
			//   12   30:dup             
			//   13   31:new             #47  <Class StringBuilder>
			//   14   34:dup             
			//   15   35:invokespecial   #48  <Method void StringBuilder()>
			//   16   38:ldc1            #50  <String "Called attach on a child which is not detached: ">
			//   17   40:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   18   43:aload           4
			//   19   45:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   20   48:invokevirtual   #61  <Method String StringBuilder.toString()>
			//   21   51:invokespecial   #64  <Method void IllegalArgumentException(String)>
			//   22   54:athrow          
					viewholder.clearTmpDetachFlag();
			//   23   55:aload           4
			//   24   57:invokevirtual   #67  <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
				}
				RecyclerView.this.attachViewToParent(view, i, layoutparams);
			//   25   60:aload_0         
			//   26   61:getfield        #17  <Field RecyclerView this$0>
			//   27   64:aload_1         
			//   28   65:iload_2         
			//   29   66:aload_3         
			//   30   67:invokestatic    #71  <Method void RecyclerView.access$000(RecyclerView, View, int, android.view.ViewGroup$LayoutParams)>
			//   31   70:return          
			}

			public void detachViewFromParent(int i)
			{
				Object obj = ((Object) (getChildAt(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #77  <Method View getChildAt(int)>
			//    3    5:astore_2        
				if(obj != null)
			//*   4    6:aload_2         
			//*   5    7:ifnull          67
				{
					obj = ((Object) (RecyclerView.getChildViewHolderInt(((View) (obj)))));
			//    6   10:aload_2         
			//    7   11:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    8   14:astore_2        
					if(obj != null)
			//*   9   15:aload_2         
			//*  10   16:ifnull          67
					{
						if(((ViewHolder) (obj)).isTmpDetached() && !((ViewHolder) (obj)).shouldIgnore())
			//*  11   19:aload_2         
			//*  12   20:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*  13   23:ifeq            60
			//*  14   26:aload_2         
			//*  15   27:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  16   30:ifne            60
							throw new IllegalArgumentException((new StringBuilder()).append("called detach on an already detached child ").append(obj).toString());
			//   17   33:new             #45  <Class IllegalArgumentException>
			//   18   36:dup             
			//   19   37:new             #47  <Class StringBuilder>
			//   20   40:dup             
			//   21   41:invokespecial   #48  <Method void StringBuilder()>
			//   22   44:ldc1            #79  <String "called detach on an already detached child ">
			//   23   46:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   24   49:aload_2         
			//   25   50:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   26   53:invokevirtual   #61  <Method String StringBuilder.toString()>
			//   27   56:invokespecial   #64  <Method void IllegalArgumentException(String)>
			//   28   59:athrow          
						((ViewHolder) (obj)).addFlags(256);
			//   29   60:aload_2         
			//   30   61:sipush          256
			//   31   64:invokevirtual   #82  <Method void RecyclerView$ViewHolder.addFlags(int)>
					}
				}
				RecyclerView.this.detachViewFromParent(i);
			//   32   67:aload_0         
			//   33   68:getfield        #17  <Field RecyclerView this$0>
			//   34   71:iload_1         
			//   35   72:invokestatic    #86  <Method void RecyclerView.access$100(RecyclerView, int)>
			//   36   75:return          
			}

			public View getChildAt(int i)
			{
				return RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #87  <Method View RecyclerView.getChildAt(int)>
			//    4    8:areturn         
			}

			public int getChildCount()
			{
				return RecyclerView.this.getChildCount();
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:invokevirtual   #91  <Method int RecyclerView.getChildCount()>
			//    3    7:ireturn         
			}

			public ViewHolder getChildViewHolder(View view)
			{
				return RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:areturn         
			}

			public int indexOfChild(View view)
			{
				return RecyclerView.this.indexOfChild(view);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:invokevirtual   #96  <Method int RecyclerView.indexOfChild(View)>
			//    4    8:ireturn         
			}

			public void onEnteredHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onEnteredHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #101 <Method void RecyclerView$ViewHolder.access$200(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void onLeftHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onLeftHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #105 <Method void RecyclerView$ViewHolder.access$300(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void removeAllViews()
			{
				int j = getChildCount();
			//    0    0:aload_0         
			//    1    1:invokevirtual   #107 <Method int getChildCount()>
			//    2    4:istore_2        
				for(int i = 0; i < j; i++)
			//*   3    5:iconst_0        
			//*   4    6:istore_1        
			//*   5    7:iload_1         
			//*   6    8:iload_2         
			//*   7    9:icmpge          31
					dispatchChildDetached(getChildAt(i));
			//    8   12:aload_0         
			//    9   13:getfield        #17  <Field RecyclerView this$0>
			//   10   16:aload_0         
			//   11   17:iload_1         
			//   12   18:invokevirtual   #77  <Method View getChildAt(int)>
			//   13   21:invokevirtual   #110 <Method void RecyclerView.dispatchChildDetached(View)>

			//   14   24:iload_1         
			//   15   25:iconst_1        
			//   16   26:iadd            
			//   17   27:istore_1        
			//*  18   28:goto            7
				RecyclerView.this.removeAllViews();
			//   19   31:aload_0         
			//   20   32:getfield        #17  <Field RecyclerView this$0>
			//   21   35:invokevirtual   #112 <Method void RecyclerView.removeAllViews()>
			//   22   38:return          
			}

			public void removeViewAt(int i)
			{
				View view = RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #87  <Method View RecyclerView.getChildAt(int)>
			//    4    8:astore_2        
				if(view != null)
			//*   5    9:aload_2         
			//*   6   10:ifnull          21
					dispatchChildDetached(view);
			//    7   13:aload_0         
			//    8   14:getfield        #17  <Field RecyclerView this$0>
			//    9   17:aload_2         
			//   10   18:invokevirtual   #110 <Method void RecyclerView.dispatchChildDetached(View)>
				RecyclerView.this.removeViewAt(i);
			//   11   21:aload_0         
			//   12   22:getfield        #17  <Field RecyclerView this$0>
			//   13   25:iload_1         
			//   14   26:invokevirtual   #115 <Method void RecyclerView.removeViewAt(int)>
			//   15   29:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #652 <Class ChildHelper>
	//    2    4:dup             
	//    3    5:new             #18  <Class RecyclerView$5>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1248 <Method void RecyclerView$5(RecyclerView)>
	//    7   13:invokespecial   #1251 <Method void ChildHelper(ChildHelper$Callback)>
	//    8   16:putfield        #646 <Field ChildHelper mChildHelper>
	//    9   19:return          
	}

	private boolean isPreferredNextFocus(View view, View view1, int i)
	{
		if(view1 == null || view1 == this)
	//*   0    0:aload_2         
	//*   1    1:ifnull          9
	//*   2    4:aload_2         
	//*   3    5:aload_0         
	//*   4    6:if_acmpne       11
			return false;
	//    5    9:iconst_0        
	//    6   10:ireturn         
		if(view == null)
	//*   7   11:aload_1         
	//*   8   12:ifnonnull       17
			return true;
	//    9   15:iconst_1        
	//   10   16:ireturn         
		if(i == 2 || i == 1)
	//*  11   17:iload_3         
	//*  12   18:iconst_2        
	//*  13   19:icmpeq          27
	//*  14   22:iload_3         
	//*  15   23:iconst_1        
	//*  16   24:icmpne          117
		{
			byte byte0;
			if(mLayout.getLayoutDirection() == 1)
	//*  17   27:aload_0         
	//*  18   28:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  19   31:invokevirtual   #1256 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  20   34:iconst_1        
	//*  21   35:icmpne          44
				byte0 = 1;
	//   22   38:iconst_1        
	//   23   39:istore          4
			else
	//*  24   41:goto            47
				byte0 = 0;
	//   25   44:iconst_0        
	//   26   45:istore          4
			boolean flag;
			if(i == 2)
	//*  27   47:iload_3         
	//*  28   48:iconst_2        
	//*  29   49:icmpne          58
				flag = true;
	//   30   52:iconst_1        
	//   31   53:istore          5
			else
	//*  32   55:goto            61
				flag = false;
	//   33   58:iconst_0        
	//   34   59:istore          5
			if(flag ^ byte0)
	//*  35   61:iload           5
	//*  36   63:iload           4
	//*  37   65:ixor            
	//*  38   66:ifeq            76
				byte0 = 66;
	//   39   69:bipush          66
	//   40   71:istore          4
			else
	//*  41   73:goto            80
				byte0 = 17;
	//   42   76:bipush          17
	//   43   78:istore          4
			if(isPreferredNextFocusAbsolute(view, view1, ((int) (byte0))))
	//*  44   80:aload_0         
	//*  45   81:aload_1         
	//*  46   82:aload_2         
	//*  47   83:iload           4
	//*  48   85:invokespecial   #1259 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//*  49   88:ifeq            93
				return true;
	//   50   91:iconst_1        
	//   51   92:ireturn         
			if(i == 2)
	//*  52   93:iload_3         
	//*  53   94:iconst_2        
	//*  54   95:icmpne          108
				return isPreferredNextFocusAbsolute(view, view1, 130);
	//   55   98:aload_0         
	//   56   99:aload_1         
	//   57  100:aload_2         
	//   58  101:sipush          130
	//   59  104:invokespecial   #1259 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   60  107:ireturn         
			else
				return isPreferredNextFocusAbsolute(view, view1, 33);
	//   61  108:aload_0         
	//   62  109:aload_1         
	//   63  110:aload_2         
	//   64  111:bipush          33
	//   65  113:invokespecial   #1259 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   66  116:ireturn         
		} else
		{
			return isPreferredNextFocusAbsolute(view, view1, i);
	//   67  117:aload_0         
	//   68  118:aload_1         
	//   69  119:aload_2         
	//   70  120:iload_3         
	//   71  121:invokespecial   #1259 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   72  124:ireturn         
		}
	}

	private boolean isPreferredNextFocusAbsolute(View view, View view1, int i)
	{
		mTempRect.set(0, 0, view.getWidth(), view.getHeight());
	//    0    0:aload_0         
	//    1    1:getfield        #378 <Field Rect mTempRect>
	//    2    4:iconst_0        
	//    3    5:iconst_0        
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1262 <Method int View.getWidth()>
	//    6   10:aload_1         
	//    7   11:invokevirtual   #1265 <Method int View.getHeight()>
	//    8   14:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
		mTempRect2.set(0, 0, view1.getWidth(), view1.getHeight());
	//    9   17:aload_0         
	//   10   18:getfield        #380 <Field Rect mTempRect2>
	//   11   21:iconst_0        
	//   12   22:iconst_0        
	//   13   23:aload_2         
	//   14   24:invokevirtual   #1262 <Method int View.getWidth()>
	//   15   27:aload_2         
	//   16   28:invokevirtual   #1265 <Method int View.getHeight()>
	//   17   31:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
		offsetDescendantRectToMyCoords(view, mTempRect);
	//   18   34:aload_0         
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:getfield        #378 <Field Rect mTempRect>
	//   22   40:invokevirtual   #1268 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		offsetDescendantRectToMyCoords(view1, mTempRect2);
	//   23   43:aload_0         
	//   24   44:aload_2         
	//   25   45:aload_0         
	//   26   46:getfield        #380 <Field Rect mTempRect2>
	//   27   49:invokevirtual   #1268 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		switch(i)
	//*  28   52:iload_3         
		{
	//*  29   53:lookupswitch    4: default 96
	//	               17: 99
	//	               33: 209
	//	               66: 154
	//	               130: 264
	//*  30   96:goto            319
		case 17: // '\021'
			return (mTempRect.right > mTempRect2.right || mTempRect.left >= mTempRect2.right) && mTempRect.left > mTempRect2.left;
	//   31   99:aload_0         
	//   32  100:getfield        #378 <Field Rect mTempRect>
	//   33  103:getfield        #1132 <Field int Rect.right>
	//   34  106:aload_0         
	//   35  107:getfield        #380 <Field Rect mTempRect2>
	//   36  110:getfield        #1132 <Field int Rect.right>
	//   37  113:icmpgt          133
	//   38  116:aload_0         
	//   39  117:getfield        #378 <Field Rect mTempRect>
	//   40  120:getfield        #1114 <Field int Rect.left>
	//   41  123:aload_0         
	//   42  124:getfield        #380 <Field Rect mTempRect2>
	//   43  127:getfield        #1132 <Field int Rect.right>
	//   44  130:icmplt          152
	//   45  133:aload_0         
	//   46  134:getfield        #378 <Field Rect mTempRect>
	//   47  137:getfield        #1114 <Field int Rect.left>
	//   48  140:aload_0         
	//   49  141:getfield        #380 <Field Rect mTempRect2>
	//   50  144:getfield        #1114 <Field int Rect.left>
	//   51  147:icmple          152
	//   52  150:iconst_1        
	//   53  151:ireturn         
	//   54  152:iconst_0        
	//   55  153:ireturn         

		case 66: // 'B'
			return (mTempRect.left < mTempRect2.left || mTempRect.right <= mTempRect2.left) && mTempRect.right < mTempRect2.right;
	//   56  154:aload_0         
	//   57  155:getfield        #378 <Field Rect mTempRect>
	//   58  158:getfield        #1114 <Field int Rect.left>
	//   59  161:aload_0         
	//   60  162:getfield        #380 <Field Rect mTempRect2>
	//   61  165:getfield        #1114 <Field int Rect.left>
	//   62  168:icmplt          188
	//   63  171:aload_0         
	//   64  172:getfield        #378 <Field Rect mTempRect>
	//   65  175:getfield        #1132 <Field int Rect.right>
	//   66  178:aload_0         
	//   67  179:getfield        #380 <Field Rect mTempRect2>
	//   68  182:getfield        #1114 <Field int Rect.left>
	//   69  185:icmpgt          207
	//   70  188:aload_0         
	//   71  189:getfield        #378 <Field Rect mTempRect>
	//   72  192:getfield        #1132 <Field int Rect.right>
	//   73  195:aload_0         
	//   74  196:getfield        #380 <Field Rect mTempRect2>
	//   75  199:getfield        #1132 <Field int Rect.right>
	//   76  202:icmpge          207
	//   77  205:iconst_1        
	//   78  206:ireturn         
	//   79  207:iconst_0        
	//   80  208:ireturn         

		case 33: // '!'
			return (mTempRect.bottom > mTempRect2.bottom || mTempRect.top >= mTempRect2.bottom) && mTempRect.top > mTempRect2.top;
	//   81  209:aload_0         
	//   82  210:getfield        #378 <Field Rect mTempRect>
	//   83  213:getfield        #1141 <Field int Rect.bottom>
	//   84  216:aload_0         
	//   85  217:getfield        #380 <Field Rect mTempRect2>
	//   86  220:getfield        #1141 <Field int Rect.bottom>
	//   87  223:icmpgt          243
	//   88  226:aload_0         
	//   89  227:getfield        #378 <Field Rect mTempRect>
	//   90  230:getfield        #1123 <Field int Rect.top>
	//   91  233:aload_0         
	//   92  234:getfield        #380 <Field Rect mTempRect2>
	//   93  237:getfield        #1141 <Field int Rect.bottom>
	//   94  240:icmplt          262
	//   95  243:aload_0         
	//   96  244:getfield        #378 <Field Rect mTempRect>
	//   97  247:getfield        #1123 <Field int Rect.top>
	//   98  250:aload_0         
	//   99  251:getfield        #380 <Field Rect mTempRect2>
	//  100  254:getfield        #1123 <Field int Rect.top>
	//  101  257:icmple          262
	//  102  260:iconst_1        
	//  103  261:ireturn         
	//  104  262:iconst_0        
	//  105  263:ireturn         

		case 130: 
			return (mTempRect.top < mTempRect2.top || mTempRect.bottom <= mTempRect2.top) && mTempRect.bottom < mTempRect2.bottom;
	//  106  264:aload_0         
	//  107  265:getfield        #378 <Field Rect mTempRect>
	//  108  268:getfield        #1123 <Field int Rect.top>
	//  109  271:aload_0         
	//  110  272:getfield        #380 <Field Rect mTempRect2>
	//  111  275:getfield        #1123 <Field int Rect.top>
	//  112  278:icmplt          298
	//  113  281:aload_0         
	//  114  282:getfield        #378 <Field Rect mTempRect>
	//  115  285:getfield        #1141 <Field int Rect.bottom>
	//  116  288:aload_0         
	//  117  289:getfield        #380 <Field Rect mTempRect2>
	//  118  292:getfield        #1123 <Field int Rect.top>
	//  119  295:icmpgt          317
	//  120  298:aload_0         
	//  121  299:getfield        #378 <Field Rect mTempRect>
	//  122  302:getfield        #1141 <Field int Rect.bottom>
	//  123  305:aload_0         
	//  124  306:getfield        #380 <Field Rect mTempRect2>
	//  125  309:getfield        #1141 <Field int Rect.bottom>
	//  126  312:icmpge          317
	//  127  315:iconst_1        
	//  128  316:ireturn         
	//  129  317:iconst_0        
	//  130  318:ireturn         
		}
		throw new IllegalArgumentException((new StringBuilder()).append("direction must be absolute. received:").append(i).toString());
	//  131  319:new             #1270 <Class IllegalArgumentException>
	//  132  322:dup             
	//  133  323:new             #766 <Class StringBuilder>
	//  134  326:dup             
	//  135  327:invokespecial   #767 <Method void StringBuilder()>
	//  136  330:ldc2            #1272 <String "direction must be absolute. received:">
	//  137  333:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  138  336:iload_3         
	//  139  337:invokevirtual   #1275 <Method StringBuilder StringBuilder.append(int)>
	//  140  340:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  141  343:invokespecial   #1276 <Method void IllegalArgumentException(String)>
	//  142  346:athrow          
	}

	private void onPointerUp(MotionEvent motionevent)
	{
		int i = motionevent.getActionIndex();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1281 <Method int MotionEvent.getActionIndex()>
	//    2    4:istore_2        
		if(motionevent.getPointerId(i) == mScrollPointerId)
	//*   3    5:aload_1         
	//*   4    6:iload_2         
	//*   5    7:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//*   6   10:aload_0         
	//*   7   11:getfield        #409 <Field int mScrollPointerId>
	//*   8   14:icmpne          79
		{
			if(i == 0)
	//*   9   17:iload_2         
	//*  10   18:ifne            26
				i = 1;
	//   11   21:iconst_1        
	//   12   22:istore_2        
			else
	//*  13   23:goto            28
				i = 0;
	//   14   26:iconst_0        
	//   15   27:istore_2        
			mScrollPointerId = motionevent.getPointerId(i);
	//   16   28:aload_0         
	//   17   29:aload_1         
	//   18   30:iload_2         
	//   19   31:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//   20   34:putfield        #409 <Field int mScrollPointerId>
			int j = (int)(motionevent.getX(i) + 0.5F);
	//   21   37:aload_1         
	//   22   38:iload_2         
	//   23   39:invokevirtual   #1289 <Method float MotionEvent.getX(int)>
	//   24   42:ldc2            #1290 <Float 0.5F>
	//   25   45:fadd            
	//   26   46:f2i             
	//   27   47:istore_3        
			mLastTouchX = j;
	//   28   48:aload_0         
	//   29   49:iload_3         
	//   30   50:putfield        #1292 <Field int mLastTouchX>
			mInitialTouchX = j;
	//   31   53:aload_0         
	//   32   54:iload_3         
	//   33   55:putfield        #1294 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//   34   58:aload_1         
	//   35   59:iload_2         
	//   36   60:invokevirtual   #1297 <Method float MotionEvent.getY(int)>
	//   37   63:ldc2            #1290 <Float 0.5F>
	//   38   66:fadd            
	//   39   67:f2i             
	//   40   68:istore_2        
			mLastTouchY = i;
	//   41   69:aload_0         
	//   42   70:iload_2         
	//   43   71:putfield        #1299 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   44   74:aload_0         
	//   45   75:iload_2         
	//   46   76:putfield        #1301 <Field int mInitialTouchY>
		}
	//   47   79:return          
	}

	private boolean predictiveItemAnimationsEnabled()
	{
		return mItemAnimator != null && mLayout.supportsPredictiveItemAnimations();
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1305 <Method boolean RecyclerView$LayoutManager.supportsPredictiveItemAnimations()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	private void processAdapterUpdatesAndSetAnimationFlags()
	{
		if(mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*   2    4:ifeq            22
		{
			mAdapterHelper.reset();
	//    3    7:aload_0         
	//    4    8:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//    5   11:invokevirtual   #1308 <Method void AdapterHelper.reset()>
			mLayout.onItemsChanged(this);
	//    6   14:aload_0         
	//    7   15:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    8   18:aload_0         
	//    9   19:invokevirtual   #1311 <Method void RecyclerView$LayoutManager.onItemsChanged(RecyclerView)>
		}
		if(predictiveItemAnimationsEnabled())
	//*  10   22:aload_0         
	//*  11   23:invokespecial   #1313 <Method boolean predictiveItemAnimationsEnabled()>
	//*  12   26:ifeq            39
			mAdapterHelper.preProcess();
	//   13   29:aload_0         
	//   14   30:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   15   33:invokevirtual   #1316 <Method void AdapterHelper.preProcess()>
		else
	//*  16   36:goto            46
			mAdapterHelper.consumeUpdatesInOnePass();
	//   17   39:aload_0         
	//   18   40:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   19   43:invokevirtual   #971 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		boolean flag;
		if(mItemsAddedOrRemoved || mItemsChanged)
	//*  20   46:aload_0         
	//*  21   47:getfield        #427 <Field boolean mItemsAddedOrRemoved>
	//*  22   50:ifne            60
	//*  23   53:aload_0         
	//*  24   54:getfield        #429 <Field boolean mItemsChanged>
	//*  25   57:ifeq            65
			flag = true;
	//   26   60:iconst_1        
	//   27   61:istore_1        
		else
	//*  28   62:goto            67
			flag = false;
	//   29   65:iconst_0        
	//   30   66:istore_1        
		State state = mState;
	//   31   67:aload_0         
	//   32   68:getfield        #425 <Field RecyclerView$State mState>
	//   33   71:astore_3        
		boolean flag1;
		if(mFirstLayoutComplete && mItemAnimator != null && (mDataSetHasChangedAfterLayout || flag || mLayout.mRequestedSimpleAnimations) && (!mDataSetHasChangedAfterLayout || mAdapter.hasStableIds()))
	//*  34   72:aload_0         
	//*  35   73:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//*  36   76:ifeq            129
	//*  37   79:aload_0         
	//*  38   80:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  39   83:ifnull          129
	//*  40   86:aload_0         
	//*  41   87:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*  42   90:ifne            107
	//*  43   93:iload_1         
	//*  44   94:ifne            107
	//*  45   97:aload_0         
	//*  46   98:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  47  101:getfield        #1018 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
	//*  48  104:ifeq            129
	//*  49  107:aload_0         
	//*  50  108:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*  51  111:ifeq            124
	//*  52  114:aload_0         
	//*  53  115:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  54  118:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  55  121:ifeq            129
			flag1 = true;
	//   56  124:iconst_1        
	//   57  125:istore_2        
		else
	//*  58  126:goto            131
			flag1 = false;
	//   59  129:iconst_0        
	//   60  130:istore_2        
		state.mRunSimpleAnimations = flag1;
	//   61  131:aload_3         
	//   62  132:iload_2         
	//   63  133:putfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		state = mState;
	//   64  136:aload_0         
	//   65  137:getfield        #425 <Field RecyclerView$State mState>
	//   66  140:astore_3        
		if(mState.mRunSimpleAnimations && flag && !mDataSetHasChangedAfterLayout && predictiveItemAnimationsEnabled())
	//*  67  141:aload_0         
	//*  68  142:getfield        #425 <Field RecyclerView$State mState>
	//*  69  145:getfield        #859 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  70  148:ifeq            174
	//*  71  151:iload_1         
	//*  72  152:ifeq            174
	//*  73  155:aload_0         
	//*  74  156:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*  75  159:ifne            174
	//*  76  162:aload_0         
	//*  77  163:invokespecial   #1313 <Method boolean predictiveItemAnimationsEnabled()>
	//*  78  166:ifeq            174
			flag1 = true;
	//   79  169:iconst_1        
	//   80  170:istore_2        
		else
	//*  81  171:goto            176
			flag1 = false;
	//   82  174:iconst_0        
	//   83  175:istore_2        
		state.mRunPredictiveAnimations = flag1;
	//   84  176:aload_3         
	//   85  177:iload_2         
	//   86  178:putfield        #865 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   87  181:return          
	}

	private void pullGlows(float f, float f1, float f2, float f3)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          5
		if(f1 < 0.0F)
	//*   2    3:fload_2         
	//*   3    4:fconst_0        
	//*   4    5:fcmpg           
	//*   5    6:ifge            43
		{
			ensureLeftGlow();
	//    6    9:aload_0         
	//    7   10:invokevirtual   #1323 <Method void ensureLeftGlow()>
			EdgeEffectCompat.onPull(mLeftGlow, -f1 / (float)getWidth(), 1.0F - f2 / (float)getHeight());
	//    8   13:aload_0         
	//    9   14:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   10   17:fload_2         
	//   11   18:fneg            
	//   12   19:aload_0         
	//   13   20:invokevirtual   #1326 <Method int getWidth()>
	//   14   23:i2f             
	//   15   24:fdiv            
	//   16   25:fconst_1        
	//   17   26:fload_3         
	//   18   27:aload_0         
	//   19   28:invokevirtual   #1327 <Method int getHeight()>
	//   20   31:i2f             
	//   21   32:fdiv            
	//   22   33:fsub            
	//   23   34:invokestatic    #1333 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   24   37:iconst_1        
	//   25   38:istore          5
		} else
	//*  26   40:goto            77
		if(f1 > 0.0F)
	//*  27   43:fload_2         
	//*  28   44:fconst_0        
	//*  29   45:fcmpl           
	//*  30   46:ifle            77
		{
			ensureRightGlow();
	//   31   49:aload_0         
	//   32   50:invokevirtual   #1336 <Method void ensureRightGlow()>
			EdgeEffectCompat.onPull(mRightGlow, f1 / (float)getWidth(), f2 / (float)getHeight());
	//   33   53:aload_0         
	//   34   54:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   35   57:fload_2         
	//   36   58:aload_0         
	//   37   59:invokevirtual   #1326 <Method int getWidth()>
	//   38   62:i2f             
	//   39   63:fdiv            
	//   40   64:fload_3         
	//   41   65:aload_0         
	//   42   66:invokevirtual   #1327 <Method int getHeight()>
	//   43   69:i2f             
	//   44   70:fdiv            
	//   45   71:invokestatic    #1333 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   46   74:iconst_1        
	//   47   75:istore          5
		}
		if(f3 < 0.0F)
	//*  48   77:fload           4
	//*  49   79:fconst_0        
	//*  50   80:fcmpg           
	//*  51   81:ifge            117
		{
			ensureTopGlow();
	//   52   84:aload_0         
	//   53   85:invokevirtual   #1341 <Method void ensureTopGlow()>
			EdgeEffectCompat.onPull(mTopGlow, -f3 / (float)getHeight(), f / (float)getWidth());
	//   54   88:aload_0         
	//   55   89:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   56   92:fload           4
	//   57   94:fneg            
	//   58   95:aload_0         
	//   59   96:invokevirtual   #1327 <Method int getHeight()>
	//   60   99:i2f             
	//   61  100:fdiv            
	//   62  101:fload_1         
	//   63  102:aload_0         
	//   64  103:invokevirtual   #1326 <Method int getWidth()>
	//   65  106:i2f             
	//   66  107:fdiv            
	//   67  108:invokestatic    #1333 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   68  111:iconst_1        
	//   69  112:istore          5
		} else
	//*  70  114:goto            155
		if(f3 > 0.0F)
	//*  71  117:fload           4
	//*  72  119:fconst_0        
	//*  73  120:fcmpl           
	//*  74  121:ifle            155
		{
			ensureBottomGlow();
	//   75  124:aload_0         
	//   76  125:invokevirtual   #1346 <Method void ensureBottomGlow()>
			EdgeEffectCompat.onPull(mBottomGlow, f3 / (float)getHeight(), 1.0F - f / (float)getWidth());
	//   77  128:aload_0         
	//   78  129:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   79  132:fload           4
	//   80  134:aload_0         
	//   81  135:invokevirtual   #1327 <Method int getHeight()>
	//   82  138:i2f             
	//   83  139:fdiv            
	//   84  140:fconst_1        
	//   85  141:fload_1         
	//   86  142:aload_0         
	//   87  143:invokevirtual   #1326 <Method int getWidth()>
	//   88  146:i2f             
	//   89  147:fdiv            
	//   90  148:fsub            
	//   91  149:invokestatic    #1333 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   92  152:iconst_1        
	//   93  153:istore          5
		}
		if(flag || f1 != 0.0F || f3 != 0.0F)
	//*  94  155:iload           5
	//*  95  157:ifne            173
	//*  96  160:fload_2         
	//*  97  161:fconst_0        
	//*  98  162:fcmpl           
	//*  99  163:ifne            173
	//* 100  166:fload           4
	//* 101  168:fconst_0        
	//* 102  169:fcmpl           
	//* 103  170:ifeq            177
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  104  173:aload_0         
	//  105  174:invokestatic    #1351 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  106  177:return          
	}

	private void recoverFocusFromState()
	{
		if(!mPreserveFocusAfterLayout || mAdapter == null || !hasFocus() || getDescendantFocusability() == 0x60000 || getDescendantFocusability() == 0x20000 && isFocused())
	//*   0    0:aload_0         
	//*   1    1:getfield        #414 <Field boolean mPreserveFocusAfterLayout>
	//*   2    4:ifeq            48
	//*   3    7:aload_0         
	//*   4    8:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:ifnull          48
	//*   6   14:aload_0         
	//*   7   15:invokevirtual   #1352 <Method boolean hasFocus()>
	//*   8   18:ifeq            48
	//*   9   21:aload_0         
	//*  10   22:invokevirtual   #1355 <Method int getDescendantFocusability()>
	//*  11   25:ldc2            #1356 <Int 0x60000>
	//*  12   28:icmpeq          48
	//*  13   31:aload_0         
	//*  14   32:invokevirtual   #1355 <Method int getDescendantFocusability()>
	//*  15   35:ldc2            #1357 <Int 0x20000>
	//*  16   38:icmpne          49
	//*  17   41:aload_0         
	//*  18   42:invokevirtual   #1358 <Method boolean isFocused()>
	//*  19   45:ifeq            49
			return;
	//   20   48:return          
		if(!isFocused())
	//*  21   49:aload_0         
	//*  22   50:invokevirtual   #1358 <Method boolean isFocused()>
	//*  23   53:ifne            109
		{
			View view = getFocusedChild();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #1359 <Method View getFocusedChild()>
	//   26   60:astore_1        
			if(IGNORE_DETACHED_FOCUSED_CHILD && (view.getParent() == null || !view.hasFocus()))
	//*  27   61:getstatic       #327 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//*  28   64:ifeq            97
	//*  29   67:aload_1         
	//*  30   68:invokevirtual   #634 <Method ViewParent View.getParent()>
	//*  31   71:ifnull          81
	//*  32   74:aload_1         
	//*  33   75:invokevirtual   #1158 <Method boolean View.hasFocus()>
	//*  34   78:ifne            97
			{
				if(mChildHelper.getChildCount() == 0)
	//*  35   81:aload_0         
	//*  36   82:getfield        #646 <Field ChildHelper mChildHelper>
	//*  37   85:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//*  38   88:ifne            109
				{
					requestFocus();
	//   39   91:aload_0         
	//   40   92:invokevirtual   #1362 <Method boolean requestFocus()>
	//   41   95:pop             
					return;
	//   42   96:return          
				}
			} else
			if(!mChildHelper.isHidden(view))
	//*  43   97:aload_0         
	//*  44   98:getfield        #646 <Field ChildHelper mChildHelper>
	//*  45  101:aload_1         
	//*  46  102:invokevirtual   #1366 <Method boolean ChildHelper.isHidden(View)>
	//*  47  105:ifne            109
				return;
	//   48  108:return          
		}
		Object obj1 = null;
	//   49  109:aconst_null     
	//   50  110:astore_2        
		Object obj = ((Object) (obj1));
	//   51  111:aload_2         
	//   52  112:astore_1        
		if(mState.mFocusedItemId != -1L)
	//*  53  113:aload_0         
	//*  54  114:getfield        #425 <Field RecyclerView$State mState>
	//*  55  117:getfield        #1369 <Field long RecyclerView$State.mFocusedItemId>
	//*  56  120:ldc2w           #153 <Long -1L>
	//*  57  123:lcmp            
	//*  58  124:ifeq            151
		{
			obj = ((Object) (obj1));
	//   59  127:aload_2         
	//   60  128:astore_1        
			if(mAdapter.hasStableIds())
	//*  61  129:aload_0         
	//*  62  130:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  63  133:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  64  136:ifeq            151
				obj = ((Object) (findViewHolderForItemId(mState.mFocusedItemId)));
	//   65  139:aload_0         
	//   66  140:aload_0         
	//   67  141:getfield        #425 <Field RecyclerView$State mState>
	//   68  144:getfield        #1369 <Field long RecyclerView$State.mFocusedItemId>
	//   69  147:invokevirtual   #1372 <Method RecyclerView$ViewHolder findViewHolderForItemId(long)>
	//   70  150:astore_1        
		}
		obj1 = null;
	//   71  151:aconst_null     
	//   72  152:astore_2        
		if(obj == null || mChildHelper.isHidden(((ViewHolder) (obj)).itemView) || !((ViewHolder) (obj)).itemView.hasFocusable())
	//*  73  153:aload_1         
	//*  74  154:ifnull          181
	//*  75  157:aload_0         
	//*  76  158:getfield        #646 <Field ChildHelper mChildHelper>
	//*  77  161:aload_1         
	//*  78  162:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  79  165:invokevirtual   #1366 <Method boolean ChildHelper.isHidden(View)>
	//*  80  168:ifne            181
	//*  81  171:aload_1         
	//*  82  172:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  83  175:invokevirtual   #1095 <Method boolean View.hasFocusable()>
	//*  84  178:ifne            201
		{
			obj = ((Object) (obj1));
	//   85  181:aload_2         
	//   86  182:astore_1        
			if(mChildHelper.getChildCount() > 0)
	//*  87  183:aload_0         
	//*  88  184:getfield        #646 <Field ChildHelper mChildHelper>
	//*  89  187:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//*  90  190:ifle            206
				obj = ((Object) (findNextViewToFocus()));
	//   91  193:aload_0         
	//   92  194:invokespecial   #1374 <Method View findNextViewToFocus()>
	//   93  197:astore_1        
		} else
	//*  94  198:goto            206
		{
			obj = ((Object) (((ViewHolder) (obj)).itemView));
	//   95  201:aload_1         
	//   96  202:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   97  205:astore_1        
		}
		if(obj != null)
	//*  98  206:aload_1         
	//*  99  207:ifnull          261
		{
			Object obj2 = obj;
	//  100  210:aload_1         
	//  101  211:astore_2        
			if((long)mState.mFocusedSubChildId != -1L)
	//* 102  212:aload_0         
	//* 103  213:getfield        #425 <Field RecyclerView$State mState>
	//* 104  216:getfield        #1377 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 105  219:i2l             
	//* 106  220:ldc2w           #153 <Long -1L>
	//* 107  223:lcmp            
	//* 108  224:ifeq            256
			{
				View view1 = ((View) (obj)).findViewById(mState.mFocusedSubChildId);
	//  109  227:aload_1         
	//  110  228:aload_0         
	//  111  229:getfield        #425 <Field RecyclerView$State mState>
	//  112  232:getfield        #1377 <Field int RecyclerView$State.mFocusedSubChildId>
	//  113  235:invokevirtual   #1380 <Method View View.findViewById(int)>
	//  114  238:astore_3        
				obj2 = obj;
	//  115  239:aload_1         
	//  116  240:astore_2        
				if(view1 != null)
	//* 117  241:aload_3         
	//* 118  242:ifnull          256
				{
					obj2 = obj;
	//  119  245:aload_1         
	//  120  246:astore_2        
					if(view1.isFocusable())
	//* 121  247:aload_3         
	//* 122  248:invokevirtual   #1383 <Method boolean View.isFocusable()>
	//* 123  251:ifeq            256
						obj2 = ((Object) (view1));
	//  124  254:aload_3         
	//  125  255:astore_2        
				}
			}
			((View) (obj2)).requestFocus();
	//  126  256:aload_2         
	//  127  257:invokevirtual   #1384 <Method boolean View.requestFocus()>
	//  128  260:pop             
		}
	//  129  261:return          
	}

	private void releaseGlows()
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore_2        
		if(mLeftGlow != null)
	//*   2    2:aload_0         
	//*   3    3:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*   4    6:ifnull          24
		{
			mLeftGlow.onRelease();
	//    5    9:aload_0         
	//    6   10:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//    7   13:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//    8   16:aload_0         
	//    9   17:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   10   20:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   11   23:istore_2        
		}
		boolean flag = flag1;
	//   12   24:iload_2         
	//   13   25:istore_1        
		if(mTopGlow != null)
	//*  14   26:aload_0         
	//*  15   27:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*  16   30:ifnull          50
		{
			mTopGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   19   37:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mTopGlow.isFinished();
	//   20   40:iload_2         
	//   21   41:aload_0         
	//   22   42:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   23   45:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   24   48:ior             
	//   25   49:istore_1        
		}
		flag1 = flag;
	//   26   50:iload_1         
	//   27   51:istore_2        
		if(mRightGlow != null)
	//*  28   52:aload_0         
	//*  29   53:getfield        #1338 <Field EdgeEffect mRightGlow>
	//*  30   56:ifnull          76
		{
			mRightGlow.onRelease();
	//   31   59:aload_0         
	//   32   60:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   33   63:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
			flag1 = flag | mRightGlow.isFinished();
	//   34   66:iload_1         
	//   35   67:aload_0         
	//   36   68:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   37   71:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   38   74:ior             
	//   39   75:istore_2        
		}
		flag = flag1;
	//   40   76:iload_2         
	//   41   77:istore_1        
		if(mBottomGlow != null)
	//*  42   78:aload_0         
	//*  43   79:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//*  44   82:ifnull          102
		{
			mBottomGlow.onRelease();
	//   45   85:aload_0         
	//   46   86:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   47   89:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mBottomGlow.isFinished();
	//   48   92:iload_2         
	//   49   93:aload_0         
	//   50   94:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   51   97:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   52  100:ior             
	//   53  101:istore_1        
		}
		if(flag)
	//*  54  102:iload_1         
	//*  55  103:ifeq            110
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   56  106:aload_0         
	//   57  107:invokestatic    #1351 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   58  110:return          
	}

	private void requestChildOnScreen(View view, View view1)
	{
		Object obj;
		if(view1 != null)
	//*   0    0:aload_2         
	//*   1    1:ifnull          10
			obj = ((Object) (view1));
	//    2    4:aload_2         
	//    3    5:astore          5
		else
	//*   4    7:goto            13
			obj = ((Object) (view));
	//    5   10:aload_1         
	//    6   11:astore          5
		mTempRect.set(0, 0, ((View) (obj)).getWidth(), ((View) (obj)).getHeight());
	//    7   13:aload_0         
	//    8   14:getfield        #378 <Field Rect mTempRect>
	//    9   17:iconst_0        
	//   10   18:iconst_0        
	//   11   19:aload           5
	//   12   21:invokevirtual   #1262 <Method int View.getWidth()>
	//   13   24:aload           5
	//   14   26:invokevirtual   #1265 <Method int View.getHeight()>
	//   15   29:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
		obj = ((Object) (((View) (obj)).getLayoutParams()));
	//   16   32:aload           5
	//   17   34:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   18   37:astore          5
		if(obj instanceof LayoutParams)
	//*  19   39:aload           5
	//*  20   41:instanceof      #68  <Class RecyclerView$LayoutParams>
	//*  21   44:ifeq            157
		{
			obj = ((Object) ((LayoutParams)obj));
	//   22   47:aload           5
	//   23   49:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   24   52:astore          5
			if(!((LayoutParams) (obj)).mInsetsDirty)
	//*  25   54:aload           5
	//*  26   56:getfield        #1398 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*  27   59:ifne            157
			{
				obj = ((Object) (((LayoutParams) (obj)).mDecorInsets));
	//   28   62:aload           5
	//   29   64:getfield        #1108 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   30   67:astore          5
				Rect rect = mTempRect;
	//   31   69:aload_0         
	//   32   70:getfield        #378 <Field Rect mTempRect>
	//   33   73:astore          6
				rect.left = rect.left - ((Rect) (obj)).left;
	//   34   75:aload           6
	//   35   77:aload           6
	//   36   79:getfield        #1114 <Field int Rect.left>
	//   37   82:aload           5
	//   38   84:getfield        #1114 <Field int Rect.left>
	//   39   87:isub            
	//   40   88:putfield        #1114 <Field int Rect.left>
				rect = mTempRect;
	//   41   91:aload_0         
	//   42   92:getfield        #378 <Field Rect mTempRect>
	//   43   95:astore          6
				rect.right = rect.right + ((Rect) (obj)).right;
	//   44   97:aload           6
	//   45   99:aload           6
	//   46  101:getfield        #1132 <Field int Rect.right>
	//   47  104:aload           5
	//   48  106:getfield        #1132 <Field int Rect.right>
	//   49  109:iadd            
	//   50  110:putfield        #1132 <Field int Rect.right>
				rect = mTempRect;
	//   51  113:aload_0         
	//   52  114:getfield        #378 <Field Rect mTempRect>
	//   53  117:astore          6
				rect.top = rect.top - ((Rect) (obj)).top;
	//   54  119:aload           6
	//   55  121:aload           6
	//   56  123:getfield        #1123 <Field int Rect.top>
	//   57  126:aload           5
	//   58  128:getfield        #1123 <Field int Rect.top>
	//   59  131:isub            
	//   60  132:putfield        #1123 <Field int Rect.top>
				rect = mTempRect;
	//   61  135:aload_0         
	//   62  136:getfield        #378 <Field Rect mTempRect>
	//   63  139:astore          6
				rect.bottom = rect.bottom + ((Rect) (obj)).bottom;
	//   64  141:aload           6
	//   65  143:aload           6
	//   66  145:getfield        #1141 <Field int Rect.bottom>
	//   67  148:aload           5
	//   68  150:getfield        #1141 <Field int Rect.bottom>
	//   69  153:iadd            
	//   70  154:putfield        #1141 <Field int Rect.bottom>
			}
		}
		if(view1 != null)
	//*  71  157:aload_2         
	//*  72  158:ifnull          179
		{
			offsetDescendantRectToMyCoords(view1, mTempRect);
	//   73  161:aload_0         
	//   74  162:aload_2         
	//   75  163:aload_0         
	//   76  164:getfield        #378 <Field Rect mTempRect>
	//   77  167:invokevirtual   #1268 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			offsetRectIntoDescendantCoords(view, mTempRect);
	//   78  170:aload_0         
	//   79  171:aload_1         
	//   80  172:aload_0         
	//   81  173:getfield        #378 <Field Rect mTempRect>
	//   82  176:invokevirtual   #1401 <Method void offsetRectIntoDescendantCoords(View, Rect)>
		}
		obj = ((Object) (mLayout));
	//   83  179:aload_0         
	//   84  180:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   85  183:astore          5
		Rect rect1 = mTempRect;
	//   86  185:aload_0         
	//   87  186:getfield        #378 <Field Rect mTempRect>
	//   88  189:astore          6
		boolean flag;
		if(!mFirstLayoutComplete)
	//*  89  191:aload_0         
	//*  90  192:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//*  91  195:ifne            203
			flag = true;
	//   92  198:iconst_1        
	//   93  199:istore_3        
		else
	//*  94  200:goto            205
			flag = false;
	//   95  203:iconst_0        
	//   96  204:istore_3        
		boolean flag1;
		if(view1 == null)
	//*  97  205:aload_2         
	//*  98  206:ifnonnull       215
			flag1 = true;
	//   99  209:iconst_1        
	//  100  210:istore          4
		else
	//* 101  212:goto            218
			flag1 = false;
	//  102  215:iconst_0        
	//  103  216:istore          4
		((LayoutManager) (obj)).requestChildRectangleOnScreen(this, view, rect1, flag, flag1);
	//  104  218:aload           5
	//  105  220:aload_0         
	//  106  221:aload_1         
	//  107  222:aload           6
	//  108  224:iload_3         
	//  109  225:iload           4
	//  110  227:invokevirtual   #1405 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
	//  111  230:pop             
	//  112  231:return          
	}

	private void resetFocusInfo()
	{
		mState.mFocusedItemId = -1L;
	//    0    0:aload_0         
	//    1    1:getfield        #425 <Field RecyclerView$State mState>
	//    2    4:ldc2w           #153 <Long -1L>
	//    3    7:putfield        #1369 <Field long RecyclerView$State.mFocusedItemId>
		mState.mFocusedItemPosition = -1;
	//    4   10:aload_0         
	//    5   11:getfield        #425 <Field RecyclerView$State mState>
	//    6   14:iconst_m1       
	//    7   15:putfield        #1087 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = -1;
	//    8   18:aload_0         
	//    9   19:getfield        #425 <Field RecyclerView$State mState>
	//   10   22:iconst_m1       
	//   11   23:putfield        #1377 <Field int RecyclerView$State.mFocusedSubChildId>
	//   12   26:return          
	}

	private void resetTouch()
	{
		if(mVelocityTracker != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//*   2    4:ifnull          14
			mVelocityTracker.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//    5   11:invokevirtual   #1410 <Method void VelocityTracker.clear()>
		stopNestedScroll();
	//    6   14:aload_0         
	//    7   15:invokevirtual   #1413 <Method void stopNestedScroll()>
		releaseGlows();
	//    8   18:aload_0         
	//    9   19:invokespecial   #1415 <Method void releaseGlows()>
	//   10   22:return          
	}

	private void saveFocusInfo()
	{
		State state = null;
	//    0    0:aconst_null     
	//    1    1:astore          5
		Object obj = ((Object) (state));
	//    2    3:aload           5
	//    3    5:astore          4
		if(mPreserveFocusAfterLayout)
	//*   4    7:aload_0         
	//*   5    8:getfield        #414 <Field boolean mPreserveFocusAfterLayout>
	//*   6   11:ifeq            42
		{
			obj = ((Object) (state));
	//    7   14:aload           5
	//    8   16:astore          4
			if(hasFocus())
	//*   9   18:aload_0         
	//*  10   19:invokevirtual   #1352 <Method boolean hasFocus()>
	//*  11   22:ifeq            42
			{
				obj = ((Object) (state));
	//   12   25:aload           5
	//   13   27:astore          4
				if(mAdapter != null)
	//*  14   29:aload_0         
	//*  15   30:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  16   33:ifnull          42
					obj = ((Object) (getFocusedChild()));
	//   17   36:aload_0         
	//   18   37:invokevirtual   #1359 <Method View getFocusedChild()>
	//   19   40:astore          4
			}
		}
		if(obj == null)
	//*  20   42:aload           4
	//*  21   44:ifnonnull       53
			obj = null;
	//   22   47:aconst_null     
	//   23   48:astore          4
		else
	//*  24   50:goto            61
			obj = ((Object) (findContainingViewHolder(((View) (obj)))));
	//   25   53:aload_0         
	//   26   54:aload           4
	//   27   56:invokevirtual   #1418 <Method RecyclerView$ViewHolder findContainingViewHolder(View)>
	//   28   59:astore          4
		if(obj == null)
	//*  29   61:aload           4
	//*  30   63:ifnonnull       71
		{
			resetFocusInfo();
	//   31   66:aload_0         
	//   32   67:invokespecial   #1046 <Method void resetFocusInfo()>
			return;
	//   33   70:return          
		}
		state = mState;
	//   34   71:aload_0         
	//   35   72:getfield        #425 <Field RecyclerView$State mState>
	//   36   75:astore          5
		long l;
		if(mAdapter.hasStableIds())
	//*  37   77:aload_0         
	//*  38   78:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  39   81:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  40   84:ifeq            96
			l = ((ViewHolder) (obj)).getItemId();
	//   41   87:aload           4
	//   42   89:invokevirtual   #1422 <Method long RecyclerView$ViewHolder.getItemId()>
	//   43   92:lstore_2        
		else
	//*  44   93:goto            100
			l = -1L;
	//   45   96:ldc2w           #153 <Long -1L>
	//   46   99:lstore_2        
		state.mFocusedItemId = l;
	//   47  100:aload           5
	//   48  102:lload_2         
	//   49  103:putfield        #1369 <Field long RecyclerView$State.mFocusedItemId>
		state = mState;
	//   50  106:aload_0         
	//   51  107:getfield        #425 <Field RecyclerView$State mState>
	//   52  110:astore          5
		int i;
		if(mDataSetHasChangedAfterLayout)
	//*  53  112:aload_0         
	//*  54  113:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*  55  116:ifeq            124
			i = -1;
	//   56  119:iconst_m1       
	//   57  120:istore_1        
		else
	//*  58  121:goto            147
		if(((ViewHolder) (obj)).isRemoved())
	//*  59  124:aload           4
	//*  60  126:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  61  129:ifeq            141
			i = ((ViewHolder) (obj)).mOldPosition;
	//   62  132:aload           4
	//   63  134:getfield        #1425 <Field int RecyclerView$ViewHolder.mOldPosition>
	//   64  137:istore_1        
		else
	//*  65  138:goto            147
			i = ((ViewHolder) (obj)).getAdapterPosition();
	//   66  141:aload           4
	//   67  143:invokevirtual   #1428 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//   68  146:istore_1        
		state.mFocusedItemPosition = i;
	//   69  147:aload           5
	//   70  149:iload_1         
	//   71  150:putfield        #1087 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = getDeepestFocusedViewWithId(((ViewHolder) (obj)).itemView);
	//   72  153:aload_0         
	//   73  154:getfield        #425 <Field RecyclerView$State mState>
	//   74  157:aload_0         
	//   75  158:aload           4
	//   76  160:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   77  163:invokespecial   #1430 <Method int getDeepestFocusedViewWithId(View)>
	//   78  166:putfield        #1377 <Field int RecyclerView$State.mFocusedSubChildId>
	//   79  169:return          
	}

	private void setAdapterInternal(Adapter adapter, boolean flag, boolean flag1)
	{
		if(mAdapter != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          26
		{
			mAdapter.unregisterAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//    3    7:aload_0         
	//    4    8:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//    5   11:aload_0         
	//    6   12:getfield        #362 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//    7   15:invokevirtual   #1436 <Method void RecyclerView$Adapter.unregisterAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			mAdapter.onDetachedFromRecyclerView(this);
	//    8   18:aload_0         
	//    9   19:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   10   22:aload_0         
	//   11   23:invokevirtual   #1439 <Method void RecyclerView$Adapter.onDetachedFromRecyclerView(RecyclerView)>
		}
		if(!flag || flag1)
	//*  12   26:iload_2         
	//*  13   27:ifeq            34
	//*  14   30:iload_3         
	//*  15   31:ifeq            38
			removeAndRecycleViews();
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1442 <Method void removeAndRecycleViews()>
		mAdapterHelper.reset();
	//   18   38:aload_0         
	//   19   39:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   20   42:invokevirtual   #1308 <Method void AdapterHelper.reset()>
		Adapter adapter1 = mAdapter;
	//   21   45:aload_0         
	//   22   46:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   23   49:astore          4
		mAdapter = adapter;
	//   24   51:aload_0         
	//   25   52:aload_1         
	//   26   53:putfield        #870 <Field RecyclerView$Adapter mAdapter>
		if(adapter != null)
	//*  27   56:aload_1         
	//*  28   57:ifnull          73
		{
			adapter.registerAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//   29   60:aload_1         
	//   30   61:aload_0         
	//   31   62:getfield        #362 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//   32   65:invokevirtual   #1445 <Method void RecyclerView$Adapter.registerAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			adapter.onAttachedToRecyclerView(this);
	//   33   68:aload_1         
	//   34   69:aload_0         
	//   35   70:invokevirtual   #1448 <Method void RecyclerView$Adapter.onAttachedToRecyclerView(RecyclerView)>
		}
		if(mLayout != null)
	//*  36   73:aload_0         
	//*  37   74:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  38   77:ifnull          93
			mLayout.onAdapterChanged(adapter1, mAdapter);
	//   39   80:aload_0         
	//   40   81:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   41   84:aload           4
	//   42   86:aload_0         
	//   43   87:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   44   90:invokevirtual   #1452 <Method void RecyclerView$LayoutManager.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter)>
		mRecycler.onAdapterChanged(adapter1, mAdapter, flag);
	//   45   93:aload_0         
	//   46   94:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   47   97:aload           4
	//   48   99:aload_0         
	//   49  100:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   50  103:iload_2         
	//   51  104:invokevirtual   #1455 <Method void RecyclerView$Recycler.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		mState.mStructureChanged = true;
	//   52  107:aload_0         
	//   53  108:getfield        #425 <Field RecyclerView$State mState>
	//   54  111:iconst_1        
	//   55  112:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
		markKnownViewsInvalid();
	//   56  115:aload_0         
	//   57  116:invokevirtual   #1458 <Method void markKnownViewsInvalid()>
	//   58  119:return          
	}

	private void stopScrollersInternal()
	{
		mViewFlinger.stop();
	//    0    0:aload_0         
	//    1    1:getfield        #417 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    2    4:invokevirtual   #1462 <Method void RecyclerView$ViewFlinger.stop()>
		if(mLayout != null)
	//*   3    7:aload_0         
	//*   4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:ifnull          21
			mLayout.stopSmoothScroller();
	//    6   14:aload_0         
	//    7   15:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    8   18:invokevirtual   #1465 <Method void RecyclerView$LayoutManager.stopSmoothScroller()>
	//    9   21:return          
	}

	void absorbGlows(int i, int j)
	{
		if(i < 0)
	//*   0    0:iload_1         
	//*   1    1:ifge            20
		{
			ensureLeftGlow();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #1323 <Method void ensureLeftGlow()>
			mLeftGlow.onAbsorb(-i);
	//    4    8:aload_0         
	//    5    9:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//    6   12:iload_1         
	//    7   13:ineg            
	//    8   14:invokevirtual   #1469 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*   9   17:goto            36
		if(i > 0)
	//*  10   20:iload_1         
	//*  11   21:ifle            36
		{
			ensureRightGlow();
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1336 <Method void ensureRightGlow()>
			mRightGlow.onAbsorb(i);
	//   14   28:aload_0         
	//   15   29:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1469 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(j < 0)
	//*  18   36:iload_2         
	//*  19   37:ifge            56
		{
			ensureTopGlow();
	//   20   40:aload_0         
	//   21   41:invokevirtual   #1341 <Method void ensureTopGlow()>
			mTopGlow.onAbsorb(-j);
	//   22   44:aload_0         
	//   23   45:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   24   48:iload_2         
	//   25   49:ineg            
	//   26   50:invokevirtual   #1469 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*  27   53:goto            72
		if(j > 0)
	//*  28   56:iload_2         
	//*  29   57:ifle            72
		{
			ensureBottomGlow();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1346 <Method void ensureBottomGlow()>
			mBottomGlow.onAbsorb(j);
	//   32   64:aload_0         
	//   33   65:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   34   68:iload_2         
	//   35   69:invokevirtual   #1469 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(i != 0 || j != 0)
	//*  36   72:iload_1         
	//*  37   73:ifne            80
	//*  38   76:iload_2         
	//*  39   77:ifeq            84
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   40   80:aload_0         
	//   41   81:invokestatic    #1351 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   42   84:return          
	}

	public void addFocusables(ArrayList arraylist, int i, int j)
	{
		if(mLayout == null || !mLayout.onAddFocusables(this, arraylist, i, j))
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          21
	//*   3    7:aload_0         
	//*   4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:aload_0         
	//*   6   12:aload_1         
	//*   7   13:iload_2         
	//*   8   14:iload_3         
	//*   9   15:invokevirtual   #1475 <Method boolean RecyclerView$LayoutManager.onAddFocusables(RecyclerView, ArrayList, int, int)>
	//*  10   18:ifne            28
			super.addFocusables(arraylist, i, j);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:iload_2         
	//   14   24:iload_3         
	//   15   25:invokespecial   #1477 <Method void ViewGroup.addFocusables(ArrayList, int, int)>
	//   16   28:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration)
	{
		addItemDecoration(itemdecoration, -1);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iconst_m1       
	//    3    3:invokevirtual   #1484 <Method void addItemDecoration(RecyclerView$ItemDecoration, int)>
	//    4    6:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration, int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #1486 <String "Cannot add item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1489 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		if(mItemDecorations.isEmpty())
	//*   7   17:aload_0         
	//*   8   18:getfield        #390 <Field ArrayList mItemDecorations>
	//*   9   21:invokevirtual   #1492 <Method boolean ArrayList.isEmpty()>
	//*  10   24:ifeq            32
			setWillNotDraw(false);
	//   11   27:aload_0         
	//   12   28:iconst_0        
	//   13   29:invokevirtual   #500 <Method void setWillNotDraw(boolean)>
		if(i < 0)
	//*  14   32:iload_2         
	//*  15   33:ifge            48
			mItemDecorations.add(((Object) (itemdecoration)));
	//   16   36:aload_0         
	//   17   37:getfield        #390 <Field ArrayList mItemDecorations>
	//   18   40:aload_1         
	//   19   41:invokevirtual   #1496 <Method boolean ArrayList.add(Object)>
	//   20   44:pop             
		else
	//*  21   45:goto            57
			mItemDecorations.add(i, ((Object) (itemdecoration)));
	//   22   48:aload_0         
	//   23   49:getfield        #390 <Field ArrayList mItemDecorations>
	//   24   52:iload_2         
	//   25   53:aload_1         
	//   26   54:invokevirtual   #1499 <Method void ArrayList.add(int, Object)>
		markItemDecorInsetsDirty();
	//   27   57:aload_0         
	//   28   58:invokevirtual   #1502 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1505 <Method void requestLayout()>
	//   31   65:return          
	}

	public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       18
			mOnChildAttachStateListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #387 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #388 <Method void ArrayList()>
	//    7   15:putfield        #1509 <Field List mOnChildAttachStateListeners>
		mOnChildAttachStateListeners.add(((Object) (onchildattachstatechangelistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1512 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	public void addOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.add(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #1496 <Method boolean ArrayList.add(Object)>
	//    4    8:pop             
	//    5    9:return          
	}

	public void addOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1518 <Field List mScrollListeners>
	//*   2    4:ifnonnull       18
			mScrollListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #387 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #388 <Method void ArrayList()>
	//    7   15:putfield        #1518 <Field List mScrollListeners>
		mScrollListeners.add(((Object) (onscrolllistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1518 <Field List mScrollListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1512 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	void animateAppearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #669 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateAppearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   3    5:aload_0         
	//*   4    6:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:aload_3         
	//*   8   12:invokevirtual   #1523 <Method boolean RecyclerView$ItemAnimator.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*   9   15:ifeq            22
			postAnimationRunner();
	//   10   18:aload_0         
	//   11   19:invokevirtual   #684 <Method void postAnimationRunner()>
	//   12   22:return          
	}

	void animateDisappearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		addAnimatingView(viewholder);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #671 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		viewholder.setIsRecyclable(false);
	//    3    5:aload_1         
	//    4    6:iconst_0        
	//    5    7:invokevirtual   #669 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateDisappearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   6   10:aload_0         
	//*   7   11:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   8   14:aload_1         
	//*   9   15:aload_2         
	//*  10   16:aload_3         
	//*  11   17:invokevirtual   #1526 <Method boolean RecyclerView$ItemAnimator.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  12   20:ifeq            27
			postAnimationRunner();
	//   13   23:aload_0         
	//   14   24:invokevirtual   #684 <Method void postAnimationRunner()>
	//   15   27:return          
	}

	void assertInLayoutOrScroll(String s)
	{
		if(!isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*   2    4:ifne            31
		{
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       22
				throw new IllegalStateException("Cannot call this method unless RecyclerView is computing a layout or scrolling");
	//    5   11:new             #764 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:ldc2            #1532 <String "Cannot call this method unless RecyclerView is computing a layout or scrolling">
	//    8   18:invokespecial   #1234 <Method void IllegalStateException(String)>
	//    9   21:athrow          
			else
				throw new IllegalStateException(s);
	//   10   22:new             #764 <Class IllegalStateException>
	//   11   25:dup             
	//   12   26:aload_1         
	//   13   27:invokespecial   #1234 <Method void IllegalStateException(String)>
	//   14   30:athrow          
		} else
		{
			return;
	//   15   31:return          
		}
	}

	void assertNotInLayoutOrScroll(String s)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            31
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       22
				throw new IllegalStateException("Cannot call this method while RecyclerView is computing a layout or scrolling");
	//    5   11:new             #764 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:ldc2            #1534 <String "Cannot call this method while RecyclerView is computing a layout or scrolling">
	//    8   18:invokespecial   #1234 <Method void IllegalStateException(String)>
	//    9   21:athrow          
			else
				throw new IllegalStateException(s);
	//   10   22:new             #764 <Class IllegalStateException>
	//   11   25:dup             
	//   12   26:aload_1         
	//   13   27:invokespecial   #1234 <Method void IllegalStateException(String)>
	//   14   30:athrow          
		if(mDispatchScrollCounter > 0)
	//*  15   31:aload_0         
	//*  16   32:getfield        #400 <Field int mDispatchScrollCounter>
	//*  17   35:ifle            57
			Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", ((Throwable) (new IllegalStateException(""))));
	//   18   38:ldc1            #165 <String "RecyclerView">
	//   19   40:ldc2            #1536 <String "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.">
	//   20   43:new             #764 <Class IllegalStateException>
	//   21   46:dup             
	//   22   47:ldc2            #1538 <String "">
	//   23   50:invokespecial   #1234 <Method void IllegalStateException(String)>
	//   24   53:invokestatic    #1542 <Method int Log.w(String, String, Throwable)>
	//   25   56:pop             
	//   26   57:return          
	}

	boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
	{
		return mItemAnimator == null || mItemAnimator.canReuseUpdatedViewHolder(viewholder, viewholder.getUnmodifiedPayloads());
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          22
	//    3    7:aload_0         
	//    4    8:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:aload_1         
	//    6   12:aload_1         
	//    7   13:invokevirtual   #903 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//    8   16:invokevirtual   #1546 <Method boolean RecyclerView$ItemAnimator.canReuseUpdatedViewHolder(RecyclerView$ViewHolder, List)>
	//    9   19:ifeq            24
	//   10   22:iconst_1        
	//   11   23:ireturn         
	//   12   24:iconst_0        
	//   13   25:ireturn         
	}

	protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		return (layoutparams instanceof LayoutParams) && mLayout.checkLayoutParams((LayoutParams)layoutparams);
	//    0    0:aload_1         
	//    1    1:instanceof      #68  <Class RecyclerView$LayoutParams>
	//    2    4:ifeq            23
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:aload_1         
	//    6   12:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   15:invokevirtual   #1551 <Method boolean RecyclerView$LayoutManager.checkLayoutParams(RecyclerView$LayoutParams)>
	//    8   18:ifeq            23
	//    9   21:iconst_1        
	//   10   22:ireturn         
	//   11   23:iconst_0        
	//   12   24:ireturn         
	}

	void clearOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.clearOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #1560 <Method void RecyclerView$ViewHolder.clearOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
		mRecycler.clearOldPositions();
	//   25   45:aload_0         
	//   26   46:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   27   49:invokevirtual   #1561 <Method void RecyclerView$Recycler.clearOldPositions()>
	//   28   52:return          
	}

	public void clearOnChildAttachStateChangeListeners()
	{
		if(mOnChildAttachStateListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnull          16
			mOnChildAttachStateListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//    5   11:invokeinterface #1563 <Method void List.clear()>
	//    6   16:return          
	}

	public void clearOnScrollListeners()
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1518 <Field List mScrollListeners>
	//*   2    4:ifnull          16
			mScrollListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1518 <Field List mScrollListeners>
	//    5   11:invokeinterface #1563 <Method void List.clear()>
	//    6   16:return          
	}

	public int computeHorizontalScrollExtent()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*   8   16:ifeq            31
			return mLayout.computeHorizontalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1571 <Method int RecyclerView$LayoutManager.computeHorizontalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	public int computeHorizontalScrollOffset()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*   8   16:ifeq            31
			return mLayout.computeHorizontalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1574 <Method int RecyclerView$LayoutManager.computeHorizontalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	public int computeHorizontalScrollRange()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*   8   16:ifeq            31
			return mLayout.computeHorizontalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1577 <Method int RecyclerView$LayoutManager.computeHorizontalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	public int computeVerticalScrollExtent()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollVertically())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*   8   16:ifeq            31
			return mLayout.computeVerticalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1583 <Method int RecyclerView$LayoutManager.computeVerticalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	public int computeVerticalScrollOffset()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollVertically())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*   8   16:ifeq            31
			return mLayout.computeVerticalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1586 <Method int RecyclerView$LayoutManager.computeVerticalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	public int computeVerticalScrollRange()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayout.canScrollVertically())
	//*   5    9:aload_0         
	//*   6   10:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   13:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*   8   16:ifeq            31
			return mLayout.computeVerticalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #425 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1589 <Method int RecyclerView$LayoutManager.computeVerticalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
		else
			return 0;
	//   15   31:iconst_0        
	//   16   32:ireturn         
	}

	void considerReleasingGlowsOnScroll(int i, int j)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		boolean flag = flag1;
	//    2    3:iload           4
	//    3    5:istore_3        
		if(mLeftGlow != null)
	//*   4    6:aload_0         
	//*   5    7:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*   6   10:ifnull          48
		{
			flag = flag1;
	//    7   13:iload           4
	//    8   15:istore_3        
			if(!mLeftGlow.isFinished())
	//*   9   16:aload_0         
	//*  10   17:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*  11   20:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  12   23:ifne            48
			{
				flag = flag1;
	//   13   26:iload           4
	//   14   28:istore_3        
				if(i > 0)
	//*  15   29:iload_1         
	//*  16   30:ifle            48
				{
					mLeftGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   19   37:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
					flag = mLeftGlow.isFinished();
	//   20   40:aload_0         
	//   21   41:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   22   44:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   23   47:istore_3        
				}
			}
		}
		flag1 = flag;
	//   24   48:iload_3         
	//   25   49:istore          4
		if(mRightGlow != null)
	//*  26   51:aload_0         
	//*  27   52:getfield        #1338 <Field EdgeEffect mRightGlow>
	//*  28   55:ifnull          96
		{
			flag1 = flag;
	//   29   58:iload_3         
	//   30   59:istore          4
			if(!mRightGlow.isFinished())
	//*  31   61:aload_0         
	//*  32   62:getfield        #1338 <Field EdgeEffect mRightGlow>
	//*  33   65:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  34   68:ifne            96
			{
				flag1 = flag;
	//   35   71:iload_3         
	//   36   72:istore          4
				if(i < 0)
	//*  37   74:iload_1         
	//*  38   75:ifge            96
				{
					mRightGlow.onRelease();
	//   39   78:aload_0         
	//   40   79:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   41   82:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mRightGlow.isFinished();
	//   42   85:iload_3         
	//   43   86:aload_0         
	//   44   87:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   45   90:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   46   93:ior             
	//   47   94:istore          4
				}
			}
		}
		flag = flag1;
	//   48   96:iload           4
	//   49   98:istore_3        
		if(mTopGlow != null)
	//*  50   99:aload_0         
	//*  51  100:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*  52  103:ifnull          144
		{
			flag = flag1;
	//   53  106:iload           4
	//   54  108:istore_3        
			if(!mTopGlow.isFinished())
	//*  55  109:aload_0         
	//*  56  110:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*  57  113:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  58  116:ifne            144
			{
				flag = flag1;
	//   59  119:iload           4
	//   60  121:istore_3        
				if(j > 0)
	//*  61  122:iload_2         
	//*  62  123:ifle            144
				{
					mTopGlow.onRelease();
	//   63  126:aload_0         
	//   64  127:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   65  130:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mTopGlow.isFinished();
	//   66  133:iload           4
	//   67  135:aload_0         
	//   68  136:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   69  139:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   70  142:ior             
	//   71  143:istore_3        
				}
			}
		}
		flag1 = flag;
	//   72  144:iload_3         
	//   73  145:istore          4
		if(mBottomGlow != null)
	//*  74  147:aload_0         
	//*  75  148:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//*  76  151:ifnull          192
		{
			flag1 = flag;
	//   77  154:iload_3         
	//   78  155:istore          4
			if(!mBottomGlow.isFinished())
	//*  79  157:aload_0         
	//*  80  158:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//*  81  161:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  82  164:ifne            192
			{
				flag1 = flag;
	//   83  167:iload_3         
	//   84  168:istore          4
				if(j < 0)
	//*  85  170:iload_2         
	//*  86  171:ifge            192
				{
					mBottomGlow.onRelease();
	//   87  174:aload_0         
	//   88  175:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   89  178:invokevirtual   #1390 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mBottomGlow.isFinished();
	//   90  181:iload_3         
	//   91  182:aload_0         
	//   92  183:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   93  186:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//   94  189:ior             
	//   95  190:istore          4
				}
			}
		}
		if(flag1)
	//*  96  192:iload           4
	//*  97  194:ifeq            201
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   98  197:aload_0         
	//   99  198:invokestatic    #1351 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  100  201:return          
	}

	void consumePendingUpdateOperations()
	{
		if(!mFirstLayoutComplete || mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//*   2    4:ifeq            14
	//*   3    7:aload_0         
	//*   4    8:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*   5   11:ifeq            27
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//    6   14:ldc1            #182 <String "RV FullInvalidate">
	//    7   16:invokestatic    #1596 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//    8   19:aload_0         
	//    9   20:invokevirtual   #1599 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   10   23:invokestatic    #1602 <Method void TraceCompat.endSection()>
			return;
	//   11   26:return          
		}
		if(!mAdapterHelper.hasPendingUpdates())
	//*  12   27:aload_0         
	//*  13   28:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//*  14   31:invokevirtual   #1605 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  15   34:ifne            38
			return;
	//   16   37:return          
		if(mAdapterHelper.hasAnyUpdateTypes(4) && !mAdapterHelper.hasAnyUpdateTypes(11))
	//*  17   38:aload_0         
	//*  18   39:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//*  19   42:iconst_4        
	//*  20   43:invokevirtual   #1608 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  21   46:ifeq            122
	//*  22   49:aload_0         
	//*  23   50:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//*  24   53:bipush          11
	//*  25   55:invokevirtual   #1608 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  26   58:ifne            122
		{
			TraceCompat.beginSection("RV PartialInvalidate");
	//   27   61:ldc1            #176 <String "RV PartialInvalidate">
	//   28   63:invokestatic    #1596 <Method void TraceCompat.beginSection(String)>
			eatRequestLayout();
	//   29   66:aload_0         
	//   30   67:invokevirtual   #844 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//   31   70:aload_0         
	//   32   71:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
			mAdapterHelper.preProcess();
	//   33   74:aload_0         
	//   34   75:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   35   78:invokevirtual   #1316 <Method void AdapterHelper.preProcess()>
			if(!mLayoutRequestEaten)
	//*  36   81:aload_0         
	//*  37   82:getfield        #1610 <Field boolean mLayoutRequestEaten>
	//*  38   85:ifne            109
				if(hasUpdatedView())
	//*  39   88:aload_0         
	//*  40   89:invokespecial   #1612 <Method boolean hasUpdatedView()>
	//*  41   92:ifeq            102
					dispatchLayout();
	//   42   95:aload_0         
	//   43   96:invokevirtual   #1599 <Method void dispatchLayout()>
				else
	//*  44   99:goto            109
					mAdapterHelper.consumePostponedUpdates();
	//   45  102:aload_0         
	//   46  103:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   47  106:invokevirtual   #1615 <Method void AdapterHelper.consumePostponedUpdates()>
			resumeRequestLayout(true);
	//   48  109:aload_0         
	//   49  110:iconst_1        
	//   50  111:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
			onExitLayoutOrScroll();
	//   51  114:aload_0         
	//   52  115:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
			TraceCompat.endSection();
	//   53  118:invokestatic    #1602 <Method void TraceCompat.endSection()>
			return;
	//   54  121:return          
		}
		if(mAdapterHelper.hasPendingUpdates())
	//*  55  122:aload_0         
	//*  56  123:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//*  57  126:invokevirtual   #1605 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  58  129:ifeq            144
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//   59  132:ldc1            #182 <String "RV FullInvalidate">
	//   60  134:invokestatic    #1596 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//   61  137:aload_0         
	//   62  138:invokevirtual   #1599 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   63  141:invokestatic    #1602 <Method void TraceCompat.endSection()>
		}
	//   64  144:return          
	}

	void defaultOnMeasure(int i, int j)
	{
		setMeasuredDimension(LayoutManager.chooseSize(i, getPaddingLeft() + getPaddingRight(), ViewCompat.getMinimumWidth(((View) (this)))), LayoutManager.chooseSize(j, getPaddingTop() + getPaddingBottom(), ViewCompat.getMinimumHeight(((View) (this)))));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:invokevirtual   #1619 <Method int getPaddingLeft()>
	//    4    6:aload_0         
	//    5    7:invokevirtual   #1622 <Method int getPaddingRight()>
	//    6   10:iadd            
	//    7   11:aload_0         
	//    8   12:invokestatic    #1625 <Method int ViewCompat.getMinimumWidth(View)>
	//    9   15:invokestatic    #1629 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   10   18:iload_2         
	//   11   19:aload_0         
	//   12   20:invokevirtual   #1632 <Method int getPaddingTop()>
	//   13   23:aload_0         
	//   14   24:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   15   27:iadd            
	//   16   28:aload_0         
	//   17   29:invokestatic    #1638 <Method int ViewCompat.getMinimumHeight(View)>
	//   18   32:invokestatic    #1629 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   19   35:invokevirtual   #615 <Method void setMeasuredDimension(int, int)>
	//   20   38:return          
	}

	void dispatchChildAttached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildAttachedToWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1642 <Method void onChildAttachedToWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewAttachedToWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1645 <Method void RecyclerView$Adapter.onViewAttachedToWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1646 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewAttachedToWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1647 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1650 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewAttachedToWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchChildDetached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildDetachedFromWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1654 <Method void onChildDetachedFromWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewDetachedFromWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1657 <Method void RecyclerView$Adapter.onViewDetachedFromWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1646 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewDetachedFromWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1647 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1660 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewDetachedFromWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchLayout()
	{
		if(mAdapter == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "No adapter attached; skipping layout");
	//    3    7:ldc1            #165 <String "RecyclerView">
	//    4    9:ldc2            #1662 <String "No adapter attached; skipping layout">
	//    5   12:invokestatic    #1246 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayout == null)
	//*   8   17:aload_0         
	//*   9   18:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  10   21:ifnonnull       34
		{
			Log.e("RecyclerView", "No layout manager attached; skipping layout");
	//   11   24:ldc1            #165 <String "RecyclerView">
	//   12   26:ldc2            #1664 <String "No layout manager attached; skipping layout">
	//   13   29:invokestatic    #1246 <Method int Log.e(String, String)>
	//   14   32:pop             
			return;
	//   15   33:return          
		}
		mState.mIsMeasuring = false;
	//   16   34:aload_0         
	//   17   35:getfield        #425 <Field RecyclerView$State mState>
	//   18   38:iconst_0        
	//   19   39:putfield        #841 <Field boolean RecyclerView$State.mIsMeasuring>
		if(mState.mLayoutStep == 1)
	//*  20   42:aload_0         
	//*  21   43:getfield        #425 <Field RecyclerView$State mState>
	//*  22   46:getfield        #963 <Field int RecyclerView$State.mLayoutStep>
	//*  23   49:iconst_1        
	//*  24   50:icmpne          72
		{
			dispatchLayoutStep1();
	//   25   53:aload_0         
	//   26   54:invokespecial   #1666 <Method void dispatchLayoutStep1()>
			mLayout.setExactMeasureSpecsFrom(this);
	//   27   57:aload_0         
	//   28   58:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1669 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   31   65:aload_0         
	//   32   66:invokespecial   #1671 <Method void dispatchLayoutStep2()>
		} else
	//*  33   69:goto            133
		if(mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth() || mLayout.getHeight() != getHeight())
	//*  34   72:aload_0         
	//*  35   73:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//*  36   76:invokevirtual   #1674 <Method boolean AdapterHelper.hasUpdates()>
	//*  37   79:ifne            110
	//*  38   82:aload_0         
	//*  39   83:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  40   86:invokevirtual   #1675 <Method int RecyclerView$LayoutManager.getWidth()>
	//*  41   89:aload_0         
	//*  42   90:invokevirtual   #1326 <Method int getWidth()>
	//*  43   93:icmpne          110
	//*  44   96:aload_0         
	//*  45   97:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  46  100:invokevirtual   #1676 <Method int RecyclerView$LayoutManager.getHeight()>
	//*  47  103:aload_0         
	//*  48  104:invokevirtual   #1327 <Method int getHeight()>
	//*  49  107:icmpeq          125
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   50  110:aload_0         
	//   51  111:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   52  114:aload_0         
	//   53  115:invokevirtual   #1669 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   54  118:aload_0         
	//   55  119:invokespecial   #1671 <Method void dispatchLayoutStep2()>
		} else
	//*  56  122:goto            133
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   57  125:aload_0         
	//   58  126:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   59  129:aload_0         
	//   60  130:invokevirtual   #1669 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
		}
		dispatchLayoutStep3();
	//   61  133:aload_0         
	//   62  134:invokespecial   #1678 <Method void dispatchLayoutStep3()>
	//   63  137:return          
	}

	public boolean dispatchNestedFling(float f, float f1, boolean flag)
	{
		return getScrollingChildHelper().dispatchNestedFling(f, f1, flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:iload_3         
	//    5    7:invokevirtual   #1684 <Method boolean NestedScrollingChildHelper.dispatchNestedFling(float, float, boolean)>
	//    6   10:ireturn         
	}

	public boolean dispatchNestedPreFling(float f, float f1)
	{
		return getScrollingChildHelper().dispatchNestedPreFling(f, f1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:invokevirtual   #1688 <Method boolean NestedScrollingChildHelper.dispatchNestedPreFling(float, float)>
	//    5    9:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[])
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:invokevirtual   #1692 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[])>
	//    7   12:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[])
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:invokevirtual   #1696 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[])>
	//    8   14:ireturn         
	}

	void dispatchOnScrollStateChanged(int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			mLayout.onScrollStateChanged(i);
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:iload_1         
	//    6   12:invokevirtual   #1700 <Method void RecyclerView$LayoutManager.onScrollStateChanged(int)>
		onScrollStateChanged(i);
	//    7   15:aload_0         
	//    8   16:iload_1         
	//    9   17:invokevirtual   #1701 <Method void onScrollStateChanged(int)>
		if(mScrollListener != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #1703 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  12   24:ifnull          36
			mScrollListener.onScrollStateChanged(this, i);
	//   13   27:aload_0         
	//   14   28:getfield        #1703 <Field RecyclerView$OnScrollListener mScrollListener>
	//   15   31:aload_0         
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1705 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>
		if(mScrollListeners != null)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1518 <Field List mScrollListeners>
	//*  20   40:ifnull          84
		{
			for(int j = mScrollListeners.size() - 1; j >= 0; j--)
	//*  21   43:aload_0         
	//*  22   44:getfield        #1518 <Field List mScrollListeners>
	//*  23   47:invokeinterface #1646 <Method int List.size()>
	//*  24   52:iconst_1        
	//*  25   53:isub            
	//*  26   54:istore_2        
	//*  27   55:iload_2         
	//*  28   56:iflt            84
				((OnScrollListener)mScrollListeners.get(j)).onScrollStateChanged(this, i);
	//   29   59:aload_0         
	//   30   60:getfield        #1518 <Field List mScrollListeners>
	//   31   63:iload_2         
	//   32   64:invokeinterface #1647 <Method Object List.get(int)>
	//   33   69:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   34   72:aload_0         
	//   35   73:iload_1         
	//   36   74:invokevirtual   #1705 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>

	//   37   77:iload_2         
	//   38   78:iconst_1        
	//   39   79:isub            
	//   40   80:istore_2        
		}
	//*  41   81:goto            55
	//   42   84:return          
	}

	void dispatchOnScrolled(int i, int j)
	{
		mDispatchScrollCounter = mDispatchScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #400 <Field int mDispatchScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #400 <Field int mDispatchScrollCounter>
		int k = getScrollX();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #1708 <Method int getScrollX()>
	//    8   14:istore_3        
		int i1 = getScrollY();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #1711 <Method int getScrollY()>
	//   11   19:istore          4
		onScrollChanged(k, i1, k, i1);
	//   12   21:aload_0         
	//   13   22:iload_3         
	//   14   23:iload           4
	//   15   25:iload_3         
	//   16   26:iload           4
	//   17   28:invokevirtual   #1714 <Method void onScrollChanged(int, int, int, int)>
		onScrolled(i, j);
	//   18   31:aload_0         
	//   19   32:iload_1         
	//   20   33:iload_2         
	//   21   34:invokevirtual   #1717 <Method void onScrolled(int, int)>
		if(mScrollListener != null)
	//*  22   37:aload_0         
	//*  23   38:getfield        #1703 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  24   41:ifnull          54
			mScrollListener.onScrolled(this, i, j);
	//   25   44:aload_0         
	//   26   45:getfield        #1703 <Field RecyclerView$OnScrollListener mScrollListener>
	//   27   48:aload_0         
	//   28   49:iload_1         
	//   29   50:iload_2         
	//   30   51:invokevirtual   #1719 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>
		if(mScrollListeners != null)
	//*  31   54:aload_0         
	//*  32   55:getfield        #1518 <Field List mScrollListeners>
	//*  33   58:ifnull          103
		{
			for(int l = mScrollListeners.size() - 1; l >= 0; l--)
	//*  34   61:aload_0         
	//*  35   62:getfield        #1518 <Field List mScrollListeners>
	//*  36   65:invokeinterface #1646 <Method int List.size()>
	//*  37   70:iconst_1        
	//*  38   71:isub            
	//*  39   72:istore_3        
	//*  40   73:iload_3         
	//*  41   74:iflt            103
				((OnScrollListener)mScrollListeners.get(l)).onScrolled(this, i, j);
	//   42   77:aload_0         
	//   43   78:getfield        #1518 <Field List mScrollListeners>
	//   44   81:iload_3         
	//   45   82:invokeinterface #1647 <Method Object List.get(int)>
	//   46   87:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   47   90:aload_0         
	//   48   91:iload_1         
	//   49   92:iload_2         
	//   50   93:invokevirtual   #1719 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>

	//   51   96:iload_3         
	//   52   97:iconst_1        
	//   53   98:isub            
	//   54   99:istore_3        
		}
	//*  55  100:goto            73
		mDispatchScrollCounter = mDispatchScrollCounter - 1;
	//   56  103:aload_0         
	//   57  104:aload_0         
	//   58  105:getfield        #400 <Field int mDispatchScrollCounter>
	//   59  108:iconst_1        
	//   60  109:isub            
	//   61  110:putfield        #400 <Field int mDispatchScrollCounter>
	//   62  113:return          
	}

	void dispatchPendingImportantForAccessibilityChanges()
	{
		for(int i = mPendingAccessibilityImportanceChange.size() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//*   2    4:invokeinterface #1646 <Method int List.size()>
	//*   3    9:iconst_1        
	//*   4   10:isub            
	//*   5   11:istore_1        
	//*   6   12:iload_1         
	//*   7   13:iflt            81
		{
			ViewHolder viewholder = (ViewHolder)mPendingAccessibilityImportanceChange.get(i);
	//    8   16:aload_0         
	//    9   17:getfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//   10   20:iload_1         
	//   11   21:invokeinterface #1647 <Method Object List.get(int)>
	//   12   26:checkcast       #124 <Class RecyclerView$ViewHolder>
	//   13   29:astore_3        
			if(viewholder.itemView.getParent() != this || viewholder.shouldIgnore())
	//*  14   30:aload_3         
	//*  15   31:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  16   34:invokevirtual   #634 <Method ViewParent View.getParent()>
	//*  17   37:aload_0         
	//*  18   38:if_acmpne       74
	//*  19   41:aload_3         
	//*  20   42:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   45:ifeq            51
				continue;
	//   22   48:goto            74
			int j = viewholder.mPendingAccessibilityState;
	//   23   51:aload_3         
	//   24   52:getfield        #1723 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
	//   25   55:istore_2        
			if(j != -1)
	//*  26   56:iload_2         
	//*  27   57:iconst_m1       
	//*  28   58:icmpeq          74
			{
				ViewCompat.setImportantForAccessibility(viewholder.itemView, j);
	//   29   61:aload_3         
	//   30   62:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   31   65:iload_2         
	//   32   66:invokestatic    #520 <Method void ViewCompat.setImportantForAccessibility(View, int)>
				viewholder.mPendingAccessibilityState = -1;
	//   33   69:aload_3         
	//   34   70:iconst_m1       
	//   35   71:putfield        #1723 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			}
		}

	//   36   74:iload_1         
	//   37   75:iconst_1        
	//   38   76:isub            
	//   39   77:istore_1        
	//*  40   78:goto            12
		mPendingAccessibilityImportanceChange.clear();
	//   41   81:aload_0         
	//   42   82:getfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//   43   85:invokeinterface #1563 <Method void List.clear()>
	//   44   90:return          
	}

	protected void dispatchRestoreInstanceState(SparseArray sparsearray)
	{
		dispatchThawSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1728 <Method void dispatchThawSelfOnly(SparseArray)>
	//    3    5:return          
	}

	protected void dispatchSaveInstanceState(SparseArray sparsearray)
	{
		dispatchFreezeSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1733 <Method void dispatchFreezeSelfOnly(SparseArray)>
	//    3    5:return          
	}

	public void draw(Canvas canvas)
	{
		super.draw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #1737 <Method void ViewGroup.draw(Canvas)>
		int k = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #390 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1062 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < k; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDrawOver(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #390 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #425 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #1741 <Method void RecyclerView$ItemDecoration.onDrawOver(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
		int j = 0;
	//   27   47:iconst_0        
	//   28   48:istore_2        
		k = j;
	//   29   49:iload_2         
	//   30   50:istore_3        
		if(mLeftGlow != null)
	//*  31   51:aload_0         
	//*  32   52:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*  33   55:ifnull          144
		{
			k = j;
	//   34   58:iload_2         
	//   35   59:istore_3        
			if(!mLeftGlow.isFinished())
	//*  36   60:aload_0         
	//*  37   61:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*  38   64:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  39   67:ifne            144
			{
				int l = canvas.save();
	//   40   70:aload_1         
	//   41   71:invokevirtual   #1746 <Method int Canvas.save()>
	//   42   74:istore          4
				if(mClipToPadding)
	//*  43   76:aload_0         
	//*  44   77:getfield        #462 <Field boolean mClipToPadding>
	//*  45   80:ifeq            91
					j = getPaddingBottom();
	//   46   83:aload_0         
	//   47   84:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   48   87:istore_2        
				else
	//*  49   88:goto            93
					j = 0;
	//   50   91:iconst_0        
	//   51   92:istore_2        
				canvas.rotate(270F);
	//   52   93:aload_1         
	//   53   94:ldc2            #1747 <Float 270F>
	//   54   97:invokevirtual   #1751 <Method void Canvas.rotate(float)>
				canvas.translate(-getHeight() + j, 0.0F);
	//   55  100:aload_1         
	//   56  101:aload_0         
	//   57  102:invokevirtual   #1327 <Method int getHeight()>
	//   58  105:ineg            
	//   59  106:iload_2         
	//   60  107:iadd            
	//   61  108:i2f             
	//   62  109:fconst_0        
	//   63  110:invokevirtual   #1755 <Method void Canvas.translate(float, float)>
				if(mLeftGlow != null && mLeftGlow.draw(canvas))
	//*  64  113:aload_0         
	//*  65  114:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*  66  117:ifnull          136
	//*  67  120:aload_0         
	//*  68  121:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*  69  124:aload_1         
	//*  70  125:invokevirtual   #1758 <Method boolean EdgeEffect.draw(Canvas)>
	//*  71  128:ifeq            136
					k = 1;
	//   72  131:iconst_1        
	//   73  132:istore_3        
				else
	//*  74  133:goto            138
					k = 0;
	//   75  136:iconst_0        
	//   76  137:istore_3        
				canvas.restoreToCount(l);
	//   77  138:aload_1         
	//   78  139:iload           4
	//   79  141:invokevirtual   #1761 <Method void Canvas.restoreToCount(int)>
			}
		}
		j = k;
	//   80  144:iload_3         
	//   81  145:istore_2        
		if(mTopGlow != null)
	//*  82  146:aload_0         
	//*  83  147:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*  84  150:ifnull          227
		{
			j = k;
	//   85  153:iload_3         
	//   86  154:istore_2        
			if(!mTopGlow.isFinished())
	//*  87  155:aload_0         
	//*  88  156:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*  89  159:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//*  90  162:ifne            227
			{
				int i1 = canvas.save();
	//   91  165:aload_1         
	//   92  166:invokevirtual   #1746 <Method int Canvas.save()>
	//   93  169:istore          4
				if(mClipToPadding)
	//*  94  171:aload_0         
	//*  95  172:getfield        #462 <Field boolean mClipToPadding>
	//*  96  175:ifeq            192
					canvas.translate(getPaddingLeft(), getPaddingTop());
	//   97  178:aload_1         
	//   98  179:aload_0         
	//   99  180:invokevirtual   #1619 <Method int getPaddingLeft()>
	//  100  183:i2f             
	//  101  184:aload_0         
	//  102  185:invokevirtual   #1632 <Method int getPaddingTop()>
	//  103  188:i2f             
	//  104  189:invokevirtual   #1755 <Method void Canvas.translate(float, float)>
				if(mTopGlow != null && mTopGlow.draw(canvas))
	//* 105  192:aload_0         
	//* 106  193:getfield        #1343 <Field EdgeEffect mTopGlow>
	//* 107  196:ifnull          215
	//* 108  199:aload_0         
	//* 109  200:getfield        #1343 <Field EdgeEffect mTopGlow>
	//* 110  203:aload_1         
	//* 111  204:invokevirtual   #1758 <Method boolean EdgeEffect.draw(Canvas)>
	//* 112  207:ifeq            215
					j = 1;
	//  113  210:iconst_1        
	//  114  211:istore_2        
				else
	//* 115  212:goto            217
					j = 0;
	//  116  215:iconst_0        
	//  117  216:istore_2        
				j = ((int) (k | j));
	//  118  217:iload_3         
	//  119  218:iload_2         
	//  120  219:ior             
	//  121  220:istore_2        
				canvas.restoreToCount(i1);
	//  122  221:aload_1         
	//  123  222:iload           4
	//  124  224:invokevirtual   #1761 <Method void Canvas.restoreToCount(int)>
			}
		}
		k = j;
	//  125  227:iload_2         
	//  126  228:istore_3        
		if(mRightGlow != null)
	//* 127  229:aload_0         
	//* 128  230:getfield        #1338 <Field EdgeEffect mRightGlow>
	//* 129  233:ifnull          330
		{
			k = j;
	//  130  236:iload_2         
	//  131  237:istore_3        
			if(!mRightGlow.isFinished())
	//* 132  238:aload_0         
	//* 133  239:getfield        #1338 <Field EdgeEffect mRightGlow>
	//* 134  242:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//* 135  245:ifne            330
			{
				int j1 = canvas.save();
	//  136  248:aload_1         
	//  137  249:invokevirtual   #1746 <Method int Canvas.save()>
	//  138  252:istore          4
				int l1 = getWidth();
	//  139  254:aload_0         
	//  140  255:invokevirtual   #1326 <Method int getWidth()>
	//  141  258:istore          5
				if(mClipToPadding)
	//* 142  260:aload_0         
	//* 143  261:getfield        #462 <Field boolean mClipToPadding>
	//* 144  264:ifeq            275
					k = getPaddingTop();
	//  145  267:aload_0         
	//  146  268:invokevirtual   #1632 <Method int getPaddingTop()>
	//  147  271:istore_3        
				else
	//* 148  272:goto            277
					k = 0;
	//  149  275:iconst_0        
	//  150  276:istore_3        
				canvas.rotate(90F);
	//  151  277:aload_1         
	//  152  278:ldc2            #1762 <Float 90F>
	//  153  281:invokevirtual   #1751 <Method void Canvas.rotate(float)>
				canvas.translate(-k, -l1);
	//  154  284:aload_1         
	//  155  285:iload_3         
	//  156  286:ineg            
	//  157  287:i2f             
	//  158  288:iload           5
	//  159  290:ineg            
	//  160  291:i2f             
	//  161  292:invokevirtual   #1755 <Method void Canvas.translate(float, float)>
				if(mRightGlow != null && mRightGlow.draw(canvas))
	//* 162  295:aload_0         
	//* 163  296:getfield        #1338 <Field EdgeEffect mRightGlow>
	//* 164  299:ifnull          318
	//* 165  302:aload_0         
	//* 166  303:getfield        #1338 <Field EdgeEffect mRightGlow>
	//* 167  306:aload_1         
	//* 168  307:invokevirtual   #1758 <Method boolean EdgeEffect.draw(Canvas)>
	//* 169  310:ifeq            318
					k = 1;
	//  170  313:iconst_1        
	//  171  314:istore_3        
				else
	//* 172  315:goto            320
					k = 0;
	//  173  318:iconst_0        
	//  174  319:istore_3        
				k = j | k;
	//  175  320:iload_2         
	//  176  321:iload_3         
	//  177  322:ior             
	//  178  323:istore_3        
				canvas.restoreToCount(j1);
	//  179  324:aload_1         
	//  180  325:iload           4
	//  181  327:invokevirtual   #1761 <Method void Canvas.restoreToCount(int)>
			}
		}
		j = k;
	//  182  330:iload_3         
	//  183  331:istore_2        
		if(mBottomGlow != null)
	//* 184  332:aload_0         
	//* 185  333:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//* 186  336:ifnull          451
		{
			j = k;
	//  187  339:iload_3         
	//  188  340:istore_2        
			if(!mBottomGlow.isFinished())
	//* 189  341:aload_0         
	//* 190  342:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//* 191  345:invokevirtual   #1393 <Method boolean EdgeEffect.isFinished()>
	//* 192  348:ifne            451
			{
				int k1 = canvas.save();
	//  193  351:aload_1         
	//  194  352:invokevirtual   #1746 <Method int Canvas.save()>
	//  195  355:istore          4
				canvas.rotate(180F);
	//  196  357:aload_1         
	//  197  358:ldc2            #1763 <Float 180F>
	//  198  361:invokevirtual   #1751 <Method void Canvas.rotate(float)>
				if(mClipToPadding)
	//* 199  364:aload_0         
	//* 200  365:getfield        #462 <Field boolean mClipToPadding>
	//* 201  368:ifeq            400
					canvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
	//  202  371:aload_1         
	//  203  372:aload_0         
	//  204  373:invokevirtual   #1326 <Method int getWidth()>
	//  205  376:ineg            
	//  206  377:aload_0         
	//  207  378:invokevirtual   #1622 <Method int getPaddingRight()>
	//  208  381:iadd            
	//  209  382:i2f             
	//  210  383:aload_0         
	//  211  384:invokevirtual   #1327 <Method int getHeight()>
	//  212  387:ineg            
	//  213  388:aload_0         
	//  214  389:invokevirtual   #1635 <Method int getPaddingBottom()>
	//  215  392:iadd            
	//  216  393:i2f             
	//  217  394:invokevirtual   #1755 <Method void Canvas.translate(float, float)>
				else
	//* 218  397:goto            416
					canvas.translate(-getWidth(), -getHeight());
	//  219  400:aload_1         
	//  220  401:aload_0         
	//  221  402:invokevirtual   #1326 <Method int getWidth()>
	//  222  405:ineg            
	//  223  406:i2f             
	//  224  407:aload_0         
	//  225  408:invokevirtual   #1327 <Method int getHeight()>
	//  226  411:ineg            
	//  227  412:i2f             
	//  228  413:invokevirtual   #1755 <Method void Canvas.translate(float, float)>
				if(mBottomGlow != null && mBottomGlow.draw(canvas))
	//* 229  416:aload_0         
	//* 230  417:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//* 231  420:ifnull          439
	//* 232  423:aload_0         
	//* 233  424:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//* 234  427:aload_1         
	//* 235  428:invokevirtual   #1758 <Method boolean EdgeEffect.draw(Canvas)>
	//* 236  431:ifeq            439
					j = 1;
	//  237  434:iconst_1        
	//  238  435:istore_2        
				else
	//* 239  436:goto            441
					j = 0;
	//  240  439:iconst_0        
	//  241  440:istore_2        
				j = k | j;
	//  242  441:iload_3         
	//  243  442:iload_2         
	//  244  443:ior             
	//  245  444:istore_2        
				canvas.restoreToCount(k1);
	//  246  445:aload_1         
	//  247  446:iload           4
	//  248  448:invokevirtual   #1761 <Method void Canvas.restoreToCount(int)>
			}
		}
		k = j;
	//  249  451:iload_2         
	//  250  452:istore_3        
		if(j == 0)
	//* 251  453:iload_2         
	//* 252  454:ifne            492
		{
			k = j;
	//  253  457:iload_2         
	//  254  458:istore_3        
			if(mItemAnimator != null)
	//* 255  459:aload_0         
	//* 256  460:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 257  463:ifnull          492
			{
				k = j;
	//  258  466:iload_2         
	//  259  467:istore_3        
				if(mItemDecorations.size() > 0)
	//* 260  468:aload_0         
	//* 261  469:getfield        #390 <Field ArrayList mItemDecorations>
	//* 262  472:invokevirtual   #1062 <Method int ArrayList.size()>
	//* 263  475:ifle            492
				{
					k = j;
	//  264  478:iload_2         
	//  265  479:istore_3        
					if(mItemAnimator.isRunning())
	//* 266  480:aload_0         
	//* 267  481:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 268  484:invokevirtual   #1766 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//* 269  487:ifeq            492
						k = 1;
	//  270  490:iconst_1        
	//  271  491:istore_3        
				}
			}
		}
		if(k != 0)
	//* 272  492:iload_3         
	//* 273  493:ifeq            500
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  274  496:aload_0         
	//  275  497:invokestatic    #1351 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  276  500:return          
	}

	public boolean drawChild(Canvas canvas, View view, long l)
	{
		return super.drawChild(canvas, view, l);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:lload_3         
	//    4    4:invokespecial   #1770 <Method boolean ViewGroup.drawChild(Canvas, View, long)>
	//    5    7:ireturn         
	}

	void eatRequestLayout()
	{
		mEatRequestLayout = mEatRequestLayout + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #394 <Field int mEatRequestLayout>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #394 <Field int mEatRequestLayout>
		if(mEatRequestLayout == 1 && !mLayoutFrozen)
	//*   6   10:aload_0         
	//*   7   11:getfield        #394 <Field int mEatRequestLayout>
	//*   8   14:iconst_1        
	//*   9   15:icmpne          30
	//*  10   18:aload_0         
	//*  11   19:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  12   22:ifne            30
			mLayoutRequestEaten = false;
	//   13   25:aload_0         
	//   14   26:iconst_0        
	//   15   27:putfield        #1610 <Field boolean mLayoutRequestEaten>
	//   16   30:return          
	}

	void ensureBottomGlow()
	{
		if(mBottomGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mBottomGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1387 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #524 <Method Context getContext()>
	//    9   17:invokespecial   #1774 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1348 <Field EdgeEffect mBottomGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #462 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mBottomGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1619 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1622 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1632 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mBottomGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1348 <Field EdgeEffect mBottomGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureLeftGlow()
	{
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mLeftGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1387 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #524 <Method Context getContext()>
	//    9   17:invokespecial   #1774 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1325 <Field EdgeEffect mLeftGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #462 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mLeftGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1632 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1619 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1622 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mLeftGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1325 <Field EdgeEffect mLeftGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureRightGlow()
	{
		if(mRightGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1338 <Field EdgeEffect mRightGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mRightGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1387 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #524 <Method Context getContext()>
	//    9   17:invokespecial   #1774 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1338 <Field EdgeEffect mRightGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #462 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mRightGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1632 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1619 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1622 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mRightGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1338 <Field EdgeEffect mRightGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureTopGlow()
	{
		if(mTopGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1343 <Field EdgeEffect mTopGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mTopGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1387 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #524 <Method Context getContext()>
	//    9   17:invokespecial   #1774 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1343 <Field EdgeEffect mTopGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #462 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mTopGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1619 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1622 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1632 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1635 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mTopGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1343 <Field EdgeEffect mTopGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1783 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	public View findChildViewUnder(float f, float f1)
	{
		for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//*   2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//*   3    7:iconst_1        
	//*   4    8:isub            
	//*   5    9:istore          5
	//*   6   11:iload           5
	//*   7   13:iflt            106
		{
			View view = mChildHelper.getChildAt(i);
	//    8   16:aload_0         
	//    9   17:getfield        #646 <Field ChildHelper mChildHelper>
	//   10   20:iload           5
	//   11   22:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   12   25:astore          6
			float f2 = view.getTranslationX();
	//   13   27:aload           6
	//   14   29:invokevirtual   #1788 <Method float View.getTranslationX()>
	//   15   32:fstore_3        
			float f3 = view.getTranslationY();
	//   16   33:aload           6
	//   17   35:invokevirtual   #1791 <Method float View.getTranslationY()>
	//   18   38:fstore          4
			if(f >= (float)view.getLeft() + f2 && f <= (float)view.getRight() + f2 && f1 >= (float)view.getTop() + f3 && f1 <= (float)view.getBottom() + f3)
	//*  19   40:fload_1         
	//*  20   41:aload           6
	//*  21   43:invokevirtual   #1111 <Method int View.getLeft()>
	//*  22   46:i2f             
	//*  23   47:fload_3         
	//*  24   48:fadd            
	//*  25   49:fcmpl           
	//*  26   50:iflt            97
	//*  27   53:fload_1         
	//*  28   54:aload           6
	//*  29   56:invokevirtual   #1129 <Method int View.getRight()>
	//*  30   59:i2f             
	//*  31   60:fload_3         
	//*  32   61:fadd            
	//*  33   62:fcmpg           
	//*  34   63:ifgt            97
	//*  35   66:fload_2         
	//*  36   67:aload           6
	//*  37   69:invokevirtual   #1120 <Method int View.getTop()>
	//*  38   72:i2f             
	//*  39   73:fload           4
	//*  40   75:fadd            
	//*  41   76:fcmpl           
	//*  42   77:iflt            97
	//*  43   80:fload_2         
	//*  44   81:aload           6
	//*  45   83:invokevirtual   #1138 <Method int View.getBottom()>
	//*  46   86:i2f             
	//*  47   87:fload           4
	//*  48   89:fadd            
	//*  49   90:fcmpg           
	//*  50   91:ifgt            97
				return view;
	//   51   94:aload           6
	//   52   96:areturn         
		}

	//   53   97:iload           5
	//   54   99:iconst_1        
	//   55  100:isub            
	//   56  101:istore          5
	//*  57  103:goto            11
		return null;
	//   58  106:aconst_null     
	//   59  107:areturn         
	}

	public View findContainingItemView(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #634 <Method ViewParent View.getParent()>
	//    2    4:astore_3        
		View view1 = view;
	//    3    5:aload_1         
	//    4    6:astore_2        
		for(view = ((View) (viewparent)); view != null && view != this && (view instanceof View); view = ((View) (view1.getParent())))
	//*   5    7:aload_3         
	//*   6    8:astore_1        
	//*   7    9:aload_1         
	//*   8   10:ifnull          38
	//*   9   13:aload_1         
	//*  10   14:aload_0         
	//*  11   15:if_acmpeq       38
	//*  12   18:aload_1         
	//*  13   19:instanceof      #630 <Class View>
	//*  14   22:ifeq            38
			view1 = (View)view;
	//   15   25:aload_1         
	//   16   26:checkcast       #630 <Class View>
	//   17   29:astore_2        

	//   18   30:aload_2         
	//   19   31:invokevirtual   #634 <Method ViewParent View.getParent()>
	//   20   34:astore_1        
	//*  21   35:goto            9
		if(view == this)
	//*  22   38:aload_1         
	//*  23   39:aload_0         
	//*  24   40:if_acmpne       45
			return view1;
	//   25   43:aload_2         
	//   26   44:areturn         
		else
			return null;
	//   27   45:aconst_null     
	//   28   46:areturn         
	}

	public ViewHolder findContainingViewHolder(View view)
	{
		view = findContainingItemView(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1795 <Method View findContainingItemView(View)>
	//    3    5:astore_1        
		if(view == null)
	//*   4    6:aload_1         
	//*   5    7:ifnonnull       12
			return null;
	//    6   10:aconst_null     
	//    7   11:areturn         
		else
			return getChildViewHolder(view);
	//    8   12:aload_0         
	//    9   13:aload_1         
	//   10   14:invokevirtual   #638 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   11   17:areturn         
	}

	public ViewHolder findViewHolderForAdapterPosition(int i)
	{
		if(mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*   2    4:ifeq            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		int k = mChildHelper.getUnfilteredChildCount();
	//    5    9:aload_0         
	//    6   10:getfield        #646 <Field ChildHelper mChildHelper>
	//    7   13:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    8   16:istore_3        
		ViewHolder viewholder = null;
	//    9   17:aconst_null     
	//   10   18:astore          4
		for(int j = 0; j < k;)
	//*  11   20:iconst_0        
	//*  12   21:istore_2        
	//*  13   22:iload_2         
	//*  14   23:iload_3         
	//*  15   24:icmpge          111
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   16   27:aload_0         
	//   17   28:getfield        #646 <Field ChildHelper mChildHelper>
	//   18   31:iload_2         
	//   19   32:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   20   35:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   21   38:astore          6
			ViewHolder viewholder1 = viewholder;
	//   22   40:aload           4
	//   23   42:astore          5
			if(viewholder2 != null)
	//*  24   44:aload           6
	//*  25   46:ifnull          100
			{
				viewholder1 = viewholder;
	//   26   49:aload           4
	//   27   51:astore          5
				if(!viewholder2.isRemoved())
	//*  28   53:aload           6
	//*  29   55:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  30   58:ifne            100
				{
					viewholder1 = viewholder;
	//   31   61:aload           4
	//   32   63:astore          5
					if(getAdapterPositionFor(viewholder2) == i)
	//*  33   65:aload_0         
	//*  34   66:aload           6
	//*  35   68:invokevirtual   #1798 <Method int getAdapterPositionFor(RecyclerView$ViewHolder)>
	//*  36   71:iload_1         
	//*  37   72:icmpne          100
						if(mChildHelper.isHidden(viewholder2.itemView))
	//*  38   75:aload_0         
	//*  39   76:getfield        #646 <Field ChildHelper mChildHelper>
	//*  40   79:aload           6
	//*  41   81:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  42   84:invokevirtual   #1366 <Method boolean ChildHelper.isHidden(View)>
	//*  43   87:ifeq            97
							viewholder1 = viewholder2;
	//   44   90:aload           6
	//   45   92:astore          5
						else
	//*  46   94:goto            100
							return viewholder2;
	//   47   97:aload           6
	//   48   99:areturn         
				}
			}
			j++;
	//   49  100:iload_2         
	//   50  101:iconst_1        
	//   51  102:iadd            
	//   52  103:istore_2        
			viewholder = viewholder1;
	//   53  104:aload           5
	//   54  106:astore          4
		}

	//*  55  108:goto            22
		return viewholder;
	//   56  111:aload           4
	//   57  113:areturn         
	}

	public ViewHolder findViewHolderForItemId(long l)
	{
		if(mAdapter == null || !mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          17
	//*   3    7:aload_0         
	//*   4    8:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   6   14:ifne            19
			return null;
	//    7   17:aconst_null     
	//    8   18:areturn         
		int j = mChildHelper.getUnfilteredChildCount();
	//    9   19:aload_0         
	//   10   20:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   23:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//   12   26:istore          4
		ViewHolder viewholder = null;
	//   13   28:aconst_null     
	//   14   29:astore          5
		for(int i = 0; i < j;)
	//*  15   31:iconst_0        
	//*  16   32:istore_3        
	//*  17   33:iload_3         
	//*  18   34:iload           4
	//*  19   36:icmpge          123
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   20   39:aload_0         
	//   21   40:getfield        #646 <Field ChildHelper mChildHelper>
	//   22   43:iload_3         
	//   23   44:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   24   47:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   25   50:astore          7
			ViewHolder viewholder1 = viewholder;
	//   26   52:aload           5
	//   27   54:astore          6
			if(viewholder2 != null)
	//*  28   56:aload           7
	//*  29   58:ifnull          112
			{
				viewholder1 = viewholder;
	//   30   61:aload           5
	//   31   63:astore          6
				if(!viewholder2.isRemoved())
	//*  32   65:aload           7
	//*  33   67:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  34   70:ifne            112
				{
					viewholder1 = viewholder;
	//   35   73:aload           5
	//   36   75:astore          6
					if(viewholder2.getItemId() == l)
	//*  37   77:aload           7
	//*  38   79:invokevirtual   #1422 <Method long RecyclerView$ViewHolder.getItemId()>
	//*  39   82:lload_1         
	//*  40   83:lcmp            
	//*  41   84:ifne            112
						if(mChildHelper.isHidden(viewholder2.itemView))
	//*  42   87:aload_0         
	//*  43   88:getfield        #646 <Field ChildHelper mChildHelper>
	//*  44   91:aload           7
	//*  45   93:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  46   96:invokevirtual   #1366 <Method boolean ChildHelper.isHidden(View)>
	//*  47   99:ifeq            109
							viewholder1 = viewholder2;
	//   48  102:aload           7
	//   49  104:astore          6
						else
	//*  50  106:goto            112
							return viewholder2;
	//   51  109:aload           7
	//   52  111:areturn         
				}
			}
			i++;
	//   53  112:iload_3         
	//   54  113:iconst_1        
	//   55  114:iadd            
	//   56  115:istore_3        
			viewholder = viewholder1;
	//   57  116:aload           6
	//   58  118:astore          5
		}

	//*  59  120:goto            33
		return viewholder;
	//   60  123:aload           5
	//   61  125:areturn         
	}

	public ViewHolder findViewHolderForLayoutPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1803 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	public ViewHolder findViewHolderForPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1803 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	ViewHolder findViewHolderForPosition(int i, boolean flag)
	{
		int k = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		ViewHolder viewholder = null;
	//    4    9:aconst_null     
	//    5   10:astore          5
		for(int j = 0; j < k;)
	//*   6   12:iconst_0        
	//*   7   13:istore_3        
	//*   8   14:iload_3         
	//*   9   15:iload           4
	//*  10   17:icmpge          126
		{
			ViewHolder viewholder1;
label0:
			{
				ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   11   20:aload_0         
	//   12   21:getfield        #646 <Field ChildHelper mChildHelper>
	//   13   24:iload_3         
	//   14   25:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   15   28:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   31:astore          7
				viewholder1 = viewholder;
	//   17   33:aload           5
	//   18   35:astore          6
				if(viewholder2 == null)
					break label0;
	//   19   37:aload           7
	//   20   39:ifnull          115
				viewholder1 = viewholder;
	//   21   42:aload           5
	//   22   44:astore          6
				if(viewholder2.isRemoved())
					break label0;
	//   23   46:aload           7
	//   24   48:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   25   51:ifne            115
				if(flag)
	//*  26   54:iload_2         
	//*  27   55:ifeq            74
				{
					if(viewholder2.mPosition != i)
	//*  28   58:aload           7
	//*  29   60:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  30   63:iload_1         
	//*  31   64:icmpeq          90
					{
						viewholder1 = viewholder;
	//   32   67:aload           5
	//   33   69:astore          6
						break label0;
	//   34   71:goto            115
					}
				} else
				if(viewholder2.getLayoutPosition() != i)
	//*  35   74:aload           7
	//*  36   76:invokevirtual   #1075 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//*  37   79:iload_1         
	//*  38   80:icmpeq          90
				{
					viewholder1 = viewholder;
	//   39   83:aload           5
	//   40   85:astore          6
					break label0;
	//   41   87:goto            115
				}
				if(mChildHelper.isHidden(viewholder2.itemView))
	//*  42   90:aload_0         
	//*  43   91:getfield        #646 <Field ChildHelper mChildHelper>
	//*  44   94:aload           7
	//*  45   96:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//*  46   99:invokevirtual   #1366 <Method boolean ChildHelper.isHidden(View)>
	//*  47  102:ifeq            112
					viewholder1 = viewholder2;
	//   48  105:aload           7
	//   49  107:astore          6
				else
	//*  50  109:goto            115
					return viewholder2;
	//   51  112:aload           7
	//   52  114:areturn         
			}
			j++;
	//   53  115:iload_3         
	//   54  116:iconst_1        
	//   55  117:iadd            
	//   56  118:istore_3        
			viewholder = viewholder1;
	//   57  119:aload           6
	//   58  121:astore          5
		}

	//*  59  123:goto            14
		return viewholder;
	//   60  126:aload           5
	//   61  128:areturn         
	}

	public boolean fling(int i, int j)
	{
		int k;
		boolean flag;
		boolean flag1;
label0:
		{
			if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       18
			{
				Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #165 <String "RecyclerView">
	//    4    9:ldc2            #1811 <String "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1246 <Method int Log.e(String, String)>
	//    6   15:pop             
				return false;
	//    7   16:iconst_0        
	//    8   17:ireturn         
			}
			if(mLayoutFrozen)
	//*   9   18:aload_0         
	//*  10   19:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  11   22:ifeq            27
				return false;
	//   12   25:iconst_0        
	//   13   26:ireturn         
			flag = mLayout.canScrollHorizontally();
	//   14   27:aload_0         
	//   15   28:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   16   31:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   17   34:istore          4
			flag1 = mLayout.canScrollVertically();
	//   18   36:aload_0         
	//   19   37:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   20   40:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   21   43:istore          5
			if(flag)
	//*  22   45:iload           4
	//*  23   47:ifeq            63
			{
				k = i;
	//   24   50:iload_1         
	//   25   51:istore_3        
				if(Math.abs(i) >= mMinFlingVelocity)
					break label0;
	//   26   52:iload_1         
	//   27   53:invokestatic    #1814 <Method int Math.abs(int)>
	//   28   56:aload_0         
	//   29   57:getfield        #489 <Field int mMinFlingVelocity>
	//   30   60:icmpge          65
			}
			k = 0;
	//   31   63:iconst_0        
	//   32   64:istore_3        
		}
label1:
		{
			if(flag1)
	//*  33   65:iload           5
	//*  34   67:ifeq            83
			{
				i = j;
	//   35   70:iload_2         
	//   36   71:istore_1        
				if(Math.abs(j) >= mMinFlingVelocity)
					break label1;
	//   37   72:iload_2         
	//   38   73:invokestatic    #1814 <Method int Math.abs(int)>
	//   39   76:aload_0         
	//   40   77:getfield        #489 <Field int mMinFlingVelocity>
	//   41   80:icmpge          85
			}
			i = 0;
	//   42   83:iconst_0        
	//   43   84:istore_1        
		}
		if(k == 0 && i == 0)
	//*  44   85:iload_3         
	//*  45   86:ifne            95
	//*  46   89:iload_1         
	//*  47   90:ifne            95
			return false;
	//   48   93:iconst_0        
	//   49   94:ireturn         
		if(!dispatchNestedPreFling(k, i))
	//*  50   95:aload_0         
	//*  51   96:iload_3         
	//*  52   97:i2f             
	//*  53   98:iload_1         
	//*  54   99:i2f             
	//*  55  100:invokevirtual   #1815 <Method boolean dispatchNestedPreFling(float, float)>
	//*  56  103:ifne            207
		{
			if(flag || flag1)
	//*  57  106:iload           4
	//*  58  108:ifne            116
	//*  59  111:iload           5
	//*  60  113:ifeq            122
				flag = true;
	//   61  116:iconst_1        
	//   62  117:istore          4
			else
	//*  63  119:goto            125
				flag = false;
	//   64  122:iconst_0        
	//   65  123:istore          4
			dispatchNestedFling(k, i, flag);
	//   66  125:aload_0         
	//   67  126:iload_3         
	//   68  127:i2f             
	//   69  128:iload_1         
	//   70  129:i2f             
	//   71  130:iload           4
	//   72  132:invokevirtual   #1816 <Method boolean dispatchNestedFling(float, float, boolean)>
	//   73  135:pop             
			if(mOnFlingListener != null && mOnFlingListener.onFling(k, i))
	//*  74  136:aload_0         
	//*  75  137:getfield        #1818 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  76  140:ifnull          157
	//*  77  143:aload_0         
	//*  78  144:getfield        #1818 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  79  147:iload_3         
	//*  80  148:iload_1         
	//*  81  149:invokevirtual   #1821 <Method boolean RecyclerView$OnFlingListener.onFling(int, int)>
	//*  82  152:ifeq            157
				return true;
	//   83  155:iconst_1        
	//   84  156:ireturn         
			if(flag)
	//*  85  157:iload           4
	//*  86  159:ifeq            207
			{
				j = Math.max(-mMaxFlingVelocity, Math.min(k, mMaxFlingVelocity));
	//   87  162:aload_0         
	//   88  163:getfield        #494 <Field int mMaxFlingVelocity>
	//   89  166:ineg            
	//   90  167:iload_3         
	//   91  168:aload_0         
	//   92  169:getfield        #494 <Field int mMaxFlingVelocity>
	//   93  172:invokestatic    #1100 <Method int Math.min(int, int)>
	//   94  175:invokestatic    #1824 <Method int Math.max(int, int)>
	//   95  178:istore_2        
				i = Math.max(-mMaxFlingVelocity, Math.min(i, mMaxFlingVelocity));
	//   96  179:aload_0         
	//   97  180:getfield        #494 <Field int mMaxFlingVelocity>
	//   98  183:ineg            
	//   99  184:iload_1         
	//  100  185:aload_0         
	//  101  186:getfield        #494 <Field int mMaxFlingVelocity>
	//  102  189:invokestatic    #1100 <Method int Math.min(int, int)>
	//  103  192:invokestatic    #1824 <Method int Math.max(int, int)>
	//  104  195:istore_1        
				mViewFlinger.fling(j, i);
	//  105  196:aload_0         
	//  106  197:getfield        #417 <Field RecyclerView$ViewFlinger mViewFlinger>
	//  107  200:iload_2         
	//  108  201:iload_1         
	//  109  202:invokevirtual   #1826 <Method void RecyclerView$ViewFlinger.fling(int, int)>
				return true;
	//  110  205:iconst_1        
	//  111  206:ireturn         
			}
		}
		return false;
	//  112  207:iconst_0        
	//  113  208:ireturn         
	}

	public View focusSearch(View view, int i)
	{
		Object obj = ((Object) (mLayout.onInterceptFocusSearch(view, i)));
	//    0    0:aload_0         
	//    1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #1831 <Method View RecyclerView$LayoutManager.onInterceptFocusSearch(View, int)>
	//    5    9:astore          8
		if(obj != null)
	//*   6   11:aload           8
	//*   7   13:ifnull          19
			return ((View) (obj));
	//    8   16:aload           8
	//    9   18:areturn         
		int j;
		if(mAdapter != null && mLayout != null && !isComputingLayout() && !mLayoutFrozen)
	//*  10   19:aload_0         
	//*  11   20:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          52
	//*  13   26:aload_0         
	//*  14   27:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  15   30:ifnull          52
	//*  16   33:aload_0         
	//*  17   34:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*  18   37:ifne            52
	//*  19   40:aload_0         
	//*  20   41:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  21   44:ifne            52
			j = 1;
	//   22   47:iconst_1        
	//   23   48:istore_3        
		else
	//*  24   49:goto            54
			j = 0;
	//   25   52:iconst_0        
	//   26   53:istore_3        
		obj = ((Object) (FocusFinder.getInstance()));
	//   27   54:invokestatic    #1837 <Method FocusFinder FocusFinder.getInstance()>
	//   28   57:astore          8
		int k;
		if(j != 0 && (i == 2 || i == 1))
	//*  29   59:iload_3         
	//*  30   60:ifeq            323
	//*  31   63:iload_2         
	//*  32   64:iconst_2        
	//*  33   65:icmpeq          73
	//*  34   68:iload_2         
	//*  35   69:iconst_1        
	//*  36   70:icmpne          323
		{
			boolean flag1 = false;
	//   37   73:iconst_0        
	//   38   74:istore          5
			j = i;
	//   39   76:iload_2         
	//   40   77:istore_3        
			if(mLayout.canScrollVertically())
	//*  41   78:aload_0         
	//*  42   79:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  43   82:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  44   85:ifeq            145
			{
				char c;
				if(i == 2)
	//*  45   88:iload_2         
	//*  46   89:iconst_2        
	//*  47   90:icmpne          101
					c = '\202';
	//   48   93:sipush          130
	//   49   96:istore          4
				else
	//*  50   98:goto            105
					c = '!';
	//   51  101:bipush          33
	//   52  103:istore          4
				boolean flag2;
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (c))) == null)
	//*  53  105:aload           8
	//*  54  107:aload_0         
	//*  55  108:aload_1         
	//*  56  109:iload           4
	//*  57  111:invokevirtual   #1841 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  58  114:ifnonnull       123
					flag2 = true;
	//   59  117:iconst_1        
	//   60  118:istore          6
				else
	//*  61  120:goto            126
					flag2 = false;
	//   62  123:iconst_0        
	//   63  124:istore          6
				flag1 = flag2;
	//   64  126:iload           6
	//   65  128:istore          5
				j = i;
	//   66  130:iload_2         
	//   67  131:istore_3        
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//*  68  132:getstatic       #325 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  69  135:ifeq            145
				{
					j = ((int) (c));
	//   70  138:iload           4
	//   71  140:istore_3        
					flag1 = flag2;
	//   72  141:iload           6
	//   73  143:istore          5
				}
			}
			boolean flag3 = flag1;
	//   74  145:iload           5
	//   75  147:istore          7
			k = j;
	//   76  149:iload_3         
	//   77  150:istore          6
			if(!flag1)
	//*  78  152:iload           5
	//*  79  154:ifne            262
			{
				flag3 = flag1;
	//   80  157:iload           5
	//   81  159:istore          7
				k = j;
	//   82  161:iload_3         
	//   83  162:istore          6
				if(mLayout.canScrollHorizontally())
	//*  84  164:aload_0         
	//*  85  165:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  86  168:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  87  171:ifeq            262
				{
					if(mLayout.getLayoutDirection() == 1)
	//*  88  174:aload_0         
	//*  89  175:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  90  178:invokevirtual   #1256 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  91  181:iconst_1        
	//*  92  182:icmpne          190
						i = 1;
	//   93  185:iconst_1        
	//   94  186:istore_2        
					else
	//*  95  187:goto            192
						i = 0;
	//   96  190:iconst_0        
	//   97  191:istore_2        
					boolean flag;
					if(j == 2)
	//*  98  192:iload_3         
	//*  99  193:iconst_2        
	//* 100  194:icmpne          203
						flag = true;
	//  101  197:iconst_1        
	//  102  198:istore          4
					else
	//* 103  200:goto            206
						flag = false;
	//  104  203:iconst_0        
	//  105  204:istore          4
					if((flag ^ i) != 0)
	//* 106  206:iload           4
	//* 107  208:iload_2         
	//* 108  209:ixor            
	//* 109  210:ifeq            219
						i = 66;
	//  110  213:bipush          66
	//  111  215:istore_2        
					else
	//* 112  216:goto            222
						i = 17;
	//  113  219:bipush          17
	//  114  221:istore_2        
					if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i) == null)
	//* 115  222:aload           8
	//* 116  224:aload_0         
	//* 117  225:aload_1         
	//* 118  226:iload_2         
	//* 119  227:invokevirtual   #1841 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 120  230:ifnonnull       239
						flag = true;
	//  121  233:iconst_1        
	//  122  234:istore          4
					else
	//* 123  236:goto            242
						flag = false;
	//  124  239:iconst_0        
	//  125  240:istore          4
					flag3 = flag;
	//  126  242:iload           4
	//  127  244:istore          7
					k = j;
	//  128  246:iload_3         
	//  129  247:istore          6
					if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//* 130  249:getstatic       #325 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//* 131  252:ifeq            262
					{
						k = i;
	//  132  255:iload_2         
	//  133  256:istore          6
						flag3 = flag;
	//  134  258:iload           4
	//  135  260:istore          7
					}
				}
			}
			if(flag3)
	//* 136  262:iload           7
	//* 137  264:ifeq            309
			{
				consumePendingUpdateOperations();
	//  138  267:aload_0         
	//  139  268:invokevirtual   #1843 <Method void consumePendingUpdateOperations()>
				if(findContainingItemView(view) == null)
	//* 140  271:aload_0         
	//* 141  272:aload_1         
	//* 142  273:invokevirtual   #1795 <Method View findContainingItemView(View)>
	//* 143  276:ifnonnull       281
					return null;
	//  144  279:aconst_null     
	//  145  280:areturn         
				eatRequestLayout();
	//  146  281:aload_0         
	//  147  282:invokevirtual   #844 <Method void eatRequestLayout()>
				mLayout.onFocusSearchFailed(view, k, mRecycler, mState);
	//  148  285:aload_0         
	//  149  286:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  150  289:aload_1         
	//  151  290:iload           6
	//  152  292:aload_0         
	//  153  293:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  154  296:aload_0         
	//  155  297:getfield        #425 <Field RecyclerView$State mState>
	//  156  300:invokevirtual   #1847 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  157  303:pop             
				resumeRequestLayout(false);
	//  158  304:aload_0         
	//  159  305:iconst_0        
	//  160  306:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
			}
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, k)));
	//  161  309:aload           8
	//  162  311:aload_0         
	//  163  312:aload_1         
	//  164  313:iload           6
	//  165  315:invokevirtual   #1841 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  166  318:astore          8
		} else
	//* 167  320:goto            401
		{
			View view1 = ((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i);
	//  168  323:aload           8
	//  169  325:aload_0         
	//  170  326:aload_1         
	//  171  327:iload_2         
	//  172  328:invokevirtual   #1841 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  173  331:astore          9
			obj = ((Object) (view1));
	//  174  333:aload           9
	//  175  335:astore          8
			k = i;
	//  176  337:iload_2         
	//  177  338:istore          6
			if(view1 == null)
	//* 178  340:aload           9
	//* 179  342:ifnonnull       401
			{
				obj = ((Object) (view1));
	//  180  345:aload           9
	//  181  347:astore          8
				k = i;
	//  182  349:iload_2         
	//  183  350:istore          6
				if(j != 0)
	//* 184  352:iload_3         
	//* 185  353:ifeq            401
				{
					consumePendingUpdateOperations();
	//  186  356:aload_0         
	//  187  357:invokevirtual   #1843 <Method void consumePendingUpdateOperations()>
					if(findContainingItemView(view) == null)
	//* 188  360:aload_0         
	//* 189  361:aload_1         
	//* 190  362:invokevirtual   #1795 <Method View findContainingItemView(View)>
	//* 191  365:ifnonnull       370
						return null;
	//  192  368:aconst_null     
	//  193  369:areturn         
					eatRequestLayout();
	//  194  370:aload_0         
	//  195  371:invokevirtual   #844 <Method void eatRequestLayout()>
					obj = ((Object) (mLayout.onFocusSearchFailed(view, i, mRecycler, mState)));
	//  196  374:aload_0         
	//  197  375:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  198  378:aload_1         
	//  199  379:iload_2         
	//  200  380:aload_0         
	//  201  381:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  202  384:aload_0         
	//  203  385:getfield        #425 <Field RecyclerView$State mState>
	//  204  388:invokevirtual   #1847 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  205  391:astore          8
					resumeRequestLayout(false);
	//  206  393:aload_0         
	//  207  394:iconst_0        
	//  208  395:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
					k = i;
	//  209  398:iload_2         
	//  210  399:istore          6
				}
			}
		}
		if(obj != null && !((View) (obj)).hasFocusable())
	//* 211  401:aload           8
	//* 212  403:ifnull          438
	//* 213  406:aload           8
	//* 214  408:invokevirtual   #1095 <Method boolean View.hasFocusable()>
	//* 215  411:ifne            438
			if(getFocusedChild() == null)
	//* 216  414:aload_0         
	//* 217  415:invokevirtual   #1359 <Method View getFocusedChild()>
	//* 218  418:ifnonnull       429
			{
				return super.focusSearch(view, k);
	//  219  421:aload_0         
	//  220  422:aload_1         
	//  221  423:iload           6
	//  222  425:invokespecial   #1849 <Method View ViewGroup.focusSearch(View, int)>
	//  223  428:areturn         
			} else
			{
				requestChildOnScreen(((View) (obj)), ((View) (null)));
	//  224  429:aload_0         
	//  225  430:aload           8
	//  226  432:aconst_null     
	//  227  433:invokespecial   #1851 <Method void requestChildOnScreen(View, View)>
				return view;
	//  228  436:aload_1         
	//  229  437:areturn         
			}
		if(isPreferredNextFocus(view, ((View) (obj)), k))
	//* 230  438:aload_0         
	//* 231  439:aload_1         
	//* 232  440:aload           8
	//* 233  442:iload           6
	//* 234  444:invokespecial   #1853 <Method boolean isPreferredNextFocus(View, View, int)>
	//* 235  447:ifeq            453
			return ((View) (obj));
	//  236  450:aload           8
	//  237  452:areturn         
		else
			return super.focusSearch(view, k);
	//  238  453:aload_0         
	//  239  454:aload_1         
	//  240  455:iload           6
	//  241  457:invokespecial   #1849 <Method View ViewGroup.focusSearch(View, int)>
	//  242  460:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       18
			throw new IllegalStateException("RecyclerView has no LayoutManager");
	//    3    7:new             #764 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:ldc2            #1856 <String "RecyclerView has no LayoutManager">
	//    6   14:invokespecial   #1234 <Method void IllegalStateException(String)>
	//    7   17:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateDefaultLayoutParams()));
	//    8   18:aload_0         
	//    9   19:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:invokevirtual   #1859 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateDefaultLayoutParams()>
	//   11   25:areturn         
	}

	public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       18
			throw new IllegalStateException("RecyclerView has no LayoutManager");
	//    3    7:new             #764 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:ldc2            #1856 <String "RecyclerView has no LayoutManager">
	//    6   14:invokespecial   #1234 <Method void IllegalStateException(String)>
	//    7   17:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(getContext(), attributeset)));
	//    8   18:aload_0         
	//    9   19:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:aload_0         
	//   11   23:invokevirtual   #524 <Method Context getContext()>
	//   12   26:aload_1         
	//   13   27:invokevirtual   #1864 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(Context, AttributeSet)>
	//   14   30:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       18
			throw new IllegalStateException("RecyclerView has no LayoutManager");
	//    3    7:new             #764 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:ldc2            #1856 <String "RecyclerView has no LayoutManager">
	//    6   14:invokespecial   #1234 <Method void IllegalStateException(String)>
	//    7   17:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(layoutparams)));
	//    8   18:aload_0         
	//    9   19:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:aload_1         
	//   11   23:invokevirtual   #1868 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
	//   12   26:areturn         
	}

	public Adapter getAdapter()
	{
		return mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//    2    4:areturn         
	}

	int getAdapterPositionFor(ViewHolder viewholder)
	{
		if(viewholder.hasAnyOfTheFlags(524) || !viewholder.isBound())
	//*   0    0:aload_1         
	//*   1    1:sipush          524
	//*   2    4:invokevirtual   #945 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//*   3    7:ifne            17
	//*   4   10:aload_1         
	//*   5   11:invokevirtual   #1873 <Method boolean RecyclerView$ViewHolder.isBound()>
	//*   6   14:ifne            19
			return -1;
	//    7   17:iconst_m1       
	//    8   18:ireturn         
		else
			return mAdapterHelper.applyPendingUpdatesToPosition(viewholder.mPosition);
	//    9   19:aload_0         
	//   10   20:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//   11   23:aload_1         
	//   12   24:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//   13   27:invokevirtual   #1876 <Method int AdapterHelper.applyPendingUpdatesToPosition(int)>
	//   14   30:ireturn         
	}

	public int getBaseline()
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			return mLayout.getBaseline();
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1879 <Method int RecyclerView$LayoutManager.getBaseline()>
	//    6   14:ireturn         
		else
			return super.getBaseline();
	//    7   15:aload_0         
	//    8   16:invokespecial   #1880 <Method int ViewGroup.getBaseline()>
	//    9   19:ireturn         
	}

	long getChangedHolderKey(ViewHolder viewholder)
	{
		if(mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   3    7:ifeq            15
			return viewholder.getItemId();
	//    4   10:aload_1         
	//    5   11:invokevirtual   #1422 <Method long RecyclerView$ViewHolder.getItemId()>
	//    6   14:lreturn         
		else
			return (long)viewholder.mPosition;
	//    7   15:aload_1         
	//    8   16:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//    9   19:i2l             
	//   10   20:lreturn         
	}

	public int getChildAdapterPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getAdapterPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1428 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	protected int getChildDrawingOrder(int i, int j)
	{
		if(mChildDrawingOrderCallback == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1884 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   2    4:ifnonnull       14
			return super.getChildDrawingOrder(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokespecial   #1886 <Method int ViewGroup.getChildDrawingOrder(int, int)>
	//    7   13:ireturn         
		else
			return mChildDrawingOrderCallback.onGetChildDrawingOrder(i, j);
	//    8   14:aload_0         
	//    9   15:getfield        #1884 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//   10   18:iload_1         
	//   11   19:iload_2         
	//   12   20:invokeinterface #1889 <Method int RecyclerView$ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int)>
	//   13   25:ireturn         
	}

	public long getChildItemId(View view)
	{
		if(mAdapter == null || !mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          17
	//*   3    7:aload_0         
	//*   4    8:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:invokevirtual   #895 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   6   14:ifne            21
			return -1L;
	//    7   17:ldc2w           #153 <Long -1L>
	//    8   20:lreturn         
		view = ((View) (getChildViewHolderInt(view)));
	//    9   21:aload_1         
	//   10   22:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   25:astore_1        
		if(view != null)
	//*  12   26:aload_1         
	//*  13   27:ifnull          35
			return ((ViewHolder) (view)).getItemId();
	//   14   30:aload_1         
	//   15   31:invokevirtual   #1422 <Method long RecyclerView$ViewHolder.getItemId()>
	//   16   34:lreturn         
		else
			return -1L;
	//   17   35:ldc2w           #153 <Long -1L>
	//   18   38:lreturn         
	}

	public int getChildLayoutPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getLayoutPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1075 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	public int getChildPosition(View view)
	{
		return getChildAdapterPosition(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1895 <Method int getChildAdapterPosition(View)>
	//    3    5:ireturn         
	}

	public ViewHolder getChildViewHolder(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #634 <Method ViewParent View.getParent()>
	//    2    4:astore_2        
		if(viewparent != null && viewparent != this)
	//*   3    5:aload_2         
	//*   4    6:ifnull          52
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpeq       52
			throw new IllegalArgumentException((new StringBuilder()).append("View ").append(((Object) (view))).append(" is not a direct child of ").append(((Object) (this))).toString());
	//    8   14:new             #1270 <Class IllegalArgumentException>
	//    9   17:dup             
	//   10   18:new             #766 <Class StringBuilder>
	//   11   21:dup             
	//   12   22:invokespecial   #767 <Method void StringBuilder()>
	//   13   25:ldc2            #1897 <String "View ">
	//   14   28:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:aload_1         
	//   16   32:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   17   35:ldc2            #1899 <String " is not a direct child of ">
	//   18   38:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   19   41:aload_0         
	//   20   42:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   21   45:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   22   48:invokespecial   #1276 <Method void IllegalArgumentException(String)>
	//   23   51:athrow          
		else
			return getChildViewHolderInt(view);
	//   24   52:aload_1         
	//   25   53:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   26   56:areturn         
	}

	public boolean getClipToPadding()
	{
		return mClipToPadding;
	//    0    0:aload_0         
	//    1    1:getfield        #462 <Field boolean mClipToPadding>
	//    2    4:ireturn         
	}

	public RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
	{
		return mAccessibilityDelegate;
	//    0    0:aload_0         
	//    1    1:getfield        #1904 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    2    4:areturn         
	}

	public void getDecoratedBoundsWithMargins(View view, Rect rect)
	{
		getDecoratedBoundsWithMarginsInt(view, rect);
	//    0    0:aload_1         
	//    1    1:aload_2         
	//    2    2:invokestatic    #1907 <Method void getDecoratedBoundsWithMarginsInt(View, Rect)>
	//    3    5:return          
	}

	public ItemAnimator getItemAnimator()
	{
		return mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:areturn         
	}

	Rect getItemDecorInsetsForChild(View view)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore          4
		if(!layoutparams.mInsetsDirty)
	//*   4    9:aload           4
	//*   5   11:getfield        #1398 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*   6   14:ifne            23
			return layoutparams.mDecorInsets;
	//    7   17:aload           4
	//    8   19:getfield        #1108 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    9   22:areturn         
		if(mState.isPreLayout() && (layoutparams.isItemChanged() || layoutparams.isViewInvalid()))
	//*  10   23:aload_0         
	//*  11   24:getfield        #425 <Field RecyclerView$State mState>
	//*  12   27:invokevirtual   #1914 <Method boolean RecyclerView$State.isPreLayout()>
	//*  13   30:ifeq            55
	//*  14   33:aload           4
	//*  15   35:invokevirtual   #1917 <Method boolean RecyclerView$LayoutParams.isItemChanged()>
	//*  16   38:ifne            49
	//*  17   41:aload           4
	//*  18   43:invokevirtual   #1920 <Method boolean RecyclerView$LayoutParams.isViewInvalid()>
	//*  19   46:ifeq            55
			return layoutparams.mDecorInsets;
	//   20   49:aload           4
	//   21   51:getfield        #1108 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   22   54:areturn         
		Rect rect = layoutparams.mDecorInsets;
	//   23   55:aload           4
	//   24   57:getfield        #1108 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   25   60:astore          5
		rect.set(0, 0, 0, 0);
	//   26   62:aload           5
	//   27   64:iconst_0        
	//   28   65:iconst_0        
	//   29   66:iconst_0        
	//   30   67:iconst_0        
	//   31   68:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
		int j = mItemDecorations.size();
	//   32   71:aload_0         
	//   33   72:getfield        #390 <Field ArrayList mItemDecorations>
	//   34   75:invokevirtual   #1062 <Method int ArrayList.size()>
	//   35   78:istore_3        
		for(int i = 0; i < j; i++)
	//*  36   79:iconst_0        
	//*  37   80:istore_2        
	//*  38   81:iload_2         
	//*  39   82:iload_3         
	//*  40   83:icmpge          200
		{
			mTempRect.set(0, 0, 0, 0);
	//   41   86:aload_0         
	//   42   87:getfield        #378 <Field Rect mTempRect>
	//   43   90:iconst_0        
	//   44   91:iconst_0        
	//   45   92:iconst_0        
	//   46   93:iconst_0        
	//   47   94:invokevirtual   #1148 <Method void Rect.set(int, int, int, int)>
			((ItemDecoration)mItemDecorations.get(i)).getItemOffsets(mTempRect, view, this, mState);
	//   48   97:aload_0         
	//   49   98:getfield        #390 <Field ArrayList mItemDecorations>
	//   50  101:iload_2         
	//   51  102:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   52  105:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   53  108:aload_0         
	//   54  109:getfield        #378 <Field Rect mTempRect>
	//   55  112:aload_1         
	//   56  113:aload_0         
	//   57  114:aload_0         
	//   58  115:getfield        #425 <Field RecyclerView$State mState>
	//   59  118:invokevirtual   #1924 <Method void RecyclerView$ItemDecoration.getItemOffsets(Rect, View, RecyclerView, RecyclerView$State)>
			rect.left = rect.left + mTempRect.left;
	//   60  121:aload           5
	//   61  123:aload           5
	//   62  125:getfield        #1114 <Field int Rect.left>
	//   63  128:aload_0         
	//   64  129:getfield        #378 <Field Rect mTempRect>
	//   65  132:getfield        #1114 <Field int Rect.left>
	//   66  135:iadd            
	//   67  136:putfield        #1114 <Field int Rect.left>
			rect.top = rect.top + mTempRect.top;
	//   68  139:aload           5
	//   69  141:aload           5
	//   70  143:getfield        #1123 <Field int Rect.top>
	//   71  146:aload_0         
	//   72  147:getfield        #378 <Field Rect mTempRect>
	//   73  150:getfield        #1123 <Field int Rect.top>
	//   74  153:iadd            
	//   75  154:putfield        #1123 <Field int Rect.top>
			rect.right = rect.right + mTempRect.right;
	//   76  157:aload           5
	//   77  159:aload           5
	//   78  161:getfield        #1132 <Field int Rect.right>
	//   79  164:aload_0         
	//   80  165:getfield        #378 <Field Rect mTempRect>
	//   81  168:getfield        #1132 <Field int Rect.right>
	//   82  171:iadd            
	//   83  172:putfield        #1132 <Field int Rect.right>
			rect.bottom = rect.bottom + mTempRect.bottom;
	//   84  175:aload           5
	//   85  177:aload           5
	//   86  179:getfield        #1141 <Field int Rect.bottom>
	//   87  182:aload_0         
	//   88  183:getfield        #378 <Field Rect mTempRect>
	//   89  186:getfield        #1141 <Field int Rect.bottom>
	//   90  189:iadd            
	//   91  190:putfield        #1141 <Field int Rect.bottom>
		}

	//   92  193:iload_2         
	//   93  194:iconst_1        
	//   94  195:iadd            
	//   95  196:istore_2        
	//*  96  197:goto            81
		layoutparams.mInsetsDirty = false;
	//   97  200:aload           4
	//   98  202:iconst_0        
	//   99  203:putfield        #1398 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		return rect;
	//  100  206:aload           5
	//  101  208:areturn         
	}

	public ItemDecoration getItemDecorationAt(int i)
	{
		if(i < 0 || i > mItemDecorations.size())
	//*   0    0:iload_1         
	//*   1    1:iflt            15
	//*   2    4:iload_1         
	//*   3    5:aload_0         
	//*   4    6:getfield        #390 <Field ArrayList mItemDecorations>
	//*   5    9:invokevirtual   #1062 <Method int ArrayList.size()>
	//*   6   12:icmple          17
			return null;
	//    7   15:aconst_null     
	//    8   16:areturn         
		else
			return (ItemDecoration)mItemDecorations.get(i);
	//    9   17:aload_0         
	//   10   18:getfield        #390 <Field ArrayList mItemDecorations>
	//   11   21:iload_1         
	//   12   22:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   13   25:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   14   28:areturn         
	}

	public LayoutManager getLayoutManager()
	{
		return mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:areturn         
	}

	public int getMaxFlingVelocity()
	{
		return mMaxFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #494 <Field int mMaxFlingVelocity>
	//    2    4:ireturn         
	}

	public int getMinFlingVelocity()
	{
		return mMinFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #489 <Field int mMinFlingVelocity>
	//    2    4:ireturn         
	}

	long getNanoTime()
	{
		if(ALLOW_THREAD_GAP_WORK)
	//*   0    0:getstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*   1    3:ifeq            10
			return System.nanoTime();
	//    2    6:invokestatic    #1936 <Method long System.nanoTime()>
	//    3    9:lreturn         
		else
			return 0L;
	//    4   10:lconst_0        
	//    5   11:lreturn         
	}

	public OnFlingListener getOnFlingListener()
	{
		return mOnFlingListener;
	//    0    0:aload_0         
	//    1    1:getfield        #1818 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    2    4:areturn         
	}

	public boolean getPreserveFocusAfterLayout()
	{
		return mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #414 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ireturn         
	}

	public RecycledViewPool getRecycledViewPool()
	{
		return mRecycler.getRecycledViewPool();
	//    0    0:aload_0         
	//    1    1:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//    2    4:invokevirtual   #1943 <Method RecyclerView$RecycledViewPool RecyclerView$Recycler.getRecycledViewPool()>
	//    3    7:areturn         
	}

	public int getScrollState()
	{
		return mScrollState;
	//    0    0:aload_0         
	//    1    1:getfield        #407 <Field int mScrollState>
	//    2    4:ireturn         
	}

	public boolean hasFixedSize()
	{
		return mHasFixedSize;
	//    0    0:aload_0         
	//    1    1:getfield        #1947 <Field boolean mHasFixedSize>
	//    2    4:ireturn         
	}

	public boolean hasNestedScrollingParent()
	{
		return getScrollingChildHelper().hasNestedScrollingParent();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #1950 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent()>
	//    3    7:ireturn         
	}

	public boolean hasPendingAdapterUpdates()
	{
		return !mFirstLayoutComplete || mDataSetHasChangedAfterLayout || mAdapterHelper.hasPendingUpdates();
	//    0    0:aload_0         
	//    1    1:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//    2    4:ifeq            24
	//    3    7:aload_0         
	//    4    8:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//    5   11:ifne            24
	//    6   14:aload_0         
	//    7   15:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//    8   18:invokevirtual   #1605 <Method boolean AdapterHelper.hasPendingUpdates()>
	//    9   21:ifeq            26
	//   10   24:iconst_1        
	//   11   25:ireturn         
	//   12   26:iconst_0        
	//   13   27:ireturn         
	}

	void initAdapterManager()
	{
		mAdapterHelper = new AdapterHelper(new AdapterHelper.Callback() {

			void dispatchUpdate(AdapterHelper.UpdateOp updateop)
			{
				switch(updateop.cmd)
			//*   0    0:aload_1         
			//*   1    1:getfield        #28  <Field int AdapterHelper$UpdateOp.cmd>
				{
			//*   2    4:tableswitch     1 8: default 52
			//			               1 53
			//			               2 76
			//			               3 149
			//			               4 99
			//			               5 149
			//			               6 149
			//			               7 149
			//			               8 126
				default:
					return;
			//    3   52:return          

				case 1: // '\001'
					mLayout.onItemsAdded(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//    4   53:aload_0         
			//    5   54:getfield        #17  <Field RecyclerView this$0>
			//    6   57:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    7   60:aload_0         
			//    8   61:getfield        #17  <Field RecyclerView this$0>
			//    9   64:aload_1         
			//   10   65:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   11   68:aload_1         
			//   12   69:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   13   72:invokevirtual   #44  <Method void RecyclerView$LayoutManager.onItemsAdded(RecyclerView, int, int)>
					return;
			//   14   75:return          

				case 2: // '\002'
					mLayout.onItemsRemoved(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   15   76:aload_0         
			//   16   77:getfield        #17  <Field RecyclerView this$0>
			//   17   80:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   18   83:aload_0         
			//   19   84:getfield        #17  <Field RecyclerView this$0>
			//   20   87:aload_1         
			//   21   88:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   22   91:aload_1         
			//   23   92:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   24   95:invokevirtual   #47  <Method void RecyclerView$LayoutManager.onItemsRemoved(RecyclerView, int, int)>
					return;
			//   25   98:return          

				case 4: // '\004'
					mLayout.onItemsUpdated(RecyclerView.this, updateop.positionStart, updateop.itemCount, updateop.payload);
			//   26   99:aload_0         
			//   27  100:getfield        #17  <Field RecyclerView this$0>
			//   28  103:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   29  106:aload_0         
			//   30  107:getfield        #17  <Field RecyclerView this$0>
			//   31  110:aload_1         
			//   32  111:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   33  114:aload_1         
			//   34  115:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   35  118:aload_1         
			//   36  119:getfield        #51  <Field Object AdapterHelper$UpdateOp.payload>
			//   37  122:invokevirtual   #55  <Method void RecyclerView$LayoutManager.onItemsUpdated(RecyclerView, int, int, Object)>
					return;
			//   38  125:return          

				case 8: // '\b'
					mLayout.onItemsMoved(RecyclerView.this, updateop.positionStart, updateop.itemCount, 1);
			//   39  126:aload_0         
			//   40  127:getfield        #17  <Field RecyclerView this$0>
			//   41  130:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   42  133:aload_0         
			//   43  134:getfield        #17  <Field RecyclerView this$0>
			//   44  137:aload_1         
			//   45  138:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   46  141:aload_1         
			//   47  142:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   48  145:iconst_1        
			//   49  146:invokevirtual   #59  <Method void RecyclerView$LayoutManager.onItemsMoved(RecyclerView, int, int, int)>
					// fall through

				case 3: // '\003'
				case 5: // '\005'
				case 6: // '\006'
				case 7: // '\007'
					return;
			//   50  149:return          
				}
			}

			public ViewHolder findViewHolder(int i)
			{
				ViewHolder viewholder = findViewHolderForPosition(i, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iconst_1        
			//    4    6:invokevirtual   #65  <Method RecyclerView$ViewHolder RecyclerView.findViewHolderForPosition(int, boolean)>
			//    5    9:astore_2        
				if(viewholder == null)
			//*   6   10:aload_2         
			//*   7   11:ifnonnull       16
					return null;
			//    8   14:aconst_null     
			//    9   15:areturn         
				if(mChildHelper.isHidden(viewholder.itemView))
			//*  10   16:aload_0         
			//*  11   17:getfield        #17  <Field RecyclerView this$0>
			//*  12   20:getfield        #69  <Field ChildHelper RecyclerView.mChildHelper>
			//*  13   23:aload_2         
			//*  14   24:getfield        #75  <Field View RecyclerView$ViewHolder.itemView>
			//*  15   27:invokevirtual   #81  <Method boolean ChildHelper.isHidden(View)>
			//*  16   30:ifeq            35
					return null;
			//   17   33:aconst_null     
			//   18   34:areturn         
				else
					return viewholder;
			//   19   35:aload_2         
			//   20   36:areturn         
			}

			public void markViewHoldersUpdated(int i, int j, Object obj)
			{
				viewRangeUpdate(i, j, obj);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #86  <Method void RecyclerView.viewRangeUpdate(int, int, Object)>
				mItemsChanged = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #90  <Field boolean RecyclerView.mItemsChanged>
			//   10   18:return          
			}

			public void offsetPositionsForAdd(int i, int j)
			{
				offsetPositionRecordsForInsert(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #95  <Method void RecyclerView.offsetPositionRecordsForInsert(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForMove(int i, int j)
			{
				offsetPositionRecordsForMove(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #102 <Method void RecyclerView.offsetPositionRecordsForMove(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForRemovingInvisible(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_1        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
				State state = mState;
			//   10   18:aload_0         
			//   11   19:getfield        #17  <Field RecyclerView this$0>
			//   12   22:getfield        #111 <Field RecyclerView$State RecyclerView.mState>
			//   13   25:astore_3        
				state.mDeletedInvisibleItemCountSincePreviousLayout = state.mDeletedInvisibleItemCountSincePreviousLayout + j;
			//   14   26:aload_3         
			//   15   27:aload_3         
			//   16   28:getfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   17   31:iload_2         
			//   18   32:iadd            
			//   19   33:putfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   20   36:return          
			}

			public void offsetPositionsForRemovingLaidOutOrNewView(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, false);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_0        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//   10   18:return          
			}

			public void onDispatchFirstPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			public void onDispatchSecondPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #968 <Class AdapterHelper>
	//    2    4:dup             
	//    3    5:new             #20  <Class RecyclerView$6>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1952 <Method void RecyclerView$6(RecyclerView)>
	//    7   13:invokespecial   #1955 <Method void AdapterHelper(AdapterHelper$Callback)>
	//    8   16:putfield        #966 <Field AdapterHelper mAdapterHelper>
	//    9   19:return          
	}

	void initFastScroller(StateListDrawable statelistdrawable, Drawable drawable, StateListDrawable statelistdrawable1, Drawable drawable1)
	{
		if(statelistdrawable == null || drawable == null || statelistdrawable1 == null || drawable1 == null)
	//*   0    0:aload_1         
	//*   1    1:ifnull          17
	//*   2    4:aload_2         
	//*   3    5:ifnull          17
	//*   4    8:aload_3         
	//*   5    9:ifnull          17
	//*   6   12:aload           4
	//*   7   14:ifnonnull       28
		{
			throw new IllegalArgumentException("Trying to set fast scroller without both required drawables.");
	//    8   17:new             #1270 <Class IllegalArgumentException>
	//    9   20:dup             
	//   10   21:ldc2            #1957 <String "Trying to set fast scroller without both required drawables.">
	//   11   24:invokespecial   #1276 <Method void IllegalArgumentException(String)>
	//   12   27:athrow          
		} else
		{
			Resources resources = getContext().getResources();
	//   13   28:aload_0         
	//   14   29:invokevirtual   #524 <Method Context getContext()>
	//   15   32:invokevirtual   #1206 <Method Resources Context.getResources()>
	//   16   35:astore          5
			new FastScroller(this, statelistdrawable, drawable, statelistdrawable1, drawable1, resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_default_thickness), resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_minimum_range), resources.getDimensionPixelOffset(android.support.v7.recyclerview.R.dimen.fastscroll_margin));
	//   17   37:new             #1959 <Class FastScroller>
	//   18   40:dup             
	//   19   41:aload_0         
	//   20   42:aload_1         
	//   21   43:aload_2         
	//   22   44:aload_3         
	//   23   45:aload           4
	//   24   47:aload           5
	//   25   49:getstatic       #1964 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_default_thickness>
	//   26   52:invokevirtual   #1967 <Method int Resources.getDimensionPixelSize(int)>
	//   27   55:aload           5
	//   28   57:getstatic       #1970 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_minimum_range>
	//   29   60:invokevirtual   #1967 <Method int Resources.getDimensionPixelSize(int)>
	//   30   63:aload           5
	//   31   65:getstatic       #1973 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_margin>
	//   32   68:invokevirtual   #1976 <Method int Resources.getDimensionPixelOffset(int)>
	//   33   71:invokespecial   #1979 <Method void FastScroller(RecyclerView, StateListDrawable, Drawable, StateListDrawable, Drawable, int, int, int)>
	//   34   74:pop             
			return;
	//   35   75:return          
		}
	}

	void invalidateGlows()
	{
		mBottomGlow = null;
	//    0    0:aload_0         
	//    1    1:aconst_null     
	//    2    2:putfield        #1348 <Field EdgeEffect mBottomGlow>
		mTopGlow = null;
	//    3    5:aload_0         
	//    4    6:aconst_null     
	//    5    7:putfield        #1343 <Field EdgeEffect mTopGlow>
		mRightGlow = null;
	//    6   10:aload_0         
	//    7   11:aconst_null     
	//    8   12:putfield        #1338 <Field EdgeEffect mRightGlow>
		mLeftGlow = null;
	//    9   15:aload_0         
	//   10   16:aconst_null     
	//   11   17:putfield        #1325 <Field EdgeEffect mLeftGlow>
	//   12   20:return          
	}

	public void invalidateItemDecorations()
	{
		if(mItemDecorations.size() == 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #390 <Field ArrayList mItemDecorations>
	//*   2    4:invokevirtual   #1062 <Method int ArrayList.size()>
	//*   3    7:ifne            11
			return;
	//    4   10:return          
		if(mLayout != null)
	//*   5   11:aload_0         
	//*   6   12:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   7   15:ifnull          28
			mLayout.assertNotInLayoutOrScroll("Cannot invalidate item decorations during a scroll or layout");
	//    8   18:aload_0         
	//    9   19:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:ldc2            #1983 <String "Cannot invalidate item decorations during a scroll or layout">
	//   11   25:invokevirtual   #1489 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		markItemDecorInsetsDirty();
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1502 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   14   32:aload_0         
	//   15   33:invokevirtual   #1505 <Method void requestLayout()>
	//   16   36:return          
	}

	boolean isAccessibilityEnabled()
	{
		return mAccessibilityManager != null && mAccessibilityManager.isEnabled();
	//    0    0:aload_0         
	//    1    1:getfield        #534 <Field AccessibilityManager mAccessibilityManager>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #534 <Field AccessibilityManager mAccessibilityManager>
	//    5   11:invokevirtual   #1986 <Method boolean AccessibilityManager.isEnabled()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAnimating()
	{
		return mItemAnimator != null && mItemAnimator.isRunning();
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #1766 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAttachedToWindow()
	{
		return mIsAttached;
	//    0    0:aload_0         
	//    1    1:getfield        #1990 <Field boolean mIsAttached>
	//    2    4:ireturn         
	}

	public boolean isComputingLayout()
	{
		return mLayoutOrScrollCounter > 0;
	//    0    0:aload_0         
	//    1    1:getfield        #398 <Field int mLayoutOrScrollCounter>
	//    2    4:ifle            9
	//    3    7:iconst_1        
	//    4    8:ireturn         
	//    5    9:iconst_0        
	//    6   10:ireturn         
	}

	public boolean isLayoutFrozen()
	{
		return mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1772 <Field boolean mLayoutFrozen>
	//    2    4:ireturn         
	}

	public boolean isNestedScrollingEnabled()
	{
		return getScrollingChildHelper().isNestedScrollingEnabled();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #1994 <Method boolean NestedScrollingChildHelper.isNestedScrollingEnabled()>
	//    3    7:ireturn         
	}

	void jumpToPositionForSmoothScroller(int i)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//    4    8:aload_0         
	//    5    9:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    6   12:iload_1         
	//    7   13:invokevirtual   #1998 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//    8   16:aload_0         
	//    9   17:invokevirtual   #621 <Method boolean awakenScrollBars()>
	//   10   20:pop             
			return;
	//   11   21:return          
		}
	}

	void markItemDecorInsetsDirty()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          40
			((LayoutParams)mChildHelper.getUnfilteredChildAt(i).getLayoutParams()).mInsetsDirty = true;
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   14   26:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   15   29:iconst_1        
	//   16   30:putfield        #1398 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>

	//   17   33:iload_1         
	//   18   34:iconst_1        
	//   19   35:iadd            
	//   20   36:istore_1        
	//*  21   37:goto            10
		mRecycler.markItemDecorInsetsDirty();
	//   22   40:aload_0         
	//   23   41:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   24   44:invokevirtual   #1999 <Method void RecyclerView$Recycler.markItemDecorInsetsDirty()>
	//   25   47:return          
	}

	void markKnownViewsInvalid()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          51
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:ifnull          44
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifne            44
				viewholder.addFlags(6);
	//   20   38:aload_3         
	//   21   39:bipush          6
	//   22   41:invokevirtual   #2002 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   23   44:iload_1         
	//   24   45:iconst_1        
	//   25   46:iadd            
	//   26   47:istore_1        
	//*  27   48:goto            10
		markItemDecorInsetsDirty();
	//   28   51:aload_0         
	//   29   52:invokevirtual   #1502 <Method void markItemDecorInsetsDirty()>
		mRecycler.markKnownViewsInvalid();
	//   30   55:aload_0         
	//   31   56:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   32   59:invokevirtual   #2003 <Method void RecyclerView$Recycler.markKnownViewsInvalid()>
	//   33   62:return          
	}

	public void offsetChildrenHorizontal(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetLeftAndRight(i);
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2007 <Method void View.offsetLeftAndRight(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	public void offsetChildrenVertical(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetTopAndBottom(i);
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2011 <Method void View.offsetTopAndBottom(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	void offsetPositionRecordsForInsert(int i, int j)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore_3        
	//*   6   11:iload_3         
	//*   7   12:iload           4
	//*   8   14:icmpge          74
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   17:aload_0         
	//   10   18:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   21:iload_3         
	//   12   22:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   25:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   28:astore          5
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i)
	//*  15   30:aload           5
	//*  16   32:ifnull          67
	//*  17   35:aload           5
	//*  18   37:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   40:ifne            67
	//*  20   43:aload           5
	//*  21   45:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   48:iload_1         
	//*  23   49:icmplt          67
			{
				viewholder.offsetPosition(j, false);
	//   24   52:aload           5
	//   25   54:iload_2         
	//   26   55:iconst_0        
	//   27   56:invokevirtual   #2016 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   28   59:aload_0         
	//   29   60:getfield        #425 <Field RecyclerView$State mState>
	//   30   63:iconst_1        
	//   31   64:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   32   67:iload_3         
	//   33   68:iconst_1        
	//   34   69:iadd            
	//   35   70:istore_3        
	//*  36   71:goto            11
		mRecycler.offsetPositionRecordsForInsert(i, j);
	//   37   74:aload_0         
	//   38   75:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   39   78:iload_1         
	//   40   79:iload_2         
	//   41   80:invokevirtual   #2018 <Method void RecyclerView$Recycler.offsetPositionRecordsForInsert(int, int)>
		requestLayout();
	//   42   83:aload_0         
	//   43   84:invokevirtual   #1505 <Method void requestLayout()>
	//   44   87:return          
	}

	void offsetPositionRecordsForMove(int i, int j)
	{
		int j1 = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          7
		int k;
		int l;
		byte byte0;
		if(i < j)
	//*   4    9:iload_1         
	//*   5   10:iload_2         
	//*   6   11:icmpge          25
		{
			k = i;
	//    7   14:iload_1         
	//    8   15:istore_3        
			l = j;
	//    9   16:iload_2         
	//   10   17:istore          4
			byte0 = -1;
	//   11   19:iconst_m1       
	//   12   20:istore          5
		} else
	//*  13   22:goto            33
		{
			k = j;
	//   14   25:iload_2         
	//   15   26:istore_3        
			l = i;
	//   16   27:iload_1         
	//   17   28:istore          4
			byte0 = 1;
	//   18   30:iconst_1        
	//   19   31:istore          5
		}
		for(int i1 = 0; i1 < j1; i1++)
	//*  20   33:iconst_0        
	//*  21   34:istore          6
	//*  22   36:iload           6
	//*  23   38:iload           7
	//*  24   40:icmpge          130
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i1));
	//   25   43:aload_0         
	//   26   44:getfield        #646 <Field ChildHelper mChildHelper>
	//   27   47:iload           6
	//   28   49:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   29   52:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   30   55:astore          8
			if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
	//*  31   57:aload           8
	//*  32   59:ifnull          121
	//*  33   62:aload           8
	//*  34   64:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  35   67:iload_3         
	//*  36   68:icmplt          121
	//*  37   71:aload           8
	//*  38   73:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  39   76:iload           4
	//*  40   78:icmple          84
				continue;
	//   41   81:goto            121
			if(viewholder.mPosition == i)
	//*  42   84:aload           8
	//*  43   86:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  44   89:iload_1         
	//*  45   90:icmpne          105
				viewholder.offsetPosition(j - i, false);
	//   46   93:aload           8
	//   47   95:iload_2         
	//   48   96:iload_1         
	//   49   97:isub            
	//   50   98:iconst_0        
	//   51   99:invokevirtual   #2016 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			else
	//*  52  102:goto            113
				viewholder.offsetPosition(((int) (byte0)), false);
	//   53  105:aload           8
	//   54  107:iload           5
	//   55  109:iconst_0        
	//   56  110:invokevirtual   #2016 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			mState.mStructureChanged = true;
	//   57  113:aload_0         
	//   58  114:getfield        #425 <Field RecyclerView$State mState>
	//   59  117:iconst_1        
	//   60  118:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
		}

	//   61  121:iload           6
	//   62  123:iconst_1        
	//   63  124:iadd            
	//   64  125:istore          6
	//*  65  127:goto            36
		mRecycler.offsetPositionRecordsForMove(i, j);
	//   66  130:aload_0         
	//   67  131:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   68  134:iload_1         
	//   69  135:iload_2         
	//   70  136:invokevirtual   #2021 <Method void RecyclerView$Recycler.offsetPositionRecordsForMove(int, int)>
		requestLayout();
	//   71  139:aload_0         
	//   72  140:invokevirtual   #1505 <Method void requestLayout()>
	//   73  143:return          
	}

	void offsetPositionRecordsForRemove(int i, int j, boolean flag)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   19:aload_0         
	//   10   20:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          6
			if(viewholder == null || viewholder.shouldIgnore())
				continue;
	//   15   33:aload           6
	//   16   35:ifnull          104
	//   17   38:aload           6
	//   18   40:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//   19   43:ifne            104
			if(viewholder.mPosition >= i + j)
	//*  20   46:aload           6
	//*  21   48:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   51:iload_1         
	//*  23   52:iload_2         
	//*  24   53:iadd            
	//*  25   54:icmplt          76
			{
				viewholder.offsetPosition(-j, flag);
	//   26   57:aload           6
	//   27   59:iload_2         
	//   28   60:ineg            
	//   29   61:iload_3         
	//   30   62:invokevirtual   #2016 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   31   65:aload_0         
	//   32   66:getfield        #425 <Field RecyclerView$State mState>
	//   33   69:iconst_1        
	//   34   70:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
				continue;
	//   35   73:goto            104
			}
			if(viewholder.mPosition >= i)
	//*  36   76:aload           6
	//*  37   78:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  38   81:iload_1         
	//*  39   82:icmplt          104
			{
				viewholder.flagRemovedAndOffsetPosition(i - 1, -j, flag);
	//   40   85:aload           6
	//   41   87:iload_1         
	//   42   88:iconst_1        
	//   43   89:isub            
	//   44   90:iload_2         
	//   45   91:ineg            
	//   46   92:iload_3         
	//   47   93:invokevirtual   #2026 <Method void RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int, int, boolean)>
				mState.mStructureChanged = true;
	//   48   96:aload_0         
	//   49   97:getfield        #425 <Field RecyclerView$State mState>
	//   50  100:iconst_1        
	//   51  101:putfield        #931 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   52  104:iload           4
	//   53  106:iconst_1        
	//   54  107:iadd            
	//   55  108:istore          4
	//*  56  110:goto            12
		mRecycler.offsetPositionRecordsForRemove(i, j, flag);
	//   57  113:aload_0         
	//   58  114:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:iload_3         
	//   62  120:invokevirtual   #2028 <Method void RecyclerView$Recycler.offsetPositionRecordsForRemove(int, int, boolean)>
		requestLayout();
	//   63  123:aload_0         
	//   64  124:invokevirtual   #1505 <Method void requestLayout()>
	//   65  127:return          
	}

	protected void onAttachedToWindow()
	{
		super.onAttachedToWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2031 <Method void ViewGroup.onAttachedToWindow()>
		mLayoutOrScrollCounter = 0;
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:putfield        #398 <Field int mLayoutOrScrollCounter>
		mIsAttached = true;
	//    5    9:aload_0         
	//    6   10:iconst_1        
	//    7   11:putfield        #1990 <Field boolean mIsAttached>
		boolean flag;
		if(mFirstLayoutComplete && !isLayoutRequested())
	//*   8   14:aload_0         
	//*   9   15:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//*  10   18:ifeq            34
	//*  11   21:aload_0         
	//*  12   22:invokevirtual   #2034 <Method boolean isLayoutRequested()>
	//*  13   25:ifne            34
			flag = true;
	//   14   28:iconst_1        
	//   15   29:istore          4
		else
	//*  16   31:goto            37
			flag = false;
	//   17   34:iconst_0        
	//   18   35:istore          4
		mFirstLayoutComplete = flag;
	//   19   37:aload_0         
	//   20   38:iload           4
	//   21   40:putfield        #1318 <Field boolean mFirstLayoutComplete>
		if(mLayout != null)
	//*  22   43:aload_0         
	//*  23   44:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  24   47:ifnull          58
			mLayout.dispatchAttachedToWindow(this);
	//   25   50:aload_0         
	//   26   51:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   27   54:aload_0         
	//   28   55:invokevirtual   #2037 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
		mPostedAnimatorRunner = false;
	//   29   58:aload_0         
	//   30   59:iconst_0        
	//   31   60:putfield        #434 <Field boolean mPostedAnimatorRunner>
		if(ALLOW_THREAD_GAP_WORK)
	//*  32   63:getstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  33   66:ifeq            175
		{
			mGapWorker = (GapWorker)GapWorker.sGapWorker.get();
	//   34   69:aload_0         
	//   35   70:getstatic       #2043 <Field ThreadLocal GapWorker.sGapWorker>
	//   36   73:invokevirtual   #2046 <Method Object ThreadLocal.get()>
	//   37   76:checkcast       #2039 <Class GapWorker>
	//   38   79:putfield        #2048 <Field GapWorker mGapWorker>
			if(mGapWorker == null)
	//*  39   82:aload_0         
	//*  40   83:getfield        #2048 <Field GapWorker mGapWorker>
	//*  41   86:ifnonnull       167
			{
				mGapWorker = new GapWorker();
	//   42   89:aload_0         
	//   43   90:new             #2039 <Class GapWorker>
	//   44   93:dup             
	//   45   94:invokespecial   #2049 <Method void GapWorker()>
	//   46   97:putfield        #2048 <Field GapWorker mGapWorker>
				Display display = ViewCompat.getDisplay(((View) (this)));
	//   47  100:aload_0         
	//   48  101:invokestatic    #2053 <Method Display ViewCompat.getDisplay(View)>
	//   49  104:astore          5
				float f1 = 60F;
	//   50  106:ldc2            #2054 <Float 60F>
	//   51  109:fstore_2        
				float f = f1;
	//   52  110:fload_2         
	//   53  111:fstore_1        
				if(!isInEditMode())
	//*  54  112:aload_0         
	//*  55  113:invokevirtual   #729 <Method boolean isInEditMode()>
	//*  56  116:ifne            144
				{
					f = f1;
	//   57  119:fload_2         
	//   58  120:fstore_1        
					if(display != null)
	//*  59  121:aload           5
	//*  60  123:ifnull          144
					{
						float f2 = display.getRefreshRate();
	//   61  126:aload           5
	//   62  128:invokevirtual   #2059 <Method float Display.getRefreshRate()>
	//   63  131:fstore_3        
						f = f1;
	//   64  132:fload_2         
	//   65  133:fstore_1        
						if(f2 >= 30F)
	//*  66  134:fload_3         
	//*  67  135:ldc2            #2060 <Float 30F>
	//*  68  138:fcmpl           
	//*  69  139:iflt            144
							f = f2;
	//   70  142:fload_3         
	//   71  143:fstore_1        
					}
				}
				mGapWorker.mFrameIntervalNs = (long)(1E+09F / f);
	//   72  144:aload_0         
	//   73  145:getfield        #2048 <Field GapWorker mGapWorker>
	//   74  148:ldc2            #2061 <Float 1E+09F>
	//   75  151:fload_1         
	//   76  152:fdiv            
	//   77  153:f2l             
	//   78  154:putfield        #2064 <Field long GapWorker.mFrameIntervalNs>
				GapWorker.sGapWorker.set(((Object) (mGapWorker)));
	//   79  157:getstatic       #2043 <Field ThreadLocal GapWorker.sGapWorker>
	//   80  160:aload_0         
	//   81  161:getfield        #2048 <Field GapWorker mGapWorker>
	//   82  164:invokevirtual   #2067 <Method void ThreadLocal.set(Object)>
			}
			mGapWorker.add(this);
	//   83  167:aload_0         
	//   84  168:getfield        #2048 <Field GapWorker mGapWorker>
	//   85  171:aload_0         
	//   86  172:invokevirtual   #2069 <Method void GapWorker.add(RecyclerView)>
		}
	//   87  175:return          
	}

	public void onChildAttachedToWindow(View view)
	{
	//    0    0:return          
	}

	public void onChildDetachedFromWindow(View view)
	{
	//    0    0:return          
	}

	protected void onDetachedFromWindow()
	{
		super.onDetachedFromWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2072 <Method void ViewGroup.onDetachedFromWindow()>
		if(mItemAnimator != null)
	//*   2    4:aload_0         
	//*   3    5:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   4    8:ifnull          18
			mItemAnimator.endAnimations();
	//    5   11:aload_0         
	//    6   12:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    7   15:invokevirtual   #2075 <Method void RecyclerView$ItemAnimator.endAnimations()>
		stopScroll();
	//    8   18:aload_0         
	//    9   19:invokevirtual   #2078 <Method void stopScroll()>
		mIsAttached = false;
	//   10   22:aload_0         
	//   11   23:iconst_0        
	//   12   24:putfield        #1990 <Field boolean mIsAttached>
		if(mLayout != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  15   31:ifnull          46
			mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:aload_0         
	//   20   40:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   21   43:invokevirtual   #2082 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		mPendingAccessibilityImportanceChange.clear();
	//   22   46:aload_0         
	//   23   47:getfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//   24   50:invokeinterface #1563 <Method void List.clear()>
		removeCallbacks(mItemAnimatorRunner);
	//   25   55:aload_0         
	//   26   56:aload_0         
	//   27   57:getfield        #447 <Field Runnable mItemAnimatorRunner>
	//   28   60:invokevirtual   #2086 <Method boolean removeCallbacks(Runnable)>
	//   29   63:pop             
		mViewInfoStore.onDetach();
	//   30   64:aload_0         
	//   31   65:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   32   68:invokevirtual   #2089 <Method void ViewInfoStore.onDetach()>
		if(ALLOW_THREAD_GAP_WORK)
	//*  33   71:getstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  34   74:ifeq            90
		{
			mGapWorker.remove(this);
	//   35   77:aload_0         
	//   36   78:getfield        #2048 <Field GapWorker mGapWorker>
	//   37   81:aload_0         
	//   38   82:invokevirtual   #2092 <Method void GapWorker.remove(RecyclerView)>
			mGapWorker = null;
	//   39   85:aload_0         
	//   40   86:aconst_null     
	//   41   87:putfield        #2048 <Field GapWorker mGapWorker>
		}
	//   42   90:return          
	}

	public void onDraw(Canvas canvas)
	{
		super.onDraw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #2095 <Method void ViewGroup.onDraw(Canvas)>
		int j = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #390 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1062 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < j; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDraw(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #390 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #425 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #2097 <Method void RecyclerView$ItemDecoration.onDraw(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
	//   27   47:return          
	}

	void onEnterLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #398 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #398 <Field int mLayoutOrScrollCounter>
	//    6   10:return          
	}

	void onExitLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter - 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #398 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:isub            
	//    5    7:putfield        #398 <Field int mLayoutOrScrollCounter>
		if(mLayoutOrScrollCounter < 1)
	//*   6   10:aload_0         
	//*   7   11:getfield        #398 <Field int mLayoutOrScrollCounter>
	//*   8   14:iconst_1        
	//*   9   15:icmpge          31
		{
			mLayoutOrScrollCounter = 0;
	//   10   18:aload_0         
	//   11   19:iconst_0        
	//   12   20:putfield        #398 <Field int mLayoutOrScrollCounter>
			dispatchContentChangedIfNecessary();
	//   13   23:aload_0         
	//   14   24:invokespecial   #2099 <Method void dispatchContentChangedIfNecessary()>
			dispatchPendingImportantForAccessibilityChanges();
	//   15   27:aload_0         
	//   16   28:invokevirtual   #2101 <Method void dispatchPendingImportantForAccessibilityChanges()>
		}
	//   17   31:return          
	}

	public boolean onGenericMotionEvent(MotionEvent motionevent)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayoutFrozen)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   7   13:ifeq            18
			return false;
	//    8   16:iconst_0        
	//    9   17:ireturn         
		if((motionevent.getSource() & 2) != 0 && motionevent.getAction() == 8)
	//*  10   18:aload_1         
	//*  11   19:invokevirtual   #2105 <Method int MotionEvent.getSource()>
	//*  12   22:iconst_2        
	//*  13   23:iand            
	//*  14   24:ifeq            115
	//*  15   27:aload_1         
	//*  16   28:invokevirtual   #1053 <Method int MotionEvent.getAction()>
	//*  17   31:bipush          8
	//*  18   33:icmpne          115
		{
			float f;
			if(mLayout.canScrollVertically())
	//*  19   36:aload_0         
	//*  20   37:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  21   40:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  22   43:ifeq            57
				f = -motionevent.getAxisValue(9);
	//   23   46:aload_1         
	//   24   47:bipush          9
	//   25   49:invokevirtual   #2108 <Method float MotionEvent.getAxisValue(int)>
	//   26   52:fneg            
	//   27   53:fstore_2        
			else
	//*  28   54:goto            59
				f = 0.0F;
	//   29   57:fconst_0        
	//   30   58:fstore_2        
			float f1;
			if(mLayout.canScrollHorizontally())
	//*  31   59:aload_0         
	//*  32   60:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  33   63:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  34   66:ifeq            79
				f1 = motionevent.getAxisValue(10);
	//   35   69:aload_1         
	//   36   70:bipush          10
	//   37   72:invokevirtual   #2108 <Method float MotionEvent.getAxisValue(int)>
	//   38   75:fstore_3        
			else
	//*  39   76:goto            81
				f1 = 0.0F;
	//   40   79:fconst_0        
	//   41   80:fstore_3        
			if(f != 0.0F || f1 != 0.0F)
	//*  42   81:fload_2         
	//*  43   82:fconst_0        
	//*  44   83:fcmpl           
	//*  45   84:ifne            93
	//*  46   87:fload_3         
	//*  47   88:fconst_0        
	//*  48   89:fcmpl           
	//*  49   90:ifeq            115
			{
				float f2 = getScrollFactor();
	//   50   93:aload_0         
	//   51   94:invokespecial   #2110 <Method float getScrollFactor()>
	//   52   97:fstore          4
				scrollByInternal((int)(f1 * f2), (int)(f * f2), motionevent);
	//   53   99:aload_0         
	//   54  100:fload_3         
	//   55  101:fload           4
	//   56  103:fmul            
	//   57  104:f2i             
	//   58  105:fload_2         
	//   59  106:fload           4
	//   60  108:fmul            
	//   61  109:f2i             
	//   62  110:aload_1         
	//   63  111:invokevirtual   #2114 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   64  114:pop             
			}
		}
		return false;
	//   65  115:iconst_0        
	//   66  116:ireturn         
	}

	public boolean onInterceptTouchEvent(MotionEvent motionevent)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(dispatchOnItemTouchIntercept(motionevent))
	//*   5    9:aload_0         
	//*   6   10:aload_1         
	//*   7   11:invokespecial   #2116 <Method boolean dispatchOnItemTouchIntercept(MotionEvent)>
	//*   8   14:ifeq            23
		{
			cancelTouch();
	//    9   17:aload_0         
	//   10   18:invokespecial   #2118 <Method void cancelTouch()>
			return true;
	//   11   21:iconst_1        
	//   12   22:ireturn         
		}
		if(mLayout == null)
	//*  13   23:aload_0         
	//*  14   24:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  15   27:ifnonnull       32
			return false;
	//   16   30:iconst_0        
	//   17   31:ireturn         
		boolean flag = mLayout.canScrollHorizontally();
	//   18   32:aload_0         
	//   19   33:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   20   36:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   21   39:istore          7
		boolean flag1 = mLayout.canScrollVertically();
	//   22   41:aload_0         
	//   23   42:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   24   45:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   25   48:istore          8
		if(mVelocityTracker == null)
	//*  26   50:aload_0         
	//*  27   51:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//*  28   54:ifnonnull       64
			mVelocityTracker = VelocityTracker.obtain();
	//   29   57:aload_0         
	//   30   58:invokestatic    #2121 <Method VelocityTracker VelocityTracker.obtain()>
	//   31   61:putfield        #1407 <Field VelocityTracker mVelocityTracker>
		mVelocityTracker.addMovement(motionevent);
	//   32   64:aload_0         
	//   33   65:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//   34   68:aload_1         
	//   35   69:invokevirtual   #2124 <Method void VelocityTracker.addMovement(MotionEvent)>
		int k = motionevent.getActionMasked();
	//   36   72:aload_1         
	//   37   73:invokevirtual   #2127 <Method int MotionEvent.getActionMasked()>
	//   38   76:istore_3        
		int i = motionevent.getActionIndex();
	//   39   77:aload_1         
	//   40   78:invokevirtual   #1281 <Method int MotionEvent.getActionIndex()>
	//   41   81:istore_2        
		switch(k)
	//*  42   82:iload_3         
		{
	//*  43   83:tableswitch     0 6: default 124
	//	               0 127
	//	               1 540
	//	               2 310
	//	               3 554
	//	               4 558
	//	               5 256
	//	               6 532
	//*  44  124:goto            558
		case 0: // '\0'
			if(mIgnoreMotionEventTillDown)
	//*  45  127:aload_0         
	//*  46  128:getfield        #2129 <Field boolean mIgnoreMotionEventTillDown>
	//*  47  131:ifeq            139
				mIgnoreMotionEventTillDown = false;
	//   48  134:aload_0         
	//   49  135:iconst_0        
	//   50  136:putfield        #2129 <Field boolean mIgnoreMotionEventTillDown>
			mScrollPointerId = motionevent.getPointerId(0);
	//   51  139:aload_0         
	//   52  140:aload_1         
	//   53  141:iconst_0        
	//   54  142:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//   55  145:putfield        #409 <Field int mScrollPointerId>
			i = (int)(motionevent.getX() + 0.5F);
	//   56  148:aload_1         
	//   57  149:invokevirtual   #2131 <Method float MotionEvent.getX()>
	//   58  152:ldc2            #1290 <Float 0.5F>
	//   59  155:fadd            
	//   60  156:f2i             
	//   61  157:istore_2        
			mLastTouchX = i;
	//   62  158:aload_0         
	//   63  159:iload_2         
	//   64  160:putfield        #1292 <Field int mLastTouchX>
			mInitialTouchX = i;
	//   65  163:aload_0         
	//   66  164:iload_2         
	//   67  165:putfield        #1294 <Field int mInitialTouchX>
			i = (int)(motionevent.getY() + 0.5F);
	//   68  168:aload_1         
	//   69  169:invokevirtual   #2133 <Method float MotionEvent.getY()>
	//   70  172:ldc2            #1290 <Float 0.5F>
	//   71  175:fadd            
	//   72  176:f2i             
	//   73  177:istore_2        
			mLastTouchY = i;
	//   74  178:aload_0         
	//   75  179:iload_2         
	//   76  180:putfield        #1299 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   77  183:aload_0         
	//   78  184:iload_2         
	//   79  185:putfield        #1301 <Field int mInitialTouchY>
			if(mScrollState == 2)
	//*  80  188:aload_0         
	//*  81  189:getfield        #407 <Field int mScrollState>
	//*  82  192:iconst_2        
	//*  83  193:icmpne          211
			{
				getParent().requestDisallowInterceptTouchEvent(true);
	//   84  196:aload_0         
	//   85  197:invokevirtual   #2134 <Method ViewParent getParent()>
	//   86  200:iconst_1        
	//   87  201:invokeinterface #2139 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
				setScrollState(1);
	//   88  206:aload_0         
	//   89  207:iconst_1        
	//   90  208:invokevirtual   #691 <Method void setScrollState(int)>
			}
			motionevent = ((MotionEvent) (mNestedOffsets));
	//   91  211:aload_0         
	//   92  212:getfield        #442 <Field int[] mNestedOffsets>
	//   93  215:astore_1        
			mNestedOffsets[1] = 0;
	//   94  216:aload_0         
	//   95  217:getfield        #442 <Field int[] mNestedOffsets>
	//   96  220:iconst_1        
	//   97  221:iconst_0        
	//   98  222:iastore         
			motionevent[0] = 0;
	//   99  223:aload_1         
	//  100  224:iconst_0        
	//  101  225:iconst_0        
	//  102  226:iastore         
			i = 0;
	//  103  227:iconst_0        
	//  104  228:istore_2        
			if(flag)
	//* 105  229:iload           7
	//* 106  231:ifeq            236
				i = 1;
	//  107  234:iconst_1        
	//  108  235:istore_2        
			int l = i;
	//  109  236:iload_2         
	//  110  237:istore_3        
			if(flag1)
	//* 111  238:iload           8
	//* 112  240:ifeq            247
				l = i | 2;
	//  113  243:iload_2         
	//  114  244:iconst_2        
	//  115  245:ior             
	//  116  246:istore_3        
			startNestedScroll(l);
	//  117  247:aload_0         
	//  118  248:iload_3         
	//  119  249:invokevirtual   #2142 <Method boolean startNestedScroll(int)>
	//  120  252:pop             
			break;

	//* 121  253:goto            558
		case 5: // '\005'
			mScrollPointerId = motionevent.getPointerId(i);
	//  122  256:aload_0         
	//  123  257:aload_1         
	//  124  258:iload_2         
	//  125  259:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//  126  262:putfield        #409 <Field int mScrollPointerId>
			int i1 = (int)(motionevent.getX(i) + 0.5F);
	//  127  265:aload_1         
	//  128  266:iload_2         
	//  129  267:invokevirtual   #1289 <Method float MotionEvent.getX(int)>
	//  130  270:ldc2            #1290 <Float 0.5F>
	//  131  273:fadd            
	//  132  274:f2i             
	//  133  275:istore_3        
			mLastTouchX = i1;
	//  134  276:aload_0         
	//  135  277:iload_3         
	//  136  278:putfield        #1292 <Field int mLastTouchX>
			mInitialTouchX = i1;
	//  137  281:aload_0         
	//  138  282:iload_3         
	//  139  283:putfield        #1294 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//  140  286:aload_1         
	//  141  287:iload_2         
	//  142  288:invokevirtual   #1297 <Method float MotionEvent.getY(int)>
	//  143  291:ldc2            #1290 <Float 0.5F>
	//  144  294:fadd            
	//  145  295:f2i             
	//  146  296:istore_2        
			mLastTouchY = i;
	//  147  297:aload_0         
	//  148  298:iload_2         
	//  149  299:putfield        #1299 <Field int mLastTouchY>
			mInitialTouchY = i;
	//  150  302:aload_0         
	//  151  303:iload_2         
	//  152  304:putfield        #1301 <Field int mInitialTouchY>
			break;

	//* 153  307:goto            558
		case 2: // '\002'
			int j1 = motionevent.findPointerIndex(mScrollPointerId);
	//  154  310:aload_1         
	//  155  311:aload_0         
	//  156  312:getfield        #409 <Field int mScrollPointerId>
	//  157  315:invokevirtual   #2145 <Method int MotionEvent.findPointerIndex(int)>
	//  158  318:istore_3        
			if(j1 < 0)
	//* 159  319:iload_3         
	//* 160  320:ifge            360
			{
				Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
	//  161  323:ldc1            #165 <String "RecyclerView">
	//  162  325:new             #766 <Class StringBuilder>
	//  163  328:dup             
	//  164  329:invokespecial   #767 <Method void StringBuilder()>
	//  165  332:ldc2            #2147 <String "Error processing scroll; pointer index for id ">
	//  166  335:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  167  338:aload_0         
	//  168  339:getfield        #409 <Field int mScrollPointerId>
	//  169  342:invokevirtual   #1275 <Method StringBuilder StringBuilder.append(int)>
	//  170  345:ldc2            #2149 <String " not found. Did any MotionEvents get skipped?">
	//  171  348:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  172  351:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  173  354:invokestatic    #1246 <Method int Log.e(String, String)>
	//  174  357:pop             
				return false;
	//  175  358:iconst_0        
	//  176  359:ireturn         
			}
			int j = (int)(motionevent.getX(j1) + 0.5F);
	//  177  360:aload_1         
	//  178  361:iload_3         
	//  179  362:invokevirtual   #1289 <Method float MotionEvent.getX(int)>
	//  180  365:ldc2            #1290 <Float 0.5F>
	//  181  368:fadd            
	//  182  369:f2i             
	//  183  370:istore_2        
			j1 = (int)(motionevent.getY(j1) + 0.5F);
	//  184  371:aload_1         
	//  185  372:iload_3         
	//  186  373:invokevirtual   #1297 <Method float MotionEvent.getY(int)>
	//  187  376:ldc2            #1290 <Float 0.5F>
	//  188  379:fadd            
	//  189  380:f2i             
	//  190  381:istore_3        
			if(mScrollState != 1)
	//* 191  382:aload_0         
	//* 192  383:getfield        #407 <Field int mScrollState>
	//* 193  386:iconst_1        
	//* 194  387:icmpeq          529
			{
				int l1 = j - mInitialTouchX;
	//  195  390:iload_2         
	//  196  391:aload_0         
	//  197  392:getfield        #1294 <Field int mInitialTouchX>
	//  198  395:isub            
	//  199  396:istore          5
				int k1 = j1 - mInitialTouchY;
	//  200  398:iload_3         
	//  201  399:aload_0         
	//  202  400:getfield        #1301 <Field int mInitialTouchY>
	//  203  403:isub            
	//  204  404:istore          4
				j1 = 0;
	//  205  406:iconst_0        
	//  206  407:istore_3        
				j = j1;
	//  207  408:iload_3         
	//  208  409:istore_2        
				if(flag)
	//* 209  410:iload           7
	//* 210  412:ifeq            464
				{
					j = j1;
	//  211  415:iload_3         
	//  212  416:istore_2        
					if(Math.abs(l1) > mTouchSlop)
	//* 213  417:iload           5
	//* 214  419:invokestatic    #1814 <Method int Math.abs(int)>
	//* 215  422:aload_0         
	//* 216  423:getfield        #484 <Field int mTouchSlop>
	//* 217  426:icmple          464
					{
						j1 = mInitialTouchX;
	//  218  429:aload_0         
	//  219  430:getfield        #1294 <Field int mInitialTouchX>
	//  220  433:istore_3        
						int j2 = mTouchSlop;
	//  221  434:aload_0         
	//  222  435:getfield        #484 <Field int mTouchSlop>
	//  223  438:istore          6
						if(l1 < 0)
	//* 224  440:iload           5
	//* 225  442:ifge            450
							j = -1;
	//  226  445:iconst_m1       
	//  227  446:istore_2        
						else
	//* 228  447:goto            452
							j = 1;
	//  229  450:iconst_1        
	//  230  451:istore_2        
						mLastTouchX = j1 + j2 * j;
	//  231  452:aload_0         
	//  232  453:iload_3         
	//  233  454:iload           6
	//  234  456:iload_2         
	//  235  457:imul            
	//  236  458:iadd            
	//  237  459:putfield        #1292 <Field int mLastTouchX>
						j = 1;
	//  238  462:iconst_1        
	//  239  463:istore_2        
					}
				}
				j1 = j;
	//  240  464:iload_2         
	//  241  465:istore_3        
				if(flag1)
	//* 242  466:iload           8
	//* 243  468:ifeq            520
				{
					j1 = j;
	//  244  471:iload_2         
	//  245  472:istore_3        
					if(Math.abs(k1) > mTouchSlop)
	//* 246  473:iload           4
	//* 247  475:invokestatic    #1814 <Method int Math.abs(int)>
	//* 248  478:aload_0         
	//* 249  479:getfield        #484 <Field int mTouchSlop>
	//* 250  482:icmple          520
					{
						j1 = mInitialTouchY;
	//  251  485:aload_0         
	//  252  486:getfield        #1301 <Field int mInitialTouchY>
	//  253  489:istore_3        
						int i2 = mTouchSlop;
	//  254  490:aload_0         
	//  255  491:getfield        #484 <Field int mTouchSlop>
	//  256  494:istore          5
						byte byte0;
						if(k1 < 0)
	//* 257  496:iload           4
	//* 258  498:ifge            506
							byte0 = -1;
	//  259  501:iconst_m1       
	//  260  502:istore_2        
						else
	//* 261  503:goto            508
							byte0 = 1;
	//  262  506:iconst_1        
	//  263  507:istore_2        
						mLastTouchY = j1 + i2 * byte0;
	//  264  508:aload_0         
	//  265  509:iload_3         
	//  266  510:iload           5
	//  267  512:iload_2         
	//  268  513:imul            
	//  269  514:iadd            
	//  270  515:putfield        #1299 <Field int mLastTouchY>
						j1 = 1;
	//  271  518:iconst_1        
	//  272  519:istore_3        
					}
				}
				if(j1 != 0)
	//* 273  520:iload_3         
	//* 274  521:ifeq            529
					setScrollState(1);
	//  275  524:aload_0         
	//  276  525:iconst_1        
	//  277  526:invokevirtual   #691 <Method void setScrollState(int)>
			}
			break;

	//* 278  529:goto            558
		case 6: // '\006'
			onPointerUp(motionevent);
	//  279  532:aload_0         
	//  280  533:aload_1         
	//  281  534:invokespecial   #2151 <Method void onPointerUp(MotionEvent)>
			break;

	//* 282  537:goto            558
		case 1: // '\001'
			mVelocityTracker.clear();
	//  283  540:aload_0         
	//  284  541:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  285  544:invokevirtual   #1410 <Method void VelocityTracker.clear()>
			stopNestedScroll();
	//  286  547:aload_0         
	//  287  548:invokevirtual   #1413 <Method void stopNestedScroll()>
			break;

	//* 288  551:goto            558
		case 3: // '\003'
			cancelTouch();
	//  289  554:aload_0         
	//  290  555:invokespecial   #2118 <Method void cancelTouch()>
			break;
		}
		return mScrollState == 1;
	//  291  558:aload_0         
	//  292  559:getfield        #407 <Field int mScrollState>
	//  293  562:iconst_1        
	//  294  563:icmpne          568
	//  295  566:iconst_1        
	//  296  567:ireturn         
	//  297  568:iconst_0        
	//  298  569:ireturn         
	}

	protected void onLayout(boolean flag, int i, int j, int k, int l)
	{
		TraceCompat.beginSection("RV OnLayout");
	//    0    0:ldc1            #185 <String "RV OnLayout">
	//    1    2:invokestatic    #1596 <Method void TraceCompat.beginSection(String)>
		dispatchLayout();
	//    2    5:aload_0         
	//    3    6:invokevirtual   #1599 <Method void dispatchLayout()>
		TraceCompat.endSection();
	//    4    9:invokestatic    #1602 <Method void TraceCompat.endSection()>
		mFirstLayoutComplete = true;
	//    5   12:aload_0         
	//    6   13:iconst_1        
	//    7   14:putfield        #1318 <Field boolean mFirstLayoutComplete>
	//    8   17:return          
	}

	protected void onMeasure(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       14
		{
			defaultOnMeasure(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokevirtual   #2156 <Method void defaultOnMeasure(int, int)>
			return;
	//    7   13:return          
		}
		if(mLayout.mAutoMeasure)
	//*   8   14:aload_0         
	//*   9   15:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  10   18:getfield        #2159 <Field boolean RecyclerView$LayoutManager.mAutoMeasure>
	//*  11   21:ifeq            190
		{
			int k = android.view.View.MeasureSpec.getMode(i);
	//   12   24:iload_1         
	//   13   25:invokestatic    #2164 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   14   28:istore_3        
			int l = android.view.View.MeasureSpec.getMode(j);
	//   15   29:iload_2         
	//   16   30:invokestatic    #2164 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   17   33:istore          4
			boolean flag;
			if(k == 0x40000000 && l == 0x40000000)
	//*  18   35:iload_3         
	//*  19   36:ldc2            #2165 <Int 0x40000000>
	//*  20   39:icmpne          55
	//*  21   42:iload           4
	//*  22   44:ldc2            #2165 <Int 0x40000000>
	//*  23   47:icmpne          55
				flag = true;
	//   24   50:iconst_1        
	//   25   51:istore_3        
			else
	//*  26   52:goto            57
				flag = false;
	//   27   55:iconst_0        
	//   28   56:istore_3        
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   29   57:aload_0         
	//   30   58:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   31   61:aload_0         
	//   32   62:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   33   65:aload_0         
	//   34   66:getfield        #425 <Field RecyclerView$State mState>
	//   35   69:iload_1         
	//   36   70:iload_2         
	//   37   71:invokevirtual   #2168 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			if(flag || mAdapter == null)
	//*  38   74:iload_3         
	//*  39   75:ifne            85
	//*  40   78:aload_0         
	//*  41   79:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  42   82:ifnonnull       86
				return;
	//   43   85:return          
			if(mState.mLayoutStep == 1)
	//*  44   86:aload_0         
	//*  45   87:getfield        #425 <Field RecyclerView$State mState>
	//*  46   90:getfield        #963 <Field int RecyclerView$State.mLayoutStep>
	//*  47   93:iconst_1        
	//*  48   94:icmpne          101
				dispatchLayoutStep1();
	//   49   97:aload_0         
	//   50   98:invokespecial   #1666 <Method void dispatchLayoutStep1()>
			mLayout.setMeasureSpecs(i, j);
	//   51  101:aload_0         
	//   52  102:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   53  105:iload_1         
	//   54  106:iload_2         
	//   55  107:invokevirtual   #2171 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
			mState.mIsMeasuring = true;
	//   56  110:aload_0         
	//   57  111:getfield        #425 <Field RecyclerView$State mState>
	//   58  114:iconst_1        
	//   59  115:putfield        #841 <Field boolean RecyclerView$State.mIsMeasuring>
			dispatchLayoutStep2();
	//   60  118:aload_0         
	//   61  119:invokespecial   #1671 <Method void dispatchLayoutStep2()>
			mLayout.setMeasuredDimensionFromChildren(i, j);
	//   62  122:aload_0         
	//   63  123:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   64  126:iload_1         
	//   65  127:iload_2         
	//   66  128:invokevirtual   #2174 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
			if(mLayout.shouldMeasureTwice())
	//*  67  131:aload_0         
	//*  68  132:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  69  135:invokevirtual   #2177 <Method boolean RecyclerView$LayoutManager.shouldMeasureTwice()>
	//*  70  138:ifeq            189
			{
				mLayout.setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000));
	//   71  141:aload_0         
	//   72  142:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   73  145:aload_0         
	//   74  146:invokevirtual   #1777 <Method int getMeasuredWidth()>
	//   75  149:ldc2            #2165 <Int 0x40000000>
	//   76  152:invokestatic    #2180 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   77  155:aload_0         
	//   78  156:invokevirtual   #1780 <Method int getMeasuredHeight()>
	//   79  159:ldc2            #2165 <Int 0x40000000>
	//   80  162:invokestatic    #2180 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   81  165:invokevirtual   #2171 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
				mState.mIsMeasuring = true;
	//   82  168:aload_0         
	//   83  169:getfield        #425 <Field RecyclerView$State mState>
	//   84  172:iconst_1        
	//   85  173:putfield        #841 <Field boolean RecyclerView$State.mIsMeasuring>
				dispatchLayoutStep2();
	//   86  176:aload_0         
	//   87  177:invokespecial   #1671 <Method void dispatchLayoutStep2()>
				mLayout.setMeasuredDimensionFromChildren(i, j);
	//   88  180:aload_0         
	//   89  181:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   90  184:iload_1         
	//   91  185:iload_2         
	//   92  186:invokevirtual   #2174 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
			}
			return;
	//   93  189:return          
		}
		if(mHasFixedSize)
	//*  94  190:aload_0         
	//*  95  191:getfield        #1947 <Field boolean mHasFixedSize>
	//*  96  194:ifeq            215
		{
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   97  197:aload_0         
	//   98  198:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   99  201:aload_0         
	//  100  202:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  101  205:aload_0         
	//  102  206:getfield        #425 <Field RecyclerView$State mState>
	//  103  209:iload_1         
	//  104  210:iload_2         
	//  105  211:invokevirtual   #2168 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			return;
	//  106  214:return          
		}
		if(mAdapterUpdateDuringMeasure)
	//* 107  215:aload_0         
	//* 108  216:getfield        #2182 <Field boolean mAdapterUpdateDuringMeasure>
	//* 109  219:ifeq            284
		{
			eatRequestLayout();
	//  110  222:aload_0         
	//  111  223:invokevirtual   #844 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//  112  226:aload_0         
	//  113  227:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
			processAdapterUpdatesAndSetAnimationFlags();
	//  114  230:aload_0         
	//  115  231:invokespecial   #853 <Method void processAdapterUpdatesAndSetAnimationFlags()>
			onExitLayoutOrScroll();
	//  116  234:aload_0         
	//  117  235:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
			if(mState.mRunPredictiveAnimations)
	//* 118  238:aload_0         
	//* 119  239:getfield        #425 <Field RecyclerView$State mState>
	//* 120  242:getfield        #865 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 121  245:ifeq            259
			{
				mState.mInPreLayout = true;
	//  122  248:aload_0         
	//  123  249:getfield        #425 <Field RecyclerView$State mState>
	//  124  252:iconst_1        
	//  125  253:putfield        #868 <Field boolean RecyclerView$State.mInPreLayout>
			} else
	//* 126  256:goto            274
			{
				mAdapterHelper.consumeUpdatesInOnePass();
	//  127  259:aload_0         
	//  128  260:getfield        #966 <Field AdapterHelper mAdapterHelper>
	//  129  263:invokevirtual   #971 <Method void AdapterHelper.consumeUpdatesInOnePass()>
				mState.mInPreLayout = false;
	//  130  266:aload_0         
	//  131  267:getfield        #425 <Field RecyclerView$State mState>
	//  132  270:iconst_0        
	//  133  271:putfield        #868 <Field boolean RecyclerView$State.mInPreLayout>
			}
			mAdapterUpdateDuringMeasure = false;
	//  134  274:aload_0         
	//  135  275:iconst_0        
	//  136  276:putfield        #2182 <Field boolean mAdapterUpdateDuringMeasure>
			resumeRequestLayout(false);
	//  137  279:aload_0         
	//  138  280:iconst_0        
	//  139  281:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		}
		if(mAdapter != null)
	//* 140  284:aload_0         
	//* 141  285:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//* 142  288:ifnull          308
			mState.mItemCount = mAdapter.getItemCount();
	//  143  291:aload_0         
	//  144  292:getfield        #425 <Field RecyclerView$State mState>
	//  145  295:aload_0         
	//  146  296:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//  147  299:invokevirtual   #873 <Method int RecyclerView$Adapter.getItemCount()>
	//  148  302:putfield        #876 <Field int RecyclerView$State.mItemCount>
		else
	//* 149  305:goto            316
			mState.mItemCount = 0;
	//  150  308:aload_0         
	//  151  309:getfield        #425 <Field RecyclerView$State mState>
	//  152  312:iconst_0        
	//  153  313:putfield        #876 <Field int RecyclerView$State.mItemCount>
		eatRequestLayout();
	//  154  316:aload_0         
	//  155  317:invokevirtual   #844 <Method void eatRequestLayout()>
		mLayout.onMeasure(mRecycler, mState, i, j);
	//  156  320:aload_0         
	//  157  321:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//  158  324:aload_0         
	//  159  325:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//  160  328:aload_0         
	//  161  329:getfield        #425 <Field RecyclerView$State mState>
	//  162  332:iload_1         
	//  163  333:iload_2         
	//  164  334:invokevirtual   #2168 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
		resumeRequestLayout(false);
	//  165  337:aload_0         
	//  166  338:iconst_0        
	//  167  339:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		mState.mInPreLayout = false;
	//  168  342:aload_0         
	//  169  343:getfield        #425 <Field RecyclerView$State mState>
	//  170  346:iconst_0        
	//  171  347:putfield        #868 <Field boolean RecyclerView$State.mInPreLayout>
	//  172  350:return          
	}

	protected boolean onRequestFocusInDescendants(int i, Rect rect)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		else
			return super.onRequestFocusInDescendants(i, rect);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:aload_2         
	//    8   12:invokespecial   #2186 <Method boolean ViewGroup.onRequestFocusInDescendants(int, Rect)>
	//    9   15:ireturn         
	}

	protected void onRestoreInstanceState(Parcelable parcelable)
	{
		if(!(parcelable instanceof SavedState))
	//*   0    0:aload_1         
	//*   1    1:instanceof      #98  <Class RecyclerView$SavedState>
	//*   2    4:ifne            13
		{
			super.onRestoreInstanceState(parcelable);
	//    3    7:aload_0         
	//    4    8:aload_1         
	//    5    9:invokespecial   #2190 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
			return;
	//    6   12:return          
		}
		mPendingSavedState = (SavedState)parcelable;
	//    7   13:aload_0         
	//    8   14:aload_1         
	//    9   15:checkcast       #98  <Class RecyclerView$SavedState>
	//   10   18:putfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
		super.onRestoreInstanceState(mPendingSavedState.getSuperState());
	//   11   21:aload_0         
	//   12   22:aload_0         
	//   13   23:getfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
	//   14   26:invokevirtual   #2194 <Method Parcelable RecyclerView$SavedState.getSuperState()>
	//   15   29:invokespecial   #2190 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
		if(mLayout != null && mPendingSavedState.mLayoutState != null)
	//*  16   32:aload_0         
	//*  17   33:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  18   36:ifnull          63
	//*  19   39:aload_0         
	//*  20   40:getfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
	//*  21   43:getfield        #2198 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//*  22   46:ifnull          63
			mLayout.onRestoreInstanceState(mPendingSavedState.mLayoutState);
	//   23   49:aload_0         
	//   24   50:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   25   53:aload_0         
	//   26   54:getfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
	//   27   57:getfield        #2198 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//   28   60:invokevirtual   #2199 <Method void RecyclerView$LayoutManager.onRestoreInstanceState(Parcelable)>
	//   29   63:return          
	}

	protected Parcelable onSaveInstanceState()
	{
		SavedState savedstate = new SavedState(super.onSaveInstanceState());
	//    0    0:new             #98  <Class RecyclerView$SavedState>
	//    1    3:dup             
	//    2    4:aload_0         
	//    3    5:invokespecial   #2202 <Method Parcelable ViewGroup.onSaveInstanceState()>
	//    4    8:invokespecial   #2204 <Method void RecyclerView$SavedState(Parcelable)>
	//    5   11:astore_1        
		if(mPendingSavedState != null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
	//*   8   16:ifnull          29
		{
			savedstate.copyFrom(mPendingSavedState);
	//    9   19:aload_1         
	//   10   20:aload_0         
	//   11   21:getfield        #976 <Field RecyclerView$SavedState mPendingSavedState>
	//   12   24:invokevirtual   #2208 <Method void RecyclerView$SavedState.copyFrom(RecyclerView$SavedState)>
			return ((Parcelable) (savedstate));
	//   13   27:aload_1         
	//   14   28:areturn         
		}
		if(mLayout != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  17   33:ifnull          49
		{
			savedstate.mLayoutState = mLayout.onSaveInstanceState();
	//   18   36:aload_1         
	//   19   37:aload_0         
	//   20   38:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   21   41:invokevirtual   #2209 <Method Parcelable RecyclerView$LayoutManager.onSaveInstanceState()>
	//   22   44:putfield        #2198 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   23   47:aload_1         
	//   24   48:areturn         
		} else
		{
			savedstate.mLayoutState = null;
	//   25   49:aload_1         
	//   26   50:aconst_null     
	//   27   51:putfield        #2198 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   28   54:aload_1         
	//   29   55:areturn         
		}
	}

	public void onScrollStateChanged(int i)
	{
	//    0    0:return          
	}

	public void onScrolled(int i, int j)
	{
	//    0    0:return          
	}

	protected void onSizeChanged(int i, int j, int k, int l)
	{
		super.onSizeChanged(i, j, k, l);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:iload_3         
	//    4    4:iload           4
	//    5    6:invokespecial   #2212 <Method void ViewGroup.onSizeChanged(int, int, int, int)>
		if(i != k || j != l)
	//*   6    9:iload_1         
	//*   7   10:iload_3         
	//*   8   11:icmpne          20
	//*   9   14:iload_2         
	//*  10   15:iload           4
	//*  11   17:icmpeq          24
			invalidateGlows();
	//   12   20:aload_0         
	//   13   21:invokevirtual   #2214 <Method void invalidateGlows()>
	//   14   24:return          
	}

	public boolean onTouchEvent(MotionEvent motionevent)
	{
		if(mLayoutFrozen || mIgnoreMotionEventTillDown)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   2    4:ifne            14
	//*   3    7:aload_0         
	//*   4    8:getfield        #2129 <Field boolean mIgnoreMotionEventTillDown>
	//*   5   11:ifeq            16
			return false;
	//    6   14:iconst_0        
	//    7   15:ireturn         
		if(dispatchOnItemTouch(motionevent))
	//*   8   16:aload_0         
	//*   9   17:aload_1         
	//*  10   18:invokespecial   #2216 <Method boolean dispatchOnItemTouch(MotionEvent)>
	//*  11   21:ifeq            30
		{
			cancelTouch();
	//   12   24:aload_0         
	//   13   25:invokespecial   #2118 <Method void cancelTouch()>
			return true;
	//   14   28:iconst_1        
	//   15   29:ireturn         
		}
		if(mLayout == null)
	//*  16   30:aload_0         
	//*  17   31:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  18   34:ifnonnull       39
			return false;
	//   19   37:iconst_0        
	//   20   38:ireturn         
		boolean flag1 = mLayout.canScrollHorizontally();
	//   21   39:aload_0         
	//   22   40:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   23   43:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   24   46:istore          13
		boolean flag2 = mLayout.canScrollVertically();
	//   25   48:aload_0         
	//   26   49:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   27   52:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   28   55:istore          14
		if(mVelocityTracker == null)
	//*  29   57:aload_0         
	//*  30   58:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//*  31   61:ifnonnull       71
			mVelocityTracker = VelocityTracker.obtain();
	//   32   64:aload_0         
	//   33   65:invokestatic    #2121 <Method VelocityTracker VelocityTracker.obtain()>
	//   34   68:putfield        #1407 <Field VelocityTracker mVelocityTracker>
		boolean flag = false;
	//   35   71:iconst_0        
	//   36   72:istore          10
		MotionEvent motionevent1 = MotionEvent.obtain(motionevent);
	//   37   74:aload_1         
	//   38   75:invokestatic    #2219 <Method MotionEvent MotionEvent.obtain(MotionEvent)>
	//   39   78:astore          15
		int i1 = motionevent.getActionMasked();
	//   40   80:aload_1         
	//   41   81:invokevirtual   #2127 <Method int MotionEvent.getActionMasked()>
	//   42   84:istore          6
		int j = motionevent.getActionIndex();
	//   43   86:aload_1         
	//   44   87:invokevirtual   #1281 <Method int MotionEvent.getActionIndex()>
	//   45   90:istore          5
		if(i1 == 0)
	//*  46   92:iload           6
	//*  47   94:ifne            115
		{
			int ai[] = mNestedOffsets;
	//   48   97:aload_0         
	//   49   98:getfield        #442 <Field int[] mNestedOffsets>
	//   50  101:astore          16
			mNestedOffsets[1] = 0;
	//   51  103:aload_0         
	//   52  104:getfield        #442 <Field int[] mNestedOffsets>
	//   53  107:iconst_1        
	//   54  108:iconst_0        
	//   55  109:iastore         
			ai[0] = 0;
	//   56  110:aload           16
	//   57  112:iconst_0        
	//   58  113:iconst_0        
	//   59  114:iastore         
		}
		motionevent1.offsetLocation(mNestedOffsets[0], mNestedOffsets[1]);
	//   60  115:aload           15
	//   61  117:aload_0         
	//   62  118:getfield        #442 <Field int[] mNestedOffsets>
	//   63  121:iconst_0        
	//   64  122:iaload          
	//   65  123:i2f             
	//   66  124:aload_0         
	//   67  125:getfield        #442 <Field int[] mNestedOffsets>
	//   68  128:iconst_1        
	//   69  129:iaload          
	//   70  130:i2f             
	//   71  131:invokevirtual   #2222 <Method void MotionEvent.offsetLocation(float, float)>
		int i = ((int) (flag));
	//   72  134:iload           10
	//   73  136:istore          4
		switch(i1)
	//*  74  138:iload           6
		{
	//*  75  140:tableswitch     0 6: default 184
	//	               0 191
	//	               1 857
	//	               2 353
	//	               3 965
	//	               4 973
	//	               5 286
	//	               6 845
		default:
			i = ((int) (flag));
	//   76  184:iload           10
	//   77  186:istore          4
			break;

	//*  78  188:goto            973
		case 0: // '\0'
			mScrollPointerId = motionevent.getPointerId(0);
	//   79  191:aload_0         
	//   80  192:aload_1         
	//   81  193:iconst_0        
	//   82  194:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//   83  197:putfield        #409 <Field int mScrollPointerId>
			i = (int)(motionevent.getX() + 0.5F);
	//   84  200:aload_1         
	//   85  201:invokevirtual   #2131 <Method float MotionEvent.getX()>
	//   86  204:ldc2            #1290 <Float 0.5F>
	//   87  207:fadd            
	//   88  208:f2i             
	//   89  209:istore          4
			mLastTouchX = i;
	//   90  211:aload_0         
	//   91  212:iload           4
	//   92  214:putfield        #1292 <Field int mLastTouchX>
			mInitialTouchX = i;
	//   93  217:aload_0         
	//   94  218:iload           4
	//   95  220:putfield        #1294 <Field int mInitialTouchX>
			i = (int)(motionevent.getY() + 0.5F);
	//   96  223:aload_1         
	//   97  224:invokevirtual   #2133 <Method float MotionEvent.getY()>
	//   98  227:ldc2            #1290 <Float 0.5F>
	//   99  230:fadd            
	//  100  231:f2i             
	//  101  232:istore          4
			mLastTouchY = i;
	//  102  234:aload_0         
	//  103  235:iload           4
	//  104  237:putfield        #1299 <Field int mLastTouchY>
			mInitialTouchY = i;
	//  105  240:aload_0         
	//  106  241:iload           4
	//  107  243:putfield        #1301 <Field int mInitialTouchY>
			i = 0;
	//  108  246:iconst_0        
	//  109  247:istore          4
			if(flag1)
	//* 110  249:iload           13
	//* 111  251:ifeq            257
				i = 1;
	//  112  254:iconst_1        
	//  113  255:istore          4
			j = i;
	//  114  257:iload           4
	//  115  259:istore          5
			if(flag2)
	//* 116  261:iload           14
	//* 117  263:ifeq            272
				j = i | 2;
	//  118  266:iload           4
	//  119  268:iconst_2        
	//  120  269:ior             
	//  121  270:istore          5
			startNestedScroll(j);
	//  122  272:aload_0         
	//  123  273:iload           5
	//  124  275:invokevirtual   #2142 <Method boolean startNestedScroll(int)>
	//  125  278:pop             
			i = ((int) (flag));
	//  126  279:iload           10
	//  127  281:istore          4
			break;

	//* 128  283:goto            973
		case 5: // '\005'
			mScrollPointerId = motionevent.getPointerId(j);
	//  129  286:aload_0         
	//  130  287:aload_1         
	//  131  288:iload           5
	//  132  290:invokevirtual   #1285 <Method int MotionEvent.getPointerId(int)>
	//  133  293:putfield        #409 <Field int mScrollPointerId>
			i = (int)(motionevent.getX(j) + 0.5F);
	//  134  296:aload_1         
	//  135  297:iload           5
	//  136  299:invokevirtual   #1289 <Method float MotionEvent.getX(int)>
	//  137  302:ldc2            #1290 <Float 0.5F>
	//  138  305:fadd            
	//  139  306:f2i             
	//  140  307:istore          4
			mLastTouchX = i;
	//  141  309:aload_0         
	//  142  310:iload           4
	//  143  312:putfield        #1292 <Field int mLastTouchX>
			mInitialTouchX = i;
	//  144  315:aload_0         
	//  145  316:iload           4
	//  146  318:putfield        #1294 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(j) + 0.5F);
	//  147  321:aload_1         
	//  148  322:iload           5
	//  149  324:invokevirtual   #1297 <Method float MotionEvent.getY(int)>
	//  150  327:ldc2            #1290 <Float 0.5F>
	//  151  330:fadd            
	//  152  331:f2i             
	//  153  332:istore          4
			mLastTouchY = i;
	//  154  334:aload_0         
	//  155  335:iload           4
	//  156  337:putfield        #1299 <Field int mLastTouchY>
			mInitialTouchY = i;
	//  157  340:aload_0         
	//  158  341:iload           4
	//  159  343:putfield        #1301 <Field int mInitialTouchY>
			i = ((int) (flag));
	//  160  346:iload           10
	//  161  348:istore          4
			break;

	//* 162  350:goto            973
		case 2: // '\002'
			i = motionevent.findPointerIndex(mScrollPointerId);
	//  163  353:aload_1         
	//  164  354:aload_0         
	//  165  355:getfield        #409 <Field int mScrollPointerId>
	//  166  358:invokevirtual   #2145 <Method int MotionEvent.findPointerIndex(int)>
	//  167  361:istore          4
			if(i < 0)
	//* 168  363:iload           4
	//* 169  365:ifge            405
			{
				Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
	//  170  368:ldc1            #165 <String "RecyclerView">
	//  171  370:new             #766 <Class StringBuilder>
	//  172  373:dup             
	//  173  374:invokespecial   #767 <Method void StringBuilder()>
	//  174  377:ldc2            #2147 <String "Error processing scroll; pointer index for id ">
	//  175  380:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  176  383:aload_0         
	//  177  384:getfield        #409 <Field int mScrollPointerId>
	//  178  387:invokevirtual   #1275 <Method StringBuilder StringBuilder.append(int)>
	//  179  390:ldc2            #2149 <String " not found. Did any MotionEvents get skipped?">
	//  180  393:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//  181  396:invokevirtual   #779 <Method String StringBuilder.toString()>
	//  182  399:invokestatic    #1246 <Method int Log.e(String, String)>
	//  183  402:pop             
				return false;
	//  184  403:iconst_0        
	//  185  404:ireturn         
			}
			int k2 = (int)(motionevent.getX(i) + 0.5F);
	//  186  405:aload_1         
	//  187  406:iload           4
	//  188  408:invokevirtual   #1289 <Method float MotionEvent.getX(int)>
	//  189  411:ldc2            #1290 <Float 0.5F>
	//  190  414:fadd            
	//  191  415:f2i             
	//  192  416:istore          11
			int l2 = (int)(motionevent.getY(i) + 0.5F);
	//  193  418:aload_1         
	//  194  419:iload           4
	//  195  421:invokevirtual   #1297 <Method float MotionEvent.getY(int)>
	//  196  424:ldc2            #1290 <Float 0.5F>
	//  197  427:fadd            
	//  198  428:f2i             
	//  199  429:istore          12
			int l1 = mLastTouchX - k2;
	//  200  431:aload_0         
	//  201  432:getfield        #1292 <Field int mLastTouchX>
	//  202  435:iload           11
	//  203  437:isub            
	//  204  438:istore          7
			int j1 = mLastTouchY - l2;
	//  205  440:aload_0         
	//  206  441:getfield        #1299 <Field int mLastTouchY>
	//  207  444:iload           12
	//  208  446:isub            
	//  209  447:istore          6
			int k = l1;
	//  210  449:iload           7
	//  211  451:istore          5
			i = j1;
	//  212  453:iload           6
	//  213  455:istore          4
			if(dispatchNestedPreScroll(l1, j1, mScrollConsumed, mScrollOffset))
	//* 214  457:aload_0         
	//* 215  458:iload           7
	//* 216  460:iload           6
	//* 217  462:aload_0         
	//* 218  463:getfield        #440 <Field int[] mScrollConsumed>
	//* 219  466:aload_0         
	//* 220  467:getfield        #438 <Field int[] mScrollOffset>
	//* 221  470:invokevirtual   #2223 <Method boolean dispatchNestedPreScroll(int, int, int[], int[])>
	//* 222  473:ifeq            553
			{
				k = l1 - mScrollConsumed[0];
	//  223  476:iload           7
	//  224  478:aload_0         
	//  225  479:getfield        #440 <Field int[] mScrollConsumed>
	//  226  482:iconst_0        
	//  227  483:iaload          
	//  228  484:isub            
	//  229  485:istore          5
				i = j1 - mScrollConsumed[1];
	//  230  487:iload           6
	//  231  489:aload_0         
	//  232  490:getfield        #440 <Field int[] mScrollConsumed>
	//  233  493:iconst_1        
	//  234  494:iaload          
	//  235  495:isub            
	//  236  496:istore          4
				motionevent1.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  237  498:aload           15
	//  238  500:aload_0         
	//  239  501:getfield        #438 <Field int[] mScrollOffset>
	//  240  504:iconst_0        
	//  241  505:iaload          
	//  242  506:i2f             
	//  243  507:aload_0         
	//  244  508:getfield        #438 <Field int[] mScrollOffset>
	//  245  511:iconst_1        
	//  246  512:iaload          
	//  247  513:i2f             
	//  248  514:invokevirtual   #2222 <Method void MotionEvent.offsetLocation(float, float)>
				motionevent = ((MotionEvent) (mNestedOffsets));
	//  249  517:aload_0         
	//  250  518:getfield        #442 <Field int[] mNestedOffsets>
	//  251  521:astore_1        
				motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  252  522:aload_1         
	//  253  523:iconst_0        
	//  254  524:aload_1         
	//  255  525:iconst_0        
	//  256  526:iaload          
	//  257  527:aload_0         
	//  258  528:getfield        #438 <Field int[] mScrollOffset>
	//  259  531:iconst_0        
	//  260  532:iaload          
	//  261  533:iadd            
	//  262  534:iastore         
				motionevent = ((MotionEvent) (mNestedOffsets));
	//  263  535:aload_0         
	//  264  536:getfield        #442 <Field int[] mNestedOffsets>
	//  265  539:astore_1        
				motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  266  540:aload_1         
	//  267  541:iconst_1        
	//  268  542:aload_1         
	//  269  543:iconst_1        
	//  270  544:iaload          
	//  271  545:aload_0         
	//  272  546:getfield        #438 <Field int[] mScrollOffset>
	//  273  549:iconst_1        
	//  274  550:iaload          
	//  275  551:iadd            
	//  276  552:iastore         
			}
			l1 = k;
	//  277  553:iload           5
	//  278  555:istore          7
			int i2 = i;
	//  279  557:iload           4
	//  280  559:istore          8
			if(mScrollState != 1)
	//* 281  561:aload_0         
	//* 282  562:getfield        #407 <Field int mScrollState>
	//* 283  565:iconst_1        
	//* 284  566:icmpeq          722
			{
				i2 = 0;
	//  285  569:iconst_0        
	//  286  570:istore          8
				int k1 = k;
	//  287  572:iload           5
	//  288  574:istore          6
				l1 = i2;
	//  289  576:iload           8
	//  290  578:istore          7
				if(flag1)
	//* 291  580:iload           13
	//* 292  582:ifeq            634
				{
					k1 = k;
	//  293  585:iload           5
	//  294  587:istore          6
					l1 = i2;
	//  295  589:iload           8
	//  296  591:istore          7
					if(Math.abs(k) > mTouchSlop)
	//* 297  593:iload           5
	//* 298  595:invokestatic    #1814 <Method int Math.abs(int)>
	//* 299  598:aload_0         
	//* 300  599:getfield        #484 <Field int mTouchSlop>
	//* 301  602:icmple          634
					{
						if(k > 0)
	//* 302  605:iload           5
	//* 303  607:ifle            622
							k1 = k - mTouchSlop;
	//  304  610:iload           5
	//  305  612:aload_0         
	//  306  613:getfield        #484 <Field int mTouchSlop>
	//  307  616:isub            
	//  308  617:istore          6
						else
	//* 309  619:goto            631
							k1 = k + mTouchSlop;
	//  310  622:iload           5
	//  311  624:aload_0         
	//  312  625:getfield        #484 <Field int mTouchSlop>
	//  313  628:iadd            
	//  314  629:istore          6
						l1 = 1;
	//  315  631:iconst_1        
	//  316  632:istore          7
					}
				}
				k = i;
	//  317  634:iload           4
	//  318  636:istore          5
				int j2 = l1;
	//  319  638:iload           7
	//  320  640:istore          9
				if(flag2)
	//* 321  642:iload           14
	//* 322  644:ifeq            696
				{
					k = i;
	//  323  647:iload           4
	//  324  649:istore          5
					j2 = l1;
	//  325  651:iload           7
	//  326  653:istore          9
					if(Math.abs(i) > mTouchSlop)
	//* 327  655:iload           4
	//* 328  657:invokestatic    #1814 <Method int Math.abs(int)>
	//* 329  660:aload_0         
	//* 330  661:getfield        #484 <Field int mTouchSlop>
	//* 331  664:icmple          696
					{
						if(i > 0)
	//* 332  667:iload           4
	//* 333  669:ifle            684
							k = i - mTouchSlop;
	//  334  672:iload           4
	//  335  674:aload_0         
	//  336  675:getfield        #484 <Field int mTouchSlop>
	//  337  678:isub            
	//  338  679:istore          5
						else
	//* 339  681:goto            693
							k = i + mTouchSlop;
	//  340  684:iload           4
	//  341  686:aload_0         
	//  342  687:getfield        #484 <Field int mTouchSlop>
	//  343  690:iadd            
	//  344  691:istore          5
						j2 = 1;
	//  345  693:iconst_1        
	//  346  694:istore          9
					}
				}
				l1 = k1;
	//  347  696:iload           6
	//  348  698:istore          7
				i2 = k;
	//  349  700:iload           5
	//  350  702:istore          8
				if(j2 != 0)
	//* 351  704:iload           9
	//* 352  706:ifeq            722
				{
					setScrollState(1);
	//  353  709:aload_0         
	//  354  710:iconst_1        
	//  355  711:invokevirtual   #691 <Method void setScrollState(int)>
					i2 = k;
	//  356  714:iload           5
	//  357  716:istore          8
					l1 = k1;
	//  358  718:iload           6
	//  359  720:istore          7
				}
			}
			if(mScrollState == 1)
	//* 360  722:aload_0         
	//* 361  723:getfield        #407 <Field int mScrollState>
	//* 362  726:iconst_1        
	//* 363  727:icmpne          838
			{
				mLastTouchX = k2 - mScrollOffset[0];
	//  364  730:aload_0         
	//  365  731:iload           11
	//  366  733:aload_0         
	//  367  734:getfield        #438 <Field int[] mScrollOffset>
	//  368  737:iconst_0        
	//  369  738:iaload          
	//  370  739:isub            
	//  371  740:putfield        #1292 <Field int mLastTouchX>
				mLastTouchY = l2 - mScrollOffset[1];
	//  372  743:aload_0         
	//  373  744:iload           12
	//  374  746:aload_0         
	//  375  747:getfield        #438 <Field int[] mScrollOffset>
	//  376  750:iconst_1        
	//  377  751:iaload          
	//  378  752:isub            
	//  379  753:putfield        #1299 <Field int mLastTouchY>
				if(flag1)
	//* 380  756:iload           13
	//* 381  758:ifeq            768
					i = l1;
	//  382  761:iload           7
	//  383  763:istore          4
				else
	//* 384  765:goto            771
					i = 0;
	//  385  768:iconst_0        
	//  386  769:istore          4
				int l;
				if(flag2)
	//* 387  771:iload           14
	//* 388  773:ifeq            783
					l = i2;
	//  389  776:iload           8
	//  390  778:istore          5
				else
	//* 391  780:goto            786
					l = 0;
	//  392  783:iconst_0        
	//  393  784:istore          5
				if(scrollByInternal(i, l, motionevent1))
	//* 394  786:aload_0         
	//* 395  787:iload           4
	//* 396  789:iload           5
	//* 397  791:aload           15
	//* 398  793:invokevirtual   #2114 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//* 399  796:ifeq            809
					getParent().requestDisallowInterceptTouchEvent(true);
	//  400  799:aload_0         
	//  401  800:invokevirtual   #2134 <Method ViewParent getParent()>
	//  402  803:iconst_1        
	//  403  804:invokeinterface #2139 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
				if(mGapWorker != null && (l1 != 0 || i2 != 0))
	//* 404  809:aload_0         
	//* 405  810:getfield        #2048 <Field GapWorker mGapWorker>
	//* 406  813:ifnull          838
	//* 407  816:iload           7
	//* 408  818:ifne            826
	//* 409  821:iload           8
	//* 410  823:ifeq            838
					mGapWorker.postFromTraversal(this, l1, i2);
	//  411  826:aload_0         
	//  412  827:getfield        #2048 <Field GapWorker mGapWorker>
	//  413  830:aload_0         
	//  414  831:iload           7
	//  415  833:iload           8
	//  416  835:invokevirtual   #2226 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
			}
			i = ((int) (flag));
	//  417  838:iload           10
	//  418  840:istore          4
			break;

	//* 419  842:goto            973
		case 6: // '\006'
			onPointerUp(motionevent);
	//  420  845:aload_0         
	//  421  846:aload_1         
	//  422  847:invokespecial   #2151 <Method void onPointerUp(MotionEvent)>
			i = ((int) (flag));
	//  423  850:iload           10
	//  424  852:istore          4
			break;

	//* 425  854:goto            973
		case 1: // '\001'
			mVelocityTracker.addMovement(motionevent1);
	//  426  857:aload_0         
	//  427  858:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  428  861:aload           15
	//  429  863:invokevirtual   #2124 <Method void VelocityTracker.addMovement(MotionEvent)>
			i = 1;
	//  430  866:iconst_1        
	//  431  867:istore          4
			mVelocityTracker.computeCurrentVelocity(1000, mMaxFlingVelocity);
	//  432  869:aload_0         
	//  433  870:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  434  873:sipush          1000
	//  435  876:aload_0         
	//  436  877:getfield        #494 <Field int mMaxFlingVelocity>
	//  437  880:i2f             
	//  438  881:invokevirtual   #2230 <Method void VelocityTracker.computeCurrentVelocity(int, float)>
			float f;
			if(flag1)
	//* 439  884:iload           13
	//* 440  886:ifeq            905
				f = -mVelocityTracker.getXVelocity(mScrollPointerId);
	//  441  889:aload_0         
	//  442  890:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  443  893:aload_0         
	//  444  894:getfield        #409 <Field int mScrollPointerId>
	//  445  897:invokevirtual   #2233 <Method float VelocityTracker.getXVelocity(int)>
	//  446  900:fneg            
	//  447  901:fstore_2        
			else
	//* 448  902:goto            907
				f = 0.0F;
	//  449  905:fconst_0        
	//  450  906:fstore_2        
			float f1;
			if(flag2)
	//* 451  907:iload           14
	//* 452  909:ifeq            928
				f1 = -mVelocityTracker.getYVelocity(mScrollPointerId);
	//  453  912:aload_0         
	//  454  913:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  455  916:aload_0         
	//  456  917:getfield        #409 <Field int mScrollPointerId>
	//  457  920:invokevirtual   #2236 <Method float VelocityTracker.getYVelocity(int)>
	//  458  923:fneg            
	//  459  924:fstore_3        
			else
	//* 460  925:goto            930
				f1 = 0.0F;
	//  461  928:fconst_0        
	//  462  929:fstore_3        
			if(f == 0.0F && f1 == 0.0F || !fling((int)f, (int)f1))
	//* 463  930:fload_2         
	//* 464  931:fconst_0        
	//* 465  932:fcmpl           
	//* 466  933:ifne            942
	//* 467  936:fload_3         
	//* 468  937:fconst_0        
	//* 469  938:fcmpl           
	//* 470  939:ifeq            953
	//* 471  942:aload_0         
	//* 472  943:fload_2         
	//* 473  944:f2i             
	//* 474  945:fload_3         
	//* 475  946:f2i             
	//* 476  947:invokevirtual   #2238 <Method boolean fling(int, int)>
	//* 477  950:ifne            958
				setScrollState(0);
	//  478  953:aload_0         
	//  479  954:iconst_0        
	//  480  955:invokevirtual   #691 <Method void setScrollState(int)>
			resetTouch();
	//  481  958:aload_0         
	//  482  959:invokespecial   #688 <Method void resetTouch()>
			break;

	//* 483  962:goto            973
		case 3: // '\003'
			cancelTouch();
	//  484  965:aload_0         
	//  485  966:invokespecial   #2118 <Method void cancelTouch()>
			i = ((int) (flag));
	//  486  969:iload           10
	//  487  971:istore          4
			break;

		case 4: // '\004'
			break;
		}
		if(i == 0)
	//* 488  973:iload           4
	//* 489  975:ifne            987
			mVelocityTracker.addMovement(motionevent1);
	//  490  978:aload_0         
	//  491  979:getfield        #1407 <Field VelocityTracker mVelocityTracker>
	//  492  982:aload           15
	//  493  984:invokevirtual   #2124 <Method void VelocityTracker.addMovement(MotionEvent)>
		motionevent1.recycle();
	//  494  987:aload           15
	//  495  989:invokevirtual   #2239 <Method void MotionEvent.recycle()>
		return true;
	//  496  992:iconst_1        
	//  497  993:ireturn         
	}

	void postAnimationRunner()
	{
		if(!mPostedAnimatorRunner && mIsAttached)
	//*   0    0:aload_0         
	//*   1    1:getfield        #434 <Field boolean mPostedAnimatorRunner>
	//*   2    4:ifne            27
	//*   3    7:aload_0         
	//*   4    8:getfield        #1990 <Field boolean mIsAttached>
	//*   5   11:ifeq            27
		{
			ViewCompat.postOnAnimation(((View) (this)), mItemAnimatorRunner);
	//    6   14:aload_0         
	//    7   15:aload_0         
	//    8   16:getfield        #447 <Field Runnable mItemAnimatorRunner>
	//    9   19:invokestatic    #2243 <Method void ViewCompat.postOnAnimation(View, Runnable)>
			mPostedAnimatorRunner = true;
	//   10   22:aload_0         
	//   11   23:iconst_1        
	//   12   24:putfield        #434 <Field boolean mPostedAnimatorRunner>
		}
	//   13   27:return          
	}

	void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo)
	{
		viewholder.setFlags(0, 8192);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:sipush          8192
	//    3    5:invokevirtual   #2246 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore())
	//*   4    8:aload_0         
	//*   5    9:getfield        #425 <Field RecyclerView$State mState>
	//*   6   12:getfield        #862 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*   7   15:ifeq            54
	//*   8   18:aload_1         
	//*   9   19:invokevirtual   #914 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  10   22:ifeq            54
	//*  11   25:aload_1         
	//*  12   26:invokevirtual   #917 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  13   29:ifne            54
	//*  14   32:aload_1         
	//*  15   33:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  16   36:ifne            54
		{
			long l = getChangedHolderKey(viewholder);
	//   17   39:aload_0         
	//   18   40:aload_1         
	//   19   41:invokevirtual   #921 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   20   44:lstore_3        
			mViewInfoStore.addToOldChangeHolders(l, viewholder);
	//   21   45:aload_0         
	//   22   46:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   23   49:lload_3         
	//   24   50:aload_1         
	//   25   51:invokevirtual   #925 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
		}
		mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//   26   54:aload_0         
	//   27   55:getfield        #370 <Field ViewInfoStore mViewInfoStore>
	//   28   58:aload_1         
	//   29   59:aload_2         
	//   30   60:invokevirtual   #911 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//   31   63:return          
	}

	void removeAndRecycleViews()
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          14
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2075 <Method void RecyclerView$ItemAnimator.endAnimations()>
		if(mLayout != null)
	//*   6   14:aload_0         
	//*   7   15:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   8   18:ifnull          43
		{
			mLayout.removeAndRecycleAllViews(mRecycler);
	//    9   21:aload_0         
	//   10   22:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   13   29:invokevirtual   #2249 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   14   32:aload_0         
	//   15   33:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   16   36:aload_0         
	//   17   37:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   18   40:invokevirtual   #1012 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		}
		mRecycler.clear();
	//   19   43:aload_0         
	//   20   44:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   21   47:invokevirtual   #2250 <Method void RecyclerView$Recycler.clear()>
	//   22   50:return          
	}

	boolean removeAnimatingView(View view)
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #844 <Method void eatRequestLayout()>
		boolean flag1 = mChildHelper.removeViewIfHidden(view);
	//    2    4:aload_0         
	//    3    5:getfield        #646 <Field ChildHelper mChildHelper>
	//    4    8:aload_1         
	//    5    9:invokevirtual   #2254 <Method boolean ChildHelper.removeViewIfHidden(View)>
	//    6   12:istore_3        
		if(flag1)
	//*   7   13:iload_3         
	//*   8   14:ifeq            38
		{
			view = ((View) (getChildViewHolderInt(view)));
	//    9   17:aload_1         
	//   10   18:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   21:astore_1        
			mRecycler.unscrapView(((ViewHolder) (view)));
	//   12   22:aload_0         
	//   13   23:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   14   26:aload_1         
	//   15   27:invokevirtual   #641 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			mRecycler.recycleViewHolderInternal(((ViewHolder) (view)));
	//   16   30:aload_0         
	//   17   31:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   18   34:aload_1         
	//   19   35:invokevirtual   #2257 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
		}
		boolean flag;
		if(!flag1)
	//*  20   38:iload_3         
	//*  21   39:ifne            47
			flag = true;
	//   22   42:iconst_1        
	//   23   43:istore_2        
		else
	//*  24   44:goto            49
			flag = false;
	//   25   47:iconst_0        
	//   26   48:istore_2        
		resumeRequestLayout(flag);
	//   27   49:aload_0         
	//   28   50:iload_2         
	//   29   51:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		return flag1;
	//   30   54:iload_3         
	//   31   55:ireturn         
	}

	protected void removeDetachedView(View view, boolean flag)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		if(viewholder != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          58
			if(viewholder.isTmpDetached())
	//*   5    9:aload_3         
	//*   6   10:invokevirtual   #644 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*   7   13:ifeq            23
				viewholder.clearTmpDetachFlag();
	//    8   16:aload_3         
	//    9   17:invokevirtual   #2261 <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
			else
	//*  10   20:goto            58
			if(!viewholder.shouldIgnore())
	//*  11   23:aload_3         
	//*  12   24:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  13   27:ifne            58
				throw new IllegalArgumentException((new StringBuilder()).append("Called removeDetachedView with a view which is not flagged as tmp detached.").append(((Object) (viewholder))).toString());
	//   14   30:new             #1270 <Class IllegalArgumentException>
	//   15   33:dup             
	//   16   34:new             #766 <Class StringBuilder>
	//   17   37:dup             
	//   18   38:invokespecial   #767 <Method void StringBuilder()>
	//   19   41:ldc2            #2263 <String "Called removeDetachedView with a view which is not flagged as tmp detached.">
	//   20   44:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   21   47:aload_3         
	//   22   48:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   23   51:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   24   54:invokespecial   #1276 <Method void IllegalArgumentException(String)>
	//   25   57:athrow          
		dispatchChildDetached(view);
	//   26   58:aload_0         
	//   27   59:aload_1         
	//   28   60:invokevirtual   #2265 <Method void dispatchChildDetached(View)>
		super.removeDetachedView(view, flag);
	//   29   63:aload_0         
	//   30   64:aload_1         
	//   31   65:iload_2         
	//   32   66:invokespecial   #2267 <Method void ViewGroup.removeDetachedView(View, boolean)>
	//   33   69:return          
	}

	public void removeItemDecoration(ItemDecoration itemdecoration)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #2270 <String "Cannot remove item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1489 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		mItemDecorations.remove(((Object) (itemdecoration)));
	//    7   17:aload_0         
	//    8   18:getfield        #390 <Field ArrayList mItemDecorations>
	//    9   21:aload_1         
	//   10   22:invokevirtual   #2272 <Method boolean ArrayList.remove(Object)>
	//   11   25:pop             
		if(mItemDecorations.isEmpty())
	//*  12   26:aload_0         
	//*  13   27:getfield        #390 <Field ArrayList mItemDecorations>
	//*  14   30:invokevirtual   #1492 <Method boolean ArrayList.isEmpty()>
	//*  15   33:ifeq            56
		{
			boolean flag;
			if(getOverScrollMode() == 2)
	//*  16   36:aload_0         
	//*  17   37:invokevirtual   #497 <Method int getOverScrollMode()>
	//*  18   40:iconst_2        
	//*  19   41:icmpne          49
				flag = true;
	//   20   44:iconst_1        
	//   21   45:istore_2        
			else
	//*  22   46:goto            51
				flag = false;
	//   23   49:iconst_0        
	//   24   50:istore_2        
			setWillNotDraw(flag);
	//   25   51:aload_0         
	//   26   52:iload_2         
	//   27   53:invokevirtual   #500 <Method void setWillNotDraw(boolean)>
		}
		markItemDecorInsetsDirty();
	//   28   56:aload_0         
	//   29   57:invokevirtual   #1502 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1505 <Method void requestLayout()>
	//   32   64:return          
	}

	public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mOnChildAttachStateListeners.remove(((Object) (onchildattachstatechangelistener)));
	//    4    8:aload_0         
	//    5    9:getfield        #1509 <Field List mOnChildAttachStateListeners>
	//    6   12:aload_1         
	//    7   13:invokeinterface #2274 <Method boolean List.remove(Object)>
	//    8   18:pop             
			return;
	//    9   19:return          
		}
	}

	public void removeOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.remove(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2272 <Method boolean ArrayList.remove(Object)>
	//    4    8:pop             
		if(mActiveOnItemTouchListener == onitemtouchlistener)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   7   13:aload_1         
	//*   8   14:if_acmpne       22
			mActiveOnItemTouchListener = null;
	//    9   17:aload_0         
	//   10   18:aconst_null     
	//   11   19:putfield        #1055 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   12   22:return          
	}

	public void removeOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1518 <Field List mScrollListeners>
	//*   2    4:ifnull          18
			mScrollListeners.remove(((Object) (onscrolllistener)));
	//    3    7:aload_0         
	//    4    8:getfield        #1518 <Field List mScrollListeners>
	//    5   11:aload_1         
	//    6   12:invokeinterface #2274 <Method boolean List.remove(Object)>
	//    7   17:pop             
	//    8   18:return          
	}

	void repositionShadowingViews()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #879 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          118
		{
			View view = mChildHelper.getChildAt(i);
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #883 <Method View ChildHelper.getChildAt(int)>
	//   13   23:astore          5
			Object obj = ((Object) (getChildViewHolder(view)));
	//   14   25:aload_0         
	//   15   26:aload           5
	//   16   28:invokevirtual   #638 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   31:astore          6
			if(obj == null || ((ViewHolder) (obj)).mShadowingHolder == null)
				continue;
	//   18   33:aload           6
	//   19   35:ifnull          111
	//   20   38:aload           6
	//   21   40:getfield        #678 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   22   43:ifnull          111
			obj = ((Object) (((ViewHolder) (obj)).mShadowingHolder.itemView));
	//   23   46:aload           6
	//   24   48:getfield        #678 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   25   51:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   26   54:astore          6
			int k = view.getLeft();
	//   27   56:aload           5
	//   28   58:invokevirtual   #1111 <Method int View.getLeft()>
	//   29   61:istore_3        
			int l = view.getTop();
	//   30   62:aload           5
	//   31   64:invokevirtual   #1120 <Method int View.getTop()>
	//   32   67:istore          4
			if(k != ((View) (obj)).getLeft() || l != ((View) (obj)).getTop())
	//*  33   69:iload_3         
	//*  34   70:aload           6
	//*  35   72:invokevirtual   #1111 <Method int View.getLeft()>
	//*  36   75:icmpne          88
	//*  37   78:iload           4
	//*  38   80:aload           6
	//*  39   82:invokevirtual   #1120 <Method int View.getTop()>
	//*  40   85:icmpeq          111
				((View) (obj)).layout(k, l, ((View) (obj)).getWidth() + k, ((View) (obj)).getHeight() + l);
	//   41   88:aload           6
	//   42   90:iload_3         
	//   43   91:iload           4
	//   44   93:aload           6
	//   45   95:invokevirtual   #1262 <Method int View.getWidth()>
	//   46   98:iload_3         
	//   47   99:iadd            
	//   48  100:aload           6
	//   49  102:invokevirtual   #1265 <Method int View.getHeight()>
	//   50  105:iload           4
	//   51  107:iadd            
	//   52  108:invokevirtual   #2280 <Method void View.layout(int, int, int, int)>
		}

	//   53  111:iload_1         
	//   54  112:iconst_1        
	//   55  113:iadd            
	//   56  114:istore_1        
	//*  57  115:goto            10
	//   58  118:return          
	}

	public void requestChildFocus(View view, View view1)
	{
		if(!mLayout.onRequestChildFocus(this, mState, view, view1) && view1 != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:aload_0         
	//*   3    5:aload_0         
	//*   4    6:getfield        #425 <Field RecyclerView$State mState>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:invokevirtual   #2285 <Method boolean RecyclerView$LayoutManager.onRequestChildFocus(RecyclerView, RecyclerView$State, View, View)>
	//*   8   14:ifne            27
	//*   9   17:aload_2         
	//*  10   18:ifnull          27
			requestChildOnScreen(view, view1);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:aload_2         
	//   14   24:invokespecial   #1851 <Method void requestChildOnScreen(View, View)>
		super.requestChildFocus(view, view1);
	//   15   27:aload_0         
	//   16   28:aload_1         
	//   17   29:aload_2         
	//   18   30:invokespecial   #2287 <Method void ViewGroup.requestChildFocus(View, View)>
	//   19   33:return          
	}

	public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean flag)
	{
		return mLayout.requestChildRectangleOnScreen(this, view, rect, flag);
	//    0    0:aload_0         
	//    1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_0         
	//    3    5:aload_1         
	//    4    6:aload_2         
	//    5    7:iload_3         
	//    6    8:invokevirtual   #2291 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean)>
	//    7   11:ireturn         
	}

	public void requestDisallowInterceptTouchEvent(boolean flag)
	{
		int j = mOnItemTouchListeners.size();
	//    0    0:aload_0         
	//    1    1:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//    2    4:invokevirtual   #1062 <Method int ArrayList.size()>
	//    3    7:istore_3        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          39
			((OnItemTouchListener)mOnItemTouchListeners.get(i)).onRequestDisallowInterceptTouchEvent(flag);
	//    9   15:aload_0         
	//   10   16:getfield        #392 <Field ArrayList mOnItemTouchListeners>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #1065 <Method Object ArrayList.get(int)>
	//   13   23:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   14   26:iload_1         
	//   15   27:invokeinterface #2294 <Method void RecyclerView$OnItemTouchListener.onRequestDisallowInterceptTouchEvent(boolean)>

	//   16   32:iload_2         
	//   17   33:iconst_1        
	//   18   34:iadd            
	//   19   35:istore_2        
	//*  20   36:goto            10
		super.requestDisallowInterceptTouchEvent(flag);
	//   21   39:aload_0         
	//   22   40:iload_1         
	//   23   41:invokespecial   #2295 <Method void ViewGroup.requestDisallowInterceptTouchEvent(boolean)>
	//   24   44:return          
	}

	public void requestLayout()
	{
		if(mEatRequestLayout == 0 && !mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #394 <Field int mEatRequestLayout>
	//*   2    4:ifne            19
	//*   3    7:aload_0         
	//*   4    8:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   5   11:ifne            19
		{
			super.requestLayout();
	//    6   14:aload_0         
	//    7   15:invokespecial   #2296 <Method void ViewGroup.requestLayout()>
			return;
	//    8   18:return          
		} else
		{
			mLayoutRequestEaten = true;
	//    9   19:aload_0         
	//   10   20:iconst_1        
	//   11   21:putfield        #1610 <Field boolean mLayoutRequestEaten>
			return;
	//   12   24:return          
		}
	}

	void resumeRequestLayout(boolean flag)
	{
		if(mEatRequestLayout < 1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #394 <Field int mEatRequestLayout>
	//*   2    4:iconst_1        
	//*   3    5:icmpge          13
			mEatRequestLayout = 1;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #394 <Field int mEatRequestLayout>
		if(!flag)
	//*   7   13:iload_1         
	//*   8   14:ifne            22
			mLayoutRequestEaten = false;
	//    9   17:aload_0         
	//   10   18:iconst_0        
	//   11   19:putfield        #1610 <Field boolean mLayoutRequestEaten>
		if(mEatRequestLayout == 1)
	//*  12   22:aload_0         
	//*  13   23:getfield        #394 <Field int mEatRequestLayout>
	//*  14   26:iconst_1        
	//*  15   27:icmpne          78
		{
			if(flag && mLayoutRequestEaten && !mLayoutFrozen && mLayout != null && mAdapter != null)
	//*  16   30:iload_1         
	//*  17   31:ifeq            66
	//*  18   34:aload_0         
	//*  19   35:getfield        #1610 <Field boolean mLayoutRequestEaten>
	//*  20   38:ifeq            66
	//*  21   41:aload_0         
	//*  22   42:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  23   45:ifne            66
	//*  24   48:aload_0         
	//*  25   49:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  26   52:ifnull          66
	//*  27   55:aload_0         
	//*  28   56:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  29   59:ifnull          66
				dispatchLayout();
	//   30   62:aload_0         
	//   31   63:invokevirtual   #1599 <Method void dispatchLayout()>
			if(!mLayoutFrozen)
	//*  32   66:aload_0         
	//*  33   67:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  34   70:ifne            78
				mLayoutRequestEaten = false;
	//   35   73:aload_0         
	//   36   74:iconst_0        
	//   37   75:putfield        #1610 <Field boolean mLayoutRequestEaten>
		}
		mEatRequestLayout = mEatRequestLayout - 1;
	//   38   78:aload_0         
	//   39   79:aload_0         
	//   40   80:getfield        #394 <Field int mEatRequestLayout>
	//   41   83:iconst_1        
	//   42   84:isub            
	//   43   85:putfield        #394 <Field int mEatRequestLayout>
	//   44   88:return          
	}

	void saveOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.saveOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #2299 <Method void RecyclerView$ViewHolder.saveOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
	//   25   45:return          
	}

	public void scrollBy(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #165 <String "RecyclerView">
	//    4    9:ldc2            #2302 <String "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1246 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  10   21:ifeq            25
			return;
	//   11   24:return          
		boolean flag = mLayout.canScrollHorizontally();
	//   12   25:aload_0         
	//   13   26:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   15   32:istore_3        
		boolean flag1 = mLayout.canScrollVertically();
	//   16   33:aload_0         
	//   17   34:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   18   37:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   19   40:istore          4
		if(flag || flag1)
	//*  20   42:iload_3         
	//*  21   43:ifne            51
	//*  22   46:iload           4
	//*  23   48:ifeq            78
		{
			if(!flag)
	//*  24   51:iload_3         
	//*  25   52:ifeq            58
	//*  26   55:goto            60
				i = 0;
	//   27   58:iconst_0        
	//   28   59:istore_1        
			if(!flag1)
	//*  29   60:iload           4
	//*  30   62:ifeq            68
	//*  31   65:goto            70
				j = 0;
	//   32   68:iconst_0        
	//   33   69:istore_2        
			scrollByInternal(i, j, ((MotionEvent) (null)));
	//   34   70:aload_0         
	//   35   71:iload_1         
	//   36   72:iload_2         
	//   37   73:aconst_null     
	//   38   74:invokevirtual   #2114 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   39   77:pop             
		}
	//   40   78:return          
	}

	boolean scrollByInternal(int i, int j, MotionEvent motionevent)
	{
		int k = 0;
	//    0    0:iconst_0        
	//    1    1:istore          4
		boolean flag3 = false;
	//    2    3:iconst_0        
	//    3    4:istore          11
		int i1 = 0;
	//    4    6:iconst_0        
	//    5    7:istore          6
		boolean flag1 = false;
	//    6    9:iconst_0        
	//    7   10:istore          9
		int l = 0;
	//    8   12:iconst_0        
	//    9   13:istore          5
		boolean flag2 = false;
	//   10   15:iconst_0        
	//   11   16:istore          10
		int j1 = 0;
	//   12   18:iconst_0        
	//   13   19:istore          7
		boolean flag = false;
	//   14   21:iconst_0        
	//   15   22:istore          8
		consumePendingUpdateOperations();
	//   16   24:aload_0         
	//   17   25:invokevirtual   #1843 <Method void consumePendingUpdateOperations()>
		if(mAdapter != null)
	//*  18   28:aload_0         
	//*  19   29:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  20   32:ifnull          136
		{
			eatRequestLayout();
	//   21   35:aload_0         
	//   22   36:invokevirtual   #844 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//   23   39:aload_0         
	//   24   40:invokevirtual   #850 <Method void onEnterLayoutOrScroll()>
			TraceCompat.beginSection("RV Scroll");
	//   25   43:ldc1            #191 <String "RV Scroll">
	//   26   45:invokestatic    #1596 <Method void TraceCompat.beginSection(String)>
			k = ((int) (flag3));
	//   27   48:iload           11
	//   28   50:istore          4
			l = ((int) (flag2));
	//   29   52:iload           10
	//   30   54:istore          5
			if(i != 0)
	//*  31   56:iload_1         
	//*  32   57:ifeq            84
			{
				l = mLayout.scrollHorizontallyBy(i, mRecycler, mState);
	//   33   60:aload_0         
	//   34   61:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   35   64:iload_1         
	//   36   65:aload_0         
	//   37   66:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   38   69:aload_0         
	//   39   70:getfield        #425 <Field RecyclerView$State mState>
	//   40   73:invokevirtual   #2306 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   41   76:istore          5
				k = i - l;
	//   42   78:iload_1         
	//   43   79:iload           5
	//   44   81:isub            
	//   45   82:istore          4
			}
			i1 = ((int) (flag1));
	//   46   84:iload           9
	//   47   86:istore          6
			j1 = ((int) (flag));
	//   48   88:iload           8
	//   49   90:istore          7
			if(j != 0)
	//*  50   92:iload_2         
	//*  51   93:ifeq            120
			{
				j1 = mLayout.scrollVerticallyBy(j, mRecycler, mState);
	//   52   96:aload_0         
	//   53   97:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   54  100:iload_2         
	//   55  101:aload_0         
	//   56  102:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   57  105:aload_0         
	//   58  106:getfield        #425 <Field RecyclerView$State mState>
	//   59  109:invokevirtual   #2309 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   60  112:istore          7
				i1 = j - j1;
	//   61  114:iload_2         
	//   62  115:iload           7
	//   63  117:isub            
	//   64  118:istore          6
			}
			TraceCompat.endSection();
	//   65  120:invokestatic    #1602 <Method void TraceCompat.endSection()>
			repositionShadowingViews();
	//   66  123:aload_0         
	//   67  124:invokevirtual   #2311 <Method void repositionShadowingViews()>
			onExitLayoutOrScroll();
	//   68  127:aload_0         
	//   69  128:invokevirtual   #957 <Method void onExitLayoutOrScroll()>
			resumeRequestLayout(false);
	//   70  131:aload_0         
	//   71  132:iconst_0        
	//   72  133:invokevirtual   #960 <Method void resumeRequestLayout(boolean)>
		}
		if(!mItemDecorations.isEmpty())
	//*  73  136:aload_0         
	//*  74  137:getfield        #390 <Field ArrayList mItemDecorations>
	//*  75  140:invokevirtual   #1492 <Method boolean ArrayList.isEmpty()>
	//*  76  143:ifne            150
			invalidate();
	//   77  146:aload_0         
	//   78  147:invokevirtual   #2314 <Method void invalidate()>
		if(dispatchNestedScroll(l, j1, k, i1, mScrollOffset))
	//*  79  150:aload_0         
	//*  80  151:iload           5
	//*  81  153:iload           7
	//*  82  155:iload           4
	//*  83  157:iload           6
	//*  84  159:aload_0         
	//*  85  160:getfield        #438 <Field int[] mScrollOffset>
	//*  86  163:invokevirtual   #2315 <Method boolean dispatchNestedScroll(int, int, int, int, int[])>
	//*  87  166:ifeq            260
		{
			mLastTouchX = mLastTouchX - mScrollOffset[0];
	//   88  169:aload_0         
	//   89  170:aload_0         
	//   90  171:getfield        #1292 <Field int mLastTouchX>
	//   91  174:aload_0         
	//   92  175:getfield        #438 <Field int[] mScrollOffset>
	//   93  178:iconst_0        
	//   94  179:iaload          
	//   95  180:isub            
	//   96  181:putfield        #1292 <Field int mLastTouchX>
			mLastTouchY = mLastTouchY - mScrollOffset[1];
	//   97  184:aload_0         
	//   98  185:aload_0         
	//   99  186:getfield        #1299 <Field int mLastTouchY>
	//  100  189:aload_0         
	//  101  190:getfield        #438 <Field int[] mScrollOffset>
	//  102  193:iconst_1        
	//  103  194:iaload          
	//  104  195:isub            
	//  105  196:putfield        #1299 <Field int mLastTouchY>
			if(motionevent != null)
	//* 106  199:aload_3         
	//* 107  200:ifnull          221
				motionevent.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  108  203:aload_3         
	//  109  204:aload_0         
	//  110  205:getfield        #438 <Field int[] mScrollOffset>
	//  111  208:iconst_0        
	//  112  209:iaload          
	//  113  210:i2f             
	//  114  211:aload_0         
	//  115  212:getfield        #438 <Field int[] mScrollOffset>
	//  116  215:iconst_1        
	//  117  216:iaload          
	//  118  217:i2f             
	//  119  218:invokevirtual   #2222 <Method void MotionEvent.offsetLocation(float, float)>
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  120  221:aload_0         
	//  121  222:getfield        #442 <Field int[] mNestedOffsets>
	//  122  225:astore_3        
			motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  123  226:aload_3         
	//  124  227:iconst_0        
	//  125  228:aload_3         
	//  126  229:iconst_0        
	//  127  230:iaload          
	//  128  231:aload_0         
	//  129  232:getfield        #438 <Field int[] mScrollOffset>
	//  130  235:iconst_0        
	//  131  236:iaload          
	//  132  237:iadd            
	//  133  238:iastore         
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  134  239:aload_0         
	//  135  240:getfield        #442 <Field int[] mNestedOffsets>
	//  136  243:astore_3        
			motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  137  244:aload_3         
	//  138  245:iconst_1        
	//  139  246:aload_3         
	//  140  247:iconst_1        
	//  141  248:iaload          
	//  142  249:aload_0         
	//  143  250:getfield        #438 <Field int[] mScrollOffset>
	//  144  253:iconst_1        
	//  145  254:iaload          
	//  146  255:iadd            
	//  147  256:iastore         
		} else
	//* 148  257:goto            296
		if(getOverScrollMode() != 2)
	//* 149  260:aload_0         
	//* 150  261:invokevirtual   #497 <Method int getOverScrollMode()>
	//* 151  264:iconst_2        
	//* 152  265:icmpeq          296
		{
			if(motionevent != null)
	//* 153  268:aload_3         
	//* 154  269:ifnull          290
				pullGlows(motionevent.getX(), k, motionevent.getY(), i1);
	//  155  272:aload_0         
	//  156  273:aload_3         
	//  157  274:invokevirtual   #2131 <Method float MotionEvent.getX()>
	//  158  277:iload           4
	//  159  279:i2f             
	//  160  280:aload_3         
	//  161  281:invokevirtual   #2133 <Method float MotionEvent.getY()>
	//  162  284:iload           6
	//  163  286:i2f             
	//  164  287:invokespecial   #2317 <Method void pullGlows(float, float, float, float)>
			considerReleasingGlowsOnScroll(i, j);
	//  165  290:aload_0         
	//  166  291:iload_1         
	//  167  292:iload_2         
	//  168  293:invokevirtual   #2319 <Method void considerReleasingGlowsOnScroll(int, int)>
		}
		if(l != 0 || j1 != 0)
	//* 169  296:iload           5
	//* 170  298:ifne            306
	//* 171  301:iload           7
	//* 172  303:ifeq            314
			dispatchOnScrolled(l, j1);
	//  173  306:aload_0         
	//  174  307:iload           5
	//  175  309:iload           7
	//  176  311:invokevirtual   #1040 <Method void dispatchOnScrolled(int, int)>
		if(!awakenScrollBars())
	//* 177  314:aload_0         
	//* 178  315:invokevirtual   #621 <Method boolean awakenScrollBars()>
	//* 179  318:ifne            325
			invalidate();
	//  180  321:aload_0         
	//  181  322:invokevirtual   #2314 <Method void invalidate()>
		return l != 0 || j1 != 0;
	//  182  325:iload           5
	//  183  327:ifne            335
	//  184  330:iload           7
	//  185  332:ifeq            337
	//  186  335:iconst_1        
	//  187  336:ireturn         
	//  188  337:iconst_0        
	//  189  338:ireturn         
	}

	public void scrollTo(int i, int j)
	{
		Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
	//    0    0:ldc1            #165 <String "RecyclerView">
	//    1    2:ldc2            #2322 <String "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead">
	//    2    5:invokestatic    #2324 <Method int Log.w(String, String)>
	//    3    8:pop             
	//    4    9:return          
	}

	public void scrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		stopScroll();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2078 <Method void stopScroll()>
		if(mLayout == null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   8   16:ifnonnull       29
		{
			Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    9   19:ldc1            #165 <String "RecyclerView">
	//   10   21:ldc2            #2326 <String "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   11   24:invokestatic    #1246 <Method int Log.e(String, String)>
	//   12   27:pop             
			return;
	//   13   28:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//   14   29:aload_0         
	//   15   30:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   16   33:iload_1         
	//   17   34:invokevirtual   #1998 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//   18   37:aload_0         
	//   19   38:invokevirtual   #621 <Method boolean awakenScrollBars()>
	//   20   41:pop             
			return;
	//   21   42:return          
		}
	}

	public void sendAccessibilityEventUnchecked(AccessibilityEvent accessibilityevent)
	{
		if(shouldDeferAccessibilityEvent(accessibilityevent))
	//*   0    0:aload_0         
	//*   1    1:aload_1         
	//*   2    2:invokevirtual   #2330 <Method boolean shouldDeferAccessibilityEvent(AccessibilityEvent)>
	//*   3    5:ifeq            9
		{
			return;
	//    4    8:return          
		} else
		{
			super.sendAccessibilityEventUnchecked(accessibilityevent);
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:invokespecial   #2331 <Method void ViewGroup.sendAccessibilityEventUnchecked(AccessibilityEvent)>
			return;
	//    8   14:return          
		}
	}

	public void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate recyclerviewaccessibilitydelegate)
	{
		mAccessibilityDelegate = recyclerviewaccessibilitydelegate;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1904 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
		ViewCompat.setAccessibilityDelegate(((View) (this)), ((android.support.v4.view.AccessibilityDelegateCompat) (mAccessibilityDelegate)));
	//    3    5:aload_0         
	//    4    6:aload_0         
	//    5    7:getfield        #1904 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    6   10:invokestatic    #2335 <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
	//    7   13:return          
	}

	public void setAdapter(Adapter adapter)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2340 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, false, true);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_0        
	//    6    8:iconst_1        
	//    7    9:invokespecial   #2342 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		requestLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1505 <Method void requestLayout()>
	//   10   16:return          
	}

	public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childdrawingordercallback)
	{
		if(childdrawingordercallback == mChildDrawingOrderCallback)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1884 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		mChildDrawingOrderCallback = childdrawingordercallback;
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:putfield        #1884 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
		boolean flag;
		if(mChildDrawingOrderCallback != null)
	//*   8   14:aload_0         
	//*   9   15:getfield        #1884 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*  10   18:ifnull          26
			flag = true;
	//   11   21:iconst_1        
	//   12   22:istore_2        
		else
	//*  13   23:goto            28
			flag = false;
	//   14   26:iconst_0        
	//   15   27:istore_2        
		setChildrenDrawingOrderEnabled(flag);
	//   16   28:aload_0         
	//   17   29:iload_2         
	//   18   30:invokevirtual   #2347 <Method void setChildrenDrawingOrderEnabled(boolean)>
	//   19   33:return          
	}

	boolean setChildImportantForAccessibilityInternal(ViewHolder viewholder, int i)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            25
		{
			viewholder.mPendingAccessibilityState = i;
	//    3    7:aload_1         
	//    4    8:iload_2         
	//    5    9:putfield        #1723 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			mPendingAccessibilityImportanceChange.add(((Object) (viewholder)));
	//    6   12:aload_0         
	//    7   13:getfield        #444 <Field List mPendingAccessibilityImportanceChange>
	//    8   16:aload_1         
	//    9   17:invokeinterface #1512 <Method boolean List.add(Object)>
	//   10   22:pop             
			return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
		} else
		{
			ViewCompat.setImportantForAccessibility(viewholder.itemView, i);
	//   13   25:aload_1         
	//   14   26:getfield        #628 <Field View RecyclerView$ViewHolder.itemView>
	//   15   29:iload_2         
	//   16   30:invokestatic    #520 <Method void ViewCompat.setImportantForAccessibility(View, int)>
			return true;
	//   17   33:iconst_1        
	//   18   34:ireturn         
		}
	}

	public void setClipToPadding(boolean flag)
	{
		if(flag != mClipToPadding)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #462 <Field boolean mClipToPadding>
	//*   3    5:icmpeq          12
			invalidateGlows();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2214 <Method void invalidateGlows()>
		mClipToPadding = flag;
	//    6   12:aload_0         
	//    7   13:iload_1         
	//    8   14:putfield        #462 <Field boolean mClipToPadding>
		super.setClipToPadding(flag);
	//    9   17:aload_0         
	//   10   18:iload_1         
	//   11   19:invokespecial   #2352 <Method void ViewGroup.setClipToPadding(boolean)>
		if(mFirstLayoutComplete)
	//*  12   22:aload_0         
	//*  13   23:getfield        #1318 <Field boolean mFirstLayoutComplete>
	//*  14   26:ifeq            33
			requestLayout();
	//   15   29:aload_0         
	//   16   30:invokevirtual   #1505 <Method void requestLayout()>
	//   17   33:return          
	}

	void setDataSetChangedAfterLayout()
	{
		if(mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		mDataSetHasChangedAfterLayout = true;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #396 <Field boolean mDataSetHasChangedAfterLayout>
		int j = mChildHelper.getUnfilteredChildCount();
	//    7   13:aload_0         
	//    8   14:getfield        #646 <Field ChildHelper mChildHelper>
	//    9   17:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//   10   20:istore_2        
		for(int i = 0; i < j; i++)
	//*  11   21:iconst_0        
	//*  12   22:istore_1        
	//*  13   23:iload_1         
	//*  14   24:iload_2         
	//*  15   25:icmpge          65
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   16   28:aload_0         
	//   17   29:getfield        #646 <Field ChildHelper mChildHelper>
	//   18   32:iload_1         
	//   19   33:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   20   36:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   21   39:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  22   40:aload_3         
	//*  23   41:ifnull          58
	//*  24   44:aload_3         
	//*  25   45:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  26   48:ifne            58
				viewholder.addFlags(512);
	//   27   51:aload_3         
	//   28   52:sipush          512
	//   29   55:invokevirtual   #2002 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   30   58:iload_1         
	//   31   59:iconst_1        
	//   32   60:iadd            
	//   33   61:istore_1        
	//*  34   62:goto            23
		mRecycler.setAdapterPositionsAsUnknown();
	//   35   65:aload_0         
	//   36   66:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   37   69:invokevirtual   #2356 <Method void RecyclerView$Recycler.setAdapterPositionsAsUnknown()>
		markKnownViewsInvalid();
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1458 <Method void markKnownViewsInvalid()>
	//   40   76:return          
	}

	public void setHasFixedSize(boolean flag)
	{
		mHasFixedSize = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #1947 <Field boolean mHasFixedSize>
	//    3    5:return          
	}

	public void setItemAnimator(ItemAnimator itemanimator)
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          22
		{
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2075 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mItemAnimator.setListener(((ItemAnimator.ItemAnimatorListener) (null)));
	//    6   14:aload_0         
	//    7   15:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    8   18:aconst_null     
	//    9   19:invokevirtual   #504 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		}
		mItemAnimator = itemanimator;
	//   10   22:aload_0         
	//   11   23:aload_1         
	//   12   24:putfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
		if(mItemAnimator != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  15   31:ifnull          45
			mItemAnimator.setListener(mItemAnimatorListener);
	//   16   34:aload_0         
	//   17   35:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   18   38:aload_0         
	//   19   39:getfield        #432 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//   20   42:invokevirtual   #504 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//   21   45:return          
	}

	public void setItemViewCacheSize(int i)
	{
		mRecycler.setViewCacheSize(i);
	//    0    0:aload_0         
	//    1    1:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2363 <Method void RecyclerView$Recycler.setViewCacheSize(int)>
	//    4    8:return          
	}

	public void setLayoutFrozen(boolean flag)
	{
		if(flag != mLayoutFrozen)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   3    5:icmpeq          87
		{
			assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
	//    4    8:aload_0         
	//    5    9:ldc2            #2365 <String "Do not setLayoutFrozen in layout or scroll">
	//    6   12:invokevirtual   #2366 <Method void assertNotInLayoutOrScroll(String)>
			if(!flag)
	//*   7   15:iload_1         
	//*   8   16:ifne            55
			{
				mLayoutFrozen = false;
	//    9   19:aload_0         
	//   10   20:iconst_0        
	//   11   21:putfield        #1772 <Field boolean mLayoutFrozen>
				if(mLayoutRequestEaten && mLayout != null && mAdapter != null)
	//*  12   24:aload_0         
	//*  13   25:getfield        #1610 <Field boolean mLayoutRequestEaten>
	//*  14   28:ifeq            49
	//*  15   31:aload_0         
	//*  16   32:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  17   35:ifnull          49
	//*  18   38:aload_0         
	//*  19   39:getfield        #870 <Field RecyclerView$Adapter mAdapter>
	//*  20   42:ifnull          49
					requestLayout();
	//   21   45:aload_0         
	//   22   46:invokevirtual   #1505 <Method void requestLayout()>
				mLayoutRequestEaten = false;
	//   23   49:aload_0         
	//   24   50:iconst_0        
	//   25   51:putfield        #1610 <Field boolean mLayoutRequestEaten>
				return;
	//   26   54:return          
			}
			long l = SystemClock.uptimeMillis();
	//   27   55:invokestatic    #2371 <Method long SystemClock.uptimeMillis()>
	//   28   58:lstore_2        
			onTouchEvent(MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0));
	//   29   59:aload_0         
	//   30   60:lload_2         
	//   31   61:lload_2         
	//   32   62:iconst_3        
	//   33   63:fconst_0        
	//   34   64:fconst_0        
	//   35   65:iconst_0        
	//   36   66:invokestatic    #2374 <Method MotionEvent MotionEvent.obtain(long, long, int, float, float, int)>
	//   37   69:invokevirtual   #2376 <Method boolean onTouchEvent(MotionEvent)>
	//   38   72:pop             
			mLayoutFrozen = true;
	//   39   73:aload_0         
	//   40   74:iconst_1        
	//   41   75:putfield        #1772 <Field boolean mLayoutFrozen>
			mIgnoreMotionEventTillDown = true;
	//   42   78:aload_0         
	//   43   79:iconst_1        
	//   44   80:putfield        #2129 <Field boolean mIgnoreMotionEventTillDown>
			stopScroll();
	//   45   83:aload_0         
	//   46   84:invokevirtual   #2078 <Method void stopScroll()>
		}
	//   47   87:return          
	}

	public void setLayoutManager(LayoutManager layoutmanager)
	{
		if(layoutmanager == mLayout)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		stopScroll();
	//    5    9:aload_0         
	//    6   10:invokevirtual   #2078 <Method void stopScroll()>
		if(mLayout != null)
	//*   7   13:aload_0         
	//*   8   14:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   9   17:ifnull          98
		{
			if(mItemAnimator != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  12   24:ifnull          34
				mItemAnimator.endAnimations();
	//   13   27:aload_0         
	//   14   28:getfield        #405 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   15   31:invokevirtual   #2075 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mLayout.removeAndRecycleAllViews(mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   20   42:invokevirtual   #2249 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   21   45:aload_0         
	//   22   46:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   23   49:aload_0         
	//   24   50:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   25   53:invokevirtual   #1012 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
			mRecycler.clear();
	//   26   56:aload_0         
	//   27   57:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   28   60:invokevirtual   #2250 <Method void RecyclerView$Recycler.clear()>
			if(mIsAttached)
	//*  29   63:aload_0         
	//*  30   64:getfield        #1990 <Field boolean mIsAttached>
	//*  31   67:ifeq            82
				mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   32   70:aload_0         
	//   33   71:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   34   74:aload_0         
	//   35   75:aload_0         
	//   36   76:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   37   79:invokevirtual   #2082 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
			mLayout.setRecyclerView(((RecyclerView) (null)));
	//   38   82:aload_0         
	//   39   83:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   40   86:aconst_null     
	//   41   87:invokevirtual   #2379 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			mLayout = null;
	//   42   90:aload_0         
	//   43   91:aconst_null     
	//   44   92:putfield        #933 <Field RecyclerView$LayoutManager mLayout>
		} else
	//*  45   95:goto            105
		{
			mRecycler.clear();
	//   46   98:aload_0         
	//   47   99:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   48  102:invokevirtual   #2250 <Method void RecyclerView$Recycler.clear()>
		}
		mChildHelper.removeAllViewsUnfiltered();
	//   49  105:aload_0         
	//   50  106:getfield        #646 <Field ChildHelper mChildHelper>
	//   51  109:invokevirtual   #2382 <Method void ChildHelper.removeAllViewsUnfiltered()>
		mLayout = layoutmanager;
	//   52  112:aload_0         
	//   53  113:aload_1         
	//   54  114:putfield        #933 <Field RecyclerView$LayoutManager mLayout>
		if(layoutmanager != null)
	//*  55  117:aload_1         
	//*  56  118:ifnull          192
		{
			if(layoutmanager.mRecyclerView != null)
	//*  57  121:aload_1         
	//*  58  122:getfield        #2386 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  59  125:ifnull          169
				throw new IllegalArgumentException((new StringBuilder()).append("LayoutManager ").append(((Object) (layoutmanager))).append(" is already attached to a RecyclerView: ").append(((Object) (layoutmanager.mRecyclerView))).toString());
	//   60  128:new             #1270 <Class IllegalArgumentException>
	//   61  131:dup             
	//   62  132:new             #766 <Class StringBuilder>
	//   63  135:dup             
	//   64  136:invokespecial   #767 <Method void StringBuilder()>
	//   65  139:ldc2            #2388 <String "LayoutManager ">
	//   66  142:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   67  145:aload_1         
	//   68  146:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   69  149:ldc2            #2390 <String " is already attached to a RecyclerView: ">
	//   70  152:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   71  155:aload_1         
	//   72  156:getfield        #2386 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//   73  159:invokevirtual   #1229 <Method StringBuilder StringBuilder.append(Object)>
	//   74  162:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   75  165:invokespecial   #1276 <Method void IllegalArgumentException(String)>
	//   76  168:athrow          
			mLayout.setRecyclerView(this);
	//   77  169:aload_0         
	//   78  170:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   79  173:aload_0         
	//   80  174:invokevirtual   #2379 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			if(mIsAttached)
	//*  81  177:aload_0         
	//*  82  178:getfield        #1990 <Field boolean mIsAttached>
	//*  83  181:ifeq            192
				mLayout.dispatchAttachedToWindow(this);
	//   84  184:aload_0         
	//   85  185:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   86  188:aload_0         
	//   87  189:invokevirtual   #2037 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
		}
		mRecycler.updateViewCacheSize();
	//   88  192:aload_0         
	//   89  193:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   90  196:invokevirtual   #1031 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		requestLayout();
	//   91  199:aload_0         
	//   92  200:invokevirtual   #1505 <Method void requestLayout()>
	//   93  203:return          
	}

	public void setNestedScrollingEnabled(boolean flag)
	{
		getScrollingChildHelper().setNestedScrollingEnabled(flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2391 <Method void NestedScrollingChildHelper.setNestedScrollingEnabled(boolean)>
	//    4    8:return          
	}

	public void setOnFlingListener(OnFlingListener onflinglistener)
	{
		mOnFlingListener = onflinglistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1818 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    3    5:return          
	}

	public void setOnScrollListener(OnScrollListener onscrolllistener)
	{
		mScrollListener = onscrolllistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1703 <Field RecyclerView$OnScrollListener mScrollListener>
	//    3    5:return          
	}

	public void setPreserveFocusAfterLayout(boolean flag)
	{
		mPreserveFocusAfterLayout = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #414 <Field boolean mPreserveFocusAfterLayout>
	//    3    5:return          
	}

	public void setRecycledViewPool(RecycledViewPool recycledviewpool)
	{
		mRecycler.setRecycledViewPool(recycledviewpool);
	//    0    0:aload_0         
	//    1    1:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2399 <Method void RecyclerView$Recycler.setRecycledViewPool(RecyclerView$RecycledViewPool)>
	//    4    8:return          
	}

	public void setRecyclerListener(RecyclerListener recyclerlistener)
	{
		mRecyclerListener = recyclerlistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #2403 <Field RecyclerView$RecyclerListener mRecyclerListener>
	//    3    5:return          
	}

	void setScrollState(int i)
	{
		if(i == mScrollState)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #407 <Field int mScrollState>
	//*   3    5:icmpne          9
			return;
	//    4    8:return          
		mScrollState = i;
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:putfield        #407 <Field int mScrollState>
		if(i != 2)
	//*   8   14:iload_1         
	//*   9   15:iconst_2        
	//*  10   16:icmpeq          23
			stopScrollersInternal();
	//   11   19:aload_0         
	//   12   20:invokespecial   #2405 <Method void stopScrollersInternal()>
		dispatchOnScrollStateChanged(i);
	//   13   23:aload_0         
	//   14   24:iload_1         
	//   15   25:invokevirtual   #2407 <Method void dispatchOnScrollStateChanged(int)>
	//   16   28:return          
	}

	public void setScrollingTouchSlop(int i)
	{
		ViewConfiguration viewconfiguration = ViewConfiguration.get(getContext());
	//    0    0:aload_0         
	//    1    1:invokevirtual   #524 <Method Context getContext()>
	//    2    4:invokestatic    #478 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//    3    7:astore_2        
		switch(i)
	//*   4    8:iload_1         
		{
	//*   5    9:lookupswitch    2: default 36
	//	               0: 68
	//	               1: 77
		default:
			Log.w("RecyclerView", (new StringBuilder()).append("setScrollingTouchSlop(): bad argument constant ").append(i).append("; using default value").toString());
	//    6   36:ldc1            #165 <String "RecyclerView">
	//    7   38:new             #766 <Class StringBuilder>
	//    8   41:dup             
	//    9   42:invokespecial   #767 <Method void StringBuilder()>
	//   10   45:ldc2            #2410 <String "setScrollingTouchSlop(): bad argument constant ">
	//   11   48:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   12   51:iload_1         
	//   13   52:invokevirtual   #1275 <Method StringBuilder StringBuilder.append(int)>
	//   14   55:ldc2            #2412 <String "; using default value">
	//   15   58:invokevirtual   #774 <Method StringBuilder StringBuilder.append(String)>
	//   16   61:invokevirtual   #779 <Method String StringBuilder.toString()>
	//   17   64:invokestatic    #2324 <Method int Log.w(String, String)>
	//   18   67:pop             
			// fall through

		case 0: // '\0'
			mTouchSlop = viewconfiguration.getScaledTouchSlop();
	//   19   68:aload_0         
	//   20   69:aload_2         
	//   21   70:invokevirtual   #482 <Method int ViewConfiguration.getScaledTouchSlop()>
	//   22   73:putfield        #484 <Field int mTouchSlop>
			return;
	//   23   76:return          

		case 1: // '\001'
			mTouchSlop = viewconfiguration.getScaledPagingTouchSlop();
	//   24   77:aload_0         
	//   25   78:aload_2         
	//   26   79:invokevirtual   #2415 <Method int ViewConfiguration.getScaledPagingTouchSlop()>
	//   27   82:putfield        #484 <Field int mTouchSlop>
			break;
		}
	//   28   85:return          
	}

	public void setViewCacheExtension(ViewCacheExtension viewcacheextension)
	{
		mRecycler.setViewCacheExtension(viewcacheextension);
	//    0    0:aload_0         
	//    1    1:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2419 <Method void RecyclerView$Recycler.setViewCacheExtension(RecyclerView$ViewCacheExtension)>
	//    4    8:return          
	}

	boolean shouldDeferAccessibilityEvent(AccessibilityEvent accessibilityevent)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1530 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            38
		{
			int i = 0;
	//    3    7:iconst_0        
	//    4    8:istore_2        
			if(accessibilityevent != null)
	//*   5    9:aload_1         
	//*   6   10:ifnull          18
				i = AccessibilityEventCompat.getContentChangeTypes(accessibilityevent);
	//    7   13:aload_1         
	//    8   14:invokestatic    #2423 <Method int AccessibilityEventCompat.getContentChangeTypes(AccessibilityEvent)>
	//    9   17:istore_2        
			int j = i;
	//   10   18:iload_2         
	//   11   19:istore_3        
			if(i == 0)
	//*  12   20:iload_2         
	//*  13   21:ifne            26
				j = 0;
	//   14   24:iconst_0        
	//   15   25:istore_3        
			mEatenAccessibilityChangeFlags = mEatenAccessibilityChangeFlags | j;
	//   16   26:aload_0         
	//   17   27:aload_0         
	//   18   28:getfield        #812 <Field int mEatenAccessibilityChangeFlags>
	//   19   31:iload_3         
	//   20   32:ior             
	//   21   33:putfield        #812 <Field int mEatenAccessibilityChangeFlags>
			return true;
	//   22   36:iconst_1        
	//   23   37:ireturn         
		} else
		{
			return false;
	//   24   38:iconst_0        
	//   25   39:ireturn         
		}
	}

	public void smoothScrollBy(int i, int j)
	{
		smoothScrollBy(i, j, ((Interpolator) (null)));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:aconst_null     
	//    4    4:invokevirtual   #2427 <Method void smoothScrollBy(int, int, Interpolator)>
	//    5    7:return          
	}

	public void smoothScrollBy(int i, int j, Interpolator interpolator)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #165 <String "RecyclerView">
	//    4    9:ldc2            #2429 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1246 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1772 <Field boolean mLayoutFrozen>
	//*  10   21:ifeq            25
			return;
	//   11   24:return          
		if(!mLayout.canScrollHorizontally())
	//*  12   25:aload_0         
	//*  13   26:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  14   29:invokevirtual   #1568 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  15   32:ifne            37
			i = 0;
	//   16   35:iconst_0        
	//   17   36:istore_1        
		if(!mLayout.canScrollVertically())
	//*  18   37:aload_0         
	//*  19   38:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*  20   41:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  21   44:ifne            49
			j = 0;
	//   22   47:iconst_0        
	//   23   48:istore_2        
		if(i != 0 || j != 0)
	//*  24   49:iload_1         
	//*  25   50:ifne            57
	//*  26   53:iload_2         
	//*  27   54:ifeq            67
			mViewFlinger.smoothScrollBy(i, j, interpolator);
	//   28   57:aload_0         
	//   29   58:getfield        #417 <Field RecyclerView$ViewFlinger mViewFlinger>
	//   30   61:iload_1         
	//   31   62:iload_2         
	//   32   63:aload_3         
	//   33   64:invokevirtual   #2430 <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, Interpolator)>
	//   34   67:return          
	}

	public void smoothScrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1772 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		if(mLayout == null)
	//*   4    8:aload_0         
	//*   5    9:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//*   6   12:ifnonnull       25
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   15:ldc1            #165 <String "RecyclerView">
	//    8   17:ldc2            #2429 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   20:invokestatic    #1246 <Method int Log.e(String, String)>
	//   10   23:pop             
			return;
	//   11   24:return          
		} else
		{
			mLayout.smoothScrollToPosition(this, mState, i);
	//   12   25:aload_0         
	//   13   26:getfield        #933 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:aload_0         
	//   15   30:aload_0         
	//   16   31:getfield        #425 <Field RecyclerView$State mState>
	//   17   34:iload_1         
	//   18   35:invokevirtual   #2434 <Method void RecyclerView$LayoutManager.smoothScrollToPosition(RecyclerView, RecyclerView$State, int)>
			return;
	//   19   38:return          
		}
	}

	public boolean startNestedScroll(int i)
	{
		return getScrollingChildHelper().startNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2435 <Method boolean NestedScrollingChildHelper.startNestedScroll(int)>
	//    4    8:ireturn         
	}

	public void stopNestedScroll()
	{
		getScrollingChildHelper().stopNestedScroll();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1682 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2436 <Method void NestedScrollingChildHelper.stopNestedScroll()>
	//    3    7:return          
	}

	public void stopScroll()
	{
		setScrollState(0);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #691 <Method void setScrollState(int)>
		stopScrollersInternal();
	//    3    5:aload_0         
	//    4    6:invokespecial   #2405 <Method void stopScrollersInternal()>
	//    5    9:return          
	}

	public void swapAdapter(Adapter adapter, boolean flag)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2340 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, true, flag);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_1        
	//    6    8:iload_2         
	//    7    9:invokespecial   #2342 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		setDataSetChangedAfterLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #2440 <Method void setDataSetChangedAfterLayout()>
		requestLayout();
	//   10   16:aload_0         
	//   11   17:invokevirtual   #1505 <Method void requestLayout()>
	//   12   20:return          
	}

	void viewRangeUpdate(int i, int j, Object obj)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #646 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1554 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          106
		{
			View view = mChildHelper.getUnfilteredChildAt(k);
	//    9   19:aload_0         
	//   10   20:getfield        #646 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1557 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:astore          6
			ViewHolder viewholder = getChildViewHolderInt(view);
	//   14   30:aload           6
	//   15   32:invokestatic    #886 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   35:astore          7
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i && viewholder.mPosition < i + j)
	//*  17   37:aload           7
	//*  18   39:ifnull          97
	//*  19   42:aload           7
	//*  20   44:invokevirtual   #889 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   47:ifeq            53
	//*  22   50:goto            97
	//*  23   53:aload           7
	//*  24   55:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  25   58:iload_1         
	//*  26   59:icmplt          97
	//*  27   62:aload           7
	//*  28   64:getfield        #1808 <Field int RecyclerView$ViewHolder.mPosition>
	//*  29   67:iload_1         
	//*  30   68:iload_2         
	//*  31   69:iadd            
	//*  32   70:icmpge          97
			{
				viewholder.addFlags(2);
	//   33   73:aload           7
	//   34   75:iconst_2        
	//   35   76:invokevirtual   #2002 <Method void RecyclerView$ViewHolder.addFlags(int)>
				viewholder.addChangePayload(obj);
	//   36   79:aload           7
	//   37   81:aload_3         
	//   38   82:invokevirtual   #2445 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				((LayoutParams)view.getLayoutParams()).mInsetsDirty = true;
	//   39   85:aload           6
	//   40   87:invokevirtual   #650 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   41   90:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   42   93:iconst_1        
	//   43   94:putfield        #1398 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}
		}

	//   44   97:iload           4
	//   45   99:iconst_1        
	//   46  100:iadd            
	//   47  101:istore          4
	//*  48  103:goto            12
		mRecycler.viewRangeUpdate(i, j);
	//   49  106:aload_0         
	//   50  107:getfield        #365 <Field RecyclerView$Recycler mRecycler>
	//   51  110:iload_1         
	//   52  111:iload_2         
	//   53  112:invokevirtual   #2447 <Method void RecyclerView$Recycler.viewRangeUpdate(int, int)>
	//   54  115:return          
	}

	static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC;
	private static final boolean ALLOW_THREAD_GAP_WORK;
	private static final int CLIP_TO_PADDING_ATTR[] = {
		0x10100eb
	};
	static final boolean DEBUG = false;
	static final boolean DISPATCH_TEMP_DETACH = false;
	private static final boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION;
	static final boolean FORCE_INVALIDATE_DISPLAY_LIST;
	static final long FOREVER_NS = 0xffffffffL;
	public static final int HORIZONTAL = 0;
	private static final boolean IGNORE_DETACHED_FOCUSED_CHILD;
	private static final int INVALID_POINTER = -1;
	public static final int INVALID_TYPE = -1;
	private static final Class LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE[];
	static final int MAX_SCROLL_DURATION = 2000;
	private static final int NESTED_SCROLLING_ATTRS[] = {
		0x1010436
	};
	public static final long NO_ID = -1L;
	public static final int NO_POSITION = -1;
	static final boolean POST_UPDATES_ON_ANIMATION;
	public static final int SCROLL_STATE_DRAGGING = 1;
	public static final int SCROLL_STATE_IDLE = 0;
	public static final int SCROLL_STATE_SETTLING = 2;
	static final String TAG = "RecyclerView";
	public static final int TOUCH_SLOP_DEFAULT = 0;
	public static final int TOUCH_SLOP_PAGING = 1;
	static final String TRACE_BIND_VIEW_TAG = "RV OnBindView";
	static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
	private static final String TRACE_HANDLE_ADAPTER_UPDATES_TAG = "RV PartialInvalidate";
	static final String TRACE_NESTED_PREFETCH_TAG = "RV Nested Prefetch";
	private static final String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = "RV FullInvalidate";
	private static final String TRACE_ON_LAYOUT_TAG = "RV OnLayout";
	static final String TRACE_PREFETCH_TAG = "RV Prefetch";
	static final String TRACE_SCROLL_TAG = "RV Scroll";
	static final boolean VERBOSE_TRACING = false;
	public static final int VERTICAL = 1;
	static final Interpolator sQuinticInterpolator = new Interpolator() {

		public float getInterpolation(float f)
		{
			f--;
		//    0    0:fload_1         
		//    1    1:fconst_1        
		//    2    2:fsub            
		//    3    3:fstore_1        
			return f * f * f * f * f + 1.0F;
		//    4    4:fload_1         
		//    5    5:fload_1         
		//    6    6:fmul            
		//    7    7:fload_1         
		//    8    8:fmul            
		//    9    9:fload_1         
		//   10   10:fmul            
		//   11   11:fload_1         
		//   12   12:fmul            
		//   13   13:fconst_1        
		//   14   14:fadd            
		//   15   15:freturn         
		}

	}
;
	RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
	private final AccessibilityManager mAccessibilityManager;
	private OnItemTouchListener mActiveOnItemTouchListener;
	Adapter mAdapter;
	AdapterHelper mAdapterHelper;
	boolean mAdapterUpdateDuringMeasure;
	private EdgeEffect mBottomGlow;
	private ChildDrawingOrderCallback mChildDrawingOrderCallback;
	ChildHelper mChildHelper;
	boolean mClipToPadding;
	boolean mDataSetHasChangedAfterLayout;
	private int mDispatchScrollCounter;
	protected int mEatRequestLayout;
	private int mEatenAccessibilityChangeFlags;
	boolean mEnableFastScroller;
	boolean mFirstLayoutComplete;
	GapWorker mGapWorker;
	boolean mHasFixedSize;
	private boolean mIgnoreMotionEventTillDown;
	private int mInitialTouchX;
	private int mInitialTouchY;
	boolean mIsAttached;
	ItemAnimator mItemAnimator;
	private ItemAnimator.ItemAnimatorListener mItemAnimatorListener;
	private Runnable mItemAnimatorRunner = new Runnable() {

		public void run()
		{
			if(mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #14  <Field RecyclerView this$0>
		//*   2    4:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          20
				mItemAnimator.runPendingAnimations();
		//    4   10:aload_0         
		//    5   11:getfield        #14  <Field RecyclerView this$0>
		//    6   14:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:invokevirtual   #28  <Method void RecyclerView$ItemAnimator.runPendingAnimations()>
			mPostedAnimatorRunner = false;
		//    8   20:aload_0         
		//    9   21:getfield        #14  <Field RecyclerView this$0>
		//   10   24:iconst_0        
		//   11   25:putfield        #32  <Field boolean RecyclerView.mPostedAnimatorRunner>
		//   12   28:return          
		}

		final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
	}
;
	final ArrayList mItemDecorations;
	boolean mItemsAddedOrRemoved;
	boolean mItemsChanged;
	private int mLastTouchX;
	private int mLastTouchY;
	LayoutManager mLayout;
	protected boolean mLayoutFrozen;
	private int mLayoutOrScrollCounter;
	boolean mLayoutRequestEaten;
	private EdgeEffect mLeftGlow;
	private final int mMaxFlingVelocity;
	private final int mMinFlingVelocity;
	private final int mMinMaxLayoutPositions[];
	private final int mNestedOffsets[];
	private final RecyclerViewDataObserver mObserver;
	private List mOnChildAttachStateListeners;
	private OnFlingListener mOnFlingListener;
	private final ArrayList mOnItemTouchListeners;
	final List mPendingAccessibilityImportanceChange;
	private SavedState mPendingSavedState;
	boolean mPostedAnimatorRunner;
	GapWorker.LayoutPrefetchRegistryImpl mPrefetchRegistry;
	private boolean mPreserveFocusAfterLayout;
	final Recycler mRecycler;
	RecyclerListener mRecyclerListener;
	private EdgeEffect mRightGlow;
	private final int mScrollConsumed[];
	private float mScrollFactor;
	private OnScrollListener mScrollListener;
	private List mScrollListeners;
	private final int mScrollOffset[];
	private int mScrollPointerId;
	private int mScrollState;
	private NestedScrollingChildHelper mScrollingChildHelper;
	final State mState;
	final Rect mTempRect;
	private final Rect mTempRect2;
	final RectF mTempRectF;
	private EdgeEffect mTopGlow;
	private int mTouchSlop;
	final Runnable mUpdateChildViewsRunnable;
	private VelocityTracker mVelocityTracker;
	final ViewFlinger mViewFlinger;
	private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback;
	final ViewInfoStore mViewInfoStore;

	static 
	{
	//    0    0:iconst_1        
	//    1    1:newarray        int[]
	//    2    3:dup             
	//    3    4:iconst_0        
	//    4    5:ldc2            #305 <Int 0x1010436>
	//    5    8:iastore         
	//    6    9:putstatic       #307 <Field int[] NESTED_SCROLLING_ATTRS>
	//    7   12:iconst_1        
	//    8   13:newarray        int[]
	//    9   15:dup             
	//   10   16:iconst_0        
	//   11   17:ldc2            #308 <Int 0x10100eb>
	//   12   20:iastore         
	//   13   21:putstatic       #310 <Field int[] CLIP_TO_PADDING_ATTR>
		boolean flag;
		if(android.os.Build.VERSION.SDK_INT == 18 || android.os.Build.VERSION.SDK_INT == 19 || android.os.Build.VERSION.SDK_INT == 20)
	//*  14   24:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  15   27:bipush          18
	//*  16   29:icmpeq          48
	//*  17   32:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  18   35:bipush          19
	//*  19   37:icmpeq          48
	//*  20   40:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  21   43:bipush          20
	//*  22   45:icmpne          53
			flag = true;
	//   23   48:iconst_1        
	//   24   49:istore_0        
		else
	//*  25   50:goto            55
			flag = false;
	//   26   53:iconst_0        
	//   27   54:istore_0        
		FORCE_INVALIDATE_DISPLAY_LIST = flag;
	//   28   55:iload_0         
	//   29   56:putstatic       #317 <Field boolean FORCE_INVALIDATE_DISPLAY_LIST>
		if(android.os.Build.VERSION.SDK_INT >= 23)
	//*  30   59:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  31   62:bipush          23
	//*  32   64:icmplt          72
			flag = true;
	//   33   67:iconst_1        
	//   34   68:istore_0        
		else
	//*  35   69:goto            74
			flag = false;
	//   36   72:iconst_0        
	//   37   73:istore_0        
		ALLOW_SIZE_IN_UNSPECIFIED_SPEC = flag;
	//   38   74:iload_0         
	//   39   75:putstatic       #319 <Field boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		if(android.os.Build.VERSION.SDK_INT >= 16)
	//*  40   78:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  41   81:bipush          16
	//*  42   83:icmplt          91
			flag = true;
	//   43   86:iconst_1        
	//   44   87:istore_0        
		else
	//*  45   88:goto            93
			flag = false;
	//   46   91:iconst_0        
	//   47   92:istore_0        
		POST_UPDATES_ON_ANIMATION = flag;
	//   48   93:iload_0         
	//   49   94:putstatic       #321 <Field boolean POST_UPDATES_ON_ANIMATION>
		if(android.os.Build.VERSION.SDK_INT >= 21)
	//*  50   97:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  51  100:bipush          21
	//*  52  102:icmplt          110
			flag = true;
	//   53  105:iconst_1        
	//   54  106:istore_0        
		else
	//*  55  107:goto            112
			flag = false;
	//   56  110:iconst_0        
	//   57  111:istore_0        
		ALLOW_THREAD_GAP_WORK = flag;
	//   58  112:iload_0         
	//   59  113:putstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  60  116:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  61  119:bipush          15
	//*  62  121:icmpgt          129
			flag = true;
	//   63  124:iconst_1        
	//   64  125:istore_0        
		else
	//*  65  126:goto            131
			flag = false;
	//   66  129:iconst_0        
	//   67  130:istore_0        
		FORCE_ABS_FOCUS_SEARCH_DIRECTION = flag;
	//   68  131:iload_0         
	//   69  132:putstatic       #325 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  70  135:getstatic       #315 <Field int android.os.Build$VERSION.SDK_INT>
	//*  71  138:bipush          15
	//*  72  140:icmpgt          148
			flag = true;
	//   73  143:iconst_1        
	//   74  144:istore_0        
		else
	//*  75  145:goto            150
			flag = false;
	//   76  148:iconst_0        
	//   77  149:istore_0        
		IGNORE_DETACHED_FOCUSED_CHILD = flag;
	//   78  150:iload_0         
	//   79  151:putstatic       #327 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
		LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE = (new Class[] {
			android/content/Context, android/util/AttributeSet, Integer.TYPE, Integer.TYPE
		});
	//   80  154:iconst_4        
	//   81  155:anewarray       Class[]
	//   82  158:dup             
	//   83  159:iconst_0        
	//   84  160:ldc2            #331 <Class Context>
	//   85  163:aastore         
	//   86  164:dup             
	//   87  165:iconst_1        
	//   88  166:ldc2            #333 <Class AttributeSet>
	//   89  169:aastore         
	//   90  170:dup             
	//   91  171:iconst_2        
	//   92  172:getstatic       #339 <Field Class Integer.TYPE>
	//   93  175:aastore         
	//   94  176:dup             
	//   95  177:iconst_3        
	//   96  178:getstatic       #339 <Field Class Integer.TYPE>
	//   97  181:aastore         
	//   98  182:putstatic       #341 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   99  185:new             #14  <Class RecyclerView$3>
	//  100  188:dup             
	//  101  189:invokespecial   #344 <Method void RecyclerView$3()>
	//  102  192:putstatic       #346 <Field Interpolator sQuinticInterpolator>
	//* 103  195:return          
	}


/*
	static void access$000(RecyclerView recyclerview, View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
	{
		recyclerview.attachViewToParent(view, i, layoutparams);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iload_2         
	//    3    3:aload_3         
	//    4    4:invokevirtual   #604 <Method void attachViewToParent(View, int, android.view.ViewGroup$LayoutParams)>
		return;
	//    5    7:return          
	}

*/


/*
	static void access$100(RecyclerView recyclerview, int i)
	{
		recyclerview.detachViewFromParent(i);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:invokevirtual   #609 <Method void detachViewFromParent(int)>
		return;
	//    3    5:return          
	}

*/


/*
	static void access$1000(RecyclerView recyclerview, int i, int j)
	{
		recyclerview.setMeasuredDimension(i, j);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:invokevirtual   #615 <Method void setMeasuredDimension(int, int)>
		return;
	//    4    6:return          
	}

*/


/*
	static boolean access$500(RecyclerView recyclerview)
	{
		return recyclerview.awakenScrollBars();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #621 <Method boolean awakenScrollBars()>
	//    2    4:ireturn         
	}

*/


/*
	static boolean access$600()
	{
		return ALLOW_THREAD_GAP_WORK;
	//    0    0:getstatic       #323 <Field boolean ALLOW_THREAD_GAP_WORK>
	//    1    3:ireturn         
	}

*/

	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$1

/* anonymous class */
	class LayoutManager._cls1
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedRight(view) + layoutparams.rightMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedRight(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.rightMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedLeft(view) - layoutparams.leftMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedLeft(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.leftMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getWidth() - getPaddingRight();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getWidth()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingRight()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingLeft()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}


	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$2

/* anonymous class */
	class LayoutManager._cls2
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedBottom(view) + layoutparams.bottomMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedBottom(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.bottomMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedTop(view) - layoutparams.topMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedTop(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.topMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getHeight() - getPaddingBottom();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getHeight()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingBottom()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingTop();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingTop()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}

}
