// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate safe 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.*;
import android.support.v4.os.TraceCompat;
import android.support.v4.util.Preconditions;
import android.support.v4.view.*;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.*;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import java.lang.annotation.Annotation;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package android.support.v7.widget:
//			ViewInfoStore, DefaultItemAnimator, RecyclerViewAccessibilityDelegate, ChildHelper, 
//			AdapterHelper, FastScroller, GapWorker, ViewBoundsCheck

public class RecyclerView extends ViewGroup
	implements NestedScrollingChild2, ScrollingView
{
	public static abstract class Adapter
	{

		public final void bindViewHolder(ViewHolder viewholder, int i)
		{
			viewholder.mPosition = i;
		//    0    0:aload_1         
		//    1    1:iload_2         
		//    2    2:putfield        #33  <Field int RecyclerView$ViewHolder.mPosition>
			if(hasStableIds())
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #37  <Method boolean hasStableIds()>
		//*   5    9:ifeq            21
				viewholder.mItemId = getItemId(i);
		//    6   12:aload_1         
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:invokevirtual   #41  <Method long getItemId(int)>
		//   10   18:putfield        #45  <Field long RecyclerView$ViewHolder.mItemId>
			viewholder.setFlags(1, 519);
		//   11   21:aload_1         
		//   12   22:iconst_1        
		//   13   23:sipush          519
		//   14   26:invokevirtual   #49  <Method void RecyclerView$ViewHolder.setFlags(int, int)>
			TraceCompat.beginSection("RV OnBindView");
		//   15   29:ldc1            #51  <String "RV OnBindView">
		//   16   31:invokestatic    #57  <Method void TraceCompat.beginSection(String)>
			onBindViewHolder(viewholder, i, viewholder.getUnmodifiedPayloads());
		//   17   34:aload_0         
		//   18   35:aload_1         
		//   19   36:iload_2         
		//   20   37:aload_1         
		//   21   38:invokevirtual   #61  <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//   22   41:invokevirtual   #65  <Method void onBindViewHolder(RecyclerView$ViewHolder, int, List)>
			viewholder.clearPayload();
		//   23   44:aload_1         
		//   24   45:invokevirtual   #68  <Method void RecyclerView$ViewHolder.clearPayload()>
			viewholder = ((ViewHolder) (viewholder.itemView.getLayoutParams()));
		//   25   48:aload_1         
		//   26   49:getfield        #72  <Field View RecyclerView$ViewHolder.itemView>
		//   27   52:invokevirtual   #78  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   28   55:astore_1        
			if(viewholder instanceof LayoutParams)
		//*  29   56:aload_1         
		//*  30   57:instanceof      #80  <Class RecyclerView$LayoutParams>
		//*  31   60:ifeq            71
				((LayoutParams)viewholder).mInsetsDirty = true;
		//   32   63:aload_1         
		//   33   64:checkcast       #80  <Class RecyclerView$LayoutParams>
		//   34   67:iconst_1        
		//   35   68:putfield        #83  <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			TraceCompat.endSection();
		//   36   71:invokestatic    #86  <Method void TraceCompat.endSection()>
		//   37   74:return          
		}

		public final ViewHolder createViewHolder(ViewGroup viewgroup, int i)
		{
			TraceCompat.beginSection("RV CreateView");
		//    0    0:ldc1            #93  <String "RV CreateView">
		//    1    2:invokestatic    #57  <Method void TraceCompat.beginSection(String)>
			viewgroup = ((ViewGroup) (onCreateViewHolder(viewgroup, i)));
		//    2    5:aload_0         
		//    3    6:aload_1         
		//    4    7:iload_2         
		//    5    8:invokevirtual   #96  <Method RecyclerView$ViewHolder onCreateViewHolder(ViewGroup, int)>
		//    6   11:astore_1        
			if(((ViewHolder) (viewgroup)).itemView.getParent() != null)
				break MISSING_BLOCK_LABEL_32;
		//    7   12:aload_1         
		//    8   13:getfield        #72  <Field View RecyclerView$ViewHolder.itemView>
		//    9   16:invokevirtual   #100 <Method ViewParent View.getParent()>
		//   10   19:ifnonnull       32
			viewgroup.mItemViewType = i;
		//   11   22:aload_1         
		//   12   23:iload_2         
		//   13   24:putfield        #103 <Field int RecyclerView$ViewHolder.mItemViewType>
			TraceCompat.endSection();
		//   14   27:invokestatic    #86  <Method void TraceCompat.endSection()>
			return ((ViewHolder) (viewgroup));
		//   15   30:aload_1         
		//   16   31:areturn         
			throw new IllegalStateException("ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)");
		//   17   32:new             #105 <Class IllegalStateException>
		//   18   35:dup             
		//   19   36:ldc1            #107 <String "ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)">
		//   20   38:invokespecial   #109 <Method void IllegalStateException(String)>
		//   21   41:athrow          
			viewgroup;
		//   22   42:astore_1        
			TraceCompat.endSection();
		//   23   43:invokestatic    #86  <Method void TraceCompat.endSection()>
			throw viewgroup;
		//   24   46:aload_1         
		//   25   47:athrow          
		}

		public abstract int getItemCount();

		public long getItemId(int i)
		{
			return -1L;
		//    0    0:ldc2w           #114 <Long -1L>
		//    1    3:lreturn         
		}

		public int getItemViewType(int i)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public final boolean hasObservers()
		{
			return mObservable.hasObservers();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #120 <Method boolean RecyclerView$AdapterDataObservable.hasObservers()>
		//    3    7:ireturn         
		}

		public final boolean hasStableIds()
		{
			return mHasStableIds;
		//    0    0:aload_0         
		//    1    1:getfield        #23  <Field boolean mHasStableIds>
		//    2    4:ireturn         
		}

		public final void notifyDataSetChanged()
		{
			mObservable.notifyChanged();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyChanged()>
		//    3    7:return          
		}

		public final void notifyItemChanged(int i)
		{
			mObservable.notifyItemRangeChanged(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #129 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemChanged(int i, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, 1, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:aload_2         
		//    5    7:invokevirtual   #134 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemInserted(int i)
		{
			mObservable.notifyItemRangeInserted(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #138 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemMoved(int i, int j)
		{
			mObservable.notifyItemMoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #141 <Method void RecyclerView$AdapterDataObservable.notifyItemMoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j)
		{
			mObservable.notifyItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #129 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, j, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:aload_3         
		//    5    7:invokevirtual   #134 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemRangeInserted(int i, int j)
		{
			mObservable.notifyItemRangeInserted(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #138 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeRemoved(int i, int j)
		{
			mObservable.notifyItemRangeRemoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #144 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRemoved(int i)
		{
			mObservable.notifyItemRangeRemoved(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #144 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public void onAttachedToRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public abstract void onBindViewHolder(ViewHolder viewholder, int i);

		public void onBindViewHolder(ViewHolder viewholder, int i, List list)
		{
			onBindViewHolder(viewholder, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #149 <Method void onBindViewHolder(RecyclerView$ViewHolder, int)>
		//    4    6:return          
		}

		public abstract ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i);

		public void onDetachedFromRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public boolean onFailedToRecycleView(ViewHolder viewholder)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onViewAttachedToWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewDetachedFromWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewRecycled(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void registerAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.registerObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #165 <Method void RecyclerView$AdapterDataObservable.registerObserver(Object)>
		//    4    8:return          
		}

		public void setHasStableIds(boolean flag)
		{
			if(!hasObservers())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #168 <Method boolean hasObservers()>
		//*   2    4:ifne            13
			{
				mHasStableIds = flag;
		//    3    7:aload_0         
		//    4    8:iload_1         
		//    5    9:putfield        #23  <Field boolean mHasStableIds>
				return;
		//    6   12:return          
			} else
			{
				throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
		//    7   13:new             #105 <Class IllegalStateException>
		//    8   16:dup             
		//    9   17:ldc1            #170 <String "Cannot change whether this adapter has stable IDs while the adapter has registered observers.">
		//   10   19:invokespecial   #109 <Method void IllegalStateException(String)>
		//   11   22:athrow          
			}
		}

		public void unregisterAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.unregisterObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #174 <Method void RecyclerView$AdapterDataObservable.unregisterObserver(Object)>
		//    4    8:return          
		}

		private boolean mHasStableIds;
		private final AdapterDataObservable mObservable = new AdapterDataObservable();

		public Adapter()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #16  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #18  <Class RecyclerView$AdapterDataObservable>
		//    4    8:dup             
		//    5    9:invokespecial   #19  <Method void RecyclerView$AdapterDataObservable()>
		//    6   12:putfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
			mHasStableIds = false;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #23  <Field boolean mHasStableIds>
		//   10   20:return          
		}
	}

	static class AdapterDataObservable extends Observable
	{

		public boolean hasObservers()
		{
			return mObservers.isEmpty() ^ true;
		//    0    0:aload_0         
		//    1    1:getfield        #19  <Field ArrayList mObservers>
		//    2    4:invokevirtual   #24  <Method boolean ArrayList.isEmpty()>
		//    3    7:iconst_1        
		//    4    8:ixor            
		//    5    9:ireturn         
		}

		public void notifyChanged()
		{
			for(int i = mObservers.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            35
				((AdapterDataObserver)mObservers.get(i)).onChanged();
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_1         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:invokevirtual   #38  <Method void RecyclerView$AdapterDataObserver.onChanged()>

		//   14   28:iload_1         
		//   15   29:iconst_1        
		//   16   30:isub            
		//   17   31:istore_1        
		//*  18   32:goto            10
		//   19   35:return          
		}

		public void notifyItemMoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            38
				((AdapterDataObserver)mObservers.get(k)).onItemRangeMoved(i, j, 1);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:iconst_1        
		//   16   28:invokevirtual   #44  <Method void RecyclerView$AdapterDataObserver.onItemRangeMoved(int, int, int)>

		//   17   31:iload_3         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_3        
		//*  21   35:goto            10
		//   22   38:return          
		}

		public void notifyItemRangeChanged(int i, int j)
		{
			notifyItemRangeChanged(i, j, ((Object) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aconst_null     
		//    4    4:invokevirtual   #48  <Method void notifyItemRangeChanged(int, int, Object)>
		//    5    7:return          
		}

		public void notifyItemRangeChanged(int i, int j, Object obj)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            43
				((AdapterDataObserver)mObservers.get(k)).onItemRangeChanged(i, j, obj);
		//    8   16:aload_0         
		//    9   17:getfield        #19  <Field ArrayList mObservers>
		//   10   20:iload           4
		//   11   22:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   28:iload_1         
		//   14   29:iload_2         
		//   15   30:aload_3         
		//   16   31:invokevirtual   #52  <Method void RecyclerView$AdapterDataObserver.onItemRangeChanged(int, int, Object)>

		//   17   34:iload           4
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:istore          4
		//*  21   40:goto            11
		//   22   43:return          
		}

		public void notifyItemRangeInserted(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeInserted(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #57  <Method void RecyclerView$AdapterDataObserver.onItemRangeInserted(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		public void notifyItemRangeRemoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeRemoved(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #61  <Method void RecyclerView$AdapterDataObserver.onItemRangeRemoved(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		AdapterDataObservable()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #12  <Method void Observable()>
		//    2    4:return          
		}
	}

	public static abstract class AdapterDataObserver
	{

		public void onChanged()
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			onItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #19  <Method void onItemRangeChanged(int, int)>
		//    4    6:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
		//    0    0:return          
		}

		public AdapterDataObserver()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface ChildDrawingOrderCallback
	{

		public abstract int onGetChildDrawingOrder(int i, int j);
	}

	public static class EdgeEffectFactory
	{

		protected EdgeEffect createEdgeEffect(RecyclerView recyclerview, int i)
		{
			return new EdgeEffect(recyclerview.getContext());
		//    0    0:new             #20  <Class EdgeEffect>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:invokevirtual   #24  <Method Context RecyclerView.getContext()>
		//    4    8:invokespecial   #27  <Method void EdgeEffect(Context)>
		//    5   11:areturn         
		}

		public EdgeEffectFactory()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #14  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface EdgeEffectFactory.EdgeDirection
		extends Annotation
	{
	}

	public static abstract class ItemAnimator
	{

		static int buildAdapterChangeFlagsForAnimations(ViewHolder viewholder)
		{
			int j = viewholder.mFlags & 0xe;
		//    0    0:aload_0         
		//    1    1:getfield        #61  <Field int RecyclerView$ViewHolder.mFlags>
		//    2    4:bipush          14
		//    3    6:iand            
		//    4    7:istore_2        
			if(viewholder.isInvalid())
		//*   5    8:aload_0         
		//*   6    9:invokevirtual   #65  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   7   12:ifeq            17
				return 4;
		//    8   15:iconst_4        
		//    9   16:ireturn         
			int i = j;
		//   10   17:iload_2         
		//   11   18:istore_1        
			if((j & 4) == 0)
		//*  12   19:iload_2         
		//*  13   20:iconst_4        
		//*  14   21:iand            
		//*  15   22:ifne            65
			{
				int k = viewholder.getOldPosition();
		//   16   25:aload_0         
		//   17   26:invokevirtual   #69  <Method int RecyclerView$ViewHolder.getOldPosition()>
		//   18   29:istore_3        
				int l = viewholder.getAdapterPosition();
		//   19   30:aload_0         
		//   20   31:invokevirtual   #72  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//   21   34:istore          4
				i = j;
		//   22   36:iload_2         
		//   23   37:istore_1        
				if(k != -1)
		//*  24   38:iload_3         
		//*  25   39:iconst_m1       
		//*  26   40:icmpeq          65
				{
					i = j;
		//   27   43:iload_2         
		//   28   44:istore_1        
					if(l != -1)
		//*  29   45:iload           4
		//*  30   47:iconst_m1       
		//*  31   48:icmpeq          65
					{
						i = j;
		//   32   51:iload_2         
		//   33   52:istore_1        
						if(k != l)
		//*  34   53:iload_3         
		//*  35   54:iload           4
		//*  36   56:icmpeq          65
							i = j | 0x800;
		//   37   59:iload_2         
		//   38   60:sipush          2048
		//   39   63:ior             
		//   40   64:istore_1        
					}
				}
			}
			return i;
		//   41   65:iload_1         
		//   42   66:ireturn         
		}

		public abstract boolean animateAppearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateDisappearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animatePersistence(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
		{
			return true;
		//    0    0:iconst_1        
		//    1    1:ireturn         
		}

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder, List list)
		{
			return canReuseUpdatedViewHolder(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #86  <Method boolean canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//    3    5:ireturn         
		}

		public final void dispatchAnimationFinished(ViewHolder viewholder)
		{
			onAnimationFinished(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #93  <Method void onAnimationFinished(RecyclerView$ViewHolder)>
			ItemAnimatorListener itemanimatorlistener = mListener;
		//    3    5:aload_0         
		//    4    6:getfield        #35  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    5    9:astore_2        
			if(itemanimatorlistener != null)
		//*   6   10:aload_2         
		//*   7   11:ifnull          21
				itemanimatorlistener.onAnimationFinished(viewholder);
		//    8   14:aload_2         
		//    9   15:aload_1         
		//   10   16:invokeinterface #94  <Method void RecyclerView$ItemAnimator$ItemAnimatorListener.onAnimationFinished(RecyclerView$ViewHolder)>
		//   11   21:return          
		}

		public final void dispatchAnimationsFinished()
		{
			int j = mFinishedListeners.size();
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field ArrayList mFinishedListeners>
		//    2    4:invokevirtual   #98  <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          38
				((ItemAnimatorFinishedListener)mFinishedListeners.get(i)).onAnimationsFinished();
		//    9   15:aload_0         
		//   10   16:getfield        #40  <Field ArrayList mFinishedListeners>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #102 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #12  <Class RecyclerView$ItemAnimator$ItemAnimatorFinishedListener>
		//   14   26:invokeinterface #105 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>

		//   15   31:iload_1         
		//   16   32:iconst_1        
		//   17   33:iadd            
		//   18   34:istore_1        
		//*  19   35:goto            10
			mFinishedListeners.clear();
		//   20   38:aload_0         
		//   21   39:getfield        #40  <Field ArrayList mFinishedListeners>
		//   22   42:invokevirtual   #108 <Method void ArrayList.clear()>
		//   23   45:return          
		}

		public abstract void endAnimation(ViewHolder viewholder);

		public abstract void endAnimations();

		public long getAddDuration()
		{
			return mAddDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field long mAddDuration>
		//    2    4:lreturn         
		}

		public long getChangeDuration()
		{
			return mChangeDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #52  <Field long mChangeDuration>
		//    2    4:lreturn         
		}

		public long getMoveDuration()
		{
			return mMoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #50  <Field long mMoveDuration>
		//    2    4:lreturn         
		}

		public long getRemoveDuration()
		{
			return mRemoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #46  <Field long mRemoveDuration>
		//    2    4:lreturn         
		}

		public abstract boolean isRunning();

		public final boolean isRunning(ItemAnimatorFinishedListener itemanimatorfinishedlistener)
		{
			boolean flag = isRunning();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #119 <Method boolean isRunning()>
		//    2    4:istore_2        
			if(itemanimatorfinishedlistener != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          30
			{
				if(!flag)
		//*   5    9:iload_2         
		//*   6   10:ifne            21
				{
					itemanimatorfinishedlistener.onAnimationsFinished();
		//    7   13:aload_1         
		//    8   14:invokeinterface #105 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>
					return flag;
		//    9   19:iload_2         
		//   10   20:ireturn         
				}
				mFinishedListeners.add(((Object) (itemanimatorfinishedlistener)));
		//   11   21:aload_0         
		//   12   22:getfield        #40  <Field ArrayList mFinishedListeners>
		//   13   25:aload_1         
		//   14   26:invokevirtual   #123 <Method boolean ArrayList.add(Object)>
		//   15   29:pop             
			}
			return flag;
		//   16   30:iload_2         
		//   17   31:ireturn         
		}

		public ItemHolderInfo obtainHolderInfo()
		{
			return new ItemHolderInfo();
		//    0    0:new             #18  <Class RecyclerView$ItemAnimator$ItemHolderInfo>
		//    1    3:dup             
		//    2    4:invokespecial   #126 <Method void RecyclerView$ItemAnimator$ItemHolderInfo()>
		//    3    7:areturn         
		}

		public void onAnimationFinished(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public ItemHolderInfo recordPostLayoutInformation(State state, ViewHolder viewholder)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #131 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #135 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public ItemHolderInfo recordPreLayoutInformation(State state, ViewHolder viewholder, int i, List list)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #131 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #135 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public abstract void runPendingAnimations();

		void setListener(ItemAnimatorListener itemanimatorlistener)
		{
			mListener = itemanimatorlistener;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #35  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    3    5:return          
		}

		private long mAddDuration;
		private long mChangeDuration;
		private ArrayList mFinishedListeners;
		private ItemAnimatorListener mListener;
		private long mMoveDuration;
		private long mRemoveDuration;

		public ItemAnimator()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #33  <Method void Object()>
			mListener = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #35  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
			mFinishedListeners = new ArrayList();
		//    5    9:aload_0         
		//    6   10:new             #37  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #38  <Method void ArrayList()>
		//    9   17:putfield        #40  <Field ArrayList mFinishedListeners>
			mAddDuration = 120L;
		//   10   20:aload_0         
		//   11   21:ldc2w           #41  <Long 120L>
		//   12   24:putfield        #44  <Field long mAddDuration>
			mRemoveDuration = 120L;
		//   13   27:aload_0         
		//   14   28:ldc2w           #41  <Long 120L>
		//   15   31:putfield        #46  <Field long mRemoveDuration>
			mMoveDuration = 250L;
		//   16   34:aload_0         
		//   17   35:ldc2w           #47  <Long 250L>
		//   18   38:putfield        #50  <Field long mMoveDuration>
			mChangeDuration = 250L;
		//   19   41:aload_0         
		//   20   42:ldc2w           #47  <Long 250L>
		//   21   45:putfield        #52  <Field long mChangeDuration>
		//   22   48:return          
		}
	}

	public static interface ItemAnimator.AdapterChanges
		extends Annotation
	{
	}

	public static interface ItemAnimator.ItemAnimatorFinishedListener
	{

		public abstract void onAnimationsFinished();
	}

	static interface ItemAnimator.ItemAnimatorListener
	{

		public abstract void onAnimationFinished(ViewHolder viewholder);
	}

	public static class ItemAnimator.ItemHolderInfo
	{

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder)
		{
			return setFrom(viewholder, 0);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #26  <Method RecyclerView$ItemAnimator$ItemHolderInfo setFrom(RecyclerView$ViewHolder, int)>
		//    4    6:areturn         
		}

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder, int i)
		{
			viewholder = ((ViewHolder) (viewholder.itemView));
		//    0    0:aload_1         
		//    1    1:getfield        #34  <Field View RecyclerView$ViewHolder.itemView>
		//    2    4:astore_1        
			left = ((View) (viewholder)).getLeft();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #40  <Method int View.getLeft()>
		//    6   10:putfield        #42  <Field int left>
			top = ((View) (viewholder)).getTop();
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:invokevirtual   #45  <Method int View.getTop()>
		//   10   18:putfield        #47  <Field int top>
			right = ((View) (viewholder)).getRight();
		//   11   21:aload_0         
		//   12   22:aload_1         
		//   13   23:invokevirtual   #50  <Method int View.getRight()>
		//   14   26:putfield        #52  <Field int right>
			bottom = ((View) (viewholder)).getBottom();
		//   15   29:aload_0         
		//   16   30:aload_1         
		//   17   31:invokevirtual   #55  <Method int View.getBottom()>
		//   18   34:putfield        #57  <Field int bottom>
			return this;
		//   19   37:aload_0         
		//   20   38:areturn         
		}

		public int bottom;
		public int left;
		public int right;
		public int top;

		public ItemAnimator.ItemHolderInfo()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #19  <Method void Object()>
		//    2    4:return          
		}
	}

	private class ItemAnimatorRestoreListener
		implements ItemAnimator.ItemAnimatorListener
	{

		public void onAnimationFinished(ViewHolder viewholder)
		{
			viewholder.setIsRecyclable(true);
		//    0    0:aload_1         
		//    1    1:iconst_1        
		//    2    2:invokevirtual   #27  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			if(viewholder.mShadowedHolder != null && viewholder.mShadowingHolder == null)
		//*   3    5:aload_1         
		//*   4    6:getfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
		//*   5    9:ifnull          24
		//*   6   12:aload_1         
		//*   7   13:getfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		//*   8   16:ifnonnull       24
				viewholder.mShadowedHolder = null;
		//    9   19:aload_1         
		//   10   20:aconst_null     
		//   11   21:putfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			viewholder.mShadowingHolder = null;
		//   12   24:aload_1         
		//   13   25:aconst_null     
		//   14   26:putfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
			if(!viewholder.shouldBeKeptAsChild() && !removeAnimatingView(viewholder.itemView) && viewholder.isTmpDetached())
		//*  15   29:aload_1         
		//*  16   30:invokevirtual   #38  <Method boolean RecyclerView$ViewHolder.shouldBeKeptAsChild()>
		//*  17   33:ifne            69
		//*  18   36:aload_0         
		//*  19   37:getfield        #15  <Field RecyclerView this$0>
		//*  20   40:aload_1         
		//*  21   41:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   44:invokevirtual   #46  <Method boolean RecyclerView.removeAnimatingView(View)>
		//*  23   47:ifne            69
		//*  24   50:aload_1         
		//*  25   51:invokevirtual   #49  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  26   54:ifeq            69
				removeDetachedView(viewholder.itemView, false);
		//   27   57:aload_0         
		//   28   58:getfield        #15  <Field RecyclerView this$0>
		//   29   61:aload_1         
		//   30   62:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//   31   65:iconst_0        
		//   32   66:invokevirtual   #53  <Method void RecyclerView.removeDetachedView(View, boolean)>
		//   33   69:return          
		}

		final RecyclerView this$0;

		ItemAnimatorRestoreListener()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #15  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #18  <Method void Object()>
		//    5    9:return          
		}
	}

	public static abstract class ItemDecoration
	{

		public void getItemOffsets(Rect rect, int i, RecyclerView recyclerview)
		{
			rect.set(0, 0, 0, 0);
		//    0    0:aload_1         
		//    1    1:iconst_0        
		//    2    2:iconst_0        
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #22  <Method void Rect.set(int, int, int, int)>
		//    6    8:return          
		}

		public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, State state)
		{
			getItemOffsets(rect, ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition(), recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #31  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    6:checkcast       #33  <Class RecyclerView$LayoutParams>
		//    5    9:invokevirtual   #37  <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    6   12:aload_3         
		//    7   13:invokevirtual   #39  <Method void getItemOffsets(Rect, int, RecyclerView)>
		//    8   16:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDraw(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #44  <Method void onDraw(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDrawOver(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #47  <Method void onDrawOver(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public ItemDecoration()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class LayoutManager
	{

		private void addViewInt(View view, int i, boolean flag)
		{
			Object obj = ((Object) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          6
			if(!flag && !((ViewHolder) (obj)).isRemoved())
		//*   3    6:iload_3         
		//*   4    7:ifne            36
		//*   5   10:aload           6
		//*   6   12:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   15:ifeq            21
		//*   8   18:goto            36
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(((ViewHolder) (obj)));
		//    9   21:aload_0         
		//   10   22:getfield        #89  <Field RecyclerView mRecyclerView>
		//   11   25:getfield        #93  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   12   28:aload           6
		//   13   30:invokevirtual   #99  <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  14   33:goto            48
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(((ViewHolder) (obj)));
		//   15   36:aload_0         
		//   16   37:getfield        #89  <Field RecyclerView mRecyclerView>
		//   17   40:getfield        #93  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   18   43:aload           6
		//   19   45:invokevirtual   #102 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//   20   48:aload_1         
		//   21   49:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   22   52:checkcast       #110 <Class RecyclerView$LayoutParams>
		//   23   55:astore          7
			if(!((ViewHolder) (obj)).wasReturnedFromScrap() && !((ViewHolder) (obj)).isScrap())
		//*  24   57:aload           6
		//*  25   59:invokevirtual   #113 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  26   62:ifne            247
		//*  27   65:aload           6
		//*  28   67:invokevirtual   #116 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  29   70:ifeq            76
		//*  30   73:goto            247
			{
				if(view.getParent() == mRecyclerView)
		//*  31   76:aload_1         
		//*  32   77:invokevirtual   #120 <Method ViewParent View.getParent()>
		//*  33   80:aload_0         
		//*  34   81:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  35   84:if_acmpne       201
				{
					int k = mChildHelper.indexOfChild(view);
		//   36   87:aload_0         
		//   37   88:getfield        #122 <Field ChildHelper mChildHelper>
		//   38   91:aload_1         
		//   39   92:invokevirtual   #128 <Method int ChildHelper.indexOfChild(View)>
		//   40   95:istore          5
					int j = i;
		//   41   97:iload_2         
		//   42   98:istore          4
					if(i == -1)
		//*  43  100:iload_2         
		//*  44  101:iconst_m1       
		//*  45  102:icmpne          114
						j = mChildHelper.getChildCount();
		//   46  105:aload_0         
		//   47  106:getfield        #122 <Field ChildHelper mChildHelper>
		//   48  109:invokevirtual   #132 <Method int ChildHelper.getChildCount()>
		//   49  112:istore          4
					if(k != -1)
		//*  50  114:iload           5
		//*  51  116:iconst_m1       
		//*  52  117:icmpeq          144
					{
						if(k != j)
		//*  53  120:iload           5
		//*  54  122:iload           4
		//*  55  124:icmpeq          282
							mRecyclerView.mLayout.moveView(k, j);
		//   56  127:aload_0         
		//   57  128:getfield        #89  <Field RecyclerView mRecyclerView>
		//   58  131:getfield        #136 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   59  134:iload           5
		//   60  136:iload           4
		//   61  138:invokevirtual   #140 <Method void moveView(int, int)>
					} else
		//*  62  141:goto            282
					{
						obj = ((Object) (new StringBuilder()));
		//   63  144:new             #142 <Class StringBuilder>
		//   64  147:dup             
		//   65  148:invokespecial   #143 <Method void StringBuilder()>
		//   66  151:astore          6
						((StringBuilder) (obj)).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:");
		//   67  153:aload           6
		//   68  155:ldc1            #145 <String "Added View has RecyclerView as parent but view is not a real child. Unfiltered index:">
		//   69  157:invokevirtual   #149 <Method StringBuilder StringBuilder.append(String)>
		//   70  160:pop             
						((StringBuilder) (obj)).append(mRecyclerView.indexOfChild(view));
		//   71  161:aload           6
		//   72  163:aload_0         
		//   73  164:getfield        #89  <Field RecyclerView mRecyclerView>
		//   74  167:aload_1         
		//   75  168:invokevirtual   #150 <Method int RecyclerView.indexOfChild(View)>
		//   76  171:invokevirtual   #153 <Method StringBuilder StringBuilder.append(int)>
		//   77  174:pop             
						((StringBuilder) (obj)).append(mRecyclerView.exceptionLabel());
		//   78  175:aload           6
		//   79  177:aload_0         
		//   80  178:getfield        #89  <Field RecyclerView mRecyclerView>
		//   81  181:invokevirtual   #157 <Method String RecyclerView.exceptionLabel()>
		//   82  184:invokevirtual   #149 <Method StringBuilder StringBuilder.append(String)>
		//   83  187:pop             
						throw new IllegalStateException(((StringBuilder) (obj)).toString());
		//   84  188:new             #159 <Class IllegalStateException>
		//   85  191:dup             
		//   86  192:aload           6
		//   87  194:invokevirtual   #162 <Method String StringBuilder.toString()>
		//   88  197:invokespecial   #165 <Method void IllegalStateException(String)>
		//   89  200:athrow          
					}
				} else
				{
					mChildHelper.addView(view, i, false);
		//   90  201:aload_0         
		//   91  202:getfield        #122 <Field ChildHelper mChildHelper>
		//   92  205:aload_1         
		//   93  206:iload_2         
		//   94  207:iconst_0        
		//   95  208:invokevirtual   #168 <Method void ChildHelper.addView(View, int, boolean)>
					layoutparams.mInsetsDirty = true;
		//   96  211:aload           7
		//   97  213:iconst_1        
		//   98  214:putfield        #171 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
					SmoothScroller smoothscroller = mSmoothScroller;
		//   99  217:aload_0         
		//  100  218:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  101  221:astore          8
					if(smoothscroller != null && smoothscroller.isRunning())
		//* 102  223:aload           8
		//* 103  225:ifnull          282
		//* 104  228:aload           8
		//* 105  230:invokevirtual   #178 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 106  233:ifeq            282
						mSmoothScroller.onChildAttachedToWindow(view);
		//  107  236:aload_0         
		//  108  237:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  109  240:aload_1         
		//  110  241:invokevirtual   #182 <Method void RecyclerView$SmoothScroller.onChildAttachedToWindow(View)>
				}
			} else
		//* 111  244:goto            282
			{
				if(((ViewHolder) (obj)).isScrap())
		//* 112  247:aload           6
		//* 113  249:invokevirtual   #116 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//* 114  252:ifeq            263
					((ViewHolder) (obj)).unScrap();
		//  115  255:aload           6
		//  116  257:invokevirtual   #185 <Method void RecyclerView$ViewHolder.unScrap()>
				else
		//* 117  260:goto            268
					((ViewHolder) (obj)).clearReturnedFromScrapFlag();
		//  118  263:aload           6
		//  119  265:invokevirtual   #188 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
				mChildHelper.attachViewToParent(view, i, view.getLayoutParams(), false);
		//  120  268:aload_0         
		//  121  269:getfield        #122 <Field ChildHelper mChildHelper>
		//  122  272:aload_1         
		//  123  273:iload_2         
		//  124  274:aload_1         
		//  125  275:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//  126  278:iconst_0        
		//  127  279:invokevirtual   #192 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			}
			if(layoutparams.mPendingInvalidate)
		//* 128  282:aload           7
		//* 129  284:getfield        #195 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//* 130  287:ifeq            304
			{
				((ViewHolder) (obj)).itemView.invalidate();
		//  131  290:aload           6
		//  132  292:getfield        #199 <Field View RecyclerView$ViewHolder.itemView>
		//  133  295:invokevirtual   #202 <Method void View.invalidate()>
				layoutparams.mPendingInvalidate = false;
		//  134  298:aload           7
		//  135  300:iconst_0        
		//  136  301:putfield        #195 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
			}
		//  137  304:return          
		}

		public static int chooseSize(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(i);
		//    0    0:iload_0         
		//    1    1:invokestatic    #210 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			i = android.view.View.MeasureSpec.getSize(i);
		//    3    5:iload_0         
		//    4    6:invokestatic    #213 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_0        
			if(l != 0x80000000)
		//*   6   10:iload_3         
		//*   7   11:ldc1            #214 <Int 0x80000000>
		//*   8   13:icmpeq          30
			{
				if(l != 0x40000000)
		//*   9   16:iload_3         
		//*  10   17:ldc1            #215 <Int 0x40000000>
		//*  11   19:icmpeq          28
					return Math.max(j, k);
		//   12   22:iload_1         
		//   13   23:iload_2         
		//   14   24:invokestatic    #221 <Method int Math.max(int, int)>
		//   15   27:ireturn         
				else
					return i;
		//   16   28:iload_0         
		//   17   29:ireturn         
			} else
			{
				return Math.min(i, Math.max(j, k));
		//   18   30:iload_0         
		//   19   31:iload_1         
		//   20   32:iload_2         
		//   21   33:invokestatic    #221 <Method int Math.max(int, int)>
		//   22   36:invokestatic    #224 <Method int Math.min(int, int)>
		//   23   39:ireturn         
			}
		}

		private void detachViewInternal(int i, View view)
		{
			mChildHelper.detachViewFromParent(i);
		//    0    0:aload_0         
		//    1    1:getfield        #122 <Field ChildHelper mChildHelper>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #231 <Method void ChildHelper.detachViewFromParent(int)>
		//    4    8:return          
		}

		public static int getChildMeasureSpec(int i, int j, int k, int l, boolean flag)
		{
label0:
			{
				boolean flag1;
label1:
				{
					int i1;
label2:
					{
label3:
						{
label4:
							{
								flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          6
								i1 = Math.max(0, i - k);
		//    2    3:iconst_0        
		//    3    4:iload_0         
		//    4    5:iload_2         
		//    5    6:isub            
		//    6    7:invokestatic    #221 <Method int Math.max(int, int)>
		//    7   10:istore          5
								if(!flag)
									break label2;
		//    8   12:iload           4
		//    9   14:ifeq            86
								if(l >= 0)
		//*  10   17:iload_3         
		//*  11   18:iflt            29
								{
									i = l;
		//   12   21:iload_3         
		//   13   22:istore_0        
									k = 0x40000000;
		//   14   23:ldc1            #215 <Int 0x40000000>
		//   15   25:istore_2        
									break label0;
		//   16   26:goto            149
								}
								if(l != -1)
									break label3;
		//   17   29:iload_3         
		//   18   30:iconst_m1       
		//   19   31:icmpne          72
								if(j != 0x80000000)
		//*  20   34:iload_1         
		//*  21   35:ldc1            #214 <Int 0x80000000>
		//*  22   37:icmpeq          64
									if(j != 0)
		//*  23   40:iload_1         
		//*  24   41:ifeq            57
									{
										if(j != 0x40000000)
		//*  25   44:iload_1         
		//*  26   45:ldc1            #215 <Int 0x40000000>
		//*  27   47:icmpeq          64
										{
											j = 0;
		//   28   50:iconst_0        
		//   29   51:istore_1        
											i = 0;
		//   30   52:iconst_0        
		//   31   53:istore_0        
											break label4;
		//   32   54:goto            67
										}
									} else
									{
										j = 0;
		//   33   57:iconst_0        
		//   34   58:istore_1        
										i = 0;
		//   35   59:iconst_0        
		//   36   60:istore_0        
										break label4;
		//   37   61:goto            67
									}
								i = i1;
		//   38   64:iload           5
		//   39   66:istore_0        
							}
							k = j;
		//   40   67:iload_1         
		//   41   68:istore_2        
							break label0;
		//   42   69:goto            149
						}
						if(l == -2)
		//*  43   72:iload_3         
		//*  44   73:bipush          -2
		//*  45   75:icmpne          144
						{
							i = 0;
		//   46   78:iconst_0        
		//   47   79:istore_0        
							k = ((int) (flag1));
		//   48   80:iload           6
		//   49   82:istore_2        
							break label0;
		//   50   83:goto            149
						}
						break label1;
					}
					if(l >= 0)
		//*  51   86:iload_3         
		//*  52   87:iflt            98
					{
						i = l;
		//   53   90:iload_3         
		//   54   91:istore_0        
						k = 0x40000000;
		//   55   92:ldc1            #215 <Int 0x40000000>
		//   56   94:istore_2        
						break label0;
		//   57   95:goto            149
					}
					if(l == -1)
		//*  58   98:iload_3         
		//*  59   99:iconst_m1       
		//*  60  100:icmpne          111
					{
						i = i1;
		//   61  103:iload           5
		//   62  105:istore_0        
						k = j;
		//   63  106:iload_1         
		//   64  107:istore_2        
						break label0;
		//   65  108:goto            149
					}
					if(l == -2)
		//*  66  111:iload_3         
		//*  67  112:bipush          -2
		//*  68  114:icmpne          144
					{
						if(j != 0x80000000)
		//*  69  117:iload_1         
		//*  70  118:ldc1            #214 <Int 0x80000000>
		//*  71  120:icmpeq          135
						{
							i = i1;
		//   72  123:iload           5
		//   73  125:istore_0        
							k = ((int) (flag1));
		//   74  126:iload           6
		//   75  128:istore_2        
							if(j != 0x40000000)
								break label0;
		//   76  129:iload_1         
		//   77  130:ldc1            #215 <Int 0x40000000>
		//   78  132:icmpne          149
						}
						k = 0x80000000;
		//   79  135:ldc1            #214 <Int 0x80000000>
		//   80  137:istore_2        
						i = i1;
		//   81  138:iload           5
		//   82  140:istore_0        
						break label0;
		//   83  141:goto            149
					}
				}
				i = 0;
		//   84  144:iconst_0        
		//   85  145:istore_0        
				k = ((int) (flag1));
		//   86  146:iload           6
		//   87  148:istore_2        
			}
			return android.view.View.MeasureSpec.makeMeasureSpec(i, k);
		//   88  149:iload_0         
		//   89  150:iload_2         
		//   90  151:invokestatic    #237 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   91  154:ireturn         
		}

		private int[] getChildRectangleOnScreenScrollAmount(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			int i = getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #242 <Method int getPaddingLeft()>
		//    2    4:istore          5
			int j = getPaddingTop();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #245 <Method int getPaddingTop()>
		//    5   10:istore          6
			int k = getWidth();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #248 <Method int getWidth()>
		//    8   16:istore          7
			int j2 = getPaddingRight();
		//    9   18:aload_0         
		//   10   19:invokevirtual   #251 <Method int getPaddingRight()>
		//   11   22:istore          14
			int i1 = getHeight();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #254 <Method int getHeight()>
		//   14   28:istore          9
			int j1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #257 <Method int getPaddingBottom()>
		//   17   34:istore          10
			int k2 = (view.getLeft() + rect.left) - view.getScrollX();
		//   18   36:aload_2         
		//   19   37:invokevirtual   #260 <Method int View.getLeft()>
		//   20   40:aload_3         
		//   21   41:getfield        #265 <Field int Rect.left>
		//   22   44:iadd            
		//   23   45:aload_2         
		//   24   46:invokevirtual   #268 <Method int View.getScrollX()>
		//   25   49:isub            
		//   26   50:istore          15
			int k1 = (view.getTop() + rect.top) - view.getScrollY();
		//   27   52:aload_2         
		//   28   53:invokevirtual   #271 <Method int View.getTop()>
		//   29   56:aload_3         
		//   30   57:getfield        #274 <Field int Rect.top>
		//   31   60:iadd            
		//   32   61:aload_2         
		//   33   62:invokevirtual   #277 <Method int View.getScrollY()>
		//   34   65:isub            
		//   35   66:istore          11
			int l2 = rect.width();
		//   36   68:aload_3         
		//   37   69:invokevirtual   #280 <Method int Rect.width()>
		//   38   72:istore          16
			int l1 = rect.height();
		//   39   74:aload_3         
		//   40   75:invokevirtual   #283 <Method int Rect.height()>
		//   41   78:istore          12
			int i2 = k2 - i;
		//   42   80:iload           15
		//   43   82:iload           5
		//   44   84:isub            
		//   45   85:istore          13
			i = Math.min(0, i2);
		//   46   87:iconst_0        
		//   47   88:iload           13
		//   48   90:invokestatic    #224 <Method int Math.min(int, int)>
		//   49   93:istore          5
			int l = k1 - j;
		//   50   95:iload           11
		//   51   97:iload           6
		//   52   99:isub            
		//   53  100:istore          8
			j = Math.min(0, l);
		//   54  102:iconst_0        
		//   55  103:iload           8
		//   56  105:invokestatic    #224 <Method int Math.min(int, int)>
		//   57  108:istore          6
			j2 = (l2 + k2) - (k - j2);
		//   58  110:iload           16
		//   59  112:iload           15
		//   60  114:iadd            
		//   61  115:iload           7
		//   62  117:iload           14
		//   63  119:isub            
		//   64  120:isub            
		//   65  121:istore          14
			k = Math.max(0, j2);
		//   66  123:iconst_0        
		//   67  124:iload           14
		//   68  126:invokestatic    #221 <Method int Math.max(int, int)>
		//   69  129:istore          7
			i1 = Math.max(0, (l1 + k1) - (i1 - j1));
		//   70  131:iconst_0        
		//   71  132:iload           12
		//   72  134:iload           11
		//   73  136:iadd            
		//   74  137:iload           9
		//   75  139:iload           10
		//   76  141:isub            
		//   77  142:isub            
		//   78  143:invokestatic    #221 <Method int Math.max(int, int)>
		//   79  146:istore          9
			if(getLayoutDirection() == 1)
		//*  80  148:aload_0         
		//*  81  149:invokevirtual   #286 <Method int getLayoutDirection()>
		//*  82  152:iconst_1        
		//*  83  153:icmpne          180
			{
				if(k != 0)
		//*  84  156:iload           7
		//*  85  158:ifeq            168
					i = k;
		//   86  161:iload           7
		//   87  163:istore          5
				else
		//*  88  165:goto            197
					i = Math.max(i, j2);
		//   89  168:iload           5
		//   90  170:iload           14
		//   91  172:invokestatic    #221 <Method int Math.max(int, int)>
		//   92  175:istore          5
			} else
		//*  93  177:goto            197
			if(i == 0)
		//*  94  180:iload           5
		//*  95  182:ifeq            188
		//*  96  185:goto            197
				i = Math.min(i2, k);
		//   97  188:iload           13
		//   98  190:iload           7
		//   99  192:invokestatic    #224 <Method int Math.min(int, int)>
		//  100  195:istore          5
			if(j == 0)
		//* 101  197:iload           6
		//* 102  199:ifeq            205
		//* 103  202:goto            214
				j = Math.min(l, i1);
		//  104  205:iload           8
		//  105  207:iload           9
		//  106  209:invokestatic    #224 <Method int Math.min(int, int)>
		//  107  212:istore          6
			return (new int[] {
				i, j
			});
		//  108  214:iconst_2        
		//  109  215:newarray        int[]
		//  110  217:dup             
		//  111  218:iconst_0        
		//  112  219:iload           5
		//  113  221:iastore         
		//  114  222:dup             
		//  115  223:iconst_1        
		//  116  224:iload           6
		//  117  226:iastore         
		//  118  227:areturn         
		}

		public static Properties getProperties(Context context, AttributeSet attributeset, int i, int j)
		{
			Properties properties = new Properties();
		//    0    0:new             #16  <Class RecyclerView$LayoutManager$Properties>
		//    1    3:dup             
		//    2    4:invokespecial   #289 <Method void RecyclerView$LayoutManager$Properties()>
		//    3    7:astore          4
			context = ((Context) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, j)));
		//    4    9:aload_0         
		//    5   10:aload_1         
		//    6   11:getstatic       #295 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
		//    7   14:iload_2         
		//    8   15:iload_3         
		//    9   16:invokevirtual   #301 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
		//   10   19:astore_0        
			properties.orientation = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_orientation, 1);
		//   11   20:aload           4
		//   12   22:aload_0         
		//   13   23:getstatic       #304 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_orientation>
		//   14   26:iconst_1        
		//   15   27:invokevirtual   #309 <Method int TypedArray.getInt(int, int)>
		//   16   30:putfield        #312 <Field int RecyclerView$LayoutManager$Properties.orientation>
			properties.spanCount = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_spanCount, 1);
		//   17   33:aload           4
		//   18   35:aload_0         
		//   19   36:getstatic       #315 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_spanCount>
		//   20   39:iconst_1        
		//   21   40:invokevirtual   #309 <Method int TypedArray.getInt(int, int)>
		//   22   43:putfield        #318 <Field int RecyclerView$LayoutManager$Properties.spanCount>
			properties.reverseLayout = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_reverseLayout, false);
		//   23   46:aload           4
		//   24   48:aload_0         
		//   25   49:getstatic       #321 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_reverseLayout>
		//   26   52:iconst_0        
		//   27   53:invokevirtual   #325 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   28   56:putfield        #328 <Field boolean RecyclerView$LayoutManager$Properties.reverseLayout>
			properties.stackFromEnd = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_stackFromEnd, false);
		//   29   59:aload           4
		//   30   61:aload_0         
		//   31   62:getstatic       #331 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_stackFromEnd>
		//   32   65:iconst_0        
		//   33   66:invokevirtual   #325 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   34   69:putfield        #334 <Field boolean RecyclerView$LayoutManager$Properties.stackFromEnd>
			((TypedArray) (context)).recycle();
		//   35   72:aload_0         
		//   36   73:invokevirtual   #337 <Method void TypedArray.recycle()>
			return properties;
		//   37   76:aload           4
		//   38   78:areturn         
		}

		private boolean isFocusedChildVisibleAfterScrolling(RecyclerView recyclerview, int i, int j)
		{
			recyclerview = ((RecyclerView) (recyclerview.getFocusedChild()));
		//    0    0:aload_1         
		//    1    1:invokevirtual   #343 <Method View RecyclerView.getFocusedChild()>
		//    2    4:astore_1        
			if(recyclerview == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return false;
		//    5    9:iconst_0        
		//    6   10:ireturn         
			int k = getPaddingLeft();
		//    7   11:aload_0         
		//    8   12:invokevirtual   #242 <Method int getPaddingLeft()>
		//    9   15:istore          4
			int l = getPaddingTop();
		//   10   17:aload_0         
		//   11   18:invokevirtual   #245 <Method int getPaddingTop()>
		//   12   21:istore          5
			int i1 = getWidth();
		//   13   23:aload_0         
		//   14   24:invokevirtual   #248 <Method int getWidth()>
		//   15   27:istore          6
			int j1 = getPaddingRight();
		//   16   29:aload_0         
		//   17   30:invokevirtual   #251 <Method int getPaddingRight()>
		//   18   33:istore          7
			int k1 = getHeight();
		//   19   35:aload_0         
		//   20   36:invokevirtual   #254 <Method int getHeight()>
		//   21   39:istore          8
			int l1 = getPaddingBottom();
		//   22   41:aload_0         
		//   23   42:invokevirtual   #257 <Method int getPaddingBottom()>
		//   24   45:istore          9
			Rect rect = mRecyclerView.mTempRect;
		//   25   47:aload_0         
		//   26   48:getfield        #89  <Field RecyclerView mRecyclerView>
		//   27   51:getfield        #347 <Field Rect RecyclerView.mTempRect>
		//   28   54:astore          10
			getDecoratedBoundsWithMargins(((View) (recyclerview)), rect);
		//   29   56:aload_0         
		//   30   57:aload_1         
		//   31   58:aload           10
		//   32   60:invokevirtual   #351 <Method void getDecoratedBoundsWithMargins(View, Rect)>
			if(rect.left - i < i1 - j1 && rect.right - i > k && rect.top - j < k1 - l1)
		//*  33   63:aload           10
		//*  34   65:getfield        #265 <Field int Rect.left>
		//*  35   68:iload_2         
		//*  36   69:isub            
		//*  37   70:iload           6
		//*  38   72:iload           7
		//*  39   74:isub            
		//*  40   75:icmpge          121
		//*  41   78:aload           10
		//*  42   80:getfield        #354 <Field int Rect.right>
		//*  43   83:iload_2         
		//*  44   84:isub            
		//*  45   85:iload           4
		//*  46   87:icmple          121
		//*  47   90:aload           10
		//*  48   92:getfield        #274 <Field int Rect.top>
		//*  49   95:iload_3         
		//*  50   96:isub            
		//*  51   97:iload           8
		//*  52   99:iload           9
		//*  53  101:isub            
		//*  54  102:icmpge          121
				return rect.bottom - j > l;
		//   55  105:aload           10
		//   56  107:getfield        #357 <Field int Rect.bottom>
		//   57  110:iload_3         
		//   58  111:isub            
		//   59  112:iload           5
		//   60  114:icmpgt          119
		//   61  117:iconst_0        
		//   62  118:ireturn         
		//   63  119:iconst_1        
		//   64  120:ireturn         
			else
				return false;
		//   65  121:iconst_0        
		//   66  122:ireturn         
		}

		private static boolean isMeasurementUpToDate(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(j);
		//    0    0:iload_1         
		//    1    1:invokestatic    #210 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			j = android.view.View.MeasureSpec.getSize(j);
		//    3    5:iload_1         
		//    4    6:invokestatic    #213 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_1        
			boolean flag1 = false;
		//    6   10:iconst_0        
		//    7   11:istore          5
			boolean flag = false;
		//    8   13:iconst_0        
		//    9   14:istore          4
			if(k > 0 && i != k)
		//*  10   16:iload_2         
		//*  11   17:ifle            27
		//*  12   20:iload_0         
		//*  13   21:iload_2         
		//*  14   22:icmpeq          27
				return false;
		//   15   25:iconst_0        
		//   16   26:ireturn         
			if(l != 0x80000000)
		//*  17   27:iload_3         
		//*  18   28:ldc1            #214 <Int 0x80000000>
		//*  19   30:icmpeq          58
				if(l != 0)
		//*  20   33:iload_3         
		//*  21   34:ifeq            56
				{
					if(l != 0x40000000)
		//*  22   37:iload_3         
		//*  23   38:ldc1            #215 <Int 0x40000000>
		//*  24   40:icmpeq          45
						return false;
		//   25   43:iconst_0        
		//   26   44:ireturn         
					if(j == i)
		//*  27   45:iload_1         
		//*  28   46:iload_0         
		//*  29   47:icmpne          53
						flag = true;
		//   30   50:iconst_1        
		//   31   51:istore          4
					return flag;
		//   32   53:iload           4
		//   33   55:ireturn         
				} else
				{
					return true;
		//   34   56:iconst_1        
		//   35   57:ireturn         
				}
			flag = flag1;
		//   36   58:iload           5
		//   37   60:istore          4
			if(j >= i)
		//*  38   62:iload_1         
		//*  39   63:iload_0         
		//*  40   64:icmplt          70
				flag = true;
		//   41   67:iconst_1        
		//   42   68:istore          4
			return flag;
		//   43   70:iload           4
		//   44   72:ireturn         
		}

		private void scrapOrRecycleView(Recycler recycler, int i, View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_3         
		//    1    1:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.shouldIgnore())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #364 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*   5   11:ifeq            15
				return;
		//    6   14:return          
			if(viewholder.isInvalid() && !viewholder.isRemoved() && !mRecyclerView.mAdapter.hasStableIds())
		//*   7   15:aload           4
		//*   8   17:invokevirtual   #367 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   9   20:ifeq            56
		//*  10   23:aload           4
		//*  11   25:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  12   28:ifne            56
		//*  13   31:aload_0         
		//*  14   32:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  15   35:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   38:invokevirtual   #376 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  17   41:ifne            56
			{
				removeViewAt(i);
		//   18   44:aload_0         
		//   19   45:iload_2         
		//   20   46:invokevirtual   #379 <Method void removeViewAt(int)>
				recycler.recycleViewHolderInternal(viewholder);
		//   21   49:aload_1         
		//   22   50:aload           4
		//   23   52:invokevirtual   #384 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
				return;
		//   24   55:return          
			} else
			{
				detachViewAt(i);
		//   25   56:aload_0         
		//   26   57:iload_2         
		//   27   58:invokevirtual   #387 <Method void detachViewAt(int)>
				recycler.scrapView(view);
		//   28   61:aload_1         
		//   29   62:aload_3         
		//   30   63:invokevirtual   #390 <Method void RecyclerView$Recycler.scrapView(View)>
				mRecyclerView.mViewInfoStore.onViewDetached(viewholder);
		//   31   66:aload_0         
		//   32   67:getfield        #89  <Field RecyclerView mRecyclerView>
		//   33   70:getfield        #93  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   73:aload           4
		//   35   75:invokevirtual   #393 <Method void ViewInfoStore.onViewDetached(RecyclerView$ViewHolder)>
				return;
		//   36   78:return          
			}
		}

		public void addDisappearingView(View view)
		{
			addDisappearingView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #397 <Method void addDisappearingView(View, int)>
		//    4    6:return          
		}

		public void addDisappearingView(View view, int i)
		{
			addViewInt(view, i, true);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_1        
		//    4    4:invokespecial   #399 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void addView(View view)
		{
			addView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #401 <Method void addView(View, int)>
		//    4    6:return          
		}

		public void addView(View view, int i)
		{
			addViewInt(view, i, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:invokespecial   #399 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void assertNotInLayoutOrScroll(String s)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_2        
			if(recyclerview != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          14
				recyclerview.assertNotInLayoutOrScroll(s);
		//    5    9:aload_2         
		//    6   10:aload_1         
		//    7   11:invokevirtual   #404 <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
		//    8   14:return          
		}

		public void attachView(View view, int i)
		{
			attachView(view, i, (LayoutParams)view.getLayoutParams());
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:aload_1         
		//    4    4:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    5    7:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    6   10:invokevirtual   #408 <Method void attachView(View, int, RecyclerView$LayoutParams)>
		//    7   13:return          
		}

		public void attachView(View view, int i, LayoutParams layoutparams)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.isRemoved())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   5   11:ifeq            29
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    6   14:aload_0         
		//    7   15:getfield        #89  <Field RecyclerView mRecyclerView>
		//    8   18:getfield        #93  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//    9   21:aload           4
		//   10   23:invokevirtual   #102 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  11   26:goto            41
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   12   29:aload_0         
		//   13   30:getfield        #89  <Field RecyclerView mRecyclerView>
		//   14   33:getfield        #93  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   15   36:aload           4
		//   16   38:invokevirtual   #99  <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			mChildHelper.attachViewToParent(view, i, ((android.view.ViewGroup.LayoutParams) (layoutparams)), viewholder.isRemoved());
		//   17   41:aload_0         
		//   18   42:getfield        #122 <Field ChildHelper mChildHelper>
		//   19   45:aload_1         
		//   20   46:iload_2         
		//   21   47:aload_3         
		//   22   48:aload           4
		//   23   50:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   24   53:invokevirtual   #192 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//   25   56:return          
		}

		public void calculateItemDecorationsForChild(View view, Rect rect)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_3        
			if(recyclerview == null)
		//*   3    5:aload_3         
		//*   4    6:ifnonnull       18
			{
				rect.set(0, 0, 0, 0);
		//    5    9:aload_2         
		//    6   10:iconst_0        
		//    7   11:iconst_0        
		//    8   12:iconst_0        
		//    9   13:iconst_0        
		//   10   14:invokevirtual   #413 <Method void Rect.set(int, int, int, int)>
				return;
		//   11   17:return          
			} else
			{
				rect.set(recyclerview.getItemDecorInsetsForChild(view));
		//   12   18:aload_2         
		//   13   19:aload_3         
		//   14   20:aload_1         
		//   15   21:invokevirtual   #417 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//   16   24:invokevirtual   #420 <Method void Rect.set(Rect)>
				return;
		//   17   27:return          
			}
		}

		public boolean canScrollHorizontally()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean canScrollVertically()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean checkLayoutParams(LayoutParams layoutparams)
		{
			return layoutparams != null;
		//    0    0:aload_1         
		//    1    1:ifnull          6
		//    2    4:iconst_1        
		//    3    5:ireturn         
		//    4    6:iconst_0        
		//    5    7:ireturn         
		}

		public void collectAdjacentPrefetchPositions(int i, int j, State state, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public void collectInitialPrefetchPositions(int i, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public int computeHorizontalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void detachAndScrapAttachedViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #438 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            29
				scrapOrRecycleView(recycler, i, getChildAt(i));
		//    7   11:aload_0         
		//    8   12:aload_1         
		//    9   13:iload_2         
		//   10   14:aload_0         
		//   11   15:iload_2         
		//   12   16:invokevirtual   #442 <Method View getChildAt(int)>
		//   13   19:invokespecial   #444 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>

		//   14   22:iload_2         
		//   15   23:iconst_1        
		//   16   24:isub            
		//   17   25:istore_2        
		//*  18   26:goto            7
		//   19   29:return          
		}

		public void detachViewAt(int i)
		{
			detachViewInternal(i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:iload_1         
		//    4    4:invokevirtual   #442 <Method View getChildAt(int)>
		//    5    7:invokespecial   #446 <Method void detachViewInternal(int, View)>
		//    6   10:return          
		}

		void dispatchAttachedToWindow(RecyclerView recyclerview)
		{
			mIsAttachedToWindow = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onAttachedToWindow(recyclerview);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #451 <Method void onAttachedToWindow(RecyclerView)>
		//    6   10:return          
		}

		void dispatchDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			mIsAttachedToWindow = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onDetachedFromWindow(recyclerview, recycler);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:aload_2         
		//    6    8:invokevirtual   #456 <Method void onDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		//    7   11:return          
		}

		public View findContainingItemView(View view)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_2        
			if(recyclerview == null)
		//*   3    5:aload_2         
		//*   4    6:ifnonnull       11
				return null;
		//    5    9:aconst_null     
		//    6   10:areturn         
			view = recyclerview.findContainingItemView(view);
		//    7   11:aload_2         
		//    8   12:aload_1         
		//    9   13:invokevirtual   #460 <Method View RecyclerView.findContainingItemView(View)>
		//   10   16:astore_1        
			if(view == null)
		//*  11   17:aload_1         
		//*  12   18:ifnonnull       23
				return null;
		//   13   21:aconst_null     
		//   14   22:areturn         
			if(mChildHelper.isHidden(view))
		//*  15   23:aload_0         
		//*  16   24:getfield        #122 <Field ChildHelper mChildHelper>
		//*  17   27:aload_1         
		//*  18   28:invokevirtual   #464 <Method boolean ChildHelper.isHidden(View)>
		//*  19   31:ifeq            36
				return null;
		//   20   34:aconst_null     
		//   21   35:areturn         
			else
				return view;
		//   22   36:aload_1         
		//   23   37:areturn         
		}

		public View findViewByPosition(int i)
		{
			int k = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method int getChildCount()>
		//    2    4:istore_3        
			for(int j = 0; j < k; j++)
		//*   3    5:iconst_0        
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iload_3         
		//*   7    9:icmpge          82
			{
				View view = getChildAt(j);
		//    8   12:aload_0         
		//    9   13:iload_2         
		//   10   14:invokevirtual   #442 <Method View getChildAt(int)>
		//   11   17:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   12   19:aload           4
		//   13   21:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   24:astore          5
				if(viewholder != null && viewholder.getLayoutPosition() == i && !viewholder.shouldIgnore() && (mRecyclerView.mState.isPreLayout() || !viewholder.isRemoved()))
		//*  15   26:aload           5
		//*  16   28:ifnonnull       34
		//*  17   31:goto            75
		//*  18   34:aload           5
		//*  19   36:invokevirtual   #469 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  20   39:iload_1         
		//*  21   40:icmpne          75
		//*  22   43:aload           5
		//*  23   45:invokevirtual   #364 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  24   48:ifne            75
		//*  25   51:aload_0         
		//*  26   52:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  27   55:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//*  28   58:invokevirtual   #478 <Method boolean RecyclerView$State.isPreLayout()>
		//*  29   61:ifne            72
		//*  30   64:aload           5
		//*  31   66:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  32   69:ifne            75
					return view;
		//   33   72:aload           4
		//   34   74:areturn         
			}

		//   35   75:iload_2         
		//   36   76:iconst_1        
		//   37   77:iadd            
		//   38   78:istore_2        
		//*  39   79:goto            7
			return null;
		//   40   82:aconst_null     
		//   41   83:areturn         
		}

		public abstract LayoutParams generateDefaultLayoutParams();

		public LayoutParams generateLayoutParams(Context context, AttributeSet attributeset)
		{
			return new LayoutParams(context, attributeset);
		//    0    0:new             #110 <Class RecyclerView$LayoutParams>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:aload_2         
		//    4    6:invokespecial   #485 <Method void RecyclerView$LayoutParams(Context, AttributeSet)>
		//    5    9:areturn         
		}

		public LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			if(layoutparams instanceof LayoutParams)
		//*   0    0:aload_1         
		//*   1    1:instanceof      #110 <Class RecyclerView$LayoutParams>
		//*   2    4:ifeq            19
				return new LayoutParams((LayoutParams)layoutparams);
		//    3    7:new             #110 <Class RecyclerView$LayoutParams>
		//    4   10:dup             
		//    5   11:aload_1         
		//    6   12:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    7   15:invokespecial   #489 <Method void RecyclerView$LayoutParams(RecyclerView$LayoutParams)>
		//    8   18:areturn         
			if(layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
		//*   9   19:aload_1         
		//*  10   20:instanceof      #491 <Class android.view.ViewGroup$MarginLayoutParams>
		//*  11   23:ifeq            38
				return new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
		//   12   26:new             #110 <Class RecyclerView$LayoutParams>
		//   13   29:dup             
		//   14   30:aload_1         
		//   15   31:checkcast       #491 <Class android.view.ViewGroup$MarginLayoutParams>
		//   16   34:invokespecial   #494 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$MarginLayoutParams)>
		//   17   37:areturn         
			else
				return new LayoutParams(layoutparams);
		//   18   38:new             #110 <Class RecyclerView$LayoutParams>
		//   19   41:dup             
		//   20   42:aload_1         
		//   21   43:invokespecial   #497 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$LayoutParams)>
		//   22   46:areturn         
		}

		public int getBaseline()
		{
			return -1;
		//    0    0:iconst_m1       
		//    1    1:ireturn         
		}

		public int getBottomDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.bottom;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #357 <Field int Rect.bottom>
		//    5   13:ireturn         
		}

		public View getChildAt(int i)
		{
			ChildHelper childhelper = mChildHelper;
		//    0    0:aload_0         
		//    1    1:getfield        #122 <Field ChildHelper mChildHelper>
		//    2    4:astore_2        
			if(childhelper != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          15
				return childhelper.getChildAt(i);
		//    5    9:aload_2         
		//    6   10:iload_1         
		//    7   11:invokevirtual   #503 <Method View ChildHelper.getChildAt(int)>
		//    8   14:areturn         
			else
				return null;
		//    9   15:aconst_null     
		//   10   16:areturn         
		}

		public int getChildCount()
		{
			ChildHelper childhelper = mChildHelper;
		//    0    0:aload_0         
		//    1    1:getfield        #122 <Field ChildHelper mChildHelper>
		//    2    4:astore_1        
			if(childhelper != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          14
				return childhelper.getChildCount();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #132 <Method int ChildHelper.getChildCount()>
		//    7   13:ireturn         
			else
				return 0;
		//    8   14:iconst_0        
		//    9   15:ireturn         
		}

		public boolean getClipToPadding()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			return recyclerview != null && recyclerview.mClipToPadding;
		//    3    5:aload_1         
		//    4    6:ifnull          18
		//    5    9:aload_1         
		//    6   10:getfield        #507 <Field boolean RecyclerView.mClipToPadding>
		//    7   13:ifeq            18
		//    8   16:iconst_1        
		//    9   17:ireturn         
		//   10   18:iconst_0        
		//   11   19:ireturn         
		}

		public int getColumnCountForAccessibility(Recycler recycler, State state)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			int i = 1;
		//    3    5:iconst_1        
		//    4    6:istore_3        
			if(recycler != null)
		//*   5    7:aload_1         
		//*   6    8:ifnull          40
			{
				if(((RecyclerView) (recycler)).mAdapter == null)
		//*   7   11:aload_1         
		//*   8   12:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   9   15:ifnonnull       20
					return 1;
		//   10   18:iconst_1        
		//   11   19:ireturn         
				if(canScrollHorizontally())
		//*  12   20:aload_0         
		//*  13   21:invokevirtual   #511 <Method boolean canScrollHorizontally()>
		//*  14   24:ifeq            38
					i = mRecyclerView.mAdapter.getItemCount();
		//   15   27:aload_0         
		//   16   28:getfield        #89  <Field RecyclerView mRecyclerView>
		//   17   31:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   18   34:invokevirtual   #514 <Method int RecyclerView$Adapter.getItemCount()>
		//   19   37:istore_3        
				return i;
		//   20   38:iload_3         
		//   21   39:ireturn         
			} else
			{
				return 1;
		//   22   40:iconst_1        
		//   23   41:ireturn         
			}
		}

		public int getDecoratedBottom(View view)
		{
			return view.getBottom() + getBottomDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #518 <Method int View.getBottom()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #520 <Method int getBottomDecorationHeight(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public void getDecoratedBoundsWithMargins(View view, Rect rect)
		{
			RecyclerView.getDecoratedBoundsWithMarginsInt(view, rect);
		//    0    0:aload_1         
		//    1    1:aload_2         
		//    2    2:invokestatic    #523 <Method void RecyclerView.getDecoratedBoundsWithMarginsInt(View, Rect)>
		//    3    5:return          
		}

		public int getDecoratedLeft(View view)
		{
			return view.getLeft() - getLeftDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #260 <Method int View.getLeft()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #527 <Method int getLeftDecorationWidth(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public int getDecoratedMeasuredHeight(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredHeight() + rect.top + rect.bottom;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #531 <Method int View.getMeasuredHeight()>
		//    7   15:aload_2         
		//    8   16:getfield        #274 <Field int Rect.top>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #357 <Field int Rect.bottom>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedMeasuredWidth(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredWidth() + rect.left + rect.right;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #535 <Method int View.getMeasuredWidth()>
		//    7   15:aload_2         
		//    8   16:getfield        #265 <Field int Rect.left>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #354 <Field int Rect.right>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedRight(View view)
		{
			return view.getRight() + getRightDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #539 <Method int View.getRight()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #542 <Method int getRightDecorationWidth(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public int getDecoratedTop(View view)
		{
			return view.getTop() - getTopDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #271 <Method int View.getTop()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #546 <Method int getTopDecorationHeight(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public View getFocusedChild()
		{
			Object obj = ((Object) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(obj == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return null;
		//    5    9:aconst_null     
		//    6   10:areturn         
			obj = ((Object) (((RecyclerView) (obj)).getFocusedChild()));
		//    7   11:aload_1         
		//    8   12:invokevirtual   #343 <Method View RecyclerView.getFocusedChild()>
		//    9   15:astore_1        
			if(obj != null)
		//*  10   16:aload_1         
		//*  11   17:ifnull          35
			{
				if(mChildHelper.isHidden(((View) (obj))))
		//*  12   20:aload_0         
		//*  13   21:getfield        #122 <Field ChildHelper mChildHelper>
		//*  14   24:aload_1         
		//*  15   25:invokevirtual   #464 <Method boolean ChildHelper.isHidden(View)>
		//*  16   28:ifeq            33
					return null;
		//   17   31:aconst_null     
		//   18   32:areturn         
				else
					return ((View) (obj));
		//   19   33:aload_1         
		//   20   34:areturn         
			} else
			{
				return null;
		//   21   35:aconst_null     
		//   22   36:areturn         
			}
		}

		public int getHeight()
		{
			return mHeight;
		//    0    0:aload_0         
		//    1    1:getfield        #549 <Field int mHeight>
		//    2    4:ireturn         
		}

		public int getHeightMode()
		{
			return mHeightMode;
		//    0    0:aload_0         
		//    1    1:getfield        #552 <Field int mHeightMode>
		//    2    4:ireturn         
		}

		public int getItemCount()
		{
			Object obj = ((Object) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(obj != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          17
				obj = ((Object) (((RecyclerView) (obj)).getAdapter()));
		//    5    9:aload_1         
		//    6   10:invokevirtual   #556 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//    7   13:astore_1        
			else
		//*   8   14:goto            19
				obj = null;
		//    9   17:aconst_null     
		//   10   18:astore_1        
			if(obj != null)
		//*  11   19:aload_1         
		//*  12   20:ifnull          28
				return ((Adapter) (obj)).getItemCount();
		//   13   23:aload_1         
		//   14   24:invokevirtual   #514 <Method int RecyclerView$Adapter.getItemCount()>
		//   15   27:ireturn         
			else
				return 0;
		//   16   28:iconst_0        
		//   17   29:ireturn         
		}

		public int getLayoutDirection()
		{
			return ViewCompat.getLayoutDirection(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #560 <Method int ViewCompat.getLayoutDirection(View)>
		//    3    7:ireturn         
		}

		public int getLeftDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.left;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #265 <Field int Rect.left>
		//    5   13:ireturn         
		}

		public int getMinimumHeight()
		{
			return ViewCompat.getMinimumHeight(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #563 <Method int ViewCompat.getMinimumHeight(View)>
		//    3    7:ireturn         
		}

		public int getMinimumWidth()
		{
			return ViewCompat.getMinimumWidth(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #566 <Method int ViewCompat.getMinimumWidth(View)>
		//    3    7:ireturn         
		}

		public int getPaddingBottom()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          14
				return recyclerview.getPaddingBottom();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #567 <Method int RecyclerView.getPaddingBottom()>
		//    7   13:ireturn         
			else
				return 0;
		//    8   14:iconst_0        
		//    9   15:ireturn         
		}

		public int getPaddingLeft()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          14
				return recyclerview.getPaddingLeft();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #568 <Method int RecyclerView.getPaddingLeft()>
		//    7   13:ireturn         
			else
				return 0;
		//    8   14:iconst_0        
		//    9   15:ireturn         
		}

		public int getPaddingRight()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          14
				return recyclerview.getPaddingRight();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #569 <Method int RecyclerView.getPaddingRight()>
		//    7   13:ireturn         
			else
				return 0;
		//    8   14:iconst_0        
		//    9   15:ireturn         
		}

		public int getPaddingTop()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          14
				return recyclerview.getPaddingTop();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #570 <Method int RecyclerView.getPaddingTop()>
		//    7   13:ireturn         
			else
				return 0;
		//    8   14:iconst_0        
		//    9   15:ireturn         
		}

		public int getPosition(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:invokevirtual   #574 <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    4   10:ireturn         
		}

		public int getRightDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.right;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #354 <Field int Rect.right>
		//    5   13:ireturn         
		}

		public int getRowCountForAccessibility(Recycler recycler, State state)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			int i = 1;
		//    3    5:iconst_1        
		//    4    6:istore_3        
			if(recycler != null)
		//*   5    7:aload_1         
		//*   6    8:ifnull          40
			{
				if(((RecyclerView) (recycler)).mAdapter == null)
		//*   7   11:aload_1         
		//*   8   12:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   9   15:ifnonnull       20
					return 1;
		//   10   18:iconst_1        
		//   11   19:ireturn         
				if(canScrollVertically())
		//*  12   20:aload_0         
		//*  13   21:invokevirtual   #577 <Method boolean canScrollVertically()>
		//*  14   24:ifeq            38
					i = mRecyclerView.mAdapter.getItemCount();
		//   15   27:aload_0         
		//   16   28:getfield        #89  <Field RecyclerView mRecyclerView>
		//   17   31:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   18   34:invokevirtual   #514 <Method int RecyclerView$Adapter.getItemCount()>
		//   19   37:istore_3        
				return i;
		//   20   38:iload_3         
		//   21   39:ireturn         
			} else
			{
				return 1;
		//   22   40:iconst_1        
		//   23   41:ireturn         
			}
		}

		public int getSelectionModeForAccessibility(Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int getTopDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.top;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #274 <Field int Rect.top>
		//    5   13:ireturn         
		}

		public void getTransformedBoundingBox(View view, boolean flag, Rect rect)
		{
			if(flag)
		//*   0    0:iload_2         
		//*   1    1:ifeq            55
			{
				Rect rect1 = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    2    4:aload_1         
		//    3    5:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    8:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    5   11:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          4
				rect.set(-rect1.left, -rect1.top, view.getWidth() + rect1.right, view.getHeight() + rect1.bottom);
		//    7   16:aload_3         
		//    8   17:aload           4
		//    9   19:getfield        #265 <Field int Rect.left>
		//   10   22:ineg            
		//   11   23:aload           4
		//   12   25:getfield        #274 <Field int Rect.top>
		//   13   28:ineg            
		//   14   29:aload_1         
		//   15   30:invokevirtual   #581 <Method int View.getWidth()>
		//   16   33:aload           4
		//   17   35:getfield        #354 <Field int Rect.right>
		//   18   38:iadd            
		//   19   39:aload_1         
		//   20   40:invokevirtual   #582 <Method int View.getHeight()>
		//   21   43:aload           4
		//   22   45:getfield        #357 <Field int Rect.bottom>
		//   23   48:iadd            
		//   24   49:invokevirtual   #413 <Method void Rect.set(int, int, int, int)>
			} else
		//*  25   52:goto            69
			{
				rect.set(0, 0, view.getWidth(), view.getHeight());
		//   26   55:aload_3         
		//   27   56:iconst_0        
		//   28   57:iconst_0        
		//   29   58:aload_1         
		//   30   59:invokevirtual   #581 <Method int View.getWidth()>
		//   31   62:aload_1         
		//   32   63:invokevirtual   #582 <Method int View.getHeight()>
		//   33   66:invokevirtual   #413 <Method void Rect.set(int, int, int, int)>
			}
			if(mRecyclerView != null)
		//*  34   69:aload_0         
		//*  35   70:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  36   73:ifnull          162
			{
				Matrix matrix = view.getMatrix();
		//   37   76:aload_1         
		//   38   77:invokevirtual   #586 <Method Matrix View.getMatrix()>
		//   39   80:astore          4
				if(matrix != null && !matrix.isIdentity())
		//*  40   82:aload           4
		//*  41   84:ifnull          162
		//*  42   87:aload           4
		//*  43   89:invokevirtual   #591 <Method boolean Matrix.isIdentity()>
		//*  44   92:ifne            162
				{
					RectF rectf = mRecyclerView.mTempRectF;
		//   45   95:aload_0         
		//   46   96:getfield        #89  <Field RecyclerView mRecyclerView>
		//   47   99:getfield        #595 <Field RectF RecyclerView.mTempRectF>
		//   48  102:astore          5
					rectf.set(rect);
		//   49  104:aload           5
		//   50  106:aload_3         
		//   51  107:invokevirtual   #598 <Method void RectF.set(Rect)>
					matrix.mapRect(rectf);
		//   52  110:aload           4
		//   53  112:aload           5
		//   54  114:invokevirtual   #602 <Method boolean Matrix.mapRect(RectF)>
		//   55  117:pop             
					rect.set((int)Math.floor(rectf.left), (int)Math.floor(rectf.top), (int)Math.ceil(rectf.right), (int)Math.ceil(rectf.bottom));
		//   56  118:aload_3         
		//   57  119:aload           5
		//   58  121:getfield        #605 <Field float RectF.left>
		//   59  124:f2d             
		//   60  125:invokestatic    #609 <Method double Math.floor(double)>
		//   61  128:d2i             
		//   62  129:aload           5
		//   63  131:getfield        #611 <Field float RectF.top>
		//   64  134:f2d             
		//   65  135:invokestatic    #609 <Method double Math.floor(double)>
		//   66  138:d2i             
		//   67  139:aload           5
		//   68  141:getfield        #613 <Field float RectF.right>
		//   69  144:f2d             
		//   70  145:invokestatic    #616 <Method double Math.ceil(double)>
		//   71  148:d2i             
		//   72  149:aload           5
		//   73  151:getfield        #618 <Field float RectF.bottom>
		//   74  154:f2d             
		//   75  155:invokestatic    #616 <Method double Math.ceil(double)>
		//   76  158:d2i             
		//   77  159:invokevirtual   #413 <Method void Rect.set(int, int, int, int)>
				}
			}
			rect.offset(view.getLeft(), view.getTop());
		//   78  162:aload_3         
		//   79  163:aload_1         
		//   80  164:invokevirtual   #260 <Method int View.getLeft()>
		//   81  167:aload_1         
		//   82  168:invokevirtual   #271 <Method int View.getTop()>
		//   83  171:invokevirtual   #621 <Method void Rect.offset(int, int)>
		//   84  174:return          
		}

		public int getWidth()
		{
			return mWidth;
		//    0    0:aload_0         
		//    1    1:getfield        #623 <Field int mWidth>
		//    2    4:ireturn         
		}

		public int getWidthMode()
		{
			return mWidthMode;
		//    0    0:aload_0         
		//    1    1:getfield        #626 <Field int mWidthMode>
		//    2    4:ireturn         
		}

		boolean hasFlexibleChildInBothOrientations()
		{
			int j = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method int getChildCount()>
		//    2    4:istore_2        
			for(int i = 0; i < j; i++)
		//*   3    5:iconst_0        
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iload_2         
		//*   7    9:icmpge          44
			{
				android.view.ViewGroup.LayoutParams layoutparams = getChildAt(i).getLayoutParams();
		//    8   12:aload_0         
		//    9   13:iload_1         
		//   10   14:invokevirtual   #442 <Method View getChildAt(int)>
		//   11   17:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   12   20:astore_3        
				if(layoutparams.width < 0 && layoutparams.height < 0)
		//*  13   21:aload_3         
		//*  14   22:getfield        #631 <Field int android.view.ViewGroup$LayoutParams.width>
		//*  15   25:ifge            37
		//*  16   28:aload_3         
		//*  17   29:getfield        #633 <Field int android.view.ViewGroup$LayoutParams.height>
		//*  18   32:ifge            37
					return true;
		//   19   35:iconst_1        
		//   20   36:ireturn         
			}

		//   21   37:iload_1         
		//   22   38:iconst_1        
		//   23   39:iadd            
		//   24   40:istore_1        
		//*  25   41:goto            7
			return false;
		//   26   44:iconst_0        
		//   27   45:ireturn         
		}

		public boolean isAttachedToWindow()
		{
			return mIsAttachedToWindow;
		//    0    0:aload_0         
		//    1    1:getfield        #68  <Field boolean mIsAttachedToWindow>
		//    2    4:ireturn         
		}

		public boolean isAutoMeasureEnabled()
		{
			return mAutoMeasure;
		//    0    0:aload_0         
		//    1    1:getfield        #70  <Field boolean mAutoMeasure>
		//    2    4:ireturn         
		}

		public final boolean isItemPrefetchEnabled()
		{
			return mItemPrefetchEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//    2    4:ireturn         
		}

		public boolean isLayoutHierarchical(Recycler recycler, State state)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean isSmoothScrolling()
		{
			SmoothScroller smoothscroller = mSmoothScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:astore_1        
			return smoothscroller != null && smoothscroller.isRunning();
		//    3    5:aload_1         
		//    4    6:ifnull          18
		//    5    9:aload_1         
		//    6   10:invokevirtual   #178 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//    7   13:ifeq            18
		//    8   16:iconst_1        
		//    9   17:ireturn         
		//   10   18:iconst_0        
		//   11   19:ireturn         
		}

		public boolean isViewPartiallyVisible(View view, boolean flag, boolean flag1)
		{
			if(mHorizontalBoundCheck.isViewWithinBoundFlags(view, 24579) && mVerticalBoundCheck.isViewWithinBoundFlags(view, 24579))
		//*   0    0:aload_0         
		//*   1    1:getfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
		//*   2    4:aload_1         
		//*   3    5:sipush          24579
		//*   4    8:invokevirtual   #645 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*   5   11:ifeq            33
		//*   6   14:aload_0         
		//*   7   15:getfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
		//*   8   18:aload_1         
		//*   9   19:sipush          24579
		//*  10   22:invokevirtual   #645 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*  11   25:ifeq            33
				flag1 = true;
		//   12   28:iconst_1        
		//   13   29:istore_3        
			else
		//*  14   30:goto            35
				flag1 = false;
		//   15   33:iconst_0        
		//   16   34:istore_3        
			if(flag)
		//*  17   35:iload_2         
		//*  18   36:ifeq            41
				return flag1;
		//   19   39:iload_3         
		//   20   40:ireturn         
			else
				return flag1 ^ true;
		//   21   41:iload_3         
		//   22   42:iconst_1        
		//   23   43:ixor            
		//   24   44:ireturn         
		}

		public void layoutDecoratedWithMargins(View view, int i, int j, int k, int l)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:astore          6
			Rect rect = layoutparams.mDecorInsets;
		//    4    9:aload           6
		//    5   11:getfield        #502 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          7
			view.layout(i + rect.left + layoutparams.leftMargin, j + rect.top + layoutparams.topMargin, k - rect.right - layoutparams.rightMargin, l - rect.bottom - layoutparams.bottomMargin);
		//    7   16:aload_1         
		//    8   17:iload_2         
		//    9   18:aload           7
		//   10   20:getfield        #265 <Field int Rect.left>
		//   11   23:iadd            
		//   12   24:aload           6
		//   13   26:getfield        #650 <Field int RecyclerView$LayoutParams.leftMargin>
		//   14   29:iadd            
		//   15   30:iload_3         
		//   16   31:aload           7
		//   17   33:getfield        #274 <Field int Rect.top>
		//   18   36:iadd            
		//   19   37:aload           6
		//   20   39:getfield        #653 <Field int RecyclerView$LayoutParams.topMargin>
		//   21   42:iadd            
		//   22   43:iload           4
		//   23   45:aload           7
		//   24   47:getfield        #354 <Field int Rect.right>
		//   25   50:isub            
		//   26   51:aload           6
		//   27   53:getfield        #656 <Field int RecyclerView$LayoutParams.rightMargin>
		//   28   56:isub            
		//   29   57:iload           5
		//   30   59:aload           7
		//   31   61:getfield        #357 <Field int Rect.bottom>
		//   32   64:isub            
		//   33   65:aload           6
		//   34   67:getfield        #659 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   35   70:isub            
		//   36   71:invokevirtual   #662 <Method void View.layout(int, int, int, int)>
		//   37   74:return          
		}

		public void measureChildWithMargins(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #108 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #110 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #89  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #417 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #265 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #354 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #274 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #357 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + layoutparams.leftMargin + layoutparams.rightMargin + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #248 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #666 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #242 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #251 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:aload           8
		//   31   66:getfield        #650 <Field int RecyclerView$LayoutParams.leftMargin>
		//   32   69:iadd            
		//   33   70:aload           8
		//   34   72:getfield        #656 <Field int RecyclerView$LayoutParams.rightMargin>
		//   35   75:iadd            
		//   36   76:iload_2         
		//   37   77:iload           6
		//   38   79:iload           7
		//   39   81:iadd            
		//   40   82:iadd            
		//   41   83:iadd            
		//   42   84:aload           8
		//   43   86:getfield        #667 <Field int RecyclerView$LayoutParams.width>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #511 <Method boolean canScrollHorizontally()>
		//   46   93:invokestatic    #669 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   47   96:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + layoutparams.topMargin + layoutparams.bottomMargin + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   48   97:aload_0         
		//   49   98:invokevirtual   #254 <Method int getHeight()>
		//   50  101:aload_0         
		//   51  102:invokevirtual   #671 <Method int getHeightMode()>
		//   52  105:aload_0         
		//   53  106:invokevirtual   #245 <Method int getPaddingTop()>
		//   54  109:aload_0         
		//   55  110:invokevirtual   #257 <Method int getPaddingBottom()>
		//   56  113:iadd            
		//   57  114:aload           8
		//   58  116:getfield        #653 <Field int RecyclerView$LayoutParams.topMargin>
		//   59  119:iadd            
		//   60  120:aload           8
		//   61  122:getfield        #659 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   62  125:iadd            
		//   63  126:iload_3         
		//   64  127:iload           4
		//   65  129:iload           5
		//   66  131:iadd            
		//   67  132:iadd            
		//   68  133:iadd            
		//   69  134:aload           8
		//   70  136:getfield        #672 <Field int RecyclerView$LayoutParams.height>
		//   71  139:aload_0         
		//   72  140:invokevirtual   #577 <Method boolean canScrollVertically()>
		//   73  143:invokestatic    #669 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   74  146:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  75  147:aload_0         
		//*  76  148:aload_1         
		//*  77  149:iload_2         
		//*  78  150:iload_3         
		//*  79  151:aload           8
		//*  80  153:invokevirtual   #676 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  81  156:ifeq            165
				view.measure(i, j);
		//   82  159:aload_1         
		//   83  160:iload_2         
		//   84  161:iload_3         
		//   85  162:invokevirtual   #679 <Method void View.measure(int, int)>
		//   86  165:return          
		}

		public void moveView(int i, int j)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #442 <Method View getChildAt(int)>
		//    3    5:astore_3        
			if(view != null)
		//*   4    6:aload_3         
		//*   5    7:ifnull          22
			{
				detachViewAt(i);
		//    6   10:aload_0         
		//    7   11:iload_1         
		//    8   12:invokevirtual   #387 <Method void detachViewAt(int)>
				attachView(view, j);
		//    9   15:aload_0         
		//   10   16:aload_3         
		//   11   17:iload_2         
		//   12   18:invokevirtual   #681 <Method void attachView(View, int)>
				return;
		//   13   21:return          
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   14   22:new             #142 <Class StringBuilder>
		//   15   25:dup             
		//   16   26:invokespecial   #143 <Method void StringBuilder()>
		//   17   29:astore_3        
				stringbuilder.append("Cannot move a child from non-existing index:");
		//   18   30:aload_3         
		//   19   31:ldc2            #683 <String "Cannot move a child from non-existing index:">
		//   20   34:invokevirtual   #149 <Method StringBuilder StringBuilder.append(String)>
		//   21   37:pop             
				stringbuilder.append(i);
		//   22   38:aload_3         
		//   23   39:iload_1         
		//   24   40:invokevirtual   #153 <Method StringBuilder StringBuilder.append(int)>
		//   25   43:pop             
				stringbuilder.append(mRecyclerView.toString());
		//   26   44:aload_3         
		//   27   45:aload_0         
		//   28   46:getfield        #89  <Field RecyclerView mRecyclerView>
		//   29   49:invokevirtual   #684 <Method String RecyclerView.toString()>
		//   30   52:invokevirtual   #149 <Method StringBuilder StringBuilder.append(String)>
		//   31   55:pop             
				throw new IllegalArgumentException(stringbuilder.toString());
		//   32   56:new             #686 <Class IllegalArgumentException>
		//   33   59:dup             
		//   34   60:aload_3         
		//   35   61:invokevirtual   #162 <Method String StringBuilder.toString()>
		//   36   64:invokespecial   #687 <Method void IllegalArgumentException(String)>
		//   37   67:athrow          
			}
		}

		public void offsetChildrenHorizontal(int i)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_2        
			if(recyclerview != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          14
				recyclerview.offsetChildrenHorizontal(i);
		//    5    9:aload_2         
		//    6   10:iload_1         
		//    7   11:invokevirtual   #690 <Method void RecyclerView.offsetChildrenHorizontal(int)>
		//    8   14:return          
		}

		public void offsetChildrenVertical(int i)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_2        
			if(recyclerview != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          14
				recyclerview.offsetChildrenVertical(i);
		//    5    9:aload_2         
		//    6   10:iload_1         
		//    7   11:invokevirtual   #693 <Method void RecyclerView.offsetChildrenVertical(int)>
		//    8   14:return          
		}

		public void onAdapterChanged(Adapter adapter, Adapter adapter1)
		{
		//    0    0:return          
		}

		public boolean onAddFocusables(RecyclerView recyclerview, ArrayList arraylist, int i, int j)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onAttachedToWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			onDetachedFromWindow(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #704 <Method void onDetachedFromWindow(RecyclerView)>
		//    3    5:return          
		}

		public View onFocusSearchFailed(View view, int i, Recycler recycler, State state)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onInitializeAccessibilityEvent(Recycler recycler, State state, AccessibilityEvent accessibilityevent)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recycler != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          111
			{
				if(accessibilityevent == null)
		//*   5    9:aload_3         
		//*   6   10:ifnonnull       14
					return;
		//    7   13:return          
				boolean flag1 = true;
		//    8   14:iconst_1        
		//    9   15:istore          5
				boolean flag = flag1;
		//   10   17:iload           5
		//   11   19:istore          4
				if(!((RecyclerView) (recycler)).canScrollVertically(1))
		//*  12   21:aload_1         
		//*  13   22:iconst_1        
		//*  14   23:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  15   26:ifne            80
				{
					flag = flag1;
		//   16   29:iload           5
		//   17   31:istore          4
					if(!mRecyclerView.canScrollVertically(-1))
		//*  18   33:aload_0         
		//*  19   34:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  20   37:iconst_m1       
		//*  21   38:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  22   41:ifne            80
					{
						flag = flag1;
		//   23   44:iload           5
		//   24   46:istore          4
						if(!mRecyclerView.canScrollHorizontally(-1))
		//*  25   48:aload_0         
		//*  26   49:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  27   52:iconst_m1       
		//*  28   53:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  29   56:ifne            80
							if(mRecyclerView.canScrollHorizontally(1))
		//*  30   59:aload_0         
		//*  31   60:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  32   63:iconst_1        
		//*  33   64:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  34   67:ifeq            77
								flag = flag1;
		//   35   70:iload           5
		//   36   72:istore          4
							else
		//*  37   74:goto            80
								flag = false;
		//   38   77:iconst_0        
		//   39   78:istore          4
					}
				}
				accessibilityevent.setScrollable(flag);
		//   40   80:aload_3         
		//   41   81:iload           4
		//   42   83:invokevirtual   #719 <Method void AccessibilityEvent.setScrollable(boolean)>
				if(mRecyclerView.mAdapter != null)
		//*  43   86:aload_0         
		//*  44   87:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  45   90:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  46   93:ifnull          110
					accessibilityevent.setItemCount(mRecyclerView.mAdapter.getItemCount());
		//   47   96:aload_3         
		//   48   97:aload_0         
		//   49   98:getfield        #89  <Field RecyclerView mRecyclerView>
		//   50  101:getfield        #371 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   51  104:invokevirtual   #514 <Method int RecyclerView$Adapter.getItemCount()>
		//   52  107:invokevirtual   #722 <Method void AccessibilityEvent.setItemCount(int)>
				return;
		//   53  110:return          
			} else
			{
				return;
		//   54  111:return          
			}
		}

		public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent)
		{
			onInitializeAccessibilityEvent(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilityevent);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #89  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #727 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #89  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #729 <Method void onInitializeAccessibilityEvent(RecyclerView$Recycler, RecyclerView$State, AccessibilityEvent)>
		//    9   19:return          
		}

		void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			onInitializeAccessibilityNodeInfo(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilitynodeinfocompat);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #89  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #727 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #89  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #734 <Method void onInitializeAccessibilityNodeInfo(RecyclerView$Recycler, RecyclerView$State, AccessibilityNodeInfoCompat)>
		//    9   19:return          
		}

		public void onInitializeAccessibilityNodeInfo(Recycler recycler, State state, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			if(mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1))
		//*   0    0:aload_0         
		//*   1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//*   2    4:iconst_m1       
		//*   3    5:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*   4    8:ifne            22
		//*   5   11:aload_0         
		//*   6   12:getfield        #89  <Field RecyclerView mRecyclerView>
		//*   7   15:iconst_m1       
		//*   8   16:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*   9   19:ifeq            34
			{
				accessibilitynodeinfocompat.addAction(8192);
		//   10   22:aload_3         
		//   11   23:sipush          8192
		//   12   26:invokevirtual   #739 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   13   29:aload_3         
		//   14   30:iconst_1        
		//   15   31:invokevirtual   #740 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollHorizontally(1))
		//*  16   34:aload_0         
		//*  17   35:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  18   38:iconst_1        
		//*  19   39:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   42:ifne            56
		//*  21   45:aload_0         
		//*  22   46:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  23   49:iconst_1        
		//*  24   50:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  25   53:ifeq            68
			{
				accessibilitynodeinfocompat.addAction(4096);
		//   26   56:aload_3         
		//   27   57:sipush          4096
		//   28   60:invokevirtual   #739 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   29   63:aload_3         
		//   30   64:iconst_1        
		//   31   65:invokevirtual   #740 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			accessibilitynodeinfocompat.setCollectionInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(getRowCountForAccessibility(recycler, state), getColumnCountForAccessibility(recycler, state), isLayoutHierarchical(recycler, state), getSelectionModeForAccessibility(recycler, state)))));
		//   32   68:aload_3         
		//   33   69:aload_0         
		//   34   70:aload_1         
		//   35   71:aload_2         
		//   36   72:invokevirtual   #742 <Method int getRowCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   37   75:aload_0         
		//   38   76:aload_1         
		//   39   77:aload_2         
		//   40   78:invokevirtual   #744 <Method int getColumnCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   41   81:aload_0         
		//   42   82:aload_1         
		//   43   83:aload_2         
		//   44   84:invokevirtual   #746 <Method boolean isLayoutHierarchical(RecyclerView$Recycler, RecyclerView$State)>
		//   45   87:aload_0         
		//   46   88:aload_1         
		//   47   89:aload_2         
		//   48   90:invokevirtual   #748 <Method int getSelectionModeForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   49   93:invokestatic    #754 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat.obtain(int, int, boolean, int)>
		//   50   96:invokevirtual   #758 <Method void AccessibilityNodeInfoCompat.setCollectionInfo(Object)>
		//   51   99:return          
		}

		public void onInitializeAccessibilityNodeInfoForItem(Recycler recycler, State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			int i;
			if(canScrollVertically())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #577 <Method boolean canScrollVertically()>
		//*   2    4:ifeq            17
				i = getPosition(view);
		//    3    7:aload_0         
		//    4    8:aload_3         
		//    5    9:invokevirtual   #762 <Method int getPosition(View)>
		//    6   12:istore          5
			else
		//*   7   14:goto            20
				i = 0;
		//    8   17:iconst_0        
		//    9   18:istore          5
			int j;
			if(canScrollHorizontally())
		//*  10   20:aload_0         
		//*  11   21:invokevirtual   #511 <Method boolean canScrollHorizontally()>
		//*  12   24:ifeq            37
				j = getPosition(view);
		//   13   27:aload_0         
		//   14   28:aload_3         
		//   15   29:invokevirtual   #762 <Method int getPosition(View)>
		//   16   32:istore          6
			else
		//*  17   34:goto            40
				j = 0;
		//   18   37:iconst_0        
		//   19   38:istore          6
			accessibilitynodeinfocompat.setCollectionItemInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, j, 1, false, false))));
		//   20   40:aload           4
		//   21   42:iload           5
		//   22   44:iconst_1        
		//   23   45:iload           6
		//   24   47:iconst_1        
		//   25   48:iconst_0        
		//   26   49:iconst_0        
		//   27   50:invokestatic    #767 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean)>
		//   28   53:invokevirtual   #770 <Method void AccessibilityNodeInfoCompat.setCollectionItemInfo(Object)>
		//   29   56:return          
		}

		void onInitializeAccessibilityNodeInfoForItem(View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_3        
			if(viewholder != null && !viewholder.isRemoved() && !mChildHelper.isHidden(viewholder.itemView))
		//*   3    5:aload_3         
		//*   4    6:ifnull          50
		//*   5    9:aload_3         
		//*   6   10:invokevirtual   #87  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   13:ifne            50
		//*   8   16:aload_0         
		//*   9   17:getfield        #122 <Field ChildHelper mChildHelper>
		//*  10   20:aload_3         
		//*  11   21:getfield        #199 <Field View RecyclerView$ViewHolder.itemView>
		//*  12   24:invokevirtual   #464 <Method boolean ChildHelper.isHidden(View)>
		//*  13   27:ifne            50
				onInitializeAccessibilityNodeInfoForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, accessibilitynodeinfocompat);
		//   14   30:aload_0         
		//   15   31:aload_0         
		//   16   32:getfield        #89  <Field RecyclerView mRecyclerView>
		//   17   35:getfield        #727 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   18   38:aload_0         
		//   19   39:getfield        #89  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//   21   45:aload_1         
		//   22   46:aload_2         
		//   23   47:invokevirtual   #773 <Method void onInitializeAccessibilityNodeInfoForItem(RecyclerView$Recycler, RecyclerView$State, View, AccessibilityNodeInfoCompat)>
		//   24   50:return          
		}

		public View onInterceptFocusSearch(View view, int i)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onItemsAdded(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsChanged(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemsRemoved(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj)
		{
			onItemsUpdated(recyclerview, i, j);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:invokevirtual   #785 <Method void onItemsUpdated(RecyclerView, int, int)>
		//    5    7:return          
		}

		public void onLayoutChildren(Recycler recycler, State state)
		{
			Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
		//    0    0:ldc2            #788 <String "RecyclerView">
		//    1    3:ldc2            #790 <String "You must override onLayoutChildren(Recycler recycler, State state) ">
		//    2    6:invokestatic    #796 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void onLayoutCompleted(State state)
		{
		//    0    0:return          
		}

		public void onMeasure(Recycler recycler, State state, int i, int j)
		{
			mRecyclerView.defaultOnMeasure(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:iload_3         
		//    3    5:iload           4
		//    4    7:invokevirtual   #803 <Method void RecyclerView.defaultOnMeasure(int, int)>
		//    5   10:return          
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, State state, View view, View view1)
		{
			return onRequestChildFocus(recyclerview, view, view1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_3         
		//    3    3:aload           4
		//    4    5:invokevirtual   #808 <Method boolean onRequestChildFocus(RecyclerView, View, View)>
		//    5    8:ireturn         
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, View view, View view1)
		{
			return isSmoothScrolling() || recyclerview.isComputingLayout();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #810 <Method boolean isSmoothScrolling()>
		//    2    4:ifne            19
		//    3    7:aload_1         
		//    4    8:invokevirtual   #813 <Method boolean RecyclerView.isComputingLayout()>
		//    5   11:ifeq            17
		//    6   14:goto            19
		//    7   17:iconst_0        
		//    8   18:ireturn         
		//    9   19:iconst_1        
		//   10   20:ireturn         
		}

		public void onRestoreInstanceState(Parcelable parcelable)
		{
		//    0    0:return          
		}

		public Parcelable onSaveInstanceState()
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onScrollStateChanged(int i)
		{
		//    0    0:return          
		}

		void onSmoothScrollerStopped(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller == smoothscroller)
		//*   0    0:aload_0         
		//*   1    1:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:aload_1         
		//*   3    5:if_acmpne       13
				mSmoothScroller = null;
		//    4    8:aload_0         
		//    5    9:aconst_null     
		//    6   10:putfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    7   13:return          
		}

		boolean performAccessibilityAction(int i, Bundle bundle)
		{
			return performAccessibilityAction(mRecyclerView.mRecycler, mRecyclerView.mState, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #89  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #727 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #89  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iload_1         
		//    8   16:aload_2         
		//    9   17:invokevirtual   #825 <Method boolean performAccessibilityAction(RecyclerView$Recycler, RecyclerView$State, int, Bundle)>
		//   10   20:ireturn         
		}

		public boolean performAccessibilityAction(Recycler recycler, State state, int i, Bundle bundle)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recycler == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return false;
		//    5    9:iconst_0        
		//    6   10:ireturn         
			int j;
			if(i != 4096)
		//*   7   11:iload_3         
		//*   8   12:sipush          4096
		//*   9   15:icmpeq          99
			{
				if(i != 8192)
		//*  10   18:iload_3         
		//*  11   19:sipush          8192
		//*  12   22:icmpeq          33
				{
					j = 0;
		//   13   25:iconst_0        
		//   14   26:istore          5
					i = 0;
		//   15   28:iconst_0        
		//   16   29:istore_3        
				} else
		//*  17   30:goto            160
				{
					if(((RecyclerView) (recycler)).canScrollVertically(-1))
		//*  18   33:aload_1         
		//*  19   34:iconst_m1       
		//*  20   35:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  21   38:ifeq            61
						j = -(getHeight() - getPaddingTop() - getPaddingBottom());
		//   22   41:aload_0         
		//   23   42:invokevirtual   #254 <Method int getHeight()>
		//   24   45:aload_0         
		//   25   46:invokevirtual   #245 <Method int getPaddingTop()>
		//   26   49:isub            
		//   27   50:aload_0         
		//   28   51:invokevirtual   #257 <Method int getPaddingBottom()>
		//   29   54:isub            
		//   30   55:ineg            
		//   31   56:istore          5
					else
		//*  32   58:goto            64
						j = 0;
		//   33   61:iconst_0        
		//   34   62:istore          5
					if(mRecyclerView.canScrollHorizontally(-1))
		//*  35   64:aload_0         
		//*  36   65:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  37   68:iconst_m1       
		//*  38   69:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  39   72:ifeq            94
						i = -(getWidth() - getPaddingLeft() - getPaddingRight());
		//   40   75:aload_0         
		//   41   76:invokevirtual   #248 <Method int getWidth()>
		//   42   79:aload_0         
		//   43   80:invokevirtual   #242 <Method int getPaddingLeft()>
		//   44   83:isub            
		//   45   84:aload_0         
		//   46   85:invokevirtual   #251 <Method int getPaddingRight()>
		//   47   88:isub            
		//   48   89:ineg            
		//   49   90:istore_3        
					else
		//*  50   91:goto            160
						i = 0;
		//   51   94:iconst_0        
		//   52   95:istore_3        
				}
			} else
		//*  53   96:goto            160
			{
				if(((RecyclerView) (recycler)).canScrollVertically(1))
		//*  54   99:aload_1         
		//*  55  100:iconst_1        
		//*  56  101:invokevirtual   #711 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  57  104:ifeq            126
					j = getHeight() - getPaddingTop() - getPaddingBottom();
		//   58  107:aload_0         
		//   59  108:invokevirtual   #254 <Method int getHeight()>
		//   60  111:aload_0         
		//   61  112:invokevirtual   #245 <Method int getPaddingTop()>
		//   62  115:isub            
		//   63  116:aload_0         
		//   64  117:invokevirtual   #257 <Method int getPaddingBottom()>
		//   65  120:isub            
		//   66  121:istore          5
				else
		//*  67  123:goto            129
					j = 0;
		//   68  126:iconst_0        
		//   69  127:istore          5
				if(mRecyclerView.canScrollHorizontally(1))
		//*  70  129:aload_0         
		//*  71  130:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  72  133:iconst_1        
		//*  73  134:invokevirtual   #713 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  74  137:ifeq            158
					i = getWidth() - getPaddingLeft() - getPaddingRight();
		//   75  140:aload_0         
		//   76  141:invokevirtual   #248 <Method int getWidth()>
		//   77  144:aload_0         
		//   78  145:invokevirtual   #242 <Method int getPaddingLeft()>
		//   79  148:isub            
		//   80  149:aload_0         
		//   81  150:invokevirtual   #251 <Method int getPaddingRight()>
		//   82  153:isub            
		//   83  154:istore_3        
				else
		//*  84  155:goto            160
					i = 0;
		//   85  158:iconst_0        
		//   86  159:istore_3        
			}
			if(j == 0 && i == 0)
		//*  87  160:iload           5
		//*  88  162:ifne            171
		//*  89  165:iload_3         
		//*  90  166:ifne            171
			{
				return false;
		//   91  169:iconst_0        
		//   92  170:ireturn         
			} else
			{
				mRecyclerView.smoothScrollBy(i, j);
		//   93  171:aload_0         
		//   94  172:getfield        #89  <Field RecyclerView mRecyclerView>
		//   95  175:iload_3         
		//   96  176:iload           5
		//   97  178:invokevirtual   #828 <Method void RecyclerView.smoothScrollBy(int, int)>
				return true;
		//   98  181:iconst_1        
		//   99  182:ireturn         
			}
		}

		public boolean performAccessibilityActionForItem(Recycler recycler, State state, View view, int i, Bundle bundle)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean performAccessibilityActionForItem(View view, int i, Bundle bundle)
		{
			return performAccessibilityActionForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #89  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #727 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #89  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #473 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:iload_2         
		//    9   17:aload_3         
		//   10   18:invokevirtual   #833 <Method boolean performAccessibilityActionForItem(RecyclerView$Recycler, RecyclerView$State, View, int, Bundle)>
		//   11   21:ireturn         
		}

		public void removeAndRecycleAllViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #438 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            38
				if(!RecyclerView.getChildViewHolderInt(getChildAt(i)).shouldIgnore())
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:invokevirtual   #442 <Method View getChildAt(int)>
		//*  10   16:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//*  11   19:invokevirtual   #364 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  12   22:ifne            31
					removeAndRecycleViewAt(i, recycler);
		//   13   25:aload_0         
		//   14   26:iload_2         
		//   15   27:aload_1         
		//   16   28:invokevirtual   #838 <Method void removeAndRecycleViewAt(int, RecyclerView$Recycler)>

		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_2        
		//*  21   35:goto            7
		//   22   38:return          
		}

		void removeAndRecycleScrapInt(Recycler recycler)
		{
			int j = recycler.getScrapCount();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #842 <Method int RecyclerView$Recycler.getScrapCount()>
		//    2    4:istore_3        
			for(int i = j - 1; i >= 0; i--)
		//*   3    5:iload_3         
		//*   4    6:iconst_1        
		//*   5    7:isub            
		//*   6    8:istore_2        
		//*   7    9:iload_2         
		//*   8   10:iflt            103
			{
				View view = recycler.getScrapViewAt(i);
		//    9   13:aload_1         
		//   10   14:iload_2         
		//   11   15:invokevirtual   #845 <Method View RecyclerView$Recycler.getScrapViewAt(int)>
		//   12   18:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   13   20:aload           4
		//   14   22:invokestatic    #81  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   15   25:astore          5
				if(viewholder.shouldIgnore())
		//*  16   27:aload           5
		//*  17   29:invokevirtual   #364 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  18   32:ifeq            38
					continue;
		//   19   35:goto            96
				viewholder.setIsRecyclable(false);
		//   20   38:aload           5
		//   21   40:iconst_0        
		//   22   41:invokevirtual   #848 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(viewholder.isTmpDetached())
		//*  23   44:aload           5
		//*  24   46:invokevirtual   #851 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  25   49:ifeq            62
					mRecyclerView.removeDetachedView(view, false);
		//   26   52:aload_0         
		//   27   53:getfield        #89  <Field RecyclerView mRecyclerView>
		//   28   56:aload           4
		//   29   58:iconst_0        
		//   30   59:invokevirtual   #855 <Method void RecyclerView.removeDetachedView(View, boolean)>
				if(mRecyclerView.mItemAnimator != null)
		//*  31   62:aload_0         
		//*  32   63:getfield        #89  <Field RecyclerView mRecyclerView>
		//*  33   66:getfield        #859 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*  34   69:ifnull          84
					mRecyclerView.mItemAnimator.endAnimation(viewholder);
		//   35   72:aload_0         
		//   36   73:getfield        #89  <Field RecyclerView mRecyclerView>
		//   37   76:getfield        #859 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//   38   79:aload           5
		//   39   81:invokevirtual   #864 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
				viewholder.setIsRecyclable(true);
		//   40   84:aload           5
		//   41   86:iconst_1        
		//   42   87:invokevirtual   #848 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				recycler.quickRecycleScrapView(view);
		//   43   90:aload_1         
		//   44   91:aload           4
		//   45   93:invokevirtual   #867 <Method void RecyclerView$Recycler.quickRecycleScrapView(View)>
			}

		//   46   96:iload_2         
		//   47   97:iconst_1        
		//   48   98:isub            
		//   49   99:istore_2        
		//*  50  100:goto            9
			recycler.clearScrap();
		//   51  103:aload_1         
		//   52  104:invokevirtual   #870 <Method void RecyclerView$Recycler.clearScrap()>
			if(j > 0)
		//*  53  107:iload_3         
		//*  54  108:ifle            118
				mRecyclerView.invalidate();
		//   55  111:aload_0         
		//   56  112:getfield        #89  <Field RecyclerView mRecyclerView>
		//   57  115:invokevirtual   #871 <Method void RecyclerView.invalidate()>
		//   58  118:return          
		}

		public void removeAndRecycleView(View view, Recycler recycler)
		{
			removeView(view);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #876 <Method void removeView(View)>
			recycler.recycleView(view);
		//    3    5:aload_2         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #879 <Method void RecyclerView$Recycler.recycleView(View)>
		//    6   10:return          
		}

		public void removeAndRecycleViewAt(int i, Recycler recycler)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #442 <Method View getChildAt(int)>
		//    3    5:astore_3        
			removeViewAt(i);
		//    4    6:aload_0         
		//    5    7:iload_1         
		//    6    8:invokevirtual   #379 <Method void removeViewAt(int)>
			recycler.recycleView(view);
		//    7   11:aload_2         
		//    8   12:aload_3         
		//    9   13:invokevirtual   #879 <Method void RecyclerView$Recycler.recycleView(View)>
		//   10   16:return          
		}

		public boolean removeCallbacks(Runnable runnable)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_2        
			if(recyclerview != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          15
				return recyclerview.removeCallbacks(runnable);
		//    5    9:aload_2         
		//    6   10:aload_1         
		//    7   11:invokevirtual   #883 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    8   14:ireturn         
			else
				return false;
		//    9   15:iconst_0        
		//   10   16:ireturn         
		}

		public void removeView(View view)
		{
			mChildHelper.removeView(view);
		//    0    0:aload_0         
		//    1    1:getfield        #122 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #884 <Method void ChildHelper.removeView(View)>
		//    4    8:return          
		}

		public void removeViewAt(int i)
		{
			if(getChildAt(i) != null)
		//*   0    0:aload_0         
		//*   1    1:iload_1         
		//*   2    2:invokevirtual   #442 <Method View getChildAt(int)>
		//*   3    5:ifnull          16
				mChildHelper.removeViewAt(i);
		//    4    8:aload_0         
		//    5    9:getfield        #122 <Field ChildHelper mChildHelper>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #885 <Method void ChildHelper.removeViewAt(int)>
		//    8   16:return          
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			return requestChildRectangleOnScreen(recyclerview, view, rect, flag, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:iconst_0        
		//    6    7:invokevirtual   #890 <Method boolean requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
		//    7   10:ireturn         
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag, boolean flag1)
		{
			view = ((View) (getChildRectangleOnScreenScrollAmount(recyclerview, view, rect, flag)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:invokespecial   #892 <Method int[] getChildRectangleOnScreenScrollAmount(RecyclerView, View, Rect, boolean)>
		//    6    9:astore_2        
			int i = view[0];
		//    7   10:aload_2         
		//    8   11:iconst_0        
		//    9   12:iaload          
		//   10   13:istore          6
			int j = view[1];
		//   11   15:aload_2         
		//   12   16:iconst_1        
		//   13   17:iaload          
		//   14   18:istore          7
			if(flag1 && !isFocusedChildVisibleAfterScrolling(recyclerview, i, j) || i == 0 && j == 0)
		//*  15   20:iload           5
		//*  16   22:ifeq            37
		//*  17   25:aload_0         
		//*  18   26:aload_1         
		//*  19   27:iload           6
		//*  20   29:iload           7
		//*  21   31:invokespecial   #894 <Method boolean isFocusedChildVisibleAfterScrolling(RecyclerView, int, int)>
		//*  22   34:ifeq            50
		//*  23   37:iload           6
		//*  24   39:ifne            52
		//*  25   42:iload           7
		//*  26   44:ifeq            50
		//*  27   47:goto            52
				return false;
		//   28   50:iconst_0        
		//   29   51:ireturn         
			if(flag)
		//*  30   52:iload           4
		//*  31   54:ifeq            67
			{
				recyclerview.scrollBy(i, j);
		//   32   57:aload_1         
		//   33   58:iload           6
		//   34   60:iload           7
		//   35   62:invokevirtual   #897 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//   36   65:iconst_1        
		//   37   66:ireturn         
			} else
			{
				recyclerview.smoothScrollBy(i, j);
		//   38   67:aload_1         
		//   39   68:iload           6
		//   40   70:iload           7
		//   41   72:invokevirtual   #828 <Method void RecyclerView.smoothScrollBy(int, int)>
				return true;
		//   42   75:iconst_1        
		//   43   76:ireturn         
			}
		}

		public void requestLayout()
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          13
				recyclerview.requestLayout();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #900 <Method void RecyclerView.requestLayout()>
		//    7   13:return          
		}

		public void requestSimpleAnimationsInNextLayout()
		{
			mRequestedSimpleAnimations = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #66  <Field boolean mRequestedSimpleAnimations>
		//    3    5:return          
		}

		public int scrollHorizontallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void scrollToPosition(int i)
		{
		//    0    0:return          
		}

		public int scrollVerticallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		void setExactMeasureSpecsFrom(RecyclerView recyclerview)
		{
			setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getHeight(), 0x40000000));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #907 <Method int RecyclerView.getWidth()>
		//    3    5:ldc1            #215 <Int 0x40000000>
		//    4    7:invokestatic    #237 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    5   10:aload_1         
		//    6   11:invokevirtual   #908 <Method int RecyclerView.getHeight()>
		//    7   14:ldc1            #215 <Int 0x40000000>
		//    8   16:invokestatic    #237 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    9   19:invokevirtual   #911 <Method void setMeasureSpecs(int, int)>
		//   10   22:return          
		}

		void setMeasureSpecs(int i, int j)
		{
			mWidth = android.view.View.MeasureSpec.getSize(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokestatic    #213 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    3    5:putfield        #623 <Field int mWidth>
			mWidthMode = android.view.View.MeasureSpec.getMode(i);
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:invokestatic    #210 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    7   13:putfield        #626 <Field int mWidthMode>
			if(mWidthMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*   8   16:aload_0         
		//*   9   17:getfield        #626 <Field int mWidthMode>
		//*  10   20:ifne            34
		//*  11   23:getstatic       #914 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  12   26:ifne            34
				mWidth = 0;
		//   13   29:aload_0         
		//   14   30:iconst_0        
		//   15   31:putfield        #623 <Field int mWidth>
			mHeight = android.view.View.MeasureSpec.getSize(j);
		//   16   34:aload_0         
		//   17   35:iload_2         
		//   18   36:invokestatic    #213 <Method int android.view.View$MeasureSpec.getSize(int)>
		//   19   39:putfield        #549 <Field int mHeight>
			mHeightMode = android.view.View.MeasureSpec.getMode(j);
		//   20   42:aload_0         
		//   21   43:iload_2         
		//   22   44:invokestatic    #210 <Method int android.view.View$MeasureSpec.getMode(int)>
		//   23   47:putfield        #552 <Field int mHeightMode>
			if(mHeightMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*  24   50:aload_0         
		//*  25   51:getfield        #552 <Field int mHeightMode>
		//*  26   54:ifne            68
		//*  27   57:getstatic       #914 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  28   60:ifne            68
				mHeight = 0;
		//   29   63:aload_0         
		//   30   64:iconst_0        
		//   31   65:putfield        #549 <Field int mHeight>
		//   32   68:return          
		}

		public void setMeasuredDimension(int i, int j)
		{
			mRecyclerView.setMeasuredDimension(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #89  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokestatic    #918 <Method void RecyclerView.access$300(RecyclerView, int, int)>
		//    5    9:return          
		}

		public void setMeasuredDimension(Rect rect, int i, int j)
		{
			int k = rect.width();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #280 <Method int Rect.width()>
		//    2    4:istore          4
			int l = getPaddingLeft();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #242 <Method int getPaddingLeft()>
		//    5   10:istore          5
			int i1 = getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #251 <Method int getPaddingRight()>
		//    8   16:istore          6
			int j1 = rect.height();
		//    9   18:aload_1         
		//   10   19:invokevirtual   #283 <Method int Rect.height()>
		//   11   22:istore          7
			int k1 = getPaddingTop();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #245 <Method int getPaddingTop()>
		//   14   28:istore          8
			int l1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #257 <Method int getPaddingBottom()>
		//   17   34:istore          9
			setMeasuredDimension(chooseSize(i, k + l + i1, getMinimumWidth()), chooseSize(j, j1 + k1 + l1, getMinimumHeight()));
		//   18   36:aload_0         
		//   19   37:iload_2         
		//   20   38:iload           4
		//   21   40:iload           5
		//   22   42:iadd            
		//   23   43:iload           6
		//   24   45:iadd            
		//   25   46:aload_0         
		//   26   47:invokevirtual   #921 <Method int getMinimumWidth()>
		//   27   50:invokestatic    #923 <Method int chooseSize(int, int, int)>
		//   28   53:iload_3         
		//   29   54:iload           7
		//   30   56:iload           8
		//   31   58:iadd            
		//   32   59:iload           9
		//   33   61:iadd            
		//   34   62:aload_0         
		//   35   63:invokevirtual   #925 <Method int getMinimumHeight()>
		//   36   66:invokestatic    #923 <Method int chooseSize(int, int, int)>
		//   37   69:invokevirtual   #927 <Method void setMeasuredDimension(int, int)>
		//   38   72:return          
		}

		void setMeasuredDimensionFromChildren(int i, int j)
		{
			int k2 = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method int getChildCount()>
		//    2    4:istore          11
			if(k2 == 0)
		//*   3    6:iload           11
		//*   4    8:ifne            21
			{
				mRecyclerView.defaultOnMeasure(i, j);
		//    5   11:aload_0         
		//    6   12:getfield        #89  <Field RecyclerView mRecyclerView>
		//    7   15:iload_1         
		//    8   16:iload_2         
		//    9   17:invokevirtual   #803 <Method void RecyclerView.defaultOnMeasure(int, int)>
				return;
		//   10   20:return          
			}
			int l = 0;
		//   11   21:iconst_0        
		//   12   22:istore          4
			int i2 = 0x7fffffff;
		//   13   24:ldc2            #929 <Int 0x7fffffff>
		//   14   27:istore          9
			int j1 = 0x7fffffff;
		//   15   29:ldc2            #929 <Int 0x7fffffff>
		//   16   32:istore          6
			int k1 = 0x80000000;
		//   17   34:ldc1            #214 <Int 0x80000000>
		//   18   36:istore          7
			int k;
			int j2;
			for(k = 0x80000000; l < k2; k = j2)
		//*  19   38:ldc1            #214 <Int 0x80000000>
		//*  20   40:istore_3        
		//*  21   41:iload           4
		//*  22   43:iload           11
		//*  23   45:icmpge          179
			{
				View view = getChildAt(l);
		//   24   48:aload_0         
		//   25   49:iload           4
		//   26   51:invokevirtual   #442 <Method View getChildAt(int)>
		//   27   54:astore          12
				Rect rect = mRecyclerView.mTempRect;
		//   28   56:aload_0         
		//   29   57:getfield        #89  <Field RecyclerView mRecyclerView>
		//   30   60:getfield        #347 <Field Rect RecyclerView.mTempRect>
		//   31   63:astore          13
				getDecoratedBoundsWithMargins(view, rect);
		//   32   65:aload_0         
		//   33   66:aload           12
		//   34   68:aload           13
		//   35   70:invokevirtual   #351 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				int i1 = i2;
		//   36   73:iload           9
		//   37   75:istore          5
				if(rect.left < i2)
		//*  38   77:aload           13
		//*  39   79:getfield        #265 <Field int Rect.left>
		//*  40   82:iload           9
		//*  41   84:icmpge          94
					i1 = rect.left;
		//   42   87:aload           13
		//   43   89:getfield        #265 <Field int Rect.left>
		//   44   92:istore          5
				int l1 = k1;
		//   45   94:iload           7
		//   46   96:istore          8
				if(rect.right > k1)
		//*  47   98:aload           13
		//*  48  100:getfield        #354 <Field int Rect.right>
		//*  49  103:iload           7
		//*  50  105:icmple          115
					l1 = rect.right;
		//   51  108:aload           13
		//   52  110:getfield        #354 <Field int Rect.right>
		//   53  113:istore          8
				k1 = j1;
		//   54  115:iload           6
		//   55  117:istore          7
				if(rect.top < j1)
		//*  56  119:aload           13
		//*  57  121:getfield        #274 <Field int Rect.top>
		//*  58  124:iload           6
		//*  59  126:icmpge          136
					k1 = rect.top;
		//   60  129:aload           13
		//   61  131:getfield        #274 <Field int Rect.top>
		//   62  134:istore          7
				j2 = k;
		//   63  136:iload_3         
		//   64  137:istore          10
				if(rect.bottom > k)
		//*  65  139:aload           13
		//*  66  141:getfield        #357 <Field int Rect.bottom>
		//*  67  144:iload_3         
		//*  68  145:icmple          155
					j2 = rect.bottom;
		//   69  148:aload           13
		//   70  150:getfield        #357 <Field int Rect.bottom>
		//   71  153:istore          10
				l++;
		//   72  155:iload           4
		//   73  157:iconst_1        
		//   74  158:iadd            
		//   75  159:istore          4
				j1 = k1;
		//   76  161:iload           7
		//   77  163:istore          6
				i2 = i1;
		//   78  165:iload           5
		//   79  167:istore          9
				k1 = l1;
		//   80  169:iload           8
		//   81  171:istore          7
			}

		//   82  173:iload           10
		//   83  175:istore_3        
		//*  84  176:goto            41
			mRecyclerView.mTempRect.set(i2, j1, k1, k);
		//   85  179:aload_0         
		//   86  180:getfield        #89  <Field RecyclerView mRecyclerView>
		//   87  183:getfield        #347 <Field Rect RecyclerView.mTempRect>
		//   88  186:iload           9
		//   89  188:iload           6
		//   90  190:iload           7
		//   91  192:iload_3         
		//   92  193:invokevirtual   #413 <Method void Rect.set(int, int, int, int)>
			setMeasuredDimension(mRecyclerView.mTempRect, i, j);
		//   93  196:aload_0         
		//   94  197:aload_0         
		//   95  198:getfield        #89  <Field RecyclerView mRecyclerView>
		//   96  201:getfield        #347 <Field Rect RecyclerView.mTempRect>
		//   97  204:iload_1         
		//   98  205:iload_2         
		//   99  206:invokevirtual   #931 <Method void setMeasuredDimension(Rect, int, int)>
		//  100  209:return          
		}

		void setRecyclerView(RecyclerView recyclerview)
		{
			if(recyclerview == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       27
			{
				mRecyclerView = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #89  <Field RecyclerView mRecyclerView>
				mChildHelper = null;
		//    5    9:aload_0         
		//    6   10:aconst_null     
		//    7   11:putfield        #122 <Field ChildHelper mChildHelper>
				mWidth = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #623 <Field int mWidth>
				mHeight = 0;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #549 <Field int mHeight>
			} else
		//*  14   24:goto            56
			{
				mRecyclerView = recyclerview;
		//   15   27:aload_0         
		//   16   28:aload_1         
		//   17   29:putfield        #89  <Field RecyclerView mRecyclerView>
				mChildHelper = recyclerview.mChildHelper;
		//   18   32:aload_0         
		//   19   33:aload_1         
		//   20   34:getfield        #933 <Field ChildHelper RecyclerView.mChildHelper>
		//   21   37:putfield        #122 <Field ChildHelper mChildHelper>
				mWidth = recyclerview.getWidth();
		//   22   40:aload_0         
		//   23   41:aload_1         
		//   24   42:invokevirtual   #907 <Method int RecyclerView.getWidth()>
		//   25   45:putfield        #623 <Field int mWidth>
				mHeight = recyclerview.getHeight();
		//   26   48:aload_0         
		//   27   49:aload_1         
		//   28   50:invokevirtual   #908 <Method int RecyclerView.getHeight()>
		//   29   53:putfield        #549 <Field int mHeight>
			}
			mWidthMode = 0x40000000;
		//   30   56:aload_0         
		//   31   57:ldc1            #215 <Int 0x40000000>
		//   32   59:putfield        #626 <Field int mWidthMode>
			mHeightMode = 0x40000000;
		//   33   62:aload_0         
		//   34   63:ldc1            #215 <Int 0x40000000>
		//   35   65:putfield        #552 <Field int mHeightMode>
		//   36   68:return          
		}

		boolean shouldMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return view.isLayoutRequested() || !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getHeight(), j, layoutparams.height);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #936 <Method boolean View.isLayoutRequested()>
		//    2    4:ifne            51
		//    3    7:aload_0         
		//    4    8:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    5   11:ifeq            51
		//    6   14:aload_1         
		//    7   15:invokevirtual   #581 <Method int View.getWidth()>
		//    8   18:iload_2         
		//    9   19:aload           4
		//   10   21:getfield        #667 <Field int RecyclerView$LayoutParams.width>
		//   11   24:invokestatic    #938 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   12   27:ifeq            51
		//   13   30:aload_1         
		//   14   31:invokevirtual   #582 <Method int View.getHeight()>
		//   15   34:iload_3         
		//   16   35:aload           4
		//   17   37:getfield        #672 <Field int RecyclerView$LayoutParams.height>
		//   18   40:invokestatic    #938 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   19   43:ifne            49
		//   20   46:goto            51
		//   21   49:iconst_0        
		//   22   50:ireturn         
		//   23   51:iconst_1        
		//   24   52:ireturn         
		}

		boolean shouldMeasureTwice()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean shouldReMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getMeasuredWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getMeasuredHeight(), j, layoutparams.height);
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ifeq            44
		//    3    7:aload_1         
		//    4    8:invokevirtual   #535 <Method int View.getMeasuredWidth()>
		//    5   11:iload_2         
		//    6   12:aload           4
		//    7   14:getfield        #667 <Field int RecyclerView$LayoutParams.width>
		//    8   17:invokestatic    #938 <Method boolean isMeasurementUpToDate(int, int, int)>
		//    9   20:ifeq            44
		//   10   23:aload_1         
		//   11   24:invokevirtual   #531 <Method int View.getMeasuredHeight()>
		//   12   27:iload_3         
		//   13   28:aload           4
		//   14   30:getfield        #672 <Field int RecyclerView$LayoutParams.height>
		//   15   33:invokestatic    #938 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   16   36:ifne            42
		//   17   39:goto            44
		//   18   42:iconst_0        
		//   19   43:ireturn         
		//   20   44:iconst_1        
		//   21   45:ireturn         
		}

		public void smoothScrollToPosition(RecyclerView recyclerview, State state, int i)
		{
			Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
		//    0    0:ldc2            #788 <String "RecyclerView">
		//    1    3:ldc2            #944 <String "You must override smoothScrollToPosition to support smooth scrolling">
		//    2    6:invokestatic    #796 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void startSmoothScroll(SmoothScroller smoothscroller)
		{
			SmoothScroller smoothscroller1 = mSmoothScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:astore_2        
			if(smoothscroller1 != null && smoothscroller != smoothscroller1 && smoothscroller1.isRunning())
		//*   3    5:aload_2         
		//*   4    6:ifnull          28
		//*   5    9:aload_1         
		//*   6   10:aload_2         
		//*   7   11:if_acmpeq       28
		//*   8   14:aload_2         
		//*   9   15:invokevirtual   #178 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//*  10   18:ifeq            28
				mSmoothScroller.stop();
		//   11   21:aload_0         
		//   12   22:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   13   25:invokevirtual   #948 <Method void RecyclerView$SmoothScroller.stop()>
			mSmoothScroller = smoothscroller;
		//   14   28:aload_0         
		//   15   29:aload_1         
		//   16   30:putfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
			mSmoothScroller.start(mRecyclerView, this);
		//   17   33:aload_0         
		//   18   34:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   19   37:aload_0         
		//   20   38:getfield        #89  <Field RecyclerView mRecyclerView>
		//   21   41:aload_0         
		//   22   42:invokevirtual   #952 <Method void RecyclerView$SmoothScroller.start(RecyclerView, RecyclerView$LayoutManager)>
		//   23   45:return          
		}

		void stopSmoothScroller()
		{
			SmoothScroller smoothscroller = mSmoothScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #173 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:astore_1        
			if(smoothscroller != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          13
				smoothscroller.stop();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #948 <Method void RecyclerView$SmoothScroller.stop()>
		//    7   13:return          
		}

		public boolean supportsPredictiveItemAnimations()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean mAutoMeasure;
		ChildHelper mChildHelper;
		private int mHeight;
		private int mHeightMode;
		ViewBoundsCheck mHorizontalBoundCheck;
		private final ViewBoundsCheck.Callback mHorizontalBoundCheckCallback = new _cls1();
		boolean mIsAttachedToWindow;
		private boolean mItemPrefetchEnabled;
		private boolean mMeasurementCacheEnabled;
		int mPrefetchMaxCountObserved;
		boolean mPrefetchMaxObservedInInitialPrefetch;
		RecyclerView mRecyclerView;
		boolean mRequestedSimpleAnimations;
		SmoothScroller mSmoothScroller;
		ViewBoundsCheck mVerticalBoundCheck;
		private final ViewBoundsCheck.Callback mVerticalBoundCheckCallback = new _cls2();
		private int mWidth;
		private int mWidthMode;

		public LayoutManager()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #47  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #9   <Class RecyclerView$LayoutManager$1>
		//    4    8:dup             
		//    5    9:aload_0         
		//    6   10:invokespecial   #50  <Method void RecyclerView$LayoutManager$1(RecyclerView$LayoutManager)>
		//    7   13:putfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//    8   16:aload_0         
		//    9   17:new             #11  <Class RecyclerView$LayoutManager$2>
		//   10   20:dup             
		//   11   21:aload_0         
		//   12   22:invokespecial   #53  <Method void RecyclerView$LayoutManager$2(RecyclerView$LayoutManager)>
		//   13   25:putfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
			mHorizontalBoundCheck = new ViewBoundsCheck(mHorizontalBoundCheckCallback);
		//   14   28:aload_0         
		//   15   29:new             #57  <Class ViewBoundsCheck>
		//   16   32:dup             
		//   17   33:aload_0         
		//   18   34:getfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//   19   37:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   20   40:putfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
			mVerticalBoundCheck = new ViewBoundsCheck(mVerticalBoundCheckCallback);
		//   21   43:aload_0         
		//   22   44:new             #57  <Class ViewBoundsCheck>
		//   23   47:dup             
		//   24   48:aload_0         
		//   25   49:getfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
		//   26   52:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   27   55:putfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
			mRequestedSimpleAnimations = false;
		//   28   58:aload_0         
		//   29   59:iconst_0        
		//   30   60:putfield        #66  <Field boolean mRequestedSimpleAnimations>
			mIsAttachedToWindow = false;
		//   31   63:aload_0         
		//   32   64:iconst_0        
		//   33   65:putfield        #68  <Field boolean mIsAttachedToWindow>
			mAutoMeasure = false;
		//   34   68:aload_0         
		//   35   69:iconst_0        
		//   36   70:putfield        #70  <Field boolean mAutoMeasure>
			mMeasurementCacheEnabled = true;
		//   37   73:aload_0         
		//   38   74:iconst_1        
		//   39   75:putfield        #72  <Field boolean mMeasurementCacheEnabled>
			mItemPrefetchEnabled = true;
		//   40   78:aload_0         
		//   41   79:iconst_1        
		//   42   80:putfield        #74  <Field boolean mItemPrefetchEnabled>
		//   43   83:return          
		}
	}

	public static interface LayoutManager.LayoutPrefetchRegistry
	{

		public abstract void addPosition(int i, int j);
	}

	public static class LayoutManager.Properties
	{

		public int orientation;
		public boolean reverseLayout;
		public int spanCount;
		public boolean stackFromEnd;

		public LayoutManager.Properties()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams
	{

		public int getViewLayoutPosition()
		{
			return mViewHolder.getLayoutPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #49  <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//    3    7:ireturn         
		}

		public boolean isItemChanged()
		{
			return mViewHolder.isUpdated();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #54  <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//    3    7:ireturn         
		}

		public boolean isItemRemoved()
		{
			return mViewHolder.isRemoved();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #58  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//    3    7:ireturn         
		}

		public boolean isViewInvalid()
		{
			return mViewHolder.isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #62  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//    3    7:ireturn         
		}

		final Rect mDecorInsets;
		boolean mInsetsDirty;
		boolean mPendingInvalidate;
		ViewHolder mViewHolder;

		public LayoutParams(int i, int j)
		{
			super(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #18  <Method void android.view.ViewGroup$MarginLayoutParams(int, int)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(Context context, AttributeSet attributeset)
		{
			super(context, attributeset);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #33  <Method void android.view.ViewGroup$MarginLayoutParams(Context, AttributeSet)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(LayoutParams layoutparams)
		{
			super(((android.view.ViewGroup.LayoutParams) (layoutparams)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			super(layoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams)
		{
			super(marginlayoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #40  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}
	}

	public static interface OnChildAttachStateChangeListener
	{

		public abstract void onChildViewAttachedToWindow(View view);

		public abstract void onChildViewDetachedFromWindow(View view);
	}

	public static abstract class OnFlingListener
	{

		public abstract boolean onFling(int i, int j);

		public OnFlingListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface OnItemTouchListener
	{

		public abstract boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);

		public abstract void onRequestDisallowInterceptTouchEvent(boolean flag);

		public abstract void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);
	}

	public static abstract class OnScrollListener
	{

		public void onScrollStateChanged(RecyclerView recyclerview, int i)
		{
		//    0    0:return          
		}

		public void onScrolled(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public OnScrollListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface Orientation
		extends Annotation
	{
	}

	public static class RecycledViewPool
	{

		private ScrapData getScrapDataForType(int i)
		{
			ScrapData scrapdata1 = (ScrapData)mScrap.get(i);
		//    0    0:aload_0         
		//    1    1:getfield        #24  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #33  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_3        
			ScrapData scrapdata = scrapdata1;
		//    6   12:aload_3         
		//    7   13:astore_2        
			if(scrapdata1 == null)
		//*   8   14:aload_3         
		//*   9   15:ifnonnull       35
			{
				scrapdata = new ScrapData();
		//   10   18:new             #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   11   21:dup             
		//   12   22:invokespecial   #34  <Method void RecyclerView$RecycledViewPool$ScrapData()>
		//   13   25:astore_2        
				mScrap.put(i, ((Object) (scrapdata)));
		//   14   26:aload_0         
		//   15   27:getfield        #24  <Field SparseArray mScrap>
		//   16   30:iload_1         
		//   17   31:aload_2         
		//   18   32:invokevirtual   #38  <Method void SparseArray.put(int, Object)>
			}
			return scrapdata;
		//   19   35:aload_2         
		//   20   36:areturn         
		}

		void attach()
		{
			mAttachCount = mAttachCount + 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #26  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:iadd            
		//    5    7:putfield        #26  <Field int mAttachCount>
		//    6   10:return          
		}

		public void clear()
		{
			for(int i = 0; i < mScrap.size(); i++)
		//*   0    0:iconst_0        
		//*   1    1:istore_1        
		//*   2    2:iload_1         
		//*   3    3:aload_0         
		//*   4    4:getfield        #24  <Field SparseArray mScrap>
		//*   5    7:invokevirtual   #44  <Method int SparseArray.size()>
		//*   6   10:icmpge          37
				((ScrapData)mScrap.valueAt(i)).mScrapHeap.clear();
		//    7   13:aload_0         
		//    8   14:getfield        #24  <Field SparseArray mScrap>
		//    9   17:iload_1         
		//   10   18:invokevirtual   #47  <Method Object SparseArray.valueAt(int)>
		//   11   21:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   12   24:getfield        #51  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   13   27:invokevirtual   #55  <Method void ArrayList.clear()>

		//   14   30:iload_1         
		//   15   31:iconst_1        
		//   16   32:iadd            
		//   17   33:istore_1        
		//*  18   34:goto            2
		//   19   37:return          
		}

		void detach()
		{
			mAttachCount = mAttachCount - 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #26  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:isub            
		//    5    7:putfield        #26  <Field int mAttachCount>
		//    6   10:return          
		}

		void factorInBindTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mBindRunningAverageNs = runningAverage(scrapdata.mBindRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #64  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #68  <Method long runningAverage(long, long)>
		//   10   19:putfield        #64  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//   11   22:return          
		}

		void factorInCreateTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mCreateRunningAverageNs = runningAverage(scrapdata.mCreateRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #72  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #68  <Method long runningAverage(long, long)>
		//   10   19:putfield        #72  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//   11   22:return          
		}

		public ViewHolder getRecycledView(int i)
		{
			Object obj = ((Object) ((ScrapData)mScrap.get(i)));
		//    0    0:aload_0         
		//    1    1:getfield        #24  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #33  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_2        
			if(obj != null && !((ScrapData) (obj)).mScrapHeap.isEmpty())
		//*   6   12:aload_2         
		//*   7   13:ifnull          45
		//*   8   16:aload_2         
		//*   9   17:getfield        #51  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//*  10   20:invokevirtual   #79  <Method boolean ArrayList.isEmpty()>
		//*  11   23:ifne            45
			{
				obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//   12   26:aload_2         
		//   13   27:getfield        #51  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   14   30:astore_2        
				return (ViewHolder)((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1);
		//   15   31:aload_2         
		//   16   32:aload_2         
		//   17   33:invokevirtual   #80  <Method int ArrayList.size()>
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:invokevirtual   #83  <Method Object ArrayList.remove(int)>
		//   21   41:checkcast       #85  <Class RecyclerView$ViewHolder>
		//   22   44:areturn         
			} else
			{
				return null;
		//   23   45:aconst_null     
		//   24   46:areturn         
			}
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			if(adapter != null)
		//*   0    0:aload_1         
		//*   1    1:ifnull          8
				detach();
		//    2    4:aload_0         
		//    3    5:invokevirtual   #90  <Method void detach()>
			if(!flag && mAttachCount == 0)
		//*   4    8:iload_3         
		//*   5    9:ifne            23
		//*   6   12:aload_0         
		//*   7   13:getfield        #26  <Field int mAttachCount>
		//*   8   16:ifne            23
				clear();
		//    9   19:aload_0         
		//   10   20:invokevirtual   #91  <Method void clear()>
			if(adapter1 != null)
		//*  11   23:aload_2         
		//*  12   24:ifnull          31
				attach();
		//   13   27:aload_0         
		//   14   28:invokevirtual   #93  <Method void attach()>
		//   15   31:return          
		}

		public void putRecycledView(ViewHolder viewholder)
		{
			int i = viewholder.getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #98  <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    2    4:istore_2        
			ArrayList arraylist = getScrapDataForType(i).mScrapHeap;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    6   10:getfield        #51  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    7   13:astore_3        
			if(((ScrapData)mScrap.get(i)).mMaxScrap <= arraylist.size())
		//*   8   14:aload_0         
		//*   9   15:getfield        #24  <Field SparseArray mScrap>
		//*  10   18:iload_2         
		//*  11   19:invokevirtual   #33  <Method Object SparseArray.get(int)>
		//*  12   22:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//*  13   25:getfield        #101 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
		//*  14   28:aload_3         
		//*  15   29:invokevirtual   #80  <Method int ArrayList.size()>
		//*  16   32:icmpgt          36
			{
				return;
		//   17   35:return          
			} else
			{
				viewholder.resetInternal();
		//   18   36:aload_1         
		//   19   37:invokevirtual   #104 <Method void RecyclerView$ViewHolder.resetInternal()>
				arraylist.add(((Object) (viewholder)));
		//   20   40:aload_3         
		//   21   41:aload_1         
		//   22   42:invokevirtual   #108 <Method boolean ArrayList.add(Object)>
		//   23   45:pop             
				return;
		//   24   46:return          
			}
		}

		long runningAverage(long l, long l1)
		{
			if(l == 0L)
		//*   0    0:lload_1         
		//*   1    1:lconst_0        
		//*   2    2:lcmp            
		//*   3    3:ifne            8
				return l1;
		//    4    6:lload_3         
		//    5    7:lreturn         
			else
				return (l / 4L) * 3L + l1 / 4L;
		//    6    8:lload_1         
		//    7    9:ldc2w           #109 <Long 4L>
		//    8   12:ldiv            
		//    9   13:ldc2w           #111 <Long 3L>
		//   10   16:lmul            
		//   11   17:lload_3         
		//   12   18:ldc2w           #109 <Long 4L>
		//   13   21:ldiv            
		//   14   22:ladd            
		//   15   23:lreturn         
		}

		public void setMaxRecycledViews(int i, int j)
		{
			Object obj = ((Object) (getScrapDataForType(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore_3        
			obj.mMaxScrap = j;
		//    4    6:aload_3         
		//    5    7:iload_2         
		//    6    8:putfield        #101 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
			for(obj = ((Object) (((ScrapData) (obj)).mScrapHeap)); ((ArrayList) (obj)).size() > j; ((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1));
		//    7   11:aload_3         
		//    8   12:getfield        #51  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    9   15:astore_3        
		//   10   16:aload_3         
		//   11   17:invokevirtual   #80  <Method int ArrayList.size()>
		//   12   20:iload_2         
		//   13   21:icmple          38
		//   14   24:aload_3         
		//   15   25:aload_3         
		//   16   26:invokevirtual   #80  <Method int ArrayList.size()>
		//   17   29:iconst_1        
		//   18   30:isub            
		//   19   31:invokevirtual   #83  <Method Object ArrayList.remove(int)>
		//   20   34:pop             
		//*  21   35:goto            16
		//   22   38:return          
		}

		boolean willBindInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mBindRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #64  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            32
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            30
		//   15   27:goto            32
		//   16   30:iconst_0        
		//   17   31:ireturn         
		//   18   32:iconst_1        
		//   19   33:ireturn         
		}

		boolean willCreateInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mCreateRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #60  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #72  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            32
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            30
		//   15   27:goto            32
		//   16   30:iconst_0        
		//   17   31:ireturn         
		//   18   32:iconst_1        
		//   19   33:ireturn         
		}

		private int mAttachCount;
		SparseArray mScrap;

		public RecycledViewPool()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #19  <Method void Object()>
			mScrap = new SparseArray();
		//    2    4:aload_0         
		//    3    5:new             #21  <Class SparseArray>
		//    4    8:dup             
		//    5    9:invokespecial   #22  <Method void SparseArray()>
		//    6   12:putfield        #24  <Field SparseArray mScrap>
			mAttachCount = 0;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #26  <Field int mAttachCount>
		//   10   20:return          
		}
	}

	static class RecycledViewPool.ScrapData
	{

		long mBindRunningAverageNs;
		long mCreateRunningAverageNs;
		int mMaxScrap;
		final ArrayList mScrapHeap = new ArrayList();

		RecycledViewPool.ScrapData()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #22  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #24  <Class ArrayList>
		//    4    8:dup             
		//    5    9:invokespecial   #25  <Method void ArrayList()>
		//    6   12:putfield        #27  <Field ArrayList mScrapHeap>
			mMaxScrap = 5;
		//    7   15:aload_0         
		//    8   16:iconst_5        
		//    9   17:putfield        #29  <Field int mMaxScrap>
			mCreateRunningAverageNs = 0L;
		//   10   20:aload_0         
		//   11   21:lconst_0        
		//   12   22:putfield        #31  <Field long mCreateRunningAverageNs>
			mBindRunningAverageNs = 0L;
		//   13   25:aload_0         
		//   14   26:lconst_0        
		//   15   27:putfield        #33  <Field long mBindRunningAverageNs>
		//   16   30:return          
		}
	}

	public final class Recycler
	{

		private void attachAccessibilityDelegateOnBind(ViewHolder viewholder)
		{
			if(isAccessibilityEnabled())
		//*   0    0:aload_0         
		//*   1    1:getfield        #28  <Field RecyclerView this$0>
		//*   2    4:invokevirtual   #59  <Method boolean RecyclerView.isAccessibilityEnabled()>
		//*   3    7:ifeq            55
			{
				View view = viewholder.itemView;
		//    4   10:aload_1         
		//    5   11:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:astore_2        
				if(ViewCompat.getImportantForAccessibility(view) == 0)
		//*   7   15:aload_2         
		//*   8   16:invokestatic    #71  <Method int ViewCompat.getImportantForAccessibility(View)>
		//*   9   19:ifne            27
					ViewCompat.setImportantForAccessibility(view, 1);
		//   10   22:aload_2         
		//   11   23:iconst_1        
		//   12   24:invokestatic    #75  <Method void ViewCompat.setImportantForAccessibility(View, int)>
				if(!ViewCompat.hasAccessibilityDelegate(view))
		//*  13   27:aload_2         
		//*  14   28:invokestatic    #79  <Method boolean ViewCompat.hasAccessibilityDelegate(View)>
		//*  15   31:ifne            55
				{
					viewholder.addFlags(16384);
		//   16   34:aload_1         
		//   17   35:sipush          16384
		//   18   38:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					ViewCompat.setAccessibilityDelegate(view, mAccessibilityDelegate.getItemDelegate());
		//   19   41:aload_2         
		//   20   42:aload_0         
		//   21   43:getfield        #28  <Field RecyclerView this$0>
		//   22   46:getfield        #87  <Field RecyclerViewAccessibilityDelegate RecyclerView.mAccessibilityDelegate>
		//   23   49:invokevirtual   #93  <Method android.support.v4.view.AccessibilityDelegateCompat RecyclerViewAccessibilityDelegate.getItemDelegate()>
		//   24   52:invokestatic    #97  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
				}
			}
		//   25   55:return          
		}

		private void invalidateDisplayListInt(ViewHolder viewholder)
		{
			if(viewholder.itemView instanceof ViewGroup)
		//*   0    0:aload_1         
		//*   1    1:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//*   2    4:instanceof      #100 <Class ViewGroup>
		//*   3    7:ifeq            22
				invalidateDisplayListInt((ViewGroup)viewholder.itemView, false);
		//    4   10:aload_0         
		//    5   11:aload_1         
		//    6   12:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//    7   15:checkcast       #100 <Class ViewGroup>
		//    8   18:iconst_0        
		//    9   19:invokespecial   #103 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
		//   10   22:return          
		}

		private void invalidateDisplayListInt(ViewGroup viewgroup, boolean flag)
		{
			for(int i = viewgroup.getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #107 <Method int ViewGroup.getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_3        
		//*   5    7:iload_3         
		//*   6    8:iflt            43
			{
				View view = viewgroup.getChildAt(i);
		//    7   11:aload_1         
		//    8   12:iload_3         
		//    9   13:invokevirtual   #111 <Method View ViewGroup.getChildAt(int)>
		//   10   16:astore          4
				if(view instanceof ViewGroup)
		//*  11   18:aload           4
		//*  12   20:instanceof      #100 <Class ViewGroup>
		//*  13   23:ifeq            36
					invalidateDisplayListInt((ViewGroup)view, true);
		//   14   26:aload_0         
		//   15   27:aload           4
		//   16   29:checkcast       #100 <Class ViewGroup>
		//   17   32:iconst_1        
		//   18   33:invokespecial   #103 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
			}

		//   19   36:iload_3         
		//   20   37:iconst_1        
		//   21   38:isub            
		//   22   39:istore_3        
		//*  23   40:goto            7
			if(!flag)
		//*  24   43:iload_2         
		//*  25   44:ifne            48
				return;
		//   26   47:return          
			if(viewgroup.getVisibility() == 4)
		//*  27   48:aload_1         
		//*  28   49:invokevirtual   #114 <Method int ViewGroup.getVisibility()>
		//*  29   52:iconst_4        
		//*  30   53:icmpne          67
			{
				viewgroup.setVisibility(0);
		//   31   56:aload_1         
		//   32   57:iconst_0        
		//   33   58:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(4);
		//   34   61:aload_1         
		//   35   62:iconst_4        
		//   36   63:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				return;
		//   37   66:return          
			} else
			{
				int j = viewgroup.getVisibility();
		//   38   67:aload_1         
		//   39   68:invokevirtual   #114 <Method int ViewGroup.getVisibility()>
		//   40   71:istore_3        
				viewgroup.setVisibility(4);
		//   41   72:aload_1         
		//   42   73:iconst_4        
		//   43   74:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(j);
		//   44   77:aload_1         
		//   45   78:iload_3         
		//   46   79:invokevirtual   #117 <Method void ViewGroup.setVisibility(int)>
				return;
		//   47   82:return          
			}
		}

		private boolean tryBindViewHolderByDeadline(ViewHolder viewholder, int i, int j, long l)
		{
			viewholder.mOwnerRecyclerView = RecyclerView.this;
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field RecyclerView this$0>
		//    3    5:putfield        #123 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			int k = viewholder.getItemViewType();
		//    4    8:aload_1         
		//    5    9:invokevirtual   #126 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    6   12:istore          6
			long l1 = getNanoTime();
		//    7   14:aload_0         
		//    8   15:getfield        #28  <Field RecyclerView this$0>
		//    9   18:invokevirtual   #130 <Method long RecyclerView.getNanoTime()>
		//   10   21:lstore          7
			if(l != 0xffffffffL && !mRecyclerPool.willBindInTime(k, l1, l))
		//*  11   23:lload           4
		//*  12   25:ldc2w           #131 <Long 0xffffffffL>
		//*  13   28:lcmp            
		//*  14   29:ifeq            50
		//*  15   32:aload_0         
		//*  16   33:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  17   36:iload           6
		//*  18   38:lload           7
		//*  19   40:lload           4
		//*  20   42:invokevirtual   #140 <Method boolean RecyclerView$RecycledViewPool.willBindInTime(int, long, long)>
		//*  21   45:ifne            50
				return false;
		//   22   48:iconst_0        
		//   23   49:ireturn         
			mAdapter.bindViewHolder(viewholder, i);
		//   24   50:aload_0         
		//   25   51:getfield        #28  <Field RecyclerView this$0>
		//   26   54:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   27   57:aload_1         
		//   28   58:iload_2         
		//   29   59:invokevirtual   #150 <Method void RecyclerView$Adapter.bindViewHolder(RecyclerView$ViewHolder, int)>
			l = getNanoTime();
		//   30   62:aload_0         
		//   31   63:getfield        #28  <Field RecyclerView this$0>
		//   32   66:invokevirtual   #130 <Method long RecyclerView.getNanoTime()>
		//   33   69:lstore          4
			mRecyclerPool.factorInBindTime(viewholder.getItemViewType(), l - l1);
		//   34   71:aload_0         
		//   35   72:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   36   75:aload_1         
		//   37   76:invokevirtual   #126 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   38   79:lload           4
		//   39   81:lload           7
		//   40   83:lsub            
		//   41   84:invokevirtual   #154 <Method void RecyclerView$RecycledViewPool.factorInBindTime(int, long)>
			attachAccessibilityDelegateOnBind(viewholder);
		//   42   87:aload_0         
		//   43   88:aload_1         
		//   44   89:invokespecial   #156 <Method void attachAccessibilityDelegateOnBind(RecyclerView$ViewHolder)>
			if(mState.isPreLayout())
		//*  45   92:aload_0         
		//*  46   93:getfield        #28  <Field RecyclerView this$0>
		//*  47   96:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*  48   99:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//*  49  102:ifeq            110
				viewholder.mPreLayoutPosition = j;
		//   50  105:aload_1         
		//   51  106:iload_3         
		//   52  107:putfield        #168 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			return true;
		//   53  110:iconst_1        
		//   54  111:ireturn         
		}

		void addViewHolderToRecycledViewPool(ViewHolder viewholder, boolean flag)
		{
			RecyclerView.clearNestedRecyclerViewIfNotNested(viewholder);
		//    0    0:aload_1         
		//    1    1:invokestatic    #174 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
			if(viewholder.hasAnyOfTheFlags(16384))
		//*   2    4:aload_1         
		//*   3    5:sipush          16384
		//*   4    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   5   11:ifeq            30
			{
				viewholder.setFlags(0, 16384);
		//    6   14:aload_1         
		//    7   15:iconst_0        
		//    8   16:sipush          16384
		//    9   19:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				ViewCompat.setAccessibilityDelegate(viewholder.itemView, ((android.support.v4.view.AccessibilityDelegateCompat) (null)));
		//   10   22:aload_1         
		//   11   23:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//   12   26:aconst_null     
		//   13   27:invokestatic    #97  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			}
			if(flag)
		//*  14   30:iload_2         
		//*  15   31:ifeq            39
				dispatchViewRecycled(viewholder);
		//   16   34:aload_0         
		//   17   35:aload_1         
		//   18   36:invokevirtual   #185 <Method void dispatchViewRecycled(RecyclerView$ViewHolder)>
			viewholder.mOwnerRecyclerView = null;
		//   19   39:aload_1         
		//   20   40:aconst_null     
		//   21   41:putfield        #123 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			getRecycledViewPool().putRecycledView(viewholder);
		//   22   44:aload_0         
		//   23   45:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//   24   48:aload_1         
		//   25   49:invokevirtual   #192 <Method void RecyclerView$RecycledViewPool.putRecycledView(RecyclerView$ViewHolder)>
		//   26   52:return          
		}

		public void clear()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #195 <Method void ArrayList.clear()>
			recycleAndClearCachedViews();
		//    3    7:aload_0         
		//    4    8:invokevirtual   #198 <Method void recycleAndClearCachedViews()>
		//    5   11:return          
		}

		void clearOldPositions()
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:istore_3        
			boolean flag = false;
		//    4    8:iconst_0        
		//    5    9:istore_2        
			for(int i = 0; i < l; i++)
		//*   6   10:iconst_0        
		//*   7   11:istore_1        
		//*   8   12:iload_1         
		//*   9   13:iload_3         
		//*  10   14:icmpge          38
				((ViewHolder)mCachedViews.get(i)).clearOldPosition();
		//   11   17:aload_0         
		//   12   18:getfield        #40  <Field ArrayList mCachedViews>
		//   13   21:iload_1         
		//   14   22:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   15   25:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   16   28:invokevirtual   #209 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   17   31:iload_1         
		//   18   32:iconst_1        
		//   19   33:iadd            
		//   20   34:istore_1        
		//*  21   35:goto            12
			l = mAttachedScrap.size();
		//   22   38:aload_0         
		//   23   39:getfield        #36  <Field ArrayList mAttachedScrap>
		//   24   42:invokevirtual   #202 <Method int ArrayList.size()>
		//   25   45:istore_3        
			for(int j = 0; j < l; j++)
		//*  26   46:iconst_0        
		//*  27   47:istore_1        
		//*  28   48:iload_1         
		//*  29   49:iload_3         
		//*  30   50:icmpge          74
				((ViewHolder)mAttachedScrap.get(j)).clearOldPosition();
		//   31   53:aload_0         
		//   32   54:getfield        #36  <Field ArrayList mAttachedScrap>
		//   33   57:iload_1         
		//   34   58:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   35   61:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   36   64:invokevirtual   #209 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   37   67:iload_1         
		//   38   68:iconst_1        
		//   39   69:iadd            
		//   40   70:istore_1        
		//*  41   71:goto            48
			ArrayList arraylist = mChangedScrap;
		//   42   74:aload_0         
		//   43   75:getfield        #38  <Field ArrayList mChangedScrap>
		//   44   78:astore          4
			if(arraylist != null)
		//*  45   80:aload           4
		//*  46   82:ifnull          119
			{
				int i1 = arraylist.size();
		//   47   85:aload           4
		//   48   87:invokevirtual   #202 <Method int ArrayList.size()>
		//   49   90:istore_3        
				for(int k = ((int) (flag)); k < i1; k++)
		//*  50   91:iload_2         
		//*  51   92:istore_1        
		//*  52   93:iload_1         
		//*  53   94:iload_3         
		//*  54   95:icmpge          119
					((ViewHolder)mChangedScrap.get(k)).clearOldPosition();
		//   55   98:aload_0         
		//   56   99:getfield        #38  <Field ArrayList mChangedScrap>
		//   57  102:iload_1         
		//   58  103:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   59  106:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   60  109:invokevirtual   #209 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   61  112:iload_1         
		//   62  113:iconst_1        
		//   63  114:iadd            
		//   64  115:istore_1        
			}
		//*  65  116:goto            93
		//   66  119:return          
		}

		void clearScrap()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #195 <Method void ArrayList.clear()>
			ArrayList arraylist = mChangedScrap;
		//    3    7:aload_0         
		//    4    8:getfield        #38  <Field ArrayList mChangedScrap>
		//    5   11:astore_1        
			if(arraylist != null)
		//*   6   12:aload_1         
		//*   7   13:ifnull          20
				arraylist.clear();
		//    8   16:aload_1         
		//    9   17:invokevirtual   #195 <Method void ArrayList.clear()>
		//   10   20:return          
		}

		public int convertPreLayoutPositionToPostLayout(int i)
		{
			if(i >= 0 && i < mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            45
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #28  <Field RecyclerView this$0>
		//*   5    9:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #215 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmpge          45
			{
				if(!mState.isPreLayout())
		//*   8   18:aload_0         
		//*   9   19:getfield        #28  <Field RecyclerView this$0>
		//*  10   22:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*  11   25:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//*  12   28:ifne            33
					return i;
		//   13   31:iload_1         
		//   14   32:ireturn         
				else
					return mAdapterHelper.findPositionOffset(i);
		//   15   33:aload_0         
		//   16   34:getfield        #28  <Field RecyclerView this$0>
		//   17   37:getfield        #219 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   18   40:iload_1         
		//   19   41:invokevirtual   #224 <Method int AdapterHelper.findPositionOffset(int)>
		//   20   44:ireturn         
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   21   45:new             #226 <Class StringBuilder>
		//   22   48:dup             
		//   23   49:invokespecial   #227 <Method void StringBuilder()>
		//   24   52:astore_2        
				stringbuilder.append("invalid position ");
		//   25   53:aload_2         
		//   26   54:ldc1            #229 <String "invalid position ">
		//   27   56:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   28   59:pop             
				stringbuilder.append(i);
		//   29   60:aload_2         
		//   30   61:iload_1         
		//   31   62:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//   32   65:pop             
				stringbuilder.append(". State ");
		//   33   66:aload_2         
		//   34   67:ldc1            #238 <String ". State ">
		//   35   69:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   36   72:pop             
				stringbuilder.append("item count is ");
		//   37   73:aload_2         
		//   38   74:ldc1            #240 <String "item count is ">
		//   39   76:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   40   79:pop             
				stringbuilder.append(mState.getItemCount());
		//   41   80:aload_2         
		//   42   81:aload_0         
		//   43   82:getfield        #28  <Field RecyclerView this$0>
		//   44   85:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//   45   88:invokevirtual   #215 <Method int RecyclerView$State.getItemCount()>
		//   46   91:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//   47   94:pop             
				stringbuilder.append(exceptionLabel());
		//   48   95:aload_2         
		//   49   96:aload_0         
		//   50   97:getfield        #28  <Field RecyclerView this$0>
		//   51  100:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//   52  103:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   53  106:pop             
				throw new IndexOutOfBoundsException(stringbuilder.toString());
		//   54  107:new             #246 <Class IndexOutOfBoundsException>
		//   55  110:dup             
		//   56  111:aload_2         
		//   57  112:invokevirtual   #249 <Method String StringBuilder.toString()>
		//   58  115:invokespecial   #252 <Method void IndexOutOfBoundsException(String)>
		//   59  118:athrow          
			}
		}

		void dispatchViewRecycled(ViewHolder viewholder)
		{
			if(mRecyclerListener != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #28  <Field RecyclerView this$0>
		//*   2    4:getfield        #256 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//*   3    7:ifnull          23
				mRecyclerListener.onViewRecycled(viewholder);
		//    4   10:aload_0         
		//    5   11:getfield        #28  <Field RecyclerView this$0>
		//    6   14:getfield        #256 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//    7   17:aload_1         
		//    8   18:invokeinterface #261 <Method void RecyclerView$RecyclerListener.onViewRecycled(RecyclerView$ViewHolder)>
			if(mAdapter != null)
		//*   9   23:aload_0         
		//*  10   24:getfield        #28  <Field RecyclerView this$0>
		//*  11   27:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  12   30:ifnull          44
				mAdapter.onViewRecycled(viewholder);
		//   13   33:aload_0         
		//   14   34:getfield        #28  <Field RecyclerView this$0>
		//   15   37:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   16   40:aload_1         
		//   17   41:invokevirtual   #262 <Method void RecyclerView$Adapter.onViewRecycled(RecyclerView$ViewHolder)>
			if(mState != null)
		//*  18   44:aload_0         
		//*  19   45:getfield        #28  <Field RecyclerView this$0>
		//*  20   48:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*  21   51:ifnull          65
				mViewInfoStore.removeViewHolder(viewholder);
		//   22   54:aload_0         
		//   23   55:getfield        #28  <Field RecyclerView this$0>
		//   24   58:getfield        #266 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   61:aload_1         
		//   26   62:invokevirtual   #271 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//   27   65:return          
		}

		ViewHolder getChangedScrapViewForPosition(int i)
		{
			ArrayList arraylist = mChangedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mChangedScrap>
		//    2    4:astore          7
			if(arraylist != null)
		//*   3    6:aload           7
		//*   4    8:ifnull          197
			{
				int k = arraylist.size();
		//    5   11:aload           7
		//    6   13:invokevirtual   #202 <Method int ArrayList.size()>
		//    7   16:istore          4
				if(k == 0)
		//*   8   18:iload           4
		//*   9   20:ifne            25
					return null;
		//   10   23:aconst_null     
		//   11   24:areturn         
				boolean flag = false;
		//   12   25:iconst_0        
		//   13   26:istore_3        
				for(int j = 0; j < k; j++)
		//*  14   27:iconst_0        
		//*  15   28:istore_2        
		//*  16   29:iload_2         
		//*  17   30:iload           4
		//*  18   32:icmpge          82
				{
					ViewHolder viewholder = (ViewHolder)mChangedScrap.get(j);
		//   19   35:aload_0         
		//   20   36:getfield        #38  <Field ArrayList mChangedScrap>
		//   21   39:iload_2         
		//   22   40:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   23   43:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   24   46:astore          7
					if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i)
		//*  25   48:aload           7
		//*  26   50:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  27   53:ifne            75
		//*  28   56:aload           7
		//*  29   58:invokevirtual   #279 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  30   61:iload_1         
		//*  31   62:icmpne          75
					{
						viewholder.addFlags(32);
		//   32   65:aload           7
		//   33   67:bipush          32
		//   34   69:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder;
		//   35   72:aload           7
		//   36   74:areturn         
					}
				}

		//   37   75:iload_2         
		//   38   76:iconst_1        
		//   39   77:iadd            
		//   40   78:istore_2        
		//*  41   79:goto            29
				if(mAdapter.hasStableIds())
		//*  42   82:aload_0         
		//*  43   83:getfield        #28  <Field RecyclerView this$0>
		//*  44   86:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  45   89:invokevirtual   #282 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  46   92:ifeq            195
				{
					i = mAdapterHelper.findPositionOffset(i);
		//   47   95:aload_0         
		//   48   96:getfield        #28  <Field RecyclerView this$0>
		//   49   99:getfield        #219 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   50  102:iload_1         
		//   51  103:invokevirtual   #224 <Method int AdapterHelper.findPositionOffset(int)>
		//   52  106:istore_1        
					if(i > 0 && i < mAdapter.getItemCount())
		//*  53  107:iload_1         
		//*  54  108:ifle            195
		//*  55  111:iload_1         
		//*  56  112:aload_0         
		//*  57  113:getfield        #28  <Field RecyclerView this$0>
		//*  58  116:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  59  119:invokevirtual   #283 <Method int RecyclerView$Adapter.getItemCount()>
		//*  60  122:icmpge          195
					{
						long l = mAdapter.getItemId(i);
		//   61  125:aload_0         
		//   62  126:getfield        #28  <Field RecyclerView this$0>
		//   63  129:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   64  132:iload_1         
		//   65  133:invokevirtual   #287 <Method long RecyclerView$Adapter.getItemId(int)>
		//   66  136:lstore          5
						for(i = ((int) (flag)); i < k; i++)
		//*  67  138:iload_3         
		//*  68  139:istore_1        
		//*  69  140:iload_1         
		//*  70  141:iload           4
		//*  71  143:icmpge          195
						{
							ViewHolder viewholder1 = (ViewHolder)mChangedScrap.get(i);
		//   72  146:aload_0         
		//   73  147:getfield        #38  <Field ArrayList mChangedScrap>
		//   74  150:iload_1         
		//   75  151:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   76  154:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   77  157:astore          7
							if(!viewholder1.wasReturnedFromScrap() && viewholder1.getItemId() == l)
		//*  78  159:aload           7
		//*  79  161:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  80  164:ifne            188
		//*  81  167:aload           7
		//*  82  169:invokevirtual   #289 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  83  172:lload           5
		//*  84  174:lcmp            
		//*  85  175:ifne            188
							{
								viewholder1.addFlags(32);
		//   86  178:aload           7
		//   87  180:bipush          32
		//   88  182:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
								return viewholder1;
		//   89  185:aload           7
		//   90  187:areturn         
							}
						}

		//   91  188:iload_1         
		//   92  189:iconst_1        
		//   93  190:iadd            
		//   94  191:istore_1        
					}
				}
		//*  95  192:goto            140
				return null;
		//   96  195:aconst_null     
		//   97  196:areturn         
			} else
			{
				return null;
		//   98  197:aconst_null     
		//   99  198:areturn         
			}
		}

		RecycledViewPool getRecycledViewPool()
		{
			if(mRecyclerPool == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnonnull       18
				mRecyclerPool = new RecycledViewPool();
		//    3    7:aload_0         
		//    4    8:new             #136 <Class RecyclerView$RecycledViewPool>
		//    5   11:dup             
		//    6   12:invokespecial   #290 <Method void RecyclerView$RecycledViewPool()>
		//    7   15:putfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			return mRecyclerPool;
		//    8   18:aload_0         
		//    9   19:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   10   22:areturn         
		}

		int getScrapCount()
		{
			return mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:ireturn         
		}

		public List getScrapList()
		{
			return mUnmodifiableAttachedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #48  <Field List mUnmodifiableAttachedScrap>
		//    2    4:areturn         
		}

		ViewHolder getScrapOrCachedViewForId(long l, int i, boolean flag)
		{
			for(int j = mAttachedScrap.size() - 1; j >= 0; j--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//*   2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          5
		//*   6   11:iload           5
		//*   7   13:iflt            142
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//    8   16:aload_0         
		//    9   17:getfield        #36  <Field ArrayList mAttachedScrap>
		//   10   20:iload           5
		//   11   22:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   13   28:astore          6
				if(viewholder.getItemId() != l || viewholder.wasReturnedFromScrap())
					continue;
		//   14   30:aload           6
		//   15   32:invokevirtual   #289 <Method long RecyclerView$ViewHolder.getItemId()>
		//   16   35:lload_1         
		//   17   36:lcmp            
		//   18   37:ifne            133
		//   19   40:aload           6
		//   20   42:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   21   45:ifne            133
				if(i == viewholder.getItemViewType())
		//*  22   48:iload_3         
		//*  23   49:aload           6
		//*  24   51:invokevirtual   #126 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  25   54:icmpne          96
				{
					viewholder.addFlags(32);
		//   26   57:aload           6
		//   27   59:bipush          32
		//   28   61:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					if(viewholder.isRemoved() && !mState.isPreLayout())
		//*  29   64:aload           6
		//*  30   66:invokevirtual   #301 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  31   69:ifeq            93
		//*  32   72:aload_0         
		//*  33   73:getfield        #28  <Field RecyclerView this$0>
		//*  34   76:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*  35   79:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//*  36   82:ifne            93
						viewholder.setFlags(2, 14);
		//   37   85:aload           6
		//   38   87:iconst_2        
		//   39   88:bipush          14
		//   40   90:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
					return viewholder;
		//   41   93:aload           6
		//   42   95:areturn         
				}
				if(!flag)
		//*  43   96:iload           4
		//*  44   98:ifne            133
				{
					mAttachedScrap.remove(j);
		//   45  101:aload_0         
		//   46  102:getfield        #36  <Field ArrayList mAttachedScrap>
		//   47  105:iload           5
		//   48  107:invokevirtual   #304 <Method Object ArrayList.remove(int)>
		//   49  110:pop             
					removeDetachedView(viewholder.itemView, false);
		//   50  111:aload_0         
		//   51  112:getfield        #28  <Field RecyclerView this$0>
		//   52  115:aload           6
		//   53  117:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//   54  120:iconst_0        
		//   55  121:invokevirtual   #308 <Method void RecyclerView.removeDetachedView(View, boolean)>
					quickRecycleScrapView(viewholder.itemView);
		//   56  124:aload_0         
		//   57  125:aload           6
		//   58  127:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//   59  130:invokevirtual   #312 <Method void quickRecycleScrapView(View)>
				}
			}

		//   60  133:iload           5
		//   61  135:iconst_1        
		//   62  136:isub            
		//   63  137:istore          5
		//*  64  139:goto            11
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*  65  142:aload_0         
		//*  66  143:getfield        #40  <Field ArrayList mCachedViews>
		//*  67  146:invokevirtual   #202 <Method int ArrayList.size()>
		//*  68  149:iconst_1        
		//*  69  150:isub            
		//*  70  151:istore          5
		//*  71  153:iload           5
		//*  72  155:iflt            231
			{
				ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//   73  158:aload_0         
		//   74  159:getfield        #40  <Field ArrayList mCachedViews>
		//   75  162:iload           5
		//   76  164:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   77  167:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   78  170:astore          6
				if(viewholder1.getItemId() != l)
					continue;
		//   79  172:aload           6
		//   80  174:invokevirtual   #289 <Method long RecyclerView$ViewHolder.getItemId()>
		//   81  177:lload_1         
		//   82  178:lcmp            
		//   83  179:ifne            222
				if(i == viewholder1.getItemViewType())
		//*  84  182:iload_3         
		//*  85  183:aload           6
		//*  86  185:invokevirtual   #126 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  87  188:icmpne          209
				{
					if(!flag)
		//*  88  191:iload           4
		//*  89  193:ifne            206
						mCachedViews.remove(k);
		//   90  196:aload_0         
		//   91  197:getfield        #40  <Field ArrayList mCachedViews>
		//   92  200:iload           5
		//   93  202:invokevirtual   #304 <Method Object ArrayList.remove(int)>
		//   94  205:pop             
					return viewholder1;
		//   95  206:aload           6
		//   96  208:areturn         
				}
				if(!flag)
		//*  97  209:iload           4
		//*  98  211:ifne            222
				{
					recycleCachedViewAt(k);
		//   99  214:aload_0         
		//  100  215:iload           5
		//  101  217:invokevirtual   #315 <Method void recycleCachedViewAt(int)>
					return null;
		//  102  220:aconst_null     
		//  103  221:areturn         
				}
			}

		//  104  222:iload           5
		//  105  224:iconst_1        
		//  106  225:isub            
		//  107  226:istore          5
		//* 108  228:goto            153
			return null;
		//  109  231:aconst_null     
		//  110  232:areturn         
		}

		ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int i, boolean flag)
		{
			int l = mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:istore          5
			boolean flag1 = false;
		//    4    9:iconst_0        
		//    5   10:istore          4
			for(int j = 0; j < l; j++)
		//*   6   12:iconst_0        
		//*   7   13:istore_3        
		//*   8   14:iload_3         
		//*   9   15:iload           5
		//*  10   17:icmpge          96
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//   11   20:aload_0         
		//   12   21:getfield        #36  <Field ArrayList mAttachedScrap>
		//   13   24:iload_3         
		//   14   25:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   15   28:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   16   31:astore          6
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i && !viewholder.isInvalid() && (mState.mInPreLayout || !viewholder.isRemoved()))
		//*  17   33:aload           6
		//*  18   35:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   38:ifne            89
		//*  20   41:aload           6
		//*  21   43:invokevirtual   #279 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  22   46:iload_1         
		//*  23   47:icmpne          89
		//*  24   50:aload           6
		//*  25   52:invokevirtual   #320 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  26   55:ifne            89
		//*  27   58:aload_0         
		//*  28   59:getfield        #28  <Field RecyclerView this$0>
		//*  29   62:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//*  30   65:getfield        #324 <Field boolean RecyclerView$State.mInPreLayout>
		//*  31   68:ifne            79
		//*  32   71:aload           6
		//*  33   73:invokevirtual   #301 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  34   76:ifne            89
				{
					viewholder.addFlags(32);
		//   35   79:aload           6
		//   36   81:bipush          32
		//   37   83:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   38   86:aload           6
		//   39   88:areturn         
				}
			}

		//   40   89:iload_3         
		//   41   90:iconst_1        
		//   42   91:iadd            
		//   43   92:istore_3        
		//*  44   93:goto            14
			if(!flag)
		//*  45   96:iload_2         
		//*  46   97:ifne            235
			{
				View view = mChildHelper.findHiddenNonRemovedView(i);
		//   47  100:aload_0         
		//   48  101:getfield        #28  <Field RecyclerView this$0>
		//   49  104:getfield        #328 <Field ChildHelper RecyclerView.mChildHelper>
		//   50  107:iload_1         
		//   51  108:invokevirtual   #333 <Method View ChildHelper.findHiddenNonRemovedView(int)>
		//   52  111:astore          7
				if(view != null)
		//*  53  113:aload           7
		//*  54  115:ifnull          235
				{
					ViewHolder viewholder1 = RecyclerView.getChildViewHolderInt(view);
		//   55  118:aload           7
		//   56  120:invokestatic    #337 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   57  123:astore          6
					mChildHelper.unhide(view);
		//   58  125:aload_0         
		//   59  126:getfield        #28  <Field RecyclerView this$0>
		//   60  129:getfield        #328 <Field ChildHelper RecyclerView.mChildHelper>
		//   61  132:aload           7
		//   62  134:invokevirtual   #340 <Method void ChildHelper.unhide(View)>
					i = mChildHelper.indexOfChild(view);
		//   63  137:aload_0         
		//   64  138:getfield        #28  <Field RecyclerView this$0>
		//   65  141:getfield        #328 <Field ChildHelper RecyclerView.mChildHelper>
		//   66  144:aload           7
		//   67  146:invokevirtual   #343 <Method int ChildHelper.indexOfChild(View)>
		//   68  149:istore_1        
					if(i != -1)
		//*  69  150:iload_1         
		//*  70  151:iconst_m1       
		//*  71  152:icmpeq          183
					{
						mChildHelper.detachViewFromParent(i);
		//   72  155:aload_0         
		//   73  156:getfield        #28  <Field RecyclerView this$0>
		//   74  159:getfield        #328 <Field ChildHelper RecyclerView.mChildHelper>
		//   75  162:iload_1         
		//   76  163:invokevirtual   #346 <Method void ChildHelper.detachViewFromParent(int)>
						scrapView(view);
		//   77  166:aload_0         
		//   78  167:aload           7
		//   79  169:invokevirtual   #349 <Method void scrapView(View)>
						viewholder1.addFlags(8224);
		//   80  172:aload           6
		//   81  174:sipush          8224
		//   82  177:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder1;
		//   83  180:aload           6
		//   84  182:areturn         
					} else
					{
						StringBuilder stringbuilder = new StringBuilder();
		//   85  183:new             #226 <Class StringBuilder>
		//   86  186:dup             
		//   87  187:invokespecial   #227 <Method void StringBuilder()>
		//   88  190:astore          7
						stringbuilder.append("layout index should not be -1 after unhiding a view:");
		//   89  192:aload           7
		//   90  194:ldc2            #351 <String "layout index should not be -1 after unhiding a view:">
		//   91  197:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   92  200:pop             
						stringbuilder.append(((Object) (viewholder1)));
		//   93  201:aload           7
		//   94  203:aload           6
		//   95  205:invokevirtual   #354 <Method StringBuilder StringBuilder.append(Object)>
		//   96  208:pop             
						stringbuilder.append(exceptionLabel());
		//   97  209:aload           7
		//   98  211:aload_0         
		//   99  212:getfield        #28  <Field RecyclerView this$0>
		//  100  215:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  101  218:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  102  221:pop             
						throw new IllegalStateException(stringbuilder.toString());
		//  103  222:new             #356 <Class IllegalStateException>
		//  104  225:dup             
		//  105  226:aload           7
		//  106  228:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  107  231:invokespecial   #357 <Method void IllegalStateException(String)>
		//  108  234:athrow          
					}
				}
			}
			l = mCachedViews.size();
		//  109  235:aload_0         
		//  110  236:getfield        #40  <Field ArrayList mCachedViews>
		//  111  239:invokevirtual   #202 <Method int ArrayList.size()>
		//  112  242:istore          5
			for(int k = ((int) (flag1)); k < l; k++)
		//* 113  244:iload           4
		//* 114  246:istore_3        
		//* 115  247:iload_3         
		//* 116  248:iload           5
		//* 117  250:icmpge          306
			{
				ViewHolder viewholder2 = (ViewHolder)mCachedViews.get(k);
		//  118  253:aload_0         
		//  119  254:getfield        #40  <Field ArrayList mCachedViews>
		//  120  257:iload_3         
		//  121  258:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//  122  261:checkcast       #61  <Class RecyclerView$ViewHolder>
		//  123  264:astore          6
				if(!viewholder2.isInvalid() && viewholder2.getLayoutPosition() == i)
		//* 124  266:aload           6
		//* 125  268:invokevirtual   #320 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 126  271:ifne            299
		//* 127  274:aload           6
		//* 128  276:invokevirtual   #279 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//* 129  279:iload_1         
		//* 130  280:icmpne          299
				{
					if(!flag)
		//* 131  283:iload_2         
		//* 132  284:ifne            296
						mCachedViews.remove(k);
		//  133  287:aload_0         
		//  134  288:getfield        #40  <Field ArrayList mCachedViews>
		//  135  291:iload_3         
		//  136  292:invokevirtual   #304 <Method Object ArrayList.remove(int)>
		//  137  295:pop             
					return viewholder2;
		//  138  296:aload           6
		//  139  298:areturn         
				}
			}

		//  140  299:iload_3         
		//  141  300:iconst_1        
		//  142  301:iadd            
		//  143  302:istore_3        
		//* 144  303:goto            247
			return null;
		//  145  306:aconst_null     
		//  146  307:areturn         
		}

		View getScrapViewAt(int i)
		{
			return ((ViewHolder)mAttachedScrap.get(i)).itemView;
		//    0    0:aload_0         
		//    1    1:getfield        #36  <Field ArrayList mAttachedScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//    4    8:checkcast       #61  <Class RecyclerView$ViewHolder>
		//    5   11:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:areturn         
		}

		public View getViewForPosition(int i)
		{
			return getViewForPosition(i, false);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #362 <Method View getViewForPosition(int, boolean)>
		//    4    6:areturn         
		}

		View getViewForPosition(int i, boolean flag)
		{
			return tryGetViewHolderForPositionByDeadline(i, flag, 0xffffffffL).itemView;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc2w           #131 <Long 0xffffffffL>
		//    4    6:invokevirtual   #366 <Method RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int, boolean, long)>
		//    5    9:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//    6   12:areturn         
		}

		void markItemDecorInsetsDirty()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          52
			{
				LayoutParams layoutparams = (LayoutParams)((ViewHolder)mCachedViews.get(i)).itemView.getLayoutParams();
		//    9   15:aload_0         
		//   10   16:getfield        #40  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   14   26:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//   15   29:invokevirtual   #373 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   32:checkcast       #375 <Class RecyclerView$LayoutParams>
		//   17   35:astore_3        
				if(layoutparams != null)
		//*  18   36:aload_3         
		//*  19   37:ifnull          45
					layoutparams.mInsetsDirty = true;
		//   20   40:aload_3         
		//   21   41:iconst_1        
		//   22   42:putfield        #378 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}

		//   23   45:iload_1         
		//   24   46:iconst_1        
		//   25   47:iadd            
		//   26   48:istore_1        
		//*  27   49:goto            10
		//   28   52:return          
		}

		void markKnownViewsInvalid()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          49
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//    9   15:aload_0         
		//   10   16:getfield        #40  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   14   26:astore_3        
				if(viewholder != null)
		//*  15   27:aload_3         
		//*  16   28:ifnull          42
				{
					viewholder.addFlags(6);
		//   17   31:aload_3         
		//   18   32:bipush          6
		//   19   34:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					viewholder.addChangePayload(((Object) (null)));
		//   20   37:aload_3         
		//   21   38:aconst_null     
		//   22   39:invokevirtual   #383 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				}
			}

		//   23   42:iload_1         
		//   24   43:iconst_1        
		//   25   44:iadd            
		//   26   45:istore_1        
		//*  27   46:goto            10
			if(mAdapter == null || !mAdapter.hasStableIds())
		//*  28   49:aload_0         
		//*  29   50:getfield        #28  <Field RecyclerView this$0>
		//*  30   53:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  31   56:ifnull          72
		//*  32   59:aload_0         
		//*  33   60:getfield        #28  <Field RecyclerView this$0>
		//*  34   63:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  35   66:invokevirtual   #282 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  36   69:ifne            76
				recycleAndClearCachedViews();
		//   37   72:aload_0         
		//   38   73:invokevirtual   #198 <Method void recycleAndClearCachedViews()>
		//   39   76:return          
		}

		void offsetPositionRecordsForInsert(int i, int j)
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int k = 0; k < l; k++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          58
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    9   17:aload_0         
		//   10   18:getfield        #40  <Field ArrayList mCachedViews>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(viewholder != null && viewholder.mPosition >= i)
		//*  15   30:aload           5
		//*  16   32:ifnull          51
		//*  17   35:aload           5
		//*  18   37:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  19   40:iload_1         
		//*  20   41:icmplt          51
					viewholder.offsetPosition(j, true);
		//   21   44:aload           5
		//   22   46:iload_2         
		//   23   47:iconst_1        
		//   24   48:invokevirtual   #391 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   25   51:iload_3         
		//   26   52:iconst_1        
		//   27   53:iadd            
		//   28   54:istore_3        
		//*  29   55:goto            11
		//   30   58:return          
		}

		void offsetPositionRecordsForMove(int i, int j)
		{
			int k;
			int l;
			byte byte0;
			if(i < j)
		//*   0    0:iload_1         
		//*   1    1:iload_2         
		//*   2    2:icmpge          16
			{
				k = i;
		//    3    5:iload_1         
		//    4    6:istore_3        
				l = j;
		//    5    7:iload_2         
		//    6    8:istore          4
				byte0 = -1;
		//    7   10:iconst_m1       
		//    8   11:istore          5
			} else
		//*   9   13:goto            24
			{
				l = i;
		//   10   16:iload_1         
		//   11   17:istore          4
				k = j;
		//   12   19:iload_2         
		//   13   20:istore_3        
				byte0 = 1;
		//   14   21:iconst_1        
		//   15   22:istore          5
			}
			int j1 = mCachedViews.size();
		//   16   24:aload_0         
		//   17   25:getfield        #40  <Field ArrayList mCachedViews>
		//   18   28:invokevirtual   #202 <Method int ArrayList.size()>
		//   19   31:istore          7
			for(int i1 = 0; i1 < j1; i1++)
		//*  20   33:iconst_0        
		//*  21   34:istore          6
		//*  22   36:iload           6
		//*  23   38:iload           7
		//*  24   40:icmpge          122
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i1);
		//   25   43:aload_0         
		//   26   44:getfield        #40  <Field ArrayList mCachedViews>
		//   27   47:iload           6
		//   28   49:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   29   52:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   30   55:astore          8
				if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
		//*  31   57:aload           8
		//*  32   59:ifnull          113
		//*  33   62:aload           8
		//*  34   64:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  35   67:iload_3         
		//*  36   68:icmplt          113
		//*  37   71:aload           8
		//*  38   73:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  39   76:iload           4
		//*  40   78:icmple          84
					continue;
		//   41   81:goto            113
				if(viewholder.mPosition == i)
		//*  42   84:aload           8
		//*  43   86:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  44   89:iload_1         
		//*  45   90:icmpne          105
					viewholder.offsetPosition(j - i, false);
		//   46   93:aload           8
		//   47   95:iload_2         
		//   48   96:iload_1         
		//   49   97:isub            
		//   50   98:iconst_0        
		//   51   99:invokevirtual   #391 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				else
		//*  52  102:goto            113
					viewholder.offsetPosition(((int) (byte0)), false);
		//   53  105:aload           8
		//   54  107:iload           5
		//   55  109:iconst_0        
		//   56  110:invokevirtual   #391 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   57  113:iload           6
		//   58  115:iconst_1        
		//   59  116:iadd            
		//   60  117:istore          6
		//*  61  119:goto            36
		//   62  122:return          
		}

		void offsetPositionRecordsForRemove(int i, int j, boolean flag)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            88
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   16:aload_0         
		//    9   17:getfield        #40  <Field ArrayList mCachedViews>
		//   10   20:iload           4
		//   11   22:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   13   28:astore          5
				if(viewholder == null)
					continue;
		//   14   30:aload           5
		//   15   32:ifnull          79
				if(viewholder.mPosition >= i + j)
		//*  16   35:aload           5
		//*  17   37:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  18   40:iload_1         
		//*  19   41:iload_2         
		//*  20   42:iadd            
		//*  21   43:icmplt          57
				{
					viewholder.offsetPosition(-j, flag);
		//   22   46:aload           5
		//   23   48:iload_2         
		//   24   49:ineg            
		//   25   50:iload_3         
		//   26   51:invokevirtual   #391 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					continue;
		//   27   54:goto            79
				}
				if(viewholder.mPosition >= i)
		//*  28   57:aload           5
		//*  29   59:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  30   62:iload_1         
		//*  31   63:icmplt          79
				{
					viewholder.addFlags(8);
		//   32   66:aload           5
		//   33   68:bipush          8
		//   34   70:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   35   73:aload_0         
		//   36   74:iload           4
		//   37   76:invokevirtual   #315 <Method void recycleCachedViewAt(int)>
				}
			}

		//   38   79:iload           4
		//   39   81:iconst_1        
		//   40   82:isub            
		//   41   83:istore          4
		//*  42   85:goto            11
		//   43   88:return          
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			clear();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #397 <Method void clear()>
			getRecycledViewPool().onAdapterChanged(adapter, adapter1, flag);
		//    2    4:aload_0         
		//    3    5:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//    4    8:aload_1         
		//    5    9:aload_2         
		//    6   10:iload_3         
		//    7   11:invokevirtual   #399 <Method void RecyclerView$RecycledViewPool.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		//    8   14:return          
		}

		void quickRecycleScrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #337 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			view.mScrapContainer = null;
		//    3    5:aload_1         
		//    4    6:aconst_null     
		//    5    7:putfield        #403 <Field RecyclerView$Recycler RecyclerView$ViewHolder.mScrapContainer>
			view.mInChangeScrap = false;
		//    6   10:aload_1         
		//    7   11:iconst_0        
		//    8   12:putfield        #406 <Field boolean RecyclerView$ViewHolder.mInChangeScrap>
			((ViewHolder) (view)).clearReturnedFromScrapFlag();
		//    9   15:aload_1         
		//   10   16:invokevirtual   #409 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(((ViewHolder) (view)));
		//   11   19:aload_0         
		//   12   20:aload_1         
		//   13   21:invokevirtual   #412 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   14   24:return          
		}

		void recycleAndClearCachedViews()
		{
			for(int i = mCachedViews.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            26
				recycleCachedViewAt(i);
		//    8   14:aload_0         
		//    9   15:iload_1         
		//   10   16:invokevirtual   #315 <Method void recycleCachedViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            10
			mCachedViews.clear();
		//   16   26:aload_0         
		//   17   27:getfield        #40  <Field ArrayList mCachedViews>
		//   18   30:invokevirtual   #195 <Method void ArrayList.clear()>
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  19   33:getstatic       #415 <Field boolean RecyclerView.ALLOW_THREAD_GAP_WORK>
		//*  20   36:ifeq            49
				mPrefetchRegistry.clearPrefetchPositions();
		//   21   39:aload_0         
		//   22   40:getfield        #28  <Field RecyclerView this$0>
		//   23   43:getfield        #419 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//   24   46:invokevirtual   #424 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//   25   49:return          
		}

		void recycleCachedViewAt(int i)
		{
			addViewHolderToRecycledViewPool((ViewHolder)mCachedViews.get(i), true);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #40  <Field ArrayList mCachedViews>
		//    3    5:iload_1         
		//    4    6:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//    5    9:checkcast       #61  <Class RecyclerView$ViewHolder>
		//    6   12:iconst_1        
		//    7   13:invokevirtual   #426 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
			mCachedViews.remove(i);
		//    8   16:aload_0         
		//    9   17:getfield        #40  <Field ArrayList mCachedViews>
		//   10   20:iload_1         
		//   11   21:invokevirtual   #304 <Method Object ArrayList.remove(int)>
		//   12   24:pop             
		//   13   25:return          
		}

		public void recycleView(View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #337 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_2        
			if(viewholder.isTmpDetached())
		//*   3    5:aload_2         
		//*   4    6:invokevirtual   #430 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*   5    9:ifeq            21
				removeDetachedView(view, false);
		//    6   12:aload_0         
		//    7   13:getfield        #28  <Field RecyclerView this$0>
		//    8   16:aload_1         
		//    9   17:iconst_0        
		//   10   18:invokevirtual   #308 <Method void RecyclerView.removeDetachedView(View, boolean)>
			if(viewholder.isScrap())
		//*  11   21:aload_2         
		//*  12   22:invokevirtual   #433 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  13   25:ifeq            35
				viewholder.unScrap();
		//   14   28:aload_2         
		//   15   29:invokevirtual   #436 <Method void RecyclerView$ViewHolder.unScrap()>
			else
		//*  16   32:goto            46
			if(viewholder.wasReturnedFromScrap())
		//*  17   35:aload_2         
		//*  18   36:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   39:ifeq            46
				viewholder.clearReturnedFromScrapFlag();
		//   20   42:aload_2         
		//   21   43:invokevirtual   #409 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(viewholder);
		//   22   46:aload_0         
		//   23   47:aload_2         
		//   24   48:invokevirtual   #412 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   25   51:return          
		}

		void recycleViewHolderInternal(ViewHolder viewholder)
		{
			boolean flag5 = viewholder.isScrap();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #433 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//    2    4:istore          6
			boolean flag4 = false;
		//    3    6:iconst_0        
		//    4    7:istore          5
			boolean flag3 = false;
		//    5    9:iconst_0        
		//    6   10:istore          4
			if(!flag5 && viewholder.itemView.getParent() == null)
		//*   7   12:iload           6
		//*   8   14:ifne            404
		//*   9   17:aload_1         
		//*  10   18:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//*  11   21:invokevirtual   #440 <Method ViewParent View.getParent()>
		//*  12   24:ifnull          30
		//*  13   27:goto            404
				if(!viewholder.isTmpDetached())
		//*  14   30:aload_1         
		//*  15   31:invokevirtual   #430 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  16   34:ifne            353
				{
					if(!viewholder.shouldIgnore())
		//*  17   37:aload_1         
		//*  18   38:invokevirtual   #443 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  19   41:ifne            313
					{
						flag4 = viewholder.doesTransientStatePreventRecycling();
		//   20   44:aload_1         
		//   21   45:invokevirtual   #446 <Method boolean RecyclerView$ViewHolder.doesTransientStatePreventRecycling()>
		//   22   48:istore          5
						boolean flag;
						if(mAdapter != null && flag4 && mAdapter.onFailedToRecycleView(viewholder))
		//*  23   50:aload_0         
		//*  24   51:getfield        #28  <Field RecyclerView this$0>
		//*  25   54:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  26   57:ifnull          84
		//*  27   60:iload           5
		//*  28   62:ifeq            84
		//*  29   65:aload_0         
		//*  30   66:getfield        #28  <Field RecyclerView this$0>
		//*  31   69:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  32   72:aload_1         
		//*  33   73:invokevirtual   #450 <Method boolean RecyclerView$Adapter.onFailedToRecycleView(RecyclerView$ViewHolder)>
		//*  34   76:ifeq            84
							flag = true;
		//   35   79:iconst_1        
		//   36   80:istore_2        
						else
		//*  37   81:goto            86
							flag = false;
		//   38   84:iconst_0        
		//   39   85:istore_2        
						int j;
						if(!flag && !viewholder.isRecyclable())
		//*  40   86:iload_2         
		//*  41   87:ifne            111
		//*  42   90:aload_1         
		//*  43   91:invokevirtual   #453 <Method boolean RecyclerView$ViewHolder.isRecyclable()>
		//*  44   94:ifeq            100
		//*  45   97:goto            111
						{
							boolean flag1 = false;
		//   46  100:iconst_0        
		//   47  101:istore_2        
							j = ((int) (flag3));
		//   48  102:iload           4
		//   49  104:istore_3        
							flag3 = flag1;
		//   50  105:iload_2         
		//   51  106:istore          4
						} else
		//*  52  108:goto            282
						{
							boolean flag2;
							if(mViewCacheMax > 0 && !viewholder.hasAnyOfTheFlags(526))
		//*  53  111:aload_0         
		//*  54  112:getfield        #52  <Field int mViewCacheMax>
		//*  55  115:ifle            259
		//*  56  118:aload_1         
		//*  57  119:sipush          526
		//*  58  122:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*  59  125:ifne            259
							{
								j = mCachedViews.size();
		//   60  128:aload_0         
		//   61  129:getfield        #40  <Field ArrayList mCachedViews>
		//   62  132:invokevirtual   #202 <Method int ArrayList.size()>
		//   63  135:istore_3        
								int i = j;
		//   64  136:iload_3         
		//   65  137:istore_2        
								if(j >= mViewCacheMax)
		//*  66  138:iload_3         
		//*  67  139:aload_0         
		//*  68  140:getfield        #52  <Field int mViewCacheMax>
		//*  69  143:icmplt          161
								{
									i = j;
		//   70  146:iload_3         
		//   71  147:istore_2        
									if(j > 0)
		//*  72  148:iload_3         
		//*  73  149:ifle            161
									{
										recycleCachedViewAt(0);
		//   74  152:aload_0         
		//   75  153:iconst_0        
		//   76  154:invokevirtual   #315 <Method void recycleCachedViewAt(int)>
										i = j - 1;
		//   77  157:iload_3         
		//   78  158:iconst_1        
		//   79  159:isub            
		//   80  160:istore_2        
									}
								}
								j = i;
		//   81  161:iload_2         
		//   82  162:istore_3        
								if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  83  163:getstatic       #415 <Field boolean RecyclerView.ALLOW_THREAD_GAP_WORK>
		//*  84  166:ifeq            245
								{
									j = i;
		//   85  169:iload_2         
		//   86  170:istore_3        
									if(i > 0)
		//*  87  171:iload_2         
		//*  88  172:ifle            245
									{
										j = i;
		//   89  175:iload_2         
		//   90  176:istore_3        
										if(!mPrefetchRegistry.lastPrefetchIncludedPosition(viewholder.mPosition))
		//*  91  177:aload_0         
		//*  92  178:getfield        #28  <Field RecyclerView this$0>
		//*  93  181:getfield        #419 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//*  94  184:aload_1         
		//*  95  185:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  96  188:invokevirtual   #456 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//*  97  191:ifne            245
										{
											i--;
		//   98  194:iload_2         
		//   99  195:iconst_1        
		//  100  196:isub            
		//  101  197:istore_2        
											do
											{
												if(i < 0)
													break;
		//  102  198:iload_2         
		//  103  199:iflt            241
												j = ((ViewHolder)mCachedViews.get(i)).mPosition;
		//  104  202:aload_0         
		//  105  203:getfield        #40  <Field ArrayList mCachedViews>
		//  106  206:iload_2         
		//  107  207:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//  108  210:checkcast       #61  <Class RecyclerView$ViewHolder>
		//  109  213:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//  110  216:istore_3        
												if(!mPrefetchRegistry.lastPrefetchIncludedPosition(j))
		//* 111  217:aload_0         
		//* 112  218:getfield        #28  <Field RecyclerView this$0>
		//* 113  221:getfield        #419 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 114  224:iload_3         
		//* 115  225:invokevirtual   #456 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 116  228:ifne            234
													break;
		//  117  231:goto            241
												i--;
		//  118  234:iload_2         
		//  119  235:iconst_1        
		//  120  236:isub            
		//  121  237:istore_2        
											} while(true);
		//  122  238:goto            198
											j = i + 1;
		//  123  241:iload_2         
		//  124  242:iconst_1        
		//  125  243:iadd            
		//  126  244:istore_3        
										}
									}
								}
								mCachedViews.add(j, ((Object) (viewholder)));
		//  127  245:aload_0         
		//  128  246:getfield        #40  <Field ArrayList mCachedViews>
		//  129  249:iload_3         
		//  130  250:aload_1         
		//  131  251:invokevirtual   #460 <Method void ArrayList.add(int, Object)>
								flag2 = true;
		//  132  254:iconst_1        
		//  133  255:istore_2        
							} else
		//* 134  256:goto            261
							{
								flag2 = false;
		//  135  259:iconst_0        
		//  136  260:istore_2        
							}
							j = ((int) (flag3));
		//  137  261:iload           4
		//  138  263:istore_3        
							flag3 = flag2;
		//  139  264:iload_2         
		//  140  265:istore          4
							if(!flag2)
		//* 141  267:iload_2         
		//* 142  268:ifne            282
							{
								addViewHolderToRecycledViewPool(viewholder, true);
		//  143  271:aload_0         
		//  144  272:aload_1         
		//  145  273:iconst_1        
		//  146  274:invokevirtual   #426 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
								j = 1;
		//  147  277:iconst_1        
		//  148  278:istore_3        
								flag3 = flag2;
		//  149  279:iload_2         
		//  150  280:istore          4
							}
						}
						mViewInfoStore.removeViewHolder(viewholder);
		//  151  282:aload_0         
		//  152  283:getfield        #28  <Field RecyclerView this$0>
		//  153  286:getfield        #266 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//  154  289:aload_1         
		//  155  290:invokevirtual   #271 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
						if(!flag3 && j == 0 && flag4)
		//* 156  293:iload           4
		//* 157  295:ifne            312
		//* 158  298:iload_3         
		//* 159  299:ifne            312
		//* 160  302:iload           5
		//* 161  304:ifeq            312
							viewholder.mOwnerRecyclerView = null;
		//  162  307:aload_1         
		//  163  308:aconst_null     
		//  164  309:putfield        #123 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
						return;
		//  165  312:return          
					} else
					{
						viewholder = ((ViewHolder) (new StringBuilder()));
		//  166  313:new             #226 <Class StringBuilder>
		//  167  316:dup             
		//  168  317:invokespecial   #227 <Method void StringBuilder()>
		//  169  320:astore_1        
						((StringBuilder) (viewholder)).append("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.");
		//  170  321:aload_1         
		//  171  322:ldc2            #462 <String "Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.">
		//  172  325:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  173  328:pop             
						((StringBuilder) (viewholder)).append(exceptionLabel());
		//  174  329:aload_1         
		//  175  330:aload_0         
		//  176  331:getfield        #28  <Field RecyclerView this$0>
		//  177  334:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  178  337:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  179  340:pop             
						throw new IllegalArgumentException(((StringBuilder) (viewholder)).toString());
		//  180  341:new             #464 <Class IllegalArgumentException>
		//  181  344:dup             
		//  182  345:aload_1         
		//  183  346:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  184  349:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//  185  352:athrow          
					}
				} else
				{
					StringBuilder stringbuilder = new StringBuilder();
		//  186  353:new             #226 <Class StringBuilder>
		//  187  356:dup             
		//  188  357:invokespecial   #227 <Method void StringBuilder()>
		//  189  360:astore          7
					stringbuilder.append("Tmp detached view should be removed from RecyclerView before it can be recycled: ");
		//  190  362:aload           7
		//  191  364:ldc2            #467 <String "Tmp detached view should be removed from RecyclerView before it can be recycled: ">
		//  192  367:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  193  370:pop             
					stringbuilder.append(((Object) (viewholder)));
		//  194  371:aload           7
		//  195  373:aload_1         
		//  196  374:invokevirtual   #354 <Method StringBuilder StringBuilder.append(Object)>
		//  197  377:pop             
					stringbuilder.append(exceptionLabel());
		//  198  378:aload           7
		//  199  380:aload_0         
		//  200  381:getfield        #28  <Field RecyclerView this$0>
		//  201  384:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  202  387:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  203  390:pop             
					throw new IllegalArgumentException(stringbuilder.toString());
		//  204  391:new             #464 <Class IllegalArgumentException>
		//  205  394:dup             
		//  206  395:aload           7
		//  207  397:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  208  400:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//  209  403:athrow          
				}
			StringBuilder stringbuilder1 = new StringBuilder();
		//  210  404:new             #226 <Class StringBuilder>
		//  211  407:dup             
		//  212  408:invokespecial   #227 <Method void StringBuilder()>
		//  213  411:astore          7
			stringbuilder1.append("Scrapped or attached views may not be recycled. isScrap:");
		//  214  413:aload           7
		//  215  415:ldc2            #469 <String "Scrapped or attached views may not be recycled. isScrap:">
		//  216  418:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  217  421:pop             
			stringbuilder1.append(viewholder.isScrap());
		//  218  422:aload           7
		//  219  424:aload_1         
		//  220  425:invokevirtual   #433 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//  221  428:invokevirtual   #472 <Method StringBuilder StringBuilder.append(boolean)>
		//  222  431:pop             
			stringbuilder1.append(" isAttached:");
		//  223  432:aload           7
		//  224  434:ldc2            #474 <String " isAttached:">
		//  225  437:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  226  440:pop             
			if(viewholder.itemView.getParent() != null)
		//* 227  441:aload_1         
		//* 228  442:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//* 229  445:invokevirtual   #440 <Method ViewParent View.getParent()>
		//* 230  448:ifnull          454
				flag4 = true;
		//  231  451:iconst_1        
		//  232  452:istore          5
			stringbuilder1.append(flag4);
		//  233  454:aload           7
		//  234  456:iload           5
		//  235  458:invokevirtual   #472 <Method StringBuilder StringBuilder.append(boolean)>
		//  236  461:pop             
			stringbuilder1.append(exceptionLabel());
		//  237  462:aload           7
		//  238  464:aload_0         
		//  239  465:getfield        #28  <Field RecyclerView this$0>
		//  240  468:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  241  471:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  242  474:pop             
			throw new IllegalArgumentException(stringbuilder1.toString());
		//  243  475:new             #464 <Class IllegalArgumentException>
		//  244  478:dup             
		//  245  479:aload           7
		//  246  481:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  247  484:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//  248  487:athrow          
		}

		void scrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #337 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			if(!((ViewHolder) (view)).hasAnyOfTheFlags(12) && ((ViewHolder) (view)).isUpdated() && !canReuseUpdatedViewHolder(((ViewHolder) (view))))
		//*   3    5:aload_1         
		//*   4    6:bipush          12
		//*   5    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   6   11:ifne            69
		//*   7   14:aload_1         
		//*   8   15:invokevirtual   #477 <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//*   9   18:ifeq            69
		//*  10   21:aload_0         
		//*  11   22:getfield        #28  <Field RecyclerView this$0>
		//*  12   25:aload_1         
		//*  13   26:invokevirtual   #480 <Method boolean RecyclerView.canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//*  14   29:ifeq            35
		//*  15   32:goto            69
			{
				if(mChangedScrap == null)
		//*  16   35:aload_0         
		//*  17   36:getfield        #38  <Field ArrayList mChangedScrap>
		//*  18   39:ifnonnull       53
					mChangedScrap = new ArrayList();
		//   19   42:aload_0         
		//   20   43:new             #33  <Class ArrayList>
		//   21   46:dup             
		//   22   47:invokespecial   #34  <Method void ArrayList()>
		//   23   50:putfield        #38  <Field ArrayList mChangedScrap>
				((ViewHolder) (view)).setScrapContainer(this, true);
		//   24   53:aload_1         
		//   25   54:aload_0         
		//   26   55:iconst_1        
		//   27   56:invokevirtual   #484 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
				mChangedScrap.add(((Object) (view)));
		//   28   59:aload_0         
		//   29   60:getfield        #38  <Field ArrayList mChangedScrap>
		//   30   63:aload_1         
		//   31   64:invokevirtual   #487 <Method boolean ArrayList.add(Object)>
		//   32   67:pop             
				return;
		//   33   68:return          
			}
			if(((ViewHolder) (view)).isInvalid() && !((ViewHolder) (view)).isRemoved() && !mAdapter.hasStableIds())
		//*  34   69:aload_1         
		//*  35   70:invokevirtual   #320 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  36   73:ifeq            139
		//*  37   76:aload_1         
		//*  38   77:invokevirtual   #301 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  39   80:ifne            139
		//*  40   83:aload_0         
		//*  41   84:getfield        #28  <Field RecyclerView this$0>
		//*  42   87:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  43   90:invokevirtual   #282 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  44   93:ifeq            99
		//*  45   96:goto            139
			{
				view = ((View) (new StringBuilder()));
		//   46   99:new             #226 <Class StringBuilder>
		//   47  102:dup             
		//   48  103:invokespecial   #227 <Method void StringBuilder()>
		//   49  106:astore_1        
				((StringBuilder) (view)).append("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.");
		//   50  107:aload_1         
		//   51  108:ldc2            #489 <String "Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.">
		//   52  111:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   53  114:pop             
				((StringBuilder) (view)).append(exceptionLabel());
		//   54  115:aload_1         
		//   55  116:aload_0         
		//   56  117:getfield        #28  <Field RecyclerView this$0>
		//   57  120:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//   58  123:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   59  126:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
		//   60  127:new             #464 <Class IllegalArgumentException>
		//   61  130:dup             
		//   62  131:aload_1         
		//   63  132:invokevirtual   #249 <Method String StringBuilder.toString()>
		//   64  135:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//   65  138:athrow          
			} else
			{
				((ViewHolder) (view)).setScrapContainer(this, false);
		//   66  139:aload_1         
		//   67  140:aload_0         
		//   68  141:iconst_0        
		//   69  142:invokevirtual   #484 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
				mAttachedScrap.add(((Object) (view)));
		//   70  145:aload_0         
		//   71  146:getfield        #36  <Field ArrayList mAttachedScrap>
		//   72  149:aload_1         
		//   73  150:invokevirtual   #487 <Method boolean ArrayList.add(Object)>
		//   74  153:pop             
				return;
		//   75  154:return          
			}
		}

		void setRecycledViewPool(RecycledViewPool recycledviewpool)
		{
			RecycledViewPool recycledviewpool1 = mRecyclerPool;
		//    0    0:aload_0         
		//    1    1:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//    2    4:astore_2        
			if(recycledviewpool1 != null)
		//*   3    5:aload_2         
		//*   4    6:ifnull          13
				recycledviewpool1.detach();
		//    5    9:aload_2         
		//    6   10:invokevirtual   #494 <Method void RecyclerView$RecycledViewPool.detach()>
			mRecyclerPool = recycledviewpool;
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:putfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			if(mRecyclerPool != null && getAdapter() != null)
		//*  10   18:aload_0         
		//*  11   19:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  12   22:ifnull          42
		//*  13   25:aload_0         
		//*  14   26:getfield        #28  <Field RecyclerView this$0>
		//*  15   29:invokevirtual   #498 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//*  16   32:ifnull          42
				mRecyclerPool.attach();
		//   17   35:aload_0         
		//   18   36:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   19   39:invokevirtual   #501 <Method void RecyclerView$RecycledViewPool.attach()>
		//   20   42:return          
		}

		void setViewCacheExtension(ViewCacheExtension viewcacheextension)
		{
			mViewCacheExtension = viewcacheextension;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #505 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//    3    5:return          
		}

		public void setViewCacheSize(int i)
		{
			mRequestedCacheMax = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #50  <Field int mRequestedCacheMax>
			updateViewCacheSize();
		//    3    5:aload_0         
		//    4    6:invokevirtual   #509 <Method void updateViewCacheSize()>
		//    5    9:return          
		}

		ViewHolder tryGetViewHolderForPositionByDeadline(int i, boolean flag, long l)
		{
label0:
			{
				boolean flag1;
				boolean flag4;
				Object obj;
label1:
				{
label2:
					{
						if(i < 0 || i >= mState.getItemCount())
							break label0;
		//    0    0:iload_1         
		//    1    1:iflt            1049
		//    2    4:iload_1         
		//    3    5:aload_0         
		//    4    6:getfield        #28  <Field RecyclerView this$0>
		//    5    9:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//    6   12:invokevirtual   #215 <Method int RecyclerView$State.getItemCount()>
		//    7   15:icmpge          1049
						boolean flag5 = mState.isPreLayout();
		//    8   18:aload_0         
		//    9   19:getfield        #28  <Field RecyclerView this$0>
		//   10   22:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//   11   25:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//   12   28:istore          10
						flag4 = true;
		//   13   30:iconst_1        
		//   14   31:istore          9
						boolean flag2;
						ViewHolder viewholder;
						if(flag5)
		//*  15   33:iload           10
		//*  16   35:ifeq            62
						{
							viewholder = getChangedScrapViewForPosition(i);
		//   17   38:aload_0         
		//   18   39:iload_1         
		//   19   40:invokevirtual   #512 <Method RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
		//   20   43:astore          16
							if(viewholder != null)
		//*  21   45:aload           16
		//*  22   47:ifnull          56
								flag2 = true;
		//   23   50:iconst_1        
		//   24   51:istore          6
							else
		//*  25   53:goto            68
								flag2 = false;
		//   26   56:iconst_0        
		//   27   57:istore          6
						} else
		//*  28   59:goto            68
						{
							viewholder = null;
		//   29   62:aconst_null     
		//   30   63:astore          16
							flag2 = false;
		//   31   65:iconst_0        
		//   32   66:istore          6
						}
						obj = ((Object) (viewholder));
		//   33   68:aload           16
		//   34   70:astore          15
						flag1 = flag2;
		//   35   72:iload           6
		//   36   74:istore          5
						if(viewholder == null)
		//*  37   76:aload           16
		//*  38   78:ifnonnull       186
						{
							ViewHolder viewholder1 = getScrapOrHiddenOrCachedHolderForPosition(i, flag);
		//   39   81:aload_0         
		//   40   82:iload_1         
		//   41   83:iload_2         
		//   42   84:invokevirtual   #514 <Method RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int, boolean)>
		//   43   87:astore          16
							obj = ((Object) (viewholder1));
		//   44   89:aload           16
		//   45   91:astore          15
							flag1 = flag2;
		//   46   93:iload           6
		//   47   95:istore          5
							if(viewholder1 != null)
		//*  48   97:aload           16
		//*  49   99:ifnull          186
								if(!validateViewHolderForOffsetPosition(viewholder1))
		//*  50  102:aload_0         
		//*  51  103:aload           16
		//*  52  105:invokevirtual   #517 <Method boolean validateViewHolderForOffsetPosition(RecyclerView$ViewHolder)>
		//*  53  108:ifne            179
								{
									if(!flag)
		//*  54  111:iload_2         
		//*  55  112:ifne            169
									{
										viewholder1.addFlags(4);
		//   56  115:aload           16
		//   57  117:iconst_4        
		//   58  118:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
										if(viewholder1.isScrap())
		//*  59  121:aload           16
		//*  60  123:invokevirtual   #433 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  61  126:ifeq            150
										{
											removeDetachedView(viewholder1.itemView, false);
		//   62  129:aload_0         
		//   63  130:getfield        #28  <Field RecyclerView this$0>
		//   64  133:aload           16
		//   65  135:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//   66  138:iconst_0        
		//   67  139:invokevirtual   #308 <Method void RecyclerView.removeDetachedView(View, boolean)>
											viewholder1.unScrap();
		//   68  142:aload           16
		//   69  144:invokevirtual   #436 <Method void RecyclerView$ViewHolder.unScrap()>
										} else
		//*  70  147:goto            163
										if(viewholder1.wasReturnedFromScrap())
		//*  71  150:aload           16
		//*  72  152:invokevirtual   #276 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  73  155:ifeq            163
											viewholder1.clearReturnedFromScrapFlag();
		//   74  158:aload           16
		//   75  160:invokevirtual   #409 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
										recycleViewHolderInternal(viewholder1);
		//   76  163:aload_0         
		//   77  164:aload           16
		//   78  166:invokevirtual   #412 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
									}
									obj = null;
		//   79  169:aconst_null     
		//   80  170:astore          15
									flag1 = flag2;
		//   81  172:iload           6
		//   82  174:istore          5
								} else
		//*  83  176:goto            186
								{
									flag1 = true;
		//   84  179:iconst_1        
		//   85  180:istore          5
									obj = ((Object) (viewholder1));
		//   86  182:aload           16
		//   87  184:astore          15
								}
						}
						if(obj == null)
		//*  88  186:aload           15
		//*  89  188:ifnonnull       747
						{
							int i1 = mAdapterHelper.findPositionOffset(i);
		//   90  191:aload_0         
		//   91  192:getfield        #28  <Field RecyclerView this$0>
		//   92  195:getfield        #219 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   93  198:iload_1         
		//   94  199:invokevirtual   #224 <Method int AdapterHelper.findPositionOffset(int)>
		//   95  202:istore          8
							if(i1 >= 0 && i1 < mAdapter.getItemCount())
		//*  96  204:iload           8
		//*  97  206:iflt            645
		//*  98  209:iload           8
		//*  99  211:aload_0         
		//* 100  212:getfield        #28  <Field RecyclerView this$0>
		//* 101  215:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 102  218:invokevirtual   #283 <Method int RecyclerView$Adapter.getItemCount()>
		//* 103  221:icmpge          645
							{
								int k = mAdapter.getItemViewType(i1);
		//  104  224:aload_0         
		//  105  225:getfield        #28  <Field RecyclerView this$0>
		//  106  228:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  107  231:iload           8
		//  108  233:invokevirtual   #519 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//  109  236:istore          7
								boolean flag3 = flag1;
		//  110  238:iload           5
		//  111  240:istore          6
								if(mAdapter.hasStableIds())
		//* 112  242:aload_0         
		//* 113  243:getfield        #28  <Field RecyclerView this$0>
		//* 114  246:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 115  249:invokevirtual   #282 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//* 116  252:ifeq            303
								{
									ViewHolder viewholder2 = getScrapOrCachedViewForId(mAdapter.getItemId(i1), k, flag);
		//  117  255:aload_0         
		//  118  256:aload_0         
		//  119  257:getfield        #28  <Field RecyclerView this$0>
		//  120  260:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  121  263:iload           8
		//  122  265:invokevirtual   #287 <Method long RecyclerView$Adapter.getItemId(int)>
		//  123  268:iload           7
		//  124  270:iload_2         
		//  125  271:invokevirtual   #521 <Method RecyclerView$ViewHolder getScrapOrCachedViewForId(long, int, boolean)>
		//  126  274:astore          16
									obj = ((Object) (viewholder2));
		//  127  276:aload           16
		//  128  278:astore          15
									flag3 = flag1;
		//  129  280:iload           5
		//  130  282:istore          6
									if(viewholder2 != null)
		//* 131  284:aload           16
		//* 132  286:ifnull          303
									{
										viewholder2.mPosition = i1;
		//  133  289:aload           16
		//  134  291:iload           8
		//  135  293:putfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
										flag3 = true;
		//  136  296:iconst_1        
		//  137  297:istore          6
										obj = ((Object) (viewholder2));
		//  138  299:aload           16
		//  139  301:astore          15
									}
								}
								Object obj1 = obj;
		//  140  303:aload           15
		//  141  305:astore          16
								if(obj == null)
		//* 142  307:aload           15
		//* 143  309:ifnonnull       462
								{
									Object obj3 = ((Object) (mViewCacheExtension));
		//  144  312:aload_0         
		//  145  313:getfield        #505 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//  146  316:astore          17
									obj1 = obj;
		//  147  318:aload           15
		//  148  320:astore          16
									if(obj3 != null)
		//* 149  322:aload           17
		//* 150  324:ifnull          462
									{
										obj3 = ((Object) (((ViewCacheExtension) (obj3)).getViewForPositionAndType(this, i, k)));
		//  151  327:aload           17
		//  152  329:aload_0         
		//  153  330:iload_1         
		//  154  331:iload           7
		//  155  333:invokevirtual   #527 <Method View RecyclerView$ViewCacheExtension.getViewForPositionAndType(RecyclerView$Recycler, int, int)>
		//  156  336:astore          17
										obj1 = obj;
		//  157  338:aload           15
		//  158  340:astore          16
										if(obj3 != null)
		//* 159  342:aload           17
		//* 160  344:ifnull          462
										{
											obj1 = ((Object) (getChildViewHolder(((View) (obj3)))));
		//  161  347:aload_0         
		//  162  348:getfield        #28  <Field RecyclerView this$0>
		//  163  351:aload           17
		//  164  353:invokevirtual   #530 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolder(View)>
		//  165  356:astore          16
											if(obj1 != null)
		//* 166  358:aload           16
		//* 167  360:ifnull          418
											{
												if(((ViewHolder) (obj1)).shouldIgnore())
		//* 168  363:aload           16
		//* 169  365:invokevirtual   #443 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//* 170  368:ifne            374
		//* 171  371:goto            462
												{
													obj = ((Object) (new StringBuilder()));
		//  172  374:new             #226 <Class StringBuilder>
		//  173  377:dup             
		//  174  378:invokespecial   #227 <Method void StringBuilder()>
		//  175  381:astore          15
													((StringBuilder) (obj)).append("getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.");
		//  176  383:aload           15
		//  177  385:ldc2            #532 <String "getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.">
		//  178  388:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  179  391:pop             
													((StringBuilder) (obj)).append(exceptionLabel());
		//  180  392:aload           15
		//  181  394:aload_0         
		//  182  395:getfield        #28  <Field RecyclerView this$0>
		//  183  398:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  184  401:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  185  404:pop             
													throw new IllegalArgumentException(((StringBuilder) (obj)).toString());
		//  186  405:new             #464 <Class IllegalArgumentException>
		//  187  408:dup             
		//  188  409:aload           15
		//  189  411:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  190  414:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//  191  417:athrow          
												}
											} else
											{
												obj = ((Object) (new StringBuilder()));
		//  192  418:new             #226 <Class StringBuilder>
		//  193  421:dup             
		//  194  422:invokespecial   #227 <Method void StringBuilder()>
		//  195  425:astore          15
												((StringBuilder) (obj)).append("getViewForPositionAndType returned a view which does not have a ViewHolder");
		//  196  427:aload           15
		//  197  429:ldc2            #534 <String "getViewForPositionAndType returned a view which does not have a ViewHolder">
		//  198  432:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  199  435:pop             
												((StringBuilder) (obj)).append(exceptionLabel());
		//  200  436:aload           15
		//  201  438:aload_0         
		//  202  439:getfield        #28  <Field RecyclerView this$0>
		//  203  442:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  204  445:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  205  448:pop             
												throw new IllegalArgumentException(((StringBuilder) (obj)).toString());
		//  206  449:new             #464 <Class IllegalArgumentException>
		//  207  452:dup             
		//  208  453:aload           15
		//  209  455:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  210  458:invokespecial   #465 <Method void IllegalArgumentException(String)>
		//  211  461:athrow          
											}
										}
									}
								}
								obj = obj1;
		//  212  462:aload           16
		//  213  464:astore          15
								if(obj1 == null)
		//* 214  466:aload           16
		//* 215  468:ifnonnull       516
								{
									ViewHolder viewholder3 = getRecycledViewPool().getRecycledView(k);
		//  216  471:aload_0         
		//  217  472:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//  218  475:iload           7
		//  219  477:invokevirtual   #537 <Method RecyclerView$ViewHolder RecyclerView$RecycledViewPool.getRecycledView(int)>
		//  220  480:astore          16
									obj = ((Object) (viewholder3));
		//  221  482:aload           16
		//  222  484:astore          15
									if(viewholder3 != null)
		//* 223  486:aload           16
		//* 224  488:ifnull          516
									{
										viewholder3.resetInternal();
		//  225  491:aload           16
		//  226  493:invokevirtual   #540 <Method void RecyclerView$ViewHolder.resetInternal()>
										obj = ((Object) (viewholder3));
		//  227  496:aload           16
		//  228  498:astore          15
										if(RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST)
		//* 229  500:getstatic       #543 <Field boolean RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST>
		//* 230  503:ifeq            516
										{
											invalidateDisplayListInt(viewholder3);
		//  231  506:aload_0         
		//  232  507:aload           16
		//  233  509:invokespecial   #545 <Method void invalidateDisplayListInt(RecyclerView$ViewHolder)>
											obj = ((Object) (viewholder3));
		//  234  512:aload           16
		//  235  514:astore          15
										}
									}
								}
								if(obj == null)
		//* 236  516:aload           15
		//* 237  518:ifnonnull       638
								{
									long l1 = getNanoTime();
		//  238  521:aload_0         
		//  239  522:getfield        #28  <Field RecyclerView this$0>
		//  240  525:invokevirtual   #130 <Method long RecyclerView.getNanoTime()>
		//  241  528:lstore          11
									if(l != 0xffffffffL && !mRecyclerPool.willCreateInTime(k, l1, l))
		//* 242  530:lload_3         
		//* 243  531:ldc2w           #131 <Long 0xffffffffL>
		//* 244  534:lcmp            
		//* 245  535:ifeq            555
		//* 246  538:aload_0         
		//* 247  539:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 248  542:iload           7
		//* 249  544:lload           11
		//* 250  546:lload_3         
		//* 251  547:invokevirtual   #548 <Method boolean RecyclerView$RecycledViewPool.willCreateInTime(int, long, long)>
		//* 252  550:ifne            555
										return null;
		//  253  553:aconst_null     
		//  254  554:areturn         
									obj = ((Object) (mAdapter.createViewHolder(((ViewGroup) (RecyclerView.this)), k)));
		//  255  555:aload_0         
		//  256  556:getfield        #28  <Field RecyclerView this$0>
		//  257  559:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  258  562:aload_0         
		//  259  563:getfield        #28  <Field RecyclerView this$0>
		//  260  566:iload           7
		//  261  568:invokevirtual   #552 <Method RecyclerView$ViewHolder RecyclerView$Adapter.createViewHolder(ViewGroup, int)>
		//  262  571:astore          15
									if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 263  573:getstatic       #415 <Field boolean RecyclerView.ALLOW_THREAD_GAP_WORK>
		//* 264  576:ifeq            608
									{
										RecyclerView recyclerview = RecyclerView.findNestedRecyclerView(((ViewHolder) (obj)).itemView);
		//  265  579:aload           15
		//  266  581:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//  267  584:invokestatic    #556 <Method RecyclerView RecyclerView.findNestedRecyclerView(View)>
		//  268  587:astore          16
										if(recyclerview != null)
		//* 269  589:aload           16
		//* 270  591:ifnull          608
											obj.mNestedRecyclerView = new WeakReference(((Object) (recyclerview)));
		//  271  594:aload           15
		//  272  596:new             #558 <Class WeakReference>
		//  273  599:dup             
		//  274  600:aload           16
		//  275  602:invokespecial   #560 <Method void WeakReference(Object)>
		//  276  605:putfield        #564 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
									}
									long l2 = getNanoTime();
		//  277  608:aload_0         
		//  278  609:getfield        #28  <Field RecyclerView this$0>
		//  279  612:invokevirtual   #130 <Method long RecyclerView.getNanoTime()>
		//  280  615:lstore          13
									mRecyclerPool.factorInCreateTime(k, l2 - l1);
		//  281  617:aload_0         
		//  282  618:getfield        #134 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//  283  621:iload           7
		//  284  623:lload           13
		//  285  625:lload           11
		//  286  627:lsub            
		//  287  628:invokevirtual   #567 <Method void RecyclerView$RecycledViewPool.factorInCreateTime(int, long)>
									flag1 = flag3;
		//  288  631:iload           6
		//  289  633:istore          5
								} else
		//* 290  635:goto            747
								{
									flag1 = flag3;
		//  291  638:iload           6
		//  292  640:istore          5
								}
							} else
		//* 293  642:goto            747
							{
								obj = ((Object) (new StringBuilder()));
		//  294  645:new             #226 <Class StringBuilder>
		//  295  648:dup             
		//  296  649:invokespecial   #227 <Method void StringBuilder()>
		//  297  652:astore          15
								((StringBuilder) (obj)).append("Inconsistency detected. Invalid item position ");
		//  298  654:aload           15
		//  299  656:ldc2            #569 <String "Inconsistency detected. Invalid item position ">
		//  300  659:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  301  662:pop             
								((StringBuilder) (obj)).append(i);
		//  302  663:aload           15
		//  303  665:iload_1         
		//  304  666:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  305  669:pop             
								((StringBuilder) (obj)).append("(offset:");
		//  306  670:aload           15
		//  307  672:ldc2            #571 <String "(offset:">
		//  308  675:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  309  678:pop             
								((StringBuilder) (obj)).append(i1);
		//  310  679:aload           15
		//  311  681:iload           8
		//  312  683:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  313  686:pop             
								((StringBuilder) (obj)).append(").");
		//  314  687:aload           15
		//  315  689:ldc2            #573 <String ").">
		//  316  692:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  317  695:pop             
								((StringBuilder) (obj)).append("state:");
		//  318  696:aload           15
		//  319  698:ldc2            #575 <String "state:">
		//  320  701:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  321  704:pop             
								((StringBuilder) (obj)).append(mState.getItemCount());
		//  322  705:aload           15
		//  323  707:aload_0         
		//  324  708:getfield        #28  <Field RecyclerView this$0>
		//  325  711:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//  326  714:invokevirtual   #215 <Method int RecyclerView$State.getItemCount()>
		//  327  717:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  328  720:pop             
								((StringBuilder) (obj)).append(exceptionLabel());
		//  329  721:aload           15
		//  330  723:aload_0         
		//  331  724:getfield        #28  <Field RecyclerView this$0>
		//  332  727:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  333  730:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  334  733:pop             
								throw new IndexOutOfBoundsException(((StringBuilder) (obj)).toString());
		//  335  734:new             #246 <Class IndexOutOfBoundsException>
		//  336  737:dup             
		//  337  738:aload           15
		//  338  740:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  339  743:invokespecial   #252 <Method void IndexOutOfBoundsException(String)>
		//  340  746:athrow          
							}
						}
						if(flag1 && !mState.isPreLayout() && ((ViewHolder) (obj)).hasAnyOfTheFlags(8192))
		//* 341  747:iload           5
		//* 342  749:ifeq            848
		//* 343  752:aload_0         
		//* 344  753:getfield        #28  <Field RecyclerView this$0>
		//* 345  756:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//* 346  759:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//* 347  762:ifne            848
		//* 348  765:aload           15
		//* 349  767:sipush          8192
		//* 350  770:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 351  773:ifeq            848
						{
							((ViewHolder) (obj)).setFlags(0, 8192);
		//  352  776:aload           15
		//  353  778:iconst_0        
		//  354  779:sipush          8192
		//  355  782:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
							if(mState.mRunSimpleAnimations)
		//* 356  785:aload_0         
		//* 357  786:getfield        #28  <Field RecyclerView this$0>
		//* 358  789:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//* 359  792:getfield        #578 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		//* 360  795:ifeq            848
							{
								int j = ItemAnimator.buildAdapterChangeFlagsForAnimations(((ViewHolder) (obj)));
		//  361  798:aload           15
		//  362  800:invokestatic    #584 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
		//  363  803:istore          6
								ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, ((ViewHolder) (obj)), j | 0x1000, ((ViewHolder) (obj)).getUnmodifiedPayloads());
		//  364  805:aload_0         
		//  365  806:getfield        #28  <Field RecyclerView this$0>
		//  366  809:getfield        #588 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//  367  812:aload_0         
		//  368  813:getfield        #28  <Field RecyclerView this$0>
		//  369  816:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//  370  819:aload           15
		//  371  821:iload           6
		//  372  823:sipush          4096
		//  373  826:ior             
		//  374  827:aload           15
		//  375  829:invokevirtual   #591 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//  376  832:invokevirtual   #595 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
		//  377  835:astore          16
								recordAnimationInfoIfBouncedHiddenView(((ViewHolder) (obj)), itemholderinfo);
		//  378  837:aload_0         
		//  379  838:getfield        #28  <Field RecyclerView this$0>
		//  380  841:aload           15
		//  381  843:aload           16
		//  382  845:invokevirtual   #599 <Method void RecyclerView.recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
							}
						}
						if(mState.isPreLayout() && ((ViewHolder) (obj)).isBound())
		//* 383  848:aload_0         
		//* 384  849:getfield        #28  <Field RecyclerView this$0>
		//* 385  852:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//* 386  855:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//* 387  858:ifeq            878
		//* 388  861:aload           15
		//* 389  863:invokevirtual   #602 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 390  866:ifeq            878
							obj.mPreLayoutPosition = i;
		//  391  869:aload           15
		//  392  871:iload_1         
		//  393  872:putfield        #168 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
						else
		//* 394  875:goto            905
						if(!((ViewHolder) (obj)).isBound() || ((ViewHolder) (obj)).needsUpdate() || ((ViewHolder) (obj)).isInvalid())
		//* 395  878:aload           15
		//* 396  880:invokevirtual   #602 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 397  883:ifeq            910
		//* 398  886:aload           15
		//* 399  888:invokevirtual   #605 <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//* 400  891:ifne            910
		//* 401  894:aload           15
		//* 402  896:invokevirtual   #320 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 403  899:ifeq            905
							break label2;
		//  404  902:goto            910
						flag = false;
		//  405  905:iconst_0        
		//  406  906:istore_2        
						break label1;
		//  407  907:goto            930
					}
					flag = tryBindViewHolderByDeadline(((ViewHolder) (obj)), mAdapterHelper.findPositionOffset(i), i, l);
		//  408  910:aload_0         
		//  409  911:aload           15
		//  410  913:aload_0         
		//  411  914:getfield        #28  <Field RecyclerView this$0>
		//  412  917:getfield        #219 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//  413  920:iload_1         
		//  414  921:invokevirtual   #224 <Method int AdapterHelper.findPositionOffset(int)>
		//  415  924:iload_1         
		//  416  925:lload_3         
		//  417  926:invokespecial   #607 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//  418  929:istore_2        
				}
				Object obj2 = ((Object) (((ViewHolder) (obj)).itemView.getLayoutParams()));
		//  419  930:aload           15
		//  420  932:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//  421  935:invokevirtual   #373 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//  422  938:astore          16
				if(obj2 == null)
		//* 423  940:aload           16
		//* 424  942:ifnonnull       970
				{
					obj2 = ((Object) ((LayoutParams)generateDefaultLayoutParams()));
		//  425  945:aload_0         
		//  426  946:getfield        #28  <Field RecyclerView this$0>
		//  427  949:invokevirtual   #610 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//  428  952:checkcast       #375 <Class RecyclerView$LayoutParams>
		//  429  955:astore          16
					((ViewHolder) (obj)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj2)));
		//  430  957:aload           15
		//  431  959:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//  432  962:aload           16
		//  433  964:invokevirtual   #614 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//* 434  967:goto            1016
				if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj2))))
		//* 435  970:aload_0         
		//* 436  971:getfield        #28  <Field RecyclerView this$0>
		//* 437  974:aload           16
		//* 438  976:invokevirtual   #618 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 439  979:ifne            1009
				{
					obj2 = ((Object) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj2)))));
		//  440  982:aload_0         
		//  441  983:getfield        #28  <Field RecyclerView this$0>
		//  442  986:aload           16
		//  443  988:invokevirtual   #622 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  444  991:checkcast       #375 <Class RecyclerView$LayoutParams>
		//  445  994:astore          16
					((ViewHolder) (obj)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj2)));
		//  446  996:aload           15
		//  447  998:getfield        #65  <Field View RecyclerView$ViewHolder.itemView>
		//  448 1001:aload           16
		//  449 1003:invokevirtual   #614 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//* 450 1006:goto            1016
				{
					obj2 = ((Object) ((LayoutParams)obj2));
		//  451 1009:aload           16
		//  452 1011:checkcast       #375 <Class RecyclerView$LayoutParams>
		//  453 1014:astore          16
				}
				obj2.mViewHolder = ((ViewHolder) (obj));
		//  454 1016:aload           16
		//  455 1018:aload           15
		//  456 1020:putfield        #626 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
				if(flag1 && flag)
		//* 457 1023:iload           5
		//* 458 1025:ifeq            1038
		//* 459 1028:iload_2         
		//* 460 1029:ifeq            1038
					flag = flag4;
		//  461 1032:iload           9
		//  462 1034:istore_2        
				else
		//* 463 1035:goto            1040
					flag = false;
		//  464 1038:iconst_0        
		//  465 1039:istore_2        
				obj2.mPendingInvalidate = flag;
		//  466 1040:aload           16
		//  467 1042:iload_2         
		//  468 1043:putfield        #629 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
				return ((ViewHolder) (obj));
		//  469 1046:aload           15
		//  470 1048:areturn         
			}
			StringBuilder stringbuilder = new StringBuilder();
		//  471 1049:new             #226 <Class StringBuilder>
		//  472 1052:dup             
		//  473 1053:invokespecial   #227 <Method void StringBuilder()>
		//  474 1056:astore          15
			stringbuilder.append("Invalid item position ");
		//  475 1058:aload           15
		//  476 1060:ldc2            #631 <String "Invalid item position ">
		//  477 1063:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  478 1066:pop             
			stringbuilder.append(i);
		//  479 1067:aload           15
		//  480 1069:iload_1         
		//  481 1070:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  482 1073:pop             
			stringbuilder.append("(");
		//  483 1074:aload           15
		//  484 1076:ldc2            #633 <String "(">
		//  485 1079:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  486 1082:pop             
			stringbuilder.append(i);
		//  487 1083:aload           15
		//  488 1085:iload_1         
		//  489 1086:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  490 1089:pop             
			stringbuilder.append("). Item count:");
		//  491 1090:aload           15
		//  492 1092:ldc2            #635 <String "). Item count:">
		//  493 1095:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  494 1098:pop             
			stringbuilder.append(mState.getItemCount());
		//  495 1099:aload           15
		//  496 1101:aload_0         
		//  497 1102:getfield        #28  <Field RecyclerView this$0>
		//  498 1105:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//  499 1108:invokevirtual   #215 <Method int RecyclerView$State.getItemCount()>
		//  500 1111:invokevirtual   #236 <Method StringBuilder StringBuilder.append(int)>
		//  501 1114:pop             
			stringbuilder.append(exceptionLabel());
		//  502 1115:aload           15
		//  503 1117:aload_0         
		//  504 1118:getfield        #28  <Field RecyclerView this$0>
		//  505 1121:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//  506 1124:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//  507 1127:pop             
			throw new IndexOutOfBoundsException(stringbuilder.toString());
		//  508 1128:new             #246 <Class IndexOutOfBoundsException>
		//  509 1131:dup             
		//  510 1132:aload           15
		//  511 1134:invokevirtual   #249 <Method String StringBuilder.toString()>
		//  512 1137:invokespecial   #252 <Method void IndexOutOfBoundsException(String)>
		//  513 1140:athrow          
		}

		void unscrapView(ViewHolder viewholder)
		{
			if(viewholder.mInChangeScrap)
		//*   0    0:aload_1         
		//*   1    1:getfield        #406 <Field boolean RecyclerView$ViewHolder.mInChangeScrap>
		//*   2    4:ifeq            19
				mChangedScrap.remove(((Object) (viewholder)));
		//    3    7:aload_0         
		//    4    8:getfield        #38  <Field ArrayList mChangedScrap>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #638 <Method boolean ArrayList.remove(Object)>
		//    7   15:pop             
			else
		//*   8   16:goto            28
				mAttachedScrap.remove(((Object) (viewholder)));
		//    9   19:aload_0         
		//   10   20:getfield        #36  <Field ArrayList mAttachedScrap>
		//   11   23:aload_1         
		//   12   24:invokevirtual   #638 <Method boolean ArrayList.remove(Object)>
		//   13   27:pop             
			viewholder.mScrapContainer = null;
		//   14   28:aload_1         
		//   15   29:aconst_null     
		//   16   30:putfield        #403 <Field RecyclerView$Recycler RecyclerView$ViewHolder.mScrapContainer>
			viewholder.mInChangeScrap = false;
		//   17   33:aload_1         
		//   18   34:iconst_0        
		//   19   35:putfield        #406 <Field boolean RecyclerView$ViewHolder.mInChangeScrap>
			viewholder.clearReturnedFromScrapFlag();
		//   20   38:aload_1         
		//   21   39:invokevirtual   #409 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//   22   42:return          
		}

		void updateViewCacheSize()
		{
			int i;
			if(mLayout != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #28  <Field RecyclerView this$0>
		//*   2    4:getfield        #642 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnull          24
				i = mLayout.mPrefetchMaxCountObserved;
		//    4   10:aload_0         
		//    5   11:getfield        #28  <Field RecyclerView this$0>
		//    6   14:getfield        #642 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    7   17:getfield        #647 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
		//    8   20:istore_1        
			else
		//*   9   21:goto            26
				i = 0;
		//   10   24:iconst_0        
		//   11   25:istore_1        
			mViewCacheMax = mRequestedCacheMax + i;
		//   12   26:aload_0         
		//   13   27:aload_0         
		//   14   28:getfield        #50  <Field int mRequestedCacheMax>
		//   15   31:iload_1         
		//   16   32:iadd            
		//   17   33:putfield        #52  <Field int mViewCacheMax>
			for(int j = mCachedViews.size() - 1; j >= 0 && mCachedViews.size() > mViewCacheMax; j--)
		//*  18   36:aload_0         
		//*  19   37:getfield        #40  <Field ArrayList mCachedViews>
		//*  20   40:invokevirtual   #202 <Method int ArrayList.size()>
		//*  21   43:iconst_1        
		//*  22   44:isub            
		//*  23   45:istore_1        
		//*  24   46:iload_1         
		//*  25   47:iflt            76
		//*  26   50:aload_0         
		//*  27   51:getfield        #40  <Field ArrayList mCachedViews>
		//*  28   54:invokevirtual   #202 <Method int ArrayList.size()>
		//*  29   57:aload_0         
		//*  30   58:getfield        #52  <Field int mViewCacheMax>
		//*  31   61:icmple          76
				recycleCachedViewAt(j);
		//   32   64:aload_0         
		//   33   65:iload_1         
		//   34   66:invokevirtual   #315 <Method void recycleCachedViewAt(int)>

		//   35   69:iload_1         
		//   36   70:iconst_1        
		//   37   71:isub            
		//   38   72:istore_1        
		//*  39   73:goto            46
		//   40   76:return          
		}

		boolean validateViewHolderForOffsetPosition(ViewHolder viewholder)
		{
			if(viewholder.isRemoved())
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #301 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   2    4:ifeq            18
				return mState.isPreLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #28  <Field RecyclerView this$0>
		//    5   11:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//    6   14:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//    7   17:ireturn         
			if(viewholder.mPosition >= 0 && viewholder.mPosition < mAdapter.getItemCount())
		//*   8   18:aload_1         
		//*   9   19:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  10   22:iflt            123
		//*  11   25:aload_1         
		//*  12   26:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  13   29:aload_0         
		//*  14   30:getfield        #28  <Field RecyclerView this$0>
		//*  15   33:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   36:invokevirtual   #283 <Method int RecyclerView$Adapter.getItemCount()>
		//*  17   39:icmpge          123
			{
				boolean flag1 = mState.isPreLayout();
		//   18   42:aload_0         
		//   19   43:getfield        #28  <Field RecyclerView this$0>
		//   20   46:getfield        #160 <Field RecyclerView$State RecyclerView.mState>
		//   21   49:invokevirtual   #165 <Method boolean RecyclerView$State.isPreLayout()>
		//   22   52:istore_3        
				boolean flag = false;
		//   23   53:iconst_0        
		//   24   54:istore_2        
				if(!flag1 && mAdapter.getItemViewType(viewholder.mPosition) != viewholder.getItemViewType())
		//*  25   55:iload_3         
		//*  26   56:ifne            82
		//*  27   59:aload_0         
		//*  28   60:getfield        #28  <Field RecyclerView this$0>
		//*  29   63:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  30   66:aload_1         
		//*  31   67:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  32   70:invokevirtual   #519 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//*  33   73:aload_1         
		//*  34   74:invokevirtual   #126 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  35   77:icmpeq          82
					return false;
		//   36   80:iconst_0        
		//   37   81:ireturn         
				if(mAdapter.hasStableIds())
		//*  38   82:aload_0         
		//*  39   83:getfield        #28  <Field RecyclerView this$0>
		//*  40   86:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  41   89:invokevirtual   #282 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  42   92:ifeq            121
				{
					if(viewholder.getItemId() == mAdapter.getItemId(viewholder.mPosition))
		//*  43   95:aload_1         
		//*  44   96:invokevirtual   #289 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  45   99:aload_0         
		//*  46  100:getfield        #28  <Field RecyclerView this$0>
		//*  47  103:getfield        #144 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  48  106:aload_1         
		//*  49  107:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//*  50  110:invokevirtual   #287 <Method long RecyclerView$Adapter.getItemId(int)>
		//*  51  113:lcmp            
		//*  52  114:ifne            119
						flag = true;
		//   53  117:iconst_1        
		//   54  118:istore_2        
					return flag;
		//   55  119:iload_2         
		//   56  120:ireturn         
				} else
				{
					return true;
		//   57  121:iconst_1        
		//   58  122:ireturn         
				}
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   59  123:new             #226 <Class StringBuilder>
		//   60  126:dup             
		//   61  127:invokespecial   #227 <Method void StringBuilder()>
		//   62  130:astore          4
				stringbuilder.append("Inconsistency detected. Invalid view holder adapter position");
		//   63  132:aload           4
		//   64  134:ldc2            #649 <String "Inconsistency detected. Invalid view holder adapter position">
		//   65  137:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   66  140:pop             
				stringbuilder.append(((Object) (viewholder)));
		//   67  141:aload           4
		//   68  143:aload_1         
		//   69  144:invokevirtual   #354 <Method StringBuilder StringBuilder.append(Object)>
		//   70  147:pop             
				stringbuilder.append(exceptionLabel());
		//   71  148:aload           4
		//   72  150:aload_0         
		//   73  151:getfield        #28  <Field RecyclerView this$0>
		//   74  154:invokevirtual   #244 <Method String RecyclerView.exceptionLabel()>
		//   75  157:invokevirtual   #233 <Method StringBuilder StringBuilder.append(String)>
		//   76  160:pop             
				throw new IndexOutOfBoundsException(stringbuilder.toString());
		//   77  161:new             #246 <Class IndexOutOfBoundsException>
		//   78  164:dup             
		//   79  165:aload           4
		//   80  167:invokevirtual   #249 <Method String StringBuilder.toString()>
		//   81  170:invokespecial   #252 <Method void IndexOutOfBoundsException(String)>
		//   82  173:athrow          
			}
		}

		void viewRangeUpdate(int i, int j)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #202 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            74
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   14:aload_0         
		//    9   15:getfield        #40  <Field ArrayList mCachedViews>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #206 <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #61  <Class RecyclerView$ViewHolder>
		//   13   25:astore          5
				if(viewholder == null)
		//*  14   27:aload           5
		//*  15   29:ifnonnull       35
					continue;
		//   16   32:goto            67
				int l = viewholder.mPosition;
		//   17   35:aload           5
		//   18   37:getfield        #387 <Field int RecyclerView$ViewHolder.mPosition>
		//   19   40:istore          4
				if(l >= i && l < j + i)
		//*  20   42:iload           4
		//*  21   44:iload_1         
		//*  22   45:icmplt          67
		//*  23   48:iload           4
		//*  24   50:iload_2         
		//*  25   51:iload_1         
		//*  26   52:iadd            
		//*  27   53:icmpge          67
				{
					viewholder.addFlags(2);
		//   28   56:aload           5
		//   29   58:iconst_2        
		//   30   59:invokevirtual   #83  <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   31   62:aload_0         
		//   32   63:iload_3         
		//   33   64:invokevirtual   #315 <Method void recycleCachedViewAt(int)>
				}
			}

		//   34   67:iload_3         
		//   35   68:iconst_1        
		//   36   69:isub            
		//   37   70:istore_3        
		//*  38   71:goto            10
		//   39   74:return          
		}

		final ArrayList mAttachedScrap = new ArrayList();
		final ArrayList mCachedViews = new ArrayList();
		ArrayList mChangedScrap;
		RecycledViewPool mRecyclerPool;
		private int mRequestedCacheMax;
		private final List mUnmodifiableAttachedScrap;
		private ViewCacheExtension mViewCacheExtension;
		int mViewCacheMax;
		final RecyclerView this$0;

		public Recycler()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #28  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #31  <Method void Object()>
		//    5    9:aload_0         
		//    6   10:new             #33  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #34  <Method void ArrayList()>
		//    9   17:putfield        #36  <Field ArrayList mAttachedScrap>
			mChangedScrap = null;
		//   10   20:aload_0         
		//   11   21:aconst_null     
		//   12   22:putfield        #38  <Field ArrayList mChangedScrap>
		//   13   25:aload_0         
		//   14   26:new             #33  <Class ArrayList>
		//   15   29:dup             
		//   16   30:invokespecial   #34  <Method void ArrayList()>
		//   17   33:putfield        #40  <Field ArrayList mCachedViews>
			mUnmodifiableAttachedScrap = Collections.unmodifiableList(((List) (mAttachedScrap)));
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #36  <Field ArrayList mAttachedScrap>
		//   21   41:invokestatic    #46  <Method List Collections.unmodifiableList(List)>
		//   22   44:putfield        #48  <Field List mUnmodifiableAttachedScrap>
			mRequestedCacheMax = 2;
		//   23   47:aload_0         
		//   24   48:iconst_2        
		//   25   49:putfield        #50  <Field int mRequestedCacheMax>
			mViewCacheMax = 2;
		//   26   52:aload_0         
		//   27   53:iconst_2        
		//   28   54:putfield        #52  <Field int mViewCacheMax>
		//   29   57:return          
		}
	}

	public static interface RecyclerListener
	{

		public abstract void onViewRecycled(ViewHolder viewholder);
	}

	private class RecyclerViewDataObserver extends AdapterDataObserver
	{

		public void onChanged()
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			mState.mStructureChanged = true;
		//    4    8:aload_0         
		//    5    9:getfield        #13  <Field RecyclerView this$0>
		//    6   12:getfield        #26  <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iconst_1        
		//    8   16:putfield        #32  <Field boolean RecyclerView$State.mStructureChanged>
			processDataSetCompletelyChanged(true);
		//    9   19:aload_0         
		//   10   20:getfield        #13  <Field RecyclerView this$0>
		//   11   23:iconst_1        
		//   12   24:invokevirtual   #36  <Method void RecyclerView.processDataSetCompletelyChanged(boolean)>
			if(!mAdapterHelper.hasPendingUpdates())
		//*  13   27:aload_0         
		//*  14   28:getfield        #13  <Field RecyclerView this$0>
		//*  15   31:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*  16   34:invokevirtual   #46  <Method boolean AdapterHelper.hasPendingUpdates()>
		//*  17   37:ifne            47
				requestLayout();
		//   18   40:aload_0         
		//   19   41:getfield        #13  <Field RecyclerView this$0>
		//   20   44:invokevirtual   #49  <Method void RecyclerView.requestLayout()>
		//   21   47:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeChanged(i, j, obj))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:aload_3         
		//*  10   18:invokevirtual   #54  <Method boolean AdapterHelper.onItemRangeChanged(int, int, Object)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeInserted(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #62  <Method boolean AdapterHelper.onItemRangeInserted(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeMoved(i, j, k))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:iload_3         
		//*  10   18:invokevirtual   #67  <Method boolean AdapterHelper.onItemRangeMoved(int, int, int)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeRemoved(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #70  <Method boolean AdapterHelper.onItemRangeRemoved(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		void triggerUpdateProcessor()
		{
			if(RecyclerView.POST_UPDATES_ON_ANIMATION && mHasFixedSize && mIsAttached)
		//*   0    0:getstatic       #73  <Field boolean RecyclerView.POST_UPDATES_ON_ANIMATION>
		//*   1    3:ifeq            40
		//*   2    6:aload_0         
		//*   3    7:getfield        #13  <Field RecyclerView this$0>
		//*   4   10:getfield        #76  <Field boolean RecyclerView.mHasFixedSize>
		//*   5   13:ifeq            40
		//*   6   16:aload_0         
		//*   7   17:getfield        #13  <Field RecyclerView this$0>
		//*   8   20:getfield        #79  <Field boolean RecyclerView.mIsAttached>
		//*   9   23:ifeq            40
			{
				RecyclerView recyclerview = RecyclerView.this;
		//   10   26:aload_0         
		//   11   27:getfield        #13  <Field RecyclerView this$0>
		//   12   30:astore_1        
				ViewCompat.postOnAnimation(((View) (recyclerview)), recyclerview.mUpdateChildViewsRunnable);
		//   13   31:aload_1         
		//   14   32:aload_1         
		//   15   33:getfield        #83  <Field Runnable RecyclerView.mUpdateChildViewsRunnable>
		//   16   36:invokestatic    #89  <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   17   39:return          
			} else
			{
				RecyclerView recyclerview1 = RecyclerView.this;
		//   18   40:aload_0         
		//   19   41:getfield        #13  <Field RecyclerView this$0>
		//   20   44:astore_1        
				recyclerview1.mAdapterUpdateDuringMeasure = true;
		//   21   45:aload_1         
		//   22   46:iconst_1        
		//   23   47:putfield        #92  <Field boolean RecyclerView.mAdapterUpdateDuringMeasure>
				recyclerview1.requestLayout();
		//   24   50:aload_1         
		//   25   51:invokevirtual   #49  <Method void RecyclerView.requestLayout()>
				return;
		//   26   54:return          
			}
		}

		final RecyclerView this$0;

		RecyclerViewDataObserver()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #13  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #16  <Method void RecyclerView$AdapterDataObserver()>
		//    5    9:return          
		}
	}

	public static class SavedState extends AbsSavedState
	{

		void copyFrom(SavedState savedstate)
		{
			mLayoutState = savedstate.mLayoutState;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:getfield        #45  <Field Parcelable mLayoutState>
		//    3    5:putfield        #45  <Field Parcelable mLayoutState>
		//    4    8:return          
		}

		public void writeToParcel(Parcel parcel, int i)
		{
			super.writeToParcel(parcel, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #54  <Method void AbsSavedState.writeToParcel(Parcel, int)>
			parcel.writeParcelable(mLayoutState, 0);
		//    4    6:aload_1         
		//    5    7:aload_0         
		//    6    8:getfield        #45  <Field Parcelable mLayoutState>
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #58  <Method void Parcel.writeParcelable(Parcelable, int)>
		//    9   15:return          
		}

		public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.ClassLoaderCreator() {

			public SavedState createFromParcel(Parcel parcel)
			{
				return new SavedState(parcel, ((ClassLoader) (null)));
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aconst_null     
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public SavedState createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return new SavedState(parcel, classloader);
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel)
			{
				return ((Object) (createFromParcel(parcel)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #26  <Method RecyclerView$SavedState createFromParcel(Parcel)>
			//    3    5:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return ((Object) (createFromParcel(parcel, classloader)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:aload_2         
			//    3    3:invokevirtual   #29  <Method RecyclerView$SavedState createFromParcel(Parcel, ClassLoader)>
			//    4    6:areturn         
			}

			public SavedState[] newArray(int i)
			{
				return new SavedState[i];
			//    0    0:iload_1         
			//    1    1:anewarray       SavedState[]
			//    2    4:areturn         
			}

			public volatile Object[] newArray(int i)
			{
				return ((Object []) (newArray(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #34  <Method RecyclerView$SavedState[] newArray(int)>
			//    3    5:areturn         
			}

		}
;
		Parcelable mLayoutState;

		static 
		{
		//    0    0:new             #9   <Class RecyclerView$SavedState$1>
		//    1    3:dup             
		//    2    4:invokespecial   #23  <Method void RecyclerView$SavedState$1()>
		//    3    7:putstatic       #25  <Field android.os.Parcelable$Creator CREATOR>
		//*   4   10:return          
		}

		SavedState(Parcel parcel, ClassLoader classloader)
		{
			super(parcel, classloader);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #29  <Method void AbsSavedState(Parcel, ClassLoader)>
			if(classloader == null)
		//*   4    6:aload_2         
		//*   5    7:ifnull          13
		//*   6   10:goto            19
				classloader = ((Class) (android/support/v7/widget/RecyclerView$LayoutManager)).getClassLoader();
		//    7   13:ldc1            #31  <Class RecyclerView$LayoutManager>
		//    8   15:invokevirtual   #37  <Method ClassLoader Class.getClassLoader()>
		//    9   18:astore_2        
			mLayoutState = parcel.readParcelable(classloader);
		//   10   19:aload_0         
		//   11   20:aload_1         
		//   12   21:aload_2         
		//   13   22:invokevirtual   #43  <Method Parcelable Parcel.readParcelable(ClassLoader)>
		//   14   25:putfield        #45  <Field Parcelable mLayoutState>
		//   15   28:return          
		}

		SavedState(Parcelable parcelable)
		{
			super(parcelable);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #48  <Method void AbsSavedState(Parcelable)>
		//    3    5:return          
		}
	}

	public static abstract class SmoothScroller
	{

		public PointF computeScrollVectorForPosition(int i)
		{
			LayoutManager layoutmanager = getLayoutManager();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #46  <Method RecyclerView$LayoutManager getLayoutManager()>
		//    2    4:astore_2        
			if(layoutmanager instanceof ScrollVectorProvider)
		//*   3    5:aload_2         
		//*   4    6:instanceof      #12  <Class RecyclerView$SmoothScroller$ScrollVectorProvider>
		//*   5    9:ifeq            23
			{
				return ((ScrollVectorProvider)layoutmanager).computeScrollVectorForPosition(i);
		//    6   12:aload_2         
		//    7   13:checkcast       #12  <Class RecyclerView$SmoothScroller$ScrollVectorProvider>
		//    8   16:iload_1         
		//    9   17:invokeinterface #48  <Method PointF RecyclerView$SmoothScroller$ScrollVectorProvider.computeScrollVectorForPosition(int)>
		//   10   22:areturn         
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   11   23:new             #50  <Class StringBuilder>
		//   12   26:dup             
		//   13   27:invokespecial   #51  <Method void StringBuilder()>
		//   14   30:astore_2        
				stringbuilder.append("You should override computeScrollVectorForPosition when the LayoutManager does not implement ");
		//   15   31:aload_2         
		//   16   32:ldc1            #53  <String "You should override computeScrollVectorForPosition when the LayoutManager does not implement ">
		//   17   34:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   18   37:pop             
				stringbuilder.append(((Class) (android/support/v7/widget/RecyclerView$SmoothScroller$ScrollVectorProvider)).getCanonicalName());
		//   19   38:aload_2         
		//   20   39:ldc1            #12  <Class RecyclerView$SmoothScroller$ScrollVectorProvider>
		//   21   41:invokevirtual   #63  <Method String Class.getCanonicalName()>
		//   22   44:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   23   47:pop             
				Log.w("RecyclerView", stringbuilder.toString());
		//   24   48:ldc1            #65  <String "RecyclerView">
		//   25   50:aload_2         
		//   26   51:invokevirtual   #68  <Method String StringBuilder.toString()>
		//   27   54:invokestatic    #74  <Method int Log.w(String, String)>
		//   28   57:pop             
				return null;
		//   29   58:aconst_null     
		//   30   59:areturn         
			}
		}

		public View findViewByPosition(int i)
		{
			return mRecyclerView.mLayout.findViewByPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #79  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #82  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:iload_1         
		//    4    8:invokevirtual   #86  <Method View RecyclerView$LayoutManager.findViewByPosition(int)>
		//    5   11:areturn         
		}

		public int getChildCount()
		{
			return mRecyclerView.mLayout.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #79  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #82  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:invokevirtual   #90  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    4   10:ireturn         
		}

		public int getChildPosition(View view)
		{
			return mRecyclerView.getChildLayoutPosition(view);
		//    0    0:aload_0         
		//    1    1:getfield        #79  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #95  <Method int RecyclerView.getChildLayoutPosition(View)>
		//    4    8:ireturn         
		}

		public LayoutManager getLayoutManager()
		{
			return mLayoutManager;
		//    0    0:aload_0         
		//    1    1:getfield        #97  <Field RecyclerView$LayoutManager mLayoutManager>
		//    2    4:areturn         
		}

		public int getTargetPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #33  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean isPendingInitialRun()
		{
			return mPendingInitialRun;
		//    0    0:aload_0         
		//    1    1:getfield        #102 <Field boolean mPendingInitialRun>
		//    2    4:ireturn         
		}

		public boolean isRunning()
		{
			return mRunning;
		//    0    0:aload_0         
		//    1    1:getfield        #105 <Field boolean mRunning>
		//    2    4:ireturn         
		}

		protected void normalize(PointF pointf)
		{
			float f = (float)Math.sqrt(pointf.x * pointf.x + pointf.y * pointf.y);
		//    0    0:aload_1         
		//    1    1:getfield        #114 <Field float PointF.x>
		//    2    4:aload_1         
		//    3    5:getfield        #114 <Field float PointF.x>
		//    4    8:fmul            
		//    5    9:aload_1         
		//    6   10:getfield        #117 <Field float PointF.y>
		//    7   13:aload_1         
		//    8   14:getfield        #117 <Field float PointF.y>
		//    9   17:fmul            
		//   10   18:fadd            
		//   11   19:f2d             
		//   12   20:invokestatic    #123 <Method double Math.sqrt(double)>
		//   13   23:d2f             
		//   14   24:fstore_2        
			pointf.x = pointf.x / f;
		//   15   25:aload_1         
		//   16   26:aload_1         
		//   17   27:getfield        #114 <Field float PointF.x>
		//   18   30:fload_2         
		//   19   31:fdiv            
		//   20   32:putfield        #114 <Field float PointF.x>
			pointf.y = pointf.y / f;
		//   21   35:aload_1         
		//   22   36:aload_1         
		//   23   37:getfield        #117 <Field float PointF.y>
		//   24   40:fload_2         
		//   25   41:fdiv            
		//   26   42:putfield        #117 <Field float PointF.y>
		//   27   45:return          
		}

		void onAnimation(int i, int j)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #79  <Field RecyclerView mRecyclerView>
		//    2    4:astore          4
			if(!mRunning || mTargetPosition == -1 || recyclerview == null)
		//*   3    6:aload_0         
		//*   4    7:getfield        #105 <Field boolean mRunning>
		//*   5   10:ifeq            26
		//*   6   13:aload_0         
		//*   7   14:getfield        #33  <Field int mTargetPosition>
		//*   8   17:iconst_m1       
		//*   9   18:icmpeq          26
		//*  10   21:aload           4
		//*  11   23:ifnonnull       30
				stop();
		//   12   26:aload_0         
		//   13   27:invokevirtual   #128 <Method void stop()>
			if(mPendingInitialRun && mTargetView == null && mLayoutManager != null)
		//*  14   30:aload_0         
		//*  15   31:getfield        #102 <Field boolean mPendingInitialRun>
		//*  16   34:ifeq            110
		//*  17   37:aload_0         
		//*  18   38:getfield        #130 <Field View mTargetView>
		//*  19   41:ifnonnull       110
		//*  20   44:aload_0         
		//*  21   45:getfield        #97  <Field RecyclerView$LayoutManager mLayoutManager>
		//*  22   48:ifnull          110
			{
				PointF pointf = computeScrollVectorForPosition(mTargetPosition);
		//   23   51:aload_0         
		//   24   52:aload_0         
		//   25   53:getfield        #33  <Field int mTargetPosition>
		//   26   56:invokevirtual   #131 <Method PointF computeScrollVectorForPosition(int)>
		//   27   59:astore          5
				if(pointf != null && (pointf.x != 0.0F || pointf.y != 0.0F))
		//*  28   61:aload           5
		//*  29   63:ifnull          110
		//*  30   66:aload           5
		//*  31   68:getfield        #114 <Field float PointF.x>
		//*  32   71:fconst_0        
		//*  33   72:fcmpl           
		//*  34   73:ifne            86
		//*  35   76:aload           5
		//*  36   78:getfield        #117 <Field float PointF.y>
		//*  37   81:fconst_0        
		//*  38   82:fcmpl           
		//*  39   83:ifeq            110
					recyclerview.scrollStep((int)Math.signum(pointf.x), (int)Math.signum(pointf.y), ((int []) (null)));
		//   40   86:aload           4
		//   41   88:aload           5
		//   42   90:getfield        #114 <Field float PointF.x>
		//   43   93:invokestatic    #135 <Method float Math.signum(float)>
		//   44   96:f2i             
		//   45   97:aload           5
		//   46   99:getfield        #117 <Field float PointF.y>
		//   47  102:invokestatic    #135 <Method float Math.signum(float)>
		//   48  105:f2i             
		//   49  106:aconst_null     
		//   50  107:invokevirtual   #139 <Method void RecyclerView.scrollStep(int, int, int[])>
			}
			mPendingInitialRun = false;
		//   51  110:aload_0         
		//   52  111:iconst_0        
		//   53  112:putfield        #102 <Field boolean mPendingInitialRun>
			View view = mTargetView;
		//   54  115:aload_0         
		//   55  116:getfield        #130 <Field View mTargetView>
		//   56  119:astore          5
			if(view != null)
		//*  57  121:aload           5
		//*  58  123:ifnull          185
				if(getChildPosition(view) == mTargetPosition)
		//*  59  126:aload_0         
		//*  60  127:aload           5
		//*  61  129:invokevirtual   #141 <Method int getChildPosition(View)>
		//*  62  132:aload_0         
		//*  63  133:getfield        #33  <Field int mTargetPosition>
		//*  64  136:icmpne          172
				{
					onTargetFound(mTargetView, recyclerview.mState, mRecyclingAction);
		//   65  139:aload_0         
		//   66  140:aload_0         
		//   67  141:getfield        #130 <Field View mTargetView>
		//   68  144:aload           4
		//   69  146:getfield        #145 <Field RecyclerView$State RecyclerView.mState>
		//   70  149:aload_0         
		//   71  150:getfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   72  153:invokevirtual   #149 <Method void onTargetFound(View, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
					mRecyclingAction.runIfNecessary(recyclerview);
		//   73  156:aload_0         
		//   74  157:getfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   75  160:aload           4
		//   76  162:invokevirtual   #153 <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
					stop();
		//   77  165:aload_0         
		//   78  166:invokevirtual   #128 <Method void stop()>
				} else
		//*  79  169:goto            185
				{
					Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
		//   80  172:ldc1            #65  <String "RecyclerView">
		//   81  174:ldc1            #155 <String "Passed over target position while smooth scrolling.">
		//   82  176:invokestatic    #158 <Method int Log.e(String, String)>
		//   83  179:pop             
					mTargetView = null;
		//   84  180:aload_0         
		//   85  181:aconst_null     
		//   86  182:putfield        #130 <Field View mTargetView>
				}
			if(mRunning)
		//*  87  185:aload_0         
		//*  88  186:getfield        #105 <Field boolean mRunning>
		//*  89  189:ifeq            253
			{
				onSeekTargetStep(i, j, recyclerview.mState, mRecyclingAction);
		//   90  192:aload_0         
		//   91  193:iload_1         
		//   92  194:iload_2         
		//   93  195:aload           4
		//   94  197:getfield        #145 <Field RecyclerView$State RecyclerView.mState>
		//   95  200:aload_0         
		//   96  201:getfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   97  204:invokevirtual   #162 <Method void onSeekTargetStep(int, int, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
				boolean flag = mRecyclingAction.hasJumpTarget();
		//   98  207:aload_0         
		//   99  208:getfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//  100  211:invokevirtual   #165 <Method boolean RecyclerView$SmoothScroller$Action.hasJumpTarget()>
		//  101  214:istore_3        
				mRecyclingAction.runIfNecessary(recyclerview);
		//  102  215:aload_0         
		//  103  216:getfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//  104  219:aload           4
		//  105  221:invokevirtual   #153 <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
				if(flag)
		//* 106  224:iload_3         
		//* 107  225:ifeq            253
				{
					if(mRunning)
		//* 108  228:aload_0         
		//* 109  229:getfield        #105 <Field boolean mRunning>
		//* 110  232:ifeq            249
					{
						mPendingInitialRun = true;
		//  111  235:aload_0         
		//  112  236:iconst_1        
		//  113  237:putfield        #102 <Field boolean mPendingInitialRun>
						recyclerview.mViewFlinger.postOnAnimation();
		//  114  240:aload           4
		//  115  242:getfield        #169 <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//  116  245:invokevirtual   #174 <Method void RecyclerView$ViewFlinger.postOnAnimation()>
						return;
		//  117  248:return          
					}
					stop();
		//  118  249:aload_0         
		//  119  250:invokevirtual   #128 <Method void stop()>
				}
			}
		//  120  253:return          
		}

		protected void onChildAttachedToWindow(View view)
		{
			if(getChildPosition(view) == getTargetPosition())
		//*   0    0:aload_0         
		//*   1    1:aload_1         
		//*   2    2:invokevirtual   #141 <Method int getChildPosition(View)>
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #178 <Method int getTargetPosition()>
		//*   5    9:icmpne          17
				mTargetView = view;
		//    6   12:aload_0         
		//    7   13:aload_1         
		//    8   14:putfield        #130 <Field View mTargetView>
		//    9   17:return          
		}

		protected abstract void onSeekTargetStep(int i, int j, State state, Action action);

		protected abstract void onStart();

		protected abstract void onStop();

		protected abstract void onTargetFound(View view, State state, Action action);

		public void setTargetPosition(int i)
		{
			mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #33  <Field int mTargetPosition>
		//    3    5:return          
		}

		void start(RecyclerView recyclerview, LayoutManager layoutmanager)
		{
			if(mStarted)
		//*   0    0:aload_0         
		//*   1    1:getfield        #187 <Field boolean mStarted>
		//*   2    4:ifeq            91
			{
				StringBuilder stringbuilder = new StringBuilder();
		//    3    7:new             #50  <Class StringBuilder>
		//    4   10:dup             
		//    5   11:invokespecial   #51  <Method void StringBuilder()>
		//    6   14:astore_3        
				stringbuilder.append("An instance of ");
		//    7   15:aload_3         
		//    8   16:ldc1            #189 <String "An instance of ">
		//    9   18:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   10   21:pop             
				stringbuilder.append(((Object)this).getClass().getSimpleName());
		//   11   22:aload_3         
		//   12   23:aload_0         
		//   13   24:invokevirtual   #193 <Method Class Object.getClass()>
		//   14   27:invokevirtual   #196 <Method String Class.getSimpleName()>
		//   15   30:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   16   33:pop             
				stringbuilder.append(" was started ");
		//   17   34:aload_3         
		//   18   35:ldc1            #198 <String " was started ">
		//   19   37:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   20   40:pop             
				stringbuilder.append("more than once. Each instance of");
		//   21   41:aload_3         
		//   22   42:ldc1            #200 <String "more than once. Each instance of">
		//   23   44:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   24   47:pop             
				stringbuilder.append(((Object)this).getClass().getSimpleName());
		//   25   48:aload_3         
		//   26   49:aload_0         
		//   27   50:invokevirtual   #193 <Method Class Object.getClass()>
		//   28   53:invokevirtual   #196 <Method String Class.getSimpleName()>
		//   29   56:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   30   59:pop             
				stringbuilder.append(" ");
		//   31   60:aload_3         
		//   32   61:ldc1            #202 <String " ">
		//   33   63:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   34   66:pop             
				stringbuilder.append("is intended to only be used once. You should create a new instance for ");
		//   35   67:aload_3         
		//   36   68:ldc1            #204 <String "is intended to only be used once. You should create a new instance for ">
		//   37   70:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   38   73:pop             
				stringbuilder.append("each use.");
		//   39   74:aload_3         
		//   40   75:ldc1            #206 <String "each use.">
		//   41   77:invokevirtual   #57  <Method StringBuilder StringBuilder.append(String)>
		//   42   80:pop             
				Log.w("RecyclerView", stringbuilder.toString());
		//   43   81:ldc1            #65  <String "RecyclerView">
		//   44   83:aload_3         
		//   45   84:invokevirtual   #68  <Method String StringBuilder.toString()>
		//   46   87:invokestatic    #74  <Method int Log.w(String, String)>
		//   47   90:pop             
			}
			mRecyclerView = recyclerview;
		//   48   91:aload_0         
		//   49   92:aload_1         
		//   50   93:putfield        #79  <Field RecyclerView mRecyclerView>
			mLayoutManager = layoutmanager;
		//   51   96:aload_0         
		//   52   97:aload_2         
		//   53   98:putfield        #97  <Field RecyclerView$LayoutManager mLayoutManager>
			if(mTargetPosition != -1)
		//*  54  101:aload_0         
		//*  55  102:getfield        #33  <Field int mTargetPosition>
		//*  56  105:iconst_m1       
		//*  57  106:icmpeq          165
			{
				mRecyclerView.mState.mTargetPosition = mTargetPosition;
		//   58  109:aload_0         
		//   59  110:getfield        #79  <Field RecyclerView mRecyclerView>
		//   60  113:getfield        #145 <Field RecyclerView$State RecyclerView.mState>
		//   61  116:aload_0         
		//   62  117:getfield        #33  <Field int mTargetPosition>
		//   63  120:putfield        #209 <Field int RecyclerView$State.mTargetPosition>
				mRunning = true;
		//   64  123:aload_0         
		//   65  124:iconst_1        
		//   66  125:putfield        #105 <Field boolean mRunning>
				mPendingInitialRun = true;
		//   67  128:aload_0         
		//   68  129:iconst_1        
		//   69  130:putfield        #102 <Field boolean mPendingInitialRun>
				mTargetView = findViewByPosition(getTargetPosition());
		//   70  133:aload_0         
		//   71  134:aload_0         
		//   72  135:aload_0         
		//   73  136:invokevirtual   #178 <Method int getTargetPosition()>
		//   74  139:invokevirtual   #210 <Method View findViewByPosition(int)>
		//   75  142:putfield        #130 <Field View mTargetView>
				onStart();
		//   76  145:aload_0         
		//   77  146:invokevirtual   #212 <Method void onStart()>
				mRecyclerView.mViewFlinger.postOnAnimation();
		//   78  149:aload_0         
		//   79  150:getfield        #79  <Field RecyclerView mRecyclerView>
		//   80  153:getfield        #169 <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   81  156:invokevirtual   #174 <Method void RecyclerView$ViewFlinger.postOnAnimation()>
				mStarted = true;
		//   82  159:aload_0         
		//   83  160:iconst_1        
		//   84  161:putfield        #187 <Field boolean mStarted>
				return;
		//   85  164:return          
			} else
			{
				throw new IllegalArgumentException("Invalid target position");
		//   86  165:new             #214 <Class IllegalArgumentException>
		//   87  168:dup             
		//   88  169:ldc1            #216 <String "Invalid target position">
		//   89  171:invokespecial   #219 <Method void IllegalArgumentException(String)>
		//   90  174:athrow          
			}
		}

		protected final void stop()
		{
			if(!mRunning)
		//*   0    0:aload_0         
		//*   1    1:getfield        #105 <Field boolean mRunning>
		//*   2    4:ifne            8
			{
				return;
		//    3    7:return          
			} else
			{
				mRunning = false;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #105 <Field boolean mRunning>
				onStop();
		//    7   13:aload_0         
		//    8   14:invokevirtual   #221 <Method void onStop()>
				mRecyclerView.mState.mTargetPosition = -1;
		//    9   17:aload_0         
		//   10   18:getfield        #79  <Field RecyclerView mRecyclerView>
		//   11   21:getfield        #145 <Field RecyclerView$State RecyclerView.mState>
		//   12   24:iconst_m1       
		//   13   25:putfield        #209 <Field int RecyclerView$State.mTargetPosition>
				mTargetView = null;
		//   14   28:aload_0         
		//   15   29:aconst_null     
		//   16   30:putfield        #130 <Field View mTargetView>
				mTargetPosition = -1;
		//   17   33:aload_0         
		//   18   34:iconst_m1       
		//   19   35:putfield        #33  <Field int mTargetPosition>
				mPendingInitialRun = false;
		//   20   38:aload_0         
		//   21   39:iconst_0        
		//   22   40:putfield        #102 <Field boolean mPendingInitialRun>
				mLayoutManager.onSmoothScrollerStopped(this);
		//   23   43:aload_0         
		//   24   44:getfield        #97  <Field RecyclerView$LayoutManager mLayoutManager>
		//   25   47:aload_0         
		//   26   48:invokevirtual   #225 <Method void RecyclerView$LayoutManager.onSmoothScrollerStopped(RecyclerView$SmoothScroller)>
				mLayoutManager = null;
		//   27   51:aload_0         
		//   28   52:aconst_null     
		//   29   53:putfield        #97  <Field RecyclerView$LayoutManager mLayoutManager>
				mRecyclerView = null;
		//   30   56:aload_0         
		//   31   57:aconst_null     
		//   32   58:putfield        #79  <Field RecyclerView mRecyclerView>
				return;
		//   33   61:return          
			}
		}

		private LayoutManager mLayoutManager;
		private boolean mPendingInitialRun;
		private RecyclerView mRecyclerView;
		private final Action mRecyclingAction = new Action(0, 0);
		private boolean mRunning;
		private boolean mStarted;
		private int mTargetPosition;
		private View mTargetView;

		public SmoothScroller()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #31  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #33  <Field int mTargetPosition>
		//    5    9:aload_0         
		//    6   10:new             #9   <Class RecyclerView$SmoothScroller$Action>
		//    7   13:dup             
		//    8   14:iconst_0        
		//    9   15:iconst_0        
		//   10   16:invokespecial   #36  <Method void RecyclerView$SmoothScroller$Action(int, int)>
		//   11   19:putfield        #38  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   12   22:return          
		}
	}

	public static class SmoothScroller.Action
	{

		private void validate()
		{
			if(mInterpolator != null && mDuration < 1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field Interpolator mInterpolator>
		//*   2    4:ifnull          28
		//*   3    7:aload_0         
		//*   4    8:getfield        #45  <Field int mDuration>
		//*   5   11:iconst_1        
		//*   6   12:icmplt          18
		//*   7   15:goto            28
				throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
		//    8   18:new             #50  <Class IllegalStateException>
		//    9   21:dup             
		//   10   22:ldc1            #52  <String "If you provide an interpolator, you must set a positive duration">
		//   11   24:invokespecial   #55  <Method void IllegalStateException(String)>
		//   12   27:athrow          
			if(mDuration >= 1)
		//*  13   28:aload_0         
		//*  14   29:getfield        #45  <Field int mDuration>
		//*  15   32:iconst_1        
		//*  16   33:icmplt          37
				return;
		//   17   36:return          
			else
				throw new IllegalStateException("Scroll duration must be a positive number");
		//   18   37:new             #50  <Class IllegalStateException>
		//   19   40:dup             
		//   20   41:ldc1            #57  <String "Scroll duration must be a positive number">
		//   21   43:invokespecial   #55  <Method void IllegalStateException(String)>
		//   22   46:athrow          
		}

		boolean hasJumpTarget()
		{
			return mJumpToPosition >= 0;
		//    0    0:aload_0         
		//    1    1:getfield        #35  <Field int mJumpToPosition>
		//    2    4:iflt            9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		public void jumpTo(int i)
		{
			mJumpToPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #35  <Field int mJumpToPosition>
		//    3    5:return          
		}

		void runIfNecessary(RecyclerView recyclerview)
		{
			int i = mJumpToPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #35  <Field int mJumpToPosition>
		//    2    4:istore_2        
			if(i >= 0)
		//*   3    5:iload_2         
		//*   4    6:iflt            25
			{
				mJumpToPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #35  <Field int mJumpToPosition>
				recyclerview.jumpToPositionForSmoothScroller(i);
		//    8   14:aload_1         
		//    9   15:iload_2         
		//   10   16:invokevirtual   #66  <Method void RecyclerView.jumpToPositionForSmoothScroller(int)>
				mChanged = false;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #37  <Field boolean mChanged>
				return;
		//   14   24:return          
			}
			if(mChanged)
		//*  15   25:aload_0         
		//*  16   26:getfield        #37  <Field boolean mChanged>
		//*  17   29:ifeq            148
			{
				validate();
		//   18   32:aload_0         
		//   19   33:invokespecial   #68  <Method void validate()>
				if(mInterpolator == null)
		//*  20   36:aload_0         
		//*  21   37:getfield        #47  <Field Interpolator mInterpolator>
		//*  22   40:ifnonnull       92
				{
					if(mDuration == 0x80000000)
		//*  23   43:aload_0         
		//*  24   44:getfield        #45  <Field int mDuration>
		//*  25   47:ldc1            #24  <Int 0x80000000>
		//*  26   49:icmpne          70
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy);
		//   27   52:aload_1         
		//   28   53:getfield        #72  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   29   56:aload_0         
		//   30   57:getfield        #41  <Field int mDx>
		//   31   60:aload_0         
		//   32   61:getfield        #43  <Field int mDy>
		//   33   64:invokevirtual   #77  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int)>
					else
		//*  34   67:goto            115
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration);
		//   35   70:aload_1         
		//   36   71:getfield        #72  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   37   74:aload_0         
		//   38   75:getfield        #41  <Field int mDx>
		//   39   78:aload_0         
		//   40   79:getfield        #43  <Field int mDy>
		//   41   82:aload_0         
		//   42   83:getfield        #45  <Field int mDuration>
		//   43   86:invokevirtual   #80  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int)>
				} else
		//*  44   89:goto            115
				{
					recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration, mInterpolator);
		//   45   92:aload_1         
		//   46   93:getfield        #72  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   47   96:aload_0         
		//   48   97:getfield        #41  <Field int mDx>
		//   49  100:aload_0         
		//   50  101:getfield        #43  <Field int mDy>
		//   51  104:aload_0         
		//   52  105:getfield        #45  <Field int mDuration>
		//   53  108:aload_0         
		//   54  109:getfield        #47  <Field Interpolator mInterpolator>
		//   55  112:invokevirtual   #82  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int, Interpolator)>
				}
				mConsecutiveUpdates = mConsecutiveUpdates + 1;
		//   56  115:aload_0         
		//   57  116:aload_0         
		//   58  117:getfield        #39  <Field int mConsecutiveUpdates>
		//   59  120:iconst_1        
		//   60  121:iadd            
		//   61  122:putfield        #39  <Field int mConsecutiveUpdates>
				if(mConsecutiveUpdates > 10)
		//*  62  125:aload_0         
		//*  63  126:getfield        #39  <Field int mConsecutiveUpdates>
		//*  64  129:bipush          10
		//*  65  131:icmple          142
					Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
		//   66  134:ldc1            #84  <String "RecyclerView">
		//   67  136:ldc1            #86  <String "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary">
		//   68  138:invokestatic    #92  <Method int Log.e(String, String)>
		//   69  141:pop             
				mChanged = false;
		//   70  142:aload_0         
		//   71  143:iconst_0        
		//   72  144:putfield        #37  <Field boolean mChanged>
				return;
		//   73  147:return          
			} else
			{
				mConsecutiveUpdates = 0;
		//   74  148:aload_0         
		//   75  149:iconst_0        
		//   76  150:putfield        #39  <Field int mConsecutiveUpdates>
				return;
		//   77  153:return          
			}
		}

		public void update(int i, int j, int k, Interpolator interpolator)
		{
			mDx = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #41  <Field int mDx>
			mDy = j;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #43  <Field int mDy>
			mDuration = k;
		//    6   10:aload_0         
		//    7   11:iload_3         
		//    8   12:putfield        #45  <Field int mDuration>
			mInterpolator = interpolator;
		//    9   15:aload_0         
		//   10   16:aload           4
		//   11   18:putfield        #47  <Field Interpolator mInterpolator>
			mChanged = true;
		//   12   21:aload_0         
		//   13   22:iconst_1        
		//   14   23:putfield        #37  <Field boolean mChanged>
		//   15   26:return          
		}

		private boolean mChanged;
		private int mConsecutiveUpdates;
		private int mDuration;
		private int mDx;
		private int mDy;
		private Interpolator mInterpolator;
		private int mJumpToPosition;

		public SmoothScroller.Action(int i, int j)
		{
			this(i, j, 0x80000000, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc1            #24  <Int 0x80000000>
		//    4    5:aconst_null     
		//    5    6:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    9:return          
		}

		public SmoothScroller.Action(int i, int j, int k, Interpolator interpolator)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #33  <Method void Object()>
			mJumpToPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #35  <Field int mJumpToPosition>
			mChanged = false;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #37  <Field boolean mChanged>
			mConsecutiveUpdates = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #39  <Field int mConsecutiveUpdates>
			mDx = i;
		//   11   19:aload_0         
		//   12   20:iload_1         
		//   13   21:putfield        #41  <Field int mDx>
			mDy = j;
		//   14   24:aload_0         
		//   15   25:iload_2         
		//   16   26:putfield        #43  <Field int mDy>
			mDuration = k;
		//   17   29:aload_0         
		//   18   30:iload_3         
		//   19   31:putfield        #45  <Field int mDuration>
			mInterpolator = interpolator;
		//   20   34:aload_0         
		//   21   35:aload           4
		//   22   37:putfield        #47  <Field Interpolator mInterpolator>
		//   23   40:return          
		}
	}

	public static interface SmoothScroller.ScrollVectorProvider
	{

		public abstract PointF computeScrollVectorForPosition(int i);
	}

	public static class State
	{

		void assertLayoutStep(int i)
		{
			if((mLayoutStep & i) != 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #41  <Field int mLayoutStep>
		//*   2    4:iload_1         
		//*   3    5:iand            
		//*   4    6:ifeq            10
			{
				return;
		//    5    9:return          
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//    6   10:new             #60  <Class StringBuilder>
		//    7   13:dup             
		//    8   14:invokespecial   #61  <Method void StringBuilder()>
		//    9   17:astore_2        
				stringbuilder.append("Layout state should be one of ");
		//   10   18:aload_2         
		//   11   19:ldc1            #63  <String "Layout state should be one of ">
		//   12   21:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   13   24:pop             
				stringbuilder.append(Integer.toBinaryString(i));
		//   14   25:aload_2         
		//   15   26:iload_1         
		//   16   27:invokestatic    #73  <Method String Integer.toBinaryString(int)>
		//   17   30:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   18   33:pop             
				stringbuilder.append(" but it is ");
		//   19   34:aload_2         
		//   20   35:ldc1            #75  <String " but it is ">
		//   21   37:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   22   40:pop             
				stringbuilder.append(Integer.toBinaryString(mLayoutStep));
		//   23   41:aload_2         
		//   24   42:aload_0         
		//   25   43:getfield        #41  <Field int mLayoutStep>
		//   26   46:invokestatic    #73  <Method String Integer.toBinaryString(int)>
		//   27   49:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   28   52:pop             
				throw new IllegalStateException(stringbuilder.toString());
		//   29   53:new             #77  <Class IllegalStateException>
		//   30   56:dup             
		//   31   57:aload_2         
		//   32   58:invokevirtual   #81  <Method String StringBuilder.toString()>
		//   33   61:invokespecial   #84  <Method void IllegalStateException(String)>
		//   34   64:athrow          
			}
		}

		public int getItemCount()
		{
			if(mInPreLayout)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field boolean mInPreLayout>
		//*   2    4:ifeq            17
				return mPreviousLayoutItemCount - mDeletedInvisibleItemCountSincePreviousLayout;
		//    3    7:aload_0         
		//    4    8:getfield        #37  <Field int mPreviousLayoutItemCount>
		//    5   11:aload_0         
		//    6   12:getfield        #39  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//    7   15:isub            
		//    8   16:ireturn         
			else
				return mItemCount;
		//    9   17:aload_0         
		//   10   18:getfield        #43  <Field int mItemCount>
		//   11   21:ireturn         
		}

		public int getTargetScrollPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #35  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean hasTargetScrollPosition()
		{
			return mTargetPosition != -1;
		//    0    0:aload_0         
		//    1    1:getfield        #35  <Field int mTargetPosition>
		//    2    4:iconst_m1       
		//    3    5:icmpeq          10
		//    4    8:iconst_1        
		//    5    9:ireturn         
		//    6   10:iconst_0        
		//    7   11:ireturn         
		}

		public boolean isPreLayout()
		{
			return mInPreLayout;
		//    0    0:aload_0         
		//    1    1:getfield        #47  <Field boolean mInPreLayout>
		//    2    4:ireturn         
		}

		void prepareForNestedPrefetch(Adapter adapter)
		{
			mLayoutStep = 1;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #41  <Field int mLayoutStep>
			mItemCount = adapter.getItemCount();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #96  <Method int RecyclerView$Adapter.getItemCount()>
		//    6   10:putfield        #43  <Field int mItemCount>
			mInPreLayout = false;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #47  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   10   18:aload_0         
		//   11   19:iconst_0        
		//   12   20:putfield        #49  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   13   23:aload_0         
		//   14   24:iconst_0        
		//   15   25:putfield        #51  <Field boolean mIsMeasuring>
		//   16   28:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder();
		//    0    0:new             #60  <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #61  <Method void StringBuilder()>
		//    3    7:astore_1        
			stringbuilder.append("State{mTargetPosition=");
		//    4    8:aload_1         
		//    5    9:ldc1            #98  <String "State{mTargetPosition=">
		//    6   11:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//    7   14:pop             
			stringbuilder.append(mTargetPosition);
		//    8   15:aload_1         
		//    9   16:aload_0         
		//   10   17:getfield        #35  <Field int mTargetPosition>
		//   11   20:invokevirtual   #101 <Method StringBuilder StringBuilder.append(int)>
		//   12   23:pop             
			stringbuilder.append(", mData=");
		//   13   24:aload_1         
		//   14   25:ldc1            #103 <String ", mData=">
		//   15   27:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   16   30:pop             
			stringbuilder.append(((Object) (mData)));
		//   17   31:aload_1         
		//   18   32:aload_0         
		//   19   33:getfield        #105 <Field SparseArray mData>
		//   20   36:invokevirtual   #108 <Method StringBuilder StringBuilder.append(Object)>
		//   21   39:pop             
			stringbuilder.append(", mItemCount=");
		//   22   40:aload_1         
		//   23   41:ldc1            #110 <String ", mItemCount=">
		//   24   43:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   25   46:pop             
			stringbuilder.append(mItemCount);
		//   26   47:aload_1         
		//   27   48:aload_0         
		//   28   49:getfield        #43  <Field int mItemCount>
		//   29   52:invokevirtual   #101 <Method StringBuilder StringBuilder.append(int)>
		//   30   55:pop             
			stringbuilder.append(", mIsMeasuring=");
		//   31   56:aload_1         
		//   32   57:ldc1            #112 <String ", mIsMeasuring=">
		//   33   59:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   34   62:pop             
			stringbuilder.append(mIsMeasuring);
		//   35   63:aload_1         
		//   36   64:aload_0         
		//   37   65:getfield        #51  <Field boolean mIsMeasuring>
		//   38   68:invokevirtual   #115 <Method StringBuilder StringBuilder.append(boolean)>
		//   39   71:pop             
			stringbuilder.append(", mPreviousLayoutItemCount=");
		//   40   72:aload_1         
		//   41   73:ldc1            #117 <String ", mPreviousLayoutItemCount=">
		//   42   75:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   43   78:pop             
			stringbuilder.append(mPreviousLayoutItemCount);
		//   44   79:aload_1         
		//   45   80:aload_0         
		//   46   81:getfield        #37  <Field int mPreviousLayoutItemCount>
		//   47   84:invokevirtual   #101 <Method StringBuilder StringBuilder.append(int)>
		//   48   87:pop             
			stringbuilder.append(", mDeletedInvisibleItemCountSincePreviousLayout=");
		//   49   88:aload_1         
		//   50   89:ldc1            #119 <String ", mDeletedInvisibleItemCountSincePreviousLayout=">
		//   51   91:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   52   94:pop             
			stringbuilder.append(mDeletedInvisibleItemCountSincePreviousLayout);
		//   53   95:aload_1         
		//   54   96:aload_0         
		//   55   97:getfield        #39  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//   56  100:invokevirtual   #101 <Method StringBuilder StringBuilder.append(int)>
		//   57  103:pop             
			stringbuilder.append(", mStructureChanged=");
		//   58  104:aload_1         
		//   59  105:ldc1            #121 <String ", mStructureChanged=">
		//   60  107:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   61  110:pop             
			stringbuilder.append(mStructureChanged);
		//   62  111:aload_1         
		//   63  112:aload_0         
		//   64  113:getfield        #45  <Field boolean mStructureChanged>
		//   65  116:invokevirtual   #115 <Method StringBuilder StringBuilder.append(boolean)>
		//   66  119:pop             
			stringbuilder.append(", mInPreLayout=");
		//   67  120:aload_1         
		//   68  121:ldc1            #123 <String ", mInPreLayout=">
		//   69  123:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   70  126:pop             
			stringbuilder.append(mInPreLayout);
		//   71  127:aload_1         
		//   72  128:aload_0         
		//   73  129:getfield        #47  <Field boolean mInPreLayout>
		//   74  132:invokevirtual   #115 <Method StringBuilder StringBuilder.append(boolean)>
		//   75  135:pop             
			stringbuilder.append(", mRunSimpleAnimations=");
		//   76  136:aload_1         
		//   77  137:ldc1            #125 <String ", mRunSimpleAnimations=">
		//   78  139:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   79  142:pop             
			stringbuilder.append(mRunSimpleAnimations);
		//   80  143:aload_1         
		//   81  144:aload_0         
		//   82  145:getfield        #53  <Field boolean mRunSimpleAnimations>
		//   83  148:invokevirtual   #115 <Method StringBuilder StringBuilder.append(boolean)>
		//   84  151:pop             
			stringbuilder.append(", mRunPredictiveAnimations=");
		//   85  152:aload_1         
		//   86  153:ldc1            #127 <String ", mRunPredictiveAnimations=">
		//   87  155:invokevirtual   #67  <Method StringBuilder StringBuilder.append(String)>
		//   88  158:pop             
			stringbuilder.append(mRunPredictiveAnimations);
		//   89  159:aload_1         
		//   90  160:aload_0         
		//   91  161:getfield        #55  <Field boolean mRunPredictiveAnimations>
		//   92  164:invokevirtual   #115 <Method StringBuilder StringBuilder.append(boolean)>
		//   93  167:pop             
			stringbuilder.append('}');
		//   94  168:aload_1         
		//   95  169:bipush          125
		//   96  171:invokevirtual   #130 <Method StringBuilder StringBuilder.append(char)>
		//   97  174:pop             
			return stringbuilder.toString();
		//   98  175:aload_1         
		//   99  176:invokevirtual   #81  <Method String StringBuilder.toString()>
		//  100  179:areturn         
		}

		public boolean willRunPredictiveAnimations()
		{
			return mRunPredictiveAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field boolean mRunPredictiveAnimations>
		//    2    4:ireturn         
		}

		private SparseArray mData;
		int mDeletedInvisibleItemCountSincePreviousLayout;
		long mFocusedItemId;
		int mFocusedItemPosition;
		int mFocusedSubChildId;
		boolean mInPreLayout;
		boolean mIsMeasuring;
		int mItemCount;
		int mLayoutStep;
		int mPreviousLayoutItemCount;
		int mRemainingScrollHorizontal;
		int mRemainingScrollVertical;
		boolean mRunPredictiveAnimations;
		boolean mRunSimpleAnimations;
		boolean mStructureChanged;
		int mTargetPosition;
		boolean mTrackOldChangeHolders;

		public State()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #33  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #35  <Field int mTargetPosition>
			mPreviousLayoutItemCount = 0;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #37  <Field int mPreviousLayoutItemCount>
			mDeletedInvisibleItemCountSincePreviousLayout = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #39  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
			mLayoutStep = 1;
		//   11   19:aload_0         
		//   12   20:iconst_1        
		//   13   21:putfield        #41  <Field int mLayoutStep>
			mItemCount = 0;
		//   14   24:aload_0         
		//   15   25:iconst_0        
		//   16   26:putfield        #43  <Field int mItemCount>
			mStructureChanged = false;
		//   17   29:aload_0         
		//   18   30:iconst_0        
		//   19   31:putfield        #45  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   20   34:aload_0         
		//   21   35:iconst_0        
		//   22   36:putfield        #47  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   23   39:aload_0         
		//   24   40:iconst_0        
		//   25   41:putfield        #49  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   26   44:aload_0         
		//   27   45:iconst_0        
		//   28   46:putfield        #51  <Field boolean mIsMeasuring>
			mRunSimpleAnimations = false;
		//   29   49:aload_0         
		//   30   50:iconst_0        
		//   31   51:putfield        #53  <Field boolean mRunSimpleAnimations>
			mRunPredictiveAnimations = false;
		//   32   54:aload_0         
		//   33   55:iconst_0        
		//   34   56:putfield        #55  <Field boolean mRunPredictiveAnimations>
		//   35   59:return          
		}
	}

	public static abstract class ViewCacheExtension
	{

		public abstract View getViewForPositionAndType(Recycler recycler, int i, int j);
	}

	class ViewFlinger
		implements Runnable
	{

		private int computeScrollDuration(int i, int j, int k, int l)
		{
			int i1 = Math.abs(i);
		//    0    0:iload_1         
		//    1    1:invokestatic    #57  <Method int Math.abs(int)>
		//    2    4:istore          9
			int j1 = Math.abs(j);
		//    3    6:iload_2         
		//    4    7:invokestatic    #57  <Method int Math.abs(int)>
		//    5   10:istore          10
			boolean flag;
			if(i1 > j1)
		//*   6   12:iload           9
		//*   7   14:iload           10
		//*   8   16:icmple          25
				flag = true;
		//    9   19:iconst_1        
		//   10   20:istore          8
			else
		//*  11   22:goto            28
				flag = false;
		//   12   25:iconst_0        
		//   13   26:istore          8
			k = (int)Math.sqrt(k * k + l * l);
		//   14   28:iload_3         
		//   15   29:iload_3         
		//   16   30:imul            
		//   17   31:iload           4
		//   18   33:iload           4
		//   19   35:imul            
		//   20   36:iadd            
		//   21   37:i2d             
		//   22   38:invokestatic    #61  <Method double Math.sqrt(double)>
		//   23   41:d2i             
		//   24   42:istore_3        
			j = (int)Math.sqrt(i * i + j * j);
		//   25   43:iload_1         
		//   26   44:iload_1         
		//   27   45:imul            
		//   28   46:iload_2         
		//   29   47:iload_2         
		//   30   48:imul            
		//   31   49:iadd            
		//   32   50:i2d             
		//   33   51:invokestatic    #61  <Method double Math.sqrt(double)>
		//   34   54:d2i             
		//   35   55:istore_2        
			if(flag)
		//*  36   56:iload           8
		//*  37   58:ifeq            72
				i = getWidth();
		//   38   61:aload_0         
		//   39   62:getfield        #25  <Field RecyclerView this$0>
		//   40   65:invokevirtual   #65  <Method int RecyclerView.getWidth()>
		//   41   68:istore_1        
			else
		//*  42   69:goto            80
				i = getHeight();
		//   43   72:aload_0         
		//   44   73:getfield        #25  <Field RecyclerView this$0>
		//   45   76:invokevirtual   #68  <Method int RecyclerView.getHeight()>
		//   46   79:istore_1        
			l = i / 2;
		//   47   80:iload_1         
		//   48   81:iconst_2        
		//   49   82:idiv            
		//   50   83:istore          4
			float f1 = j;
		//   51   85:iload_2         
		//   52   86:i2f             
		//   53   87:fstore          6
			float f = i;
		//   54   89:iload_1         
		//   55   90:i2f             
		//   56   91:fstore          5
			float f2 = Math.min(1.0F, (f1 * 1.0F) / f);
		//   57   93:fconst_1        
		//   58   94:fload           6
		//   59   96:fconst_1        
		//   60   97:fmul            
		//   61   98:fload           5
		//   62  100:fdiv            
		//   63  101:invokestatic    #72  <Method float Math.min(float, float)>
		//   64  104:fstore          7
			f1 = l;
		//   65  106:iload           4
		//   66  108:i2f             
		//   67  109:fstore          6
			f2 = distanceInfluenceForSnapDuration(f2);
		//   68  111:aload_0         
		//   69  112:fload           7
		//   70  114:invokespecial   #76  <Method float distanceInfluenceForSnapDuration(float)>
		//   71  117:fstore          7
			if(k > 0)
		//*  72  119:iload_3         
		//*  73  120:ifle            149
			{
				i = Math.round(Math.abs((f1 + f2 * f1) / (float)k) * 1000F) * 4;
		//   74  123:fload           6
		//   75  125:fload           7
		//   76  127:fload           6
		//   77  129:fmul            
		//   78  130:fadd            
		//   79  131:iload_3         
		//   80  132:i2f             
		//   81  133:fdiv            
		//   82  134:invokestatic    #78  <Method float Math.abs(float)>
		//   83  137:ldc1            #79  <Float 1000F>
		//   84  139:fmul            
		//   85  140:invokestatic    #83  <Method int Math.round(float)>
		//   86  143:iconst_4        
		//   87  144:imul            
		//   88  145:istore_1        
			} else
		//*  89  146:goto            175
			{
				if(flag)
		//*  90  149:iload           8
		//*  91  151:ifeq            160
					i = i1;
		//   92  154:iload           9
		//   93  156:istore_1        
				else
		//*  94  157:goto            163
					i = j1;
		//   95  160:iload           10
		//   96  162:istore_1        
				i = (int)(((float)i / f + 1.0F) * 300F);
		//   97  163:iload_1         
		//   98  164:i2f             
		//   99  165:fload           5
		//  100  167:fdiv            
		//  101  168:fconst_1        
		//  102  169:fadd            
		//  103  170:ldc1            #84  <Float 300F>
		//  104  172:fmul            
		//  105  173:f2i             
		//  106  174:istore_1        
			}
			return Math.min(i, 2000);
		//  107  175:iload_1         
		//  108  176:sipush          2000
		//  109  179:invokestatic    #87  <Method int Math.min(int, int)>
		//  110  182:ireturn         
		}

		private void disableRunOnAnimationRequests()
		{
			mReSchedulePostAnimationCallback = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mEatRunOnAnimationRequest = true;
		//    3    5:aload_0         
		//    4    6:iconst_1        
		//    5    7:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//    6   10:return          
		}

		private float distanceInfluenceForSnapDuration(float f)
		{
			return (float)Math.sin((f - 0.5F) * 0.4712389F);
		//    0    0:fload_1         
		//    1    1:ldc1            #89  <Float 0.5F>
		//    2    3:fsub            
		//    3    4:ldc1            #90  <Float 0.4712389F>
		//    4    6:fmul            
		//    5    7:f2d             
		//    6    8:invokestatic    #93  <Method double Math.sin(double)>
		//    7   11:d2f             
		//    8   12:freturn         
		}

		private void enableRunOnAnimationRequests()
		{
			mEatRunOnAnimationRequest = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			if(mReSchedulePostAnimationCallback)
		//*   3    5:aload_0         
		//*   4    6:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//*   5    9:ifeq            16
				postOnAnimation();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #97  <Method void postOnAnimation()>
		//    8   16:return          
		}

		public void fling(int i, int j)
		{
			setScrollState(2);
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:iconst_2        
		//    3    5:invokevirtual   #103 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #105 <Field int mLastFlingY>
			mLastFlingX = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #107 <Field int mLastFlingX>
			mScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
		//   10   18:aload_0         
		//   11   19:getfield        #48  <Field OverScroller mScroller>
		//   12   22:iconst_0        
		//   13   23:iconst_0        
		//   14   24:iload_1         
		//   15   25:iload_2         
		//   16   26:ldc1            #108 <Int 0x80000000>
		//   17   28:ldc1            #109 <Int 0x7fffffff>
		//   18   30:ldc1            #108 <Int 0x80000000>
		//   19   32:ldc1            #109 <Int 0x7fffffff>
		//   20   34:invokevirtual   #112 <Method void OverScroller.fling(int, int, int, int, int, int, int, int)>
			postOnAnimation();
		//   21   37:aload_0         
		//   22   38:invokevirtual   #97  <Method void postOnAnimation()>
		//   23   41:return          
		}

		void postOnAnimation()
		{
			if(mEatRunOnAnimationRequest)
		//*   0    0:aload_0         
		//*   1    1:getfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//*   2    4:ifeq            13
			{
				mReSchedulePostAnimationCallback = true;
		//    3    7:aload_0         
		//    4    8:iconst_1        
		//    5    9:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
				return;
		//    6   12:return          
			} else
			{
				removeCallbacks(((Runnable) (this)));
		//    7   13:aload_0         
		//    8   14:getfield        #25  <Field RecyclerView this$0>
		//    9   17:aload_0         
		//   10   18:invokevirtual   #116 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//   11   21:pop             
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), ((Runnable) (this)));
		//   12   22:aload_0         
		//   13   23:getfield        #25  <Field RecyclerView this$0>
		//   14   26:aload_0         
		//   15   27:invokestatic    #121 <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   30:return          
			}
		}

		public void run()
		{
			if(mLayout == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #25  <Field RecyclerView this$0>
		//*   2    4:getfield        #126 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnonnull       15
			{
				stop();
		//    4   10:aload_0         
		//    5   11:invokevirtual   #129 <Method void stop()>
				return;
		//    6   14:return          
			}
			disableRunOnAnimationRequests();
		//    7   15:aload_0         
		//    8   16:invokespecial   #131 <Method void disableRunOnAnimationRequests()>
			consumePendingUpdateOperations();
		//    9   19:aload_0         
		//   10   20:getfield        #25  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #134 <Method void RecyclerView.consumePendingUpdateOperations()>
			OverScroller overscroller = mScroller;
		//   12   26:aload_0         
		//   13   27:getfield        #48  <Field OverScroller mScroller>
		//   14   30:astore          13
			SmoothScroller smoothscroller = mLayout.mSmoothScroller;
		//   15   32:aload_0         
		//   16   33:getfield        #25  <Field RecyclerView this$0>
		//   17   36:getfield        #126 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   18   39:getfield        #140 <Field RecyclerView$SmoothScroller RecyclerView$LayoutManager.mSmoothScroller>
		//   19   42:astore          14
			if(overscroller.computeScrollOffset())
		//*  20   44:aload           13
		//*  21   46:invokevirtual   #144 <Method boolean OverScroller.computeScrollOffset()>
		//*  22   49:ifeq            822
			{
				int ai[] = mScrollConsumed;
		//   23   52:aload_0         
		//   24   53:getfield        #25  <Field RecyclerView this$0>
		//   25   56:getfield        #148 <Field int[] RecyclerView.mScrollConsumed>
		//   26   59:astore          15
				int i3 = overscroller.getCurrX();
		//   27   61:aload           13
		//   28   63:invokevirtual   #151 <Method int OverScroller.getCurrX()>
		//   29   66:istore          11
				int j3 = overscroller.getCurrY();
		//   30   68:aload           13
		//   31   70:invokevirtual   #154 <Method int OverScroller.getCurrY()>
		//   32   73:istore          12
				int j = i3 - mLastFlingX;
		//   33   75:iload           11
		//   34   77:aload_0         
		//   35   78:getfield        #107 <Field int mLastFlingX>
		//   36   81:isub            
		//   37   82:istore_2        
				int i = j3 - mLastFlingY;
		//   38   83:iload           12
		//   39   85:aload_0         
		//   40   86:getfield        #105 <Field int mLastFlingY>
		//   41   89:isub            
		//   42   90:istore_1        
				mLastFlingX = i3;
		//   43   91:aload_0         
		//   44   92:iload           11
		//   45   94:putfield        #107 <Field int mLastFlingX>
				mLastFlingY = j3;
		//   46   97:aload_0         
		//   47   98:iload           12
		//   48  100:putfield        #105 <Field int mLastFlingY>
				int j1 = j;
		//   49  103:iload_2         
		//   50  104:istore          4
				int i1 = i;
		//   51  106:iload_1         
		//   52  107:istore_3        
				if(dispatchNestedPreScroll(j, i, ai, ((int []) (null)), 1))
		//*  53  108:aload_0         
		//*  54  109:getfield        #25  <Field RecyclerView this$0>
		//*  55  112:iload_2         
		//*  56  113:iload_1         
		//*  57  114:aload           15
		//*  58  116:aconst_null     
		//*  59  117:iconst_1        
		//*  60  118:invokevirtual   #158 <Method boolean RecyclerView.dispatchNestedPreScroll(int, int, int[], int[], int)>
		//*  61  121:ifeq            139
				{
					j1 = j - ai[0];
		//   62  124:iload_2         
		//   63  125:aload           15
		//   64  127:iconst_0        
		//   65  128:iaload          
		//   66  129:isub            
		//   67  130:istore          4
					i1 = i - ai[1];
		//   68  132:iload_1         
		//   69  133:aload           15
		//   70  135:iconst_1        
		//   71  136:iaload          
		//   72  137:isub            
		//   73  138:istore_3        
				}
				int k1;
				int l1;
				int i2;
				int j2;
				if(mAdapter != null)
		//*  74  139:aload_0         
		//*  75  140:getfield        #25  <Field RecyclerView this$0>
		//*  76  143:getfield        #162 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  77  146:ifnull          382
				{
					RecyclerView recyclerview = RecyclerView.this;
		//   78  149:aload_0         
		//   79  150:getfield        #25  <Field RecyclerView this$0>
		//   80  153:astore          15
					recyclerview.scrollStep(j1, i1, recyclerview.mScrollStepConsumed);
		//   81  155:aload           15
		//   82  157:iload           4
		//   83  159:iload_3         
		//   84  160:aload           15
		//   85  162:getfield        #165 <Field int[] RecyclerView.mScrollStepConsumed>
		//   86  165:invokevirtual   #169 <Method void RecyclerView.scrollStep(int, int, int[])>
					i = mScrollStepConsumed[0];
		//   87  168:aload_0         
		//   88  169:getfield        #25  <Field RecyclerView this$0>
		//   89  172:getfield        #165 <Field int[] RecyclerView.mScrollStepConsumed>
		//   90  175:iconst_0        
		//   91  176:iaload          
		//   92  177:istore_1        
					int k = mScrollStepConsumed[1];
		//   93  178:aload_0         
		//   94  179:getfield        #25  <Field RecyclerView this$0>
		//   95  182:getfield        #165 <Field int[] RecyclerView.mScrollStepConsumed>
		//   96  185:iconst_1        
		//   97  186:iaload          
		//   98  187:istore_2        
					int k2 = j1 - i;
		//   99  188:iload           4
		//  100  190:iload_1         
		//  101  191:isub            
		//  102  192:istore          9
					int l2 = i1 - k;
		//  103  194:iload_3         
		//  104  195:iload_2         
		//  105  196:isub            
		//  106  197:istore          10
					k1 = i;
		//  107  199:iload_1         
		//  108  200:istore          5
					j2 = k;
		//  109  202:iload_2         
		//  110  203:istore          8
					i2 = k2;
		//  111  205:iload           9
		//  112  207:istore          7
					l1 = l2;
		//  113  209:iload           10
		//  114  211:istore          6
					if(smoothscroller != null)
		//* 115  213:aload           14
		//* 116  215:ifnull          394
					{
						k1 = i;
		//  117  218:iload_1         
		//  118  219:istore          5
						j2 = k;
		//  119  221:iload_2         
		//  120  222:istore          8
						i2 = k2;
		//  121  224:iload           9
		//  122  226:istore          7
						l1 = l2;
		//  123  228:iload           10
		//  124  230:istore          6
						if(!smoothscroller.isPendingInitialRun())
		//* 125  232:aload           14
		//* 126  234:invokevirtual   #174 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 127  237:ifne            394
						{
							k1 = i;
		//  128  240:iload_1         
		//  129  241:istore          5
							j2 = k;
		//  130  243:iload_2         
		//  131  244:istore          8
							i2 = k2;
		//  132  246:iload           9
		//  133  248:istore          7
							l1 = l2;
		//  134  250:iload           10
		//  135  252:istore          6
							if(smoothscroller.isRunning())
		//* 136  254:aload           14
		//* 137  256:invokevirtual   #177 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 138  259:ifeq            394
							{
								k1 = mState.getItemCount();
		//  139  262:aload_0         
		//  140  263:getfield        #25  <Field RecyclerView this$0>
		//  141  266:getfield        #181 <Field RecyclerView$State RecyclerView.mState>
		//  142  269:invokevirtual   #186 <Method int RecyclerView$State.getItemCount()>
		//  143  272:istore          5
								if(k1 == 0)
		//* 144  274:iload           5
		//* 145  276:ifne            301
								{
									smoothscroller.stop();
		//  146  279:aload           14
		//  147  281:invokevirtual   #187 <Method void RecyclerView$SmoothScroller.stop()>
									k1 = i;
		//  148  284:iload_1         
		//  149  285:istore          5
									j2 = k;
		//  150  287:iload_2         
		//  151  288:istore          8
									i2 = k2;
		//  152  290:iload           9
		//  153  292:istore          7
									l1 = l2;
		//  154  294:iload           10
		//  155  296:istore          6
								} else
		//* 156  298:goto            394
								if(smoothscroller.getTargetPosition() >= k1)
		//* 157  301:aload           14
		//* 158  303:invokevirtual   #190 <Method int RecyclerView$SmoothScroller.getTargetPosition()>
		//* 159  306:iload           5
		//* 160  308:icmplt          351
								{
									smoothscroller.setTargetPosition(k1 - 1);
		//  161  311:aload           14
		//  162  313:iload           5
		//  163  315:iconst_1        
		//  164  316:isub            
		//  165  317:invokevirtual   #193 <Method void RecyclerView$SmoothScroller.setTargetPosition(int)>
									smoothscroller.onAnimation(j1 - k2, i1 - l2);
		//  166  320:aload           14
		//  167  322:iload           4
		//  168  324:iload           9
		//  169  326:isub            
		//  170  327:iload_3         
		//  171  328:iload           10
		//  172  330:isub            
		//  173  331:invokevirtual   #196 <Method void RecyclerView$SmoothScroller.onAnimation(int, int)>
									k1 = i;
		//  174  334:iload_1         
		//  175  335:istore          5
									j2 = k;
		//  176  337:iload_2         
		//  177  338:istore          8
									i2 = k2;
		//  178  340:iload           9
		//  179  342:istore          7
									l1 = l2;
		//  180  344:iload           10
		//  181  346:istore          6
								} else
		//* 182  348:goto            394
								{
									smoothscroller.onAnimation(j1 - k2, i1 - l2);
		//  183  351:aload           14
		//  184  353:iload           4
		//  185  355:iload           9
		//  186  357:isub            
		//  187  358:iload_3         
		//  188  359:iload           10
		//  189  361:isub            
		//  190  362:invokevirtual   #196 <Method void RecyclerView$SmoothScroller.onAnimation(int, int)>
									k1 = i;
		//  191  365:iload_1         
		//  192  366:istore          5
									j2 = k;
		//  193  368:iload_2         
		//  194  369:istore          8
									i2 = k2;
		//  195  371:iload           9
		//  196  373:istore          7
									l1 = l2;
		//  197  375:iload           10
		//  198  377:istore          6
								}
							}
						}
					}
				} else
		//* 199  379:goto            394
				{
					k1 = 0;
		//  200  382:iconst_0        
		//  201  383:istore          5
					j2 = 0;
		//  202  385:iconst_0        
		//  203  386:istore          8
					i2 = 0;
		//  204  388:iconst_0        
		//  205  389:istore          7
					l1 = 0;
		//  206  391:iconst_0        
		//  207  392:istore          6
				}
				if(!mItemDecorations.isEmpty())
		//* 208  394:aload_0         
		//* 209  395:getfield        #25  <Field RecyclerView this$0>
		//* 210  398:getfield        #200 <Field ArrayList RecyclerView.mItemDecorations>
		//* 211  401:invokevirtual   #205 <Method boolean ArrayList.isEmpty()>
		//* 212  404:ifne            414
					invalidate();
		//  213  407:aload_0         
		//  214  408:getfield        #25  <Field RecyclerView this$0>
		//  215  411:invokevirtual   #208 <Method void RecyclerView.invalidate()>
				if(getOverScrollMode() != 2)
		//* 216  414:aload_0         
		//* 217  415:getfield        #25  <Field RecyclerView this$0>
		//* 218  418:invokevirtual   #211 <Method int RecyclerView.getOverScrollMode()>
		//* 219  421:iconst_2        
		//* 220  422:icmpeq          435
					considerReleasingGlowsOnScroll(j1, i1);
		//  221  425:aload_0         
		//  222  426:getfield        #25  <Field RecyclerView this$0>
		//  223  429:iload           4
		//  224  431:iload_3         
		//  225  432:invokevirtual   #214 <Method void RecyclerView.considerReleasingGlowsOnScroll(int, int)>
				if(!dispatchNestedScroll(k1, j2, i2, l1, ((int []) (null)), 1) && (i2 != 0 || l1 != 0))
		//* 226  435:aload_0         
		//* 227  436:getfield        #25  <Field RecyclerView this$0>
		//* 228  439:iload           5
		//* 229  441:iload           8
		//* 230  443:iload           7
		//* 231  445:iload           6
		//* 232  447:aconst_null     
		//* 233  448:iconst_1        
		//* 234  449:invokevirtual   #218 <Method boolean RecyclerView.dispatchNestedScroll(int, int, int, int, int[], int)>
		//* 235  452:ifne            603
		//* 236  455:iload           7
		//* 237  457:ifne            465
		//* 238  460:iload           6
		//* 239  462:ifeq            603
				{
					int l = (int)overscroller.getCurrVelocity();
		//  240  465:aload           13
		//  241  467:invokevirtual   #222 <Method float OverScroller.getCurrVelocity()>
		//  242  470:f2i             
		//  243  471:istore_2        
					if(i2 != i3)
		//* 244  472:iload           7
		//* 245  474:iload           11
		//* 246  476:icmpeq          505
					{
						if(i2 < 0)
		//* 247  479:iload           7
		//* 248  481:ifge            490
							i = -l;
		//  249  484:iload_2         
		//  250  485:ineg            
		//  251  486:istore_1        
						else
		//* 252  487:goto            507
						if(i2 > 0)
		//* 253  490:iload           7
		//* 254  492:ifle            500
							i = l;
		//  255  495:iload_2         
		//  256  496:istore_1        
						else
		//* 257  497:goto            507
							i = 0;
		//  258  500:iconst_0        
		//  259  501:istore_1        
					} else
		//* 260  502:goto            507
					{
						i = 0;
		//  261  505:iconst_0        
		//  262  506:istore_1        
					}
					if(l1 != j3)
		//* 263  507:iload           6
		//* 264  509:iload           12
		//* 265  511:icmpeq          538
					{
						if(l1 < 0)
		//* 266  514:iload           6
		//* 267  516:ifge            525
							l = -l;
		//  268  519:iload_2         
		//  269  520:ineg            
		//  270  521:istore_2        
						else
		//* 271  522:goto            540
						if(l1 <= 0)
		//* 272  525:iload           6
		//* 273  527:ifle            533
		//* 274  530:goto            540
							l = 0;
		//  275  533:iconst_0        
		//  276  534:istore_2        
					} else
		//* 277  535:goto            540
					{
						l = 0;
		//  278  538:iconst_0        
		//  279  539:istore_2        
					}
					if(getOverScrollMode() != 2)
		//* 280  540:aload_0         
		//* 281  541:getfield        #25  <Field RecyclerView this$0>
		//* 282  544:invokevirtual   #211 <Method int RecyclerView.getOverScrollMode()>
		//* 283  547:iconst_2        
		//* 284  548:icmpeq          560
						absorbGlows(i, l);
		//  285  551:aload_0         
		//  286  552:getfield        #25  <Field RecyclerView this$0>
		//  287  555:iload_1         
		//  288  556:iload_2         
		//  289  557:invokevirtual   #225 <Method void RecyclerView.absorbGlows(int, int)>
					if((i != 0 || i2 == i3 || overscroller.getFinalX() == 0) && (l != 0 || l1 == j3 || overscroller.getFinalY() == 0))
		//* 290  560:iload_1         
		//* 291  561:ifne            579
		//* 292  564:iload           7
		//* 293  566:iload           11
		//* 294  568:icmpeq          579
		//* 295  571:aload           13
		//* 296  573:invokevirtual   #228 <Method int OverScroller.getFinalX()>
		//* 297  576:ifne            603
		//* 298  579:iload_2         
		//* 299  580:ifne            598
		//* 300  583:iload           6
		//* 301  585:iload           12
		//* 302  587:icmpeq          598
		//* 303  590:aload           13
		//* 304  592:invokevirtual   #231 <Method int OverScroller.getFinalY()>
		//* 305  595:ifne            603
						overscroller.abortAnimation();
		//  306  598:aload           13
		//  307  600:invokevirtual   #234 <Method void OverScroller.abortAnimation()>
				}
				if(k1 != 0 || j2 != 0)
		//* 308  603:iload           5
		//* 309  605:ifne            613
		//* 310  608:iload           8
		//* 311  610:ifeq            624
					dispatchOnScrolled(k1, j2);
		//  312  613:aload_0         
		//  313  614:getfield        #25  <Field RecyclerView this$0>
		//  314  617:iload           5
		//  315  619:iload           8
		//  316  621:invokevirtual   #237 <Method void RecyclerView.dispatchOnScrolled(int, int)>
				if(!awakenScrollBars())
		//* 317  624:aload_0         
		//* 318  625:getfield        #25  <Field RecyclerView this$0>
		//* 319  628:invokestatic    #241 <Method boolean RecyclerView.access$200(RecyclerView)>
		//* 320  631:ifne            641
					invalidate();
		//  321  634:aload_0         
		//  322  635:getfield        #25  <Field RecyclerView this$0>
		//  323  638:invokevirtual   #208 <Method void RecyclerView.invalidate()>
				if(i1 != 0 && mLayout.canScrollVertically() && j2 == i1)
		//* 324  641:iload_3         
		//* 325  642:ifeq            669
		//* 326  645:aload_0         
		//* 327  646:getfield        #25  <Field RecyclerView this$0>
		//* 328  649:getfield        #126 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 329  652:invokevirtual   #244 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
		//* 330  655:ifeq            669
		//* 331  658:iload           8
		//* 332  660:iload_3         
		//* 333  661:icmpne          669
					i = 1;
		//  334  664:iconst_1        
		//  335  665:istore_1        
				else
		//* 336  666:goto            671
					i = 0;
		//  337  669:iconst_0        
		//  338  670:istore_1        
				boolean flag1;
				if(j1 != 0 && mLayout.canScrollHorizontally() && k1 == j1)
		//* 339  671:iload           4
		//* 340  673:ifeq            701
		//* 341  676:aload_0         
		//* 342  677:getfield        #25  <Field RecyclerView this$0>
		//* 343  680:getfield        #126 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 344  683:invokevirtual   #247 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
		//* 345  686:ifeq            701
		//* 346  689:iload           5
		//* 347  691:iload           4
		//* 348  693:icmpne          701
					flag1 = true;
		//  349  696:iconst_1        
		//  350  697:istore_2        
				else
		//* 351  698:goto            703
					flag1 = false;
		//  352  701:iconst_0        
		//  353  702:istore_2        
				boolean flag;
				if((j1 != 0 || i1 != 0) && !flag1 && !i)
		//* 354  703:iload           4
		//* 355  705:ifne            712
		//* 356  708:iload_3         
		//* 357  709:ifeq            728
		//* 358  712:iload_2         
		//* 359  713:ifne            728
		//* 360  716:iload_1         
		//* 361  717:ifeq            723
		//* 362  720:goto            728
					flag = false;
		//  363  723:iconst_0        
		//  364  724:istore_1        
				else
		//* 365  725:goto            730
					flag = true;
		//  366  728:iconst_1        
		//  367  729:istore_1        
				if(!overscroller.isFinished() && (flag || hasNestedScrollingParent(1)))
		//* 368  730:aload           13
		//* 369  732:invokevirtual   #250 <Method boolean OverScroller.isFinished()>
		//* 370  735:ifne            790
		//* 371  738:iload_1         
		//* 372  739:ifne            756
		//* 373  742:aload_0         
		//* 374  743:getfield        #25  <Field RecyclerView this$0>
		//* 375  746:iconst_1        
		//* 376  747:invokevirtual   #254 <Method boolean RecyclerView.hasNestedScrollingParent(int)>
		//* 377  750:ifne            756
		//* 378  753:goto            790
				{
					postOnAnimation();
		//  379  756:aload_0         
		//  380  757:invokevirtual   #97  <Method void postOnAnimation()>
					if(mGapWorker != null)
		//* 381  760:aload_0         
		//* 382  761:getfield        #25  <Field RecyclerView this$0>
		//* 383  764:getfield        #258 <Field GapWorker RecyclerView.mGapWorker>
		//* 384  767:ifnull          822
						mGapWorker.postFromTraversal(RecyclerView.this, j1, i1);
		//  385  770:aload_0         
		//  386  771:getfield        #25  <Field RecyclerView this$0>
		//  387  774:getfield        #258 <Field GapWorker RecyclerView.mGapWorker>
		//  388  777:aload_0         
		//  389  778:getfield        #25  <Field RecyclerView this$0>
		//  390  781:iload           4
		//  391  783:iload_3         
		//  392  784:invokevirtual   #264 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
				} else
		//* 393  787:goto            822
				{
					setScrollState(0);
		//  394  790:aload_0         
		//  395  791:getfield        #25  <Field RecyclerView this$0>
		//  396  794:iconst_0        
		//  397  795:invokevirtual   #103 <Method void RecyclerView.setScrollState(int)>
					if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 398  798:getstatic       #267 <Field boolean RecyclerView.ALLOW_THREAD_GAP_WORK>
		//* 399  801:ifeq            814
						mPrefetchRegistry.clearPrefetchPositions();
		//  400  804:aload_0         
		//  401  805:getfield        #25  <Field RecyclerView this$0>
		//  402  808:getfield        #271 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//  403  811:invokevirtual   #276 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
					stopNestedScroll(1);
		//  404  814:aload_0         
		//  405  815:getfield        #25  <Field RecyclerView this$0>
		//  406  818:iconst_1        
		//  407  819:invokevirtual   #279 <Method void RecyclerView.stopNestedScroll(int)>
				}
			}
			if(smoothscroller != null)
		//* 408  822:aload           14
		//* 409  824:ifnull          854
			{
				if(smoothscroller.isPendingInitialRun())
		//* 410  827:aload           14
		//* 411  829:invokevirtual   #174 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 412  832:ifeq            842
					smoothscroller.onAnimation(0, 0);
		//  413  835:aload           14
		//  414  837:iconst_0        
		//  415  838:iconst_0        
		//  416  839:invokevirtual   #196 <Method void RecyclerView$SmoothScroller.onAnimation(int, int)>
				if(!mReSchedulePostAnimationCallback)
		//* 417  842:aload_0         
		//* 418  843:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//* 419  846:ifne            854
					smoothscroller.stop();
		//  420  849:aload           14
		//  421  851:invokevirtual   #187 <Method void RecyclerView$SmoothScroller.stop()>
			}
			enableRunOnAnimationRequests();
		//  422  854:aload_0         
		//  423  855:invokespecial   #281 <Method void enableRunOnAnimationRequests()>
		//  424  858:return          
		}

		public void smoothScrollBy(int i, int j)
		{
			smoothScrollBy(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #285 <Method void smoothScrollBy(int, int, int, int)>
		//    6    8:return          
		}

		public void smoothScrollBy(int i, int j, int k)
		{
			smoothScrollBy(i, j, k, RecyclerView.sQuinticInterpolator);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    5    7:invokevirtual   #289 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//    6   10:return          
		}

		public void smoothScrollBy(int i, int j, int k, int l)
		{
			smoothScrollBy(i, j, computeScrollDuration(i, j, k, l));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:iload_2         
		//    6    6:iload_3         
		//    7    7:iload           4
		//    8    9:invokespecial   #291 <Method int computeScrollDuration(int, int, int, int)>
		//    9   12:invokevirtual   #293 <Method void smoothScrollBy(int, int, int)>
		//   10   15:return          
		}

		public void smoothScrollBy(int i, int j, int k, Interpolator interpolator)
		{
			if(mInterpolator != interpolator)
		//*   0    0:aload_0         
		//*   1    1:getfield        #33  <Field Interpolator mInterpolator>
		//*   2    4:aload           4
		//*   3    6:if_acmpeq       35
			{
				mInterpolator = interpolator;
		//    4    9:aload_0         
		//    5   10:aload           4
		//    6   12:putfield        #33  <Field Interpolator mInterpolator>
				mScroller = new OverScroller(getContext(), interpolator);
		//    7   15:aload_0         
		//    8   16:new             #39  <Class OverScroller>
		//    9   19:dup             
		//   10   20:aload_0         
		//   11   21:getfield        #25  <Field RecyclerView this$0>
		//   12   24:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   13   27:aload           4
		//   14   29:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   15   32:putfield        #48  <Field OverScroller mScroller>
			}
			setScrollState(2);
		//   16   35:aload_0         
		//   17   36:getfield        #25  <Field RecyclerView this$0>
		//   18   39:iconst_2        
		//   19   40:invokevirtual   #103 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//   20   43:aload_0         
		//   21   44:iconst_0        
		//   22   45:putfield        #105 <Field int mLastFlingY>
			mLastFlingX = 0;
		//   23   48:aload_0         
		//   24   49:iconst_0        
		//   25   50:putfield        #107 <Field int mLastFlingX>
			mScroller.startScroll(0, 0, i, j, k);
		//   26   53:aload_0         
		//   27   54:getfield        #48  <Field OverScroller mScroller>
		//   28   57:iconst_0        
		//   29   58:iconst_0        
		//   30   59:iload_1         
		//   31   60:iload_2         
		//   32   61:iload_3         
		//   33   62:invokevirtual   #297 <Method void OverScroller.startScroll(int, int, int, int, int)>
			if(android.os.Build.VERSION.SDK_INT < 23)
		//*  34   65:getstatic       #302 <Field int android.os.Build$VERSION.SDK_INT>
		//*  35   68:bipush          23
		//*  36   70:icmpge          81
				mScroller.computeScrollOffset();
		//   37   73:aload_0         
		//   38   74:getfield        #48  <Field OverScroller mScroller>
		//   39   77:invokevirtual   #144 <Method boolean OverScroller.computeScrollOffset()>
		//   40   80:pop             
			postOnAnimation();
		//   41   81:aload_0         
		//   42   82:invokevirtual   #97  <Method void postOnAnimation()>
		//   43   85:return          
		}

		public void smoothScrollBy(int i, int j, Interpolator interpolator)
		{
			int k = computeScrollDuration(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokespecial   #291 <Method int computeScrollDuration(int, int, int, int)>
		//    6    8:istore          4
			Interpolator interpolator1 = interpolator;
		//    7   10:aload_3         
		//    8   11:astore          5
			if(interpolator == null)
		//*   9   13:aload_3         
		//*  10   14:ifnonnull       22
				interpolator1 = RecyclerView.sQuinticInterpolator;
		//   11   17:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   12   20:astore          5
			smoothScrollBy(i, j, k, interpolator1);
		//   13   22:aload_0         
		//   14   23:iload_1         
		//   15   24:iload_2         
		//   16   25:iload           4
		//   17   27:aload           5
		//   18   29:invokevirtual   #289 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//   19   32:return          
		}

		public void stop()
		{
			removeCallbacks(((Runnable) (this)));
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #116 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    4    8:pop             
			mScroller.abortAnimation();
		//    5    9:aload_0         
		//    6   10:getfield        #48  <Field OverScroller mScroller>
		//    7   13:invokevirtual   #234 <Method void OverScroller.abortAnimation()>
		//    8   16:return          
		}

		private boolean mEatRunOnAnimationRequest;
		Interpolator mInterpolator;
		private int mLastFlingX;
		private int mLastFlingY;
		private boolean mReSchedulePostAnimationCallback;
		OverScroller mScroller;
		final RecyclerView this$0;

		ViewFlinger()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #25  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #28  <Method void Object()>
			mInterpolator = RecyclerView.sQuinticInterpolator;
		//    5    9:aload_0         
		//    6   10:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    7   13:putfield        #33  <Field Interpolator mInterpolator>
			mEatRunOnAnimationRequest = false;
		//    8   16:aload_0         
		//    9   17:iconst_0        
		//   10   18:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			mReSchedulePostAnimationCallback = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mScroller = new OverScroller(getContext(), RecyclerView.sQuinticInterpolator);
		//   14   26:aload_0         
		//   15   27:new             #39  <Class OverScroller>
		//   16   30:dup             
		//   17   31:aload_1         
		//   18   32:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   19   35:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   20   38:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   21   41:putfield        #48  <Field OverScroller mScroller>
		//   22   44:return          
		}
	}

	public static abstract class ViewHolder
	{

		private void createPayloadsIfNeeded()
		{
			if(mPayloads == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #102 <Field List mPayloads>
		//*   2    4:ifnonnull       29
			{
				mPayloads = ((List) (new ArrayList()));
		//    3    7:aload_0         
		//    4    8:new             #127 <Class ArrayList>
		//    5   11:dup             
		//    6   12:invokespecial   #128 <Method void ArrayList()>
		//    7   15:putfield        #102 <Field List mPayloads>
				mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
		//    8   18:aload_0         
		//    9   19:aload_0         
		//   10   20:getfield        #102 <Field List mPayloads>
		//   11   23:invokestatic    #132 <Method List Collections.unmodifiableList(List)>
		//   12   26:putfield        #104 <Field List mUnmodifiedPayloads>
			}
		//   13   29:return          
		}

		void addChangePayload(Object obj)
		{
			if(obj == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       12
			{
				addFlags(1024);
		//    2    4:aload_0         
		//    3    5:sipush          1024
		//    4    8:invokevirtual   #138 <Method void addFlags(int)>
				return;
		//    5   11:return          
			}
			if((0x400 & mFlags) == 0)
		//*   6   12:sipush          1024
		//*   7   15:aload_0         
		//*   8   16:getfield        #140 <Field int mFlags>
		//*   9   19:iand            
		//*  10   20:ifne            38
			{
				createPayloadsIfNeeded();
		//   11   23:aload_0         
		//   12   24:invokespecial   #142 <Method void createPayloadsIfNeeded()>
				mPayloads.add(obj);
		//   13   27:aload_0         
		//   14   28:getfield        #102 <Field List mPayloads>
		//   15   31:aload_1         
		//   16   32:invokeinterface #148 <Method boolean List.add(Object)>
		//   17   37:pop             
			}
		//   18   38:return          
		}

		void addFlags(int i)
		{
			mFlags = i | mFlags;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:getfield        #140 <Field int mFlags>
		//    4    6:ior             
		//    5    7:putfield        #140 <Field int mFlags>
		//    6   10:return          
		}

		void clearOldPosition()
		{
			mOldPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #88  <Field int mOldPosition>
			mPreLayoutPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #96  <Field int mPreLayoutPosition>
		//    6   10:return          
		}

		void clearPayload()
		{
			List list = mPayloads;
		//    0    0:aload_0         
		//    1    1:getfield        #102 <Field List mPayloads>
		//    2    4:astore_1        
			if(list != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          15
				list.clear();
		//    5    9:aload_1         
		//    6   10:invokeinterface #153 <Method void List.clear()>
			mFlags = mFlags & 0xfffffbff;
		//    7   15:aload_0         
		//    8   16:aload_0         
		//    9   17:getfield        #140 <Field int mFlags>
		//   10   20:sipush          -1025
		//   11   23:iand            
		//   12   24:putfield        #140 <Field int mFlags>
		//   13   27:return          
		}

		void clearReturnedFromScrapFlag()
		{
			mFlags = mFlags & 0xffffffdf;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #140 <Field int mFlags>
		//    3    5:bipush          -33
		//    4    7:iand            
		//    5    8:putfield        #140 <Field int mFlags>
		//    6   11:return          
		}

		void clearTmpDetachFlag()
		{
			mFlags = mFlags & 0xfffffeff;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #140 <Field int mFlags>
		//    3    5:sipush          -257
		//    4    8:iand            
		//    5    9:putfield        #140 <Field int mFlags>
		//    6   12:return          
		}

		boolean doesTransientStatePreventRecycling()
		{
			return (mFlags & 0x10) == 0 && ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #116 <Field View itemView>
		//    7   14:invokestatic    #163 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifeq            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		void flagRemovedAndOffsetPosition(int i, int j, boolean flag)
		{
			addFlags(8);
		//    0    0:aload_0         
		//    1    1:bipush          8
		//    2    3:invokevirtual   #138 <Method void addFlags(int)>
			offsetPosition(j, flag);
		//    3    6:aload_0         
		//    4    7:iload_2         
		//    5    8:iload_3         
		//    6    9:invokevirtual   #169 <Method void offsetPosition(int, boolean)>
			mPosition = i;
		//    7   12:aload_0         
		//    8   13:iload_1         
		//    9   14:putfield        #86  <Field int mPosition>
		//   10   17:return          
		}

		public final int getAdapterPosition()
		{
			RecyclerView recyclerview = mOwnerRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #173 <Field RecyclerView mOwnerRecyclerView>
		//    2    4:astore_1        
			if(recyclerview == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return -1;
		//    5    9:iconst_m1       
		//    6   10:ireturn         
			else
				return recyclerview.getAdapterPositionFor(this);
		//    7   11:aload_1         
		//    8   12:aload_0         
		//    9   13:invokevirtual   #177 <Method int RecyclerView.getAdapterPositionFor(RecyclerView$ViewHolder)>
		//   10   16:ireturn         
		}

		public final long getItemId()
		{
			return mItemId;
		//    0    0:aload_0         
		//    1    1:getfield        #92  <Field long mItemId>
		//    2    4:lreturn         
		}

		public final int getItemViewType()
		{
			return mItemViewType;
		//    0    0:aload_0         
		//    1    1:getfield        #94  <Field int mItemViewType>
		//    2    4:ireturn         
		}

		public final int getLayoutPosition()
		{
			int j = mPreLayoutPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #96  <Field int mPreLayoutPosition>
		//    2    4:istore_2        
			int i = j;
		//    3    5:iload_2         
		//    4    6:istore_1        
			if(j == -1)
		//*   5    7:iload_2         
		//*   6    8:iconst_m1       
		//*   7    9:icmpne          17
				i = mPosition;
		//    8   12:aload_0         
		//    9   13:getfield        #86  <Field int mPosition>
		//   10   16:istore_1        
			return i;
		//   11   17:iload_1         
		//   12   18:ireturn         
		}

		public final int getOldPosition()
		{
			return mOldPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #88  <Field int mOldPosition>
		//    2    4:ireturn         
		}

		public final int getPosition()
		{
			int j = mPreLayoutPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #96  <Field int mPreLayoutPosition>
		//    2    4:istore_2        
			int i = j;
		//    3    5:iload_2         
		//    4    6:istore_1        
			if(j == -1)
		//*   5    7:iload_2         
		//*   6    8:iconst_m1       
		//*   7    9:icmpne          17
				i = mPosition;
		//    8   12:aload_0         
		//    9   13:getfield        #86  <Field int mPosition>
		//   10   16:istore_1        
			return i;
		//   11   17:iload_1         
		//   12   18:ireturn         
		}

		List getUnmodifiedPayloads()
		{
			if((mFlags & 0x400) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #140 <Field int mFlags>
		//*   2    4:sipush          1024
		//*   3    7:iand            
		//*   4    8:ifne            41
			{
				List list = mPayloads;
		//    5   11:aload_0         
		//    6   12:getfield        #102 <Field List mPayloads>
		//    7   15:astore_1        
				if(list != null && list.size() != 0)
		//*   8   16:aload_1         
		//*   9   17:ifnull          37
		//*  10   20:aload_1         
		//*  11   21:invokeinterface #189 <Method int List.size()>
		//*  12   26:ifne            32
		//*  13   29:goto            37
					return mUnmodifiedPayloads;
		//   14   32:aload_0         
		//   15   33:getfield        #104 <Field List mUnmodifiedPayloads>
		//   16   36:areturn         
				else
					return FULLUPDATE_PAYLOADS;
		//   17   37:getstatic       #79  <Field List FULLUPDATE_PAYLOADS>
		//   18   40:areturn         
			} else
			{
				return FULLUPDATE_PAYLOADS;
		//   19   41:getstatic       #79  <Field List FULLUPDATE_PAYLOADS>
		//   20   44:areturn         
			}
		}

		boolean hasAnyOfTheFlags(int i)
		{
			return (i & mFlags) != 0;
		//    0    0:iload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #140 <Field int mFlags>
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isAdapterPositionUnknown()
		{
			return (mFlags & 0x200) != 0 || isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:sipush          512
		//    3    7:iand            
		//    4    8:ifne            23
		//    5   11:aload_0         
		//    6   12:invokevirtual   #197 <Method boolean isInvalid()>
		//    7   15:ifeq            21
		//    8   18:goto            23
		//    9   21:iconst_0        
		//   10   22:ireturn         
		//   11   23:iconst_1        
		//   12   24:ireturn         
		}

		boolean isBound()
		{
			return (mFlags & 1) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:iconst_1        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isInvalid()
		{
			return (mFlags & 4) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:iconst_4        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		public final boolean isRecyclable()
		{
			return (mFlags & 0x10) == 0 && !ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #116 <Field View itemView>
		//    7   14:invokestatic    #163 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifne            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		boolean isRemoved()
		{
			return (mFlags & 8) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:bipush          8
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean isScrap()
		{
			return mScrapContainer != null;
		//    0    0:aload_0         
		//    1    1:getfield        #108 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:ifnull          9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		boolean isTmpDetached()
		{
			return (mFlags & 0x100) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:sipush          256
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		boolean isUpdated()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean needsUpdate()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		void offsetPosition(int i, boolean flag)
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #88  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #86  <Field int mPosition>
		//    7   13:putfield        #88  <Field int mOldPosition>
			if(mPreLayoutPosition == -1)
		//*   8   16:aload_0         
		//*   9   17:getfield        #96  <Field int mPreLayoutPosition>
		//*  10   20:iconst_m1       
		//*  11   21:icmpne          32
				mPreLayoutPosition = mPosition;
		//   12   24:aload_0         
		//   13   25:aload_0         
		//   14   26:getfield        #86  <Field int mPosition>
		//   15   29:putfield        #96  <Field int mPreLayoutPosition>
			if(flag)
		//*  16   32:iload_2         
		//*  17   33:ifeq            46
				mPreLayoutPosition = mPreLayoutPosition + i;
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #96  <Field int mPreLayoutPosition>
		//   21   41:iload_1         
		//   22   42:iadd            
		//   23   43:putfield        #96  <Field int mPreLayoutPosition>
			mPosition = mPosition + i;
		//   24   46:aload_0         
		//   25   47:aload_0         
		//   26   48:getfield        #86  <Field int mPosition>
		//   27   51:iload_1         
		//   28   52:iadd            
		//   29   53:putfield        #86  <Field int mPosition>
			if(itemView.getLayoutParams() != null)
		//*  30   56:aload_0         
		//*  31   57:getfield        #116 <Field View itemView>
		//*  32   60:invokevirtual   #210 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  33   63:ifnull          80
				((LayoutParams)itemView.getLayoutParams()).mInsetsDirty = true;
		//   34   66:aload_0         
		//   35   67:getfield        #116 <Field View itemView>
		//   36   70:invokevirtual   #210 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   37   73:checkcast       #212 <Class RecyclerView$LayoutParams>
		//   38   76:iconst_1        
		//   39   77:putfield        #215 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//   40   80:return          
		}

		void onEnteredHiddenState(RecyclerView recyclerview)
		{
			int i = mPendingAccessibilityState;
		//    0    0:aload_0         
		//    1    1:getfield        #114 <Field int mPendingAccessibilityState>
		//    2    4:istore_2        
			if(i != -1)
		//*   3    5:iload_2         
		//*   4    6:iconst_m1       
		//*   5    7:icmpeq          18
				mWasImportantForAccessibilityBeforeHidden = i;
		//    6   10:aload_0         
		//    7   11:iload_2         
		//    8   12:putfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
			else
		//*   9   15:goto            29
				mWasImportantForAccessibilityBeforeHidden = ViewCompat.getImportantForAccessibility(itemView);
		//   10   18:aload_0         
		//   11   19:aload_0         
		//   12   20:getfield        #116 <Field View itemView>
		//   13   23:invokestatic    #221 <Method int ViewCompat.getImportantForAccessibility(View)>
		//   14   26:putfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
			recyclerview.setChildImportantForAccessibilityInternal(this, 4);
		//   15   29:aload_1         
		//   16   30:aload_0         
		//   17   31:iconst_4        
		//   18   32:invokevirtual   #225 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//   19   35:pop             
		//   20   36:return          
		}

		void onLeftHiddenState(RecyclerView recyclerview)
		{
			recyclerview.setChildImportantForAccessibilityInternal(this, mWasImportantForAccessibilityBeforeHidden);
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:aload_0         
		//    3    3:getfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    4    6:invokevirtual   #225 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    5    9:pop             
			mWasImportantForAccessibilityBeforeHidden = 0;
		//    6   10:aload_0         
		//    7   11:iconst_0        
		//    8   12:putfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    9   15:return          
		}

		void resetInternal()
		{
			mFlags = 0;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #140 <Field int mFlags>
			mPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #86  <Field int mPosition>
			mOldPosition = -1;
		//    6   10:aload_0         
		//    7   11:iconst_m1       
		//    8   12:putfield        #88  <Field int mOldPosition>
			mItemId = -1L;
		//    9   15:aload_0         
		//   10   16:ldc2w           #89  <Long -1L>
		//   11   19:putfield        #92  <Field long mItemId>
			mPreLayoutPosition = -1;
		//   12   22:aload_0         
		//   13   23:iconst_m1       
		//   14   24:putfield        #96  <Field int mPreLayoutPosition>
			mIsRecyclableCount = 0;
		//   15   27:aload_0         
		//   16   28:iconst_0        
		//   17   29:putfield        #106 <Field int mIsRecyclableCount>
			mShadowedHolder = null;
		//   18   32:aload_0         
		//   19   33:aconst_null     
		//   20   34:putfield        #98  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   21   37:aload_0         
		//   22   38:aconst_null     
		//   23   39:putfield        #100 <Field RecyclerView$ViewHolder mShadowingHolder>
			clearPayload();
		//   24   42:aload_0         
		//   25   43:invokevirtual   #229 <Method void clearPayload()>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   26   46:aload_0         
		//   27   47:iconst_0        
		//   28   48:putfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   29   51:aload_0         
		//   30   52:iconst_m1       
		//   31   53:putfield        #114 <Field int mPendingAccessibilityState>
			RecyclerView.clearNestedRecyclerViewIfNotNested(this);
		//   32   56:aload_0         
		//   33   57:invokestatic    #233 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
		//   34   60:return          
		}

		void saveOldPosition()
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #88  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #86  <Field int mPosition>
		//    7   13:putfield        #88  <Field int mOldPosition>
		//    8   16:return          
		}

		void setFlags(int i, int j)
		{
			mFlags = i & j | mFlags & j;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iand            
		//    4    4:aload_0         
		//    5    5:getfield        #140 <Field int mFlags>
		//    6    8:iload_2         
		//    7    9:iand            
		//    8   10:ior             
		//    9   11:putfield        #140 <Field int mFlags>
		//   10   14:return          
		}

		public final void setIsRecyclable(boolean flag)
		{
			int i;
			if(flag)
		//*   0    0:iload_1         
		//*   1    1:ifeq            14
				i = mIsRecyclableCount - 1;
		//    2    4:aload_0         
		//    3    5:getfield        #106 <Field int mIsRecyclableCount>
		//    4    8:iconst_1        
		//    5    9:isub            
		//    6   10:istore_2        
			else
		//*   7   11:goto            21
				i = mIsRecyclableCount + 1;
		//    8   14:aload_0         
		//    9   15:getfield        #106 <Field int mIsRecyclableCount>
		//   10   18:iconst_1        
		//   11   19:iadd            
		//   12   20:istore_2        
			mIsRecyclableCount = i;
		//   13   21:aload_0         
		//   14   22:iload_2         
		//   15   23:putfield        #106 <Field int mIsRecyclableCount>
			i = mIsRecyclableCount;
		//   16   26:aload_0         
		//   17   27:getfield        #106 <Field int mIsRecyclableCount>
		//   18   30:istore_2        
			if(i < 0)
		//*  19   31:iload_2         
		//*  20   32:ifge            72
			{
				mIsRecyclableCount = 0;
		//   21   35:aload_0         
		//   22   36:iconst_0        
		//   23   37:putfield        #106 <Field int mIsRecyclableCount>
				StringBuilder stringbuilder = new StringBuilder();
		//   24   40:new             #240 <Class StringBuilder>
		//   25   43:dup             
		//   26   44:invokespecial   #241 <Method void StringBuilder()>
		//   27   47:astore_3        
				stringbuilder.append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ");
		//   28   48:aload_3         
		//   29   49:ldc1            #243 <String "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ">
		//   30   51:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   31   54:pop             
				stringbuilder.append(((Object) (this)));
		//   32   55:aload_3         
		//   33   56:aload_0         
		//   34   57:invokevirtual   #250 <Method StringBuilder StringBuilder.append(Object)>
		//   35   60:pop             
				Log.e("View", stringbuilder.toString());
		//   36   61:ldc1            #252 <String "View">
		//   37   63:aload_3         
		//   38   64:invokevirtual   #256 <Method String StringBuilder.toString()>
		//   39   67:invokestatic    #262 <Method int Log.e(String, String)>
		//   40   70:pop             
				return;
		//   41   71:return          
			}
			if(!flag && i == 1)
		//*  42   72:iload_1         
		//*  43   73:ifne            93
		//*  44   76:iload_2         
		//*  45   77:iconst_1        
		//*  46   78:icmpne          93
			{
				mFlags = mFlags | 0x10;
		//   47   81:aload_0         
		//   48   82:aload_0         
		//   49   83:getfield        #140 <Field int mFlags>
		//   50   86:bipush          16
		//   51   88:ior             
		//   52   89:putfield        #140 <Field int mFlags>
				return;
		//   53   92:return          
			}
			if(flag && mIsRecyclableCount == 0)
		//*  54   93:iload_1         
		//*  55   94:ifeq            115
		//*  56   97:aload_0         
		//*  57   98:getfield        #106 <Field int mIsRecyclableCount>
		//*  58  101:ifne            115
				mFlags = mFlags & 0xffffffef;
		//   59  104:aload_0         
		//   60  105:aload_0         
		//   61  106:getfield        #140 <Field int mFlags>
		//   62  109:bipush          -17
		//   63  111:iand            
		//   64  112:putfield        #140 <Field int mFlags>
		//   65  115:return          
		}

		void setScrapContainer(Recycler recycler, boolean flag)
		{
			mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #108 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = flag;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #110 <Field boolean mInChangeScrap>
		//    6   10:return          
		}

		boolean shouldBeKeptAsChild()
		{
			return (mFlags & 0x10) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean shouldIgnore()
		{
			return (mFlags & 0x80) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:sipush          128
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		void stopIgnoring()
		{
			mFlags = mFlags & 0xffffff7f;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #140 <Field int mFlags>
		//    3    5:sipush          -129
		//    4    8:iand            
		//    5    9:putfield        #140 <Field int mFlags>
		//    6   12:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder();
		//    0    0:new             #240 <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #241 <Method void StringBuilder()>
		//    3    7:astore_1        
			stringbuilder.append("ViewHolder{");
		//    4    8:aload_1         
		//    5    9:ldc2            #269 <String "ViewHolder{">
		//    6   12:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//    7   15:pop             
			stringbuilder.append(Integer.toHexString(((Object)this).hashCode()));
		//    8   16:aload_1         
		//    9   17:aload_0         
		//   10   18:invokevirtual   #272 <Method int Object.hashCode()>
		//   11   21:invokestatic    #278 <Method String Integer.toHexString(int)>
		//   12   24:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   13   27:pop             
			stringbuilder.append(" position=");
		//   14   28:aload_1         
		//   15   29:ldc2            #280 <String " position=">
		//   16   32:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   17   35:pop             
			stringbuilder.append(mPosition);
		//   18   36:aload_1         
		//   19   37:aload_0         
		//   20   38:getfield        #86  <Field int mPosition>
		//   21   41:invokevirtual   #283 <Method StringBuilder StringBuilder.append(int)>
		//   22   44:pop             
			stringbuilder.append(" id=");
		//   23   45:aload_1         
		//   24   46:ldc2            #285 <String " id=">
		//   25   49:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   26   52:pop             
			stringbuilder.append(mItemId);
		//   27   53:aload_1         
		//   28   54:aload_0         
		//   29   55:getfield        #92  <Field long mItemId>
		//   30   58:invokevirtual   #288 <Method StringBuilder StringBuilder.append(long)>
		//   31   61:pop             
			stringbuilder.append(", oldPos=");
		//   32   62:aload_1         
		//   33   63:ldc2            #290 <String ", oldPos=">
		//   34   66:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   35   69:pop             
			stringbuilder.append(mOldPosition);
		//   36   70:aload_1         
		//   37   71:aload_0         
		//   38   72:getfield        #88  <Field int mOldPosition>
		//   39   75:invokevirtual   #283 <Method StringBuilder StringBuilder.append(int)>
		//   40   78:pop             
			stringbuilder.append(", pLpos:");
		//   41   79:aload_1         
		//   42   80:ldc2            #292 <String ", pLpos:">
		//   43   83:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   44   86:pop             
			stringbuilder.append(mPreLayoutPosition);
		//   45   87:aload_1         
		//   46   88:aload_0         
		//   47   89:getfield        #96  <Field int mPreLayoutPosition>
		//   48   92:invokevirtual   #283 <Method StringBuilder StringBuilder.append(int)>
		//   49   95:pop             
			StringBuilder stringbuilder2 = new StringBuilder(stringbuilder.toString());
		//   50   96:new             #240 <Class StringBuilder>
		//   51   99:dup             
		//   52  100:aload_1         
		//   53  101:invokevirtual   #256 <Method String StringBuilder.toString()>
		//   54  104:invokespecial   #293 <Method void StringBuilder(String)>
		//   55  107:astore_2        
			if(isScrap())
		//*  56  108:aload_0         
		//*  57  109:invokevirtual   #295 <Method boolean isScrap()>
		//*  58  112:ifeq            147
			{
				stringbuilder2.append(" scrap ");
		//   59  115:aload_2         
		//   60  116:ldc2            #297 <String " scrap ">
		//   61  119:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   62  122:pop             
				String s;
				if(mInChangeScrap)
		//*  63  123:aload_0         
		//*  64  124:getfield        #110 <Field boolean mInChangeScrap>
		//*  65  127:ifeq            137
					s = "[changeScrap]";
		//   66  130:ldc2            #299 <String "[changeScrap]">
		//   67  133:astore_1        
				else
		//*  68  134:goto            141
					s = "[attachedScrap]";
		//   69  137:ldc2            #301 <String "[attachedScrap]">
		//   70  140:astore_1        
				stringbuilder2.append(s);
		//   71  141:aload_2         
		//   72  142:aload_1         
		//   73  143:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   74  146:pop             
			}
			if(isInvalid())
		//*  75  147:aload_0         
		//*  76  148:invokevirtual   #197 <Method boolean isInvalid()>
		//*  77  151:ifeq            162
				stringbuilder2.append(" invalid");
		//   78  154:aload_2         
		//   79  155:ldc2            #303 <String " invalid">
		//   80  158:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   81  161:pop             
			if(!isBound())
		//*  82  162:aload_0         
		//*  83  163:invokevirtual   #305 <Method boolean isBound()>
		//*  84  166:ifne            177
				stringbuilder2.append(" unbound");
		//   85  169:aload_2         
		//   86  170:ldc2            #307 <String " unbound">
		//   87  173:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   88  176:pop             
			if(needsUpdate())
		//*  89  177:aload_0         
		//*  90  178:invokevirtual   #309 <Method boolean needsUpdate()>
		//*  91  181:ifeq            192
				stringbuilder2.append(" update");
		//   92  184:aload_2         
		//   93  185:ldc2            #311 <String " update">
		//   94  188:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//   95  191:pop             
			if(isRemoved())
		//*  96  192:aload_0         
		//*  97  193:invokevirtual   #313 <Method boolean isRemoved()>
		//*  98  196:ifeq            207
				stringbuilder2.append(" removed");
		//   99  199:aload_2         
		//  100  200:ldc2            #315 <String " removed">
		//  101  203:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  102  206:pop             
			if(shouldIgnore())
		//* 103  207:aload_0         
		//* 104  208:invokevirtual   #317 <Method boolean shouldIgnore()>
		//* 105  211:ifeq            222
				stringbuilder2.append(" ignored");
		//  106  214:aload_2         
		//  107  215:ldc2            #319 <String " ignored">
		//  108  218:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  109  221:pop             
			if(isTmpDetached())
		//* 110  222:aload_0         
		//* 111  223:invokevirtual   #321 <Method boolean isTmpDetached()>
		//* 112  226:ifeq            237
				stringbuilder2.append(" tmpDetached");
		//  113  229:aload_2         
		//  114  230:ldc2            #323 <String " tmpDetached">
		//  115  233:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  116  236:pop             
			if(!isRecyclable())
		//* 117  237:aload_0         
		//* 118  238:invokevirtual   #325 <Method boolean isRecyclable()>
		//* 119  241:ifne            286
			{
				StringBuilder stringbuilder1 = new StringBuilder();
		//  120  244:new             #240 <Class StringBuilder>
		//  121  247:dup             
		//  122  248:invokespecial   #241 <Method void StringBuilder()>
		//  123  251:astore_1        
				stringbuilder1.append(" not recyclable(");
		//  124  252:aload_1         
		//  125  253:ldc2            #327 <String " not recyclable(">
		//  126  256:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  127  259:pop             
				stringbuilder1.append(mIsRecyclableCount);
		//  128  260:aload_1         
		//  129  261:aload_0         
		//  130  262:getfield        #106 <Field int mIsRecyclableCount>
		//  131  265:invokevirtual   #283 <Method StringBuilder StringBuilder.append(int)>
		//  132  268:pop             
				stringbuilder1.append(")");
		//  133  269:aload_1         
		//  134  270:ldc2            #329 <String ")">
		//  135  273:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  136  276:pop             
				stringbuilder2.append(stringbuilder1.toString());
		//  137  277:aload_2         
		//  138  278:aload_1         
		//  139  279:invokevirtual   #256 <Method String StringBuilder.toString()>
		//  140  282:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  141  285:pop             
			}
			if(isAdapterPositionUnknown())
		//* 142  286:aload_0         
		//* 143  287:invokevirtual   #331 <Method boolean isAdapterPositionUnknown()>
		//* 144  290:ifeq            301
				stringbuilder2.append(" undefined adapter position");
		//  145  293:aload_2         
		//  146  294:ldc2            #333 <String " undefined adapter position">
		//  147  297:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  148  300:pop             
			if(itemView.getParent() == null)
		//* 149  301:aload_0         
		//* 150  302:getfield        #116 <Field View itemView>
		//* 151  305:invokevirtual   #337 <Method ViewParent View.getParent()>
		//* 152  308:ifnonnull       319
				stringbuilder2.append(" no parent");
		//  153  311:aload_2         
		//  154  312:ldc2            #339 <String " no parent">
		//  155  315:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  156  318:pop             
			stringbuilder2.append("}");
		//  157  319:aload_2         
		//  158  320:ldc2            #341 <String "}">
		//  159  323:invokevirtual   #247 <Method StringBuilder StringBuilder.append(String)>
		//  160  326:pop             
			return stringbuilder2.toString();
		//  161  327:aload_2         
		//  162  328:invokevirtual   #256 <Method String StringBuilder.toString()>
		//  163  331:areturn         
		}

		void unScrap()
		{
			mScrapContainer.unscrapView(this);
		//    0    0:aload_0         
		//    1    1:getfield        #108 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #347 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		boolean wasReturnedFromScrap()
		{
			return (mFlags & 0x20) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #140 <Field int mFlags>
		//    2    4:bipush          32
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		static final int FLAG_ADAPTER_FULLUPDATE = 1024;
		static final int FLAG_ADAPTER_POSITION_UNKNOWN = 512;
		static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 8192;
		static final int FLAG_BOUND = 1;
		static final int FLAG_IGNORE = 128;
		static final int FLAG_INVALID = 4;
		static final int FLAG_MOVED = 2048;
		static final int FLAG_NOT_RECYCLABLE = 16;
		static final int FLAG_REMOVED = 8;
		static final int FLAG_RETURNED_FROM_SCRAP = 32;
		static final int FLAG_SET_A11Y_ITEM_DELEGATE = 16384;
		static final int FLAG_TMP_DETACHED = 256;
		static final int FLAG_UPDATE = 2;
		private static final List FULLUPDATE_PAYLOADS = Collections.emptyList();
		static final int PENDING_ACCESSIBILITY_STATE_NOT_SET = -1;
		public final View itemView;
		int mFlags;
		boolean mInChangeScrap;
		private int mIsRecyclableCount;
		long mItemId;
		int mItemViewType;
		WeakReference mNestedRecyclerView;
		int mOldPosition;
		RecyclerView mOwnerRecyclerView;
		List mPayloads;
		int mPendingAccessibilityState;
		int mPosition;
		int mPreLayoutPosition;
		Recycler mScrapContainer;
		ViewHolder mShadowedHolder;
		ViewHolder mShadowingHolder;
		List mUnmodifiedPayloads;
		private int mWasImportantForAccessibilityBeforeHidden;

		static 
		{
		//    0    0:invokestatic    #77  <Method List Collections.emptyList()>
		//    1    3:putstatic       #79  <Field List FULLUPDATE_PAYLOADS>
		//*   2    6:return          
		}

		public ViewHolder(View view)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #84  <Method void Object()>
			mPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #86  <Field int mPosition>
			mOldPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #88  <Field int mOldPosition>
			mItemId = -1L;
		//    8   14:aload_0         
		//    9   15:ldc2w           #89  <Long -1L>
		//   10   18:putfield        #92  <Field long mItemId>
			mItemViewType = -1;
		//   11   21:aload_0         
		//   12   22:iconst_m1       
		//   13   23:putfield        #94  <Field int mItemViewType>
			mPreLayoutPosition = -1;
		//   14   26:aload_0         
		//   15   27:iconst_m1       
		//   16   28:putfield        #96  <Field int mPreLayoutPosition>
			mShadowedHolder = null;
		//   17   31:aload_0         
		//   18   32:aconst_null     
		//   19   33:putfield        #98  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   20   36:aload_0         
		//   21   37:aconst_null     
		//   22   38:putfield        #100 <Field RecyclerView$ViewHolder mShadowingHolder>
			mPayloads = null;
		//   23   41:aload_0         
		//   24   42:aconst_null     
		//   25   43:putfield        #102 <Field List mPayloads>
			mUnmodifiedPayloads = null;
		//   26   46:aload_0         
		//   27   47:aconst_null     
		//   28   48:putfield        #104 <Field List mUnmodifiedPayloads>
			mIsRecyclableCount = 0;
		//   29   51:aload_0         
		//   30   52:iconst_0        
		//   31   53:putfield        #106 <Field int mIsRecyclableCount>
			mScrapContainer = null;
		//   32   56:aload_0         
		//   33   57:aconst_null     
		//   34   58:putfield        #108 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = false;
		//   35   61:aload_0         
		//   36   62:iconst_0        
		//   37   63:putfield        #110 <Field boolean mInChangeScrap>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   38   66:aload_0         
		//   39   67:iconst_0        
		//   40   68:putfield        #112 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   41   71:aload_0         
		//   42   72:iconst_m1       
		//   43   73:putfield        #114 <Field int mPendingAccessibilityState>
			if(view != null)
		//*  44   76:aload_1         
		//*  45   77:ifnull          86
			{
				itemView = view;
		//   46   80:aload_0         
		//   47   81:aload_1         
		//   48   82:putfield        #116 <Field View itemView>
				return;
		//   49   85:return          
			} else
			{
				throw new IllegalArgumentException("itemView may not be null");
		//   50   86:new             #118 <Class IllegalArgumentException>
		//   51   89:dup             
		//   52   90:ldc1            #120 <String "itemView may not be null">
		//   53   92:invokespecial   #123 <Method void IllegalArgumentException(String)>
		//   54   95:athrow          
			}
		}
	}


	public RecyclerView(Context context)
	{
		this(context, ((AttributeSet) (null)));
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aconst_null     
	//    3    3:invokespecial   #364 <Method void RecyclerView(Context, AttributeSet)>
	//    4    6:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset)
	{
		this(context, attributeset, 0);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iconst_0        
	//    4    4:invokespecial   #369 <Method void RecyclerView(Context, AttributeSet, int)>
	//    5    7:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset, int i)
	{
		super(context, attributeset, i);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iload_3         
	//    4    4:invokespecial   #370 <Method void ViewGroup(Context, AttributeSet, int)>
		mObserver = new RecyclerViewDataObserver();
	//    5    7:aload_0         
	//    6    8:new             #104 <Class RecyclerView$RecyclerViewDataObserver>
	//    7   11:dup             
	//    8   12:aload_0         
	//    9   13:invokespecial   #373 <Method void RecyclerView$RecyclerViewDataObserver(RecyclerView)>
	//   10   16:putfield        #375 <Field RecyclerView$RecyclerViewDataObserver mObserver>
		mRecycler = new Recycler();
	//   11   19:aload_0         
	//   12   20:new             #98  <Class RecyclerView$Recycler>
	//   13   23:dup             
	//   14   24:aload_0         
	//   15   25:invokespecial   #376 <Method void RecyclerView$Recycler(RecyclerView)>
	//   16   28:putfield        #378 <Field RecyclerView$Recycler mRecycler>
		mViewInfoStore = new ViewInfoStore();
	//   17   31:aload_0         
	//   18   32:new             #380 <Class ViewInfoStore>
	//   19   35:dup             
	//   20   36:invokespecial   #381 <Method void ViewInfoStore()>
	//   21   39:putfield        #383 <Field ViewInfoStore mViewInfoStore>
		mUpdateChildViewsRunnable = new Runnable() {

			public void run()
			{
				if(mFirstLayoutComplete)
			//*   0    0:aload_0         
			//*   1    1:getfield        #14  <Field RecyclerView this$0>
			//*   2    4:getfield        #23  <Field boolean RecyclerView.mFirstLayoutComplete>
			//*   3    7:ifeq            66
				{
					if(isLayoutRequested())
			//*   4   10:aload_0         
			//*   5   11:getfield        #14  <Field RecyclerView this$0>
			//*   6   14:invokevirtual   #27  <Method boolean RecyclerView.isLayoutRequested()>
			//*   7   17:ifeq            21
						return;
			//    8   20:return          
					if(!mIsAttached)
			//*   9   21:aload_0         
			//*  10   22:getfield        #14  <Field RecyclerView this$0>
			//*  11   25:getfield        #30  <Field boolean RecyclerView.mIsAttached>
			//*  12   28:ifne            39
					{
						requestLayout();
			//   13   31:aload_0         
			//   14   32:getfield        #14  <Field RecyclerView this$0>
			//   15   35:invokevirtual   #33  <Method void RecyclerView.requestLayout()>
						return;
			//   16   38:return          
					}
					if(mLayoutFrozen)
			//*  17   39:aload_0         
			//*  18   40:getfield        #14  <Field RecyclerView this$0>
			//*  19   43:getfield        #36  <Field boolean RecyclerView.mLayoutFrozen>
			//*  20   46:ifeq            58
					{
						mLayoutWasDefered = true;
			//   21   49:aload_0         
			//   22   50:getfield        #14  <Field RecyclerView this$0>
			//   23   53:iconst_1        
			//   24   54:putfield        #39  <Field boolean RecyclerView.mLayoutWasDefered>
						return;
			//   25   57:return          
					} else
					{
						consumePendingUpdateOperations();
			//   26   58:aload_0         
			//   27   59:getfield        #14  <Field RecyclerView this$0>
			//   28   62:invokevirtual   #42  <Method void RecyclerView.consumePendingUpdateOperations()>
						return;
			//   29   65:return          
					}
				} else
				{
					return;
			//   30   66:return          
				}
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//   22   42:aload_0         
	//   23   43:new             #10  <Class RecyclerView$1>
	//   24   46:dup             
	//   25   47:aload_0         
	//   26   48:invokespecial   #384 <Method void RecyclerView$1(RecyclerView)>
	//   27   51:putfield        #386 <Field Runnable mUpdateChildViewsRunnable>
		mTempRect = new Rect();
	//   28   54:aload_0         
	//   29   55:new             #388 <Class Rect>
	//   30   58:dup             
	//   31   59:invokespecial   #389 <Method void Rect()>
	//   32   62:putfield        #391 <Field Rect mTempRect>
		mTempRect2 = new Rect();
	//   33   65:aload_0         
	//   34   66:new             #388 <Class Rect>
	//   35   69:dup             
	//   36   70:invokespecial   #389 <Method void Rect()>
	//   37   73:putfield        #393 <Field Rect mTempRect2>
		mTempRectF = new RectF();
	//   38   76:aload_0         
	//   39   77:new             #395 <Class RectF>
	//   40   80:dup             
	//   41   81:invokespecial   #396 <Method void RectF()>
	//   42   84:putfield        #398 <Field RectF mTempRectF>
		mItemDecorations = new ArrayList();
	//   43   87:aload_0         
	//   44   88:new             #400 <Class ArrayList>
	//   45   91:dup             
	//   46   92:invokespecial   #401 <Method void ArrayList()>
	//   47   95:putfield        #403 <Field ArrayList mItemDecorations>
		mOnItemTouchListeners = new ArrayList();
	//   48   98:aload_0         
	//   49   99:new             #400 <Class ArrayList>
	//   50  102:dup             
	//   51  103:invokespecial   #401 <Method void ArrayList()>
	//   52  106:putfield        #405 <Field ArrayList mOnItemTouchListeners>
		mInterceptRequestLayoutDepth = 0;
	//   53  109:aload_0         
	//   54  110:iconst_0        
	//   55  111:putfield        #407 <Field int mInterceptRequestLayoutDepth>
		mDataSetHasChangedAfterLayout = false;
	//   56  114:aload_0         
	//   57  115:iconst_0        
	//   58  116:putfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
		mDispatchItemsChangedEvent = false;
	//   59  119:aload_0         
	//   60  120:iconst_0        
	//   61  121:putfield        #411 <Field boolean mDispatchItemsChangedEvent>
		mLayoutOrScrollCounter = 0;
	//   62  124:aload_0         
	//   63  125:iconst_0        
	//   64  126:putfield        #413 <Field int mLayoutOrScrollCounter>
		mDispatchScrollCounter = 0;
	//   65  129:aload_0         
	//   66  130:iconst_0        
	//   67  131:putfield        #415 <Field int mDispatchScrollCounter>
		mEdgeEffectFactory = new EdgeEffectFactory();
	//   68  134:aload_0         
	//   69  135:new             #34  <Class RecyclerView$EdgeEffectFactory>
	//   70  138:dup             
	//   71  139:invokespecial   #416 <Method void RecyclerView$EdgeEffectFactory()>
	//   72  142:putfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
		mItemAnimator = ((ItemAnimator) (new DefaultItemAnimator()));
	//   73  145:aload_0         
	//   74  146:new             #420 <Class DefaultItemAnimator>
	//   75  149:dup             
	//   76  150:invokespecial   #421 <Method void DefaultItemAnimator()>
	//   77  153:putfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
		mScrollState = 0;
	//   78  156:aload_0         
	//   79  157:iconst_0        
	//   80  158:putfield        #425 <Field int mScrollState>
		mScrollPointerId = -1;
	//   81  161:aload_0         
	//   82  162:iconst_m1       
	//   83  163:putfield        #427 <Field int mScrollPointerId>
		mScaledHorizontalScrollFactor = 1.401298E-45F;
	//   84  166:aload_0         
	//   85  167:ldc2            #428 <Float 1.401298E-45F>
	//   86  170:putfield        #430 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = 1.401298E-45F;
	//   87  173:aload_0         
	//   88  174:ldc2            #428 <Float 1.401298E-45F>
	//   89  177:putfield        #432 <Field float mScaledVerticalScrollFactor>
		boolean flag1 = true;
	//   90  180:iconst_1        
	//   91  181:istore          5
		mPreserveFocusAfterLayout = true;
	//   92  183:aload_0         
	//   93  184:iconst_1        
	//   94  185:putfield        #434 <Field boolean mPreserveFocusAfterLayout>
		mViewFlinger = new ViewFlinger();
	//   95  188:aload_0         
	//   96  189:new             #127 <Class RecyclerView$ViewFlinger>
	//   97  192:dup             
	//   98  193:aload_0         
	//   99  194:invokespecial   #435 <Method void RecyclerView$ViewFlinger(RecyclerView)>
	//  100  197:putfield        #437 <Field RecyclerView$ViewFlinger mViewFlinger>
		Object obj;
		if(ALLOW_THREAD_GAP_WORK)
	//* 101  200:getstatic       #336 <Field boolean ALLOW_THREAD_GAP_WORK>
	//* 102  203:ifeq            218
			obj = ((Object) (new GapWorker.LayoutPrefetchRegistryImpl()));
	//  103  206:new             #439 <Class GapWorker$LayoutPrefetchRegistryImpl>
	//  104  209:dup             
	//  105  210:invokespecial   #440 <Method void GapWorker$LayoutPrefetchRegistryImpl()>
	//  106  213:astore          6
		else
	//* 107  215:goto            221
			obj = null;
	//  108  218:aconst_null     
	//  109  219:astore          6
		mPrefetchRegistry = ((GapWorker.LayoutPrefetchRegistryImpl) (obj));
	//  110  221:aload_0         
	//  111  222:aload           6
	//  112  224:putfield        #442 <Field GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry>
		mState = new State();
	//  113  227:aload_0         
	//  114  228:new             #121 <Class RecyclerView$State>
	//  115  231:dup             
	//  116  232:invokespecial   #443 <Method void RecyclerView$State()>
	//  117  235:putfield        #445 <Field RecyclerView$State mState>
		mItemsAddedOrRemoved = false;
	//  118  238:aload_0         
	//  119  239:iconst_0        
	//  120  240:putfield        #447 <Field boolean mItemsAddedOrRemoved>
		mItemsChanged = false;
	//  121  243:aload_0         
	//  122  244:iconst_0        
	//  123  245:putfield        #449 <Field boolean mItemsChanged>
		mItemAnimatorListener = ((ItemAnimator.ItemAnimatorListener) (new ItemAnimatorRestoreListener()));
	//  124  248:aload_0         
	//  125  249:new             #55  <Class RecyclerView$ItemAnimatorRestoreListener>
	//  126  252:dup             
	//  127  253:aload_0         
	//  128  254:invokespecial   #450 <Method void RecyclerView$ItemAnimatorRestoreListener(RecyclerView)>
	//  129  257:putfield        #452 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
		mPostedAnimatorRunner = false;
	//  130  260:aload_0         
	//  131  261:iconst_0        
	//  132  262:putfield        #454 <Field boolean mPostedAnimatorRunner>
		mMinMaxLayoutPositions = new int[2];
	//  133  265:aload_0         
	//  134  266:iconst_2        
	//  135  267:newarray        int[]
	//  136  269:putfield        #456 <Field int[] mMinMaxLayoutPositions>
		mScrollOffset = new int[2];
	//  137  272:aload_0         
	//  138  273:iconst_2        
	//  139  274:newarray        int[]
	//  140  276:putfield        #458 <Field int[] mScrollOffset>
		mScrollConsumed = new int[2];
	//  141  279:aload_0         
	//  142  280:iconst_2        
	//  143  281:newarray        int[]
	//  144  283:putfield        #460 <Field int[] mScrollConsumed>
		mNestedOffsets = new int[2];
	//  145  286:aload_0         
	//  146  287:iconst_2        
	//  147  288:newarray        int[]
	//  148  290:putfield        #462 <Field int[] mNestedOffsets>
		mScrollStepConsumed = new int[2];
	//  149  293:aload_0         
	//  150  294:iconst_2        
	//  151  295:newarray        int[]
	//  152  297:putfield        #464 <Field int[] mScrollStepConsumed>
		mPendingAccessibilityImportanceChange = ((List) (new ArrayList()));
	//  153  300:aload_0         
	//  154  301:new             #400 <Class ArrayList>
	//  155  304:dup             
	//  156  305:invokespecial   #401 <Method void ArrayList()>
	//  157  308:putfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//  158  311:aload_0         
	//  159  312:new             #12  <Class RecyclerView$2>
	//  160  315:dup             
	//  161  316:aload_0         
	//  162  317:invokespecial   #467 <Method void RecyclerView$2(RecyclerView)>
	//  163  320:putfield        #469 <Field Runnable mItemAnimatorRunner>
		mViewInfoProcessCallback = new ViewInfoStore.ProcessCallback() {

			public void processAppeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				animateAppearance(viewholder, itemholderinfo, itemholderinfo1);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #23  <Method void RecyclerView.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//    6   10:return          
			}

			public void processDisappeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				mRecycler.unscrapView(viewholder);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    3    7:aload_1         
			//    4    8:invokevirtual   #36  <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
				animateDisappearance(viewholder, itemholderinfo, itemholderinfo1);
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:aload_1         
			//    8   16:aload_2         
			//    9   17:aload_3         
			//   10   18:invokevirtual   #39  <Method void RecyclerView.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//   11   21:return          
			}

			public void processPersistent(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				viewholder.setIsRecyclable(false);
			//    0    0:aload_1         
			//    1    1:iconst_0        
			//    2    2:invokevirtual   #47  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(mDataSetHasChangedAfterLayout)
			//*   3    5:aload_0         
			//*   4    6:getfield        #14  <Field RecyclerView this$0>
			//*   5    9:getfield        #51  <Field boolean RecyclerView.mDataSetHasChangedAfterLayout>
			//*   6   12:ifeq            40
				{
					if(mItemAnimator.animateChange(viewholder, viewholder, itemholderinfo, itemholderinfo1))
			//*   7   15:aload_0         
			//*   8   16:getfield        #14  <Field RecyclerView this$0>
			//*   9   19:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  10   22:aload_1         
			//*  11   23:aload_1         
			//*  12   24:aload_2         
			//*  13   25:aload_3         
			//*  14   26:invokevirtual   #61  <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  15   29:ifeq            63
					{
						postAnimationRunner();
			//   16   32:aload_0         
			//   17   33:getfield        #14  <Field RecyclerView this$0>
			//   18   36:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
						return;
			//   19   39:return          
					}
				} else
				if(mItemAnimator.animatePersistence(viewholder, itemholderinfo, itemholderinfo1))
			//*  20   40:aload_0         
			//*  21   41:getfield        #14  <Field RecyclerView this$0>
			//*  22   44:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  23   47:aload_1         
			//*  24   48:aload_2         
			//*  25   49:aload_3         
			//*  26   50:invokevirtual   #68  <Method boolean RecyclerView$ItemAnimator.animatePersistence(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  27   53:ifeq            63
					postAnimationRunner();
			//   28   56:aload_0         
			//   29   57:getfield        #14  <Field RecyclerView this$0>
			//   30   60:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
			//   31   63:return          
			}

			public void unused(ViewHolder viewholder)
			{
				mLayout.removeAndRecycleView(viewholder.itemView, mRecycler);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #73  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    3    7:aload_1         
			//    4    8:getfield        #77  <Field View RecyclerView$ViewHolder.itemView>
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    8   18:invokevirtual   #83  <Method void RecyclerView$LayoutManager.removeAndRecycleView(View, RecyclerView$Recycler)>
			//    9   21:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//  164  323:aload_0         
	//  165  324:new             #16  <Class RecyclerView$4>
	//  166  327:dup             
	//  167  328:aload_0         
	//  168  329:invokespecial   #470 <Method void RecyclerView$4(RecyclerView)>
	//  169  332:putfield        #472 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
		if(attributeset != null)
	//* 170  335:aload_2         
	//* 171  336:ifnull          370
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, CLIP_TO_PADDING_ATTR, i, 0)));
	//  172  339:aload_1         
	//  173  340:aload_2         
	//  174  341:getstatic       #323 <Field int[] CLIP_TO_PADDING_ATTR>
	//  175  344:iload_3         
	//  176  345:iconst_0        
	//  177  346:invokevirtual   #476 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  178  349:astore          6
			mClipToPadding = ((TypedArray) (obj)).getBoolean(0, true);
	//  179  351:aload_0         
	//  180  352:aload           6
	//  181  354:iconst_0        
	//  182  355:iconst_1        
	//  183  356:invokevirtual   #482 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  184  359:putfield        #484 <Field boolean mClipToPadding>
			((TypedArray) (obj)).recycle();
	//  185  362:aload           6
	//  186  364:invokevirtual   #487 <Method void TypedArray.recycle()>
		} else
	//* 187  367:goto            375
		{
			mClipToPadding = true;
	//  188  370:aload_0         
	//  189  371:iconst_1        
	//  190  372:putfield        #484 <Field boolean mClipToPadding>
		}
		setScrollContainer(true);
	//  191  375:aload_0         
	//  192  376:iconst_1        
	//  193  377:invokevirtual   #491 <Method void setScrollContainer(boolean)>
		setFocusableInTouchMode(true);
	//  194  380:aload_0         
	//  195  381:iconst_1        
	//  196  382:invokevirtual   #494 <Method void setFocusableInTouchMode(boolean)>
		obj = ((Object) (ViewConfiguration.get(context)));
	//  197  385:aload_1         
	//  198  386:invokestatic    #500 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//  199  389:astore          6
		mTouchSlop = ((ViewConfiguration) (obj)).getScaledTouchSlop();
	//  200  391:aload_0         
	//  201  392:aload           6
	//  202  394:invokevirtual   #504 <Method int ViewConfiguration.getScaledTouchSlop()>
	//  203  397:putfield        #506 <Field int mTouchSlop>
		mScaledHorizontalScrollFactor = ViewConfigurationCompat.getScaledHorizontalScrollFactor(((ViewConfiguration) (obj)), context);
	//  204  400:aload_0         
	//  205  401:aload           6
	//  206  403:aload_1         
	//  207  404:invokestatic    #512 <Method float ViewConfigurationCompat.getScaledHorizontalScrollFactor(ViewConfiguration, Context)>
	//  208  407:putfield        #430 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = ViewConfigurationCompat.getScaledVerticalScrollFactor(((ViewConfiguration) (obj)), context);
	//  209  410:aload_0         
	//  210  411:aload           6
	//  211  413:aload_1         
	//  212  414:invokestatic    #515 <Method float ViewConfigurationCompat.getScaledVerticalScrollFactor(ViewConfiguration, Context)>
	//  213  417:putfield        #432 <Field float mScaledVerticalScrollFactor>
		mMinFlingVelocity = ((ViewConfiguration) (obj)).getScaledMinimumFlingVelocity();
	//  214  420:aload_0         
	//  215  421:aload           6
	//  216  423:invokevirtual   #518 <Method int ViewConfiguration.getScaledMinimumFlingVelocity()>
	//  217  426:putfield        #520 <Field int mMinFlingVelocity>
		mMaxFlingVelocity = ((ViewConfiguration) (obj)).getScaledMaximumFlingVelocity();
	//  218  429:aload_0         
	//  219  430:aload           6
	//  220  432:invokevirtual   #523 <Method int ViewConfiguration.getScaledMaximumFlingVelocity()>
	//  221  435:putfield        #525 <Field int mMaxFlingVelocity>
		boolean flag;
		if(getOverScrollMode() == 2)
	//* 222  438:aload_0         
	//* 223  439:invokevirtual   #528 <Method int getOverScrollMode()>
	//* 224  442:iconst_2        
	//* 225  443:icmpne          452
			flag = true;
	//  226  446:iconst_1        
	//  227  447:istore          4
		else
	//* 228  449:goto            455
			flag = false;
	//  229  452:iconst_0        
	//  230  453:istore          4
		setWillNotDraw(flag);
	//  231  455:aload_0         
	//  232  456:iload           4
	//  233  458:invokevirtual   #531 <Method void setWillNotDraw(boolean)>
		mItemAnimator.setListener(mItemAnimatorListener);
	//  234  461:aload_0         
	//  235  462:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  236  465:aload_0         
	//  237  466:getfield        #452 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//  238  469:invokevirtual   #535 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		initAdapterManager();
	//  239  472:aload_0         
	//  240  473:invokevirtual   #538 <Method void initAdapterManager()>
		initChildrenHelper();
	//  241  476:aload_0         
	//  242  477:invokespecial   #541 <Method void initChildrenHelper()>
		initAutofill();
	//  243  480:aload_0         
	//  244  481:invokespecial   #544 <Method void initAutofill()>
		if(ViewCompat.getImportantForAccessibility(((View) (this))) == 0)
	//* 245  484:aload_0         
	//* 246  485:invokestatic    #550 <Method int ViewCompat.getImportantForAccessibility(View)>
	//* 247  488:ifne            496
			ViewCompat.setImportantForAccessibility(((View) (this)), 1);
	//  248  491:aload_0         
	//  249  492:iconst_1        
	//  250  493:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
		mAccessibilityManager = (AccessibilityManager)getContext().getSystemService("accessibility");
	//  251  496:aload_0         
	//  252  497:aload_0         
	//  253  498:invokevirtual   #558 <Method Context getContext()>
	//  254  501:ldc2            #560 <String "accessibility">
	//  255  504:invokevirtual   #564 <Method Object Context.getSystemService(String)>
	//  256  507:checkcast       #566 <Class AccessibilityManager>
	//  257  510:putfield        #568 <Field AccessibilityManager mAccessibilityManager>
		setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
	//  258  513:aload_0         
	//  259  514:new             #570 <Class RecyclerViewAccessibilityDelegate>
	//  260  517:dup             
	//  261  518:aload_0         
	//  262  519:invokespecial   #571 <Method void RecyclerViewAccessibilityDelegate(RecyclerView)>
	//  263  522:invokevirtual   #575 <Method void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)>
		if(attributeset != null)
	//* 264  525:aload_2         
	//* 265  526:ifnull          686
		{
			TypedArray typedarray = context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, 0);
	//  266  529:aload_1         
	//  267  530:aload_2         
	//  268  531:getstatic       #579 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
	//  269  534:iload_3         
	//  270  535:iconst_0        
	//  271  536:invokevirtual   #476 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  272  539:astore          6
			String s = typedarray.getString(android.support.v7.recyclerview.R.styleable.RecyclerView_layoutManager);
	//  273  541:aload           6
	//  274  543:getstatic       #582 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_layoutManager>
	//  275  546:invokevirtual   #586 <Method String TypedArray.getString(int)>
	//  276  549:astore          7
			if(typedarray.getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_descendantFocusability, -1) == -1)
	//* 277  551:aload           6
	//* 278  553:getstatic       #589 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_descendantFocusability>
	//* 279  556:iconst_m1       
	//* 280  557:invokevirtual   #593 <Method int TypedArray.getInt(int, int)>
	//* 281  560:iconst_m1       
	//* 282  561:icmpne          571
				setDescendantFocusability(0x40000);
	//  283  564:aload_0         
	//  284  565:ldc2            #594 <Int 0x40000>
	//  285  568:invokevirtual   #598 <Method void setDescendantFocusability(int)>
			mEnableFastScroller = typedarray.getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollEnabled, false);
	//  286  571:aload_0         
	//  287  572:aload           6
	//  288  574:getstatic       #601 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollEnabled>
	//  289  577:iconst_0        
	//  290  578:invokevirtual   #482 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  291  581:putfield        #603 <Field boolean mEnableFastScroller>
			if(mEnableFastScroller)
	//* 292  584:aload_0         
	//* 293  585:getfield        #603 <Field boolean mEnableFastScroller>
	//* 294  588:ifeq            633
				initFastScroller((StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalTrackDrawable), (StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalTrackDrawable));
	//  295  591:aload_0         
	//  296  592:aload           6
	//  297  594:getstatic       #606 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalThumbDrawable>
	//  298  597:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  299  600:checkcast       #612 <Class StateListDrawable>
	//  300  603:aload           6
	//  301  605:getstatic       #615 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalTrackDrawable>
	//  302  608:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  303  611:aload           6
	//  304  613:getstatic       #618 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalThumbDrawable>
	//  305  616:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  306  619:checkcast       #612 <Class StateListDrawable>
	//  307  622:aload           6
	//  308  624:getstatic       #621 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalTrackDrawable>
	//  309  627:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  310  630:invokevirtual   #625 <Method void initFastScroller(StateListDrawable, Drawable, StateListDrawable, Drawable)>
			typedarray.recycle();
	//  311  633:aload           6
	//  312  635:invokevirtual   #487 <Method void TypedArray.recycle()>
			createLayoutManager(context, s, attributeset, i, 0);
	//  313  638:aload_0         
	//  314  639:aload_1         
	//  315  640:aload           7
	//  316  642:aload_2         
	//  317  643:iload_3         
	//  318  644:iconst_0        
	//  319  645:invokespecial   #629 <Method void createLayoutManager(Context, String, AttributeSet, int, int)>
			flag = flag1;
	//  320  648:iload           5
	//  321  650:istore          4
			if(android.os.Build.VERSION.SDK_INT >= 21)
	//* 322  652:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//* 323  655:bipush          21
	//* 324  657:icmplt          697
			{
				context = ((Context) (context.obtainStyledAttributes(attributeset, NESTED_SCROLLING_ATTRS, i, 0)));
	//  325  660:aload_1         
	//  326  661:aload_2         
	//  327  662:getstatic       #320 <Field int[] NESTED_SCROLLING_ATTRS>
	//  328  665:iload_3         
	//  329  666:iconst_0        
	//  330  667:invokevirtual   #476 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  331  670:astore_1        
				flag = ((TypedArray) (context)).getBoolean(0, true);
	//  332  671:aload_1         
	//  333  672:iconst_0        
	//  334  673:iconst_1        
	//  335  674:invokevirtual   #482 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  336  677:istore          4
				((TypedArray) (context)).recycle();
	//  337  679:aload_1         
	//  338  680:invokevirtual   #487 <Method void TypedArray.recycle()>
			}
		} else
	//* 339  683:goto            697
		{
			setDescendantFocusability(0x40000);
	//  340  686:aload_0         
	//  341  687:ldc2            #594 <Int 0x40000>
	//  342  690:invokevirtual   #598 <Method void setDescendantFocusability(int)>
			flag = flag1;
	//  343  693:iload           5
	//  344  695:istore          4
		}
		setNestedScrollingEnabled(flag);
	//  345  697:aload_0         
	//  346  698:iload           4
	//  347  700:invokevirtual   #632 <Method void setNestedScrollingEnabled(boolean)>
	//  348  703:return          
	}

	private void addAnimatingView(ViewHolder viewholder)
	{
		View view = viewholder.itemView;
	//    0    0:aload_1         
	//    1    1:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//    2    4:astore_3        
		boolean flag;
		if(view.getParent() == this)
	//*   3    5:aload_3         
	//*   4    6:invokevirtual   #667 <Method ViewParent View.getParent()>
	//*   5    9:aload_0         
	//*   6   10:if_acmpne       18
			flag = true;
	//    7   13:iconst_1        
	//    8   14:istore_2        
		else
	//*   9   15:goto            20
			flag = false;
	//   10   18:iconst_0        
	//   11   19:istore_2        
		mRecycler.unscrapView(getChildViewHolder(view));
	//   12   20:aload_0         
	//   13   21:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   14   24:aload_0         
	//   15   25:aload_3         
	//   16   26:invokevirtual   #671 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   29:invokevirtual   #674 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		if(viewholder.isTmpDetached())
	//*  18   32:aload_1         
	//*  19   33:invokevirtual   #677 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*  20   36:ifeq            54
		{
			mChildHelper.attachViewToParent(view, -1, view.getLayoutParams(), true);
	//   21   39:aload_0         
	//   22   40:getfield        #679 <Field ChildHelper mChildHelper>
	//   23   43:aload_3         
	//   24   44:iconst_m1       
	//   25   45:aload_3         
	//   26   46:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   27   49:iconst_1        
	//   28   50:invokevirtual   #688 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			return;
	//   29   53:return          
		}
		if(!flag)
	//*  30   54:iload_2         
	//*  31   55:ifne            68
		{
			mChildHelper.addView(view, true);
	//   32   58:aload_0         
	//   33   59:getfield        #679 <Field ChildHelper mChildHelper>
	//   34   62:aload_3         
	//   35   63:iconst_1        
	//   36   64:invokevirtual   #692 <Method void ChildHelper.addView(View, boolean)>
			return;
	//   37   67:return          
		} else
		{
			mChildHelper.hide(view);
	//   38   68:aload_0         
	//   39   69:getfield        #679 <Field ChildHelper mChildHelper>
	//   40   72:aload_3         
	//   41   73:invokevirtual   #696 <Method void ChildHelper.hide(View)>
			return;
	//   42   76:return          
		}
	}

	private void animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1, boolean flag, boolean flag1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #701 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(flag)
	//*   3    5:iload           5
	//*   4    7:ifeq            15
			addAnimatingView(viewholder);
	//    5   10:aload_0         
	//    6   11:aload_1         
	//    7   12:invokespecial   #703 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		if(viewholder != viewholder1)
	//*   8   15:aload_1         
	//*   9   16:aload_2         
	//*  10   17:if_acmpeq       58
		{
			if(flag1)
	//*  11   20:iload           6
	//*  12   22:ifeq            30
				addAnimatingView(viewholder1);
	//   13   25:aload_0         
	//   14   26:aload_2         
	//   15   27:invokespecial   #703 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			viewholder.mShadowedHolder = viewholder1;
	//   16   30:aload_1         
	//   17   31:aload_2         
	//   18   32:putfield        #707 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			addAnimatingView(viewholder);
	//   19   35:aload_0         
	//   20   36:aload_1         
	//   21   37:invokespecial   #703 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			mRecycler.unscrapView(viewholder);
	//   22   40:aload_0         
	//   23   41:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   24   44:aload_1         
	//   25   45:invokevirtual   #674 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			viewholder1.setIsRecyclable(false);
	//   26   48:aload_2         
	//   27   49:iconst_0        
	//   28   50:invokevirtual   #701 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			viewholder1.mShadowingHolder = viewholder;
	//   29   53:aload_2         
	//   30   54:aload_1         
	//   31   55:putfield        #710 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		}
		if(mItemAnimator.animateChange(viewholder, viewholder1, itemholderinfo, itemholderinfo1))
	//*  32   58:aload_0         
	//*  33   59:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   62:aload_1         
	//*  35   63:aload_2         
	//*  36   64:aload_3         
	//*  37   65:aload           4
	//*  38   67:invokevirtual   #713 <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  39   70:ifeq            77
			postAnimationRunner();
	//   40   73:aload_0         
	//   41   74:invokevirtual   #716 <Method void postAnimationRunner()>
	//   42   77:return          
	}

	private void cancelTouch()
	{
		resetTouch();
	//    0    0:aload_0         
	//    1    1:invokespecial   #720 <Method void resetTouch()>
		setScrollState(0);
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:invokevirtual   #723 <Method void setScrollState(int)>
	//    5    9:return          
	}

	static void clearNestedRecyclerViewIfNotNested(ViewHolder viewholder)
	{
		if(viewholder.mNestedRecyclerView != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #728 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   2    4:ifnull          61
		{
			for(Object obj = ((Object) ((View)viewholder.mNestedRecyclerView.get())); obj != null;)
	//*   3    7:aload_0         
	//*   4    8:getfield        #728 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   5   11:invokevirtual   #733 <Method Object WeakReference.get()>
	//*   6   14:checkcast       #663 <Class View>
	//*   7   17:astore_1        
	//*   8   18:aload_1         
	//*   9   19:ifnull          56
			{
				if(obj == viewholder.itemView)
	//*  10   22:aload_1         
	//*  11   23:aload_0         
	//*  12   24:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  13   27:if_acmpne       31
					return;
	//   14   30:return          
				obj = ((Object) (((View) (obj)).getParent()));
	//   15   31:aload_1         
	//   16   32:invokevirtual   #667 <Method ViewParent View.getParent()>
	//   17   35:astore_1        
				if(obj instanceof View)
	//*  18   36:aload_1         
	//*  19   37:instanceof      #663 <Class View>
	//*  20   40:ifeq            51
					obj = ((Object) ((View)obj));
	//   21   43:aload_1         
	//   22   44:checkcast       #663 <Class View>
	//   23   47:astore_1        
				else
	//*  24   48:goto            18
					obj = null;
	//   25   51:aconst_null     
	//   26   52:astore_1        
			}

	//*  27   53:goto            18
			viewholder.mNestedRecyclerView = null;
	//   28   56:aload_0         
	//   29   57:aconst_null     
	//   30   58:putfield        #728 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		}
	//   31   61:return          
	}

	private void createLayoutManager(Context context, String s, AttributeSet attributeset, int i, int j)
	{
		String s1;
		if(s == null)
			break MISSING_BLOCK_LABEL_430;
	//    0    0:aload_2         
	//    1    1:ifnull          430
		s = s.trim();
	//    2    4:aload_2         
	//    3    5:invokevirtual   #751 <Method String String.trim()>
	//    4    8:astore_2        
		if(s.isEmpty())
			break MISSING_BLOCK_LABEL_430;
	//    5    9:aload_2         
	//    6   10:invokevirtual   #754 <Method boolean String.isEmpty()>
	//    7   13:ifne            430
		s1 = getFullClassName(context, s);
	//    8   16:aload_0         
	//    9   17:aload_1         
	//   10   18:aload_2         
	//   11   19:invokespecial   #758 <Method String getFullClassName(Context, String)>
	//   12   22:astore          7
		if(isInEditMode())
	//*  13   24:aload_0         
	//*  14   25:invokevirtual   #761 <Method boolean isInEditMode()>
	//*  15   28:ifeq            42
		{
			s = ((String) (((Object)this).getClass().getClassLoader()));
	//   16   31:aload_0         
	//   17   32:invokevirtual   #767 <Method Class Object.getClass()>
	//   18   35:invokevirtual   #771 <Method ClassLoader Class.getClassLoader()>
	//   19   38:astore_2        
			break MISSING_BLOCK_LABEL_47;
	//   20   39:goto            47
		}
		s = ((String) (context.getClassLoader()));
	//   21   42:aload_1         
	//   22   43:invokevirtual   #772 <Method ClassLoader Context.getClassLoader()>
	//   23   46:astore_2        
		Class class1 = ((ClassLoader) (s)).loadClass(s1).asSubclass(android/support/v7/widget/RecyclerView$LayoutManager);
	//   24   47:aload_2         
	//   25   48:aload           7
	//   26   50:invokevirtual   #778 <Method Class ClassLoader.loadClass(String)>
	//   27   53:ldc1            #61  <Class RecyclerView$LayoutManager>
	//   28   55:invokevirtual   #782 <Method Class Class.asSubclass(Class)>
	//   29   58:astore          8
		Object obj = null;
	//   30   60:aconst_null     
	//   31   61:astore          6
		s = ((String) (class1.getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE)));
	//   32   63:aload           8
	//   33   65:getstatic       #354 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   34   68:invokevirtual   #786 <Method Constructor Class.getConstructor(Class[])>
	//   35   71:astore_2        
		context = ((Context) (new Object[] {
			context, attributeset, Integer.valueOf(i), Integer.valueOf(j)
		}));
	//   36   72:iconst_4        
	//   37   73:anewarray       Object[]
	//   38   76:dup             
	//   39   77:iconst_0        
	//   40   78:aload_1         
	//   41   79:aastore         
	//   42   80:dup             
	//   43   81:iconst_1        
	//   44   82:aload_3         
	//   45   83:aastore         
	//   46   84:dup             
	//   47   85:iconst_2        
	//   48   86:iload           4
	//   49   88:invokestatic    #790 <Method Integer Integer.valueOf(int)>
	//   50   91:aastore         
	//   51   92:dup             
	//   52   93:iconst_3        
	//   53   94:iload           5
	//   54   96:invokestatic    #790 <Method Integer Integer.valueOf(int)>
	//   55   99:aastore         
	//   56  100:astore_1        
		break MISSING_BLOCK_LABEL_118;
	//   57  101:goto            118
		context;
	//   58  104:astore_1        
		s = ((String) (class1.getConstructor(new Class[0])));
	//   59  105:aload           8
	//   60  107:iconst_0        
	//   61  108:anewarray       Class[]
	//   62  111:invokevirtual   #786 <Method Constructor Class.getConstructor(Class[])>
	//   63  114:astore_2        
		context = ((Context) (obj));
	//   64  115:aload           6
	//   65  117:astore_1        
		try
		{
			((Constructor) (s)).setAccessible(true);
	//   66  118:aload_2         
	//   67  119:iconst_1        
	//   68  120:invokevirtual   #795 <Method void Constructor.setAccessible(boolean)>
			setLayoutManager((LayoutManager)((Constructor) (s)).newInstance(((Object []) (context))));
	//   69  123:aload_0         
	//   70  124:aload_2         
	//   71  125:aload_1         
	//   72  126:invokevirtual   #799 <Method Object Constructor.newInstance(Object[])>
	//   73  129:checkcast       #61  <Class RecyclerView$LayoutManager>
	//   74  132:invokevirtual   #803 <Method void setLayoutManager(RecyclerView$LayoutManager)>
			return;
	//   75  135:return          
		}
	//*  76  136:astore_2        
	//*  77  137:aload_2         
	//*  78  138:aload_1         
	//*  79  139:invokevirtual   #807 <Method Throwable NoSuchMethodException.initCause(Throwable)>
	//*  80  142:pop             
	//*  81  143:new             #809 <Class StringBuilder>
	//*  82  146:dup             
	//*  83  147:invokespecial   #810 <Method void StringBuilder()>
	//*  84  150:astore_1        
	//*  85  151:aload_1         
	//*  86  152:aload_3         
	//*  87  153:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//*  88  158:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//*  89  161:pop             
	//*  90  162:aload_1         
	//*  91  163:ldc2            #819 <String ": Error creating LayoutManager ">
	//*  92  166:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//*  93  169:pop             
	//*  94  170:aload_1         
	//*  95  171:aload           7
	//*  96  173:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//*  97  176:pop             
	//*  98  177:new             #821 <Class IllegalStateException>
	//*  99  180:dup             
	//* 100  181:aload_1         
	//* 101  182:invokevirtual   #824 <Method String StringBuilder.toString()>
	//* 102  185:aload_2         
	//* 103  186:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//* 104  189:athrow          
	//* 105  190:astore_1        
	//* 106  191:new             #809 <Class StringBuilder>
	//* 107  194:dup             
	//* 108  195:invokespecial   #810 <Method void StringBuilder()>
	//* 109  198:astore_2        
	//* 110  199:aload_2         
	//* 111  200:aload_3         
	//* 112  201:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//* 113  206:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 114  209:pop             
	//* 115  210:aload_2         
	//* 116  211:ldc2            #829 <String ": Class is not a LayoutManager ">
	//* 117  214:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 118  217:pop             
	//* 119  218:aload_2         
	//* 120  219:aload           7
	//* 121  221:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 122  224:pop             
	//* 123  225:new             #821 <Class IllegalStateException>
	//* 124  228:dup             
	//* 125  229:aload_2         
	//* 126  230:invokevirtual   #824 <Method String StringBuilder.toString()>
	//* 127  233:aload_1         
	//* 128  234:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//* 129  237:athrow          
	//* 130  238:astore_1        
	//* 131  239:new             #809 <Class StringBuilder>
	//* 132  242:dup             
	//* 133  243:invokespecial   #810 <Method void StringBuilder()>
	//* 134  246:astore_2        
	//* 135  247:aload_2         
	//* 136  248:aload_3         
	//* 137  249:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//* 138  254:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 139  257:pop             
	//* 140  258:aload_2         
	//* 141  259:ldc2            #831 <String ": Cannot access non-public constructor ">
	//* 142  262:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 143  265:pop             
	//* 144  266:aload_2         
	//* 145  267:aload           7
	//* 146  269:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 147  272:pop             
	//* 148  273:new             #821 <Class IllegalStateException>
	//* 149  276:dup             
	//* 150  277:aload_2         
	//* 151  278:invokevirtual   #824 <Method String StringBuilder.toString()>
	//* 152  281:aload_1         
	//* 153  282:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//* 154  285:athrow          
	//* 155  286:astore_1        
	//* 156  287:new             #809 <Class StringBuilder>
	//* 157  290:dup             
	//* 158  291:invokespecial   #810 <Method void StringBuilder()>
	//* 159  294:astore_2        
	//* 160  295:aload_2         
	//* 161  296:aload_3         
	//* 162  297:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//* 163  302:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 164  305:pop             
	//* 165  306:aload_2         
	//* 166  307:ldc2            #833 <String ": Could not instantiate the LayoutManager: ">
	//* 167  310:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 168  313:pop             
	//* 169  314:aload_2         
	//* 170  315:aload           7
	//* 171  317:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 172  320:pop             
	//* 173  321:new             #821 <Class IllegalStateException>
	//* 174  324:dup             
	//* 175  325:aload_2         
	//* 176  326:invokevirtual   #824 <Method String StringBuilder.toString()>
	//* 177  329:aload_1         
	//* 178  330:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//* 179  333:athrow          
	//* 180  334:astore_1        
	//* 181  335:new             #809 <Class StringBuilder>
	//* 182  338:dup             
	//* 183  339:invokespecial   #810 <Method void StringBuilder()>
	//* 184  342:astore_2        
	//* 185  343:aload_2         
	//* 186  344:aload_3         
	//* 187  345:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//* 188  350:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 189  353:pop             
	//* 190  354:aload_2         
	//* 191  355:ldc2            #833 <String ": Could not instantiate the LayoutManager: ">
	//* 192  358:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 193  361:pop             
	//* 194  362:aload_2         
	//* 195  363:aload           7
	//* 196  365:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//* 197  368:pop             
	//* 198  369:new             #821 <Class IllegalStateException>
	//* 199  372:dup             
	//* 200  373:aload_2         
	//* 201  374:invokevirtual   #824 <Method String StringBuilder.toString()>
	//* 202  377:aload_1         
	//* 203  378:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//* 204  381:athrow          
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 205  382:astore_1        
		{
			s = ((String) (new StringBuilder()));
	//  206  383:new             #809 <Class StringBuilder>
	//  207  386:dup             
	//  208  387:invokespecial   #810 <Method void StringBuilder()>
	//  209  390:astore_2        
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Could not instantiate the LayoutManager: ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Could not instantiate the LayoutManager: ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Cannot access non-public constructor ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Class is not a LayoutManager ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		break MISSING_BLOCK_LABEL_391;
		s;
		((NoSuchMethodException) (s)).initCause(((Throwable) (context)));
		context = ((Context) (new StringBuilder()));
		((StringBuilder) (context)).append(attributeset.getPositionDescription());
		((StringBuilder) (context)).append(": Error creating LayoutManager ");
		((StringBuilder) (context)).append(s1);
		throw new IllegalStateException(((StringBuilder) (context)).toString(), ((Throwable) (s)));
		((StringBuilder) (s)).append(attributeset.getPositionDescription());
	//  210  391:aload_2         
	//  211  392:aload_3         
	//  212  393:invokeinterface #813 <Method String AttributeSet.getPositionDescription()>
	//  213  398:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  214  401:pop             
		((StringBuilder) (s)).append(": Unable to find LayoutManager ");
	//  215  402:aload_2         
	//  216  403:ldc2            #835 <String ": Unable to find LayoutManager ">
	//  217  406:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  218  409:pop             
		((StringBuilder) (s)).append(s1);
	//  219  410:aload_2         
	//  220  411:aload           7
	//  221  413:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  222  416:pop             
		throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
	//  223  417:new             #821 <Class IllegalStateException>
	//  224  420:dup             
	//  225  421:aload_2         
	//  226  422:invokevirtual   #824 <Method String StringBuilder.toString()>
	//  227  425:aload_1         
	//  228  426:invokespecial   #827 <Method void IllegalStateException(String, Throwable)>
	//  229  429:athrow          
	//  230  430:return          
	}

	private boolean didChildRangeChange(int i, int j)
	{
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #456 <Field int[] mMinMaxLayoutPositions>
	//    3    5:invokespecial   #841 <Method void findMinMaxChildLayoutPositions(int[])>
		int ai[] = mMinMaxLayoutPositions;
	//    4    8:aload_0         
	//    5    9:getfield        #456 <Field int[] mMinMaxLayoutPositions>
	//    6   12:astore          4
		boolean flag = false;
	//    7   14:iconst_0        
	//    8   15:istore_3        
		if(ai[0] != i || ai[1] != j)
	//*   9   16:aload           4
	//*  10   18:iconst_0        
	//*  11   19:iaload          
	//*  12   20:iload_1         
	//*  13   21:icmpne          32
	//*  14   24:aload           4
	//*  15   26:iconst_1        
	//*  16   27:iaload          
	//*  17   28:iload_2         
	//*  18   29:icmpeq          34
			flag = true;
	//   19   32:iconst_1        
	//   20   33:istore_3        
		return flag;
	//   21   34:iload_3         
	//   22   35:ireturn         
	}

	private void dispatchContentChangedIfNecessary()
	{
		int i = mEatenAccessibilityChangeFlags;
	//    0    0:aload_0         
	//    1    1:getfield        #844 <Field int mEatenAccessibilityChangeFlags>
	//    2    4:istore_1        
		mEatenAccessibilityChangeFlags = 0;
	//    3    5:aload_0         
	//    4    6:iconst_0        
	//    5    7:putfield        #844 <Field int mEatenAccessibilityChangeFlags>
		if(i != 0 && isAccessibilityEnabled())
	//*   6   10:iload_1         
	//*   7   11:ifeq            42
	//*   8   14:aload_0         
	//*   9   15:invokevirtual   #847 <Method boolean isAccessibilityEnabled()>
	//*  10   18:ifeq            42
		{
			AccessibilityEvent accessibilityevent = AccessibilityEvent.obtain();
	//   11   21:invokestatic    #853 <Method AccessibilityEvent AccessibilityEvent.obtain()>
	//   12   24:astore_2        
			accessibilityevent.setEventType(2048);
	//   13   25:aload_2         
	//   14   26:sipush          2048
	//   15   29:invokevirtual   #856 <Method void AccessibilityEvent.setEventType(int)>
			AccessibilityEventCompat.setContentChangeTypes(accessibilityevent, i);
	//   16   32:aload_2         
	//   17   33:iload_1         
	//   18   34:invokestatic    #862 <Method void AccessibilityEventCompat.setContentChangeTypes(AccessibilityEvent, int)>
			sendAccessibilityEventUnchecked(accessibilityevent);
	//   19   37:aload_0         
	//   20   38:aload_2         
	//   21   39:invokevirtual   #866 <Method void sendAccessibilityEventUnchecked(AccessibilityEvent)>
		}
	//   22   42:return          
	}

	private void dispatchLayoutStep1()
	{
		State state = mState;
	//    0    0:aload_0         
	//    1    1:getfield        #445 <Field RecyclerView$State mState>
	//    2    4:astore          7
		boolean flag = true;
	//    3    6:iconst_1        
	//    4    7:istore          4
		state.assertLayoutStep(1);
	//    5    9:aload           7
	//    6   11:iconst_1        
	//    7   12:invokevirtual   #870 <Method void RecyclerView$State.assertLayoutStep(int)>
		fillRemainingScrollValues(mState);
	//    8   15:aload_0         
	//    9   16:aload_0         
	//   10   17:getfield        #445 <Field RecyclerView$State mState>
	//   11   20:invokevirtual   #874 <Method void fillRemainingScrollValues(RecyclerView$State)>
		mState.mIsMeasuring = false;
	//   12   23:aload_0         
	//   13   24:getfield        #445 <Field RecyclerView$State mState>
	//   14   27:iconst_0        
	//   15   28:putfield        #877 <Field boolean RecyclerView$State.mIsMeasuring>
		startInterceptRequestLayout();
	//   16   31:aload_0         
	//   17   32:invokevirtual   #880 <Method void startInterceptRequestLayout()>
		mViewInfoStore.clear();
	//   18   35:aload_0         
	//   19   36:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   20   39:invokevirtual   #883 <Method void ViewInfoStore.clear()>
		onEnterLayoutOrScroll();
	//   21   42:aload_0         
	//   22   43:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
		processAdapterUpdatesAndSetAnimationFlags();
	//   23   46:aload_0         
	//   24   47:invokespecial   #889 <Method void processAdapterUpdatesAndSetAnimationFlags()>
		saveFocusInfo();
	//   25   50:aload_0         
	//   26   51:invokespecial   #892 <Method void saveFocusInfo()>
		state = mState;
	//   27   54:aload_0         
	//   28   55:getfield        #445 <Field RecyclerView$State mState>
	//   29   58:astore          7
		if(!state.mRunSimpleAnimations || !mItemsChanged)
	//*  30   60:aload           7
	//*  31   62:getfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  32   65:ifeq            78
	//*  33   68:aload_0         
	//*  34   69:getfield        #449 <Field boolean mItemsChanged>
	//*  35   72:ifeq            78
	//*  36   75:goto            81
			flag = false;
	//   37   78:iconst_0        
	//   38   79:istore          4
		state.mTrackOldChangeHolders = flag;
	//   39   81:aload           7
	//   40   83:iload           4
	//   41   85:putfield        #898 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
		mItemsChanged = false;
	//   42   88:aload_0         
	//   43   89:iconst_0        
	//   44   90:putfield        #449 <Field boolean mItemsChanged>
		mItemsAddedOrRemoved = false;
	//   45   93:aload_0         
	//   46   94:iconst_0        
	//   47   95:putfield        #447 <Field boolean mItemsAddedOrRemoved>
		state = mState;
	//   48   98:aload_0         
	//   49   99:getfield        #445 <Field RecyclerView$State mState>
	//   50  102:astore          7
		state.mInPreLayout = state.mRunPredictiveAnimations;
	//   51  104:aload           7
	//   52  106:aload           7
	//   53  108:getfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   54  111:putfield        #904 <Field boolean RecyclerView$State.mInPreLayout>
		mState.mItemCount = mAdapter.getItemCount();
	//   55  114:aload_0         
	//   56  115:getfield        #445 <Field RecyclerView$State mState>
	//   57  118:aload_0         
	//   58  119:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   59  122:invokevirtual   #909 <Method int RecyclerView$Adapter.getItemCount()>
	//   60  125:putfield        #912 <Field int RecyclerView$State.mItemCount>
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//   61  128:aload_0         
	//   62  129:aload_0         
	//   63  130:getfield        #456 <Field int[] mMinMaxLayoutPositions>
	//   64  133:invokespecial   #841 <Method void findMinMaxChildLayoutPositions(int[])>
		if(mState.mRunSimpleAnimations)
	//*  65  136:aload_0         
	//*  66  137:getfield        #445 <Field RecyclerView$State mState>
	//*  67  140:getfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  68  143:ifeq            307
		{
			int k = mChildHelper.getChildCount();
	//   69  146:aload_0         
	//   70  147:getfield        #679 <Field ChildHelper mChildHelper>
	//   71  150:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//   72  153:istore_2        
			for(int i = 0; i < k; i++)
	//*  73  154:iconst_0        
	//*  74  155:istore_1        
	//*  75  156:iload_1         
	//*  76  157:iload_2         
	//*  77  158:icmpge          307
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   78  161:aload_0         
	//   79  162:getfield        #679 <Field ChildHelper mChildHelper>
	//   80  165:iload_1         
	//   81  166:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   82  169:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   83  172:astore          7
				if(viewholder.shouldIgnore() || viewholder.isInvalid() && !mAdapter.hasStableIds())
	//*  84  174:aload           7
	//*  85  176:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  86  179:ifne            300
	//*  87  182:aload           7
	//*  88  184:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//*  89  187:ifeq            203
	//*  90  190:aload_0         
	//*  91  191:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  92  194:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  93  197:ifne            203
					continue;
	//   94  200:goto            300
				ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, viewholder, ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder), viewholder.getUnmodifiedPayloads());
	//   95  203:aload_0         
	//   96  204:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   97  207:aload_0         
	//   98  208:getfield        #445 <Field RecyclerView$State mState>
	//   99  211:aload           7
	//  100  213:aload           7
	//  101  215:invokestatic    #935 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  102  218:aload           7
	//  103  220:invokevirtual   #939 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  104  223:invokevirtual   #943 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  105  226:astore          8
				mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//  106  228:aload_0         
	//  107  229:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  108  232:aload           7
	//  109  234:aload           8
	//  110  236:invokevirtual   #947 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore() && !viewholder.isInvalid())
	//* 111  239:aload_0         
	//* 112  240:getfield        #445 <Field RecyclerView$State mState>
	//* 113  243:getfield        #898 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//* 114  246:ifeq            300
	//* 115  249:aload           7
	//* 116  251:invokevirtual   #950 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//* 117  254:ifeq            300
	//* 118  257:aload           7
	//* 119  259:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//* 120  262:ifne            300
	//* 121  265:aload           7
	//* 122  267:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 123  270:ifne            300
	//* 124  273:aload           7
	//* 125  275:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//* 126  278:ifne            300
				{
					long l1 = getChangedHolderKey(viewholder);
	//  127  281:aload_0         
	//  128  282:aload           7
	//  129  284:invokevirtual   #957 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//  130  287:lstore          5
					mViewInfoStore.addToOldChangeHolders(l1, viewholder);
	//  131  289:aload_0         
	//  132  290:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  133  293:lload           5
	//  134  295:aload           7
	//  135  297:invokevirtual   #961 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
				}
			}

	//  136  300:iload_1         
	//  137  301:iconst_1        
	//  138  302:iadd            
	//  139  303:istore_1        
		}
	//* 140  304:goto            156
		if(mState.mRunPredictiveAnimations)
	//* 141  307:aload_0         
	//* 142  308:getfield        #445 <Field RecyclerView$State mState>
	//* 143  311:getfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 144  314:ifeq            504
		{
			saveOldPositions();
	//  145  317:aload_0         
	//  146  318:invokevirtual   #964 <Method void saveOldPositions()>
			boolean flag1 = mState.mStructureChanged;
	//  147  321:aload_0         
	//  148  322:getfield        #445 <Field RecyclerView$State mState>
	//  149  325:getfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
	//  150  328:istore          4
			State state1 = mState;
	//  151  330:aload_0         
	//  152  331:getfield        #445 <Field RecyclerView$State mState>
	//  153  334:astore          7
			state1.mStructureChanged = false;
	//  154  336:aload           7
	//  155  338:iconst_0        
	//  156  339:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
			mLayout.onLayoutChildren(mRecycler, state1);
	//  157  342:aload_0         
	//  158  343:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  159  346:aload_0         
	//  160  347:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  161  350:aload           7
	//  162  352:invokevirtual   #973 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
			mState.mStructureChanged = flag1;
	//  163  355:aload_0         
	//  164  356:getfield        #445 <Field RecyclerView$State mState>
	//  165  359:iload           4
	//  166  361:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
			for(int j = 0; j < mChildHelper.getChildCount(); j++)
	//* 167  364:iconst_0        
	//* 168  365:istore_1        
	//* 169  366:iload_1         
	//* 170  367:aload_0         
	//* 171  368:getfield        #679 <Field ChildHelper mChildHelper>
	//* 172  371:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//* 173  374:icmpge          497
			{
				ViewHolder viewholder1 = getChildViewHolderInt(mChildHelper.getChildAt(j));
	//  174  377:aload_0         
	//  175  378:getfield        #679 <Field ChildHelper mChildHelper>
	//  176  381:iload_1         
	//  177  382:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//  178  385:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//  179  388:astore          7
				if(viewholder1.shouldIgnore() || mViewInfoStore.isInPreLayout(viewholder1))
					continue;
	//  180  390:aload           7
	//  181  392:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//  182  395:ifeq            401
	//  183  398:goto            490
	//  184  401:aload_0         
	//  185  402:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  186  405:aload           7
	//  187  407:invokevirtual   #977 <Method boolean ViewInfoStore.isInPreLayout(RecyclerView$ViewHolder)>
	//  188  410:ifne            490
				int i1 = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder1);
	//  189  413:aload           7
	//  190  415:invokestatic    #935 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  191  418:istore_3        
				boolean flag2 = viewholder1.hasAnyOfTheFlags(8192);
	//  192  419:aload           7
	//  193  421:sipush          8192
	//  194  424:invokevirtual   #981 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//  195  427:istore          4
				int l = i1;
	//  196  429:iload_3         
	//  197  430:istore_2        
				if(!flag2)
	//* 198  431:iload           4
	//* 199  433:ifne            442
					l = i1 | 0x1000;
	//  200  436:iload_3         
	//  201  437:sipush          4096
	//  202  440:ior             
	//  203  441:istore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPreLayoutInformation(mState, viewholder1, l, viewholder1.getUnmodifiedPayloads());
	//  204  442:aload_0         
	//  205  443:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  206  446:aload_0         
	//  207  447:getfield        #445 <Field RecyclerView$State mState>
	//  208  450:aload           7
	//  209  452:iload_2         
	//  210  453:aload           7
	//  211  455:invokevirtual   #939 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  212  458:invokevirtual   #943 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  213  461:astore          8
				if(flag2)
	//* 214  463:iload           4
	//* 215  465:ifeq            479
					recordAnimationInfoIfBouncedHiddenView(viewholder1, itemholderinfo1);
	//  216  468:aload_0         
	//  217  469:aload           7
	//  218  471:aload           8
	//  219  473:invokevirtual   #984 <Method void recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				else
	//* 220  476:goto            490
					mViewInfoStore.addToAppearedInPreLayoutHolders(viewholder1, itemholderinfo1);
	//  221  479:aload_0         
	//  222  480:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  223  483:aload           7
	//  224  485:aload           8
	//  225  487:invokevirtual   #987 <Method void ViewInfoStore.addToAppearedInPreLayoutHolders(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
			}

	//  226  490:iload_1         
	//  227  491:iconst_1        
	//  228  492:iadd            
	//  229  493:istore_1        
	//* 230  494:goto            366
			clearOldPositions();
	//  231  497:aload_0         
	//  232  498:invokevirtual   #990 <Method void clearOldPositions()>
		} else
	//* 233  501:goto            508
		{
			clearOldPositions();
	//  234  504:aload_0         
	//  235  505:invokevirtual   #990 <Method void clearOldPositions()>
		}
		onExitLayoutOrScroll();
	//  236  508:aload_0         
	//  237  509:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//  238  512:aload_0         
	//  239  513:iconst_0        
	//  240  514:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
		mState.mLayoutStep = 2;
	//  241  517:aload_0         
	//  242  518:getfield        #445 <Field RecyclerView$State mState>
	//  243  521:iconst_2        
	//  244  522:putfield        #999 <Field int RecyclerView$State.mLayoutStep>
	//  245  525:return          
	}

	private void dispatchLayoutStep2()
	{
		startInterceptRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #880 <Method void startInterceptRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
		mState.assertLayoutStep(6);
	//    4    8:aload_0         
	//    5    9:getfield        #445 <Field RecyclerView$State mState>
	//    6   12:bipush          6
	//    7   14:invokevirtual   #870 <Method void RecyclerView$State.assertLayoutStep(int)>
		mAdapterHelper.consumeUpdatesInOnePass();
	//    8   17:aload_0         
	//    9   18:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   10   21:invokevirtual   #1007 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		mState.mItemCount = mAdapter.getItemCount();
	//   11   24:aload_0         
	//   12   25:getfield        #445 <Field RecyclerView$State mState>
	//   13   28:aload_0         
	//   14   29:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   15   32:invokevirtual   #909 <Method int RecyclerView$Adapter.getItemCount()>
	//   16   35:putfield        #912 <Field int RecyclerView$State.mItemCount>
		State state = mState;
	//   17   38:aload_0         
	//   18   39:getfield        #445 <Field RecyclerView$State mState>
	//   19   42:astore_2        
		state.mDeletedInvisibleItemCountSincePreviousLayout = 0;
	//   20   43:aload_2         
	//   21   44:iconst_0        
	//   22   45:putfield        #1010 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
		state.mInPreLayout = false;
	//   23   48:aload_2         
	//   24   49:iconst_0        
	//   25   50:putfield        #904 <Field boolean RecyclerView$State.mInPreLayout>
		mLayout.onLayoutChildren(mRecycler, state);
	//   26   53:aload_0         
	//   27   54:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   28   57:aload_0         
	//   29   58:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   30   61:aload_2         
	//   31   62:invokevirtual   #973 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		state = mState;
	//   32   65:aload_0         
	//   33   66:getfield        #445 <Field RecyclerView$State mState>
	//   34   69:astore_2        
		state.mStructureChanged = false;
	//   35   70:aload_2         
	//   36   71:iconst_0        
	//   37   72:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
		mPendingSavedState = null;
	//   38   75:aload_0         
	//   39   76:aconst_null     
	//   40   77:putfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
		boolean flag;
		if(state.mRunSimpleAnimations && mItemAnimator != null)
	//*  41   80:aload_2         
	//*  42   81:getfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  43   84:ifeq            99
	//*  44   87:aload_0         
	//*  45   88:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  46   91:ifnull          99
			flag = true;
	//   47   94:iconst_1        
	//   48   95:istore_1        
		else
	//*  49   96:goto            101
			flag = false;
	//   50   99:iconst_0        
	//   51  100:istore_1        
		state.mRunSimpleAnimations = flag;
	//   52  101:aload_2         
	//   53  102:iload_1         
	//   54  103:putfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mLayoutStep = 4;
	//   55  106:aload_0         
	//   56  107:getfield        #445 <Field RecyclerView$State mState>
	//   57  110:iconst_4        
	//   58  111:putfield        #999 <Field int RecyclerView$State.mLayoutStep>
		onExitLayoutOrScroll();
	//   59  114:aload_0         
	//   60  115:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//   61  118:aload_0         
	//   62  119:iconst_0        
	//   63  120:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
	//   64  123:return          
	}

	private void dispatchLayoutStep3()
	{
		mState.assertLayoutStep(4);
	//    0    0:aload_0         
	//    1    1:getfield        #445 <Field RecyclerView$State mState>
	//    2    4:iconst_4        
	//    3    5:invokevirtual   #870 <Method void RecyclerView$State.assertLayoutStep(int)>
		startInterceptRequestLayout();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #880 <Method void startInterceptRequestLayout()>
		onEnterLayoutOrScroll();
	//    6   12:aload_0         
	//    7   13:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
		Object obj = ((Object) (mState));
	//    8   16:aload_0         
	//    9   17:getfield        #445 <Field RecyclerView$State mState>
	//   10   20:astore          6
		obj.mLayoutStep = 1;
	//   11   22:aload           6
	//   12   24:iconst_1        
	//   13   25:putfield        #999 <Field int RecyclerView$State.mLayoutStep>
		if(((State) (obj)).mRunSimpleAnimations)
	//*  14   28:aload           6
	//*  15   30:getfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  16   33:ifeq            265
		{
			for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*  17   36:aload_0         
	//*  18   37:getfield        #679 <Field ChildHelper mChildHelper>
	//*  19   40:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//*  20   43:iconst_1        
	//*  21   44:isub            
	//*  22   45:istore_1        
	//*  23   46:iload_1         
	//*  24   47:iflt            254
			{
				obj = ((Object) (getChildViewHolderInt(mChildHelper.getChildAt(i))));
	//   25   50:aload_0         
	//   26   51:getfield        #679 <Field ChildHelper mChildHelper>
	//   27   54:iload_1         
	//   28   55:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   29   58:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   30   61:astore          6
				if(((ViewHolder) (obj)).shouldIgnore())
	//*  31   63:aload           6
	//*  32   65:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  33   68:ifeq            74
					continue;
	//   34   71:goto            247
				long l = getChangedHolderKey(((ViewHolder) (obj)));
	//   35   74:aload_0         
	//   36   75:aload           6
	//   37   77:invokevirtual   #957 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   38   80:lstore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPostLayoutInformation(mState, ((ViewHolder) (obj)));
	//   39   81:aload_0         
	//   40   82:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   41   85:aload_0         
	//   42   86:getfield        #445 <Field RecyclerView$State mState>
	//   43   89:aload           6
	//   44   91:invokevirtual   #1017 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPostLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder)>
	//   45   94:astore          9
				ViewHolder viewholder = mViewInfoStore.getFromOldChangeHolders(l);
	//   46   96:aload_0         
	//   47   97:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   48  100:lload_2         
	//   49  101:invokevirtual   #1021 <Method RecyclerView$ViewHolder ViewInfoStore.getFromOldChangeHolders(long)>
	//   50  104:astore          7
				if(viewholder != null && !viewholder.shouldIgnore())
	//*  51  106:aload           7
	//*  52  108:ifnull          236
	//*  53  111:aload           7
	//*  54  113:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  55  116:ifne            236
				{
					boolean flag = mViewInfoStore.isDisappearing(viewholder);
	//   56  119:aload_0         
	//   57  120:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   58  123:aload           7
	//   59  125:invokevirtual   #1024 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   60  128:istore          4
					boolean flag1 = mViewInfoStore.isDisappearing(((ViewHolder) (obj)));
	//   61  130:aload_0         
	//   62  131:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   63  134:aload           6
	//   64  136:invokevirtual   #1024 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   65  139:istore          5
					if(flag && viewholder == obj)
	//*  66  141:iload           4
	//*  67  143:ifeq            167
	//*  68  146:aload           7
	//*  69  148:aload           6
	//*  70  150:if_acmpne       167
					{
						mViewInfoStore.addToPostLayout(((ViewHolder) (obj)), itemholderinfo1);
	//   71  153:aload_0         
	//   72  154:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   73  157:aload           6
	//   74  159:aload           9
	//   75  161:invokevirtual   #1027 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
						continue;
	//   76  164:goto            247
					}
					ItemAnimator.ItemHolderInfo itemholderinfo = mViewInfoStore.popFromPreLayout(viewholder);
	//   77  167:aload_0         
	//   78  168:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   79  171:aload           7
	//   80  173:invokevirtual   #1031 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPreLayout(RecyclerView$ViewHolder)>
	//   81  176:astore          8
					mViewInfoStore.addToPostLayout(((ViewHolder) (obj)), itemholderinfo1);
	//   82  178:aload_0         
	//   83  179:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   84  182:aload           6
	//   85  184:aload           9
	//   86  186:invokevirtual   #1027 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					itemholderinfo1 = mViewInfoStore.popFromPostLayout(((ViewHolder) (obj)));
	//   87  189:aload_0         
	//   88  190:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   89  193:aload           6
	//   90  195:invokevirtual   #1034 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPostLayout(RecyclerView$ViewHolder)>
	//   91  198:astore          9
					if(itemholderinfo == null)
	//*  92  200:aload           8
	//*  93  202:ifnonnull       217
						handleMissingPreInfoForChangeError(l, ((ViewHolder) (obj)), viewholder);
	//   94  205:aload_0         
	//   95  206:lload_2         
	//   96  207:aload           6
	//   97  209:aload           7
	//   98  211:invokespecial   #1038 <Method void handleMissingPreInfoForChangeError(long, RecyclerView$ViewHolder, RecyclerView$ViewHolder)>
					else
	//*  99  214:goto            247
						animateChange(viewholder, ((ViewHolder) (obj)), itemholderinfo, itemholderinfo1, flag, flag1);
	//  100  217:aload_0         
	//  101  218:aload           7
	//  102  220:aload           6
	//  103  222:aload           8
	//  104  224:aload           9
	//  105  226:iload           4
	//  106  228:iload           5
	//  107  230:invokespecial   #1040 <Method void animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo, boolean, boolean)>
				} else
	//* 108  233:goto            247
				{
					mViewInfoStore.addToPostLayout(((ViewHolder) (obj)), itemholderinfo1);
	//  109  236:aload_0         
	//  110  237:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  111  240:aload           6
	//  112  242:aload           9
	//  113  244:invokevirtual   #1027 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				}
			}

	//  114  247:iload_1         
	//  115  248:iconst_1        
	//  116  249:isub            
	//  117  250:istore_1        
	//* 118  251:goto            46
			mViewInfoStore.process(mViewInfoProcessCallback);
	//  119  254:aload_0         
	//  120  255:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  121  258:aload_0         
	//  122  259:getfield        #472 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//  123  262:invokevirtual   #1044 <Method void ViewInfoStore.process(ViewInfoStore$ProcessCallback)>
		}
		mLayout.removeAndRecycleScrapInt(mRecycler);
	//  124  265:aload_0         
	//  125  266:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  126  269:aload_0         
	//  127  270:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  128  273:invokevirtual   #1048 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		obj = ((Object) (mState));
	//  129  276:aload_0         
	//  130  277:getfield        #445 <Field RecyclerView$State mState>
	//  131  280:astore          6
		obj.mPreviousLayoutItemCount = ((State) (obj)).mItemCount;
	//  132  282:aload           6
	//  133  284:aload           6
	//  134  286:getfield        #912 <Field int RecyclerView$State.mItemCount>
	//  135  289:putfield        #1051 <Field int RecyclerView$State.mPreviousLayoutItemCount>
		mDataSetHasChangedAfterLayout = false;
	//  136  292:aload_0         
	//  137  293:iconst_0        
	//  138  294:putfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
		mDispatchItemsChangedEvent = false;
	//  139  297:aload_0         
	//  140  298:iconst_0        
	//  141  299:putfield        #411 <Field boolean mDispatchItemsChangedEvent>
		obj = ((Object) (mState));
	//  142  302:aload_0         
	//  143  303:getfield        #445 <Field RecyclerView$State mState>
	//  144  306:astore          6
		obj.mRunSimpleAnimations = false;
	//  145  308:aload           6
	//  146  310:iconst_0        
	//  147  311:putfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		obj.mRunPredictiveAnimations = false;
	//  148  314:aload           6
	//  149  316:iconst_0        
	//  150  317:putfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
		mLayout.mRequestedSimpleAnimations = false;
	//  151  320:aload_0         
	//  152  321:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  153  324:iconst_0        
	//  154  325:putfield        #1054 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
		if(mRecycler.mChangedScrap != null)
	//* 155  328:aload_0         
	//* 156  329:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//* 157  332:getfield        #1057 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//* 158  335:ifnull          348
			mRecycler.mChangedScrap.clear();
	//  159  338:aload_0         
	//  160  339:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  161  342:getfield        #1057 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//  162  345:invokevirtual   #1058 <Method void ArrayList.clear()>
		if(mLayout.mPrefetchMaxObservedInInitialPrefetch)
	//* 163  348:aload_0         
	//* 164  349:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//* 165  352:getfield        #1061 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
	//* 166  355:ifeq            383
		{
			LayoutManager layoutmanager = mLayout;
	//  167  358:aload_0         
	//  168  359:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  169  362:astore          6
			layoutmanager.mPrefetchMaxCountObserved = 0;
	//  170  364:aload           6
	//  171  366:iconst_0        
	//  172  367:putfield        #1064 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
			layoutmanager.mPrefetchMaxObservedInInitialPrefetch = false;
	//  173  370:aload           6
	//  174  372:iconst_0        
	//  175  373:putfield        #1061 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
			mRecycler.updateViewCacheSize();
	//  176  376:aload_0         
	//  177  377:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  178  380:invokevirtual   #1067 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		}
		mLayout.onLayoutCompleted(mState);
	//  179  383:aload_0         
	//  180  384:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  181  387:aload_0         
	//  182  388:getfield        #445 <Field RecyclerView$State mState>
	//  183  391:invokevirtual   #1070 <Method void RecyclerView$LayoutManager.onLayoutCompleted(RecyclerView$State)>
		onExitLayoutOrScroll();
	//  184  394:aload_0         
	//  185  395:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//  186  398:aload_0         
	//  187  399:iconst_0        
	//  188  400:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
		mViewInfoStore.clear();
	//  189  403:aload_0         
	//  190  404:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//  191  407:invokevirtual   #883 <Method void ViewInfoStore.clear()>
		int ai[] = mMinMaxLayoutPositions;
	//  192  410:aload_0         
	//  193  411:getfield        #456 <Field int[] mMinMaxLayoutPositions>
	//  194  414:astore          6
		if(didChildRangeChange(ai[0], ai[1]))
	//* 195  416:aload_0         
	//* 196  417:aload           6
	//* 197  419:iconst_0        
	//* 198  420:iaload          
	//* 199  421:aload           6
	//* 200  423:iconst_1        
	//* 201  424:iaload          
	//* 202  425:invokespecial   #1072 <Method boolean didChildRangeChange(int, int)>
	//* 203  428:ifeq            437
			dispatchOnScrolled(0, 0);
	//  204  431:aload_0         
	//  205  432:iconst_0        
	//  206  433:iconst_0        
	//  207  434:invokevirtual   #1075 <Method void dispatchOnScrolled(int, int)>
		recoverFocusFromState();
	//  208  437:aload_0         
	//  209  438:invokespecial   #1078 <Method void recoverFocusFromState()>
		resetFocusInfo();
	//  210  441:aload_0         
	//  211  442:invokespecial   #1081 <Method void resetFocusInfo()>
	//  212  445:return          
	}

	private boolean dispatchOnItemTouch(MotionEvent motionevent)
	{
		int i = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1088 <Method int MotionEvent.getAction()>
	//    2    4:istore_2        
		OnItemTouchListener onitemtouchlistener = mActiveOnItemTouchListener;
	//    3    5:aload_0         
	//    4    6:getfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//    5    9:astore          4
		if(onitemtouchlistener != null)
	//*   6   11:aload           4
	//*   7   13:ifnull          54
			if(i == 0)
	//*   8   16:iload_2         
	//*   9   17:ifne            28
			{
				mActiveOnItemTouchListener = null;
	//   10   20:aload_0         
	//   11   21:aconst_null     
	//   12   22:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
			} else
	//*  13   25:goto            54
			{
				onitemtouchlistener.onTouchEvent(this, motionevent);
	//   14   28:aload           4
	//   15   30:aload_0         
	//   16   31:aload_1         
	//   17   32:invokeinterface #1094 <Method void RecyclerView$OnItemTouchListener.onTouchEvent(RecyclerView, MotionEvent)>
				if(i == 3 || i == 1)
	//*  18   37:iload_2         
	//*  19   38:iconst_3        
	//*  20   39:icmpeq          47
	//*  21   42:iload_2         
	//*  22   43:iconst_1        
	//*  23   44:icmpne          52
					mActiveOnItemTouchListener = null;
	//   24   47:aload_0         
	//   25   48:aconst_null     
	//   26   49:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   27   52:iconst_1        
	//   28   53:ireturn         
			}
		if(i != 0)
	//*  29   54:iload_2         
	//*  30   55:ifeq            113
		{
			int k = mOnItemTouchListeners.size();
	//   31   58:aload_0         
	//   32   59:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//   33   62:invokevirtual   #1097 <Method int ArrayList.size()>
	//   34   65:istore_3        
			for(int j = 0; j < k; j++)
	//*  35   66:iconst_0        
	//*  36   67:istore_2        
	//*  37   68:iload_2         
	//*  38   69:iload_3         
	//*  39   70:icmpge          113
			{
				OnItemTouchListener onitemtouchlistener1 = (OnItemTouchListener)mOnItemTouchListeners.get(j);
	//   40   73:aload_0         
	//   41   74:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//   42   77:iload_2         
	//   43   78:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   44   81:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   45   84:astore          4
				if(onitemtouchlistener1.onInterceptTouchEvent(this, motionevent))
	//*  46   86:aload           4
	//*  47   88:aload_0         
	//*  48   89:aload_1         
	//*  49   90:invokeinterface #1104 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  50   95:ifeq            106
				{
					mActiveOnItemTouchListener = onitemtouchlistener1;
	//   51   98:aload_0         
	//   52   99:aload           4
	//   53  101:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
					return true;
	//   54  104:iconst_1        
	//   55  105:ireturn         
				}
			}

	//   56  106:iload_2         
	//   57  107:iconst_1        
	//   58  108:iadd            
	//   59  109:istore_2        
		}
	//*  60  110:goto            68
		return false;
	//   61  113:iconst_0        
	//   62  114:ireturn         
	}

	private boolean dispatchOnItemTouchIntercept(MotionEvent motionevent)
	{
		int j = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1088 <Method int MotionEvent.getAction()>
	//    2    4:istore_3        
		if(j == 3 || j == 0)
	//*   3    5:iload_3         
	//*   4    6:iconst_3        
	//*   5    7:icmpeq          14
	//*   6   10:iload_3         
	//*   7   11:ifne            19
			mActiveOnItemTouchListener = null;
	//    8   14:aload_0         
	//    9   15:aconst_null     
	//   10   16:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		int k = mOnItemTouchListeners.size();
	//   11   19:aload_0         
	//   12   20:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//   13   23:invokevirtual   #1097 <Method int ArrayList.size()>
	//   14   26:istore          4
		for(int i = 0; i < k; i++)
	//*  15   28:iconst_0        
	//*  16   29:istore_2        
	//*  17   30:iload_2         
	//*  18   31:iload           4
	//*  19   33:icmpge          81
		{
			OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   20   36:aload_0         
	//   21   37:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   24   44:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   25   47:astore          5
			if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent) && j != 3)
	//*  26   49:aload           5
	//*  27   51:aload_0         
	//*  28   52:aload_1         
	//*  29   53:invokeinterface #1104 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  30   58:ifeq            74
	//*  31   61:iload_3         
	//*  32   62:iconst_3        
	//*  33   63:icmpeq          74
			{
				mActiveOnItemTouchListener = onitemtouchlistener;
	//   34   66:aload_0         
	//   35   67:aload           5
	//   36   69:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   37   72:iconst_1        
	//   38   73:ireturn         
			}
		}

	//   39   74:iload_2         
	//   40   75:iconst_1        
	//   41   76:iadd            
	//   42   77:istore_2        
	//*  43   78:goto            30
		return false;
	//   44   81:iconst_0        
	//   45   82:ireturn         
	}

	private void findMinMaxChildLayoutPositions(int ai[])
	{
		int k1 = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          8
		if(k1 == 0)
	//*   4    9:iload           8
	//*   5   11:ifne            23
		{
			ai[0] = -1;
	//    6   14:aload_1         
	//    7   15:iconst_0        
	//    8   16:iconst_m1       
	//    9   17:iastore         
			ai[1] = -1;
	//   10   18:aload_1         
	//   11   19:iconst_1        
	//   12   20:iconst_m1       
	//   13   21:iastore         
			return;
	//   14   22:return          
		}
		int l = 0;
	//   15   23:iconst_0        
	//   16   24:istore          5
		int j = 0x7fffffff;
	//   17   26:ldc2            #1106 <Int 0x7fffffff>
	//   18   29:istore_3        
		int k;
		int j1;
		for(k = 0x80000000; l < k1; k = j1)
	//*  19   30:ldc2            #1107 <Int 0x80000000>
	//*  20   33:istore          4
	//*  21   35:iload           5
	//*  22   37:iload           8
	//*  23   39:icmpge          121
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(l));
	//   24   42:aload_0         
	//   25   43:getfield        #679 <Field ChildHelper mChildHelper>
	//   26   46:iload           5
	//   27   48:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   28   51:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   54:astore          9
			if(viewholder.shouldIgnore())
	//*  30   56:aload           9
	//*  31   58:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   61:ifeq            71
			{
				j1 = k;
	//   33   64:iload           4
	//   34   66:istore          7
			} else
	//*  35   68:goto            108
			{
				int i1 = viewholder.getLayoutPosition();
	//   36   71:aload           9
	//   37   73:invokevirtual   #1110 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   38   76:istore          6
				int i = j;
	//   39   78:iload_3         
	//   40   79:istore_2        
				if(i1 < j)
	//*  41   80:iload           6
	//*  42   82:iload_3         
	//*  43   83:icmpge          89
					i = i1;
	//   44   86:iload           6
	//   45   88:istore_2        
				j = i;
	//   46   89:iload_2         
	//   47   90:istore_3        
				j1 = k;
	//   48   91:iload           4
	//   49   93:istore          7
				if(i1 > k)
	//*  50   95:iload           6
	//*  51   97:iload           4
	//*  52   99:icmple          108
				{
					j1 = i1;
	//   53  102:iload           6
	//   54  104:istore          7
					j = i;
	//   55  106:iload_2         
	//   56  107:istore_3        
				}
			}
			l++;
	//   57  108:iload           5
	//   58  110:iconst_1        
	//   59  111:iadd            
	//   60  112:istore          5
		}

	//   61  114:iload           7
	//   62  116:istore          4
	//*  63  118:goto            35
		ai[0] = j;
	//   64  121:aload_1         
	//   65  122:iconst_0        
	//   66  123:iload_3         
	//   67  124:iastore         
		ai[1] = k;
	//   68  125:aload_1         
	//   69  126:iconst_1        
	//   70  127:iload           4
	//   71  129:iastore         
	//   72  130:return          
	}

	static RecyclerView findNestedRecyclerView(View view)
	{
		if(!(view instanceof ViewGroup))
	//*   0    0:aload_0         
	//*   1    1:instanceof      #4   <Class ViewGroup>
	//*   2    4:ifne            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		if(view instanceof RecyclerView)
	//*   5    9:aload_0         
	//*   6   10:instanceof      #2   <Class RecyclerView>
	//*   7   13:ifeq            21
			return (RecyclerView)view;
	//    8   16:aload_0         
	//    9   17:checkcast       #2   <Class RecyclerView>
	//   10   20:areturn         
		view = ((View) ((ViewGroup)view));
	//   11   21:aload_0         
	//   12   22:checkcast       #4   <Class ViewGroup>
	//   13   25:astore_0        
		int j = ((ViewGroup) (view)).getChildCount();
	//   14   26:aload_0         
	//   15   27:invokevirtual   #1113 <Method int ViewGroup.getChildCount()>
	//   16   30:istore_2        
		for(int i = 0; i < j; i++)
	//*  17   31:iconst_0        
	//*  18   32:istore_1        
	//*  19   33:iload_1         
	//*  20   34:iload_2         
	//*  21   35:icmpge          60
		{
			RecyclerView recyclerview = findNestedRecyclerView(((ViewGroup) (view)).getChildAt(i));
	//   22   38:aload_0         
	//   23   39:iload_1         
	//   24   40:invokevirtual   #1114 <Method View ViewGroup.getChildAt(int)>
	//   25   43:invokestatic    #1116 <Method RecyclerView findNestedRecyclerView(View)>
	//   26   46:astore_3        
			if(recyclerview != null)
	//*  27   47:aload_3         
	//*  28   48:ifnull          53
				return recyclerview;
	//   29   51:aload_3         
	//   30   52:areturn         
		}

	//   31   53:iload_1         
	//   32   54:iconst_1        
	//   33   55:iadd            
	//   34   56:istore_1        
	//*  35   57:goto            33
		return null;
	//   36   60:aconst_null     
	//   37   61:areturn         
	}

	private View findNextViewToFocus()
	{
		int i;
		if(mState.mFocusedItemPosition != -1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #445 <Field RecyclerView$State mState>
	//*   2    4:getfield        #1122 <Field int RecyclerView$State.mFocusedItemPosition>
	//*   3    7:iconst_m1       
	//*   4    8:icmpeq          22
			i = mState.mFocusedItemPosition;
	//    5   11:aload_0         
	//    6   12:getfield        #445 <Field RecyclerView$State mState>
	//    7   15:getfield        #1122 <Field int RecyclerView$State.mFocusedItemPosition>
	//    8   18:istore_1        
		else
	//*   9   19:goto            24
			i = 0;
	//   10   22:iconst_0        
	//   11   23:istore_1        
		int k = mState.getItemCount();
	//   12   24:aload_0         
	//   13   25:getfield        #445 <Field RecyclerView$State mState>
	//   14   28:invokevirtual   #1123 <Method int RecyclerView$State.getItemCount()>
	//   15   31:istore_3        
		int j = i;
	//   16   32:iload_1         
	//   17   33:istore_2        
		do
		{
			if(j >= k)
				break;
	//   18   34:iload_2         
	//   19   35:iload_3         
	//   20   36:icmpge          78
			ViewHolder viewholder = findViewHolderForAdapterPosition(j);
	//   21   39:aload_0         
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1127 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   24   44:astore          4
			if(viewholder == null)
	//*  25   46:aload           4
	//*  26   48:ifnonnull       54
				break;
	//   27   51:goto            78
			if(viewholder.itemView.hasFocusable())
	//*  28   54:aload           4
	//*  29   56:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  30   59:invokevirtual   #1130 <Method boolean View.hasFocusable()>
	//*  31   62:ifeq            71
				return viewholder.itemView;
	//   32   65:aload           4
	//   33   67:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   34   70:areturn         
			j++;
	//   35   71:iload_2         
	//   36   72:iconst_1        
	//   37   73:iadd            
	//   38   74:istore_2        
		} while(true);
	//   39   75:goto            34
		for(i = Math.min(k, i) - 1; i >= 0; i--)
	//*  40   78:iload_3         
	//*  41   79:iload_1         
	//*  42   80:invokestatic    #1135 <Method int Math.min(int, int)>
	//*  43   83:iconst_1        
	//*  44   84:isub            
	//*  45   85:istore_1        
	//*  46   86:iload_1         
	//*  47   87:iflt            128
		{
			ViewHolder viewholder1 = findViewHolderForAdapterPosition(i);
	//   48   90:aload_0         
	//   49   91:iload_1         
	//   50   92:invokevirtual   #1127 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   51   95:astore          4
			if(viewholder1 == null)
	//*  52   97:aload           4
	//*  53   99:ifnonnull       104
				return null;
	//   54  102:aconst_null     
	//   55  103:areturn         
			if(viewholder1.itemView.hasFocusable())
	//*  56  104:aload           4
	//*  57  106:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  58  109:invokevirtual   #1130 <Method boolean View.hasFocusable()>
	//*  59  112:ifeq            121
				return viewholder1.itemView;
	//   60  115:aload           4
	//   61  117:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   62  120:areturn         
		}

	//   63  121:iload_1         
	//   64  122:iconst_1        
	//   65  123:isub            
	//   66  124:istore_1        
	//*  67  125:goto            86
		return null;
	//   68  128:aconst_null     
	//   69  129:areturn         
	}

	static ViewHolder getChildViewHolderInt(View view)
	{
		if(view == null)
	//*   0    0:aload_0         
	//*   1    1:ifnonnull       6
			return null;
	//    2    4:aconst_null     
	//    3    5:areturn         
		else
			return ((LayoutParams)view.getLayoutParams()).mViewHolder;
	//    4    6:aload_0         
	//    5    7:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    6   10:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    7   13:getfield        #1138 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
	//    8   16:areturn         
	}

	static void getDecoratedBoundsWithMarginsInt(View view, Rect rect)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    3    7:astore_2        
		Rect rect1 = layoutparams.mDecorInsets;
	//    4    8:aload_2         
	//    5    9:getfield        #1143 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    6   12:astore_3        
		rect.set(view.getLeft() - rect1.left - layoutparams.leftMargin, view.getTop() - rect1.top - layoutparams.topMargin, view.getRight() + rect1.right + layoutparams.rightMargin, view.getBottom() + rect1.bottom + layoutparams.bottomMargin);
	//    7   13:aload_1         
	//    8   14:aload_0         
	//    9   15:invokevirtual   #1146 <Method int View.getLeft()>
	//   10   18:aload_3         
	//   11   19:getfield        #1149 <Field int Rect.left>
	//   12   22:isub            
	//   13   23:aload_2         
	//   14   24:getfield        #1152 <Field int RecyclerView$LayoutParams.leftMargin>
	//   15   27:isub            
	//   16   28:aload_0         
	//   17   29:invokevirtual   #1155 <Method int View.getTop()>
	//   18   32:aload_3         
	//   19   33:getfield        #1158 <Field int Rect.top>
	//   20   36:isub            
	//   21   37:aload_2         
	//   22   38:getfield        #1161 <Field int RecyclerView$LayoutParams.topMargin>
	//   23   41:isub            
	//   24   42:aload_0         
	//   25   43:invokevirtual   #1164 <Method int View.getRight()>
	//   26   46:aload_3         
	//   27   47:getfield        #1167 <Field int Rect.right>
	//   28   50:iadd            
	//   29   51:aload_2         
	//   30   52:getfield        #1170 <Field int RecyclerView$LayoutParams.rightMargin>
	//   31   55:iadd            
	//   32   56:aload_0         
	//   33   57:invokevirtual   #1173 <Method int View.getBottom()>
	//   34   60:aload_3         
	//   35   61:getfield        #1176 <Field int Rect.bottom>
	//   36   64:iadd            
	//   37   65:aload_2         
	//   38   66:getfield        #1179 <Field int RecyclerView$LayoutParams.bottomMargin>
	//   39   69:iadd            
	//   40   70:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
	//   41   73:return          
	}

	private int getDeepestFocusedViewWithId(View view)
	{
		int i = view.getId();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1187 <Method int View.getId()>
	//    2    4:istore_2        
		do
		{
			if(view.isFocused() || !(view instanceof ViewGroup) || !view.hasFocus())
				break;
	//    3    5:aload_1         
	//    4    6:invokevirtual   #1190 <Method boolean View.isFocused()>
	//    5    9:ifne            54
	//    6   12:aload_1         
	//    7   13:instanceof      #4   <Class ViewGroup>
	//    8   16:ifeq            54
	//    9   19:aload_1         
	//   10   20:invokevirtual   #1193 <Method boolean View.hasFocus()>
	//   11   23:ifeq            54
			View view1 = ((ViewGroup)view).getFocusedChild();
	//   12   26:aload_1         
	//   13   27:checkcast       #4   <Class ViewGroup>
	//   14   30:invokevirtual   #1196 <Method View ViewGroup.getFocusedChild()>
	//   15   33:astore_3        
			view = view1;
	//   16   34:aload_3         
	//   17   35:astore_1        
			if(view1.getId() != -1)
	//*  18   36:aload_3         
	//*  19   37:invokevirtual   #1187 <Method int View.getId()>
	//*  20   40:iconst_m1       
	//*  21   41:icmpeq          5
			{
				i = view1.getId();
	//   22   44:aload_3         
	//   23   45:invokevirtual   #1187 <Method int View.getId()>
	//   24   48:istore_2        
				view = view1;
	//   25   49:aload_3         
	//   26   50:astore_1        
			}
		} while(true);
	//   27   51:goto            5
		return i;
	//   28   54:iload_2         
	//   29   55:ireturn         
	}

	private String getFullClassName(Context context, String s)
	{
		if(s.charAt(0) == '.')
	//*   0    0:aload_2         
	//*   1    1:iconst_0        
	//*   2    2:invokevirtual   #1200 <Method char String.charAt(int)>
	//*   3    5:bipush          46
	//*   4    7:icmpne          38
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    5   10:new             #809 <Class StringBuilder>
	//    6   13:dup             
	//    7   14:invokespecial   #810 <Method void StringBuilder()>
	//    8   17:astore_3        
			stringbuilder.append(context.getPackageName());
	//    9   18:aload_3         
	//   10   19:aload_1         
	//   11   20:invokevirtual   #1203 <Method String Context.getPackageName()>
	//   12   23:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   13   26:pop             
			stringbuilder.append(s);
	//   14   27:aload_3         
	//   15   28:aload_2         
	//   16   29:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   17   32:pop             
			return stringbuilder.toString();
	//   18   33:aload_3         
	//   19   34:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   20   37:areturn         
		}
		if(s.contains("."))
	//*  21   38:aload_2         
	//*  22   39:ldc2            #1205 <String ".">
	//*  23   42:invokevirtual   #1209 <Method boolean String.contains(CharSequence)>
	//*  24   45:ifeq            50
		{
			return s;
	//   25   48:aload_2         
	//   26   49:areturn         
		} else
		{
			context = ((Context) (new StringBuilder()));
	//   27   50:new             #809 <Class StringBuilder>
	//   28   53:dup             
	//   29   54:invokespecial   #810 <Method void StringBuilder()>
	//   30   57:astore_1        
			((StringBuilder) (context)).append(((Class) (android/support/v7/widget/RecyclerView)).getPackage().getName());
	//   31   58:aload_1         
	//   32   59:ldc1            #2   <Class RecyclerView>
	//   33   61:invokevirtual   #1213 <Method Package Class.getPackage()>
	//   34   64:invokevirtual   #1218 <Method String Package.getName()>
	//   35   67:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   36   70:pop             
			((StringBuilder) (context)).append('.');
	//   37   71:aload_1         
	//   38   72:bipush          46
	//   39   74:invokevirtual   #1221 <Method StringBuilder StringBuilder.append(char)>
	//   40   77:pop             
			((StringBuilder) (context)).append(s);
	//   41   78:aload_1         
	//   42   79:aload_2         
	//   43   80:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   44   83:pop             
			return ((StringBuilder) (context)).toString();
	//   45   84:aload_1         
	//   46   85:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   47   88:areturn         
		}
	}

	private NestedScrollingChildHelper getScrollingChildHelper()
	{
		if(mScrollingChildHelper == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1225 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//*   2    4:ifnonnull       19
			mScrollingChildHelper = new NestedScrollingChildHelper(((View) (this)));
	//    3    7:aload_0         
	//    4    8:new             #1227 <Class NestedScrollingChildHelper>
	//    5   11:dup             
	//    6   12:aload_0         
	//    7   13:invokespecial   #1229 <Method void NestedScrollingChildHelper(View)>
	//    8   16:putfield        #1225 <Field NestedScrollingChildHelper mScrollingChildHelper>
		return mScrollingChildHelper;
	//    9   19:aload_0         
	//   10   20:getfield        #1225 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//   11   23:areturn         
	}

	private void handleMissingPreInfoForChangeError(long l, ViewHolder viewholder, ViewHolder viewholder1)
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          6
		for(int i = 0; i < j; i++)
	//*   4    9:iconst_0        
	//*   5   10:istore          5
	//*   6   12:iload           5
	//*   7   14:iload           6
	//*   8   16:icmpge          211
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   19:aload_0         
	//   10   20:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   23:iload           5
	//   12   25:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   13   28:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          7
			if(viewholder2 != viewholder && getChangedHolderKey(viewholder2) == l)
	//*  15   33:aload           7
	//*  16   35:aload_3         
	//*  17   36:if_acmpne       42
	//*  18   39:goto            202
	//*  19   42:aload_0         
	//*  20   43:aload           7
	//*  21   45:invokevirtual   #957 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//*  22   48:lload_1         
	//*  23   49:lcmp            
	//*  24   50:ifne            202
			{
				viewholder1 = ((ViewHolder) (mAdapter));
	//   25   53:aload_0         
	//   26   54:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   27   57:astore          4
				if(viewholder1 != null && ((Adapter) (viewholder1)).hasStableIds())
	//*  28   59:aload           4
	//*  29   61:ifnull          137
	//*  30   64:aload           4
	//*  31   66:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  32   69:ifeq            137
				{
					viewholder1 = ((ViewHolder) (new StringBuilder()));
	//   33   72:new             #809 <Class StringBuilder>
	//   34   75:dup             
	//   35   76:invokespecial   #810 <Method void StringBuilder()>
	//   36   79:astore          4
					((StringBuilder) (viewholder1)).append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:");
	//   37   81:aload           4
	//   38   83:ldc2            #1231 <String "Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:">
	//   39   86:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   40   89:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder2)));
	//   41   90:aload           4
	//   42   92:aload           7
	//   43   94:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   44   97:pop             
					((StringBuilder) (viewholder1)).append(" \n View Holder 2:");
	//   45   98:aload           4
	//   46  100:ldc2            #1236 <String " \n View Holder 2:">
	//   47  103:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   48  106:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder)));
	//   49  107:aload           4
	//   50  109:aload_3         
	//   51  110:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   52  113:pop             
					((StringBuilder) (viewholder1)).append(exceptionLabel());
	//   53  114:aload           4
	//   54  116:aload_0         
	//   55  117:invokevirtual   #1239 <Method String exceptionLabel()>
	//   56  120:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   57  123:pop             
					throw new IllegalStateException(((StringBuilder) (viewholder1)).toString());
	//   58  124:new             #821 <Class IllegalStateException>
	//   59  127:dup             
	//   60  128:aload           4
	//   61  130:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   62  133:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   63  136:athrow          
				} else
				{
					viewholder1 = ((ViewHolder) (new StringBuilder()));
	//   64  137:new             #809 <Class StringBuilder>
	//   65  140:dup             
	//   66  141:invokespecial   #810 <Method void StringBuilder()>
	//   67  144:astore          4
					((StringBuilder) (viewholder1)).append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:");
	//   68  146:aload           4
	//   69  148:ldc2            #1244 <String "Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:">
	//   70  151:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   71  154:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder2)));
	//   72  155:aload           4
	//   73  157:aload           7
	//   74  159:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   75  162:pop             
					((StringBuilder) (viewholder1)).append(" \n View Holder 2:");
	//   76  163:aload           4
	//   77  165:ldc2            #1236 <String " \n View Holder 2:">
	//   78  168:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   79  171:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder)));
	//   80  172:aload           4
	//   81  174:aload_3         
	//   82  175:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   83  178:pop             
					((StringBuilder) (viewholder1)).append(exceptionLabel());
	//   84  179:aload           4
	//   85  181:aload_0         
	//   86  182:invokevirtual   #1239 <Method String exceptionLabel()>
	//   87  185:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   88  188:pop             
					throw new IllegalStateException(((StringBuilder) (viewholder1)).toString());
	//   89  189:new             #821 <Class IllegalStateException>
	//   90  192:dup             
	//   91  193:aload           4
	//   92  195:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   93  198:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   94  201:athrow          
				}
			}
		}

	//   95  202:iload           5
	//   96  204:iconst_1        
	//   97  205:iadd            
	//   98  206:istore          5
	//*  99  208:goto            12
		StringBuilder stringbuilder = new StringBuilder();
	//  100  211:new             #809 <Class StringBuilder>
	//  101  214:dup             
	//  102  215:invokespecial   #810 <Method void StringBuilder()>
	//  103  218:astore          7
		stringbuilder.append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ");
	//  104  220:aload           7
	//  105  222:ldc2            #1246 <String "Problem while matching changed view holders with the newones. The pre-layout information for the change holder ">
	//  106  225:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  107  228:pop             
		stringbuilder.append(((Object) (viewholder1)));
	//  108  229:aload           7
	//  109  231:aload           4
	//  110  233:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//  111  236:pop             
		stringbuilder.append(" cannot be found but it is necessary for ");
	//  112  237:aload           7
	//  113  239:ldc2            #1248 <String " cannot be found but it is necessary for ">
	//  114  242:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  115  245:pop             
		stringbuilder.append(((Object) (viewholder)));
	//  116  246:aload           7
	//  117  248:aload_3         
	//  118  249:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//  119  252:pop             
		stringbuilder.append(exceptionLabel());
	//  120  253:aload           7
	//  121  255:aload_0         
	//  122  256:invokevirtual   #1239 <Method String exceptionLabel()>
	//  123  259:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  124  262:pop             
		Log.e("RecyclerView", stringbuilder.toString());
	//  125  263:ldc1            #172 <String "RecyclerView">
	//  126  265:aload           7
	//  127  267:invokevirtual   #824 <Method String StringBuilder.toString()>
	//  128  270:invokestatic    #1254 <Method int Log.e(String, String)>
	//  129  273:pop             
	//  130  274:return          
	}

	private boolean hasUpdatedView()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          57
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   13   23:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.isUpdated())
	//*  15   27:aload_3         
	//*  16   28:ifnull          50
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifeq            41
	//*  20   38:goto            50
	//*  21   41:aload_3         
	//*  22   42:invokevirtual   #950 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  23   45:ifeq            50
				return true;
	//   24   48:iconst_1        
	//   25   49:ireturn         
		}

	//   26   50:iload_1         
	//   27   51:iconst_1        
	//   28   52:iadd            
	//   29   53:istore_1        
	//*  30   54:goto            10
		return false;
	//   31   57:iconst_0        
	//   32   58:ireturn         
	}

	private void initAutofill()
	{
		if(ViewCompat.getImportantForAutofill(((View) (this))) == 0)
	//*   0    0:aload_0         
	//*   1    1:invokestatic    #1261 <Method int ViewCompat.getImportantForAutofill(View)>
	//*   2    4:ifne            13
			ViewCompat.setImportantForAutofill(((View) (this)), 8);
	//    3    7:aload_0         
	//    4    8:bipush          8
	//    5   10:invokestatic    #1264 <Method void ViewCompat.setImportantForAutofill(View, int)>
	//    6   13:return          
	}

	private void initChildrenHelper()
	{
		mChildHelper = new ChildHelper(new ChildHelper.Callback() {

			public void addView(View view, int i)
			{
				RecyclerView.this.addView(view, i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #24  <Method void RecyclerView.addView(View, int)>
				dispatchChildAttached(view);
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:aload_1         
			//    8   14:invokevirtual   #28  <Method void RecyclerView.dispatchChildAttached(View)>
			//    9   17:return          
			}

			public void attachViewToParent(View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
			{
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore          4
				if(viewholder != null)
			//*   3    6:aload           4
			//*   4    8:ifnull          81
				{
					if(!viewholder.isTmpDetached() && !viewholder.shouldIgnore())
			//*   5   11:aload           4
			//*   6   13:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*   7   16:ifne            76
			//*   8   19:aload           4
			//*   9   21:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  10   24:ifeq            30
			//*  11   27:goto            76
					{
						view = ((View) (new StringBuilder()));
			//   12   30:new             #45  <Class StringBuilder>
			//   13   33:dup             
			//   14   34:invokespecial   #46  <Method void StringBuilder()>
			//   15   37:astore_1        
						((StringBuilder) (view)).append("Called attach on a child which is not detached: ");
			//   16   38:aload_1         
			//   17   39:ldc1            #48  <String "Called attach on a child which is not detached: ">
			//   18   41:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   19   44:pop             
						((StringBuilder) (view)).append(((Object) (viewholder)));
			//   20   45:aload_1         
			//   21   46:aload           4
			//   22   48:invokevirtual   #55  <Method StringBuilder StringBuilder.append(Object)>
			//   23   51:pop             
						((StringBuilder) (view)).append(exceptionLabel());
			//   24   52:aload_1         
			//   25   53:aload_0         
			//   26   54:getfield        #17  <Field RecyclerView this$0>
			//   27   57:invokevirtual   #59  <Method String RecyclerView.exceptionLabel()>
			//   28   60:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   29   63:pop             
						throw new IllegalArgumentException(((StringBuilder) (view)).toString());
			//   30   64:new             #61  <Class IllegalArgumentException>
			//   31   67:dup             
			//   32   68:aload_1         
			//   33   69:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   34   72:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   35   75:athrow          
					}
					viewholder.clearTmpDetachFlag();
			//   36   76:aload           4
			//   37   78:invokevirtual   #70  <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
				}
				RecyclerView.this.attachViewToParent(view, i, layoutparams);
			//   38   81:aload_0         
			//   39   82:getfield        #17  <Field RecyclerView this$0>
			//   40   85:aload_1         
			//   41   86:iload_2         
			//   42   87:aload_3         
			//   43   88:invokestatic    #74  <Method void RecyclerView.access$000(RecyclerView, View, int, android.view.ViewGroup$LayoutParams)>
			//   44   91:return          
			}

			public void detachViewFromParent(int i)
			{
				Object obj = ((Object) (getChildAt(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #80  <Method View getChildAt(int)>
			//    3    5:astore_2        
				if(obj != null)
			//*   4    6:aload_2         
			//*   5    7:ifnull          88
				{
					obj = ((Object) (RecyclerView.getChildViewHolderInt(((View) (obj)))));
			//    6   10:aload_2         
			//    7   11:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    8   14:astore_2        
					if(obj != null)
			//*   9   15:aload_2         
			//*  10   16:ifnull          88
					{
						if(((ViewHolder) (obj)).isTmpDetached() && !((ViewHolder) (obj)).shouldIgnore())
			//*  11   19:aload_2         
			//*  12   20:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*  13   23:ifeq            81
			//*  14   26:aload_2         
			//*  15   27:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  16   30:ifeq            36
			//*  17   33:goto            81
						{
							StringBuilder stringbuilder = new StringBuilder();
			//   18   36:new             #45  <Class StringBuilder>
			//   19   39:dup             
			//   20   40:invokespecial   #46  <Method void StringBuilder()>
			//   21   43:astore_3        
							stringbuilder.append("called detach on an already detached child ");
			//   22   44:aload_3         
			//   23   45:ldc1            #82  <String "called detach on an already detached child ">
			//   24   47:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   25   50:pop             
							stringbuilder.append(obj);
			//   26   51:aload_3         
			//   27   52:aload_2         
			//   28   53:invokevirtual   #55  <Method StringBuilder StringBuilder.append(Object)>
			//   29   56:pop             
							stringbuilder.append(exceptionLabel());
			//   30   57:aload_3         
			//   31   58:aload_0         
			//   32   59:getfield        #17  <Field RecyclerView this$0>
			//   33   62:invokevirtual   #59  <Method String RecyclerView.exceptionLabel()>
			//   34   65:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   35   68:pop             
							throw new IllegalArgumentException(stringbuilder.toString());
			//   36   69:new             #61  <Class IllegalArgumentException>
			//   37   72:dup             
			//   38   73:aload_3         
			//   39   74:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   40   77:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   41   80:athrow          
						}
						((ViewHolder) (obj)).addFlags(256);
			//   42   81:aload_2         
			//   43   82:sipush          256
			//   44   85:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					}
				}
				RecyclerView.this.detachViewFromParent(i);
			//   45   88:aload_0         
			//   46   89:getfield        #17  <Field RecyclerView this$0>
			//   47   92:iload_1         
			//   48   93:invokestatic    #89  <Method void RecyclerView.access$100(RecyclerView, int)>
			//   49   96:return          
			}

			public View getChildAt(int i)
			{
				return RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:areturn         
			}

			public int getChildCount()
			{
				return RecyclerView.this.getChildCount();
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:invokevirtual   #94  <Method int RecyclerView.getChildCount()>
			//    3    7:ireturn         
			}

			public ViewHolder getChildViewHolder(View view)
			{
				return RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:areturn         
			}

			public int indexOfChild(View view)
			{
				return RecyclerView.this.indexOfChild(view);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:invokevirtual   #99  <Method int RecyclerView.indexOfChild(View)>
			//    4    8:ireturn         
			}

			public void onEnteredHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onEnteredHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokevirtual   #102 <Method void RecyclerView$ViewHolder.onEnteredHiddenState(RecyclerView)>
			//    9   17:return          
			}

			public void onLeftHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onLeftHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokevirtual   #105 <Method void RecyclerView$ViewHolder.onLeftHiddenState(RecyclerView)>
			//    9   17:return          
			}

			public void removeAllViews()
			{
				int j = getChildCount();
			//    0    0:aload_0         
			//    1    1:invokevirtual   #107 <Method int getChildCount()>
			//    2    4:istore_2        
				for(int i = 0; i < j; i++)
			//*   3    5:iconst_0        
			//*   4    6:istore_1        
			//*   5    7:iload_1         
			//*   6    8:iload_2         
			//*   7    9:icmpge          37
				{
					View view = getChildAt(i);
			//    8   12:aload_0         
			//    9   13:iload_1         
			//   10   14:invokevirtual   #80  <Method View getChildAt(int)>
			//   11   17:astore_3        
					dispatchChildDetached(view);
			//   12   18:aload_0         
			//   13   19:getfield        #17  <Field RecyclerView this$0>
			//   14   22:aload_3         
			//   15   23:invokevirtual   #110 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   16   26:aload_3         
			//   17   27:invokevirtual   #115 <Method void View.clearAnimation()>
				}

			//   18   30:iload_1         
			//   19   31:iconst_1        
			//   20   32:iadd            
			//   21   33:istore_1        
			//*  22   34:goto            7
				RecyclerView.this.removeAllViews();
			//   23   37:aload_0         
			//   24   38:getfield        #17  <Field RecyclerView this$0>
			//   25   41:invokevirtual   #117 <Method void RecyclerView.removeAllViews()>
			//   26   44:return          
			}

			public void removeViewAt(int i)
			{
				View view = RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:astore_2        
				if(view != null)
			//*   5    9:aload_2         
			//*   6   10:ifnull          25
				{
					dispatchChildDetached(view);
			//    7   13:aload_0         
			//    8   14:getfield        #17  <Field RecyclerView this$0>
			//    9   17:aload_2         
			//   10   18:invokevirtual   #110 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   11   21:aload_2         
			//   12   22:invokevirtual   #115 <Method void View.clearAnimation()>
				}
				RecyclerView.this.removeViewAt(i);
			//   13   25:aload_0         
			//   14   26:getfield        #17  <Field RecyclerView this$0>
			//   15   29:iload_1         
			//   16   30:invokevirtual   #120 <Method void RecyclerView.removeViewAt(int)>
			//   17   33:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #685 <Class ChildHelper>
	//    2    4:dup             
	//    3    5:new             #18  <Class RecyclerView$5>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1265 <Method void RecyclerView$5(RecyclerView)>
	//    7   13:invokespecial   #1268 <Method void ChildHelper(ChildHelper$Callback)>
	//    8   16:putfield        #679 <Field ChildHelper mChildHelper>
	//    9   19:return          
	}

	private boolean isPreferredNextFocus(View view, View view1, int i)
	{
		boolean flag5 = false;
	//    0    0:iconst_0        
	//    1    1:istore          9
		boolean flag = false;
	//    2    3:iconst_0        
	//    3    4:istore          7
		boolean flag6 = false;
	//    4    6:iconst_0        
	//    5    7:istore          10
		boolean flag7 = false;
	//    6    9:iconst_0        
	//    7   10:istore          11
		boolean flag8 = false;
	//    8   12:iconst_0        
	//    9   13:istore          12
		boolean flag4 = false;
	//   10   15:iconst_0        
	//   11   16:istore          8
		if(view1 != null)
	//*  12   18:aload_2         
	//*  13   19:ifnull          575
		{
			if(view1 == this)
	//*  14   22:aload_2         
	//*  15   23:aload_0         
	//*  16   24:if_acmpne       29
				return false;
	//   17   27:iconst_0        
	//   18   28:ireturn         
			if(findContainingItemView(view1) == null)
	//*  19   29:aload_0         
	//*  20   30:aload_2         
	//*  21   31:invokevirtual   #1274 <Method View findContainingItemView(View)>
	//*  22   34:ifnonnull       39
				return false;
	//   23   37:iconst_0        
	//   24   38:ireturn         
			if(view == null)
	//*  25   39:aload_1         
	//*  26   40:ifnonnull       45
				return true;
	//   27   43:iconst_1        
	//   28   44:ireturn         
			if(findContainingItemView(view) == null)
	//*  29   45:aload_0         
	//*  30   46:aload_1         
	//*  31   47:invokevirtual   #1274 <Method View findContainingItemView(View)>
	//*  32   50:ifnonnull       55
				return true;
	//   33   53:iconst_1        
	//   34   54:ireturn         
			mTempRect.set(0, 0, view.getWidth(), view.getHeight());
	//   35   55:aload_0         
	//   36   56:getfield        #391 <Field Rect mTempRect>
	//   37   59:iconst_0        
	//   38   60:iconst_0        
	//   39   61:aload_1         
	//   40   62:invokevirtual   #1277 <Method int View.getWidth()>
	//   41   65:aload_1         
	//   42   66:invokevirtual   #1280 <Method int View.getHeight()>
	//   43   69:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
			mTempRect2.set(0, 0, view1.getWidth(), view1.getHeight());
	//   44   72:aload_0         
	//   45   73:getfield        #393 <Field Rect mTempRect2>
	//   46   76:iconst_0        
	//   47   77:iconst_0        
	//   48   78:aload_2         
	//   49   79:invokevirtual   #1277 <Method int View.getWidth()>
	//   50   82:aload_2         
	//   51   83:invokevirtual   #1280 <Method int View.getHeight()>
	//   52   86:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
			offsetDescendantRectToMyCoords(view, mTempRect);
	//   53   89:aload_0         
	//   54   90:aload_1         
	//   55   91:aload_0         
	//   56   92:getfield        #391 <Field Rect mTempRect>
	//   57   95:invokevirtual   #1283 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			offsetDescendantRectToMyCoords(view1, mTempRect2);
	//   58   98:aload_0         
	//   59   99:aload_2         
	//   60  100:aload_0         
	//   61  101:getfield        #393 <Field Rect mTempRect2>
	//   62  104:invokevirtual   #1283 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			int j = mLayout.getLayoutDirection();
	//   63  107:aload_0         
	//   64  108:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   65  111:invokevirtual   #1286 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//   66  114:istore          4
			byte byte0 = -1;
	//   67  116:iconst_m1       
	//   68  117:istore          5
			byte byte1;
			if(j == 1)
	//*  69  119:iload           4
	//*  70  121:iconst_1        
	//*  71  122:icmpne          131
				byte1 = -1;
	//   72  125:iconst_m1       
	//   73  126:istore          6
			else
	//*  74  128:goto            134
				byte1 = 1;
	//   75  131:iconst_1        
	//   76  132:istore          6
			if((mTempRect.left < mTempRect2.left || mTempRect.right <= mTempRect2.left) && mTempRect.right < mTempRect2.right)
	//*  77  134:aload_0         
	//*  78  135:getfield        #391 <Field Rect mTempRect>
	//*  79  138:getfield        #1149 <Field int Rect.left>
	//*  80  141:aload_0         
	//*  81  142:getfield        #393 <Field Rect mTempRect2>
	//*  82  145:getfield        #1149 <Field int Rect.left>
	//*  83  148:icmplt          168
	//*  84  151:aload_0         
	//*  85  152:getfield        #391 <Field Rect mTempRect>
	//*  86  155:getfield        #1167 <Field int Rect.right>
	//*  87  158:aload_0         
	//*  88  159:getfield        #393 <Field Rect mTempRect2>
	//*  89  162:getfield        #1149 <Field int Rect.left>
	//*  90  165:icmpgt          191
	//*  91  168:aload_0         
	//*  92  169:getfield        #391 <Field Rect mTempRect>
	//*  93  172:getfield        #1167 <Field int Rect.right>
	//*  94  175:aload_0         
	//*  95  176:getfield        #393 <Field Rect mTempRect2>
	//*  96  179:getfield        #1167 <Field int Rect.right>
	//*  97  182:icmpge          191
				j = 1;
	//   98  185:iconst_1        
	//   99  186:istore          4
			else
	//* 100  188:goto            251
			if((mTempRect.right > mTempRect2.right || mTempRect.left >= mTempRect2.right) && mTempRect.left > mTempRect2.left)
	//* 101  191:aload_0         
	//* 102  192:getfield        #391 <Field Rect mTempRect>
	//* 103  195:getfield        #1167 <Field int Rect.right>
	//* 104  198:aload_0         
	//* 105  199:getfield        #393 <Field Rect mTempRect2>
	//* 106  202:getfield        #1167 <Field int Rect.right>
	//* 107  205:icmpgt          225
	//* 108  208:aload_0         
	//* 109  209:getfield        #391 <Field Rect mTempRect>
	//* 110  212:getfield        #1149 <Field int Rect.left>
	//* 111  215:aload_0         
	//* 112  216:getfield        #393 <Field Rect mTempRect2>
	//* 113  219:getfield        #1167 <Field int Rect.right>
	//* 114  222:icmplt          248
	//* 115  225:aload_0         
	//* 116  226:getfield        #391 <Field Rect mTempRect>
	//* 117  229:getfield        #1149 <Field int Rect.left>
	//* 118  232:aload_0         
	//* 119  233:getfield        #393 <Field Rect mTempRect2>
	//* 120  236:getfield        #1149 <Field int Rect.left>
	//* 121  239:icmple          248
				j = -1;
	//  122  242:iconst_m1       
	//  123  243:istore          4
			else
	//* 124  245:goto            251
				j = 0;
	//  125  248:iconst_0        
	//  126  249:istore          4
			if((mTempRect.top < mTempRect2.top || mTempRect.bottom <= mTempRect2.top) && mTempRect.bottom < mTempRect2.bottom)
	//* 127  251:aload_0         
	//* 128  252:getfield        #391 <Field Rect mTempRect>
	//* 129  255:getfield        #1158 <Field int Rect.top>
	//* 130  258:aload_0         
	//* 131  259:getfield        #393 <Field Rect mTempRect2>
	//* 132  262:getfield        #1158 <Field int Rect.top>
	//* 133  265:icmplt          285
	//* 134  268:aload_0         
	//* 135  269:getfield        #391 <Field Rect mTempRect>
	//* 136  272:getfield        #1176 <Field int Rect.bottom>
	//* 137  275:aload_0         
	//* 138  276:getfield        #393 <Field Rect mTempRect2>
	//* 139  279:getfield        #1158 <Field int Rect.top>
	//* 140  282:icmpgt          308
	//* 141  285:aload_0         
	//* 142  286:getfield        #391 <Field Rect mTempRect>
	//* 143  289:getfield        #1176 <Field int Rect.bottom>
	//* 144  292:aload_0         
	//* 145  293:getfield        #393 <Field Rect mTempRect2>
	//* 146  296:getfield        #1176 <Field int Rect.bottom>
	//* 147  299:icmpge          308
				byte0 = 1;
	//  148  302:iconst_1        
	//  149  303:istore          5
			else
	//* 150  305:goto            365
			if(mTempRect.bottom <= mTempRect2.bottom && mTempRect.top < mTempRect2.bottom || mTempRect.top <= mTempRect2.top)
	//* 151  308:aload_0         
	//* 152  309:getfield        #391 <Field Rect mTempRect>
	//* 153  312:getfield        #1176 <Field int Rect.bottom>
	//* 154  315:aload_0         
	//* 155  316:getfield        #393 <Field Rect mTempRect2>
	//* 156  319:getfield        #1176 <Field int Rect.bottom>
	//* 157  322:icmpgt          342
	//* 158  325:aload_0         
	//* 159  326:getfield        #391 <Field Rect mTempRect>
	//* 160  329:getfield        #1158 <Field int Rect.top>
	//* 161  332:aload_0         
	//* 162  333:getfield        #393 <Field Rect mTempRect2>
	//* 163  336:getfield        #1176 <Field int Rect.bottom>
	//* 164  339:icmplt          362
	//* 165  342:aload_0         
	//* 166  343:getfield        #391 <Field Rect mTempRect>
	//* 167  346:getfield        #1158 <Field int Rect.top>
	//* 168  349:aload_0         
	//* 169  350:getfield        #393 <Field Rect mTempRect2>
	//* 170  353:getfield        #1158 <Field int Rect.top>
	//* 171  356:icmple          362
	//* 172  359:goto            365
				byte0 = 0;
	//  173  362:iconst_0        
	//  174  363:istore          5
			if(i != 17)
	//* 175  365:iload_3         
	//* 176  366:bipush          17
	//* 177  368:icmpeq          560
			{
				if(i != 33)
	//* 178  371:iload_3         
	//* 179  372:bipush          33
	//* 180  374:icmpeq          545
				{
					if(i != 66)
	//* 181  377:iload_3         
	//* 182  378:bipush          66
	//* 183  380:icmpeq          530
					{
						if(i != 130)
	//* 184  383:iload_3         
	//* 185  384:sipush          130
	//* 186  387:icmpeq          519
						{
							switch(i)
	//* 187  390:iload_3         
							{
	//* 188  391:tableswitch     1 2: default 412
	//	               1 487
	//	               2 455
							default:
								view = ((View) (new StringBuilder()));
	//  189  412:new             #809 <Class StringBuilder>
	//  190  415:dup             
	//  191  416:invokespecial   #810 <Method void StringBuilder()>
	//  192  419:astore_1        
								((StringBuilder) (view)).append("Invalid direction: ");
	//  193  420:aload_1         
	//  194  421:ldc2            #1288 <String "Invalid direction: ">
	//  195  424:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  196  427:pop             
								((StringBuilder) (view)).append(i);
	//  197  428:aload_1         
	//  198  429:iload_3         
	//  199  430:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//  200  433:pop             
								((StringBuilder) (view)).append(exceptionLabel());
	//  201  434:aload_1         
	//  202  435:aload_0         
	//  203  436:invokevirtual   #1239 <Method String exceptionLabel()>
	//  204  439:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  205  442:pop             
								throw new IllegalArgumentException(((StringBuilder) (view)).toString());
	//  206  443:new             #1293 <Class IllegalArgumentException>
	//  207  446:dup             
	//  208  447:aload_1         
	//  209  448:invokevirtual   #824 <Method String StringBuilder.toString()>
	//  210  451:invokespecial   #1294 <Method void IllegalArgumentException(String)>
	//  211  454:athrow          

							case 2: // '\002'
label0:
								{
									if(byte0 <= 0)
	//* 212  455:iload           5
	//* 213  457:ifgt            481
									{
										flag = flag4;
	//  214  460:iload           8
	//  215  462:istore          7
										if(byte0 != 0)
											break label0;
	//  216  464:iload           5
	//  217  466:ifne            484
										flag = flag4;
	//  218  469:iload           8
	//  219  471:istore          7
										if(j * byte1 < 0)
											break label0;
	//  220  473:iload           4
	//  221  475:iload           6
	//  222  477:imul            
	//  223  478:iflt            484
									}
									flag = true;
	//  224  481:iconst_1        
	//  225  482:istore          7
								}
								return flag;
	//  226  484:iload           7
	//  227  486:ireturn         

							case 1: // '\001'
label1:
								{
									if(byte0 >= 0)
	//* 228  487:iload           5
	//* 229  489:iflt            513
									{
										flag = flag5;
	//  230  492:iload           9
	//  231  494:istore          7
										if(byte0 != 0)
											break label1;
	//  232  496:iload           5
	//  233  498:ifne            516
										flag = flag5;
	//  234  501:iload           9
	//  235  503:istore          7
										if(j * byte1 > 0)
											break label1;
	//  236  505:iload           4
	//  237  507:iload           6
	//  238  509:imul            
	//  239  510:ifgt            516
									}
									flag = true;
	//  240  513:iconst_1        
	//  241  514:istore          7
								}
								return flag;
	//  242  516:iload           7
	//  243  518:ireturn         
							}
						} else
						{
							if(byte0 > 0)
	//* 244  519:iload           5
	//* 245  521:ifle            527
								flag = true;
	//  246  524:iconst_1        
	//  247  525:istore          7
							return flag;
	//  248  527:iload           7
	//  249  529:ireturn         
						}
					} else
					{
						boolean flag1 = flag6;
	//  250  530:iload           10
	//  251  532:istore          7
						if(j > 0)
	//* 252  534:iload           4
	//* 253  536:ifle            542
							flag1 = true;
	//  254  539:iconst_1        
	//  255  540:istore          7
						return flag1;
	//  256  542:iload           7
	//  257  544:ireturn         
					}
				} else
				{
					boolean flag2 = flag7;
	//  258  545:iload           11
	//  259  547:istore          7
					if(byte0 < 0)
	//* 260  549:iload           5
	//* 261  551:ifge            557
						flag2 = true;
	//  262  554:iconst_1        
	//  263  555:istore          7
					return flag2;
	//  264  557:iload           7
	//  265  559:ireturn         
				}
			} else
			{
				boolean flag3 = flag8;
	//  266  560:iload           12
	//  267  562:istore          7
				if(j < 0)
	//* 268  564:iload           4
	//* 269  566:ifge            572
					flag3 = true;
	//  270  569:iconst_1        
	//  271  570:istore          7
				return flag3;
	//  272  572:iload           7
	//  273  574:ireturn         
			}
		} else
		{
			return false;
	//  274  575:iconst_0        
	//  275  576:ireturn         
		}
	}

	private void onPointerUp(MotionEvent motionevent)
	{
		int i = motionevent.getActionIndex();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1299 <Method int MotionEvent.getActionIndex()>
	//    2    4:istore_2        
		if(motionevent.getPointerId(i) == mScrollPointerId)
	//*   3    5:aload_1         
	//*   4    6:iload_2         
	//*   5    7:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//*   6   10:aload_0         
	//*   7   11:getfield        #427 <Field int mScrollPointerId>
	//*   8   14:icmpne          79
		{
			if(i == 0)
	//*   9   17:iload_2         
	//*  10   18:ifne            26
				i = 1;
	//   11   21:iconst_1        
	//   12   22:istore_2        
			else
	//*  13   23:goto            28
				i = 0;
	//   14   26:iconst_0        
	//   15   27:istore_2        
			mScrollPointerId = motionevent.getPointerId(i);
	//   16   28:aload_0         
	//   17   29:aload_1         
	//   18   30:iload_2         
	//   19   31:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//   20   34:putfield        #427 <Field int mScrollPointerId>
			int j = (int)(motionevent.getX(i) + 0.5F);
	//   21   37:aload_1         
	//   22   38:iload_2         
	//   23   39:invokevirtual   #1307 <Method float MotionEvent.getX(int)>
	//   24   42:ldc2            #1308 <Float 0.5F>
	//   25   45:fadd            
	//   26   46:f2i             
	//   27   47:istore_3        
			mLastTouchX = j;
	//   28   48:aload_0         
	//   29   49:iload_3         
	//   30   50:putfield        #1310 <Field int mLastTouchX>
			mInitialTouchX = j;
	//   31   53:aload_0         
	//   32   54:iload_3         
	//   33   55:putfield        #1312 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//   34   58:aload_1         
	//   35   59:iload_2         
	//   36   60:invokevirtual   #1315 <Method float MotionEvent.getY(int)>
	//   37   63:ldc2            #1308 <Float 0.5F>
	//   38   66:fadd            
	//   39   67:f2i             
	//   40   68:istore_2        
			mLastTouchY = i;
	//   41   69:aload_0         
	//   42   70:iload_2         
	//   43   71:putfield        #1317 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   44   74:aload_0         
	//   45   75:iload_2         
	//   46   76:putfield        #1319 <Field int mInitialTouchY>
		}
	//   47   79:return          
	}

	private boolean predictiveItemAnimationsEnabled()
	{
		return mItemAnimator != null && mLayout.supportsPredictiveItemAnimations();
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1323 <Method boolean RecyclerView$LayoutManager.supportsPredictiveItemAnimations()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	private void processAdapterUpdatesAndSetAnimationFlags()
	{
		if(mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*   2    4:ifeq            29
		{
			mAdapterHelper.reset();
	//    3    7:aload_0         
	//    4    8:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//    5   11:invokevirtual   #1326 <Method void AdapterHelper.reset()>
			if(mDispatchItemsChangedEvent)
	//*   6   14:aload_0         
	//*   7   15:getfield        #411 <Field boolean mDispatchItemsChangedEvent>
	//*   8   18:ifeq            29
				mLayout.onItemsChanged(this);
	//    9   21:aload_0         
	//   10   22:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:invokevirtual   #1329 <Method void RecyclerView$LayoutManager.onItemsChanged(RecyclerView)>
		}
		if(predictiveItemAnimationsEnabled())
	//*  13   29:aload_0         
	//*  14   30:invokespecial   #1331 <Method boolean predictiveItemAnimationsEnabled()>
	//*  15   33:ifeq            46
			mAdapterHelper.preProcess();
	//   16   36:aload_0         
	//   17   37:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   18   40:invokevirtual   #1334 <Method void AdapterHelper.preProcess()>
		else
	//*  19   43:goto            53
			mAdapterHelper.consumeUpdatesInOnePass();
	//   20   46:aload_0         
	//   21   47:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   22   50:invokevirtual   #1007 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		boolean flag1 = mItemsAddedOrRemoved;
	//   23   53:aload_0         
	//   24   54:getfield        #447 <Field boolean mItemsAddedOrRemoved>
	//   25   57:istore_2        
		boolean flag2 = false;
	//   26   58:iconst_0        
	//   27   59:istore_3        
		boolean flag;
		if(!flag1 && !mItemsChanged)
	//*  28   60:iload_2         
	//*  29   61:ifne            79
	//*  30   64:aload_0         
	//*  31   65:getfield        #449 <Field boolean mItemsChanged>
	//*  32   68:ifeq            74
	//*  33   71:goto            79
			flag = false;
	//   34   74:iconst_0        
	//   35   75:istore_1        
		else
	//*  36   76:goto            81
			flag = true;
	//   37   79:iconst_1        
	//   38   80:istore_1        
		State state = mState;
	//   39   81:aload_0         
	//   40   82:getfield        #445 <Field RecyclerView$State mState>
	//   41   85:astore          4
		if(mFirstLayoutComplete && mItemAnimator != null && (mDataSetHasChangedAfterLayout || flag || mLayout.mRequestedSimpleAnimations) && (!mDataSetHasChangedAfterLayout || mAdapter.hasStableIds()))
	//*  42   87:aload_0         
	//*  43   88:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//*  44   91:ifeq            144
	//*  45   94:aload_0         
	//*  46   95:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  47   98:ifnull          144
	//*  48  101:aload_0         
	//*  49  102:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*  50  105:ifne            122
	//*  51  108:iload_1         
	//*  52  109:ifne            122
	//*  53  112:aload_0         
	//*  54  113:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  55  116:getfield        #1054 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
	//*  56  119:ifeq            144
	//*  57  122:aload_0         
	//*  58  123:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*  59  126:ifeq            139
	//*  60  129:aload_0         
	//*  61  130:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  62  133:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  63  136:ifeq            144
			flag1 = true;
	//   64  139:iconst_1        
	//   65  140:istore_2        
		else
	//*  66  141:goto            146
			flag1 = false;
	//   67  144:iconst_0        
	//   68  145:istore_2        
		state.mRunSimpleAnimations = flag1;
	//   69  146:aload           4
	//   70  148:iload_2         
	//   71  149:putfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		state = mState;
	//   72  152:aload_0         
	//   73  153:getfield        #445 <Field RecyclerView$State mState>
	//   74  156:astore          4
		flag1 = flag2;
	//   75  158:iload_3         
	//   76  159:istore_2        
		if(state.mRunSimpleAnimations)
	//*  77  160:aload           4
	//*  78  162:getfield        #895 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  79  165:ifeq            194
		{
			flag1 = flag2;
	//   80  168:iload_3         
	//   81  169:istore_2        
			if(flag)
	//*  82  170:iload_1         
	//*  83  171:ifeq            194
			{
				flag1 = flag2;
	//   84  174:iload_3         
	//   85  175:istore_2        
				if(!mDataSetHasChangedAfterLayout)
	//*  86  176:aload_0         
	//*  87  177:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*  88  180:ifne            194
				{
					flag1 = flag2;
	//   89  183:iload_3         
	//   90  184:istore_2        
					if(predictiveItemAnimationsEnabled())
	//*  91  185:aload_0         
	//*  92  186:invokespecial   #1331 <Method boolean predictiveItemAnimationsEnabled()>
	//*  93  189:ifeq            194
						flag1 = true;
	//   94  192:iconst_1        
	//   95  193:istore_2        
				}
			}
		}
		state.mRunPredictiveAnimations = flag1;
	//   96  194:aload           4
	//   97  196:iload_2         
	//   98  197:putfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   99  200:return          
	}

	private void pullGlows(float f, float f1, float f2, float f3)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          6
		boolean flag;
		if(f1 < 0.0F)
	//*   2    3:fload_2         
	//*   3    4:fconst_0        
	//*   4    5:fcmpg           
	//*   5    6:ifge            43
		{
			ensureLeftGlow();
	//    6    9:aload_0         
	//    7   10:invokevirtual   #1341 <Method void ensureLeftGlow()>
			EdgeEffectCompat.onPull(mLeftGlow, -f1 / (float)getWidth(), 1.0F - f2 / (float)getHeight());
	//    8   13:aload_0         
	//    9   14:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   10   17:fload_2         
	//   11   18:fneg            
	//   12   19:aload_0         
	//   13   20:invokevirtual   #1344 <Method int getWidth()>
	//   14   23:i2f             
	//   15   24:fdiv            
	//   16   25:fconst_1        
	//   17   26:fload_3         
	//   18   27:aload_0         
	//   19   28:invokevirtual   #1345 <Method int getHeight()>
	//   20   31:i2f             
	//   21   32:fdiv            
	//   22   33:fsub            
	//   23   34:invokestatic    #1351 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   24   37:iconst_1        
	//   25   38:istore          5
		} else
	//*  26   40:goto            83
		if(f1 > 0.0F)
	//*  27   43:fload_2         
	//*  28   44:fconst_0        
	//*  29   45:fcmpl           
	//*  30   46:ifle            80
		{
			ensureRightGlow();
	//   31   49:aload_0         
	//   32   50:invokevirtual   #1354 <Method void ensureRightGlow()>
			EdgeEffectCompat.onPull(mRightGlow, f1 / (float)getWidth(), f2 / (float)getHeight());
	//   33   53:aload_0         
	//   34   54:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   35   57:fload_2         
	//   36   58:aload_0         
	//   37   59:invokevirtual   #1344 <Method int getWidth()>
	//   38   62:i2f             
	//   39   63:fdiv            
	//   40   64:fload_3         
	//   41   65:aload_0         
	//   42   66:invokevirtual   #1345 <Method int getHeight()>
	//   43   69:i2f             
	//   44   70:fdiv            
	//   45   71:invokestatic    #1351 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   46   74:iconst_1        
	//   47   75:istore          5
		} else
	//*  48   77:goto            83
		{
			flag = false;
	//   49   80:iconst_0        
	//   50   81:istore          5
		}
		if(f3 < 0.0F)
	//*  51   83:fload           4
	//*  52   85:fconst_0        
	//*  53   86:fcmpg           
	//*  54   87:ifge            124
		{
			ensureTopGlow();
	//   55   90:aload_0         
	//   56   91:invokevirtual   #1359 <Method void ensureTopGlow()>
			EdgeEffectCompat.onPull(mTopGlow, -f3 / (float)getHeight(), f / (float)getWidth());
	//   57   94:aload_0         
	//   58   95:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   59   98:fload           4
	//   60  100:fneg            
	//   61  101:aload_0         
	//   62  102:invokevirtual   #1345 <Method int getHeight()>
	//   63  105:i2f             
	//   64  106:fdiv            
	//   65  107:fload_1         
	//   66  108:aload_0         
	//   67  109:invokevirtual   #1344 <Method int getWidth()>
	//   68  112:i2f             
	//   69  113:fdiv            
	//   70  114:invokestatic    #1351 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = flag1;
	//   71  117:iload           6
	//   72  119:istore          5
		} else
	//*  73  121:goto            166
		if(f3 > 0.0F)
	//*  74  124:fload           4
	//*  75  126:fconst_0        
	//*  76  127:fcmpl           
	//*  77  128:ifle            166
		{
			ensureBottomGlow();
	//   78  131:aload_0         
	//   79  132:invokevirtual   #1364 <Method void ensureBottomGlow()>
			EdgeEffectCompat.onPull(mBottomGlow, f3 / (float)getHeight(), 1.0F - f / (float)getWidth());
	//   80  135:aload_0         
	//   81  136:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   82  139:fload           4
	//   83  141:aload_0         
	//   84  142:invokevirtual   #1345 <Method int getHeight()>
	//   85  145:i2f             
	//   86  146:fdiv            
	//   87  147:fconst_1        
	//   88  148:fload_1         
	//   89  149:aload_0         
	//   90  150:invokevirtual   #1344 <Method int getWidth()>
	//   91  153:i2f             
	//   92  154:fdiv            
	//   93  155:fsub            
	//   94  156:invokestatic    #1351 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = flag1;
	//   95  159:iload           6
	//   96  161:istore          5
		}
	//*  97  163:goto            166
		if(flag || f1 != 0.0F || f3 != 0.0F)
	//*  98  166:iload           5
	//*  99  168:ifne            184
	//* 100  171:fload_2         
	//* 101  172:fconst_0        
	//* 102  173:fcmpl           
	//* 103  174:ifne            184
	//* 104  177:fload           4
	//* 105  179:fconst_0        
	//* 106  180:fcmpl           
	//* 107  181:ifeq            188
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  108  184:aload_0         
	//  109  185:invokestatic    #1369 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  110  188:return          
	}

	private void recoverFocusFromState()
	{
		if(mPreserveFocusAfterLayout && mAdapter != null && hasFocus() && getDescendantFocusability() != 0x60000)
	//*   0    0:aload_0         
	//*   1    1:getfield        #434 <Field boolean mPreserveFocusAfterLayout>
	//*   2    4:ifeq            269
	//*   3    7:aload_0         
	//*   4    8:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:ifnull          269
	//*   6   14:aload_0         
	//*   7   15:invokevirtual   #1370 <Method boolean hasFocus()>
	//*   8   18:ifeq            269
	//*   9   21:aload_0         
	//*  10   22:invokevirtual   #1373 <Method int getDescendantFocusability()>
	//*  11   25:ldc2            #1374 <Int 0x60000>
	//*  12   28:icmpeq          269
		{
			if(getDescendantFocusability() == 0x20000 && isFocused())
	//*  13   31:aload_0         
	//*  14   32:invokevirtual   #1373 <Method int getDescendantFocusability()>
	//*  15   35:ldc2            #1375 <Int 0x20000>
	//*  16   38:icmpne          49
	//*  17   41:aload_0         
	//*  18   42:invokevirtual   #1376 <Method boolean isFocused()>
	//*  19   45:ifeq            49
				return;
	//   20   48:return          
			if(!isFocused())
	//*  21   49:aload_0         
	//*  22   50:invokevirtual   #1376 <Method boolean isFocused()>
	//*  23   53:ifne            109
			{
				View view = getFocusedChild();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #1377 <Method View getFocusedChild()>
	//   26   60:astore_3        
				if(IGNORE_DETACHED_FOCUSED_CHILD && (view.getParent() == null || !view.hasFocus()))
	//*  27   61:getstatic       #340 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//*  28   64:ifeq            97
	//*  29   67:aload_3         
	//*  30   68:invokevirtual   #667 <Method ViewParent View.getParent()>
	//*  31   71:ifnull          81
	//*  32   74:aload_3         
	//*  33   75:invokevirtual   #1193 <Method boolean View.hasFocus()>
	//*  34   78:ifne            97
				{
					if(mChildHelper.getChildCount() == 0)
	//*  35   81:aload_0         
	//*  36   82:getfield        #679 <Field ChildHelper mChildHelper>
	//*  37   85:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//*  38   88:ifne            109
					{
						requestFocus();
	//   39   91:aload_0         
	//   40   92:invokevirtual   #1380 <Method boolean requestFocus()>
	//   41   95:pop             
						return;
	//   42   96:return          
					}
				} else
				if(!mChildHelper.isHidden(view))
	//*  43   97:aload_0         
	//*  44   98:getfield        #679 <Field ChildHelper mChildHelper>
	//*  45  101:aload_3         
	//*  46  102:invokevirtual   #1384 <Method boolean ChildHelper.isHidden(View)>
	//*  47  105:ifne            109
					return;
	//   48  108:return          
			}
			long l = mState.mFocusedItemId;
	//   49  109:aload_0         
	//   50  110:getfield        #445 <Field RecyclerView$State mState>
	//   51  113:getfield        #1387 <Field long RecyclerView$State.mFocusedItemId>
	//   52  116:lstore_1        
			Object obj1 = null;
	//   53  117:aconst_null     
	//   54  118:astore          4
			Object obj;
			if(l != -1L && mAdapter.hasStableIds())
	//*  55  120:lload_1         
	//*  56  121:ldc2w           #161 <Long -1L>
	//*  57  124:lcmp            
	//*  58  125:ifeq            153
	//*  59  128:aload_0         
	//*  60  129:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  61  132:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  62  135:ifeq            153
				obj = ((Object) (findViewHolderForItemId(mState.mFocusedItemId)));
	//   63  138:aload_0         
	//   64  139:aload_0         
	//   65  140:getfield        #445 <Field RecyclerView$State mState>
	//   66  143:getfield        #1387 <Field long RecyclerView$State.mFocusedItemId>
	//   67  146:invokevirtual   #1390 <Method RecyclerView$ViewHolder findViewHolderForItemId(long)>
	//   68  149:astore_3        
			else
	//*  69  150:goto            155
				obj = null;
	//   70  153:aconst_null     
	//   71  154:astore_3        
			if(obj != null && !mChildHelper.isHidden(((ViewHolder) (obj)).itemView) && ((ViewHolder) (obj)).itemView.hasFocusable())
	//*  72  155:aload_3         
	//*  73  156:ifnull          194
	//*  74  159:aload_0         
	//*  75  160:getfield        #679 <Field ChildHelper mChildHelper>
	//*  76  163:aload_3         
	//*  77  164:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  78  167:invokevirtual   #1384 <Method boolean ChildHelper.isHidden(View)>
	//*  79  170:ifne            194
	//*  80  173:aload_3         
	//*  81  174:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  82  177:invokevirtual   #1130 <Method boolean View.hasFocusable()>
	//*  83  180:ifne            186
	//*  84  183:goto            194
			{
				obj = ((Object) (((ViewHolder) (obj)).itemView));
	//   85  186:aload_3         
	//   86  187:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   87  190:astore_3        
			} else
	//*  88  191:goto            212
			{
				obj = ((Object) (obj1));
	//   89  194:aload           4
	//   90  196:astore_3        
				if(mChildHelper.getChildCount() > 0)
	//*  91  197:aload_0         
	//*  92  198:getfield        #679 <Field ChildHelper mChildHelper>
	//*  93  201:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//*  94  204:ifle            212
					obj = ((Object) (findNextViewToFocus()));
	//   95  207:aload_0         
	//   96  208:invokespecial   #1392 <Method View findNextViewToFocus()>
	//   97  211:astore_3        
			}
			if(obj != null)
	//*  98  212:aload_3         
	//*  99  213:ifnull          268
			{
				if((long)mState.mFocusedSubChildId != -1L)
	//* 100  216:aload_0         
	//* 101  217:getfield        #445 <Field RecyclerView$State mState>
	//* 102  220:getfield        #1395 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 103  223:i2l             
	//* 104  224:ldc2w           #161 <Long -1L>
	//* 105  227:lcmp            
	//* 106  228:ifeq            263
				{
					View view1 = ((View) (obj)).findViewById(mState.mFocusedSubChildId);
	//  107  231:aload_3         
	//  108  232:aload_0         
	//  109  233:getfield        #445 <Field RecyclerView$State mState>
	//  110  236:getfield        #1395 <Field int RecyclerView$State.mFocusedSubChildId>
	//  111  239:invokevirtual   #1398 <Method View View.findViewById(int)>
	//  112  242:astore          4
					if(view1 != null && view1.isFocusable())
	//* 113  244:aload           4
	//* 114  246:ifnull          263
	//* 115  249:aload           4
	//* 116  251:invokevirtual   #1401 <Method boolean View.isFocusable()>
	//* 117  254:ifeq            263
						obj = ((Object) (view1));
	//  118  257:aload           4
	//  119  259:astore_3        
				}
	//* 120  260:goto            263
				((View) (obj)).requestFocus();
	//  121  263:aload_3         
	//  122  264:invokevirtual   #1402 <Method boolean View.requestFocus()>
	//  123  267:pop             
			}
			return;
	//  124  268:return          
		} else
		{
			return;
	//  125  269:return          
		}
	}

	private void releaseGlows()
	{
		EdgeEffect edgeeffect = mLeftGlow;
	//    0    0:aload_0         
	//    1    1:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//    2    4:astore_3        
		boolean flag1;
		if(edgeeffect != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          24
		{
			edgeeffect.onRelease();
	//    5    9:aload_3         
	//    6   10:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//    7   13:aload_0         
	//    8   14:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//    9   17:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   10   20:istore_2        
		} else
	//*  11   21:goto            26
		{
			flag1 = false;
	//   12   24:iconst_0        
	//   13   25:istore_2        
		}
		edgeeffect = mTopGlow;
	//   14   26:aload_0         
	//   15   27:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   16   30:astore_3        
		boolean flag = flag1;
	//   17   31:iload_2         
	//   18   32:istore_1        
		if(edgeeffect != null)
	//*  19   33:aload_3         
	//*  20   34:ifnull          51
		{
			edgeeffect.onRelease();
	//   21   37:aload_3         
	//   22   38:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mTopGlow.isFinished();
	//   23   41:iload_2         
	//   24   42:aload_0         
	//   25   43:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   26   46:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   27   49:ior             
	//   28   50:istore_1        
		}
		edgeeffect = mRightGlow;
	//   29   51:aload_0         
	//   30   52:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   31   55:astore_3        
		flag1 = flag;
	//   32   56:iload_1         
	//   33   57:istore_2        
		if(edgeeffect != null)
	//*  34   58:aload_3         
	//*  35   59:ifnull          76
		{
			edgeeffect.onRelease();
	//   36   62:aload_3         
	//   37   63:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
			flag1 = flag | mRightGlow.isFinished();
	//   38   66:iload_1         
	//   39   67:aload_0         
	//   40   68:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   41   71:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   42   74:ior             
	//   43   75:istore_2        
		}
		edgeeffect = mBottomGlow;
	//   44   76:aload_0         
	//   45   77:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   46   80:astore_3        
		flag = flag1;
	//   47   81:iload_2         
	//   48   82:istore_1        
		if(edgeeffect != null)
	//*  49   83:aload_3         
	//*  50   84:ifnull          101
		{
			edgeeffect.onRelease();
	//   51   87:aload_3         
	//   52   88:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mBottomGlow.isFinished();
	//   53   91:iload_2         
	//   54   92:aload_0         
	//   55   93:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   56   96:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   57   99:ior             
	//   58  100:istore_1        
		}
		if(flag)
	//*  59  101:iload_1         
	//*  60  102:ifeq            109
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   61  105:aload_0         
	//   62  106:invokestatic    #1369 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   63  109:return          
	}

	private void requestChildOnScreen(View view, View view1)
	{
		Object obj;
		if(view1 != null)
	//*   0    0:aload_2         
	//*   1    1:ifnull          10
			obj = ((Object) (view1));
	//    2    4:aload_2         
	//    3    5:astore          5
		else
	//*   4    7:goto            13
			obj = ((Object) (view));
	//    5   10:aload_1         
	//    6   11:astore          5
		mTempRect.set(0, 0, ((View) (obj)).getWidth(), ((View) (obj)).getHeight());
	//    7   13:aload_0         
	//    8   14:getfield        #391 <Field Rect mTempRect>
	//    9   17:iconst_0        
	//   10   18:iconst_0        
	//   11   19:aload           5
	//   12   21:invokevirtual   #1277 <Method int View.getWidth()>
	//   13   24:aload           5
	//   14   26:invokevirtual   #1280 <Method int View.getHeight()>
	//   15   29:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
		obj = ((Object) (((View) (obj)).getLayoutParams()));
	//   16   32:aload           5
	//   17   34:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   18   37:astore          5
		if(obj instanceof LayoutParams)
	//*  19   39:aload           5
	//*  20   41:instanceof      #74  <Class RecyclerView$LayoutParams>
	//*  21   44:ifeq            157
		{
			obj = ((Object) ((LayoutParams)obj));
	//   22   47:aload           5
	//   23   49:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   24   52:astore          5
			if(!((LayoutParams) (obj)).mInsetsDirty)
	//*  25   54:aload           5
	//*  26   56:getfield        #1416 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*  27   59:ifne            157
			{
				obj = ((Object) (((LayoutParams) (obj)).mDecorInsets));
	//   28   62:aload           5
	//   29   64:getfield        #1143 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   30   67:astore          5
				Rect rect = mTempRect;
	//   31   69:aload_0         
	//   32   70:getfield        #391 <Field Rect mTempRect>
	//   33   73:astore          6
				rect.left = rect.left - ((Rect) (obj)).left;
	//   34   75:aload           6
	//   35   77:aload           6
	//   36   79:getfield        #1149 <Field int Rect.left>
	//   37   82:aload           5
	//   38   84:getfield        #1149 <Field int Rect.left>
	//   39   87:isub            
	//   40   88:putfield        #1149 <Field int Rect.left>
				rect = mTempRect;
	//   41   91:aload_0         
	//   42   92:getfield        #391 <Field Rect mTempRect>
	//   43   95:astore          6
				rect.right = rect.right + ((Rect) (obj)).right;
	//   44   97:aload           6
	//   45   99:aload           6
	//   46  101:getfield        #1167 <Field int Rect.right>
	//   47  104:aload           5
	//   48  106:getfield        #1167 <Field int Rect.right>
	//   49  109:iadd            
	//   50  110:putfield        #1167 <Field int Rect.right>
				rect = mTempRect;
	//   51  113:aload_0         
	//   52  114:getfield        #391 <Field Rect mTempRect>
	//   53  117:astore          6
				rect.top = rect.top - ((Rect) (obj)).top;
	//   54  119:aload           6
	//   55  121:aload           6
	//   56  123:getfield        #1158 <Field int Rect.top>
	//   57  126:aload           5
	//   58  128:getfield        #1158 <Field int Rect.top>
	//   59  131:isub            
	//   60  132:putfield        #1158 <Field int Rect.top>
				rect = mTempRect;
	//   61  135:aload_0         
	//   62  136:getfield        #391 <Field Rect mTempRect>
	//   63  139:astore          6
				rect.bottom = rect.bottom + ((Rect) (obj)).bottom;
	//   64  141:aload           6
	//   65  143:aload           6
	//   66  145:getfield        #1176 <Field int Rect.bottom>
	//   67  148:aload           5
	//   68  150:getfield        #1176 <Field int Rect.bottom>
	//   69  153:iadd            
	//   70  154:putfield        #1176 <Field int Rect.bottom>
			}
		}
		if(view1 != null)
	//*  71  157:aload_2         
	//*  72  158:ifnull          179
		{
			offsetDescendantRectToMyCoords(view1, mTempRect);
	//   73  161:aload_0         
	//   74  162:aload_2         
	//   75  163:aload_0         
	//   76  164:getfield        #391 <Field Rect mTempRect>
	//   77  167:invokevirtual   #1283 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			offsetRectIntoDescendantCoords(view, mTempRect);
	//   78  170:aload_0         
	//   79  171:aload_1         
	//   80  172:aload_0         
	//   81  173:getfield        #391 <Field Rect mTempRect>
	//   82  176:invokevirtual   #1419 <Method void offsetRectIntoDescendantCoords(View, Rect)>
		}
		obj = ((Object) (mLayout));
	//   83  179:aload_0         
	//   84  180:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   85  183:astore          5
		Rect rect1 = mTempRect;
	//   86  185:aload_0         
	//   87  186:getfield        #391 <Field Rect mTempRect>
	//   88  189:astore          6
		boolean flag1 = mFirstLayoutComplete;
	//   89  191:aload_0         
	//   90  192:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//   91  195:istore          4
		boolean flag;
		if(view1 == null)
	//*  92  197:aload_2         
	//*  93  198:ifnonnull       206
			flag = true;
	//   94  201:iconst_1        
	//   95  202:istore_3        
		else
	//*  96  203:goto            208
			flag = false;
	//   97  206:iconst_0        
	//   98  207:istore_3        
		((LayoutManager) (obj)).requestChildRectangleOnScreen(this, view, rect1, flag1 ^ true, flag);
	//   99  208:aload           5
	//  100  210:aload_0         
	//  101  211:aload_1         
	//  102  212:aload           6
	//  103  214:iload           4
	//  104  216:iconst_1        
	//  105  217:ixor            
	//  106  218:iload_3         
	//  107  219:invokevirtual   #1423 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
	//  108  222:pop             
	//  109  223:return          
	}

	private void resetFocusInfo()
	{
		State state = mState;
	//    0    0:aload_0         
	//    1    1:getfield        #445 <Field RecyclerView$State mState>
	//    2    4:astore_1        
		state.mFocusedItemId = -1L;
	//    3    5:aload_1         
	//    4    6:ldc2w           #161 <Long -1L>
	//    5    9:putfield        #1387 <Field long RecyclerView$State.mFocusedItemId>
		state.mFocusedItemPosition = -1;
	//    6   12:aload_1         
	//    7   13:iconst_m1       
	//    8   14:putfield        #1122 <Field int RecyclerView$State.mFocusedItemPosition>
		state.mFocusedSubChildId = -1;
	//    9   17:aload_1         
	//   10   18:iconst_m1       
	//   11   19:putfield        #1395 <Field int RecyclerView$State.mFocusedSubChildId>
	//   12   22:return          
	}

	private void resetTouch()
	{
		VelocityTracker velocitytracker = mVelocityTracker;
	//    0    0:aload_0         
	//    1    1:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//    2    4:astore_1        
		if(velocitytracker != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          13
			velocitytracker.clear();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1428 <Method void VelocityTracker.clear()>
		stopNestedScroll(0);
	//    7   13:aload_0         
	//    8   14:iconst_0        
	//    9   15:invokevirtual   #1431 <Method void stopNestedScroll(int)>
		releaseGlows();
	//   10   18:aload_0         
	//   11   19:invokespecial   #1433 <Method void releaseGlows()>
	//   12   22:return          
	}

	private void saveFocusInfo()
	{
		boolean flag = mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #434 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:istore_2        
		State state = null;
	//    3    5:aconst_null     
	//    4    6:astore          6
		Object obj;
		if(flag && hasFocus() && mAdapter != null)
	//*   5    8:iload_2         
	//*   6    9:ifeq            35
	//*   7   12:aload_0         
	//*   8   13:invokevirtual   #1370 <Method boolean hasFocus()>
	//*   9   16:ifeq            35
	//*  10   19:aload_0         
	//*  11   20:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          35
			obj = ((Object) (getFocusedChild()));
	//   13   26:aload_0         
	//   14   27:invokevirtual   #1377 <Method View getFocusedChild()>
	//   15   30:astore          5
		else
	//*  16   32:goto            38
			obj = null;
	//   17   35:aconst_null     
	//   18   36:astore          5
		if(obj == null)
	//*  19   38:aload           5
	//*  20   40:ifnonnull       50
			obj = ((Object) (state));
	//   21   43:aload           6
	//   22   45:astore          5
		else
	//*  23   47:goto            58
			obj = ((Object) (findContainingViewHolder(((View) (obj)))));
	//   24   50:aload_0         
	//   25   51:aload           5
	//   26   53:invokevirtual   #1436 <Method RecyclerView$ViewHolder findContainingViewHolder(View)>
	//   27   56:astore          5
		if(obj == null)
	//*  28   58:aload           5
	//*  29   60:ifnonnull       68
		{
			resetFocusInfo();
	//   30   63:aload_0         
	//   31   64:invokespecial   #1081 <Method void resetFocusInfo()>
			return;
	//   32   67:return          
		}
		state = mState;
	//   33   68:aload_0         
	//   34   69:getfield        #445 <Field RecyclerView$State mState>
	//   35   72:astore          6
		long l;
		if(mAdapter.hasStableIds())
	//*  36   74:aload_0         
	//*  37   75:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  38   78:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  39   81:ifeq            93
			l = ((ViewHolder) (obj)).getItemId();
	//   40   84:aload           5
	//   41   86:invokevirtual   #1440 <Method long RecyclerView$ViewHolder.getItemId()>
	//   42   89:lstore_3        
		else
	//*  43   90:goto            97
			l = -1L;
	//   44   93:ldc2w           #161 <Long -1L>
	//   45   96:lstore_3        
		state.mFocusedItemId = l;
	//   46   97:aload           6
	//   47   99:lload_3         
	//   48  100:putfield        #1387 <Field long RecyclerView$State.mFocusedItemId>
		state = mState;
	//   49  103:aload_0         
	//   50  104:getfield        #445 <Field RecyclerView$State mState>
	//   51  107:astore          6
		int i;
		if(mDataSetHasChangedAfterLayout)
	//*  52  109:aload_0         
	//*  53  110:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*  54  113:ifeq            121
			i = -1;
	//   55  116:iconst_m1       
	//   56  117:istore_1        
		else
	//*  57  118:goto            144
		if(((ViewHolder) (obj)).isRemoved())
	//*  58  121:aload           5
	//*  59  123:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  60  126:ifeq            138
			i = ((ViewHolder) (obj)).mOldPosition;
	//   61  129:aload           5
	//   62  131:getfield        #1443 <Field int RecyclerView$ViewHolder.mOldPosition>
	//   63  134:istore_1        
		else
	//*  64  135:goto            144
			i = ((ViewHolder) (obj)).getAdapterPosition();
	//   65  138:aload           5
	//   66  140:invokevirtual   #1446 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//   67  143:istore_1        
		state.mFocusedItemPosition = i;
	//   68  144:aload           6
	//   69  146:iload_1         
	//   70  147:putfield        #1122 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = getDeepestFocusedViewWithId(((ViewHolder) (obj)).itemView);
	//   71  150:aload_0         
	//   72  151:getfield        #445 <Field RecyclerView$State mState>
	//   73  154:aload_0         
	//   74  155:aload           5
	//   75  157:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   76  160:invokespecial   #1448 <Method int getDeepestFocusedViewWithId(View)>
	//   77  163:putfield        #1395 <Field int RecyclerView$State.mFocusedSubChildId>
	//   78  166:return          
	}

	private void setAdapterInternal(Adapter adapter, boolean flag, boolean flag1)
	{
		Adapter adapter1 = mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    2    4:astore          4
		if(adapter1 != null)
	//*   3    6:aload           4
	//*   4    8:ifnull          28
		{
			adapter1.unregisterAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//    5   11:aload           4
	//    6   13:aload_0         
	//    7   14:getfield        #375 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//    8   17:invokevirtual   #1454 <Method void RecyclerView$Adapter.unregisterAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			mAdapter.onDetachedFromRecyclerView(this);
	//    9   20:aload_0         
	//   10   21:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   11   24:aload_0         
	//   12   25:invokevirtual   #1457 <Method void RecyclerView$Adapter.onDetachedFromRecyclerView(RecyclerView)>
		}
		if(!flag || flag1)
	//*  13   28:iload_2         
	//*  14   29:ifeq            36
	//*  15   32:iload_3         
	//*  16   33:ifeq            40
			removeAndRecycleViews();
	//   17   36:aload_0         
	//   18   37:invokevirtual   #1460 <Method void removeAndRecycleViews()>
		mAdapterHelper.reset();
	//   19   40:aload_0         
	//   20   41:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   21   44:invokevirtual   #1326 <Method void AdapterHelper.reset()>
		adapter1 = mAdapter;
	//   22   47:aload_0         
	//   23   48:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   24   51:astore          4
		mAdapter = adapter;
	//   25   53:aload_0         
	//   26   54:aload_1         
	//   27   55:putfield        #906 <Field RecyclerView$Adapter mAdapter>
		if(adapter != null)
	//*  28   58:aload_1         
	//*  29   59:ifnull          75
		{
			adapter.registerAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//   30   62:aload_1         
	//   31   63:aload_0         
	//   32   64:getfield        #375 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//   33   67:invokevirtual   #1463 <Method void RecyclerView$Adapter.registerAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			adapter.onAttachedToRecyclerView(this);
	//   34   70:aload_1         
	//   35   71:aload_0         
	//   36   72:invokevirtual   #1466 <Method void RecyclerView$Adapter.onAttachedToRecyclerView(RecyclerView)>
		}
		adapter = ((Adapter) (mLayout));
	//   37   75:aload_0         
	//   38   76:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   39   79:astore_1        
		if(adapter != null)
	//*  40   80:aload_1         
	//*  41   81:ifnull          94
			((LayoutManager) (adapter)).onAdapterChanged(adapter1, mAdapter);
	//   42   84:aload_1         
	//   43   85:aload           4
	//   44   87:aload_0         
	//   45   88:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   46   91:invokevirtual   #1470 <Method void RecyclerView$LayoutManager.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter)>
		mRecycler.onAdapterChanged(adapter1, mAdapter, flag);
	//   47   94:aload_0         
	//   48   95:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   49   98:aload           4
	//   50  100:aload_0         
	//   51  101:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   52  104:iload_2         
	//   53  105:invokevirtual   #1473 <Method void RecyclerView$Recycler.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		mState.mStructureChanged = true;
	//   54  108:aload_0         
	//   55  109:getfield        #445 <Field RecyclerView$State mState>
	//   56  112:iconst_1        
	//   57  113:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
	//   58  116:return          
	}

	private void stopScrollersInternal()
	{
		mViewFlinger.stop();
	//    0    0:aload_0         
	//    1    1:getfield        #437 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    2    4:invokevirtual   #1477 <Method void RecyclerView$ViewFlinger.stop()>
		LayoutManager layoutmanager = mLayout;
	//    3    7:aload_0         
	//    4    8:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:astore_1        
		if(layoutmanager != null)
	//*   6   12:aload_1         
	//*   7   13:ifnull          20
			layoutmanager.stopSmoothScroller();
	//    8   16:aload_1         
	//    9   17:invokevirtual   #1480 <Method void RecyclerView$LayoutManager.stopSmoothScroller()>
	//   10   20:return          
	}

	void absorbGlows(int i, int j)
	{
		if(i < 0)
	//*   0    0:iload_1         
	//*   1    1:ifge            20
		{
			ensureLeftGlow();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #1341 <Method void ensureLeftGlow()>
			mLeftGlow.onAbsorb(-i);
	//    4    8:aload_0         
	//    5    9:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//    6   12:iload_1         
	//    7   13:ineg            
	//    8   14:invokevirtual   #1484 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*   9   17:goto            36
		if(i > 0)
	//*  10   20:iload_1         
	//*  11   21:ifle            36
		{
			ensureRightGlow();
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1354 <Method void ensureRightGlow()>
			mRightGlow.onAbsorb(i);
	//   14   28:aload_0         
	//   15   29:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1484 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(j < 0)
	//*  18   36:iload_2         
	//*  19   37:ifge            56
		{
			ensureTopGlow();
	//   20   40:aload_0         
	//   21   41:invokevirtual   #1359 <Method void ensureTopGlow()>
			mTopGlow.onAbsorb(-j);
	//   22   44:aload_0         
	//   23   45:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   24   48:iload_2         
	//   25   49:ineg            
	//   26   50:invokevirtual   #1484 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*  27   53:goto            72
		if(j > 0)
	//*  28   56:iload_2         
	//*  29   57:ifle            72
		{
			ensureBottomGlow();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1364 <Method void ensureBottomGlow()>
			mBottomGlow.onAbsorb(j);
	//   32   64:aload_0         
	//   33   65:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   34   68:iload_2         
	//   35   69:invokevirtual   #1484 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(i != 0 || j != 0)
	//*  36   72:iload_1         
	//*  37   73:ifne            80
	//*  38   76:iload_2         
	//*  39   77:ifeq            84
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   40   80:aload_0         
	//   41   81:invokestatic    #1369 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   42   84:return          
	}

	public void addFocusables(ArrayList arraylist, int i, int j)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          4
		if(layoutmanager == null || !layoutmanager.onAddFocusables(this, arraylist, i, j))
	//*   3    6:aload           4
	//*   4    8:ifnull          23
	//*   5   11:aload           4
	//*   6   13:aload_0         
	//*   7   14:aload_1         
	//*   8   15:iload_2         
	//*   9   16:iload_3         
	//*  10   17:invokevirtual   #1490 <Method boolean RecyclerView$LayoutManager.onAddFocusables(RecyclerView, ArrayList, int, int)>
	//*  11   20:ifne            30
			super.addFocusables(arraylist, i, j);
	//   12   23:aload_0         
	//   13   24:aload_1         
	//   14   25:iload_2         
	//   15   26:iload_3         
	//   16   27:invokespecial   #1492 <Method void ViewGroup.addFocusables(ArrayList, int, int)>
	//   17   30:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration)
	{
		addItemDecoration(itemdecoration, -1);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iconst_m1       
	//    3    3:invokevirtual   #1499 <Method void addItemDecoration(RecyclerView$ItemDecoration, int)>
	//    4    6:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration, int i)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_3        
		if(layoutmanager != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          16
			layoutmanager.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or layout");
	//    5    9:aload_3         
	//    6   10:ldc2            #1501 <String "Cannot add item decoration during a scroll  or layout">
	//    7   13:invokevirtual   #1504 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		if(mItemDecorations.isEmpty())
	//*   8   16:aload_0         
	//*   9   17:getfield        #403 <Field ArrayList mItemDecorations>
	//*  10   20:invokevirtual   #1505 <Method boolean ArrayList.isEmpty()>
	//*  11   23:ifeq            31
			setWillNotDraw(false);
	//   12   26:aload_0         
	//   13   27:iconst_0        
	//   14   28:invokevirtual   #531 <Method void setWillNotDraw(boolean)>
		if(i < 0)
	//*  15   31:iload_2         
	//*  16   32:ifge            47
			mItemDecorations.add(((Object) (itemdecoration)));
	//   17   35:aload_0         
	//   18   36:getfield        #403 <Field ArrayList mItemDecorations>
	//   19   39:aload_1         
	//   20   40:invokevirtual   #1509 <Method boolean ArrayList.add(Object)>
	//   21   43:pop             
		else
	//*  22   44:goto            56
			mItemDecorations.add(i, ((Object) (itemdecoration)));
	//   23   47:aload_0         
	//   24   48:getfield        #403 <Field ArrayList mItemDecorations>
	//   25   51:iload_2         
	//   26   52:aload_1         
	//   27   53:invokevirtual   #1512 <Method void ArrayList.add(int, Object)>
		markItemDecorInsetsDirty();
	//   28   56:aload_0         
	//   29   57:invokevirtual   #1515 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1518 <Method void requestLayout()>
	//   32   64:return          
	}

	public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       18
			mOnChildAttachStateListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #400 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #401 <Method void ArrayList()>
	//    7   15:putfield        #1522 <Field List mOnChildAttachStateListeners>
		mOnChildAttachStateListeners.add(((Object) (onchildattachstatechangelistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1525 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	public void addOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.add(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #1509 <Method boolean ArrayList.add(Object)>
	//    4    8:pop             
	//    5    9:return          
	}

	public void addOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1531 <Field List mScrollListeners>
	//*   2    4:ifnonnull       18
			mScrollListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #400 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #401 <Method void ArrayList()>
	//    7   15:putfield        #1531 <Field List mScrollListeners>
		mScrollListeners.add(((Object) (onscrolllistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1531 <Field List mScrollListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1525 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	void animateAppearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #701 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateAppearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   3    5:aload_0         
	//*   4    6:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:aload_3         
	//*   8   12:invokevirtual   #1536 <Method boolean RecyclerView$ItemAnimator.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*   9   15:ifeq            22
			postAnimationRunner();
	//   10   18:aload_0         
	//   11   19:invokevirtual   #716 <Method void postAnimationRunner()>
	//   12   22:return          
	}

	void animateDisappearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		addAnimatingView(viewholder);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #703 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		viewholder.setIsRecyclable(false);
	//    3    5:aload_1         
	//    4    6:iconst_0        
	//    5    7:invokevirtual   #701 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateDisappearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   6   10:aload_0         
	//*   7   11:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   8   14:aload_1         
	//*   9   15:aload_2         
	//*  10   16:aload_3         
	//*  11   17:invokevirtual   #1539 <Method boolean RecyclerView$ItemAnimator.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  12   20:ifeq            27
			postAnimationRunner();
	//   13   23:aload_0         
	//   14   24:invokevirtual   #716 <Method void postAnimationRunner()>
	//   15   27:return          
	}

	void assertInLayoutOrScroll(String s)
	{
		if(!isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*   2    4:ifne            83
		{
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       48
			{
				s = ((String) (new StringBuilder()));
	//    5   11:new             #809 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #810 <Method void StringBuilder()>
	//    8   18:astore_1        
				((StringBuilder) (s)).append("Cannot call this method unless RecyclerView is computing a layout or scrolling");
	//    9   19:aload_1         
	//   10   20:ldc2            #1545 <String "Cannot call this method unless RecyclerView is computing a layout or scrolling">
	//   11   23:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   12   26:pop             
				((StringBuilder) (s)).append(exceptionLabel());
	//   13   27:aload_1         
	//   14   28:aload_0         
	//   15   29:invokevirtual   #1239 <Method String exceptionLabel()>
	//   16   32:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   17   35:pop             
				throw new IllegalStateException(((StringBuilder) (s)).toString());
	//   18   36:new             #821 <Class IllegalStateException>
	//   19   39:dup             
	//   20   40:aload_1         
	//   21   41:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   22   44:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   23   47:athrow          
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
	//   24   48:new             #809 <Class StringBuilder>
	//   25   51:dup             
	//   26   52:invokespecial   #810 <Method void StringBuilder()>
	//   27   55:astore_2        
				stringbuilder.append(s);
	//   28   56:aload_2         
	//   29   57:aload_1         
	//   30   58:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   31   61:pop             
				stringbuilder.append(exceptionLabel());
	//   32   62:aload_2         
	//   33   63:aload_0         
	//   34   64:invokevirtual   #1239 <Method String exceptionLabel()>
	//   35   67:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   36   70:pop             
				throw new IllegalStateException(stringbuilder.toString());
	//   37   71:new             #821 <Class IllegalStateException>
	//   38   74:dup             
	//   39   75:aload_2         
	//   40   76:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   41   79:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   42   82:athrow          
			}
		} else
		{
			return;
	//   43   83:return          
		}
	}

	void assertNotInLayoutOrScroll(String s)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            57
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       48
			{
				s = ((String) (new StringBuilder()));
	//    5   11:new             #809 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #810 <Method void StringBuilder()>
	//    8   18:astore_1        
				((StringBuilder) (s)).append("Cannot call this method while RecyclerView is computing a layout or scrolling");
	//    9   19:aload_1         
	//   10   20:ldc2            #1547 <String "Cannot call this method while RecyclerView is computing a layout or scrolling">
	//   11   23:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   12   26:pop             
				((StringBuilder) (s)).append(exceptionLabel());
	//   13   27:aload_1         
	//   14   28:aload_0         
	//   15   29:invokevirtual   #1239 <Method String exceptionLabel()>
	//   16   32:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   17   35:pop             
				throw new IllegalStateException(((StringBuilder) (s)).toString());
	//   18   36:new             #821 <Class IllegalStateException>
	//   19   39:dup             
	//   20   40:aload_1         
	//   21   41:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   22   44:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   23   47:athrow          
			} else
			{
				throw new IllegalStateException(s);
	//   24   48:new             #821 <Class IllegalStateException>
	//   25   51:dup             
	//   26   52:aload_1         
	//   27   53:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   28   56:athrow          
			}
		if(mDispatchScrollCounter > 0)
	//*  29   57:aload_0         
	//*  30   58:getfield        #415 <Field int mDispatchScrollCounter>
	//*  31   61:ifle            109
		{
			s = ((String) (new StringBuilder()));
	//   32   64:new             #809 <Class StringBuilder>
	//   33   67:dup             
	//   34   68:invokespecial   #810 <Method void StringBuilder()>
	//   35   71:astore_1        
			((StringBuilder) (s)).append("");
	//   36   72:aload_1         
	//   37   73:ldc2            #1549 <String "">
	//   38   76:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   39   79:pop             
			((StringBuilder) (s)).append(exceptionLabel());
	//   40   80:aload_1         
	//   41   81:aload_0         
	//   42   82:invokevirtual   #1239 <Method String exceptionLabel()>
	//   43   85:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   44   88:pop             
			Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", ((Throwable) (new IllegalStateException(((StringBuilder) (s)).toString()))));
	//   45   89:ldc1            #172 <String "RecyclerView">
	//   46   91:ldc2            #1551 <String "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.">
	//   47   94:new             #821 <Class IllegalStateException>
	//   48   97:dup             
	//   49   98:aload_1         
	//   50   99:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   51  102:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   52  105:invokestatic    #1555 <Method int Log.w(String, String, Throwable)>
	//   53  108:pop             
		}
	//   54  109:return          
	}

	boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
	{
		ItemAnimator itemanimator = mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:astore_2        
		return itemanimator == null || itemanimator.canReuseUpdatedViewHolder(viewholder, viewholder.getUnmodifiedPayloads());
	//    3    5:aload_2         
	//    4    6:ifnull          26
	//    5    9:aload_2         
	//    6   10:aload_1         
	//    7   11:aload_1         
	//    8   12:invokevirtual   #939 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//    9   15:invokevirtual   #1559 <Method boolean RecyclerView$ItemAnimator.canReuseUpdatedViewHolder(RecyclerView$ViewHolder, List)>
	//   10   18:ifeq            24
	//   11   21:goto            26
	//   12   24:iconst_0        
	//   13   25:ireturn         
	//   14   26:iconst_1        
	//   15   27:ireturn         
	}

	protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		return (layoutparams instanceof LayoutParams) && mLayout.checkLayoutParams((LayoutParams)layoutparams);
	//    0    0:aload_1         
	//    1    1:instanceof      #74  <Class RecyclerView$LayoutParams>
	//    2    4:ifeq            23
	//    3    7:aload_0         
	//    4    8:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:aload_1         
	//    6   12:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    7   15:invokevirtual   #1564 <Method boolean RecyclerView$LayoutManager.checkLayoutParams(RecyclerView$LayoutParams)>
	//    8   18:ifeq            23
	//    9   21:iconst_1        
	//   10   22:ireturn         
	//   11   23:iconst_0        
	//   12   24:ireturn         
	}

	void clearOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.clearOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #1573 <Method void RecyclerView$ViewHolder.clearOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
		mRecycler.clearOldPositions();
	//   25   45:aload_0         
	//   26   46:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   27   49:invokevirtual   #1574 <Method void RecyclerView$Recycler.clearOldPositions()>
	//   28   52:return          
	}

	public void clearOnChildAttachStateChangeListeners()
	{
		List list = mOnChildAttachStateListeners;
	//    0    0:aload_0         
	//    1    1:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//    2    4:astore_1        
		if(list != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          15
			list.clear();
	//    5    9:aload_1         
	//    6   10:invokeinterface #1576 <Method void List.clear()>
	//    7   15:return          
	}

	public void clearOnScrollListeners()
	{
		List list = mScrollListeners;
	//    0    0:aload_0         
	//    1    1:getfield        #1531 <Field List mScrollListeners>
	//    2    4:astore_1        
		if(list != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          15
			list.clear();
	//    5    9:aload_1         
	//    6   10:invokeinterface #1576 <Method void List.clear()>
	//    7   15:return          
	}

	public int computeHorizontalScrollExtent()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollHorizontally())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  11   17:ifeq            32
			i = mLayout.computeHorizontalScrollExtent(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1584 <Method int RecyclerView$LayoutManager.computeHorizontalScrollExtent(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	public int computeHorizontalScrollOffset()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollHorizontally())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  11   17:ifeq            32
			i = mLayout.computeHorizontalScrollOffset(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1587 <Method int RecyclerView$LayoutManager.computeHorizontalScrollOffset(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	public int computeHorizontalScrollRange()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollHorizontally())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  11   17:ifeq            32
			i = mLayout.computeHorizontalScrollRange(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1590 <Method int RecyclerView$LayoutManager.computeHorizontalScrollRange(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	public int computeVerticalScrollExtent()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollVertically())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  11   17:ifeq            32
			i = mLayout.computeVerticalScrollExtent(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1596 <Method int RecyclerView$LayoutManager.computeVerticalScrollExtent(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	public int computeVerticalScrollOffset()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollVertically())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  11   17:ifeq            32
			i = mLayout.computeVerticalScrollOffset(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1599 <Method int RecyclerView$LayoutManager.computeVerticalScrollOffset(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	public int computeVerticalScrollRange()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(layoutmanager.canScrollVertically())
	//*   9   13:aload_2         
	//*  10   14:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  11   17:ifeq            32
			i = mLayout.computeVerticalScrollRange(mState);
	//   12   20:aload_0         
	//   13   21:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   24:aload_0         
	//   15   25:getfield        #445 <Field RecyclerView$State mState>
	//   16   28:invokevirtual   #1602 <Method int RecyclerView$LayoutManager.computeVerticalScrollRange(RecyclerView$State)>
	//   17   31:istore_1        
		return i;
	//   18   32:iload_1         
	//   19   33:ireturn         
	}

	void considerReleasingGlowsOnScroll(int i, int j)
	{
		EdgeEffect edgeeffect = mLeftGlow;
	//    0    0:aload_0         
	//    1    1:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//    2    4:astore          5
		boolean flag1;
		if(edgeeffect != null && !edgeeffect.isFinished() && i > 0)
	//*   3    6:aload           5
	//*   4    8:ifnull          42
	//*   5   11:aload           5
	//*   6   13:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*   7   16:ifne            42
	//*   8   19:iload_1         
	//*   9   20:ifle            42
		{
			mLeftGlow.onRelease();
	//   10   23:aload_0         
	//   11   24:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   12   27:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//   13   30:aload_0         
	//   14   31:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   15   34:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   16   37:istore          4
		} else
	//*  17   39:goto            45
		{
			flag1 = false;
	//   18   42:iconst_0        
	//   19   43:istore          4
		}
		edgeeffect = mRightGlow;
	//   20   45:aload_0         
	//   21   46:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   22   49:astore          5
		boolean flag = flag1;
	//   23   51:iload           4
	//   24   53:istore_3        
		if(edgeeffect != null)
	//*  25   54:aload           5
	//*  26   56:ifnull          95
		{
			flag = flag1;
	//   27   59:iload           4
	//   28   61:istore_3        
			if(!edgeeffect.isFinished())
	//*  29   62:aload           5
	//*  30   64:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*  31   67:ifne            95
			{
				flag = flag1;
	//   32   70:iload           4
	//   33   72:istore_3        
				if(i < 0)
	//*  34   73:iload_1         
	//*  35   74:ifge            95
				{
					mRightGlow.onRelease();
	//   36   77:aload_0         
	//   37   78:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   38   81:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mRightGlow.isFinished();
	//   39   84:iload           4
	//   40   86:aload_0         
	//   41   87:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   42   90:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   43   93:ior             
	//   44   94:istore_3        
				}
			}
		}
		edgeeffect = mTopGlow;
	//   45   95:aload_0         
	//   46   96:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   47   99:astore          5
		flag1 = flag;
	//   48  101:iload_3         
	//   49  102:istore          4
		if(edgeeffect != null)
	//*  50  104:aload           5
	//*  51  106:ifnull          145
		{
			flag1 = flag;
	//   52  109:iload_3         
	//   53  110:istore          4
			if(!edgeeffect.isFinished())
	//*  54  112:aload           5
	//*  55  114:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*  56  117:ifne            145
			{
				flag1 = flag;
	//   57  120:iload_3         
	//   58  121:istore          4
				if(j > 0)
	//*  59  123:iload_2         
	//*  60  124:ifle            145
				{
					mTopGlow.onRelease();
	//   61  127:aload_0         
	//   62  128:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   63  131:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mTopGlow.isFinished();
	//   64  134:iload_3         
	//   65  135:aload_0         
	//   66  136:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   67  139:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   68  142:ior             
	//   69  143:istore          4
				}
			}
		}
		edgeeffect = mBottomGlow;
	//   70  145:aload_0         
	//   71  146:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   72  149:astore          5
		flag = flag1;
	//   73  151:iload           4
	//   74  153:istore_3        
		if(edgeeffect != null)
	//*  75  154:aload           5
	//*  76  156:ifnull          195
		{
			flag = flag1;
	//   77  159:iload           4
	//   78  161:istore_3        
			if(!edgeeffect.isFinished())
	//*  79  162:aload           5
	//*  80  164:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*  81  167:ifne            195
			{
				flag = flag1;
	//   82  170:iload           4
	//   83  172:istore_3        
				if(j < 0)
	//*  84  173:iload_2         
	//*  85  174:ifge            195
				{
					mBottomGlow.onRelease();
	//   86  177:aload_0         
	//   87  178:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   88  181:invokevirtual   #1408 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mBottomGlow.isFinished();
	//   89  184:iload           4
	//   90  186:aload_0         
	//   91  187:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   92  190:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//   93  193:ior             
	//   94  194:istore_3        
				}
			}
		}
		if(flag)
	//*  95  195:iload_3         
	//*  96  196:ifeq            203
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   97  199:aload_0         
	//   98  200:invokestatic    #1369 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   99  203:return          
	}

	void consumePendingUpdateOperations()
	{
		if(mFirstLayoutComplete && !mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//*   2    4:ifeq            135
	//*   3    7:aload_0         
	//*   4    8:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//*   5   11:ifeq            17
	//*   6   14:goto            135
		{
			if(!mAdapterHelper.hasPendingUpdates())
	//*   7   17:aload_0         
	//*   8   18:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//*   9   21:invokevirtual   #1607 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  10   24:ifne            28
				return;
	//   11   27:return          
			if(mAdapterHelper.hasAnyUpdateTypes(4) && !mAdapterHelper.hasAnyUpdateTypes(11))
	//*  12   28:aload_0         
	//*  13   29:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//*  14   32:iconst_4        
	//*  15   33:invokevirtual   #1610 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  16   36:ifeq            112
	//*  17   39:aload_0         
	//*  18   40:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//*  19   43:bipush          11
	//*  20   45:invokevirtual   #1610 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  21   48:ifne            112
			{
				TraceCompat.beginSection("RV PartialInvalidate");
	//   22   51:ldc1            #183 <String "RV PartialInvalidate">
	//   23   53:invokestatic    #1615 <Method void TraceCompat.beginSection(String)>
				startInterceptRequestLayout();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #880 <Method void startInterceptRequestLayout()>
				onEnterLayoutOrScroll();
	//   26   60:aload_0         
	//   27   61:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
				mAdapterHelper.preProcess();
	//   28   64:aload_0         
	//   29   65:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   30   68:invokevirtual   #1334 <Method void AdapterHelper.preProcess()>
				if(!mLayoutWasDefered)
	//*  31   71:aload_0         
	//*  32   72:getfield        #1617 <Field boolean mLayoutWasDefered>
	//*  33   75:ifne            99
					if(hasUpdatedView())
	//*  34   78:aload_0         
	//*  35   79:invokespecial   #1619 <Method boolean hasUpdatedView()>
	//*  36   82:ifeq            92
						dispatchLayout();
	//   37   85:aload_0         
	//   38   86:invokevirtual   #1622 <Method void dispatchLayout()>
					else
	//*  39   89:goto            99
						mAdapterHelper.consumePostponedUpdates();
	//   40   92:aload_0         
	//   41   93:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   42   96:invokevirtual   #1625 <Method void AdapterHelper.consumePostponedUpdates()>
				stopInterceptRequestLayout(true);
	//   43   99:aload_0         
	//   44  100:iconst_1        
	//   45  101:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
				onExitLayoutOrScroll();
	//   46  104:aload_0         
	//   47  105:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
				TraceCompat.endSection();
	//   48  108:invokestatic    #1628 <Method void TraceCompat.endSection()>
				return;
	//   49  111:return          
			}
			if(mAdapterHelper.hasPendingUpdates())
	//*  50  112:aload_0         
	//*  51  113:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//*  52  116:invokevirtual   #1607 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  53  119:ifeq            134
			{
				TraceCompat.beginSection("RV FullInvalidate");
	//   54  122:ldc1            #189 <String "RV FullInvalidate">
	//   55  124:invokestatic    #1615 <Method void TraceCompat.beginSection(String)>
				dispatchLayout();
	//   56  127:aload_0         
	//   57  128:invokevirtual   #1622 <Method void dispatchLayout()>
				TraceCompat.endSection();
	//   58  131:invokestatic    #1628 <Method void TraceCompat.endSection()>
			}
			return;
	//   59  134:return          
		} else
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//   60  135:ldc1            #189 <String "RV FullInvalidate">
	//   61  137:invokestatic    #1615 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//   62  140:aload_0         
	//   63  141:invokevirtual   #1622 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   64  144:invokestatic    #1628 <Method void TraceCompat.endSection()>
			return;
	//   65  147:return          
		}
	}

	void defaultOnMeasure(int i, int j)
	{
		setMeasuredDimension(LayoutManager.chooseSize(i, getPaddingLeft() + getPaddingRight(), ViewCompat.getMinimumWidth(((View) (this)))), LayoutManager.chooseSize(j, getPaddingTop() + getPaddingBottom(), ViewCompat.getMinimumHeight(((View) (this)))));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:invokevirtual   #1632 <Method int getPaddingLeft()>
	//    4    6:aload_0         
	//    5    7:invokevirtual   #1635 <Method int getPaddingRight()>
	//    6   10:iadd            
	//    7   11:aload_0         
	//    8   12:invokestatic    #1638 <Method int ViewCompat.getMinimumWidth(View)>
	//    9   15:invokestatic    #1642 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   10   18:iload_2         
	//   11   19:aload_0         
	//   12   20:invokevirtual   #1645 <Method int getPaddingTop()>
	//   13   23:aload_0         
	//   14   24:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   15   27:iadd            
	//   16   28:aload_0         
	//   17   29:invokestatic    #1651 <Method int ViewCompat.getMinimumHeight(View)>
	//   18   32:invokestatic    #1642 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   19   35:invokevirtual   #655 <Method void setMeasuredDimension(int, int)>
	//   20   38:return          
	}

	void dispatchChildAttached(View view)
	{
		Object obj = ((Object) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildAttachedToWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1655 <Method void onChildAttachedToWindow(View)>
		Adapter adapter = mAdapter;
	//    6   10:aload_0         
	//    7   11:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    8   14:astore          4
		if(adapter != null && obj != null)
	//*   9   16:aload           4
	//*  10   18:ifnull          31
	//*  11   21:aload_3         
	//*  12   22:ifnull          31
			adapter.onViewAttachedToWindow(((ViewHolder) (obj)));
	//   13   25:aload           4
	//   14   27:aload_3         
	//   15   28:invokevirtual   #1658 <Method void RecyclerView$Adapter.onViewAttachedToWindow(RecyclerView$ViewHolder)>
		obj = ((Object) (mOnChildAttachStateListeners));
	//   16   31:aload_0         
	//   17   32:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//   18   35:astore_3        
		if(obj != null)
	//*  19   36:aload_3         
	//*  20   37:ifnull          79
		{
			for(int i = ((List) (obj)).size() - 1; i >= 0; i--)
	//*  21   40:aload_3         
	//*  22   41:invokeinterface #1659 <Method int List.size()>
	//*  23   46:iconst_1        
	//*  24   47:isub            
	//*  25   48:istore_2        
	//*  26   49:iload_2         
	//*  27   50:iflt            79
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewAttachedToWindow(view);
	//   28   53:aload_0         
	//   29   54:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//   30   57:iload_2         
	//   31   58:invokeinterface #1660 <Method Object List.get(int)>
	//   32   63:checkcast       #77  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   33   66:aload_1         
	//   34   67:invokeinterface #1663 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewAttachedToWindow(View)>

	//   35   72:iload_2         
	//   36   73:iconst_1        
	//   37   74:isub            
	//   38   75:istore_2        
		}
	//*  39   76:goto            49
	//   40   79:return          
	}

	void dispatchChildDetached(View view)
	{
		Object obj = ((Object) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildDetachedFromWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1667 <Method void onChildDetachedFromWindow(View)>
		Adapter adapter = mAdapter;
	//    6   10:aload_0         
	//    7   11:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    8   14:astore          4
		if(adapter != null && obj != null)
	//*   9   16:aload           4
	//*  10   18:ifnull          31
	//*  11   21:aload_3         
	//*  12   22:ifnull          31
			adapter.onViewDetachedFromWindow(((ViewHolder) (obj)));
	//   13   25:aload           4
	//   14   27:aload_3         
	//   15   28:invokevirtual   #1670 <Method void RecyclerView$Adapter.onViewDetachedFromWindow(RecyclerView$ViewHolder)>
		obj = ((Object) (mOnChildAttachStateListeners));
	//   16   31:aload_0         
	//   17   32:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//   18   35:astore_3        
		if(obj != null)
	//*  19   36:aload_3         
	//*  20   37:ifnull          79
		{
			for(int i = ((List) (obj)).size() - 1; i >= 0; i--)
	//*  21   40:aload_3         
	//*  22   41:invokeinterface #1659 <Method int List.size()>
	//*  23   46:iconst_1        
	//*  24   47:isub            
	//*  25   48:istore_2        
	//*  26   49:iload_2         
	//*  27   50:iflt            79
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewDetachedFromWindow(view);
	//   28   53:aload_0         
	//   29   54:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//   30   57:iload_2         
	//   31   58:invokeinterface #1660 <Method Object List.get(int)>
	//   32   63:checkcast       #77  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   33   66:aload_1         
	//   34   67:invokeinterface #1673 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewDetachedFromWindow(View)>

	//   35   72:iload_2         
	//   36   73:iconst_1        
	//   37   74:isub            
	//   38   75:istore_2        
		}
	//*  39   76:goto            49
	//   40   79:return          
	}

	void dispatchLayout()
	{
		if(mAdapter == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "No adapter attached; skipping layout");
	//    3    7:ldc1            #172 <String "RecyclerView">
	//    4    9:ldc2            #1675 <String "No adapter attached; skipping layout">
	//    5   12:invokestatic    #1254 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayout == null)
	//*   8   17:aload_0         
	//*   9   18:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  10   21:ifnonnull       34
		{
			Log.e("RecyclerView", "No layout manager attached; skipping layout");
	//   11   24:ldc1            #172 <String "RecyclerView">
	//   12   26:ldc2            #1677 <String "No layout manager attached; skipping layout">
	//   13   29:invokestatic    #1254 <Method int Log.e(String, String)>
	//   14   32:pop             
			return;
	//   15   33:return          
		}
		State state = mState;
	//   16   34:aload_0         
	//   17   35:getfield        #445 <Field RecyclerView$State mState>
	//   18   38:astore_1        
		state.mIsMeasuring = false;
	//   19   39:aload_1         
	//   20   40:iconst_0        
	//   21   41:putfield        #877 <Field boolean RecyclerView$State.mIsMeasuring>
		if(state.mLayoutStep == 1)
	//*  22   44:aload_1         
	//*  23   45:getfield        #999 <Field int RecyclerView$State.mLayoutStep>
	//*  24   48:iconst_1        
	//*  25   49:icmpne          71
		{
			dispatchLayoutStep1();
	//   26   52:aload_0         
	//   27   53:invokespecial   #1679 <Method void dispatchLayoutStep1()>
			mLayout.setExactMeasureSpecsFrom(this);
	//   28   56:aload_0         
	//   29   57:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1682 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   32   64:aload_0         
	//   33   65:invokespecial   #1684 <Method void dispatchLayoutStep2()>
		} else
	//*  34   68:goto            135
		if(!mAdapterHelper.hasUpdates() && mLayout.getWidth() == getWidth() && mLayout.getHeight() == getHeight())
	//*  35   71:aload_0         
	//*  36   72:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//*  37   75:invokevirtual   #1687 <Method boolean AdapterHelper.hasUpdates()>
	//*  38   78:ifne            123
	//*  39   81:aload_0         
	//*  40   82:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  41   85:invokevirtual   #1688 <Method int RecyclerView$LayoutManager.getWidth()>
	//*  42   88:aload_0         
	//*  43   89:invokevirtual   #1344 <Method int getWidth()>
	//*  44   92:icmpne          123
	//*  45   95:aload_0         
	//*  46   96:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  47   99:invokevirtual   #1689 <Method int RecyclerView$LayoutManager.getHeight()>
	//*  48  102:aload_0         
	//*  49  103:invokevirtual   #1345 <Method int getHeight()>
	//*  50  106:icmpeq          112
	//*  51  109:goto            123
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   52  112:aload_0         
	//   53  113:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   54  116:aload_0         
	//   55  117:invokevirtual   #1682 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
		} else
	//*  56  120:goto            135
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   57  123:aload_0         
	//   58  124:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   59  127:aload_0         
	//   60  128:invokevirtual   #1682 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   61  131:aload_0         
	//   62  132:invokespecial   #1684 <Method void dispatchLayoutStep2()>
		}
		dispatchLayoutStep3();
	//   63  135:aload_0         
	//   64  136:invokespecial   #1691 <Method void dispatchLayoutStep3()>
	//   65  139:return          
	}

	public boolean dispatchNestedFling(float f, float f1, boolean flag)
	{
		return getScrollingChildHelper().dispatchNestedFling(f, f1, flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:iload_3         
	//    5    7:invokevirtual   #1697 <Method boolean NestedScrollingChildHelper.dispatchNestedFling(float, float, boolean)>
	//    6   10:ireturn         
	}

	public boolean dispatchNestedPreFling(float f, float f1)
	{
		return getScrollingChildHelper().dispatchNestedPreFling(f, f1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:invokevirtual   #1701 <Method boolean NestedScrollingChildHelper.dispatchNestedPreFling(float, float)>
	//    5    9:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[])
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:invokevirtual   #1705 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[])>
	//    7   12:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[], int k)
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1, k);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:iload           5
	//    7   11:invokevirtual   #1708 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[], int)>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[])
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:invokevirtual   #1712 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[])>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[], int i1)
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai, i1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:iload           6
	//    8   13:invokevirtual   #1715 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[], int)>
	//    9   16:ireturn         
	}

	void dispatchOnScrollStateChanged(int i)
	{
		Object obj = ((Object) (mLayout));
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_3        
		if(obj != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          14
			((LayoutManager) (obj)).onScrollStateChanged(i);
	//    5    9:aload_3         
	//    6   10:iload_1         
	//    7   11:invokevirtual   #1719 <Method void RecyclerView$LayoutManager.onScrollStateChanged(int)>
		onScrollStateChanged(i);
	//    8   14:aload_0         
	//    9   15:iload_1         
	//   10   16:invokevirtual   #1720 <Method void onScrollStateChanged(int)>
		obj = ((Object) (mScrollListener));
	//   11   19:aload_0         
	//   12   20:getfield        #1722 <Field RecyclerView$OnScrollListener mScrollListener>
	//   13   23:astore_3        
		if(obj != null)
	//*  14   24:aload_3         
	//*  15   25:ifnull          34
			((OnScrollListener) (obj)).onScrollStateChanged(this, i);
	//   16   28:aload_3         
	//   17   29:aload_0         
	//   18   30:iload_1         
	//   19   31:invokevirtual   #1724 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>
		obj = ((Object) (mScrollListeners));
	//   20   34:aload_0         
	//   21   35:getfield        #1531 <Field List mScrollListeners>
	//   22   38:astore_3        
		if(obj != null)
	//*  23   39:aload_3         
	//*  24   40:ifnull          81
		{
			for(int j = ((List) (obj)).size() - 1; j >= 0; j--)
	//*  25   43:aload_3         
	//*  26   44:invokeinterface #1659 <Method int List.size()>
	//*  27   49:iconst_1        
	//*  28   50:isub            
	//*  29   51:istore_2        
	//*  30   52:iload_2         
	//*  31   53:iflt            81
				((OnScrollListener)mScrollListeners.get(j)).onScrollStateChanged(this, i);
	//   32   56:aload_0         
	//   33   57:getfield        #1531 <Field List mScrollListeners>
	//   34   60:iload_2         
	//   35   61:invokeinterface #1660 <Method Object List.get(int)>
	//   36   66:checkcast       #86  <Class RecyclerView$OnScrollListener>
	//   37   69:aload_0         
	//   38   70:iload_1         
	//   39   71:invokevirtual   #1724 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>

	//   40   74:iload_2         
	//   41   75:iconst_1        
	//   42   76:isub            
	//   43   77:istore_2        
		}
	//*  44   78:goto            52
	//   45   81:return          
	}

	void dispatchOnScrolled(int i, int j)
	{
		mDispatchScrollCounter = mDispatchScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #415 <Field int mDispatchScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #415 <Field int mDispatchScrollCounter>
		int k = getScrollX();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #1727 <Method int getScrollX()>
	//    8   14:istore_3        
		int i1 = getScrollY();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #1730 <Method int getScrollY()>
	//   11   19:istore          4
		onScrollChanged(k, i1, k, i1);
	//   12   21:aload_0         
	//   13   22:iload_3         
	//   14   23:iload           4
	//   15   25:iload_3         
	//   16   26:iload           4
	//   17   28:invokevirtual   #1733 <Method void onScrollChanged(int, int, int, int)>
		onScrolled(i, j);
	//   18   31:aload_0         
	//   19   32:iload_1         
	//   20   33:iload_2         
	//   21   34:invokevirtual   #1736 <Method void onScrolled(int, int)>
		Object obj = ((Object) (mScrollListener));
	//   22   37:aload_0         
	//   23   38:getfield        #1722 <Field RecyclerView$OnScrollListener mScrollListener>
	//   24   41:astore          5
		if(obj != null)
	//*  25   43:aload           5
	//*  26   45:ifnull          56
			((OnScrollListener) (obj)).onScrolled(this, i, j);
	//   27   48:aload           5
	//   28   50:aload_0         
	//   29   51:iload_1         
	//   30   52:iload_2         
	//   31   53:invokevirtual   #1738 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>
		obj = ((Object) (mScrollListeners));
	//   32   56:aload_0         
	//   33   57:getfield        #1531 <Field List mScrollListeners>
	//   34   60:astore          5
		if(obj != null)
	//*  35   62:aload           5
	//*  36   64:ifnull          107
		{
			for(int l = ((List) (obj)).size() - 1; l >= 0; l--)
	//*  37   67:aload           5
	//*  38   69:invokeinterface #1659 <Method int List.size()>
	//*  39   74:iconst_1        
	//*  40   75:isub            
	//*  41   76:istore_3        
	//*  42   77:iload_3         
	//*  43   78:iflt            107
				((OnScrollListener)mScrollListeners.get(l)).onScrolled(this, i, j);
	//   44   81:aload_0         
	//   45   82:getfield        #1531 <Field List mScrollListeners>
	//   46   85:iload_3         
	//   47   86:invokeinterface #1660 <Method Object List.get(int)>
	//   48   91:checkcast       #86  <Class RecyclerView$OnScrollListener>
	//   49   94:aload_0         
	//   50   95:iload_1         
	//   51   96:iload_2         
	//   52   97:invokevirtual   #1738 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>

	//   53  100:iload_3         
	//   54  101:iconst_1        
	//   55  102:isub            
	//   56  103:istore_3        
		}
	//*  57  104:goto            77
		mDispatchScrollCounter = mDispatchScrollCounter - 1;
	//   58  107:aload_0         
	//   59  108:aload_0         
	//   60  109:getfield        #415 <Field int mDispatchScrollCounter>
	//   61  112:iconst_1        
	//   62  113:isub            
	//   63  114:putfield        #415 <Field int mDispatchScrollCounter>
	//   64  117:return          
	}

	void dispatchPendingImportantForAccessibilityChanges()
	{
		for(int i = mPendingAccessibilityImportanceChange.size() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//*   2    4:invokeinterface #1659 <Method int List.size()>
	//*   3    9:iconst_1        
	//*   4   10:isub            
	//*   5   11:istore_1        
	//*   6   12:iload_1         
	//*   7   13:iflt            81
		{
			ViewHolder viewholder = (ViewHolder)mPendingAccessibilityImportanceChange.get(i);
	//    8   16:aload_0         
	//    9   17:getfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//   10   20:iload_1         
	//   11   21:invokeinterface #1660 <Method Object List.get(int)>
	//   12   26:checkcast       #130 <Class RecyclerView$ViewHolder>
	//   13   29:astore_3        
			if(viewholder.itemView.getParent() != this || viewholder.shouldIgnore())
	//*  14   30:aload_3         
	//*  15   31:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  16   34:invokevirtual   #667 <Method ViewParent View.getParent()>
	//*  17   37:aload_0         
	//*  18   38:if_acmpne       74
	//*  19   41:aload_3         
	//*  20   42:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   45:ifeq            51
				continue;
	//   22   48:goto            74
			int j = viewholder.mPendingAccessibilityState;
	//   23   51:aload_3         
	//   24   52:getfield        #1742 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
	//   25   55:istore_2        
			if(j != -1)
	//*  26   56:iload_2         
	//*  27   57:iconst_m1       
	//*  28   58:icmpeq          74
			{
				ViewCompat.setImportantForAccessibility(viewholder.itemView, j);
	//   29   61:aload_3         
	//   30   62:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   31   65:iload_2         
	//   32   66:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
				viewholder.mPendingAccessibilityState = -1;
	//   33   69:aload_3         
	//   34   70:iconst_m1       
	//   35   71:putfield        #1742 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			}
		}

	//   36   74:iload_1         
	//   37   75:iconst_1        
	//   38   76:isub            
	//   39   77:istore_1        
	//*  40   78:goto            12
		mPendingAccessibilityImportanceChange.clear();
	//   41   81:aload_0         
	//   42   82:getfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//   43   85:invokeinterface #1576 <Method void List.clear()>
	//   44   90:return          
	}

	protected void dispatchRestoreInstanceState(SparseArray sparsearray)
	{
		dispatchThawSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1747 <Method void dispatchThawSelfOnly(SparseArray)>
	//    3    5:return          
	}

	protected void dispatchSaveInstanceState(SparseArray sparsearray)
	{
		dispatchFreezeSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1752 <Method void dispatchFreezeSelfOnly(SparseArray)>
	//    3    5:return          
	}

	public void draw(Canvas canvas)
	{
		super.draw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #1756 <Method void ViewGroup.draw(Canvas)>
		int l = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #403 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1097 <Method int ArrayList.size()>
	//    6   12:istore_3        
		boolean flag = false;
	//    7   13:iconst_0        
	//    8   14:istore          4
		for(int i = 0; i < l; i++)
	//*   9   16:iconst_0        
	//*  10   17:istore_2        
	//*  11   18:iload_2         
	//*  12   19:iload_3         
	//*  13   20:icmpge          50
			((ItemDecoration)mItemDecorations.get(i)).onDrawOver(canvas, this, mState);
	//   14   23:aload_0         
	//   15   24:getfield        #403 <Field ArrayList mItemDecorations>
	//   16   27:iload_2         
	//   17   28:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   18   31:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   19   34:aload_1         
	//   20   35:aload_0         
	//   21   36:aload_0         
	//   22   37:getfield        #445 <Field RecyclerView$State mState>
	//   23   40:invokevirtual   #1760 <Method void RecyclerView$ItemDecoration.onDrawOver(Canvas, RecyclerView, RecyclerView$State)>

	//   24   43:iload_2         
	//   25   44:iconst_1        
	//   26   45:iadd            
	//   27   46:istore_2        
	//*  28   47:goto            18
		EdgeEffect edgeeffect = mLeftGlow;
	//   29   50:aload_0         
	//   30   51:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   31   54:astore          7
		if(edgeeffect != null && !edgeeffect.isFinished())
	//*  32   56:aload           7
	//*  33   58:ifnull          148
	//*  34   61:aload           7
	//*  35   63:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*  36   66:ifne            148
		{
			int i1 = canvas.save();
	//   37   69:aload_1         
	//   38   70:invokevirtual   #1765 <Method int Canvas.save()>
	//   39   73:istore          5
			int j;
			if(mClipToPadding)
	//*  40   75:aload_0         
	//*  41   76:getfield        #484 <Field boolean mClipToPadding>
	//*  42   79:ifeq            90
				j = getPaddingBottom();
	//   43   82:aload_0         
	//   44   83:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   45   86:istore_2        
			else
	//*  46   87:goto            92
				j = 0;
	//   47   90:iconst_0        
	//   48   91:istore_2        
			canvas.rotate(270F);
	//   49   92:aload_1         
	//   50   93:ldc2            #1766 <Float 270F>
	//   51   96:invokevirtual   #1770 <Method void Canvas.rotate(float)>
			canvas.translate(-getHeight() + j, 0.0F);
	//   52   99:aload_1         
	//   53  100:aload_0         
	//   54  101:invokevirtual   #1345 <Method int getHeight()>
	//   55  104:ineg            
	//   56  105:iload_2         
	//   57  106:iadd            
	//   58  107:i2f             
	//   59  108:fconst_0        
	//   60  109:invokevirtual   #1774 <Method void Canvas.translate(float, float)>
			edgeeffect = mLeftGlow;
	//   61  112:aload_0         
	//   62  113:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   63  116:astore          7
			if(edgeeffect != null && edgeeffect.draw(canvas))
	//*  64  118:aload           7
	//*  65  120:ifnull          137
	//*  66  123:aload           7
	//*  67  125:aload_1         
	//*  68  126:invokevirtual   #1777 <Method boolean EdgeEffect.draw(Canvas)>
	//*  69  129:ifeq            137
				l = 1;
	//   70  132:iconst_1        
	//   71  133:istore_3        
			else
	//*  72  134:goto            139
				l = 0;
	//   73  137:iconst_0        
	//   74  138:istore_3        
			canvas.restoreToCount(i1);
	//   75  139:aload_1         
	//   76  140:iload           5
	//   77  142:invokevirtual   #1780 <Method void Canvas.restoreToCount(int)>
		} else
	//*  78  145:goto            150
		{
			l = 0;
	//   79  148:iconst_0        
	//   80  149:istore_3        
		}
		edgeeffect = mTopGlow;
	//   81  150:aload_0         
	//   82  151:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   83  154:astore          7
		int k = l;
	//   84  156:iload_3         
	//   85  157:istore_2        
		if(edgeeffect != null)
	//*  86  158:aload           7
	//*  87  160:ifnull          237
		{
			k = l;
	//   88  163:iload_3         
	//   89  164:istore_2        
			if(!edgeeffect.isFinished())
	//*  90  165:aload           7
	//*  91  167:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//*  92  170:ifne            237
			{
				int j1 = canvas.save();
	//   93  173:aload_1         
	//   94  174:invokevirtual   #1765 <Method int Canvas.save()>
	//   95  177:istore          5
				if(mClipToPadding)
	//*  96  179:aload_0         
	//*  97  180:getfield        #484 <Field boolean mClipToPadding>
	//*  98  183:ifeq            200
					canvas.translate(getPaddingLeft(), getPaddingTop());
	//   99  186:aload_1         
	//  100  187:aload_0         
	//  101  188:invokevirtual   #1632 <Method int getPaddingLeft()>
	//  102  191:i2f             
	//  103  192:aload_0         
	//  104  193:invokevirtual   #1645 <Method int getPaddingTop()>
	//  105  196:i2f             
	//  106  197:invokevirtual   #1774 <Method void Canvas.translate(float, float)>
				edgeeffect = mTopGlow;
	//  107  200:aload_0         
	//  108  201:getfield        #1361 <Field EdgeEffect mTopGlow>
	//  109  204:astore          7
				if(edgeeffect != null && edgeeffect.draw(canvas))
	//* 110  206:aload           7
	//* 111  208:ifnull          225
	//* 112  211:aload           7
	//* 113  213:aload_1         
	//* 114  214:invokevirtual   #1777 <Method boolean EdgeEffect.draw(Canvas)>
	//* 115  217:ifeq            225
					k = 1;
	//  116  220:iconst_1        
	//  117  221:istore_2        
				else
	//* 118  222:goto            227
					k = 0;
	//  119  225:iconst_0        
	//  120  226:istore_2        
				k = ((int) (l | k));
	//  121  227:iload_3         
	//  122  228:iload_2         
	//  123  229:ior             
	//  124  230:istore_2        
				canvas.restoreToCount(j1);
	//  125  231:aload_1         
	//  126  232:iload           5
	//  127  234:invokevirtual   #1780 <Method void Canvas.restoreToCount(int)>
			}
		}
		edgeeffect = mRightGlow;
	//  128  237:aload_0         
	//  129  238:getfield        #1356 <Field EdgeEffect mRightGlow>
	//  130  241:astore          7
		l = k;
	//  131  243:iload_2         
	//  132  244:istore_3        
		if(edgeeffect != null)
	//* 133  245:aload           7
	//* 134  247:ifnull          344
		{
			l = k;
	//  135  250:iload_2         
	//  136  251:istore_3        
			if(!edgeeffect.isFinished())
	//* 137  252:aload           7
	//* 138  254:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//* 139  257:ifne            344
			{
				int k1 = canvas.save();
	//  140  260:aload_1         
	//  141  261:invokevirtual   #1765 <Method int Canvas.save()>
	//  142  264:istore          5
				int i2 = getWidth();
	//  143  266:aload_0         
	//  144  267:invokevirtual   #1344 <Method int getWidth()>
	//  145  270:istore          6
				if(mClipToPadding)
	//* 146  272:aload_0         
	//* 147  273:getfield        #484 <Field boolean mClipToPadding>
	//* 148  276:ifeq            287
					l = getPaddingTop();
	//  149  279:aload_0         
	//  150  280:invokevirtual   #1645 <Method int getPaddingTop()>
	//  151  283:istore_3        
				else
	//* 152  284:goto            289
					l = 0;
	//  153  287:iconst_0        
	//  154  288:istore_3        
				canvas.rotate(90F);
	//  155  289:aload_1         
	//  156  290:ldc2            #1781 <Float 90F>
	//  157  293:invokevirtual   #1770 <Method void Canvas.rotate(float)>
				canvas.translate(-l, -i2);
	//  158  296:aload_1         
	//  159  297:iload_3         
	//  160  298:ineg            
	//  161  299:i2f             
	//  162  300:iload           6
	//  163  302:ineg            
	//  164  303:i2f             
	//  165  304:invokevirtual   #1774 <Method void Canvas.translate(float, float)>
				edgeeffect = mRightGlow;
	//  166  307:aload_0         
	//  167  308:getfield        #1356 <Field EdgeEffect mRightGlow>
	//  168  311:astore          7
				if(edgeeffect != null && edgeeffect.draw(canvas))
	//* 169  313:aload           7
	//* 170  315:ifnull          332
	//* 171  318:aload           7
	//* 172  320:aload_1         
	//* 173  321:invokevirtual   #1777 <Method boolean EdgeEffect.draw(Canvas)>
	//* 174  324:ifeq            332
					l = 1;
	//  175  327:iconst_1        
	//  176  328:istore_3        
				else
	//* 177  329:goto            334
					l = 0;
	//  178  332:iconst_0        
	//  179  333:istore_3        
				l = k | l;
	//  180  334:iload_2         
	//  181  335:iload_3         
	//  182  336:ior             
	//  183  337:istore_3        
				canvas.restoreToCount(k1);
	//  184  338:aload_1         
	//  185  339:iload           5
	//  186  341:invokevirtual   #1780 <Method void Canvas.restoreToCount(int)>
			}
		}
		edgeeffect = mBottomGlow;
	//  187  344:aload_0         
	//  188  345:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//  189  348:astore          7
		if(edgeeffect != null && !edgeeffect.isFinished())
	//* 190  350:aload           7
	//* 191  352:ifnull          469
	//* 192  355:aload           7
	//* 193  357:invokevirtual   #1411 <Method boolean EdgeEffect.isFinished()>
	//* 194  360:ifne            469
		{
			int l1 = canvas.save();
	//  195  363:aload_1         
	//  196  364:invokevirtual   #1765 <Method int Canvas.save()>
	//  197  367:istore          5
			canvas.rotate(180F);
	//  198  369:aload_1         
	//  199  370:ldc2            #1782 <Float 180F>
	//  200  373:invokevirtual   #1770 <Method void Canvas.rotate(float)>
			if(mClipToPadding)
	//* 201  376:aload_0         
	//* 202  377:getfield        #484 <Field boolean mClipToPadding>
	//* 203  380:ifeq            412
				canvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
	//  204  383:aload_1         
	//  205  384:aload_0         
	//  206  385:invokevirtual   #1344 <Method int getWidth()>
	//  207  388:ineg            
	//  208  389:aload_0         
	//  209  390:invokevirtual   #1635 <Method int getPaddingRight()>
	//  210  393:iadd            
	//  211  394:i2f             
	//  212  395:aload_0         
	//  213  396:invokevirtual   #1345 <Method int getHeight()>
	//  214  399:ineg            
	//  215  400:aload_0         
	//  216  401:invokevirtual   #1648 <Method int getPaddingBottom()>
	//  217  404:iadd            
	//  218  405:i2f             
	//  219  406:invokevirtual   #1774 <Method void Canvas.translate(float, float)>
			else
	//* 220  409:goto            428
				canvas.translate(-getWidth(), -getHeight());
	//  221  412:aload_1         
	//  222  413:aload_0         
	//  223  414:invokevirtual   #1344 <Method int getWidth()>
	//  224  417:ineg            
	//  225  418:i2f             
	//  226  419:aload_0         
	//  227  420:invokevirtual   #1345 <Method int getHeight()>
	//  228  423:ineg            
	//  229  424:i2f             
	//  230  425:invokevirtual   #1774 <Method void Canvas.translate(float, float)>
			EdgeEffect edgeeffect1 = mBottomGlow;
	//  231  428:aload_0         
	//  232  429:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//  233  432:astore          7
			k = ((int) (flag));
	//  234  434:iload           4
	//  235  436:istore_2        
			if(edgeeffect1 != null)
	//* 236  437:aload           7
	//* 237  439:ifnull          456
			{
				k = ((int) (flag));
	//  238  442:iload           4
	//  239  444:istore_2        
				if(edgeeffect1.draw(canvas))
	//* 240  445:aload           7
	//* 241  447:aload_1         
	//* 242  448:invokevirtual   #1777 <Method boolean EdgeEffect.draw(Canvas)>
	//* 243  451:ifeq            456
					k = 1;
	//  244  454:iconst_1        
	//  245  455:istore_2        
			}
			k |= l;
	//  246  456:iload_2         
	//  247  457:iload_3         
	//  248  458:ior             
	//  249  459:istore_2        
			canvas.restoreToCount(l1);
	//  250  460:aload_1         
	//  251  461:iload           5
	//  252  463:invokevirtual   #1780 <Method void Canvas.restoreToCount(int)>
		} else
	//* 253  466:goto            471
		{
			k = l;
	//  254  469:iload_3         
	//  255  470:istore_2        
		}
		l = k;
	//  256  471:iload_2         
	//  257  472:istore_3        
		if(k == 0)
	//* 258  473:iload_2         
	//* 259  474:ifne            512
		{
			l = k;
	//  260  477:iload_2         
	//  261  478:istore_3        
			if(mItemAnimator != null)
	//* 262  479:aload_0         
	//* 263  480:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 264  483:ifnull          512
			{
				l = k;
	//  265  486:iload_2         
	//  266  487:istore_3        
				if(mItemDecorations.size() > 0)
	//* 267  488:aload_0         
	//* 268  489:getfield        #403 <Field ArrayList mItemDecorations>
	//* 269  492:invokevirtual   #1097 <Method int ArrayList.size()>
	//* 270  495:ifle            512
				{
					l = k;
	//  271  498:iload_2         
	//  272  499:istore_3        
					if(mItemAnimator.isRunning())
	//* 273  500:aload_0         
	//* 274  501:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 275  504:invokevirtual   #1785 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//* 276  507:ifeq            512
						l = 1;
	//  277  510:iconst_1        
	//  278  511:istore_3        
				}
			}
		}
		if(l != 0)
	//* 279  512:iload_3         
	//* 280  513:ifeq            520
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  281  516:aload_0         
	//  282  517:invokestatic    #1369 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  283  520:return          
	}

	public boolean drawChild(Canvas canvas, View view, long l)
	{
		return super.drawChild(canvas, view, l);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:lload_3         
	//    4    4:invokespecial   #1789 <Method boolean ViewGroup.drawChild(Canvas, View, long)>
	//    5    7:ireturn         
	}

	void ensureBottomGlow()
	{
		if(mBottomGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mBottomGlow = mEdgeEffectFactory.createEdgeEffect(this, 3);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_3        
	//    9   15:invokevirtual   #1793 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1366 <Field EdgeEffect mBottomGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #484 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mBottomGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   28:aload_0         
	//   15   29:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1632 <Method int getPaddingLeft()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1635 <Method int getPaddingRight()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1645 <Method int getPaddingTop()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mBottomGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   64:aload_0         
	//   35   65:getfield        #1366 <Field EdgeEffect mBottomGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   40   76:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureLeftGlow()
	{
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mLeftGlow = mEdgeEffectFactory.createEdgeEffect(this, 0);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_0        
	//    9   15:invokevirtual   #1793 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1343 <Field EdgeEffect mLeftGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #484 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mLeftGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   28:aload_0         
	//   15   29:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1645 <Method int getPaddingTop()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1632 <Method int getPaddingLeft()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1635 <Method int getPaddingRight()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mLeftGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   64:aload_0         
	//   35   65:getfield        #1343 <Field EdgeEffect mLeftGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   40   76:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureRightGlow()
	{
		if(mRightGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1356 <Field EdgeEffect mRightGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mRightGlow = mEdgeEffectFactory.createEdgeEffect(this, 2);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_2        
	//    9   15:invokevirtual   #1793 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1356 <Field EdgeEffect mRightGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #484 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mRightGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   28:aload_0         
	//   15   29:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1645 <Method int getPaddingTop()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1632 <Method int getPaddingLeft()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1635 <Method int getPaddingRight()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mRightGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   64:aload_0         
	//   35   65:getfield        #1356 <Field EdgeEffect mRightGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   40   76:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureTopGlow()
	{
		if(mTopGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1361 <Field EdgeEffect mTopGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mTopGlow = mEdgeEffectFactory.createEdgeEffect(this, 1);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_1        
	//    9   15:invokevirtual   #1793 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1361 <Field EdgeEffect mTopGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #484 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mTopGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   28:aload_0         
	//   15   29:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1632 <Method int getPaddingLeft()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1635 <Method int getPaddingRight()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1645 <Method int getPaddingTop()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1648 <Method int getPaddingBottom()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mTopGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   64:aload_0         
	//   35   65:getfield        #1361 <Field EdgeEffect mTopGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   40   76:invokevirtual   #1802 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	String exceptionLabel()
	{
		StringBuilder stringbuilder = new StringBuilder();
	//    0    0:new             #809 <Class StringBuilder>
	//    1    3:dup             
	//    2    4:invokespecial   #810 <Method void StringBuilder()>
	//    3    7:astore_1        
		stringbuilder.append(" ");
	//    4    8:aload_1         
	//    5    9:ldc2            #1804 <String " ">
	//    6   12:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//    7   15:pop             
		stringbuilder.append(super.toString());
	//    8   16:aload_1         
	//    9   17:aload_0         
	//   10   18:invokespecial   #1805 <Method String ViewGroup.toString()>
	//   11   21:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   12   24:pop             
		stringbuilder.append(", adapter:");
	//   13   25:aload_1         
	//   14   26:ldc2            #1807 <String ", adapter:">
	//   15   29:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   16   32:pop             
		stringbuilder.append(((Object) (mAdapter)));
	//   17   33:aload_1         
	//   18   34:aload_0         
	//   19   35:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//   20   38:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   21   41:pop             
		stringbuilder.append(", layout:");
	//   22   42:aload_1         
	//   23   43:ldc2            #1809 <String ", layout:">
	//   24   46:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   25   49:pop             
		stringbuilder.append(((Object) (mLayout)));
	//   26   50:aload_1         
	//   27   51:aload_0         
	//   28   52:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   29   55:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   30   58:pop             
		stringbuilder.append(", context:");
	//   31   59:aload_1         
	//   32   60:ldc2            #1811 <String ", context:">
	//   33   63:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   34   66:pop             
		stringbuilder.append(((Object) (getContext())));
	//   35   67:aload_1         
	//   36   68:aload_0         
	//   37   69:invokevirtual   #558 <Method Context getContext()>
	//   38   72:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   39   75:pop             
		return stringbuilder.toString();
	//   40   76:aload_1         
	//   41   77:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   42   80:areturn         
	}

	final void fillRemainingScrollValues(State state)
	{
		if(getScrollState() == 2)
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1814 <Method int getScrollState()>
	//*   2    4:iconst_2        
	//*   3    5:icmpne          43
		{
			OverScroller overscroller = mViewFlinger.mScroller;
	//    4    8:aload_0         
	//    5    9:getfield        #437 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    6   12:getfield        #1818 <Field OverScroller RecyclerView$ViewFlinger.mScroller>
	//    7   15:astore_2        
			state.mRemainingScrollHorizontal = overscroller.getFinalX() - overscroller.getCurrX();
	//    8   16:aload_1         
	//    9   17:aload_2         
	//   10   18:invokevirtual   #1823 <Method int OverScroller.getFinalX()>
	//   11   21:aload_2         
	//   12   22:invokevirtual   #1826 <Method int OverScroller.getCurrX()>
	//   13   25:isub            
	//   14   26:putfield        #1829 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = overscroller.getFinalY() - overscroller.getCurrY();
	//   15   29:aload_1         
	//   16   30:aload_2         
	//   17   31:invokevirtual   #1832 <Method int OverScroller.getFinalY()>
	//   18   34:aload_2         
	//   19   35:invokevirtual   #1835 <Method int OverScroller.getCurrY()>
	//   20   38:isub            
	//   21   39:putfield        #1838 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   22   42:return          
		} else
		{
			state.mRemainingScrollHorizontal = 0;
	//   23   43:aload_1         
	//   24   44:iconst_0        
	//   25   45:putfield        #1829 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = 0;
	//   26   48:aload_1         
	//   27   49:iconst_0        
	//   28   50:putfield        #1838 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   29   53:return          
		}
	}

	public View findChildViewUnder(float f, float f1)
	{
		for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//*   2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//*   3    7:iconst_1        
	//*   4    8:isub            
	//*   5    9:istore          5
	//*   6   11:iload           5
	//*   7   13:iflt            106
		{
			View view = mChildHelper.getChildAt(i);
	//    8   16:aload_0         
	//    9   17:getfield        #679 <Field ChildHelper mChildHelper>
	//   10   20:iload           5
	//   11   22:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   12   25:astore          6
			float f2 = view.getTranslationX();
	//   13   27:aload           6
	//   14   29:invokevirtual   #1844 <Method float View.getTranslationX()>
	//   15   32:fstore_3        
			float f3 = view.getTranslationY();
	//   16   33:aload           6
	//   17   35:invokevirtual   #1847 <Method float View.getTranslationY()>
	//   18   38:fstore          4
			if(f >= (float)view.getLeft() + f2 && f <= (float)view.getRight() + f2 && f1 >= (float)view.getTop() + f3 && f1 <= (float)view.getBottom() + f3)
	//*  19   40:fload_1         
	//*  20   41:aload           6
	//*  21   43:invokevirtual   #1146 <Method int View.getLeft()>
	//*  22   46:i2f             
	//*  23   47:fload_3         
	//*  24   48:fadd            
	//*  25   49:fcmpl           
	//*  26   50:iflt            97
	//*  27   53:fload_1         
	//*  28   54:aload           6
	//*  29   56:invokevirtual   #1164 <Method int View.getRight()>
	//*  30   59:i2f             
	//*  31   60:fload_3         
	//*  32   61:fadd            
	//*  33   62:fcmpg           
	//*  34   63:ifgt            97
	//*  35   66:fload_2         
	//*  36   67:aload           6
	//*  37   69:invokevirtual   #1155 <Method int View.getTop()>
	//*  38   72:i2f             
	//*  39   73:fload           4
	//*  40   75:fadd            
	//*  41   76:fcmpl           
	//*  42   77:iflt            97
	//*  43   80:fload_2         
	//*  44   81:aload           6
	//*  45   83:invokevirtual   #1173 <Method int View.getBottom()>
	//*  46   86:i2f             
	//*  47   87:fload           4
	//*  48   89:fadd            
	//*  49   90:fcmpg           
	//*  50   91:ifgt            97
				return view;
	//   51   94:aload           6
	//   52   96:areturn         
		}

	//   53   97:iload           5
	//   54   99:iconst_1        
	//   55  100:isub            
	//   56  101:istore          5
	//*  57  103:goto            11
		return null;
	//   58  106:aconst_null     
	//   59  107:areturn         
	}

	public View findContainingItemView(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #667 <Method ViewParent View.getParent()>
	//    2    4:astore_3        
		View view1 = view;
	//    3    5:aload_1         
	//    4    6:astore_2        
		for(view = ((View) (viewparent)); view != null && view != this && (view instanceof View); view = ((View) (view1.getParent())))
	//*   5    7:aload_3         
	//*   6    8:astore_1        
	//*   7    9:aload_1         
	//*   8   10:ifnull          38
	//*   9   13:aload_1         
	//*  10   14:aload_0         
	//*  11   15:if_acmpeq       38
	//*  12   18:aload_1         
	//*  13   19:instanceof      #663 <Class View>
	//*  14   22:ifeq            38
			view1 = (View)view;
	//   15   25:aload_1         
	//   16   26:checkcast       #663 <Class View>
	//   17   29:astore_2        

	//   18   30:aload_2         
	//   19   31:invokevirtual   #667 <Method ViewParent View.getParent()>
	//   20   34:astore_1        
	//*  21   35:goto            9
		if(view == this)
	//*  22   38:aload_1         
	//*  23   39:aload_0         
	//*  24   40:if_acmpne       45
			return view1;
	//   25   43:aload_2         
	//   26   44:areturn         
		else
			return null;
	//   27   45:aconst_null     
	//   28   46:areturn         
	}

	public ViewHolder findContainingViewHolder(View view)
	{
		view = findContainingItemView(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1274 <Method View findContainingItemView(View)>
	//    3    5:astore_1        
		if(view == null)
	//*   4    6:aload_1         
	//*   5    7:ifnonnull       12
			return null;
	//    6   10:aconst_null     
	//    7   11:areturn         
		else
			return getChildViewHolder(view);
	//    8   12:aload_0         
	//    9   13:aload_1         
	//   10   14:invokevirtual   #671 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   11   17:areturn         
	}

	public ViewHolder findViewHolderForAdapterPosition(int i)
	{
		boolean flag = mDataSetHasChangedAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//    2    4:istore          4
		ViewHolder viewholder = null;
	//    3    6:aconst_null     
	//    4    7:astore          5
		if(flag)
	//*   5    9:iload           4
	//*   6   11:ifeq            16
			return null;
	//    7   14:aconst_null     
	//    8   15:areturn         
		int k = mChildHelper.getUnfilteredChildCount();
	//    9   16:aload_0         
	//   10   17:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   20:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//   12   23:istore_3        
		for(int j = 0; j < k;)
	//*  13   24:iconst_0        
	//*  14   25:istore_2        
	//*  15   26:iload_2         
	//*  16   27:iload_3         
	//*  17   28:icmpge          115
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   18   31:aload_0         
	//   19   32:getfield        #679 <Field ChildHelper mChildHelper>
	//   20   35:iload_2         
	//   21   36:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   22   39:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   23   42:astore          7
			ViewHolder viewholder1 = viewholder;
	//   24   44:aload           5
	//   25   46:astore          6
			if(viewholder2 != null)
	//*  26   48:aload           7
	//*  27   50:ifnull          104
			{
				viewholder1 = viewholder;
	//   28   53:aload           5
	//   29   55:astore          6
				if(!viewholder2.isRemoved())
	//*  30   57:aload           7
	//*  31   59:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  32   62:ifne            104
				{
					viewholder1 = viewholder;
	//   33   65:aload           5
	//   34   67:astore          6
					if(getAdapterPositionFor(viewholder2) == i)
	//*  35   69:aload_0         
	//*  36   70:aload           7
	//*  37   72:invokevirtual   #1850 <Method int getAdapterPositionFor(RecyclerView$ViewHolder)>
	//*  38   75:iload_1         
	//*  39   76:icmpne          104
						if(mChildHelper.isHidden(viewholder2.itemView))
	//*  40   79:aload_0         
	//*  41   80:getfield        #679 <Field ChildHelper mChildHelper>
	//*  42   83:aload           7
	//*  43   85:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  44   88:invokevirtual   #1384 <Method boolean ChildHelper.isHidden(View)>
	//*  45   91:ifeq            101
							viewholder1 = viewholder2;
	//   46   94:aload           7
	//   47   96:astore          6
						else
	//*  48   98:goto            104
							return viewholder2;
	//   49  101:aload           7
	//   50  103:areturn         
				}
			}
			j++;
	//   51  104:iload_2         
	//   52  105:iconst_1        
	//   53  106:iadd            
	//   54  107:istore_2        
			viewholder = viewholder1;
	//   55  108:aload           6
	//   56  110:astore          5
		}

	//*  57  112:goto            26
		return viewholder;
	//   58  115:aload           5
	//   59  117:areturn         
	}

	public ViewHolder findViewHolderForItemId(long l)
	{
		Adapter adapter = mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    2    4:astore          6
		ViewHolder viewholder = null;
	//    3    6:aconst_null     
	//    4    7:astore          5
		if(adapter != null)
	//*   5    9:aload           6
	//*   6   11:ifnull          128
		{
			if(!adapter.hasStableIds())
	//*   7   14:aload           6
	//*   8   16:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   9   19:ifne            24
				return null;
	//   10   22:aconst_null     
	//   11   23:areturn         
			int j = mChildHelper.getUnfilteredChildCount();
	//   12   24:aload_0         
	//   13   25:getfield        #679 <Field ChildHelper mChildHelper>
	//   14   28:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//   15   31:istore          4
			for(int i = 0; i < j;)
	//*  16   33:iconst_0        
	//*  17   34:istore_3        
	//*  18   35:iload_3         
	//*  19   36:iload           4
	//*  20   38:icmpge          125
			{
				ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   21   41:aload_0         
	//   22   42:getfield        #679 <Field ChildHelper mChildHelper>
	//   23   45:iload_3         
	//   24   46:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   25   49:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   26   52:astore          7
				ViewHolder viewholder1 = viewholder;
	//   27   54:aload           5
	//   28   56:astore          6
				if(viewholder2 != null)
	//*  29   58:aload           7
	//*  30   60:ifnull          114
				{
					viewholder1 = viewholder;
	//   31   63:aload           5
	//   32   65:astore          6
					if(!viewholder2.isRemoved())
	//*  33   67:aload           7
	//*  34   69:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  35   72:ifne            114
					{
						viewholder1 = viewholder;
	//   36   75:aload           5
	//   37   77:astore          6
						if(viewholder2.getItemId() == l)
	//*  38   79:aload           7
	//*  39   81:invokevirtual   #1440 <Method long RecyclerView$ViewHolder.getItemId()>
	//*  40   84:lload_1         
	//*  41   85:lcmp            
	//*  42   86:ifne            114
							if(mChildHelper.isHidden(viewholder2.itemView))
	//*  43   89:aload_0         
	//*  44   90:getfield        #679 <Field ChildHelper mChildHelper>
	//*  45   93:aload           7
	//*  46   95:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  47   98:invokevirtual   #1384 <Method boolean ChildHelper.isHidden(View)>
	//*  48  101:ifeq            111
								viewholder1 = viewholder2;
	//   49  104:aload           7
	//   50  106:astore          6
							else
	//*  51  108:goto            114
								return viewholder2;
	//   52  111:aload           7
	//   53  113:areturn         
					}
				}
				i++;
	//   54  114:iload_3         
	//   55  115:iconst_1        
	//   56  116:iadd            
	//   57  117:istore_3        
				viewholder = viewholder1;
	//   58  118:aload           6
	//   59  120:astore          5
			}

	//*  60  122:goto            35
			return viewholder;
	//   61  125:aload           5
	//   62  127:areturn         
		} else
		{
			return null;
	//   63  128:aconst_null     
	//   64  129:areturn         
		}
	}

	public ViewHolder findViewHolderForLayoutPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1855 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	public ViewHolder findViewHolderForPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1855 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	ViewHolder findViewHolderForPosition(int i, boolean flag)
	{
		int k = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		ViewHolder viewholder = null;
	//    4    9:aconst_null     
	//    5   10:astore          5
		for(int j = 0; j < k;)
	//*   6   12:iconst_0        
	//*   7   13:istore_3        
	//*   8   14:iload_3         
	//*   9   15:iload           4
	//*  10   17:icmpge          126
		{
			ViewHolder viewholder1;
label0:
			{
				ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   11   20:aload_0         
	//   12   21:getfield        #679 <Field ChildHelper mChildHelper>
	//   13   24:iload_3         
	//   14   25:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   15   28:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   31:astore          7
				viewholder1 = viewholder;
	//   17   33:aload           5
	//   18   35:astore          6
				if(viewholder2 == null)
					break label0;
	//   19   37:aload           7
	//   20   39:ifnull          115
				viewholder1 = viewholder;
	//   21   42:aload           5
	//   22   44:astore          6
				if(viewholder2.isRemoved())
					break label0;
	//   23   46:aload           7
	//   24   48:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   25   51:ifne            115
				if(flag)
	//*  26   54:iload_2         
	//*  27   55:ifeq            74
				{
					if(viewholder2.mPosition != i)
	//*  28   58:aload           7
	//*  29   60:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  30   63:iload_1         
	//*  31   64:icmpeq          90
					{
						viewholder1 = viewholder;
	//   32   67:aload           5
	//   33   69:astore          6
						break label0;
	//   34   71:goto            115
					}
				} else
				if(viewholder2.getLayoutPosition() != i)
	//*  35   74:aload           7
	//*  36   76:invokevirtual   #1110 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//*  37   79:iload_1         
	//*  38   80:icmpeq          90
				{
					viewholder1 = viewholder;
	//   39   83:aload           5
	//   40   85:astore          6
					break label0;
	//   41   87:goto            115
				}
				if(mChildHelper.isHidden(viewholder2.itemView))
	//*  42   90:aload_0         
	//*  43   91:getfield        #679 <Field ChildHelper mChildHelper>
	//*  44   94:aload           7
	//*  45   96:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//*  46   99:invokevirtual   #1384 <Method boolean ChildHelper.isHidden(View)>
	//*  47  102:ifeq            112
					viewholder1 = viewholder2;
	//   48  105:aload           7
	//   49  107:astore          6
				else
	//*  50  109:goto            115
					return viewholder2;
	//   51  112:aload           7
	//   52  114:areturn         
			}
			j++;
	//   53  115:iload_3         
	//   54  116:iconst_1        
	//   55  117:iadd            
	//   56  118:istore_3        
			viewholder = viewholder1;
	//   57  119:aload           6
	//   58  121:astore          5
		}

	//*  59  123:goto            14
		return viewholder;
	//   60  126:aload           5
	//   61  128:areturn         
	}

	public boolean fling(int i, int j)
	{
		int k;
		boolean flag;
		boolean flag2;
		boolean flag3;
label0:
		{
			LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          11
			flag = false;
	//    3    6:iconst_0        
	//    4    7:istore          7
			if(layoutmanager == null)
	//*   5    9:aload           11
	//*   6   11:ifnonnull       25
			{
				Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   14:ldc1            #172 <String "RecyclerView">
	//    8   16:ldc2            #1863 <String "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   19:invokestatic    #1254 <Method int Log.e(String, String)>
	//   10   22:pop             
				return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
			}
			if(mLayoutFrozen)
	//*  13   25:aload_0         
	//*  14   26:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  15   29:ifeq            34
				return false;
	//   16   32:iconst_0        
	//   17   33:ireturn         
			flag2 = layoutmanager.canScrollHorizontally();
	//   18   34:aload           11
	//   19   36:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   20   39:istore          9
			flag3 = mLayout.canScrollVertically();
	//   21   41:aload_0         
	//   22   42:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   23   45:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   24   48:istore          10
			if(flag2)
	//*  25   50:iload           9
	//*  26   52:ifeq            69
			{
				k = i;
	//   27   55:iload_1         
	//   28   56:istore          5
				if(Math.abs(i) >= mMinFlingVelocity)
					break label0;
	//   29   58:iload_1         
	//   30   59:invokestatic    #1868 <Method int Math.abs(int)>
	//   31   62:aload_0         
	//   32   63:getfield        #520 <Field int mMinFlingVelocity>
	//   33   66:icmpge          72
			}
			k = 0;
	//   34   69:iconst_0        
	//   35   70:istore          5
		}
		int l;
label1:
		{
			if(flag3)
	//*  36   72:iload           10
	//*  37   74:ifeq            91
			{
				l = j;
	//   38   77:iload_2         
	//   39   78:istore          6
				if(Math.abs(j) >= mMinFlingVelocity)
					break label1;
	//   40   80:iload_2         
	//   41   81:invokestatic    #1868 <Method int Math.abs(int)>
	//   42   84:aload_0         
	//   43   85:getfield        #520 <Field int mMinFlingVelocity>
	//   44   88:icmpge          94
			}
			l = 0;
	//   45   91:iconst_0        
	//   46   92:istore          6
		}
		if(k == 0 && l == 0)
	//*  47   94:iload           5
	//*  48   96:ifne            106
	//*  49   99:iload           6
	//*  50  101:ifne            106
			return false;
	//   51  104:iconst_0        
	//   52  105:ireturn         
		float f = k;
	//   53  106:iload           5
	//   54  108:i2f             
	//   55  109:fstore_3        
		float f1 = l;
	//   56  110:iload           6
	//   57  112:i2f             
	//   58  113:fstore          4
		if(!dispatchNestedPreFling(f, f1))
	//*  59  115:aload_0         
	//*  60  116:fload_3         
	//*  61  117:fload           4
	//*  62  119:invokevirtual   #1869 <Method boolean dispatchNestedPreFling(float, float)>
	//*  63  122:ifne            260
		{
			boolean flag1;
			if(!flag2 && !flag3)
	//*  64  125:iload           9
	//*  65  127:ifne            144
	//*  66  130:iload           10
	//*  67  132:ifeq            138
	//*  68  135:goto            144
				flag1 = false;
	//   69  138:iconst_0        
	//   70  139:istore          8
			else
	//*  71  141:goto            147
				flag1 = true;
	//   72  144:iconst_1        
	//   73  145:istore          8
			dispatchNestedFling(f, f1, flag1);
	//   74  147:aload_0         
	//   75  148:fload_3         
	//   76  149:fload           4
	//   77  151:iload           8
	//   78  153:invokevirtual   #1870 <Method boolean dispatchNestedFling(float, float, boolean)>
	//   79  156:pop             
			OnFlingListener onflinglistener = mOnFlingListener;
	//   80  157:aload_0         
	//   81  158:getfield        #1872 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//   82  161:astore          11
			if(onflinglistener != null && onflinglistener.onFling(k, l))
	//*  83  163:aload           11
	//*  84  165:ifnull          182
	//*  85  168:aload           11
	//*  86  170:iload           5
	//*  87  172:iload           6
	//*  88  174:invokevirtual   #1875 <Method boolean RecyclerView$OnFlingListener.onFling(int, int)>
	//*  89  177:ifeq            182
				return true;
	//   90  180:iconst_1        
	//   91  181:ireturn         
			if(flag1)
	//*  92  182:iload           8
	//*  93  184:ifeq            260
			{
				i = ((int) (flag));
	//   94  187:iload           7
	//   95  189:istore_1        
				if(flag2)
	//*  96  190:iload           9
	//*  97  192:ifeq            197
					i = 1;
	//   98  195:iconst_1        
	//   99  196:istore_1        
				j = i;
	//  100  197:iload_1         
	//  101  198:istore_2        
				if(flag3)
	//* 102  199:iload           10
	//* 103  201:ifeq            208
					j = i | 2;
	//  104  204:iload_1         
	//  105  205:iconst_2        
	//  106  206:ior             
	//  107  207:istore_2        
				startNestedScroll(j, 1);
	//  108  208:aload_0         
	//  109  209:iload_2         
	//  110  210:iconst_1        
	//  111  211:invokevirtual   #1878 <Method boolean startNestedScroll(int, int)>
	//  112  214:pop             
				i = mMaxFlingVelocity;
	//  113  215:aload_0         
	//  114  216:getfield        #525 <Field int mMaxFlingVelocity>
	//  115  219:istore_1        
				i = Math.max(-i, Math.min(k, i));
	//  116  220:iload_1         
	//  117  221:ineg            
	//  118  222:iload           5
	//  119  224:iload_1         
	//  120  225:invokestatic    #1135 <Method int Math.min(int, int)>
	//  121  228:invokestatic    #1881 <Method int Math.max(int, int)>
	//  122  231:istore_1        
				j = mMaxFlingVelocity;
	//  123  232:aload_0         
	//  124  233:getfield        #525 <Field int mMaxFlingVelocity>
	//  125  236:istore_2        
				j = Math.max(-j, Math.min(l, j));
	//  126  237:iload_2         
	//  127  238:ineg            
	//  128  239:iload           6
	//  129  241:iload_2         
	//  130  242:invokestatic    #1135 <Method int Math.min(int, int)>
	//  131  245:invokestatic    #1881 <Method int Math.max(int, int)>
	//  132  248:istore_2        
				mViewFlinger.fling(i, j);
	//  133  249:aload_0         
	//  134  250:getfield        #437 <Field RecyclerView$ViewFlinger mViewFlinger>
	//  135  253:iload_1         
	//  136  254:iload_2         
	//  137  255:invokevirtual   #1883 <Method void RecyclerView$ViewFlinger.fling(int, int)>
				return true;
	//  138  258:iconst_1        
	//  139  259:ireturn         
			}
		}
		return false;
	//  140  260:iconst_0        
	//  141  261:ireturn         
	}

	public View focusSearch(View view, int i)
	{
		Object obj = ((Object) (mLayout.onInterceptFocusSearch(view, i)));
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #1888 <Method View RecyclerView$LayoutManager.onInterceptFocusSearch(View, int)>
	//    5    9:astore          7
		if(obj != null)
	//*   6   11:aload           7
	//*   7   13:ifnull          19
			return ((View) (obj));
	//    8   16:aload           7
	//    9   18:areturn         
		byte byte0;
		if(mAdapter != null && mLayout != null && !isComputingLayout() && !mLayoutFrozen)
	//*  10   19:aload_0         
	//*  11   20:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          52
	//*  13   26:aload_0         
	//*  14   27:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  15   30:ifnull          52
	//*  16   33:aload_0         
	//*  17   34:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*  18   37:ifne            52
	//*  19   40:aload_0         
	//*  20   41:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  21   44:ifne            52
			byte0 = 1;
	//   22   47:iconst_1        
	//   23   48:istore_3        
		else
	//*  24   49:goto            54
			byte0 = 0;
	//   25   52:iconst_0        
	//   26   53:istore_3        
		obj = ((Object) (FocusFinder.getInstance()));
	//   27   54:invokestatic    #1894 <Method FocusFinder FocusFinder.getInstance()>
	//   28   57:astore          7
		if(byte0 != 0 && (i == 2 || i == 1))
	//*  29   59:iload_3         
	//*  30   60:ifeq            319
	//*  31   63:iload_2         
	//*  32   64:iconst_2        
	//*  33   65:icmpeq          73
	//*  34   68:iload_2         
	//*  35   69:iconst_1        
	//*  36   70:icmpne          319
		{
			if(mLayout.canScrollVertically())
	//*  37   73:aload_0         
	//*  38   74:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  39   77:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  40   80:ifeq            139
			{
				char c;
				if(i == 2)
	//*  41   83:iload_2         
	//*  42   84:iconst_2        
	//*  43   85:icmpne          96
					c = '\202';
	//   44   88:sipush          130
	//   45   91:istore          4
				else
	//*  46   93:goto            100
					c = '!';
	//   47   96:bipush          33
	//   48   98:istore          4
				boolean flag1;
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (c))) == null)
	//*  49  100:aload           7
	//*  50  102:aload_0         
	//*  51  103:aload_1         
	//*  52  104:iload           4
	//*  53  106:invokevirtual   #1898 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  54  109:ifnonnull       118
					flag1 = true;
	//   55  112:iconst_1        
	//   56  113:istore          5
				else
	//*  57  115:goto            121
					flag1 = false;
	//   58  118:iconst_0        
	//   59  119:istore          5
				byte0 = ((byte) (flag1));
	//   60  121:iload           5
	//   61  123:istore_3        
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//*  62  124:getstatic       #338 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  63  127:ifeq            141
				{
					i = ((int) (c));
	//   64  130:iload           4
	//   65  132:istore_2        
					byte0 = ((byte) (flag1));
	//   66  133:iload           5
	//   67  135:istore_3        
				}
			} else
	//*  68  136:goto            141
			{
				byte0 = 0;
	//   69  139:iconst_0        
	//   70  140:istore_3        
			}
			byte byte1 = byte0;
	//   71  141:iload_3         
	//   72  142:istore          6
			int j = i;
	//   73  144:iload_2         
	//   74  145:istore          5
			if(byte0 == 0)
	//*  75  147:iload_3         
	//*  76  148:ifne            255
			{
				byte1 = byte0;
	//   77  151:iload_3         
	//   78  152:istore          6
				j = i;
	//   79  154:iload_2         
	//   80  155:istore          5
				if(mLayout.canScrollHorizontally())
	//*  81  157:aload_0         
	//*  82  158:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  83  161:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  84  164:ifeq            255
				{
					if(mLayout.getLayoutDirection() == 1)
	//*  85  167:aload_0         
	//*  86  168:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  87  171:invokevirtual   #1286 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  88  174:iconst_1        
	//*  89  175:icmpne          183
						byte0 = 1;
	//   90  178:iconst_1        
	//   91  179:istore_3        
					else
	//*  92  180:goto            185
						byte0 = 0;
	//   93  183:iconst_0        
	//   94  184:istore_3        
					boolean flag;
					if(i == 2)
	//*  95  185:iload_2         
	//*  96  186:iconst_2        
	//*  97  187:icmpne          196
						flag = true;
	//   98  190:iconst_1        
	//   99  191:istore          4
					else
	//* 100  193:goto            199
						flag = false;
	//  101  196:iconst_0        
	//  102  197:istore          4
					if((byte0 ^ flag) != 0)
	//* 103  199:iload_3         
	//* 104  200:iload           4
	//* 105  202:ixor            
	//* 106  203:ifeq            212
						byte0 = 66;
	//  107  206:bipush          66
	//  108  208:istore_3        
					else
	//* 109  209:goto            215
						byte0 = 17;
	//  110  212:bipush          17
	//  111  214:istore_3        
					if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (byte0))) == null)
	//* 112  215:aload           7
	//* 113  217:aload_0         
	//* 114  218:aload_1         
	//* 115  219:iload_3         
	//* 116  220:invokevirtual   #1898 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 117  223:ifnonnull       232
						flag = true;
	//  118  226:iconst_1        
	//  119  227:istore          4
					else
	//* 120  229:goto            235
						flag = false;
	//  121  232:iconst_0        
	//  122  233:istore          4
					byte1 = ((byte) (flag));
	//  123  235:iload           4
	//  124  237:istore          6
					j = i;
	//  125  239:iload_2         
	//  126  240:istore          5
					if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//* 127  242:getstatic       #338 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//* 128  245:ifeq            255
					{
						j = ((int) (byte0));
	//  129  248:iload_3         
	//  130  249:istore          5
						byte1 = ((byte) (flag));
	//  131  251:iload           4
	//  132  253:istore          6
					}
				}
			}
			if(byte1 != 0)
	//* 133  255:iload           6
	//* 134  257:ifeq            302
			{
				consumePendingUpdateOperations();
	//  135  260:aload_0         
	//  136  261:invokevirtual   #1900 <Method void consumePendingUpdateOperations()>
				if(findContainingItemView(view) == null)
	//* 137  264:aload_0         
	//* 138  265:aload_1         
	//* 139  266:invokevirtual   #1274 <Method View findContainingItemView(View)>
	//* 140  269:ifnonnull       274
					return null;
	//  141  272:aconst_null     
	//  142  273:areturn         
				startInterceptRequestLayout();
	//  143  274:aload_0         
	//  144  275:invokevirtual   #880 <Method void startInterceptRequestLayout()>
				mLayout.onFocusSearchFailed(view, j, mRecycler, mState);
	//  145  278:aload_0         
	//  146  279:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  147  282:aload_1         
	//  148  283:iload           5
	//  149  285:aload_0         
	//  150  286:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  151  289:aload_0         
	//  152  290:getfield        #445 <Field RecyclerView$State mState>
	//  153  293:invokevirtual   #1904 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  154  296:pop             
				stopInterceptRequestLayout(false);
	//  155  297:aload_0         
	//  156  298:iconst_0        
	//  157  299:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
			}
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, j)));
	//  158  302:aload           7
	//  159  304:aload_0         
	//  160  305:aload_1         
	//  161  306:iload           5
	//  162  308:invokevirtual   #1898 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  163  311:astore          7
			i = j;
	//  164  313:iload           5
	//  165  315:istore_2        
		} else
	//* 166  316:goto            383
		{
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i)));
	//  167  319:aload           7
	//  168  321:aload_0         
	//  169  322:aload_1         
	//  170  323:iload_2         
	//  171  324:invokevirtual   #1898 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  172  327:astore          7
			if(obj == null && byte0 != 0)
	//* 173  329:aload           7
	//* 174  331:ifnonnull       383
	//* 175  334:iload_3         
	//* 176  335:ifeq            383
			{
				consumePendingUpdateOperations();
	//  177  338:aload_0         
	//  178  339:invokevirtual   #1900 <Method void consumePendingUpdateOperations()>
				if(findContainingItemView(view) == null)
	//* 179  342:aload_0         
	//* 180  343:aload_1         
	//* 181  344:invokevirtual   #1274 <Method View findContainingItemView(View)>
	//* 182  347:ifnonnull       352
					return null;
	//  183  350:aconst_null     
	//  184  351:areturn         
				startInterceptRequestLayout();
	//  185  352:aload_0         
	//  186  353:invokevirtual   #880 <Method void startInterceptRequestLayout()>
				obj = ((Object) (mLayout.onFocusSearchFailed(view, i, mRecycler, mState)));
	//  187  356:aload_0         
	//  188  357:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  189  360:aload_1         
	//  190  361:iload_2         
	//  191  362:aload_0         
	//  192  363:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  193  366:aload_0         
	//  194  367:getfield        #445 <Field RecyclerView$State mState>
	//  195  370:invokevirtual   #1904 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  196  373:astore          7
				stopInterceptRequestLayout(false);
	//  197  375:aload_0         
	//  198  376:iconst_0        
	//  199  377:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
			}
		}
	//* 200  380:goto            383
		if(obj != null && !((View) (obj)).hasFocusable())
	//* 201  383:aload           7
	//* 202  385:ifnull          419
	//* 203  388:aload           7
	//* 204  390:invokevirtual   #1130 <Method boolean View.hasFocusable()>
	//* 205  393:ifne            419
			if(getFocusedChild() == null)
	//* 206  396:aload_0         
	//* 207  397:invokevirtual   #1377 <Method View getFocusedChild()>
	//* 208  400:ifnonnull       410
			{
				return super.focusSearch(view, i);
	//  209  403:aload_0         
	//  210  404:aload_1         
	//  211  405:iload_2         
	//  212  406:invokespecial   #1906 <Method View ViewGroup.focusSearch(View, int)>
	//  213  409:areturn         
			} else
			{
				requestChildOnScreen(((View) (obj)), ((View) (null)));
	//  214  410:aload_0         
	//  215  411:aload           7
	//  216  413:aconst_null     
	//  217  414:invokespecial   #1908 <Method void requestChildOnScreen(View, View)>
				return view;
	//  218  417:aload_1         
	//  219  418:areturn         
			}
		if(isPreferredNextFocus(view, ((View) (obj)), i))
	//* 220  419:aload_0         
	//* 221  420:aload_1         
	//* 222  421:aload           7
	//* 223  423:iload_2         
	//* 224  424:invokespecial   #1910 <Method boolean isPreferredNextFocus(View, View, int)>
	//* 225  427:ifeq            433
			return ((View) (obj));
	//  226  430:aload           7
	//  227  432:areturn         
		else
			return super.focusSearch(view, i);
	//  228  433:aload_0         
	//  229  434:aload_1         
	//  230  435:iload_2         
	//  231  436:invokespecial   #1906 <Method View ViewGroup.focusSearch(View, int)>
	//  232  439:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_1        
		if(layoutmanager != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
		{
			return ((android.view.ViewGroup.LayoutParams) (layoutmanager.generateDefaultLayoutParams()));
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1914 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateDefaultLayoutParams()>
	//    7   13:areturn         
		} else
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    8   14:new             #809 <Class StringBuilder>
	//    9   17:dup             
	//   10   18:invokespecial   #810 <Method void StringBuilder()>
	//   11   21:astore_1        
			stringbuilder.append("RecyclerView has no LayoutManager");
	//   12   22:aload_1         
	//   13   23:ldc2            #1916 <String "RecyclerView has no LayoutManager">
	//   14   26:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   15   29:pop             
			stringbuilder.append(exceptionLabel());
	//   16   30:aload_1         
	//   17   31:aload_0         
	//   18   32:invokevirtual   #1239 <Method String exceptionLabel()>
	//   19   35:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   20   38:pop             
			throw new IllegalStateException(stringbuilder.toString());
	//   21   39:new             #821 <Class IllegalStateException>
	//   22   42:dup             
	//   23   43:aload_1         
	//   24   44:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   25   47:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   26   50:athrow          
		}
	}

	public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		if(layoutmanager != null)
	//*   3    5:aload_2         
	//*   4    6:ifnull          19
		{
			return ((android.view.ViewGroup.LayoutParams) (layoutmanager.generateLayoutParams(getContext(), attributeset)));
	//    5    9:aload_2         
	//    6   10:aload_0         
	//    7   11:invokevirtual   #558 <Method Context getContext()>
	//    8   14:aload_1         
	//    9   15:invokevirtual   #1921 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(Context, AttributeSet)>
	//   10   18:areturn         
		} else
		{
			attributeset = ((AttributeSet) (new StringBuilder()));
	//   11   19:new             #809 <Class StringBuilder>
	//   12   22:dup             
	//   13   23:invokespecial   #810 <Method void StringBuilder()>
	//   14   26:astore_1        
			((StringBuilder) (attributeset)).append("RecyclerView has no LayoutManager");
	//   15   27:aload_1         
	//   16   28:ldc2            #1916 <String "RecyclerView has no LayoutManager">
	//   17   31:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   18   34:pop             
			((StringBuilder) (attributeset)).append(exceptionLabel());
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:invokevirtual   #1239 <Method String exceptionLabel()>
	//   22   40:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   23   43:pop             
			throw new IllegalStateException(((StringBuilder) (attributeset)).toString());
	//   24   44:new             #821 <Class IllegalStateException>
	//   25   47:dup             
	//   26   48:aload_1         
	//   27   49:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   28   52:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   29   55:athrow          
		}
	}

	protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		if(layoutmanager != null)
	//*   3    5:aload_2         
	//*   4    6:ifnull          15
		{
			return ((android.view.ViewGroup.LayoutParams) (layoutmanager.generateLayoutParams(layoutparams)));
	//    5    9:aload_2         
	//    6   10:aload_1         
	//    7   11:invokevirtual   #1925 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
	//    8   14:areturn         
		} else
		{
			layoutparams = ((android.view.ViewGroup.LayoutParams) (new StringBuilder()));
	//    9   15:new             #809 <Class StringBuilder>
	//   10   18:dup             
	//   11   19:invokespecial   #810 <Method void StringBuilder()>
	//   12   22:astore_1        
			((StringBuilder) (layoutparams)).append("RecyclerView has no LayoutManager");
	//   13   23:aload_1         
	//   14   24:ldc2            #1916 <String "RecyclerView has no LayoutManager">
	//   15   27:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   16   30:pop             
			((StringBuilder) (layoutparams)).append(exceptionLabel());
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:invokevirtual   #1239 <Method String exceptionLabel()>
	//   20   36:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   21   39:pop             
			throw new IllegalStateException(((StringBuilder) (layoutparams)).toString());
	//   22   40:new             #821 <Class IllegalStateException>
	//   23   43:dup             
	//   24   44:aload_1         
	//   25   45:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   26   48:invokespecial   #1242 <Method void IllegalStateException(String)>
	//   27   51:athrow          
		}
	}

	public Adapter getAdapter()
	{
		return mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    2    4:areturn         
	}

	int getAdapterPositionFor(ViewHolder viewholder)
	{
		if(!viewholder.hasAnyOfTheFlags(524) && viewholder.isBound())
	//*   0    0:aload_1         
	//*   1    1:sipush          524
	//*   2    4:invokevirtual   #981 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//*   3    7:ifne            32
	//*   4   10:aload_1         
	//*   5   11:invokevirtual   #1930 <Method boolean RecyclerView$ViewHolder.isBound()>
	//*   6   14:ifne            20
	//*   7   17:goto            32
			return mAdapterHelper.applyPendingUpdatesToPosition(viewholder.mPosition);
	//    8   20:aload_0         
	//    9   21:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//   10   24:aload_1         
	//   11   25:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//   12   28:invokevirtual   #1933 <Method int AdapterHelper.applyPendingUpdatesToPosition(int)>
	//   13   31:ireturn         
		else
			return -1;
	//   14   32:iconst_m1       
	//   15   33:ireturn         
	}

	public int getBaseline()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_1        
		if(layoutmanager != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return layoutmanager.getBaseline();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1936 <Method int RecyclerView$LayoutManager.getBaseline()>
	//    7   13:ireturn         
		else
			return super.getBaseline();
	//    8   14:aload_0         
	//    9   15:invokespecial   #1937 <Method int ViewGroup.getBaseline()>
	//   10   18:ireturn         
	}

	long getChangedHolderKey(ViewHolder viewholder)
	{
		if(mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   3    7:ifeq            15
			return viewholder.getItemId();
	//    4   10:aload_1         
	//    5   11:invokevirtual   #1440 <Method long RecyclerView$ViewHolder.getItemId()>
	//    6   14:lreturn         
		else
			return (long)viewholder.mPosition;
	//    7   15:aload_1         
	//    8   16:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//    9   19:i2l             
	//   10   20:lreturn         
	}

	public int getChildAdapterPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getAdapterPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1446 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	protected int getChildDrawingOrder(int i, int j)
	{
		ChildDrawingOrderCallback childdrawingordercallback = mChildDrawingOrderCallback;
	//    0    0:aload_0         
	//    1    1:getfield        #1941 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//    2    4:astore_3        
		if(childdrawingordercallback == null)
	//*   3    5:aload_3         
	//*   4    6:ifnonnull       16
			return super.getChildDrawingOrder(i, j);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:iload_2         
	//    8   12:invokespecial   #1943 <Method int ViewGroup.getChildDrawingOrder(int, int)>
	//    9   15:ireturn         
		else
			return childdrawingordercallback.onGetChildDrawingOrder(i, j);
	//   10   16:aload_3         
	//   11   17:iload_1         
	//   12   18:iload_2         
	//   13   19:invokeinterface #1946 <Method int RecyclerView$ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int)>
	//   14   24:ireturn         
	}

	public long getChildItemId(View view)
	{
		Adapter adapter = mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    2    4:astore          4
		long l = -1L;
	//    3    6:ldc2w           #161 <Long -1L>
	//    4    9:lstore_2        
		if(adapter != null)
	//*   5   10:aload           4
	//*   6   12:ifnull          43
		{
			if(!adapter.hasStableIds())
	//*   7   15:aload           4
	//*   8   17:invokevirtual   #931 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   9   20:ifne            27
				return -1L;
	//   10   23:ldc2w           #161 <Long -1L>
	//   11   26:lreturn         
			view = ((View) (getChildViewHolderInt(view)));
	//   12   27:aload_1         
	//   13   28:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore_1        
			if(view != null)
	//*  15   32:aload_1         
	//*  16   33:ifnull          41
				l = ((ViewHolder) (view)).getItemId();
	//   17   36:aload_1         
	//   18   37:invokevirtual   #1440 <Method long RecyclerView$ViewHolder.getItemId()>
	//   19   40:lstore_2        
			return l;
	//   20   41:lload_2         
	//   21   42:lreturn         
		} else
		{
			return -1L;
	//   22   43:ldc2w           #161 <Long -1L>
	//   23   46:lreturn         
		}
	}

	public int getChildLayoutPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getLayoutPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1110 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	public int getChildPosition(View view)
	{
		return getChildAdapterPosition(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1952 <Method int getChildAdapterPosition(View)>
	//    3    5:ireturn         
	}

	public ViewHolder getChildViewHolder(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #667 <Method ViewParent View.getParent()>
	//    2    4:astore_2        
		if(viewparent != null && viewparent != this)
	//*   3    5:aload_2         
	//*   4    6:ifnull          65
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpne       17
	//*   8   14:goto            65
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    9   17:new             #809 <Class StringBuilder>
	//   10   20:dup             
	//   11   21:invokespecial   #810 <Method void StringBuilder()>
	//   12   24:astore_2        
			stringbuilder.append("View ");
	//   13   25:aload_2         
	//   14   26:ldc2            #1954 <String "View ">
	//   15   29:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   16   32:pop             
			stringbuilder.append(((Object) (view)));
	//   17   33:aload_2         
	//   18   34:aload_1         
	//   19   35:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   20   38:pop             
			stringbuilder.append(" is not a direct child of ");
	//   21   39:aload_2         
	//   22   40:ldc2            #1956 <String " is not a direct child of ">
	//   23   43:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   24   46:pop             
			stringbuilder.append(((Object) (this)));
	//   25   47:aload_2         
	//   26   48:aload_0         
	//   27   49:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   28   52:pop             
			throw new IllegalArgumentException(stringbuilder.toString());
	//   29   53:new             #1293 <Class IllegalArgumentException>
	//   30   56:dup             
	//   31   57:aload_2         
	//   32   58:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   33   61:invokespecial   #1294 <Method void IllegalArgumentException(String)>
	//   34   64:athrow          
		} else
		{
			return getChildViewHolderInt(view);
	//   35   65:aload_1         
	//   36   66:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   37   69:areturn         
		}
	}

	public boolean getClipToPadding()
	{
		return mClipToPadding;
	//    0    0:aload_0         
	//    1    1:getfield        #484 <Field boolean mClipToPadding>
	//    2    4:ireturn         
	}

	public RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
	{
		return mAccessibilityDelegate;
	//    0    0:aload_0         
	//    1    1:getfield        #1961 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    2    4:areturn         
	}

	public void getDecoratedBoundsWithMargins(View view, Rect rect)
	{
		getDecoratedBoundsWithMarginsInt(view, rect);
	//    0    0:aload_1         
	//    1    1:aload_2         
	//    2    2:invokestatic    #1964 <Method void getDecoratedBoundsWithMarginsInt(View, Rect)>
	//    3    5:return          
	}

	public EdgeEffectFactory getEdgeEffectFactory()
	{
		return mEdgeEffectFactory;
	//    0    0:aload_0         
	//    1    1:getfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    2    4:areturn         
	}

	public ItemAnimator getItemAnimator()
	{
		return mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:areturn         
	}

	Rect getItemDecorInsetsForChild(View view)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    3    7:astore          4
		if(!layoutparams.mInsetsDirty)
	//*   4    9:aload           4
	//*   5   11:getfield        #1416 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*   6   14:ifne            23
			return layoutparams.mDecorInsets;
	//    7   17:aload           4
	//    8   19:getfield        #1143 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    9   22:areturn         
		if(mState.isPreLayout() && (layoutparams.isItemChanged() || layoutparams.isViewInvalid()))
	//*  10   23:aload_0         
	//*  11   24:getfield        #445 <Field RecyclerView$State mState>
	//*  12   27:invokevirtual   #1973 <Method boolean RecyclerView$State.isPreLayout()>
	//*  13   30:ifeq            55
	//*  14   33:aload           4
	//*  15   35:invokevirtual   #1976 <Method boolean RecyclerView$LayoutParams.isItemChanged()>
	//*  16   38:ifne            49
	//*  17   41:aload           4
	//*  18   43:invokevirtual   #1979 <Method boolean RecyclerView$LayoutParams.isViewInvalid()>
	//*  19   46:ifeq            55
			return layoutparams.mDecorInsets;
	//   20   49:aload           4
	//   21   51:getfield        #1143 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   22   54:areturn         
		Rect rect = layoutparams.mDecorInsets;
	//   23   55:aload           4
	//   24   57:getfield        #1143 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   25   60:astore          5
		rect.set(0, 0, 0, 0);
	//   26   62:aload           5
	//   27   64:iconst_0        
	//   28   65:iconst_0        
	//   29   66:iconst_0        
	//   30   67:iconst_0        
	//   31   68:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
		int j = mItemDecorations.size();
	//   32   71:aload_0         
	//   33   72:getfield        #403 <Field ArrayList mItemDecorations>
	//   34   75:invokevirtual   #1097 <Method int ArrayList.size()>
	//   35   78:istore_3        
		for(int i = 0; i < j; i++)
	//*  36   79:iconst_0        
	//*  37   80:istore_2        
	//*  38   81:iload_2         
	//*  39   82:iload_3         
	//*  40   83:icmpge          200
		{
			mTempRect.set(0, 0, 0, 0);
	//   41   86:aload_0         
	//   42   87:getfield        #391 <Field Rect mTempRect>
	//   43   90:iconst_0        
	//   44   91:iconst_0        
	//   45   92:iconst_0        
	//   46   93:iconst_0        
	//   47   94:invokevirtual   #1183 <Method void Rect.set(int, int, int, int)>
			((ItemDecoration)mItemDecorations.get(i)).getItemOffsets(mTempRect, view, this, mState);
	//   48   97:aload_0         
	//   49   98:getfield        #403 <Field ArrayList mItemDecorations>
	//   50  101:iload_2         
	//   51  102:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   52  105:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   53  108:aload_0         
	//   54  109:getfield        #391 <Field Rect mTempRect>
	//   55  112:aload_1         
	//   56  113:aload_0         
	//   57  114:aload_0         
	//   58  115:getfield        #445 <Field RecyclerView$State mState>
	//   59  118:invokevirtual   #1983 <Method void RecyclerView$ItemDecoration.getItemOffsets(Rect, View, RecyclerView, RecyclerView$State)>
			rect.left = rect.left + mTempRect.left;
	//   60  121:aload           5
	//   61  123:aload           5
	//   62  125:getfield        #1149 <Field int Rect.left>
	//   63  128:aload_0         
	//   64  129:getfield        #391 <Field Rect mTempRect>
	//   65  132:getfield        #1149 <Field int Rect.left>
	//   66  135:iadd            
	//   67  136:putfield        #1149 <Field int Rect.left>
			rect.top = rect.top + mTempRect.top;
	//   68  139:aload           5
	//   69  141:aload           5
	//   70  143:getfield        #1158 <Field int Rect.top>
	//   71  146:aload_0         
	//   72  147:getfield        #391 <Field Rect mTempRect>
	//   73  150:getfield        #1158 <Field int Rect.top>
	//   74  153:iadd            
	//   75  154:putfield        #1158 <Field int Rect.top>
			rect.right = rect.right + mTempRect.right;
	//   76  157:aload           5
	//   77  159:aload           5
	//   78  161:getfield        #1167 <Field int Rect.right>
	//   79  164:aload_0         
	//   80  165:getfield        #391 <Field Rect mTempRect>
	//   81  168:getfield        #1167 <Field int Rect.right>
	//   82  171:iadd            
	//   83  172:putfield        #1167 <Field int Rect.right>
			rect.bottom = rect.bottom + mTempRect.bottom;
	//   84  175:aload           5
	//   85  177:aload           5
	//   86  179:getfield        #1176 <Field int Rect.bottom>
	//   87  182:aload_0         
	//   88  183:getfield        #391 <Field Rect mTempRect>
	//   89  186:getfield        #1176 <Field int Rect.bottom>
	//   90  189:iadd            
	//   91  190:putfield        #1176 <Field int Rect.bottom>
		}

	//   92  193:iload_2         
	//   93  194:iconst_1        
	//   94  195:iadd            
	//   95  196:istore_2        
	//*  96  197:goto            81
		layoutparams.mInsetsDirty = false;
	//   97  200:aload           4
	//   98  202:iconst_0        
	//   99  203:putfield        #1416 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		return rect;
	//  100  206:aload           5
	//  101  208:areturn         
	}

	public ItemDecoration getItemDecorationAt(int i)
	{
		int j = getItemDecorationCount();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1988 <Method int getItemDecorationCount()>
	//    2    4:istore_2        
		if(i >= 0 && i < j)
	//*   3    5:iload_1         
	//*   4    6:iflt            26
	//*   5    9:iload_1         
	//*   6   10:iload_2         
	//*   7   11:icmpge          26
		{
			return (ItemDecoration)mItemDecorations.get(i);
	//    8   14:aload_0         
	//    9   15:getfield        #403 <Field ArrayList mItemDecorations>
	//   10   18:iload_1         
	//   11   19:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   12   22:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   13   25:areturn         
		} else
		{
			StringBuilder stringbuilder = new StringBuilder();
	//   14   26:new             #809 <Class StringBuilder>
	//   15   29:dup             
	//   16   30:invokespecial   #810 <Method void StringBuilder()>
	//   17   33:astore_3        
			stringbuilder.append(i);
	//   18   34:aload_3         
	//   19   35:iload_1         
	//   20   36:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//   21   39:pop             
			stringbuilder.append(" is an invalid index for size ");
	//   22   40:aload_3         
	//   23   41:ldc2            #1990 <String " is an invalid index for size ">
	//   24   44:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   25   47:pop             
			stringbuilder.append(j);
	//   26   48:aload_3         
	//   27   49:iload_2         
	//   28   50:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//   29   53:pop             
			throw new IndexOutOfBoundsException(stringbuilder.toString());
	//   30   54:new             #1992 <Class IndexOutOfBoundsException>
	//   31   57:dup             
	//   32   58:aload_3         
	//   33   59:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   34   62:invokespecial   #1993 <Method void IndexOutOfBoundsException(String)>
	//   35   65:athrow          
		}
	}

	public int getItemDecorationCount()
	{
		return mItemDecorations.size();
	//    0    0:aload_0         
	//    1    1:getfield        #403 <Field ArrayList mItemDecorations>
	//    2    4:invokevirtual   #1097 <Method int ArrayList.size()>
	//    3    7:ireturn         
	}

	public LayoutManager getLayoutManager()
	{
		return mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:areturn         
	}

	public int getMaxFlingVelocity()
	{
		return mMaxFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #525 <Field int mMaxFlingVelocity>
	//    2    4:ireturn         
	}

	public int getMinFlingVelocity()
	{
		return mMinFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #520 <Field int mMinFlingVelocity>
	//    2    4:ireturn         
	}

	long getNanoTime()
	{
		if(ALLOW_THREAD_GAP_WORK)
	//*   0    0:getstatic       #336 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*   1    3:ifeq            10
			return System.nanoTime();
	//    2    6:invokestatic    #2003 <Method long System.nanoTime()>
	//    3    9:lreturn         
		else
			return 0L;
	//    4   10:lconst_0        
	//    5   11:lreturn         
	}

	public OnFlingListener getOnFlingListener()
	{
		return mOnFlingListener;
	//    0    0:aload_0         
	//    1    1:getfield        #1872 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    2    4:areturn         
	}

	public boolean getPreserveFocusAfterLayout()
	{
		return mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #434 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ireturn         
	}

	public RecycledViewPool getRecycledViewPool()
	{
		return mRecycler.getRecycledViewPool();
	//    0    0:aload_0         
	//    1    1:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//    2    4:invokevirtual   #2010 <Method RecyclerView$RecycledViewPool RecyclerView$Recycler.getRecycledViewPool()>
	//    3    7:areturn         
	}

	public int getScrollState()
	{
		return mScrollState;
	//    0    0:aload_0         
	//    1    1:getfield        #425 <Field int mScrollState>
	//    2    4:ireturn         
	}

	public boolean hasFixedSize()
	{
		return mHasFixedSize;
	//    0    0:aload_0         
	//    1    1:getfield        #2013 <Field boolean mHasFixedSize>
	//    2    4:ireturn         
	}

	public boolean hasNestedScrollingParent()
	{
		return getScrollingChildHelper().hasNestedScrollingParent();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2016 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent()>
	//    3    7:ireturn         
	}

	public boolean hasNestedScrollingParent(int i)
	{
		return getScrollingChildHelper().hasNestedScrollingParent(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2018 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent(int)>
	//    4    8:ireturn         
	}

	public boolean hasPendingAdapterUpdates()
	{
		return !mFirstLayoutComplete || mDataSetHasChangedAfterLayout || mAdapterHelper.hasPendingUpdates();
	//    0    0:aload_0         
	//    1    1:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//    2    4:ifeq            29
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
	//    5   11:ifne            29
	//    6   14:aload_0         
	//    7   15:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//    8   18:invokevirtual   #1607 <Method boolean AdapterHelper.hasPendingUpdates()>
	//    9   21:ifeq            27
	//   10   24:goto            29
	//   11   27:iconst_0        
	//   12   28:ireturn         
	//   13   29:iconst_1        
	//   14   30:ireturn         
	}

	void initAdapterManager()
	{
		mAdapterHelper = new AdapterHelper(new AdapterHelper.Callback() {

			void dispatchUpdate(AdapterHelper.UpdateOp updateop)
			{
				int i = updateop.cmd;
			//    0    0:aload_1         
			//    1    1:getfield        #28  <Field int AdapterHelper$UpdateOp.cmd>
			//    2    4:istore_2        
				if(i != 4)
			//*   3    5:iload_2         
			//*   4    6:iconst_4        
			//*   5    7:icmpeq          111
				{
					if(i != 8)
			//*   6   10:iload_2         
			//*   7   11:bipush          8
			//*   8   13:icmpeq          87
					{
						switch(i)
			//*   9   16:iload_2         
						{
			//*  10   17:tableswitch     1 2: default 40
			//			               1 64
			//			               2 41
						default:
							return;
			//   11   40:return          

						case 2: // '\002'
							mLayout.onItemsRemoved(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   12   41:aload_0         
			//   13   42:getfield        #17  <Field RecyclerView this$0>
			//   14   45:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   15   48:aload_0         
			//   16   49:getfield        #17  <Field RecyclerView this$0>
			//   17   52:aload_1         
			//   18   53:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   19   56:aload_1         
			//   20   57:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   21   60:invokevirtual   #44  <Method void RecyclerView$LayoutManager.onItemsRemoved(RecyclerView, int, int)>
							return;
			//   22   63:return          

						case 1: // '\001'
							mLayout.onItemsAdded(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   23   64:aload_0         
			//   24   65:getfield        #17  <Field RecyclerView this$0>
			//   25   68:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   26   71:aload_0         
			//   27   72:getfield        #17  <Field RecyclerView this$0>
			//   28   75:aload_1         
			//   29   76:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   30   79:aload_1         
			//   31   80:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   32   83:invokevirtual   #47  <Method void RecyclerView$LayoutManager.onItemsAdded(RecyclerView, int, int)>
							return;
			//   33   86:return          
						}
					} else
					{
						mLayout.onItemsMoved(RecyclerView.this, updateop.positionStart, updateop.itemCount, 1);
			//   34   87:aload_0         
			//   35   88:getfield        #17  <Field RecyclerView this$0>
			//   36   91:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   37   94:aload_0         
			//   38   95:getfield        #17  <Field RecyclerView this$0>
			//   39   98:aload_1         
			//   40   99:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   41  102:aload_1         
			//   42  103:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   43  106:iconst_1        
			//   44  107:invokevirtual   #51  <Method void RecyclerView$LayoutManager.onItemsMoved(RecyclerView, int, int, int)>
						return;
			//   45  110:return          
					}
				} else
				{
					mLayout.onItemsUpdated(RecyclerView.this, updateop.positionStart, updateop.itemCount, updateop.payload);
			//   46  111:aload_0         
			//   47  112:getfield        #17  <Field RecyclerView this$0>
			//   48  115:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   49  118:aload_0         
			//   50  119:getfield        #17  <Field RecyclerView this$0>
			//   51  122:aload_1         
			//   52  123:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   53  126:aload_1         
			//   54  127:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   55  130:aload_1         
			//   56  131:getfield        #55  <Field Object AdapterHelper$UpdateOp.payload>
			//   57  134:invokevirtual   #59  <Method void RecyclerView$LayoutManager.onItemsUpdated(RecyclerView, int, int, Object)>
					return;
			//   58  137:return          
				}
			}

			public ViewHolder findViewHolder(int i)
			{
				ViewHolder viewholder = findViewHolderForPosition(i, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iconst_1        
			//    4    6:invokevirtual   #65  <Method RecyclerView$ViewHolder RecyclerView.findViewHolderForPosition(int, boolean)>
			//    5    9:astore_2        
				if(viewholder == null)
			//*   6   10:aload_2         
			//*   7   11:ifnonnull       16
					return null;
			//    8   14:aconst_null     
			//    9   15:areturn         
				if(mChildHelper.isHidden(viewholder.itemView))
			//*  10   16:aload_0         
			//*  11   17:getfield        #17  <Field RecyclerView this$0>
			//*  12   20:getfield        #69  <Field ChildHelper RecyclerView.mChildHelper>
			//*  13   23:aload_2         
			//*  14   24:getfield        #75  <Field View RecyclerView$ViewHolder.itemView>
			//*  15   27:invokevirtual   #81  <Method boolean ChildHelper.isHidden(View)>
			//*  16   30:ifeq            35
					return null;
			//   17   33:aconst_null     
			//   18   34:areturn         
				else
					return viewholder;
			//   19   35:aload_2         
			//   20   36:areturn         
			}

			public void markViewHoldersUpdated(int i, int j, Object obj)
			{
				viewRangeUpdate(i, j, obj);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #86  <Method void RecyclerView.viewRangeUpdate(int, int, Object)>
				mItemsChanged = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #90  <Field boolean RecyclerView.mItemsChanged>
			//   10   18:return          
			}

			public void offsetPositionsForAdd(int i, int j)
			{
				offsetPositionRecordsForInsert(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #95  <Method void RecyclerView.offsetPositionRecordsForInsert(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForMove(int i, int j)
			{
				offsetPositionRecordsForMove(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #102 <Method void RecyclerView.offsetPositionRecordsForMove(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForRemovingInvisible(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_1        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				Object obj = ((Object) (RecyclerView.this));
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:astore_3        
				obj.mItemsAddedOrRemoved = true;
			//    9   15:aload_3         
			//   10   16:iconst_1        
			//   11   17:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
				obj = ((Object) (((RecyclerView) (obj)).mState));
			//   12   20:aload_3         
			//   13   21:getfield        #111 <Field RecyclerView$State RecyclerView.mState>
			//   14   24:astore_3        
				obj.mDeletedInvisibleItemCountSincePreviousLayout = ((State) (obj)).mDeletedInvisibleItemCountSincePreviousLayout + j;
			//   15   25:aload_3         
			//   16   26:aload_3         
			//   17   27:getfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   18   30:iload_2         
			//   19   31:iadd            
			//   20   32:putfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   21   35:return          
			}

			public void offsetPositionsForRemovingLaidOutOrNewView(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, false);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_0        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//   10   18:return          
			}

			public void onDispatchFirstPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			public void onDispatchSecondPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #1004 <Class AdapterHelper>
	//    2    4:dup             
	//    3    5:new             #20  <Class RecyclerView$6>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #2020 <Method void RecyclerView$6(RecyclerView)>
	//    7   13:invokespecial   #2023 <Method void AdapterHelper(AdapterHelper$Callback)>
	//    8   16:putfield        #1002 <Field AdapterHelper mAdapterHelper>
	//    9   19:return          
	}

	void initFastScroller(StateListDrawable statelistdrawable, Drawable drawable, StateListDrawable statelistdrawable1, Drawable drawable1)
	{
		if(statelistdrawable != null && drawable != null && statelistdrawable1 != null && drawable1 != null)
	//*   0    0:aload_1         
	//*   1    1:ifnull          65
	//*   2    4:aload_2         
	//*   3    5:ifnull          65
	//*   4    8:aload_3         
	//*   5    9:ifnull          65
	//*   6   12:aload           4
	//*   7   14:ifnull          65
		{
			Resources resources = getContext().getResources();
	//    8   17:aload_0         
	//    9   18:invokevirtual   #558 <Method Context getContext()>
	//   10   21:invokevirtual   #2027 <Method Resources Context.getResources()>
	//   11   24:astore          5
			new FastScroller(this, statelistdrawable, drawable, statelistdrawable1, drawable1, resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_default_thickness), resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_minimum_range), resources.getDimensionPixelOffset(android.support.v7.recyclerview.R.dimen.fastscroll_margin));
	//   12   26:new             #2029 <Class FastScroller>
	//   13   29:dup             
	//   14   30:aload_0         
	//   15   31:aload_1         
	//   16   32:aload_2         
	//   17   33:aload_3         
	//   18   34:aload           4
	//   19   36:aload           5
	//   20   38:getstatic       #2034 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_default_thickness>
	//   21   41:invokevirtual   #2039 <Method int Resources.getDimensionPixelSize(int)>
	//   22   44:aload           5
	//   23   46:getstatic       #2042 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_minimum_range>
	//   24   49:invokevirtual   #2039 <Method int Resources.getDimensionPixelSize(int)>
	//   25   52:aload           5
	//   26   54:getstatic       #2045 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_margin>
	//   27   57:invokevirtual   #2048 <Method int Resources.getDimensionPixelOffset(int)>
	//   28   60:invokespecial   #2051 <Method void FastScroller(RecyclerView, StateListDrawable, Drawable, StateListDrawable, Drawable, int, int, int)>
	//   29   63:pop             
			return;
	//   30   64:return          
		} else
		{
			statelistdrawable = ((StateListDrawable) (new StringBuilder()));
	//   31   65:new             #809 <Class StringBuilder>
	//   32   68:dup             
	//   33   69:invokespecial   #810 <Method void StringBuilder()>
	//   34   72:astore_1        
			((StringBuilder) (statelistdrawable)).append("Trying to set fast scroller without both required drawables.");
	//   35   73:aload_1         
	//   36   74:ldc2            #2053 <String "Trying to set fast scroller without both required drawables.">
	//   37   77:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   38   80:pop             
			((StringBuilder) (statelistdrawable)).append(exceptionLabel());
	//   39   81:aload_1         
	//   40   82:aload_0         
	//   41   83:invokevirtual   #1239 <Method String exceptionLabel()>
	//   42   86:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   43   89:pop             
			throw new IllegalArgumentException(((StringBuilder) (statelistdrawable)).toString());
	//   44   90:new             #1293 <Class IllegalArgumentException>
	//   45   93:dup             
	//   46   94:aload_1         
	//   47   95:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   48   98:invokespecial   #1294 <Method void IllegalArgumentException(String)>
	//   49  101:athrow          
		}
	}

	void invalidateGlows()
	{
		mBottomGlow = null;
	//    0    0:aload_0         
	//    1    1:aconst_null     
	//    2    2:putfield        #1366 <Field EdgeEffect mBottomGlow>
		mTopGlow = null;
	//    3    5:aload_0         
	//    4    6:aconst_null     
	//    5    7:putfield        #1361 <Field EdgeEffect mTopGlow>
		mRightGlow = null;
	//    6   10:aload_0         
	//    7   11:aconst_null     
	//    8   12:putfield        #1356 <Field EdgeEffect mRightGlow>
		mLeftGlow = null;
	//    9   15:aload_0         
	//   10   16:aconst_null     
	//   11   17:putfield        #1343 <Field EdgeEffect mLeftGlow>
	//   12   20:return          
	}

	public void invalidateItemDecorations()
	{
		if(mItemDecorations.size() == 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #403 <Field ArrayList mItemDecorations>
	//*   2    4:invokevirtual   #1097 <Method int ArrayList.size()>
	//*   3    7:ifne            11
			return;
	//    4   10:return          
		LayoutManager layoutmanager = mLayout;
	//    5   11:aload_0         
	//    6   12:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    7   15:astore_1        
		if(layoutmanager != null)
	//*   8   16:aload_1         
	//*   9   17:ifnull          27
			layoutmanager.assertNotInLayoutOrScroll("Cannot invalidate item decorations during a scroll or layout");
	//   10   20:aload_1         
	//   11   21:ldc2            #2057 <String "Cannot invalidate item decorations during a scroll or layout">
	//   12   24:invokevirtual   #1504 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		markItemDecorInsetsDirty();
	//   13   27:aload_0         
	//   14   28:invokevirtual   #1515 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   15   31:aload_0         
	//   16   32:invokevirtual   #1518 <Method void requestLayout()>
	//   17   35:return          
	}

	boolean isAccessibilityEnabled()
	{
		AccessibilityManager accessibilitymanager = mAccessibilityManager;
	//    0    0:aload_0         
	//    1    1:getfield        #568 <Field AccessibilityManager mAccessibilityManager>
	//    2    4:astore_1        
		return accessibilitymanager != null && accessibilitymanager.isEnabled();
	//    3    5:aload_1         
	//    4    6:ifnull          18
	//    5    9:aload_1         
	//    6   10:invokevirtual   #2060 <Method boolean AccessibilityManager.isEnabled()>
	//    7   13:ifeq            18
	//    8   16:iconst_1        
	//    9   17:ireturn         
	//   10   18:iconst_0        
	//   11   19:ireturn         
	}

	public boolean isAnimating()
	{
		ItemAnimator itemanimator = mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:astore_1        
		return itemanimator != null && itemanimator.isRunning();
	//    3    5:aload_1         
	//    4    6:ifnull          18
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1785 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//    7   13:ifeq            18
	//    8   16:iconst_1        
	//    9   17:ireturn         
	//   10   18:iconst_0        
	//   11   19:ireturn         
	}

	public boolean isAttachedToWindow()
	{
		return mIsAttached;
	//    0    0:aload_0         
	//    1    1:getfield        #2064 <Field boolean mIsAttached>
	//    2    4:ireturn         
	}

	public boolean isComputingLayout()
	{
		return mLayoutOrScrollCounter > 0;
	//    0    0:aload_0         
	//    1    1:getfield        #413 <Field int mLayoutOrScrollCounter>
	//    2    4:ifle            9
	//    3    7:iconst_1        
	//    4    8:ireturn         
	//    5    9:iconst_0        
	//    6   10:ireturn         
	}

	public boolean isLayoutFrozen()
	{
		return mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1865 <Field boolean mLayoutFrozen>
	//    2    4:ireturn         
	}

	public boolean isNestedScrollingEnabled()
	{
		return getScrollingChildHelper().isNestedScrollingEnabled();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2068 <Method boolean NestedScrollingChildHelper.isNestedScrollingEnabled()>
	//    3    7:ireturn         
	}

	void jumpToPositionForSmoothScroller(int i)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		if(layoutmanager == null)
	//*   3    5:aload_2         
	//*   4    6:ifnonnull       10
		{
			return;
	//    5    9:return          
		} else
		{
			layoutmanager.scrollToPosition(i);
	//    6   10:aload_2         
	//    7   11:iload_1         
	//    8   12:invokevirtual   #2072 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #649 <Method boolean awakenScrollBars()>
	//   11   19:pop             
			return;
	//   12   20:return          
		}
	}

	void markItemDecorInsetsDirty()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          40
			((LayoutParams)mChildHelper.getUnfilteredChildAt(i).getLayoutParams()).mInsetsDirty = true;
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   14   26:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   15   29:iconst_1        
	//   16   30:putfield        #1416 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>

	//   17   33:iload_1         
	//   18   34:iconst_1        
	//   19   35:iadd            
	//   20   36:istore_1        
	//*  21   37:goto            10
		mRecycler.markItemDecorInsetsDirty();
	//   22   40:aload_0         
	//   23   41:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   24   44:invokevirtual   #2073 <Method void RecyclerView$Recycler.markItemDecorInsetsDirty()>
	//   25   47:return          
	}

	void markKnownViewsInvalid()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          51
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:ifnull          44
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifne            44
				viewholder.addFlags(6);
	//   20   38:aload_3         
	//   21   39:bipush          6
	//   22   41:invokevirtual   #2077 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   23   44:iload_1         
	//   24   45:iconst_1        
	//   25   46:iadd            
	//   26   47:istore_1        
	//*  27   48:goto            10
		markItemDecorInsetsDirty();
	//   28   51:aload_0         
	//   29   52:invokevirtual   #1515 <Method void markItemDecorInsetsDirty()>
		mRecycler.markKnownViewsInvalid();
	//   30   55:aload_0         
	//   31   56:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   32   59:invokevirtual   #2079 <Method void RecyclerView$Recycler.markKnownViewsInvalid()>
	//   33   62:return          
	}

	public void offsetChildrenHorizontal(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetLeftAndRight(i);
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2084 <Method void View.offsetLeftAndRight(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	public void offsetChildrenVertical(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetTopAndBottom(i);
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2088 <Method void View.offsetTopAndBottom(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	void offsetPositionRecordsForInsert(int i, int j)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore_3        
	//*   6   11:iload_3         
	//*   7   12:iload           4
	//*   8   14:icmpge          74
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   17:aload_0         
	//   10   18:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   21:iload_3         
	//   12   22:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   25:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   28:astore          5
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i)
	//*  15   30:aload           5
	//*  16   32:ifnull          67
	//*  17   35:aload           5
	//*  18   37:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   40:ifne            67
	//*  20   43:aload           5
	//*  21   45:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   48:iload_1         
	//*  23   49:icmplt          67
			{
				viewholder.offsetPosition(j, false);
	//   24   52:aload           5
	//   25   54:iload_2         
	//   26   55:iconst_0        
	//   27   56:invokevirtual   #2093 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   28   59:aload_0         
	//   29   60:getfield        #445 <Field RecyclerView$State mState>
	//   30   63:iconst_1        
	//   31   64:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   32   67:iload_3         
	//   33   68:iconst_1        
	//   34   69:iadd            
	//   35   70:istore_3        
	//*  36   71:goto            11
		mRecycler.offsetPositionRecordsForInsert(i, j);
	//   37   74:aload_0         
	//   38   75:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   39   78:iload_1         
	//   40   79:iload_2         
	//   41   80:invokevirtual   #2095 <Method void RecyclerView$Recycler.offsetPositionRecordsForInsert(int, int)>
		requestLayout();
	//   42   83:aload_0         
	//   43   84:invokevirtual   #1518 <Method void requestLayout()>
	//   44   87:return          
	}

	void offsetPositionRecordsForMove(int i, int j)
	{
		int j1 = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          7
		int k;
		int l;
		byte byte0;
		if(i < j)
	//*   4    9:iload_1         
	//*   5   10:iload_2         
	//*   6   11:icmpge          25
		{
			k = i;
	//    7   14:iload_1         
	//    8   15:istore_3        
			l = j;
	//    9   16:iload_2         
	//   10   17:istore          4
			byte0 = -1;
	//   11   19:iconst_m1       
	//   12   20:istore          5
		} else
	//*  13   22:goto            33
		{
			l = i;
	//   14   25:iload_1         
	//   15   26:istore          4
			k = j;
	//   16   28:iload_2         
	//   17   29:istore_3        
			byte0 = 1;
	//   18   30:iconst_1        
	//   19   31:istore          5
		}
		for(int i1 = 0; i1 < j1; i1++)
	//*  20   33:iconst_0        
	//*  21   34:istore          6
	//*  22   36:iload           6
	//*  23   38:iload           7
	//*  24   40:icmpge          130
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i1));
	//   25   43:aload_0         
	//   26   44:getfield        #679 <Field ChildHelper mChildHelper>
	//   27   47:iload           6
	//   28   49:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   29   52:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   30   55:astore          8
			if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
	//*  31   57:aload           8
	//*  32   59:ifnull          121
	//*  33   62:aload           8
	//*  34   64:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  35   67:iload_3         
	//*  36   68:icmplt          121
	//*  37   71:aload           8
	//*  38   73:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  39   76:iload           4
	//*  40   78:icmple          84
				continue;
	//   41   81:goto            121
			if(viewholder.mPosition == i)
	//*  42   84:aload           8
	//*  43   86:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  44   89:iload_1         
	//*  45   90:icmpne          105
				viewholder.offsetPosition(j - i, false);
	//   46   93:aload           8
	//   47   95:iload_2         
	//   48   96:iload_1         
	//   49   97:isub            
	//   50   98:iconst_0        
	//   51   99:invokevirtual   #2093 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			else
	//*  52  102:goto            113
				viewholder.offsetPosition(((int) (byte0)), false);
	//   53  105:aload           8
	//   54  107:iload           5
	//   55  109:iconst_0        
	//   56  110:invokevirtual   #2093 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			mState.mStructureChanged = true;
	//   57  113:aload_0         
	//   58  114:getfield        #445 <Field RecyclerView$State mState>
	//   59  117:iconst_1        
	//   60  118:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
		}

	//   61  121:iload           6
	//   62  123:iconst_1        
	//   63  124:iadd            
	//   64  125:istore          6
	//*  65  127:goto            36
		mRecycler.offsetPositionRecordsForMove(i, j);
	//   66  130:aload_0         
	//   67  131:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   68  134:iload_1         
	//   69  135:iload_2         
	//   70  136:invokevirtual   #2098 <Method void RecyclerView$Recycler.offsetPositionRecordsForMove(int, int)>
		requestLayout();
	//   71  139:aload_0         
	//   72  140:invokevirtual   #1518 <Method void requestLayout()>
	//   73  143:return          
	}

	void offsetPositionRecordsForRemove(int i, int j, boolean flag)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   19:aload_0         
	//   10   20:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          6
			if(viewholder == null || viewholder.shouldIgnore())
				continue;
	//   15   33:aload           6
	//   16   35:ifnull          104
	//   17   38:aload           6
	//   18   40:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//   19   43:ifne            104
			if(viewholder.mPosition >= i + j)
	//*  20   46:aload           6
	//*  21   48:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   51:iload_1         
	//*  23   52:iload_2         
	//*  24   53:iadd            
	//*  25   54:icmplt          76
			{
				viewholder.offsetPosition(-j, flag);
	//   26   57:aload           6
	//   27   59:iload_2         
	//   28   60:ineg            
	//   29   61:iload_3         
	//   30   62:invokevirtual   #2093 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   31   65:aload_0         
	//   32   66:getfield        #445 <Field RecyclerView$State mState>
	//   33   69:iconst_1        
	//   34   70:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
				continue;
	//   35   73:goto            104
			}
			if(viewholder.mPosition >= i)
	//*  36   76:aload           6
	//*  37   78:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  38   81:iload_1         
	//*  39   82:icmplt          104
			{
				viewholder.flagRemovedAndOffsetPosition(i - 1, -j, flag);
	//   40   85:aload           6
	//   41   87:iload_1         
	//   42   88:iconst_1        
	//   43   89:isub            
	//   44   90:iload_2         
	//   45   91:ineg            
	//   46   92:iload_3         
	//   47   93:invokevirtual   #2103 <Method void RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int, int, boolean)>
				mState.mStructureChanged = true;
	//   48   96:aload_0         
	//   49   97:getfield        #445 <Field RecyclerView$State mState>
	//   50  100:iconst_1        
	//   51  101:putfield        #967 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   52  104:iload           4
	//   53  106:iconst_1        
	//   54  107:iadd            
	//   55  108:istore          4
	//*  56  110:goto            12
		mRecycler.offsetPositionRecordsForRemove(i, j, flag);
	//   57  113:aload_0         
	//   58  114:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:iload_3         
	//   62  120:invokevirtual   #2105 <Method void RecyclerView$Recycler.offsetPositionRecordsForRemove(int, int, boolean)>
		requestLayout();
	//   63  123:aload_0         
	//   64  124:invokevirtual   #1518 <Method void requestLayout()>
	//   65  127:return          
	}

	protected void onAttachedToWindow()
	{
label0:
		{
label1:
			{
				float f;
label2:
				{
					super.onAttachedToWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2108 <Method void ViewGroup.onAttachedToWindow()>
					mLayoutOrScrollCounter = 0;
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:putfield        #413 <Field int mLayoutOrScrollCounter>
					boolean flag = true;
	//    5    9:iconst_1        
	//    6   10:istore_2        
					mIsAttached = true;
	//    7   11:aload_0         
	//    8   12:iconst_1        
	//    9   13:putfield        #2064 <Field boolean mIsAttached>
					if(!mFirstLayoutComplete || isLayoutRequested())
	//*  10   16:aload_0         
	//*  11   17:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//*  12   20:ifeq            33
	//*  13   23:aload_0         
	//*  14   24:invokevirtual   #2111 <Method boolean isLayoutRequested()>
	//*  15   27:ifne            33
	//*  16   30:goto            35
						flag = false;
	//   17   33:iconst_0        
	//   18   34:istore_2        
					mFirstLayoutComplete = flag;
	//   19   35:aload_0         
	//   20   36:iload_2         
	//   21   37:putfield        #1336 <Field boolean mFirstLayoutComplete>
					Object obj = ((Object) (mLayout));
	//   22   40:aload_0         
	//   23   41:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   24   44:astore_3        
					if(obj != null)
	//*  25   45:aload_3         
	//*  26   46:ifnull          54
						((LayoutManager) (obj)).dispatchAttachedToWindow(this);
	//   27   49:aload_3         
	//   28   50:aload_0         
	//   29   51:invokevirtual   #2114 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
					mPostedAnimatorRunner = false;
	//   30   54:aload_0         
	//   31   55:iconst_0        
	//   32   56:putfield        #454 <Field boolean mPostedAnimatorRunner>
					if(!ALLOW_THREAD_GAP_WORK)
						break label0;
	//   33   59:getstatic       #336 <Field boolean ALLOW_THREAD_GAP_WORK>
	//   34   62:ifeq            163
					mGapWorker = (GapWorker)GapWorker.sGapWorker.get();
	//   35   65:aload_0         
	//   36   66:getstatic       #2120 <Field ThreadLocal GapWorker.sGapWorker>
	//   37   69:invokevirtual   #2123 <Method Object ThreadLocal.get()>
	//   38   72:checkcast       #2116 <Class GapWorker>
	//   39   75:putfield        #2125 <Field GapWorker mGapWorker>
					if(mGapWorker != null)
						break label1;
	//   40   78:aload_0         
	//   41   79:getfield        #2125 <Field GapWorker mGapWorker>
	//   42   82:ifnonnull       155
					mGapWorker = new GapWorker();
	//   43   85:aload_0         
	//   44   86:new             #2116 <Class GapWorker>
	//   45   89:dup             
	//   46   90:invokespecial   #2126 <Method void GapWorker()>
	//   47   93:putfield        #2125 <Field GapWorker mGapWorker>
					obj = ((Object) (ViewCompat.getDisplay(((View) (this)))));
	//   48   96:aload_0         
	//   49   97:invokestatic    #2130 <Method Display ViewCompat.getDisplay(View)>
	//   50  100:astore_3        
					if(!isInEditMode() && obj != null)
	//*  51  101:aload_0         
	//*  52  102:invokevirtual   #761 <Method boolean isInEditMode()>
	//*  53  105:ifne            128
	//*  54  108:aload_3         
	//*  55  109:ifnull          128
					{
						f = ((Display) (obj)).getRefreshRate();
	//   56  112:aload_3         
	//   57  113:invokevirtual   #2135 <Method float Display.getRefreshRate()>
	//   58  116:fstore_1        
						if(f >= 30F)
	//*  59  117:fload_1         
	//*  60  118:ldc2            #2136 <Float 30F>
	//*  61  121:fcmpl           
	//*  62  122:iflt            128
							break label2;
	//   63  125:goto            132
					}
					f = 60F;
	//   64  128:ldc2            #2137 <Float 60F>
	//   65  131:fstore_1        
				}
				mGapWorker.mFrameIntervalNs = (long)(1E+09F / f);
	//   66  132:aload_0         
	//   67  133:getfield        #2125 <Field GapWorker mGapWorker>
	//   68  136:ldc2            #2138 <Float 1E+09F>
	//   69  139:fload_1         
	//   70  140:fdiv            
	//   71  141:f2l             
	//   72  142:putfield        #2141 <Field long GapWorker.mFrameIntervalNs>
				GapWorker.sGapWorker.set(((Object) (mGapWorker)));
	//   73  145:getstatic       #2120 <Field ThreadLocal GapWorker.sGapWorker>
	//   74  148:aload_0         
	//   75  149:getfield        #2125 <Field GapWorker mGapWorker>
	//   76  152:invokevirtual   #2144 <Method void ThreadLocal.set(Object)>
			}
			mGapWorker.add(this);
	//   77  155:aload_0         
	//   78  156:getfield        #2125 <Field GapWorker mGapWorker>
	//   79  159:aload_0         
	//   80  160:invokevirtual   #2146 <Method void GapWorker.add(RecyclerView)>
		}
	//   81  163:return          
	}

	public void onChildAttachedToWindow(View view)
	{
	//    0    0:return          
	}

	public void onChildDetachedFromWindow(View view)
	{
	//    0    0:return          
	}

	protected void onDetachedFromWindow()
	{
		super.onDetachedFromWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2149 <Method void ViewGroup.onDetachedFromWindow()>
		Object obj = ((Object) (mItemAnimator));
	//    2    4:aload_0         
	//    3    5:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    4    8:astore_1        
		if(obj != null)
	//*   5    9:aload_1         
	//*   6   10:ifnull          17
			((ItemAnimator) (obj)).endAnimations();
	//    7   13:aload_1         
	//    8   14:invokevirtual   #2152 <Method void RecyclerView$ItemAnimator.endAnimations()>
		stopScroll();
	//    9   17:aload_0         
	//   10   18:invokevirtual   #2155 <Method void stopScroll()>
		mIsAttached = false;
	//   11   21:aload_0         
	//   12   22:iconst_0        
	//   13   23:putfield        #2064 <Field boolean mIsAttached>
		obj = ((Object) (mLayout));
	//   14   26:aload_0         
	//   15   27:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   16   30:astore_1        
		if(obj != null)
	//*  17   31:aload_1         
	//*  18   32:ifnull          44
			((LayoutManager) (obj)).dispatchDetachedFromWindow(this, mRecycler);
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:aload_0         
	//   22   38:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   23   41:invokevirtual   #2159 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		mPendingAccessibilityImportanceChange.clear();
	//   24   44:aload_0         
	//   25   45:getfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//   26   48:invokeinterface #1576 <Method void List.clear()>
		removeCallbacks(mItemAnimatorRunner);
	//   27   53:aload_0         
	//   28   54:aload_0         
	//   29   55:getfield        #469 <Field Runnable mItemAnimatorRunner>
	//   30   58:invokevirtual   #2163 <Method boolean removeCallbacks(Runnable)>
	//   31   61:pop             
		mViewInfoStore.onDetach();
	//   32   62:aload_0         
	//   33   63:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   34   66:invokevirtual   #2166 <Method void ViewInfoStore.onDetach()>
		if(ALLOW_THREAD_GAP_WORK)
	//*  35   69:getstatic       #336 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  36   72:ifeq            94
		{
			GapWorker gapworker = mGapWorker;
	//   37   75:aload_0         
	//   38   76:getfield        #2125 <Field GapWorker mGapWorker>
	//   39   79:astore_1        
			if(gapworker != null)
	//*  40   80:aload_1         
	//*  41   81:ifnull          94
			{
				gapworker.remove(this);
	//   42   84:aload_1         
	//   43   85:aload_0         
	//   44   86:invokevirtual   #2169 <Method void GapWorker.remove(RecyclerView)>
				mGapWorker = null;
	//   45   89:aload_0         
	//   46   90:aconst_null     
	//   47   91:putfield        #2125 <Field GapWorker mGapWorker>
			}
		}
	//   48   94:return          
	}

	public void onDraw(Canvas canvas)
	{
		super.onDraw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #2172 <Method void ViewGroup.onDraw(Canvas)>
		int j = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #403 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1097 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < j; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDraw(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #403 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #445 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #2174 <Method void RecyclerView$ItemDecoration.onDraw(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
	//   27   47:return          
	}

	void onEnterLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #413 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #413 <Field int mLayoutOrScrollCounter>
	//    6   10:return          
	}

	void onExitLayoutOrScroll()
	{
		onExitLayoutOrScroll(true);
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:invokevirtual   #2176 <Method void onExitLayoutOrScroll(boolean)>
	//    3    5:return          
	}

	void onExitLayoutOrScroll(boolean flag)
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter - 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #413 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:isub            
	//    5    7:putfield        #413 <Field int mLayoutOrScrollCounter>
		if(mLayoutOrScrollCounter < 1)
	//*   6   10:aload_0         
	//*   7   11:getfield        #413 <Field int mLayoutOrScrollCounter>
	//*   8   14:iconst_1        
	//*   9   15:icmpge          35
		{
			mLayoutOrScrollCounter = 0;
	//   10   18:aload_0         
	//   11   19:iconst_0        
	//   12   20:putfield        #413 <Field int mLayoutOrScrollCounter>
			if(flag)
	//*  13   23:iload_1         
	//*  14   24:ifeq            35
			{
				dispatchContentChangedIfNecessary();
	//   15   27:aload_0         
	//   16   28:invokespecial   #2178 <Method void dispatchContentChangedIfNecessary()>
				dispatchPendingImportantForAccessibilityChanges();
	//   17   31:aload_0         
	//   18   32:invokevirtual   #2180 <Method void dispatchPendingImportantForAccessibilityChanges()>
			}
		}
	//   19   35:return          
	}

	public boolean onGenericMotionEvent(MotionEvent motionevent)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayoutFrozen)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1865 <Field boolean mLayoutFrozen>
	//*   7   13:ifeq            18
			return false;
	//    8   16:iconst_0        
	//    9   17:ireturn         
		if(motionevent.getAction() == 8)
	//*  10   18:aload_1         
	//*  11   19:invokevirtual   #1088 <Method int MotionEvent.getAction()>
	//*  12   22:bipush          8
	//*  13   24:icmpne          178
		{
			float f;
			float f1;
			if((motionevent.getSource() & 2) != 0)
	//*  14   27:aload_1         
	//*  15   28:invokevirtual   #2184 <Method int MotionEvent.getSource()>
	//*  16   31:iconst_2        
	//*  17   32:iand            
	//*  18   33:ifeq            84
			{
				if(mLayout.canScrollVertically())
	//*  19   36:aload_0         
	//*  20   37:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  21   40:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  22   43:ifeq            57
					f1 = -motionevent.getAxisValue(9);
	//   23   46:aload_1         
	//   24   47:bipush          9
	//   25   49:invokevirtual   #2187 <Method float MotionEvent.getAxisValue(int)>
	//   26   52:fneg            
	//   27   53:fstore_3        
				else
	//*  28   54:goto            59
					f1 = 0.0F;
	//   29   57:fconst_0        
	//   30   58:fstore_3        
				if(mLayout.canScrollHorizontally())
	//*  31   59:aload_0         
	//*  32   60:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  33   63:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  34   66:ifeq            79
					f = motionevent.getAxisValue(10);
	//   35   69:aload_1         
	//   36   70:bipush          10
	//   37   72:invokevirtual   #2187 <Method float MotionEvent.getAxisValue(int)>
	//   38   75:fstore_2        
				else
	//*  39   76:goto            146
					f = 0.0F;
	//   40   79:fconst_0        
	//   41   80:fstore_2        
			} else
	//*  42   81:goto            146
			if((motionevent.getSource() & 0x400000) != 0)
	//*  43   84:aload_1         
	//*  44   85:invokevirtual   #2184 <Method int MotionEvent.getSource()>
	//*  45   88:ldc2            #2188 <Int 0x400000>
	//*  46   91:iand            
	//*  47   92:ifeq            142
			{
				f = motionevent.getAxisValue(26);
	//   48   95:aload_1         
	//   49   96:bipush          26
	//   50   98:invokevirtual   #2187 <Method float MotionEvent.getAxisValue(int)>
	//   51  101:fstore_2        
				if(mLayout.canScrollVertically())
	//*  52  102:aload_0         
	//*  53  103:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  54  106:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  55  109:ifeq            120
				{
					f1 = -f;
	//   56  112:fload_2         
	//   57  113:fneg            
	//   58  114:fstore_3        
					f = 0.0F;
	//   59  115:fconst_0        
	//   60  116:fstore_2        
				} else
	//*  61  117:goto            146
				if(mLayout.canScrollHorizontally())
	//*  62  120:aload_0         
	//*  63  121:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  64  124:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  65  127:ifeq            135
				{
					f1 = 0.0F;
	//   66  130:fconst_0        
	//   67  131:fstore_3        
				} else
	//*  68  132:goto            146
				{
					f1 = 0.0F;
	//   69  135:fconst_0        
	//   70  136:fstore_3        
					f = 0.0F;
	//   71  137:fconst_0        
	//   72  138:fstore_2        
				}
			} else
	//*  73  139:goto            146
			{
				f1 = 0.0F;
	//   74  142:fconst_0        
	//   75  143:fstore_3        
				f = 0.0F;
	//   76  144:fconst_0        
	//   77  145:fstore_2        
			}
			if(f1 != 0.0F || f != 0.0F)
	//*  78  146:fload_3         
	//*  79  147:fconst_0        
	//*  80  148:fcmpl           
	//*  81  149:ifne            158
	//*  82  152:fload_2         
	//*  83  153:fconst_0        
	//*  84  154:fcmpl           
	//*  85  155:ifeq            178
				scrollByInternal((int)(f * mScaledHorizontalScrollFactor), (int)(f1 * mScaledVerticalScrollFactor), motionevent);
	//   86  158:aload_0         
	//   87  159:fload_2         
	//   88  160:aload_0         
	//   89  161:getfield        #430 <Field float mScaledHorizontalScrollFactor>
	//   90  164:fmul            
	//   91  165:f2i             
	//   92  166:fload_3         
	//   93  167:aload_0         
	//   94  168:getfield        #432 <Field float mScaledVerticalScrollFactor>
	//   95  171:fmul            
	//   96  172:f2i             
	//   97  173:aload_1         
	//   98  174:invokevirtual   #2192 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   99  177:pop             
		}
		return false;
	//  100  178:iconst_0        
	//  101  179:ireturn         
	}

	public boolean onInterceptTouchEvent(MotionEvent motionevent)
	{
		boolean flag2 = mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1865 <Field boolean mLayoutFrozen>
	//    2    4:istore          7
		boolean flag1 = false;
	//    3    6:iconst_0        
	//    4    7:istore          6
		if(flag2)
	//*   5    9:iload           7
	//*   6   11:ifeq            16
			return false;
	//    7   14:iconst_0        
	//    8   15:ireturn         
		if(dispatchOnItemTouchIntercept(motionevent))
	//*   9   16:aload_0         
	//*  10   17:aload_1         
	//*  11   18:invokespecial   #2194 <Method boolean dispatchOnItemTouchIntercept(MotionEvent)>
	//*  12   21:ifeq            30
		{
			cancelTouch();
	//   13   24:aload_0         
	//   14   25:invokespecial   #2196 <Method void cancelTouch()>
			return true;
	//   15   28:iconst_1        
	//   16   29:ireturn         
		}
		LayoutManager layoutmanager = mLayout;
	//   17   30:aload_0         
	//   18   31:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   19   34:astore          9
		if(layoutmanager == null)
	//*  20   36:aload           9
	//*  21   38:ifnonnull       43
			return false;
	//   22   41:iconst_0        
	//   23   42:ireturn         
		flag2 = layoutmanager.canScrollHorizontally();
	//   24   43:aload           9
	//   25   45:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   26   48:istore          7
		boolean flag3 = mLayout.canScrollVertically();
	//   27   50:aload_0         
	//   28   51:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   29   54:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   30   57:istore          8
		if(mVelocityTracker == null)
	//*  31   59:aload_0         
	//*  32   60:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//*  33   63:ifnonnull       73
			mVelocityTracker = VelocityTracker.obtain();
	//   34   66:aload_0         
	//   35   67:invokestatic    #2199 <Method VelocityTracker VelocityTracker.obtain()>
	//   36   70:putfield        #1425 <Field VelocityTracker mVelocityTracker>
		mVelocityTracker.addMovement(motionevent);
	//   37   73:aload_0         
	//   38   74:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//   39   77:aload_1         
	//   40   78:invokevirtual   #2202 <Method void VelocityTracker.addMovement(MotionEvent)>
		int l = motionevent.getActionMasked();
	//   41   81:aload_1         
	//   42   82:invokevirtual   #2205 <Method int MotionEvent.getActionMasked()>
	//   43   85:istore_3        
		int i = motionevent.getActionIndex();
	//   44   86:aload_1         
	//   45   87:invokevirtual   #1299 <Method int MotionEvent.getActionIndex()>
	//   46   90:istore_2        
		switch(l)
	//*  47   91:iload_3         
		{
	//*  48   92:tableswitch     0 6: default 136
	//	               0 397
	//	               1 382
	//	               2 208
	//	               3 201
	//	               4 136
	//	               5 147
	//	               6 139
	//*  49  136:goto            524
		case 6: // '\006'
			onPointerUp(motionevent);
	//   50  139:aload_0         
	//   51  140:aload_1         
	//   52  141:invokespecial   #2207 <Method void onPointerUp(MotionEvent)>
			break;

	//*  53  144:goto            524
		case 5: // '\005'
			mScrollPointerId = motionevent.getPointerId(i);
	//   54  147:aload_0         
	//   55  148:aload_1         
	//   56  149:iload_2         
	//   57  150:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//   58  153:putfield        #427 <Field int mScrollPointerId>
			int i1 = (int)(motionevent.getX(i) + 0.5F);
	//   59  156:aload_1         
	//   60  157:iload_2         
	//   61  158:invokevirtual   #1307 <Method float MotionEvent.getX(int)>
	//   62  161:ldc2            #1308 <Float 0.5F>
	//   63  164:fadd            
	//   64  165:f2i             
	//   65  166:istore_3        
			mLastTouchX = i1;
	//   66  167:aload_0         
	//   67  168:iload_3         
	//   68  169:putfield        #1310 <Field int mLastTouchX>
			mInitialTouchX = i1;
	//   69  172:aload_0         
	//   70  173:iload_3         
	//   71  174:putfield        #1312 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//   72  177:aload_1         
	//   73  178:iload_2         
	//   74  179:invokevirtual   #1315 <Method float MotionEvent.getY(int)>
	//   75  182:ldc2            #1308 <Float 0.5F>
	//   76  185:fadd            
	//   77  186:f2i             
	//   78  187:istore_2        
			mLastTouchY = i;
	//   79  188:aload_0         
	//   80  189:iload_2         
	//   81  190:putfield        #1317 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   82  193:aload_0         
	//   83  194:iload_2         
	//   84  195:putfield        #1319 <Field int mInitialTouchY>
			break;

	//*  85  198:goto            524
		case 3: // '\003'
			cancelTouch();
	//   86  201:aload_0         
	//   87  202:invokespecial   #2196 <Method void cancelTouch()>
			break;

	//*  88  205:goto            524
		case 2: // '\002'
			int j1 = motionevent.findPointerIndex(mScrollPointerId);
	//   89  208:aload_1         
	//   90  209:aload_0         
	//   91  210:getfield        #427 <Field int mScrollPointerId>
	//   92  213:invokevirtual   #2210 <Method int MotionEvent.findPointerIndex(int)>
	//   93  216:istore_3        
			if(j1 < 0)
	//*  94  217:iload_3         
	//*  95  218:ifge            266
			{
				motionevent = ((MotionEvent) (new StringBuilder()));
	//   96  221:new             #809 <Class StringBuilder>
	//   97  224:dup             
	//   98  225:invokespecial   #810 <Method void StringBuilder()>
	//   99  228:astore_1        
				((StringBuilder) (motionevent)).append("Error processing scroll; pointer index for id ");
	//  100  229:aload_1         
	//  101  230:ldc2            #2212 <String "Error processing scroll; pointer index for id ">
	//  102  233:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  103  236:pop             
				((StringBuilder) (motionevent)).append(mScrollPointerId);
	//  104  237:aload_1         
	//  105  238:aload_0         
	//  106  239:getfield        #427 <Field int mScrollPointerId>
	//  107  242:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//  108  245:pop             
				((StringBuilder) (motionevent)).append(" not found. Did any MotionEvents get skipped?");
	//  109  246:aload_1         
	//  110  247:ldc2            #2214 <String " not found. Did any MotionEvents get skipped?">
	//  111  250:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  112  253:pop             
				Log.e("RecyclerView", ((StringBuilder) (motionevent)).toString());
	//  113  254:ldc1            #172 <String "RecyclerView">
	//  114  256:aload_1         
	//  115  257:invokevirtual   #824 <Method String StringBuilder.toString()>
	//  116  260:invokestatic    #1254 <Method int Log.e(String, String)>
	//  117  263:pop             
				return false;
	//  118  264:iconst_0        
	//  119  265:ireturn         
			}
			int j = (int)(motionevent.getX(j1) + 0.5F);
	//  120  266:aload_1         
	//  121  267:iload_3         
	//  122  268:invokevirtual   #1307 <Method float MotionEvent.getX(int)>
	//  123  271:ldc2            #1308 <Float 0.5F>
	//  124  274:fadd            
	//  125  275:f2i             
	//  126  276:istore_2        
			int i2 = (int)(motionevent.getY(j1) + 0.5F);
	//  127  277:aload_1         
	//  128  278:iload_3         
	//  129  279:invokevirtual   #1315 <Method float MotionEvent.getY(int)>
	//  130  282:ldc2            #1308 <Float 0.5F>
	//  131  285:fadd            
	//  132  286:f2i             
	//  133  287:istore          4
			if(mScrollState != 1)
	//* 134  289:aload_0         
	//* 135  290:getfield        #425 <Field int mScrollState>
	//* 136  293:iconst_1        
	//* 137  294:icmpeq          524
			{
				int k1 = mInitialTouchX;
	//  138  297:aload_0         
	//  139  298:getfield        #1312 <Field int mInitialTouchX>
	//  140  301:istore_3        
				int j2 = mInitialTouchY;
	//  141  302:aload_0         
	//  142  303:getfield        #1319 <Field int mInitialTouchY>
	//  143  306:istore          5
				if(flag2 && Math.abs(j - k1) > mTouchSlop)
	//* 144  308:iload           7
	//* 145  310:ifeq            336
	//* 146  313:iload_2         
	//* 147  314:iload_3         
	//* 148  315:isub            
	//* 149  316:invokestatic    #1868 <Method int Math.abs(int)>
	//* 150  319:aload_0         
	//* 151  320:getfield        #506 <Field int mTouchSlop>
	//* 152  323:icmple          336
				{
					mLastTouchX = j;
	//  153  326:aload_0         
	//  154  327:iload_2         
	//  155  328:putfield        #1310 <Field int mLastTouchX>
					j = 1;
	//  156  331:iconst_1        
	//  157  332:istore_2        
				} else
	//* 158  333:goto            338
				{
					j = 0;
	//  159  336:iconst_0        
	//  160  337:istore_2        
				}
				boolean flag = ((boolean) (j));
	//  161  338:iload_2         
	//  162  339:istore_3        
				if(flag3)
	//* 163  340:iload           8
	//* 164  342:ifeq            370
				{
					flag = ((boolean) (j));
	//  165  345:iload_2         
	//  166  346:istore_3        
					if(Math.abs(i2 - j2) > mTouchSlop)
	//* 167  347:iload           4
	//* 168  349:iload           5
	//* 169  351:isub            
	//* 170  352:invokestatic    #1868 <Method int Math.abs(int)>
	//* 171  355:aload_0         
	//* 172  356:getfield        #506 <Field int mTouchSlop>
	//* 173  359:icmple          370
					{
						mLastTouchY = i2;
	//  174  362:aload_0         
	//  175  363:iload           4
	//  176  365:putfield        #1317 <Field int mLastTouchY>
						flag = true;
	//  177  368:iconst_1        
	//  178  369:istore_3        
					}
				}
				if(flag)
	//* 179  370:iload_3         
	//* 180  371:ifeq            524
					setScrollState(1);
	//  181  374:aload_0         
	//  182  375:iconst_1        
	//  183  376:invokevirtual   #723 <Method void setScrollState(int)>
			}
			break;

	//* 184  379:goto            524
		case 1: // '\001'
			mVelocityTracker.clear();
	//  185  382:aload_0         
	//  186  383:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  187  386:invokevirtual   #1428 <Method void VelocityTracker.clear()>
			stopNestedScroll(0);
	//  188  389:aload_0         
	//  189  390:iconst_0        
	//  190  391:invokevirtual   #1431 <Method void stopNestedScroll(int)>
			break;

	//* 191  394:goto            524
		case 0: // '\0'
			if(mIgnoreMotionEventTillDown)
	//* 192  397:aload_0         
	//* 193  398:getfield        #2216 <Field boolean mIgnoreMotionEventTillDown>
	//* 194  401:ifeq            409
				mIgnoreMotionEventTillDown = false;
	//  195  404:aload_0         
	//  196  405:iconst_0        
	//  197  406:putfield        #2216 <Field boolean mIgnoreMotionEventTillDown>
			mScrollPointerId = motionevent.getPointerId(0);
	//  198  409:aload_0         
	//  199  410:aload_1         
	//  200  411:iconst_0        
	//  201  412:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//  202  415:putfield        #427 <Field int mScrollPointerId>
			int k = (int)(motionevent.getX() + 0.5F);
	//  203  418:aload_1         
	//  204  419:invokevirtual   #2218 <Method float MotionEvent.getX()>
	//  205  422:ldc2            #1308 <Float 0.5F>
	//  206  425:fadd            
	//  207  426:f2i             
	//  208  427:istore_2        
			mLastTouchX = k;
	//  209  428:aload_0         
	//  210  429:iload_2         
	//  211  430:putfield        #1310 <Field int mLastTouchX>
			mInitialTouchX = k;
	//  212  433:aload_0         
	//  213  434:iload_2         
	//  214  435:putfield        #1312 <Field int mInitialTouchX>
			k = (int)(motionevent.getY() + 0.5F);
	//  215  438:aload_1         
	//  216  439:invokevirtual   #2220 <Method float MotionEvent.getY()>
	//  217  442:ldc2            #1308 <Float 0.5F>
	//  218  445:fadd            
	//  219  446:f2i             
	//  220  447:istore_2        
			mLastTouchY = k;
	//  221  448:aload_0         
	//  222  449:iload_2         
	//  223  450:putfield        #1317 <Field int mLastTouchY>
			mInitialTouchY = k;
	//  224  453:aload_0         
	//  225  454:iload_2         
	//  226  455:putfield        #1319 <Field int mInitialTouchY>
			if(mScrollState == 2)
	//* 227  458:aload_0         
	//* 228  459:getfield        #425 <Field int mScrollState>
	//* 229  462:iconst_2        
	//* 230  463:icmpne          481
			{
				getParent().requestDisallowInterceptTouchEvent(true);
	//  231  466:aload_0         
	//  232  467:invokevirtual   #2221 <Method ViewParent getParent()>
	//  233  470:iconst_1        
	//  234  471:invokeinterface #2226 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
				setScrollState(1);
	//  235  476:aload_0         
	//  236  477:iconst_1        
	//  237  478:invokevirtual   #723 <Method void setScrollState(int)>
			}
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  238  481:aload_0         
	//  239  482:getfield        #462 <Field int[] mNestedOffsets>
	//  240  485:astore_1        
			motionevent[1] = 0;
	//  241  486:aload_1         
	//  242  487:iconst_1        
	//  243  488:iconst_0        
	//  244  489:iastore         
			motionevent[0] = 0;
	//  245  490:aload_1         
	//  246  491:iconst_0        
	//  247  492:iconst_0        
	//  248  493:iastore         
			if(flag2)
	//* 249  494:iload           7
	//* 250  496:ifeq            504
				k = 1;
	//  251  499:iconst_1        
	//  252  500:istore_2        
			else
	//* 253  501:goto            506
				k = 0;
	//  254  504:iconst_0        
	//  255  505:istore_2        
			int l1 = k;
	//  256  506:iload_2         
	//  257  507:istore_3        
			if(flag3)
	//* 258  508:iload           8
	//* 259  510:ifeq            517
				l1 = k | 2;
	//  260  513:iload_2         
	//  261  514:iconst_2        
	//  262  515:ior             
	//  263  516:istore_3        
			startNestedScroll(l1, 0);
	//  264  517:aload_0         
	//  265  518:iload_3         
	//  266  519:iconst_0        
	//  267  520:invokevirtual   #1878 <Method boolean startNestedScroll(int, int)>
	//  268  523:pop             
			break;
		}
		if(mScrollState == 1)
	//* 269  524:aload_0         
	//* 270  525:getfield        #425 <Field int mScrollState>
	//* 271  528:iconst_1        
	//* 272  529:icmpne          535
			flag1 = true;
	//  273  532:iconst_1        
	//  274  533:istore          6
		return flag1;
	//  275  535:iload           6
	//  276  537:ireturn         
	}

	protected void onLayout(boolean flag, int i, int j, int k, int l)
	{
		TraceCompat.beginSection("RV OnLayout");
	//    0    0:ldc1            #192 <String "RV OnLayout">
	//    1    2:invokestatic    #1615 <Method void TraceCompat.beginSection(String)>
		dispatchLayout();
	//    2    5:aload_0         
	//    3    6:invokevirtual   #1622 <Method void dispatchLayout()>
		TraceCompat.endSection();
	//    4    9:invokestatic    #1628 <Method void TraceCompat.endSection()>
		mFirstLayoutComplete = true;
	//    5   12:aload_0         
	//    6   13:iconst_1        
	//    7   14:putfield        #1336 <Field boolean mFirstLayoutComplete>
	//    8   17:return          
	}

	protected void onMeasure(int i, int j)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          8
		if(layoutmanager == null)
	//*   3    6:aload           8
	//*   4    8:ifnonnull       18
		{
			defaultOnMeasure(i, j);
	//    5   11:aload_0         
	//    6   12:iload_1         
	//    7   13:iload_2         
	//    8   14:invokevirtual   #2231 <Method void defaultOnMeasure(int, int)>
			return;
	//    9   17:return          
		}
		boolean flag2 = layoutmanager.isAutoMeasureEnabled();
	//   10   18:aload           8
	//   11   20:invokevirtual   #2234 <Method boolean RecyclerView$LayoutManager.isAutoMeasureEnabled()>
	//   12   23:istore          7
		boolean flag1 = false;
	//   13   25:iconst_0        
	//   14   26:istore          4
		if(flag2)
	//*  15   28:iload           7
	//*  16   30:ifeq            203
		{
			int k = android.view.View.MeasureSpec.getMode(i);
	//   17   33:iload_1         
	//   18   34:invokestatic    #2239 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   19   37:istore          5
			int l = android.view.View.MeasureSpec.getMode(j);
	//   20   39:iload_2         
	//   21   40:invokestatic    #2239 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   22   43:istore          6
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   23   45:aload_0         
	//   24   46:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   25   49:aload_0         
	//   26   50:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   27   53:aload_0         
	//   28   54:getfield        #445 <Field RecyclerView$State mState>
	//   29   57:iload_1         
	//   30   58:iload_2         
	//   31   59:invokevirtual   #2242 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			boolean flag = flag1;
	//   32   62:iload           4
	//   33   64:istore_3        
			if(k == 0x40000000)
	//*  34   65:iload           5
	//*  35   67:ldc2            #2243 <Int 0x40000000>
	//*  36   70:icmpne          86
			{
				flag = flag1;
	//   37   73:iload           4
	//   38   75:istore_3        
				if(l == 0x40000000)
	//*  39   76:iload           6
	//*  40   78:ldc2            #2243 <Int 0x40000000>
	//*  41   81:icmpne          86
					flag = true;
	//   42   84:iconst_1        
	//   43   85:istore_3        
			}
			if(!flag)
	//*  44   86:iload_3         
	//*  45   87:ifne            202
			{
				if(mAdapter == null)
	//*  46   90:aload_0         
	//*  47   91:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  48   94:ifnonnull       98
					return;
	//   49   97:return          
				if(mState.mLayoutStep == 1)
	//*  50   98:aload_0         
	//*  51   99:getfield        #445 <Field RecyclerView$State mState>
	//*  52  102:getfield        #999 <Field int RecyclerView$State.mLayoutStep>
	//*  53  105:iconst_1        
	//*  54  106:icmpne          113
					dispatchLayoutStep1();
	//   55  109:aload_0         
	//   56  110:invokespecial   #1679 <Method void dispatchLayoutStep1()>
				mLayout.setMeasureSpecs(i, j);
	//   57  113:aload_0         
	//   58  114:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:invokevirtual   #2246 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
				mState.mIsMeasuring = true;
	//   62  122:aload_0         
	//   63  123:getfield        #445 <Field RecyclerView$State mState>
	//   64  126:iconst_1        
	//   65  127:putfield        #877 <Field boolean RecyclerView$State.mIsMeasuring>
				dispatchLayoutStep2();
	//   66  130:aload_0         
	//   67  131:invokespecial   #1684 <Method void dispatchLayoutStep2()>
				mLayout.setMeasuredDimensionFromChildren(i, j);
	//   68  134:aload_0         
	//   69  135:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   70  138:iload_1         
	//   71  139:iload_2         
	//   72  140:invokevirtual   #2249 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
				if(mLayout.shouldMeasureTwice())
	//*  73  143:aload_0         
	//*  74  144:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  75  147:invokevirtual   #2252 <Method boolean RecyclerView$LayoutManager.shouldMeasureTwice()>
	//*  76  150:ifeq            391
				{
					mLayout.setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000));
	//   77  153:aload_0         
	//   78  154:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   79  157:aload_0         
	//   80  158:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//   81  161:ldc2            #2243 <Int 0x40000000>
	//   82  164:invokestatic    #2255 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   83  167:aload_0         
	//   84  168:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//   85  171:ldc2            #2243 <Int 0x40000000>
	//   86  174:invokestatic    #2255 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   87  177:invokevirtual   #2246 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
					mState.mIsMeasuring = true;
	//   88  180:aload_0         
	//   89  181:getfield        #445 <Field RecyclerView$State mState>
	//   90  184:iconst_1        
	//   91  185:putfield        #877 <Field boolean RecyclerView$State.mIsMeasuring>
					dispatchLayoutStep2();
	//   92  188:aload_0         
	//   93  189:invokespecial   #1684 <Method void dispatchLayoutStep2()>
					mLayout.setMeasuredDimensionFromChildren(i, j);
	//   94  192:aload_0         
	//   95  193:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   96  196:iload_1         
	//   97  197:iload_2         
	//   98  198:invokevirtual   #2249 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
					return;
	//   99  201:return          
				}
			} else
			{
				return;
	//  100  202:return          
			}
		} else
		{
			if(mHasFixedSize)
	//* 101  203:aload_0         
	//* 102  204:getfield        #2013 <Field boolean mHasFixedSize>
	//* 103  207:ifeq            228
			{
				mLayout.onMeasure(mRecycler, mState, i, j);
	//  104  210:aload_0         
	//  105  211:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  106  214:aload_0         
	//  107  215:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  108  218:aload_0         
	//  109  219:getfield        #445 <Field RecyclerView$State mState>
	//  110  222:iload_1         
	//  111  223:iload_2         
	//  112  224:invokevirtual   #2242 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
				return;
	//  113  227:return          
			}
			if(mAdapterUpdateDuringMeasure)
	//* 114  228:aload_0         
	//* 115  229:getfield        #2257 <Field boolean mAdapterUpdateDuringMeasure>
	//* 116  232:ifeq            300
			{
				startInterceptRequestLayout();
	//  117  235:aload_0         
	//  118  236:invokevirtual   #880 <Method void startInterceptRequestLayout()>
				onEnterLayoutOrScroll();
	//  119  239:aload_0         
	//  120  240:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
				processAdapterUpdatesAndSetAnimationFlags();
	//  121  243:aload_0         
	//  122  244:invokespecial   #889 <Method void processAdapterUpdatesAndSetAnimationFlags()>
				onExitLayoutOrScroll();
	//  123  247:aload_0         
	//  124  248:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
				if(mState.mRunPredictiveAnimations)
	//* 125  251:aload_0         
	//* 126  252:getfield        #445 <Field RecyclerView$State mState>
	//* 127  255:getfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 128  258:ifeq            272
				{
					mState.mInPreLayout = true;
	//  129  261:aload_0         
	//  130  262:getfield        #445 <Field RecyclerView$State mState>
	//  131  265:iconst_1        
	//  132  266:putfield        #904 <Field boolean RecyclerView$State.mInPreLayout>
				} else
	//* 133  269:goto            287
				{
					mAdapterHelper.consumeUpdatesInOnePass();
	//  134  272:aload_0         
	//  135  273:getfield        #1002 <Field AdapterHelper mAdapterHelper>
	//  136  276:invokevirtual   #1007 <Method void AdapterHelper.consumeUpdatesInOnePass()>
					mState.mInPreLayout = false;
	//  137  279:aload_0         
	//  138  280:getfield        #445 <Field RecyclerView$State mState>
	//  139  283:iconst_0        
	//  140  284:putfield        #904 <Field boolean RecyclerView$State.mInPreLayout>
				}
				mAdapterUpdateDuringMeasure = false;
	//  141  287:aload_0         
	//  142  288:iconst_0        
	//  143  289:putfield        #2257 <Field boolean mAdapterUpdateDuringMeasure>
				stopInterceptRequestLayout(false);
	//  144  292:aload_0         
	//  145  293:iconst_0        
	//  146  294:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
			} else
	//* 147  297:goto            323
			if(mState.mRunPredictiveAnimations)
	//* 148  300:aload_0         
	//* 149  301:getfield        #445 <Field RecyclerView$State mState>
	//* 150  304:getfield        #901 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 151  307:ifeq            323
			{
				setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());
	//  152  310:aload_0         
	//  153  311:aload_0         
	//  154  312:invokevirtual   #1796 <Method int getMeasuredWidth()>
	//  155  315:aload_0         
	//  156  316:invokevirtual   #1799 <Method int getMeasuredHeight()>
	//  157  319:invokevirtual   #655 <Method void setMeasuredDimension(int, int)>
				return;
	//  158  322:return          
			}
			Adapter adapter = mAdapter;
	//  159  323:aload_0         
	//  160  324:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//  161  327:astore          8
			if(adapter != null)
	//* 162  329:aload           8
	//* 163  331:ifnull          349
				mState.mItemCount = adapter.getItemCount();
	//  164  334:aload_0         
	//  165  335:getfield        #445 <Field RecyclerView$State mState>
	//  166  338:aload           8
	//  167  340:invokevirtual   #909 <Method int RecyclerView$Adapter.getItemCount()>
	//  168  343:putfield        #912 <Field int RecyclerView$State.mItemCount>
			else
	//* 169  346:goto            357
				mState.mItemCount = 0;
	//  170  349:aload_0         
	//  171  350:getfield        #445 <Field RecyclerView$State mState>
	//  172  353:iconst_0        
	//  173  354:putfield        #912 <Field int RecyclerView$State.mItemCount>
			startInterceptRequestLayout();
	//  174  357:aload_0         
	//  175  358:invokevirtual   #880 <Method void startInterceptRequestLayout()>
			mLayout.onMeasure(mRecycler, mState, i, j);
	//  176  361:aload_0         
	//  177  362:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//  178  365:aload_0         
	//  179  366:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  180  369:aload_0         
	//  181  370:getfield        #445 <Field RecyclerView$State mState>
	//  182  373:iload_1         
	//  183  374:iload_2         
	//  184  375:invokevirtual   #2242 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			stopInterceptRequestLayout(false);
	//  185  378:aload_0         
	//  186  379:iconst_0        
	//  187  380:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
			mState.mInPreLayout = false;
	//  188  383:aload_0         
	//  189  384:getfield        #445 <Field RecyclerView$State mState>
	//  190  387:iconst_0        
	//  191  388:putfield        #904 <Field boolean RecyclerView$State.mInPreLayout>
		}
	//  192  391:return          
	}

	protected boolean onRequestFocusInDescendants(int i, Rect rect)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		else
			return super.onRequestFocusInDescendants(i, rect);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:aload_2         
	//    8   12:invokespecial   #2261 <Method boolean ViewGroup.onRequestFocusInDescendants(int, Rect)>
	//    9   15:ireturn         
	}

	protected void onRestoreInstanceState(Parcelable parcelable)
	{
		if(!(parcelable instanceof SavedState))
	//*   0    0:aload_1         
	//*   1    1:instanceof      #107 <Class RecyclerView$SavedState>
	//*   2    4:ifne            13
		{
			super.onRestoreInstanceState(parcelable);
	//    3    7:aload_0         
	//    4    8:aload_1         
	//    5    9:invokespecial   #2265 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
			return;
	//    6   12:return          
		}
		mPendingSavedState = (SavedState)parcelable;
	//    7   13:aload_0         
	//    8   14:aload_1         
	//    9   15:checkcast       #107 <Class RecyclerView$SavedState>
	//   10   18:putfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
		super.onRestoreInstanceState(mPendingSavedState.getSuperState());
	//   11   21:aload_0         
	//   12   22:aload_0         
	//   13   23:getfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
	//   14   26:invokevirtual   #2269 <Method Parcelable RecyclerView$SavedState.getSuperState()>
	//   15   29:invokespecial   #2265 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
		if(mLayout != null && mPendingSavedState.mLayoutState != null)
	//*  16   32:aload_0         
	//*  17   33:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  18   36:ifnull          63
	//*  19   39:aload_0         
	//*  20   40:getfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
	//*  21   43:getfield        #2273 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//*  22   46:ifnull          63
			mLayout.onRestoreInstanceState(mPendingSavedState.mLayoutState);
	//   23   49:aload_0         
	//   24   50:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   25   53:aload_0         
	//   26   54:getfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
	//   27   57:getfield        #2273 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//   28   60:invokevirtual   #2274 <Method void RecyclerView$LayoutManager.onRestoreInstanceState(Parcelable)>
	//   29   63:return          
	}

	protected Parcelable onSaveInstanceState()
	{
		SavedState savedstate = new SavedState(super.onSaveInstanceState());
	//    0    0:new             #107 <Class RecyclerView$SavedState>
	//    1    3:dup             
	//    2    4:aload_0         
	//    3    5:invokespecial   #2277 <Method Parcelable ViewGroup.onSaveInstanceState()>
	//    4    8:invokespecial   #2279 <Method void RecyclerView$SavedState(Parcelable)>
	//    5   11:astore_1        
		Object obj = ((Object) (mPendingSavedState));
	//    6   12:aload_0         
	//    7   13:getfield        #1012 <Field RecyclerView$SavedState mPendingSavedState>
	//    8   16:astore_2        
		if(obj != null)
	//*   9   17:aload_2         
	//*  10   18:ifnull          28
		{
			savedstate.copyFrom(((SavedState) (obj)));
	//   11   21:aload_1         
	//   12   22:aload_2         
	//   13   23:invokevirtual   #2283 <Method void RecyclerView$SavedState.copyFrom(RecyclerView$SavedState)>
			return ((Parcelable) (savedstate));
	//   14   26:aload_1         
	//   15   27:areturn         
		}
		obj = ((Object) (mLayout));
	//   16   28:aload_0         
	//   17   29:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   18   32:astore_2        
		if(obj != null)
	//*  19   33:aload_2         
	//*  20   34:ifnull          47
		{
			savedstate.mLayoutState = ((LayoutManager) (obj)).onSaveInstanceState();
	//   21   37:aload_1         
	//   22   38:aload_2         
	//   23   39:invokevirtual   #2284 <Method Parcelable RecyclerView$LayoutManager.onSaveInstanceState()>
	//   24   42:putfield        #2273 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   25   45:aload_1         
	//   26   46:areturn         
		} else
		{
			savedstate.mLayoutState = null;
	//   27   47:aload_1         
	//   28   48:aconst_null     
	//   29   49:putfield        #2273 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   30   52:aload_1         
	//   31   53:areturn         
		}
	}

	public void onScrollStateChanged(int i)
	{
	//    0    0:return          
	}

	public void onScrolled(int i, int j)
	{
	//    0    0:return          
	}

	protected void onSizeChanged(int i, int j, int k, int l)
	{
		super.onSizeChanged(i, j, k, l);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:iload_3         
	//    4    4:iload           4
	//    5    6:invokespecial   #2287 <Method void ViewGroup.onSizeChanged(int, int, int, int)>
		if(i != k || j != l)
	//*   6    9:iload_1         
	//*   7   10:iload_3         
	//*   8   11:icmpne          20
	//*   9   14:iload_2         
	//*  10   15:iload           4
	//*  11   17:icmpeq          24
			invalidateGlows();
	//   12   20:aload_0         
	//   13   21:invokevirtual   #2289 <Method void invalidateGlows()>
	//   14   24:return          
	}

	public boolean onTouchEvent(MotionEvent motionevent)
	{
		int i;
		int j;
		boolean flag;
		boolean flag1;
		boolean flag2;
		Object obj;
		flag1 = mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1865 <Field boolean mLayoutFrozen>
	//    2    4:istore          14
		flag = false;
	//    3    6:iconst_0        
	//    4    7:istore          10
		if(flag1)
			break MISSING_BLOCK_LABEL_1012;
	//    5    9:iload           14
	//    6   11:ifne            1012
		if(mIgnoreMotionEventTillDown)
	//*   7   14:aload_0         
	//*   8   15:getfield        #2216 <Field boolean mIgnoreMotionEventTillDown>
	//*   9   18:ifeq            23
			return false;
	//   10   21:iconst_0        
	//   11   22:ireturn         
		if(dispatchOnItemTouch(motionevent))
	//*  12   23:aload_0         
	//*  13   24:aload_1         
	//*  14   25:invokespecial   #2291 <Method boolean dispatchOnItemTouch(MotionEvent)>
	//*  15   28:ifeq            37
		{
			cancelTouch();
	//   16   31:aload_0         
	//   17   32:invokespecial   #2196 <Method void cancelTouch()>
			return true;
	//   18   35:iconst_1        
	//   19   36:ireturn         
		}
		obj = ((Object) (mLayout));
	//   20   37:aload_0         
	//   21   38:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   22   41:astore          16
		if(obj == null)
	//*  23   43:aload           16
	//*  24   45:ifnonnull       50
			return false;
	//   25   48:iconst_0        
	//   26   49:ireturn         
		flag1 = ((LayoutManager) (obj)).canScrollHorizontally();
	//   27   50:aload           16
	//   28   52:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   29   55:istore          14
		flag2 = mLayout.canScrollVertically();
	//   30   57:aload_0         
	//   31   58:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   32   61:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   33   64:istore          15
		if(mVelocityTracker == null)
	//*  34   66:aload_0         
	//*  35   67:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//*  36   70:ifnonnull       80
			mVelocityTracker = VelocityTracker.obtain();
	//   37   73:aload_0         
	//   38   74:invokestatic    #2199 <Method VelocityTracker VelocityTracker.obtain()>
	//   39   77:putfield        #1425 <Field VelocityTracker mVelocityTracker>
		obj = ((Object) (MotionEvent.obtain(motionevent)));
	//   40   80:aload_1         
	//   41   81:invokestatic    #2294 <Method MotionEvent MotionEvent.obtain(MotionEvent)>
	//   42   84:astore          16
		j = motionevent.getActionMasked();
	//   43   86:aload_1         
	//   44   87:invokevirtual   #2205 <Method int MotionEvent.getActionMasked()>
	//   45   90:istore          5
		i = motionevent.getActionIndex();
	//   46   92:aload_1         
	//   47   93:invokevirtual   #1299 <Method int MotionEvent.getActionIndex()>
	//   48   96:istore          4
		if(j == 0)
	//*  49   98:iload           5
	//*  50  100:ifne            119
		{
			int ai[] = mNestedOffsets;
	//   51  103:aload_0         
	//   52  104:getfield        #462 <Field int[] mNestedOffsets>
	//   53  107:astore          17
			ai[1] = 0;
	//   54  109:aload           17
	//   55  111:iconst_1        
	//   56  112:iconst_0        
	//   57  113:iastore         
			ai[0] = 0;
	//   58  114:aload           17
	//   59  116:iconst_0        
	//   60  117:iconst_0        
	//   61  118:iastore         
		}
		int ai1[] = mNestedOffsets;
	//   62  119:aload_0         
	//   63  120:getfield        #462 <Field int[] mNestedOffsets>
	//   64  123:astore          17
		((MotionEvent) (obj)).offsetLocation(ai1[0], ai1[1]);
	//   65  125:aload           16
	//   66  127:aload           17
	//   67  129:iconst_0        
	//   68  130:iaload          
	//   69  131:i2f             
	//   70  132:aload           17
	//   71  134:iconst_1        
	//   72  135:iaload          
	//   73  136:i2f             
	//   74  137:invokevirtual   #2297 <Method void MotionEvent.offsetLocation(float, float)>
		j;
	//   75  140:iload           5
		JVM INSTR tableswitch 0 6: default 184
	//	               0 895
	//	               1 787
	//	               2 281
	//	               3 270
	//	               4 184
	//	               5 203
	//	               6 191;
	//   76  142:tableswitch     0 6: default 184
	//	               0 895
	//	               1 787
	//	               2 281
	//	               3 270
	//	               4 184
	//	               5 203
	//	               6 191
		   goto _L1 _L2 _L3 _L4 _L5 _L1 _L6 _L7
_L1:
		i = ((int) (flag));
	//   77  184:iload           10
	//   78  186:istore          4
		break; /* Loop/switch isn't completed */
	//   79  188:goto            991
_L7:
		onPointerUp(motionevent);
	//   80  191:aload_0         
	//   81  192:aload_1         
	//   82  193:invokespecial   #2207 <Method void onPointerUp(MotionEvent)>
		i = ((int) (flag));
	//   83  196:iload           10
	//   84  198:istore          4
		break; /* Loop/switch isn't completed */
	//   85  200:goto            991
_L6:
		mScrollPointerId = motionevent.getPointerId(i);
	//   86  203:aload_0         
	//   87  204:aload_1         
	//   88  205:iload           4
	//   89  207:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//   90  210:putfield        #427 <Field int mScrollPointerId>
		j = (int)(motionevent.getX(i) + 0.5F);
	//   91  213:aload_1         
	//   92  214:iload           4
	//   93  216:invokevirtual   #1307 <Method float MotionEvent.getX(int)>
	//   94  219:ldc2            #1308 <Float 0.5F>
	//   95  222:fadd            
	//   96  223:f2i             
	//   97  224:istore          5
		mLastTouchX = j;
	//   98  226:aload_0         
	//   99  227:iload           5
	//  100  229:putfield        #1310 <Field int mLastTouchX>
		mInitialTouchX = j;
	//  101  232:aload_0         
	//  102  233:iload           5
	//  103  235:putfield        #1312 <Field int mInitialTouchX>
		i = (int)(motionevent.getY(i) + 0.5F);
	//  104  238:aload_1         
	//  105  239:iload           4
	//  106  241:invokevirtual   #1315 <Method float MotionEvent.getY(int)>
	//  107  244:ldc2            #1308 <Float 0.5F>
	//  108  247:fadd            
	//  109  248:f2i             
	//  110  249:istore          4
		mLastTouchY = i;
	//  111  251:aload_0         
	//  112  252:iload           4
	//  113  254:putfield        #1317 <Field int mLastTouchY>
		mInitialTouchY = i;
	//  114  257:aload_0         
	//  115  258:iload           4
	//  116  260:putfield        #1319 <Field int mInitialTouchY>
		i = ((int) (flag));
	//  117  263:iload           10
	//  118  265:istore          4
		break; /* Loop/switch isn't completed */
	//  119  267:goto            991
_L5:
		cancelTouch();
	//  120  270:aload_0         
	//  121  271:invokespecial   #2196 <Method void cancelTouch()>
		i = ((int) (flag));
	//  122  274:iload           10
	//  123  276:istore          4
		break; /* Loop/switch isn't completed */
	//  124  278:goto            991
_L4:
		int i1;
		int j1;
		int i2;
		int j2;
		i = motionevent.findPointerIndex(mScrollPointerId);
	//  125  281:aload_1         
	//  126  282:aload_0         
	//  127  283:getfield        #427 <Field int mScrollPointerId>
	//  128  286:invokevirtual   #2210 <Method int MotionEvent.findPointerIndex(int)>
	//  129  289:istore          4
		if(i < 0)
	//* 130  291:iload           4
	//* 131  293:ifge            341
		{
			motionevent = ((MotionEvent) (new StringBuilder()));
	//  132  296:new             #809 <Class StringBuilder>
	//  133  299:dup             
	//  134  300:invokespecial   #810 <Method void StringBuilder()>
	//  135  303:astore_1        
			((StringBuilder) (motionevent)).append("Error processing scroll; pointer index for id ");
	//  136  304:aload_1         
	//  137  305:ldc2            #2212 <String "Error processing scroll; pointer index for id ">
	//  138  308:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  139  311:pop             
			((StringBuilder) (motionevent)).append(mScrollPointerId);
	//  140  312:aload_1         
	//  141  313:aload_0         
	//  142  314:getfield        #427 <Field int mScrollPointerId>
	//  143  317:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//  144  320:pop             
			((StringBuilder) (motionevent)).append(" not found. Did any MotionEvents get skipped?");
	//  145  321:aload_1         
	//  146  322:ldc2            #2214 <String " not found. Did any MotionEvents get skipped?">
	//  147  325:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//  148  328:pop             
			Log.e("RecyclerView", ((StringBuilder) (motionevent)).toString());
	//  149  329:ldc1            #172 <String "RecyclerView">
	//  150  331:aload_1         
	//  151  332:invokevirtual   #824 <Method String StringBuilder.toString()>
	//  152  335:invokestatic    #1254 <Method int Log.e(String, String)>
	//  153  338:pop             
			return false;
	//  154  339:iconst_0        
	//  155  340:ireturn         
		}
		i2 = (int)(motionevent.getX(i) + 0.5F);
	//  156  341:aload_1         
	//  157  342:iload           4
	//  158  344:invokevirtual   #1307 <Method float MotionEvent.getX(int)>
	//  159  347:ldc2            #1308 <Float 0.5F>
	//  160  350:fadd            
	//  161  351:f2i             
	//  162  352:istore          11
		j2 = (int)(motionevent.getY(i) + 0.5F);
	//  163  354:aload_1         
	//  164  355:iload           4
	//  165  357:invokevirtual   #1315 <Method float MotionEvent.getY(int)>
	//  166  360:ldc2            #1308 <Float 0.5F>
	//  167  363:fadd            
	//  168  364:f2i             
	//  169  365:istore          12
		j1 = mLastTouchX - i2;
	//  170  367:aload_0         
	//  171  368:getfield        #1310 <Field int mLastTouchX>
	//  172  371:iload           11
	//  173  373:isub            
	//  174  374:istore          7
		i1 = mLastTouchY - j2;
	//  175  376:aload_0         
	//  176  377:getfield        #1317 <Field int mLastTouchY>
	//  177  380:iload           12
	//  178  382:isub            
	//  179  383:istore          6
		j = j1;
	//  180  385:iload           7
	//  181  387:istore          5
		i = i1;
	//  182  389:iload           6
	//  183  391:istore          4
		if(dispatchNestedPreScroll(j1, i1, mScrollConsumed, mScrollOffset, 0))
	//* 184  393:aload_0         
	//* 185  394:iload           7
	//* 186  396:iload           6
	//* 187  398:aload_0         
	//* 188  399:getfield        #460 <Field int[] mScrollConsumed>
	//* 189  402:aload_0         
	//* 190  403:getfield        #458 <Field int[] mScrollOffset>
	//* 191  406:iconst_0        
	//* 192  407:invokevirtual   #2298 <Method boolean dispatchNestedPreScroll(int, int, int[], int[], int)>
	//* 193  410:ifeq            489
		{
			motionevent = ((MotionEvent) (mScrollConsumed));
	//  194  413:aload_0         
	//  195  414:getfield        #460 <Field int[] mScrollConsumed>
	//  196  417:astore_1        
			j = j1 - motionevent[0];
	//  197  418:iload           7
	//  198  420:aload_1         
	//  199  421:iconst_0        
	//  200  422:iaload          
	//  201  423:isub            
	//  202  424:istore          5
			i = i1 - motionevent[1];
	//  203  426:iload           6
	//  204  428:aload_1         
	//  205  429:iconst_1        
	//  206  430:iaload          
	//  207  431:isub            
	//  208  432:istore          4
			motionevent = ((MotionEvent) (mScrollOffset));
	//  209  434:aload_0         
	//  210  435:getfield        #458 <Field int[] mScrollOffset>
	//  211  438:astore_1        
			((MotionEvent) (obj)).offsetLocation(motionevent[0], motionevent[1]);
	//  212  439:aload           16
	//  213  441:aload_1         
	//  214  442:iconst_0        
	//  215  443:iaload          
	//  216  444:i2f             
	//  217  445:aload_1         
	//  218  446:iconst_1        
	//  219  447:iaload          
	//  220  448:i2f             
	//  221  449:invokevirtual   #2297 <Method void MotionEvent.offsetLocation(float, float)>
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  222  452:aload_0         
	//  223  453:getfield        #462 <Field int[] mNestedOffsets>
	//  224  456:astore_1        
			i1 = motionevent[0];
	//  225  457:aload_1         
	//  226  458:iconst_0        
	//  227  459:iaload          
	//  228  460:istore          6
			int ai2[] = mScrollOffset;
	//  229  462:aload_0         
	//  230  463:getfield        #458 <Field int[] mScrollOffset>
	//  231  466:astore          17
			motionevent[0] = i1 + ai2[0];
	//  232  468:aload_1         
	//  233  469:iconst_0        
	//  234  470:iload           6
	//  235  472:aload           17
	//  236  474:iconst_0        
	//  237  475:iaload          
	//  238  476:iadd            
	//  239  477:iastore         
			motionevent[1] = motionevent[1] + ai2[1];
	//  240  478:aload_1         
	//  241  479:iconst_1        
	//  242  480:aload_1         
	//  243  481:iconst_1        
	//  244  482:iaload          
	//  245  483:aload           17
	//  246  485:iconst_1        
	//  247  486:iaload          
	//  248  487:iadd            
	//  249  488:iastore         
		}
		i1 = j;
	//  250  489:iload           5
	//  251  491:istore          6
		j1 = i;
	//  252  493:iload           4
	//  253  495:istore          7
		if(mScrollState == 1) goto _L9; else goto _L8
	//  254  497:aload_0         
	//  255  498:getfield        #425 <Field int mScrollState>
	//  256  501:iconst_1        
	//  257  502:icmpeq          653
_L8:
		if(!flag1) goto _L11; else goto _L10
	//  258  505:iload           14
	//  259  507:ifeq            558
_L10:
		i1 = Math.abs(j);
	//  260  510:iload           5
	//  261  512:invokestatic    #1868 <Method int Math.abs(int)>
	//  262  515:istore          6
		j1 = mTouchSlop;
	//  263  517:aload_0         
	//  264  518:getfield        #506 <Field int mTouchSlop>
	//  265  521:istore          7
		if(i1 <= j1) goto _L11; else goto _L12
	//  266  523:iload           6
	//  267  525:iload           7
	//  268  527:icmple          558
_L12:
		if(j > 0)
	//* 269  530:iload           5
	//* 270  532:ifle            545
			j -= j1;
	//  271  535:iload           5
	//  272  537:iload           7
	//  273  539:isub            
	//  274  540:istore          5
		else
	//* 275  542:goto            552
			j += j1;
	//  276  545:iload           5
	//  277  547:iload           7
	//  278  549:iadd            
	//  279  550:istore          5
		i1 = 1;
	//  280  552:iconst_1        
	//  281  553:istore          6
		  goto _L13
	//* 282  555:goto            561
_L11:
		i1 = 0;
	//  283  558:iconst_0        
	//  284  559:istore          6
_L13:
		int l1 = i1;
	//  285  561:iload           6
	//  286  563:istore          9
		int k1 = i;
	//  287  565:iload           4
	//  288  567:istore          8
		if(flag2)
	//* 289  569:iload           15
	//* 290  571:ifeq            627
		{
			j1 = Math.abs(i);
	//  291  574:iload           4
	//  292  576:invokestatic    #1868 <Method int Math.abs(int)>
	//  293  579:istore          7
			int k2 = mTouchSlop;
	//  294  581:aload_0         
	//  295  582:getfield        #506 <Field int mTouchSlop>
	//  296  585:istore          13
			l1 = i1;
	//  297  587:iload           6
	//  298  589:istore          9
			k1 = i;
	//  299  591:iload           4
	//  300  593:istore          8
			if(j1 > k2)
	//* 301  595:iload           7
	//* 302  597:iload           13
	//* 303  599:icmple          627
			{
				if(i > 0)
	//* 304  602:iload           4
	//* 305  604:ifle            617
					k1 = i - k2;
	//  306  607:iload           4
	//  307  609:iload           13
	//  308  611:isub            
	//  309  612:istore          8
				else
	//* 310  614:goto            624
					k1 = i + k2;
	//  311  617:iload           4
	//  312  619:iload           13
	//  313  621:iadd            
	//  314  622:istore          8
				l1 = 1;
	//  315  624:iconst_1        
	//  316  625:istore          9
			}
		}
		i1 = j;
	//  317  627:iload           5
	//  318  629:istore          6
		j1 = k1;
	//  319  631:iload           8
	//  320  633:istore          7
		if(l1 != 0)
	//* 321  635:iload           9
	//* 322  637:ifeq            653
		{
			setScrollState(1);
	//  323  640:aload_0         
	//  324  641:iconst_1        
	//  325  642:invokevirtual   #723 <Method void setScrollState(int)>
			j1 = k1;
	//  326  645:iload           8
	//  327  647:istore          7
			i1 = j;
	//  328  649:iload           5
	//  329  651:istore          6
		}
_L9:
		i = ((int) (flag));
	//  330  653:iload           10
	//  331  655:istore          4
		if(mScrollState != 1)
			break; /* Loop/switch isn't completed */
	//  332  657:aload_0         
	//  333  658:getfield        #425 <Field int mScrollState>
	//  334  661:iconst_1        
	//  335  662:icmpne          991
		motionevent = ((MotionEvent) (mScrollOffset));
	//  336  665:aload_0         
	//  337  666:getfield        #458 <Field int[] mScrollOffset>
	//  338  669:astore_1        
		mLastTouchX = i2 - motionevent[0];
	//  339  670:aload_0         
	//  340  671:iload           11
	//  341  673:aload_1         
	//  342  674:iconst_0        
	//  343  675:iaload          
	//  344  676:isub            
	//  345  677:putfield        #1310 <Field int mLastTouchX>
		mLastTouchY = j2 - motionevent[1];
	//  346  680:aload_0         
	//  347  681:iload           12
	//  348  683:aload_1         
	//  349  684:iconst_1        
	//  350  685:iaload          
	//  351  686:isub            
	//  352  687:putfield        #1317 <Field int mLastTouchY>
		if(flag1)
	//* 353  690:iload           14
	//* 354  692:ifeq            702
			i = i1;
	//  355  695:iload           6
	//  356  697:istore          4
		else
	//* 357  699:goto            705
			i = 0;
	//  358  702:iconst_0        
	//  359  703:istore          4
		int k;
		if(flag2)
	//* 360  705:iload           15
	//* 361  707:ifeq            717
			k = j1;
	//  362  710:iload           7
	//  363  712:istore          5
		else
	//* 364  714:goto            720
			k = 0;
	//  365  717:iconst_0        
	//  366  718:istore          5
		if(scrollByInternal(i, k, ((MotionEvent) (obj))))
	//* 367  720:aload_0         
	//* 368  721:iload           4
	//* 369  723:iload           5
	//* 370  725:aload           16
	//* 371  727:invokevirtual   #2192 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//* 372  730:ifeq            743
			getParent().requestDisallowInterceptTouchEvent(true);
	//  373  733:aload_0         
	//  374  734:invokevirtual   #2221 <Method ViewParent getParent()>
	//  375  737:iconst_1        
	//  376  738:invokeinterface #2226 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
		i = ((int) (flag));
	//  377  743:iload           10
	//  378  745:istore          4
		if(mGapWorker == null)
			break; /* Loop/switch isn't completed */
	//  379  747:aload_0         
	//  380  748:getfield        #2125 <Field GapWorker mGapWorker>
	//  381  751:ifnull          991
		if(i1 == 0)
	//* 382  754:iload           6
	//* 383  756:ifne            768
		{
			i = ((int) (flag));
	//  384  759:iload           10
	//  385  761:istore          4
			if(j1 == 0)
				break; /* Loop/switch isn't completed */
	//  386  763:iload           7
	//  387  765:ifeq            991
		}
		mGapWorker.postFromTraversal(this, i1, j1);
	//  388  768:aload_0         
	//  389  769:getfield        #2125 <Field GapWorker mGapWorker>
	//  390  772:aload_0         
	//  391  773:iload           6
	//  392  775:iload           7
	//  393  777:invokevirtual   #2301 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
		i = ((int) (flag));
	//  394  780:iload           10
	//  395  782:istore          4
		break; /* Loop/switch isn't completed */
	//  396  784:goto            991
_L3:
		mVelocityTracker.addMovement(((MotionEvent) (obj)));
	//  397  787:aload_0         
	//  398  788:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  399  791:aload           16
	//  400  793:invokevirtual   #2202 <Method void VelocityTracker.addMovement(MotionEvent)>
		mVelocityTracker.computeCurrentVelocity(1000, mMaxFlingVelocity);
	//  401  796:aload_0         
	//  402  797:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  403  800:sipush          1000
	//  404  803:aload_0         
	//  405  804:getfield        #525 <Field int mMaxFlingVelocity>
	//  406  807:i2f             
	//  407  808:invokevirtual   #2305 <Method void VelocityTracker.computeCurrentVelocity(int, float)>
		float f;
		if(flag1)
	//* 408  811:iload           14
	//* 409  813:ifeq            832
			f = -mVelocityTracker.getXVelocity(mScrollPointerId);
	//  410  816:aload_0         
	//  411  817:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  412  820:aload_0         
	//  413  821:getfield        #427 <Field int mScrollPointerId>
	//  414  824:invokevirtual   #2308 <Method float VelocityTracker.getXVelocity(int)>
	//  415  827:fneg            
	//  416  828:fstore_2        
		else
	//* 417  829:goto            834
			f = 0.0F;
	//  418  832:fconst_0        
	//  419  833:fstore_2        
		float f1;
		if(flag2)
	//* 420  834:iload           15
	//* 421  836:ifeq            855
			f1 = -mVelocityTracker.getYVelocity(mScrollPointerId);
	//  422  839:aload_0         
	//  423  840:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  424  843:aload_0         
	//  425  844:getfield        #427 <Field int mScrollPointerId>
	//  426  847:invokevirtual   #2311 <Method float VelocityTracker.getYVelocity(int)>
	//  427  850:fneg            
	//  428  851:fstore_3        
		else
	//* 429  852:goto            857
			f1 = 0.0F;
	//  430  855:fconst_0        
	//  431  856:fstore_3        
		if(f == 0.0F && f1 == 0.0F || !fling((int)f, (int)f1))
	//* 432  857:fload_2         
	//* 433  858:fconst_0        
	//* 434  859:fcmpl           
	//* 435  860:ifne            869
	//* 436  863:fload_3         
	//* 437  864:fconst_0        
	//* 438  865:fcmpl           
	//* 439  866:ifeq            880
	//* 440  869:aload_0         
	//* 441  870:fload_2         
	//* 442  871:f2i             
	//* 443  872:fload_3         
	//* 444  873:f2i             
	//* 445  874:invokevirtual   #2313 <Method boolean fling(int, int)>
	//* 446  877:ifne            885
			setScrollState(0);
	//  447  880:aload_0         
	//  448  881:iconst_0        
	//  449  882:invokevirtual   #723 <Method void setScrollState(int)>
		resetTouch();
	//  450  885:aload_0         
	//  451  886:invokespecial   #720 <Method void resetTouch()>
		i = 1;
	//  452  889:iconst_1        
	//  453  890:istore          4
		break; /* Loop/switch isn't completed */
	//  454  892:goto            991
_L2:
		mScrollPointerId = motionevent.getPointerId(0);
	//  455  895:aload_0         
	//  456  896:aload_1         
	//  457  897:iconst_0        
	//  458  898:invokevirtual   #1303 <Method int MotionEvent.getPointerId(int)>
	//  459  901:putfield        #427 <Field int mScrollPointerId>
		i = (int)(motionevent.getX() + 0.5F);
	//  460  904:aload_1         
	//  461  905:invokevirtual   #2218 <Method float MotionEvent.getX()>
	//  462  908:ldc2            #1308 <Float 0.5F>
	//  463  911:fadd            
	//  464  912:f2i             
	//  465  913:istore          4
		mLastTouchX = i;
	//  466  915:aload_0         
	//  467  916:iload           4
	//  468  918:putfield        #1310 <Field int mLastTouchX>
		mInitialTouchX = i;
	//  469  921:aload_0         
	//  470  922:iload           4
	//  471  924:putfield        #1312 <Field int mInitialTouchX>
		i = (int)(motionevent.getY() + 0.5F);
	//  472  927:aload_1         
	//  473  928:invokevirtual   #2220 <Method float MotionEvent.getY()>
	//  474  931:ldc2            #1308 <Float 0.5F>
	//  475  934:fadd            
	//  476  935:f2i             
	//  477  936:istore          4
		mLastTouchY = i;
	//  478  938:aload_0         
	//  479  939:iload           4
	//  480  941:putfield        #1317 <Field int mLastTouchY>
		mInitialTouchY = i;
	//  481  944:aload_0         
	//  482  945:iload           4
	//  483  947:putfield        #1319 <Field int mInitialTouchY>
		if(flag1)
	//* 484  950:iload           14
	//* 485  952:ifeq            961
			i = 1;
	//  486  955:iconst_1        
	//  487  956:istore          4
		else
	//* 488  958:goto            964
			i = 0;
	//  489  961:iconst_0        
	//  490  962:istore          4
		int l = i;
	//  491  964:iload           4
	//  492  966:istore          5
		if(flag2)
	//* 493  968:iload           15
	//* 494  970:ifeq            979
			l = i | 2;
	//  495  973:iload           4
	//  496  975:iconst_2        
	//  497  976:ior             
	//  498  977:istore          5
		startNestedScroll(l, 0);
	//  499  979:aload_0         
	//  500  980:iload           5
	//  501  982:iconst_0        
	//  502  983:invokevirtual   #1878 <Method boolean startNestedScroll(int, int)>
	//  503  986:pop             
		i = ((int) (flag));
	//  504  987:iload           10
	//  505  989:istore          4
		if(i == 0)
	//* 506  991:iload           4
	//* 507  993:ifne            1005
			mVelocityTracker.addMovement(((MotionEvent) (obj)));
	//  508  996:aload_0         
	//  509  997:getfield        #1425 <Field VelocityTracker mVelocityTracker>
	//  510 1000:aload           16
	//  511 1002:invokevirtual   #2202 <Method void VelocityTracker.addMovement(MotionEvent)>
		((MotionEvent) (obj)).recycle();
	//  512 1005:aload           16
	//  513 1007:invokevirtual   #2314 <Method void MotionEvent.recycle()>
		return true;
	//  514 1010:iconst_1        
	//  515 1011:ireturn         
		return false;
	//  516 1012:iconst_0        
	//  517 1013:ireturn         
	}

	void postAnimationRunner()
	{
		if(!mPostedAnimatorRunner && mIsAttached)
	//*   0    0:aload_0         
	//*   1    1:getfield        #454 <Field boolean mPostedAnimatorRunner>
	//*   2    4:ifne            27
	//*   3    7:aload_0         
	//*   4    8:getfield        #2064 <Field boolean mIsAttached>
	//*   5   11:ifeq            27
		{
			ViewCompat.postOnAnimation(((View) (this)), mItemAnimatorRunner);
	//    6   14:aload_0         
	//    7   15:aload_0         
	//    8   16:getfield        #469 <Field Runnable mItemAnimatorRunner>
	//    9   19:invokestatic    #2318 <Method void ViewCompat.postOnAnimation(View, Runnable)>
			mPostedAnimatorRunner = true;
	//   10   22:aload_0         
	//   11   23:iconst_1        
	//   12   24:putfield        #454 <Field boolean mPostedAnimatorRunner>
		}
	//   13   27:return          
	}

	void processDataSetCompletelyChanged(boolean flag)
	{
		mDispatchItemsChangedEvent = flag | mDispatchItemsChangedEvent;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:getfield        #411 <Field boolean mDispatchItemsChangedEvent>
	//    4    6:ior             
	//    5    7:putfield        #411 <Field boolean mDispatchItemsChangedEvent>
		mDataSetHasChangedAfterLayout = true;
	//    6   10:aload_0         
	//    7   11:iconst_1        
	//    8   12:putfield        #409 <Field boolean mDataSetHasChangedAfterLayout>
		markKnownViewsInvalid();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #2320 <Method void markKnownViewsInvalid()>
	//   11   19:return          
	}

	void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo)
	{
		viewholder.setFlags(0, 8192);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:sipush          8192
	//    3    5:invokevirtual   #2323 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore())
	//*   4    8:aload_0         
	//*   5    9:getfield        #445 <Field RecyclerView$State mState>
	//*   6   12:getfield        #898 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*   7   15:ifeq            54
	//*   8   18:aload_1         
	//*   9   19:invokevirtual   #950 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  10   22:ifeq            54
	//*  11   25:aload_1         
	//*  12   26:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  13   29:ifne            54
	//*  14   32:aload_1         
	//*  15   33:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  16   36:ifne            54
		{
			long l = getChangedHolderKey(viewholder);
	//   17   39:aload_0         
	//   18   40:aload_1         
	//   19   41:invokevirtual   #957 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   20   44:lstore_3        
			mViewInfoStore.addToOldChangeHolders(l, viewholder);
	//   21   45:aload_0         
	//   22   46:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   23   49:lload_3         
	//   24   50:aload_1         
	//   25   51:invokevirtual   #961 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
		}
		mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//   26   54:aload_0         
	//   27   55:getfield        #383 <Field ViewInfoStore mViewInfoStore>
	//   28   58:aload_1         
	//   29   59:aload_2         
	//   30   60:invokevirtual   #947 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//   31   63:return          
	}

	void removeAndRecycleViews()
	{
		Object obj = ((Object) (mItemAnimator));
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:astore_1        
		if(obj != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          13
			((ItemAnimator) (obj)).endAnimations();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #2152 <Method void RecyclerView$ItemAnimator.endAnimations()>
		obj = ((Object) (mLayout));
	//    7   13:aload_0         
	//    8   14:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    9   17:astore_1        
		if(obj != null)
	//*  10   18:aload_1         
	//*  11   19:ifnull          41
		{
			((LayoutManager) (obj)).removeAndRecycleAllViews(mRecycler);
	//   12   22:aload_1         
	//   13   23:aload_0         
	//   14   24:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   15   27:invokevirtual   #2326 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   16   30:aload_0         
	//   17   31:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   18   34:aload_0         
	//   19   35:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   20   38:invokevirtual   #1048 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		}
		mRecycler.clear();
	//   21   41:aload_0         
	//   22   42:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   23   45:invokevirtual   #2327 <Method void RecyclerView$Recycler.clear()>
	//   24   48:return          
	}

	boolean removeAnimatingView(View view)
	{
		startInterceptRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #880 <Method void startInterceptRequestLayout()>
		boolean flag = mChildHelper.removeViewIfHidden(view);
	//    2    4:aload_0         
	//    3    5:getfield        #679 <Field ChildHelper mChildHelper>
	//    4    8:aload_1         
	//    5    9:invokevirtual   #2331 <Method boolean ChildHelper.removeViewIfHidden(View)>
	//    6   12:istore_2        
		if(flag)
	//*   7   13:iload_2         
	//*   8   14:ifeq            38
		{
			view = ((View) (getChildViewHolderInt(view)));
	//    9   17:aload_1         
	//   10   18:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   21:astore_1        
			mRecycler.unscrapView(((ViewHolder) (view)));
	//   12   22:aload_0         
	//   13   23:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   14   26:aload_1         
	//   15   27:invokevirtual   #674 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			mRecycler.recycleViewHolderInternal(((ViewHolder) (view)));
	//   16   30:aload_0         
	//   17   31:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   18   34:aload_1         
	//   19   35:invokevirtual   #2334 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
		}
		stopInterceptRequestLayout(flag ^ true);
	//   20   38:aload_0         
	//   21   39:iload_2         
	//   22   40:iconst_1        
	//   23   41:ixor            
	//   24   42:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
		return flag;
	//   25   45:iload_2         
	//   26   46:ireturn         
	}

	protected void removeDetachedView(View view, boolean flag)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		if(viewholder != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          76
			if(viewholder.isTmpDetached())
	//*   5    9:aload_3         
	//*   6   10:invokevirtual   #677 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*   7   13:ifeq            23
				viewholder.clearTmpDetachFlag();
	//    8   16:aload_3         
	//    9   17:invokevirtual   #2338 <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
			else
	//*  10   20:goto            76
			if(!viewholder.shouldIgnore())
	//*  11   23:aload_3         
	//*  12   24:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  13   27:ifeq            33
	//*  14   30:goto            76
			{
				view = ((View) (new StringBuilder()));
	//   15   33:new             #809 <Class StringBuilder>
	//   16   36:dup             
	//   17   37:invokespecial   #810 <Method void StringBuilder()>
	//   18   40:astore_1        
				((StringBuilder) (view)).append("Called removeDetachedView with a view which is not flagged as tmp detached.");
	//   19   41:aload_1         
	//   20   42:ldc2            #2340 <String "Called removeDetachedView with a view which is not flagged as tmp detached.">
	//   21   45:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   22   48:pop             
				((StringBuilder) (view)).append(((Object) (viewholder)));
	//   23   49:aload_1         
	//   24   50:aload_3         
	//   25   51:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   26   54:pop             
				((StringBuilder) (view)).append(exceptionLabel());
	//   27   55:aload_1         
	//   28   56:aload_0         
	//   29   57:invokevirtual   #1239 <Method String exceptionLabel()>
	//   30   60:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   31   63:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
	//   32   64:new             #1293 <Class IllegalArgumentException>
	//   33   67:dup             
	//   34   68:aload_1         
	//   35   69:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   36   72:invokespecial   #1294 <Method void IllegalArgumentException(String)>
	//   37   75:athrow          
			}
		view.clearAnimation();
	//   38   76:aload_1         
	//   39   77:invokevirtual   #2343 <Method void View.clearAnimation()>
		dispatchChildDetached(view);
	//   40   80:aload_0         
	//   41   81:aload_1         
	//   42   82:invokevirtual   #2345 <Method void dispatchChildDetached(View)>
		super.removeDetachedView(view, flag);
	//   43   85:aload_0         
	//   44   86:aload_1         
	//   45   87:iload_2         
	//   46   88:invokespecial   #2347 <Method void ViewGroup.removeDetachedView(View, boolean)>
	//   47   91:return          
	}

	public void removeItemDecoration(ItemDecoration itemdecoration)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_3        
		if(layoutmanager != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          16
			layoutmanager.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or layout");
	//    5    9:aload_3         
	//    6   10:ldc2            #2350 <String "Cannot remove item decoration during a scroll  or layout">
	//    7   13:invokevirtual   #1504 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		mItemDecorations.remove(((Object) (itemdecoration)));
	//    8   16:aload_0         
	//    9   17:getfield        #403 <Field ArrayList mItemDecorations>
	//   10   20:aload_1         
	//   11   21:invokevirtual   #2352 <Method boolean ArrayList.remove(Object)>
	//   12   24:pop             
		if(mItemDecorations.isEmpty())
	//*  13   25:aload_0         
	//*  14   26:getfield        #403 <Field ArrayList mItemDecorations>
	//*  15   29:invokevirtual   #1505 <Method boolean ArrayList.isEmpty()>
	//*  16   32:ifeq            55
		{
			boolean flag;
			if(getOverScrollMode() == 2)
	//*  17   35:aload_0         
	//*  18   36:invokevirtual   #528 <Method int getOverScrollMode()>
	//*  19   39:iconst_2        
	//*  20   40:icmpne          48
				flag = true;
	//   21   43:iconst_1        
	//   22   44:istore_2        
			else
	//*  23   45:goto            50
				flag = false;
	//   24   48:iconst_0        
	//   25   49:istore_2        
			setWillNotDraw(flag);
	//   26   50:aload_0         
	//   27   51:iload_2         
	//   28   52:invokevirtual   #531 <Method void setWillNotDraw(boolean)>
		}
		markItemDecorInsetsDirty();
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1515 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   31   59:aload_0         
	//   32   60:invokevirtual   #1518 <Method void requestLayout()>
	//   33   63:return          
	}

	public void removeItemDecorationAt(int i)
	{
		int j = getItemDecorationCount();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1988 <Method int getItemDecorationCount()>
	//    2    4:istore_2        
		if(i >= 0 && i < j)
	//*   3    5:iload_1         
	//*   4    6:iflt            24
	//*   5    9:iload_1         
	//*   6   10:iload_2         
	//*   7   11:icmpge          24
		{
			removeItemDecoration(getItemDecorationAt(i));
	//    8   14:aload_0         
	//    9   15:aload_0         
	//   10   16:iload_1         
	//   11   17:invokevirtual   #2355 <Method RecyclerView$ItemDecoration getItemDecorationAt(int)>
	//   12   20:invokevirtual   #2357 <Method void removeItemDecoration(RecyclerView$ItemDecoration)>
			return;
	//   13   23:return          
		} else
		{
			StringBuilder stringbuilder = new StringBuilder();
	//   14   24:new             #809 <Class StringBuilder>
	//   15   27:dup             
	//   16   28:invokespecial   #810 <Method void StringBuilder()>
	//   17   31:astore_3        
			stringbuilder.append(i);
	//   18   32:aload_3         
	//   19   33:iload_1         
	//   20   34:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//   21   37:pop             
			stringbuilder.append(" is an invalid index for size ");
	//   22   38:aload_3         
	//   23   39:ldc2            #1990 <String " is an invalid index for size ">
	//   24   42:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   25   45:pop             
			stringbuilder.append(j);
	//   26   46:aload_3         
	//   27   47:iload_2         
	//   28   48:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//   29   51:pop             
			throw new IndexOutOfBoundsException(stringbuilder.toString());
	//   30   52:new             #1992 <Class IndexOutOfBoundsException>
	//   31   55:dup             
	//   32   56:aload_3         
	//   33   57:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   34   60:invokespecial   #1993 <Method void IndexOutOfBoundsException(String)>
	//   35   63:athrow          
		}
	}

	public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		List list = mOnChildAttachStateListeners;
	//    0    0:aload_0         
	//    1    1:getfield        #1522 <Field List mOnChildAttachStateListeners>
	//    2    4:astore_2        
		if(list == null)
	//*   3    5:aload_2         
	//*   4    6:ifnonnull       10
		{
			return;
	//    5    9:return          
		} else
		{
			list.remove(((Object) (onchildattachstatechangelistener)));
	//    6   10:aload_2         
	//    7   11:aload_1         
	//    8   12:invokeinterface #2359 <Method boolean List.remove(Object)>
	//    9   17:pop             
			return;
	//   10   18:return          
		}
	}

	public void removeOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.remove(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2352 <Method boolean ArrayList.remove(Object)>
	//    4    8:pop             
		if(mActiveOnItemTouchListener == onitemtouchlistener)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   7   13:aload_1         
	//*   8   14:if_acmpne       22
			mActiveOnItemTouchListener = null;
	//    9   17:aload_0         
	//   10   18:aconst_null     
	//   11   19:putfield        #1090 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   12   22:return          
	}

	public void removeOnScrollListener(OnScrollListener onscrolllistener)
	{
		List list = mScrollListeners;
	//    0    0:aload_0         
	//    1    1:getfield        #1531 <Field List mScrollListeners>
	//    2    4:astore_2        
		if(list != null)
	//*   3    5:aload_2         
	//*   4    6:ifnull          17
			list.remove(((Object) (onscrolllistener)));
	//    5    9:aload_2         
	//    6   10:aload_1         
	//    7   11:invokeinterface #2359 <Method boolean List.remove(Object)>
	//    8   16:pop             
	//    9   17:return          
	}

	void repositionShadowingViews()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #915 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          118
		{
			View view = mChildHelper.getChildAt(i);
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #919 <Method View ChildHelper.getChildAt(int)>
	//   13   23:astore          5
			Object obj = ((Object) (getChildViewHolder(view)));
	//   14   25:aload_0         
	//   15   26:aload           5
	//   16   28:invokevirtual   #671 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   31:astore          6
			if(obj == null || ((ViewHolder) (obj)).mShadowingHolder == null)
				continue;
	//   18   33:aload           6
	//   19   35:ifnull          111
	//   20   38:aload           6
	//   21   40:getfield        #710 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   22   43:ifnull          111
			obj = ((Object) (((ViewHolder) (obj)).mShadowingHolder.itemView));
	//   23   46:aload           6
	//   24   48:getfield        #710 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   25   51:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   26   54:astore          6
			int k = view.getLeft();
	//   27   56:aload           5
	//   28   58:invokevirtual   #1146 <Method int View.getLeft()>
	//   29   61:istore_3        
			int l = view.getTop();
	//   30   62:aload           5
	//   31   64:invokevirtual   #1155 <Method int View.getTop()>
	//   32   67:istore          4
			if(k != ((View) (obj)).getLeft() || l != ((View) (obj)).getTop())
	//*  33   69:iload_3         
	//*  34   70:aload           6
	//*  35   72:invokevirtual   #1146 <Method int View.getLeft()>
	//*  36   75:icmpne          88
	//*  37   78:iload           4
	//*  38   80:aload           6
	//*  39   82:invokevirtual   #1155 <Method int View.getTop()>
	//*  40   85:icmpeq          111
				((View) (obj)).layout(k, l, ((View) (obj)).getWidth() + k, ((View) (obj)).getHeight() + l);
	//   41   88:aload           6
	//   42   90:iload_3         
	//   43   91:iload           4
	//   44   93:aload           6
	//   45   95:invokevirtual   #1277 <Method int View.getWidth()>
	//   46   98:iload_3         
	//   47   99:iadd            
	//   48  100:aload           6
	//   49  102:invokevirtual   #1280 <Method int View.getHeight()>
	//   50  105:iload           4
	//   51  107:iadd            
	//   52  108:invokevirtual   #2365 <Method void View.layout(int, int, int, int)>
		}

	//   53  111:iload_1         
	//   54  112:iconst_1        
	//   55  113:iadd            
	//   56  114:istore_1        
	//*  57  115:goto            10
	//   58  118:return          
	}

	public void requestChildFocus(View view, View view1)
	{
		if(!mLayout.onRequestChildFocus(this, mState, view, view1) && view1 != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:aload_0         
	//*   3    5:aload_0         
	//*   4    6:getfield        #445 <Field RecyclerView$State mState>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:invokevirtual   #2370 <Method boolean RecyclerView$LayoutManager.onRequestChildFocus(RecyclerView, RecyclerView$State, View, View)>
	//*   8   14:ifne            27
	//*   9   17:aload_2         
	//*  10   18:ifnull          27
			requestChildOnScreen(view, view1);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:aload_2         
	//   14   24:invokespecial   #1908 <Method void requestChildOnScreen(View, View)>
		super.requestChildFocus(view, view1);
	//   15   27:aload_0         
	//   16   28:aload_1         
	//   17   29:aload_2         
	//   18   30:invokespecial   #2372 <Method void ViewGroup.requestChildFocus(View, View)>
	//   19   33:return          
	}

	public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean flag)
	{
		return mLayout.requestChildRectangleOnScreen(this, view, rect, flag);
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_0         
	//    3    5:aload_1         
	//    4    6:aload_2         
	//    5    7:iload_3         
	//    6    8:invokevirtual   #2376 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean)>
	//    7   11:ireturn         
	}

	public void requestDisallowInterceptTouchEvent(boolean flag)
	{
		int j = mOnItemTouchListeners.size();
	//    0    0:aload_0         
	//    1    1:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//    2    4:invokevirtual   #1097 <Method int ArrayList.size()>
	//    3    7:istore_3        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          39
			((OnItemTouchListener)mOnItemTouchListeners.get(i)).onRequestDisallowInterceptTouchEvent(flag);
	//    9   15:aload_0         
	//   10   16:getfield        #405 <Field ArrayList mOnItemTouchListeners>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #1100 <Method Object ArrayList.get(int)>
	//   13   23:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   14   26:iload_1         
	//   15   27:invokeinterface #2379 <Method void RecyclerView$OnItemTouchListener.onRequestDisallowInterceptTouchEvent(boolean)>

	//   16   32:iload_2         
	//   17   33:iconst_1        
	//   18   34:iadd            
	//   19   35:istore_2        
	//*  20   36:goto            10
		super.requestDisallowInterceptTouchEvent(flag);
	//   21   39:aload_0         
	//   22   40:iload_1         
	//   23   41:invokespecial   #2380 <Method void ViewGroup.requestDisallowInterceptTouchEvent(boolean)>
	//   24   44:return          
	}

	public void requestLayout()
	{
		if(mInterceptRequestLayoutDepth == 0 && !mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//*   2    4:ifne            19
	//*   3    7:aload_0         
	//*   4    8:getfield        #1865 <Field boolean mLayoutFrozen>
	//*   5   11:ifne            19
		{
			super.requestLayout();
	//    6   14:aload_0         
	//    7   15:invokespecial   #2381 <Method void ViewGroup.requestLayout()>
			return;
	//    8   18:return          
		} else
		{
			mLayoutWasDefered = true;
	//    9   19:aload_0         
	//   10   20:iconst_1        
	//   11   21:putfield        #1617 <Field boolean mLayoutWasDefered>
			return;
	//   12   24:return          
		}
	}

	void saveOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.saveOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #2384 <Method void RecyclerView$ViewHolder.saveOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
	//   25   45:return          
	}

	public void scrollBy(int i, int j)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          5
		if(layoutmanager == null)
	//*   3    6:aload           5
	//*   4    8:ifnonnull       21
		{
			Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    5   11:ldc1            #172 <String "RecyclerView">
	//    6   13:ldc2            #2387 <String "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    7   16:invokestatic    #1254 <Method int Log.e(String, String)>
	//    8   19:pop             
			return;
	//    9   20:return          
		}
		if(mLayoutFrozen)
	//*  10   21:aload_0         
	//*  11   22:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  12   25:ifeq            29
			return;
	//   13   28:return          
		boolean flag = layoutmanager.canScrollHorizontally();
	//   14   29:aload           5
	//   15   31:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   16   34:istore_3        
		boolean flag1 = mLayout.canScrollVertically();
	//   17   35:aload_0         
	//   18   36:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   19   39:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   20   42:istore          4
		if(flag || flag1)
	//*  21   44:iload_3         
	//*  22   45:ifne            53
	//*  23   48:iload           4
	//*  24   50:ifeq            80
		{
			if(!flag)
	//*  25   53:iload_3         
	//*  26   54:ifeq            60
	//*  27   57:goto            62
				i = 0;
	//   28   60:iconst_0        
	//   29   61:istore_1        
			if(!flag1)
	//*  30   62:iload           4
	//*  31   64:ifeq            70
	//*  32   67:goto            72
				j = 0;
	//   33   70:iconst_0        
	//   34   71:istore_2        
			scrollByInternal(i, j, ((MotionEvent) (null)));
	//   35   72:aload_0         
	//   36   73:iload_1         
	//   37   74:iload_2         
	//   38   75:aconst_null     
	//   39   76:invokevirtual   #2192 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   40   79:pop             
		}
	//   41   80:return          
	}

	boolean scrollByInternal(int i, int j, MotionEvent motionevent)
	{
		consumePendingUpdateOperations();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1900 <Method void consumePendingUpdateOperations()>
		Adapter adapter = mAdapter;
	//    2    4:aload_0         
	//    3    5:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//    4    8:astore          9
		boolean flag = false;
	//    5   10:iconst_0        
	//    6   11:istore          8
		int k;
		int l;
		int i1;
		int j1;
		if(adapter != null)
	//*   7   13:aload           9
	//*   8   15:ifnull          69
		{
			scrollStep(i, j, mScrollStepConsumed);
	//    9   18:aload_0         
	//   10   19:iload_1         
	//   11   20:iload_2         
	//   12   21:aload_0         
	//   13   22:getfield        #464 <Field int[] mScrollStepConsumed>
	//   14   25:invokevirtual   #2391 <Method void scrollStep(int, int, int[])>
			int ai[] = mScrollStepConsumed;
	//   15   28:aload_0         
	//   16   29:getfield        #464 <Field int[] mScrollStepConsumed>
	//   17   32:astore          9
			i1 = ai[0];
	//   18   34:aload           9
	//   19   36:iconst_0        
	//   20   37:iaload          
	//   21   38:istore          6
			j1 = ai[1];
	//   22   40:aload           9
	//   23   42:iconst_1        
	//   24   43:iaload          
	//   25   44:istore          7
			l = j1;
	//   26   46:iload           7
	//   27   48:istore          5
			k = i1;
	//   28   50:iload           6
	//   29   52:istore          4
			i1 = i - i1;
	//   30   54:iload_1         
	//   31   55:iload           6
	//   32   57:isub            
	//   33   58:istore          6
			j1 = j - j1;
	//   34   60:iload_2         
	//   35   61:iload           7
	//   36   63:isub            
	//   37   64:istore          7
		} else
	//*  38   66:goto            81
		{
			l = 0;
	//   39   69:iconst_0        
	//   40   70:istore          5
			i1 = 0;
	//   41   72:iconst_0        
	//   42   73:istore          6
			j1 = 0;
	//   43   75:iconst_0        
	//   44   76:istore          7
			k = 0;
	//   45   78:iconst_0        
	//   46   79:istore          4
		}
		if(!mItemDecorations.isEmpty())
	//*  47   81:aload_0         
	//*  48   82:getfield        #403 <Field ArrayList mItemDecorations>
	//*  49   85:invokevirtual   #1505 <Method boolean ArrayList.isEmpty()>
	//*  50   88:ifne            95
			invalidate();
	//   51   91:aload_0         
	//   52   92:invokevirtual   #2394 <Method void invalidate()>
		if(dispatchNestedScroll(k, l, i1, j1, mScrollOffset, 0))
	//*  53   95:aload_0         
	//*  54   96:iload           4
	//*  55   98:iload           5
	//*  56  100:iload           6
	//*  57  102:iload           7
	//*  58  104:aload_0         
	//*  59  105:getfield        #458 <Field int[] mScrollOffset>
	//*  60  108:iconst_0        
	//*  61  109:invokevirtual   #2395 <Method boolean dispatchNestedScroll(int, int, int, int, int[], int)>
	//*  62  112:ifeq            205
		{
			i = mLastTouchX;
	//   63  115:aload_0         
	//   64  116:getfield        #1310 <Field int mLastTouchX>
	//   65  119:istore_1        
			int ai1[] = mScrollOffset;
	//   66  120:aload_0         
	//   67  121:getfield        #458 <Field int[] mScrollOffset>
	//   68  124:astore          9
			mLastTouchX = i - ai1[0];
	//   69  126:aload_0         
	//   70  127:iload_1         
	//   71  128:aload           9
	//   72  130:iconst_0        
	//   73  131:iaload          
	//   74  132:isub            
	//   75  133:putfield        #1310 <Field int mLastTouchX>
			mLastTouchY = mLastTouchY - ai1[1];
	//   76  136:aload_0         
	//   77  137:aload_0         
	//   78  138:getfield        #1317 <Field int mLastTouchY>
	//   79  141:aload           9
	//   80  143:iconst_1        
	//   81  144:iaload          
	//   82  145:isub            
	//   83  146:putfield        #1317 <Field int mLastTouchY>
			if(motionevent != null)
	//*  84  149:aload_3         
	//*  85  150:ifnull          167
				motionevent.offsetLocation(ai1[0], ai1[1]);
	//   86  153:aload_3         
	//   87  154:aload           9
	//   88  156:iconst_0        
	//   89  157:iaload          
	//   90  158:i2f             
	//   91  159:aload           9
	//   92  161:iconst_1        
	//   93  162:iaload          
	//   94  163:i2f             
	//   95  164:invokevirtual   #2297 <Method void MotionEvent.offsetLocation(float, float)>
			motionevent = ((MotionEvent) (mNestedOffsets));
	//   96  167:aload_0         
	//   97  168:getfield        #462 <Field int[] mNestedOffsets>
	//   98  171:astore_3        
			i = motionevent[0];
	//   99  172:aload_3         
	//  100  173:iconst_0        
	//  101  174:iaload          
	//  102  175:istore_1        
			ai1 = mScrollOffset;
	//  103  176:aload_0         
	//  104  177:getfield        #458 <Field int[] mScrollOffset>
	//  105  180:astore          9
			motionevent[0] = i + ai1[0];
	//  106  182:aload_3         
	//  107  183:iconst_0        
	//  108  184:iload_1         
	//  109  185:aload           9
	//  110  187:iconst_0        
	//  111  188:iaload          
	//  112  189:iadd            
	//  113  190:iastore         
			motionevent[1] = motionevent[1] + ai1[1];
	//  114  191:aload_3         
	//  115  192:iconst_1        
	//  116  193:aload_3         
	//  117  194:iconst_1        
	//  118  195:iaload          
	//  119  196:aload           9
	//  120  198:iconst_1        
	//  121  199:iaload          
	//  122  200:iadd            
	//  123  201:iastore         
		} else
	//* 124  202:goto            251
		if(getOverScrollMode() != 2)
	//* 125  205:aload_0         
	//* 126  206:invokevirtual   #528 <Method int getOverScrollMode()>
	//* 127  209:iconst_2        
	//* 128  210:icmpeq          251
		{
			if(motionevent != null && !MotionEventCompat.isFromSource(motionevent, 8194))
	//* 129  213:aload_3         
	//* 130  214:ifnull          245
	//* 131  217:aload_3         
	//* 132  218:sipush          8194
	//* 133  221:invokestatic    #2401 <Method boolean MotionEventCompat.isFromSource(MotionEvent, int)>
	//* 134  224:ifne            245
				pullGlows(motionevent.getX(), i1, motionevent.getY(), j1);
	//  135  227:aload_0         
	//  136  228:aload_3         
	//  137  229:invokevirtual   #2218 <Method float MotionEvent.getX()>
	//  138  232:iload           6
	//  139  234:i2f             
	//  140  235:aload_3         
	//  141  236:invokevirtual   #2220 <Method float MotionEvent.getY()>
	//  142  239:iload           7
	//  143  241:i2f             
	//  144  242:invokespecial   #2403 <Method void pullGlows(float, float, float, float)>
			considerReleasingGlowsOnScroll(i, j);
	//  145  245:aload_0         
	//  146  246:iload_1         
	//  147  247:iload_2         
	//  148  248:invokevirtual   #2405 <Method void considerReleasingGlowsOnScroll(int, int)>
		}
		if(k != 0 || l != 0)
	//* 149  251:iload           4
	//* 150  253:ifne            264
	//* 151  256:iload           5
	//* 152  258:ifeq            272
	//* 153  261:goto            264
			dispatchOnScrolled(k, l);
	//  154  264:aload_0         
	//  155  265:iload           4
	//  156  267:iload           5
	//  157  269:invokevirtual   #1075 <Method void dispatchOnScrolled(int, int)>
		if(!awakenScrollBars())
	//* 158  272:aload_0         
	//* 159  273:invokevirtual   #649 <Method boolean awakenScrollBars()>
	//* 160  276:ifne            283
			invalidate();
	//  161  279:aload_0         
	//  162  280:invokevirtual   #2394 <Method void invalidate()>
		if(k != 0 || l != 0)
	//* 163  283:iload           4
	//* 164  285:ifne            293
	//* 165  288:iload           5
	//* 166  290:ifeq            296
			flag = true;
	//  167  293:iconst_1        
	//  168  294:istore          8
		return flag;
	//  169  296:iload           8
	//  170  298:ireturn         
	}

	void scrollStep(int i, int j, int ai[])
	{
		startInterceptRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #880 <Method void startInterceptRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #886 <Method void onEnterLayoutOrScroll()>
		TraceCompat.beginSection("RV Scroll");
	//    4    8:ldc1            #198 <String "RV Scroll">
	//    5   10:invokestatic    #1615 <Method void TraceCompat.beginSection(String)>
		fillRemainingScrollValues(mState);
	//    6   13:aload_0         
	//    7   14:aload_0         
	//    8   15:getfield        #445 <Field RecyclerView$State mState>
	//    9   18:invokevirtual   #874 <Method void fillRemainingScrollValues(RecyclerView$State)>
		if(i != 0)
	//*  10   21:iload_1         
	//*  11   22:ifeq            45
			i = mLayout.scrollHorizontallyBy(i, mRecycler, mState);
	//   12   25:aload_0         
	//   13   26:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:iload_1         
	//   15   30:aload_0         
	//   16   31:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   17   34:aload_0         
	//   18   35:getfield        #445 <Field RecyclerView$State mState>
	//   19   38:invokevirtual   #2409 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   20   41:istore_1        
		else
	//*  21   42:goto            47
			i = 0;
	//   22   45:iconst_0        
	//   23   46:istore_1        
		if(j != 0)
	//*  24   47:iload_2         
	//*  25   48:ifeq            71
			j = mLayout.scrollVerticallyBy(j, mRecycler, mState);
	//   26   51:aload_0         
	//   27   52:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   28   55:iload_2         
	//   29   56:aload_0         
	//   30   57:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   31   60:aload_0         
	//   32   61:getfield        #445 <Field RecyclerView$State mState>
	//   33   64:invokevirtual   #2412 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   34   67:istore_2        
		else
	//*  35   68:goto            73
			j = 0;
	//   36   71:iconst_0        
	//   37   72:istore_2        
		TraceCompat.endSection();
	//   38   73:invokestatic    #1628 <Method void TraceCompat.endSection()>
		repositionShadowingViews();
	//   39   76:aload_0         
	//   40   77:invokevirtual   #2414 <Method void repositionShadowingViews()>
		onExitLayoutOrScroll();
	//   41   80:aload_0         
	//   42   81:invokevirtual   #993 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//   43   84:aload_0         
	//   44   85:iconst_0        
	//   45   86:invokevirtual   #996 <Method void stopInterceptRequestLayout(boolean)>
		if(ai != null)
	//*  46   89:aload_3         
	//*  47   90:ifnull          101
		{
			ai[0] = i;
	//   48   93:aload_3         
	//   49   94:iconst_0        
	//   50   95:iload_1         
	//   51   96:iastore         
			ai[1] = j;
	//   52   97:aload_3         
	//   53   98:iconst_1        
	//   54   99:iload_2         
	//   55  100:iastore         
		}
	//   56  101:return          
	}

	public void scrollTo(int i, int j)
	{
		Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
	//    0    0:ldc1            #172 <String "RecyclerView">
	//    1    2:ldc2            #2417 <String "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead">
	//    2    5:invokestatic    #2419 <Method int Log.w(String, String)>
	//    3    8:pop             
	//    4    9:return          
	}

	public void scrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1865 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		stopScroll();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2155 <Method void stopScroll()>
		LayoutManager layoutmanager = mLayout;
	//    6   12:aload_0         
	//    7   13:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    8   16:astore_2        
		if(layoutmanager == null)
	//*   9   17:aload_2         
	//*  10   18:ifnonnull       31
		{
			Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//   11   21:ldc1            #172 <String "RecyclerView">
	//   12   23:ldc2            #2421 <String "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   13   26:invokestatic    #1254 <Method int Log.e(String, String)>
	//   14   29:pop             
			return;
	//   15   30:return          
		} else
		{
			layoutmanager.scrollToPosition(i);
	//   16   31:aload_2         
	//   17   32:iload_1         
	//   18   33:invokevirtual   #2072 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//   19   36:aload_0         
	//   20   37:invokevirtual   #649 <Method boolean awakenScrollBars()>
	//   21   40:pop             
			return;
	//   22   41:return          
		}
	}

	public void sendAccessibilityEventUnchecked(AccessibilityEvent accessibilityevent)
	{
		if(shouldDeferAccessibilityEvent(accessibilityevent))
	//*   0    0:aload_0         
	//*   1    1:aload_1         
	//*   2    2:invokevirtual   #2425 <Method boolean shouldDeferAccessibilityEvent(AccessibilityEvent)>
	//*   3    5:ifeq            9
		{
			return;
	//    4    8:return          
		} else
		{
			super.sendAccessibilityEventUnchecked(accessibilityevent);
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:invokespecial   #2426 <Method void ViewGroup.sendAccessibilityEventUnchecked(AccessibilityEvent)>
			return;
	//    8   14:return          
		}
	}

	public void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate recyclerviewaccessibilitydelegate)
	{
		mAccessibilityDelegate = recyclerviewaccessibilitydelegate;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1961 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
		ViewCompat.setAccessibilityDelegate(((View) (this)), ((android.support.v4.view.AccessibilityDelegateCompat) (mAccessibilityDelegate)));
	//    3    5:aload_0         
	//    4    6:aload_0         
	//    5    7:getfield        #1961 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    6   10:invokestatic    #2430 <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
	//    7   13:return          
	}

	public void setAdapter(Adapter adapter)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2435 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, false, true);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_0        
	//    6    8:iconst_1        
	//    7    9:invokespecial   #2437 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		processDataSetCompletelyChanged(false);
	//    8   12:aload_0         
	//    9   13:iconst_0        
	//   10   14:invokevirtual   #2439 <Method void processDataSetCompletelyChanged(boolean)>
		requestLayout();
	//   11   17:aload_0         
	//   12   18:invokevirtual   #1518 <Method void requestLayout()>
	//   13   21:return          
	}

	public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childdrawingordercallback)
	{
		if(childdrawingordercallback == mChildDrawingOrderCallback)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1941 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		mChildDrawingOrderCallback = childdrawingordercallback;
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:putfield        #1941 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
		boolean flag;
		if(mChildDrawingOrderCallback != null)
	//*   8   14:aload_0         
	//*   9   15:getfield        #1941 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*  10   18:ifnull          26
			flag = true;
	//   11   21:iconst_1        
	//   12   22:istore_2        
		else
	//*  13   23:goto            28
			flag = false;
	//   14   26:iconst_0        
	//   15   27:istore_2        
		setChildrenDrawingOrderEnabled(flag);
	//   16   28:aload_0         
	//   17   29:iload_2         
	//   18   30:invokevirtual   #2444 <Method void setChildrenDrawingOrderEnabled(boolean)>
	//   19   33:return          
	}

	boolean setChildImportantForAccessibilityInternal(ViewHolder viewholder, int i)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            25
		{
			viewholder.mPendingAccessibilityState = i;
	//    3    7:aload_1         
	//    4    8:iload_2         
	//    5    9:putfield        #1742 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			mPendingAccessibilityImportanceChange.add(((Object) (viewholder)));
	//    6   12:aload_0         
	//    7   13:getfield        #466 <Field List mPendingAccessibilityImportanceChange>
	//    8   16:aload_1         
	//    9   17:invokeinterface #1525 <Method boolean List.add(Object)>
	//   10   22:pop             
			return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
		} else
		{
			ViewCompat.setImportantForAccessibility(viewholder.itemView, i);
	//   13   25:aload_1         
	//   14   26:getfield        #661 <Field View RecyclerView$ViewHolder.itemView>
	//   15   29:iload_2         
	//   16   30:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
			return true;
	//   17   33:iconst_1        
	//   18   34:ireturn         
		}
	}

	public void setClipToPadding(boolean flag)
	{
		if(flag != mClipToPadding)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #484 <Field boolean mClipToPadding>
	//*   3    5:icmpeq          12
			invalidateGlows();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2289 <Method void invalidateGlows()>
		mClipToPadding = flag;
	//    6   12:aload_0         
	//    7   13:iload_1         
	//    8   14:putfield        #484 <Field boolean mClipToPadding>
		super.setClipToPadding(flag);
	//    9   17:aload_0         
	//   10   18:iload_1         
	//   11   19:invokespecial   #2449 <Method void ViewGroup.setClipToPadding(boolean)>
		if(mFirstLayoutComplete)
	//*  12   22:aload_0         
	//*  13   23:getfield        #1336 <Field boolean mFirstLayoutComplete>
	//*  14   26:ifeq            33
			requestLayout();
	//   15   29:aload_0         
	//   16   30:invokevirtual   #1518 <Method void requestLayout()>
	//   17   33:return          
	}

	public void setEdgeEffectFactory(EdgeEffectFactory edgeeffectfactory)
	{
		Preconditions.checkNotNull(((Object) (edgeeffectfactory)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #2457 <Method Object Preconditions.checkNotNull(Object)>
	//    2    4:pop             
		mEdgeEffectFactory = edgeeffectfactory;
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:putfield        #418 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
		invalidateGlows();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #2289 <Method void invalidateGlows()>
	//    8   14:return          
	}

	public void setHasFixedSize(boolean flag)
	{
		mHasFixedSize = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #2013 <Field boolean mHasFixedSize>
	//    3    5:return          
	}

	public void setItemAnimator(ItemAnimator itemanimator)
	{
		ItemAnimator itemanimator1 = mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:astore_2        
		if(itemanimator1 != null)
	//*   3    5:aload_2         
	//*   4    6:ifnull          21
		{
			itemanimator1.endAnimations();
	//    5    9:aload_2         
	//    6   10:invokevirtual   #2152 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mItemAnimator.setListener(((ItemAnimator.ItemAnimatorListener) (null)));
	//    7   13:aload_0         
	//    8   14:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    9   17:aconst_null     
	//   10   18:invokevirtual   #535 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		}
		mItemAnimator = itemanimator;
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:putfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
		itemanimator = mItemAnimator;
	//   14   26:aload_0         
	//   15   27:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   16   30:astore_1        
		if(itemanimator != null)
	//*  17   31:aload_1         
	//*  18   32:ifnull          43
			itemanimator.setListener(mItemAnimatorListener);
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:getfield        #452 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//   22   40:invokevirtual   #535 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//   23   43:return          
	}

	public void setItemViewCacheSize(int i)
	{
		mRecycler.setViewCacheSize(i);
	//    0    0:aload_0         
	//    1    1:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2464 <Method void RecyclerView$Recycler.setViewCacheSize(int)>
	//    4    8:return          
	}

	public void setLayoutFrozen(boolean flag)
	{
		if(flag != mLayoutFrozen)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1865 <Field boolean mLayoutFrozen>
	//*   3    5:icmpeq          87
		{
			assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
	//    4    8:aload_0         
	//    5    9:ldc2            #2466 <String "Do not setLayoutFrozen in layout or scroll">
	//    6   12:invokevirtual   #2467 <Method void assertNotInLayoutOrScroll(String)>
			if(!flag)
	//*   7   15:iload_1         
	//*   8   16:ifne            55
			{
				mLayoutFrozen = false;
	//    9   19:aload_0         
	//   10   20:iconst_0        
	//   11   21:putfield        #1865 <Field boolean mLayoutFrozen>
				if(mLayoutWasDefered && mLayout != null && mAdapter != null)
	//*  12   24:aload_0         
	//*  13   25:getfield        #1617 <Field boolean mLayoutWasDefered>
	//*  14   28:ifeq            49
	//*  15   31:aload_0         
	//*  16   32:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  17   35:ifnull          49
	//*  18   38:aload_0         
	//*  19   39:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  20   42:ifnull          49
					requestLayout();
	//   21   45:aload_0         
	//   22   46:invokevirtual   #1518 <Method void requestLayout()>
				mLayoutWasDefered = false;
	//   23   49:aload_0         
	//   24   50:iconst_0        
	//   25   51:putfield        #1617 <Field boolean mLayoutWasDefered>
				return;
	//   26   54:return          
			}
			long l = SystemClock.uptimeMillis();
	//   27   55:invokestatic    #2472 <Method long SystemClock.uptimeMillis()>
	//   28   58:lstore_2        
			onTouchEvent(MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0));
	//   29   59:aload_0         
	//   30   60:lload_2         
	//   31   61:lload_2         
	//   32   62:iconst_3        
	//   33   63:fconst_0        
	//   34   64:fconst_0        
	//   35   65:iconst_0        
	//   36   66:invokestatic    #2475 <Method MotionEvent MotionEvent.obtain(long, long, int, float, float, int)>
	//   37   69:invokevirtual   #2477 <Method boolean onTouchEvent(MotionEvent)>
	//   38   72:pop             
			mLayoutFrozen = true;
	//   39   73:aload_0         
	//   40   74:iconst_1        
	//   41   75:putfield        #1865 <Field boolean mLayoutFrozen>
			mIgnoreMotionEventTillDown = true;
	//   42   78:aload_0         
	//   43   79:iconst_1        
	//   44   80:putfield        #2216 <Field boolean mIgnoreMotionEventTillDown>
			stopScroll();
	//   45   83:aload_0         
	//   46   84:invokevirtual   #2155 <Method void stopScroll()>
		}
	//   47   87:return          
	}

	public void setLayoutManager(LayoutManager layoutmanager)
	{
		if(layoutmanager == mLayout)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		stopScroll();
	//    5    9:aload_0         
	//    6   10:invokevirtual   #2155 <Method void stopScroll()>
		if(mLayout != null)
	//*   7   13:aload_0         
	//*   8   14:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*   9   17:ifnull          97
		{
			ItemAnimator itemanimator = mItemAnimator;
	//   10   20:aload_0         
	//   11   21:getfield        #423 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   12   24:astore_2        
			if(itemanimator != null)
	//*  13   25:aload_2         
	//*  14   26:ifnull          33
				itemanimator.endAnimations();
	//   15   29:aload_2         
	//   16   30:invokevirtual   #2152 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mLayout.removeAndRecycleAllViews(mRecycler);
	//   17   33:aload_0         
	//   18   34:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   19   37:aload_0         
	//   20   38:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   21   41:invokevirtual   #2326 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   22   44:aload_0         
	//   23   45:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   24   48:aload_0         
	//   25   49:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   26   52:invokevirtual   #1048 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
			mRecycler.clear();
	//   27   55:aload_0         
	//   28   56:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   29   59:invokevirtual   #2327 <Method void RecyclerView$Recycler.clear()>
			if(mIsAttached)
	//*  30   62:aload_0         
	//*  31   63:getfield        #2064 <Field boolean mIsAttached>
	//*  32   66:ifeq            81
				mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   33   69:aload_0         
	//   34   70:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   35   73:aload_0         
	//   36   74:aload_0         
	//   37   75:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   38   78:invokevirtual   #2159 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
			mLayout.setRecyclerView(((RecyclerView) (null)));
	//   39   81:aload_0         
	//   40   82:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   41   85:aconst_null     
	//   42   86:invokevirtual   #2480 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			mLayout = null;
	//   43   89:aload_0         
	//   44   90:aconst_null     
	//   45   91:putfield        #969 <Field RecyclerView$LayoutManager mLayout>
		} else
	//*  46   94:goto            104
		{
			mRecycler.clear();
	//   47   97:aload_0         
	//   48   98:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   49  101:invokevirtual   #2327 <Method void RecyclerView$Recycler.clear()>
		}
		mChildHelper.removeAllViewsUnfiltered();
	//   50  104:aload_0         
	//   51  105:getfield        #679 <Field ChildHelper mChildHelper>
	//   52  108:invokevirtual   #2483 <Method void ChildHelper.removeAllViewsUnfiltered()>
		mLayout = layoutmanager;
	//   53  111:aload_0         
	//   54  112:aload_1         
	//   55  113:putfield        #969 <Field RecyclerView$LayoutManager mLayout>
		if(layoutmanager != null)
	//*  56  116:aload_1         
	//*  57  117:ifnull          207
			if(layoutmanager.mRecyclerView == null)
	//*  58  120:aload_1         
	//*  59  121:getfield        #2487 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  60  124:ifnonnull       153
			{
				mLayout.setRecyclerView(this);
	//   61  127:aload_0         
	//   62  128:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   63  131:aload_0         
	//   64  132:invokevirtual   #2480 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
				if(mIsAttached)
	//*  65  135:aload_0         
	//*  66  136:getfield        #2064 <Field boolean mIsAttached>
	//*  67  139:ifeq            207
					mLayout.dispatchAttachedToWindow(this);
	//   68  142:aload_0         
	//   69  143:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//   70  146:aload_0         
	//   71  147:invokevirtual   #2114 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
			} else
	//*  72  150:goto            207
			{
				StringBuilder stringbuilder = new StringBuilder();
	//   73  153:new             #809 <Class StringBuilder>
	//   74  156:dup             
	//   75  157:invokespecial   #810 <Method void StringBuilder()>
	//   76  160:astore_2        
				stringbuilder.append("LayoutManager ");
	//   77  161:aload_2         
	//   78  162:ldc2            #2489 <String "LayoutManager ">
	//   79  165:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   80  168:pop             
				stringbuilder.append(((Object) (layoutmanager)));
	//   81  169:aload_2         
	//   82  170:aload_1         
	//   83  171:invokevirtual   #1234 <Method StringBuilder StringBuilder.append(Object)>
	//   84  174:pop             
				stringbuilder.append(" is already attached to a RecyclerView:");
	//   85  175:aload_2         
	//   86  176:ldc2            #2491 <String " is already attached to a RecyclerView:">
	//   87  179:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   88  182:pop             
				stringbuilder.append(layoutmanager.mRecyclerView.exceptionLabel());
	//   89  183:aload_2         
	//   90  184:aload_1         
	//   91  185:getfield        #2487 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//   92  188:invokevirtual   #1239 <Method String exceptionLabel()>
	//   93  191:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//   94  194:pop             
				throw new IllegalArgumentException(stringbuilder.toString());
	//   95  195:new             #1293 <Class IllegalArgumentException>
	//   96  198:dup             
	//   97  199:aload_2         
	//   98  200:invokevirtual   #824 <Method String StringBuilder.toString()>
	//   99  203:invokespecial   #1294 <Method void IllegalArgumentException(String)>
	//  100  206:athrow          
			}
		mRecycler.updateViewCacheSize();
	//  101  207:aload_0         
	//  102  208:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//  103  211:invokevirtual   #1067 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		requestLayout();
	//  104  214:aload_0         
	//  105  215:invokevirtual   #1518 <Method void requestLayout()>
	//  106  218:return          
	}

	public void setNestedScrollingEnabled(boolean flag)
	{
		getScrollingChildHelper().setNestedScrollingEnabled(flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2492 <Method void NestedScrollingChildHelper.setNestedScrollingEnabled(boolean)>
	//    4    8:return          
	}

	public void setOnFlingListener(OnFlingListener onflinglistener)
	{
		mOnFlingListener = onflinglistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1872 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    3    5:return          
	}

	public void setOnScrollListener(OnScrollListener onscrolllistener)
	{
		mScrollListener = onscrolllistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1722 <Field RecyclerView$OnScrollListener mScrollListener>
	//    3    5:return          
	}

	public void setPreserveFocusAfterLayout(boolean flag)
	{
		mPreserveFocusAfterLayout = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #434 <Field boolean mPreserveFocusAfterLayout>
	//    3    5:return          
	}

	public void setRecycledViewPool(RecycledViewPool recycledviewpool)
	{
		mRecycler.setRecycledViewPool(recycledviewpool);
	//    0    0:aload_0         
	//    1    1:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2500 <Method void RecyclerView$Recycler.setRecycledViewPool(RecyclerView$RecycledViewPool)>
	//    4    8:return          
	}

	public void setRecyclerListener(RecyclerListener recyclerlistener)
	{
		mRecyclerListener = recyclerlistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #2504 <Field RecyclerView$RecyclerListener mRecyclerListener>
	//    3    5:return          
	}

	void setScrollState(int i)
	{
		if(i == mScrollState)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #425 <Field int mScrollState>
	//*   3    5:icmpne          9
			return;
	//    4    8:return          
		mScrollState = i;
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:putfield        #425 <Field int mScrollState>
		if(i != 2)
	//*   8   14:iload_1         
	//*   9   15:iconst_2        
	//*  10   16:icmpeq          23
			stopScrollersInternal();
	//   11   19:aload_0         
	//   12   20:invokespecial   #2506 <Method void stopScrollersInternal()>
		dispatchOnScrollStateChanged(i);
	//   13   23:aload_0         
	//   14   24:iload_1         
	//   15   25:invokevirtual   #2508 <Method void dispatchOnScrollStateChanged(int)>
	//   16   28:return          
	}

	public void setScrollingTouchSlop(int i)
	{
		ViewConfiguration viewconfiguration = ViewConfiguration.get(getContext());
	//    0    0:aload_0         
	//    1    1:invokevirtual   #558 <Method Context getContext()>
	//    2    4:invokestatic    #500 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//    3    7:astore_2        
		switch(i)
	//*   4    8:iload_1         
		{
	//*   5    9:tableswitch     0 1: default 32
	//	               0 84
	//	               1 75
	//*   6   32:new             #809 <Class StringBuilder>
	//*   7   35:dup             
	//*   8   36:invokespecial   #810 <Method void StringBuilder()>
	//*   9   39:astore_3        
	//*  10   40:aload_3         
	//*  11   41:ldc2            #2511 <String "setScrollingTouchSlop(): bad argument constant ">
	//*  12   44:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//*  13   47:pop             
	//*  14   48:aload_3         
	//*  15   49:iload_1         
	//*  16   50:invokevirtual   #1291 <Method StringBuilder StringBuilder.append(int)>
	//*  17   53:pop             
	//*  18   54:aload_3         
	//*  19   55:ldc2            #2513 <String "; using default value">
	//*  20   58:invokevirtual   #817 <Method StringBuilder StringBuilder.append(String)>
	//*  21   61:pop             
	//*  22   62:ldc1            #172 <String "RecyclerView">
	//*  23   64:aload_3         
	//*  24   65:invokevirtual   #824 <Method String StringBuilder.toString()>
	//*  25   68:invokestatic    #2419 <Method int Log.w(String, String)>
	//*  26   71:pop             
	//*  27   72:goto            84
		case 1: // '\001'
			mTouchSlop = viewconfiguration.getScaledPagingTouchSlop();
	//   28   75:aload_0         
	//   29   76:aload_2         
	//   30   77:invokevirtual   #2516 <Method int ViewConfiguration.getScaledPagingTouchSlop()>
	//   31   80:putfield        #506 <Field int mTouchSlop>
			return;
	//   32   83:return          

		default:
			StringBuilder stringbuilder = new StringBuilder();
			stringbuilder.append("setScrollingTouchSlop(): bad argument constant ");
			stringbuilder.append(i);
			stringbuilder.append("; using default value");
			Log.w("RecyclerView", stringbuilder.toString());
			// fall through

		case 0: // '\0'
			mTouchSlop = viewconfiguration.getScaledTouchSlop();
	//   33   84:aload_0         
	//   34   85:aload_2         
	//   35   86:invokevirtual   #504 <Method int ViewConfiguration.getScaledTouchSlop()>
	//   36   89:putfield        #506 <Field int mTouchSlop>
			return;
	//   37   92:return          
		}
	}

	public void setViewCacheExtension(ViewCacheExtension viewcacheextension)
	{
		mRecycler.setViewCacheExtension(viewcacheextension);
	//    0    0:aload_0         
	//    1    1:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2520 <Method void RecyclerView$Recycler.setViewCacheExtension(RecyclerView$ViewCacheExtension)>
	//    4    8:return          
	}

	boolean shouldDeferAccessibilityEvent(AccessibilityEvent accessibilityevent)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1543 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            41
		{
			int i;
			if(accessibilityevent != null)
	//*   3    7:aload_1         
	//*   4    8:ifnull          19
				i = AccessibilityEventCompat.getContentChangeTypes(accessibilityevent);
	//    5   11:aload_1         
	//    6   12:invokestatic    #2524 <Method int AccessibilityEventCompat.getContentChangeTypes(AccessibilityEvent)>
	//    7   15:istore_2        
			else
	//*   8   16:goto            21
				i = 0;
	//    9   19:iconst_0        
	//   10   20:istore_2        
			int j = i;
	//   11   21:iload_2         
	//   12   22:istore_3        
			if(i == 0)
	//*  13   23:iload_2         
	//*  14   24:ifne            29
				j = 0;
	//   15   27:iconst_0        
	//   16   28:istore_3        
			mEatenAccessibilityChangeFlags = j | mEatenAccessibilityChangeFlags;
	//   17   29:aload_0         
	//   18   30:iload_3         
	//   19   31:aload_0         
	//   20   32:getfield        #844 <Field int mEatenAccessibilityChangeFlags>
	//   21   35:ior             
	//   22   36:putfield        #844 <Field int mEatenAccessibilityChangeFlags>
			return true;
	//   23   39:iconst_1        
	//   24   40:ireturn         
		} else
		{
			return false;
	//   25   41:iconst_0        
	//   26   42:ireturn         
		}
	}

	public void smoothScrollBy(int i, int j)
	{
		smoothScrollBy(i, j, ((Interpolator) (null)));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:aconst_null     
	//    4    4:invokevirtual   #2528 <Method void smoothScrollBy(int, int, Interpolator)>
	//    5    7:return          
	}

	public void smoothScrollBy(int i, int j, Interpolator interpolator)
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          4
		if(layoutmanager == null)
	//*   3    6:aload           4
	//*   4    8:ifnonnull       21
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    5   11:ldc1            #172 <String "RecyclerView">
	//    6   13:ldc2            #2530 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    7   16:invokestatic    #1254 <Method int Log.e(String, String)>
	//    8   19:pop             
			return;
	//    9   20:return          
		}
		if(mLayoutFrozen)
	//*  10   21:aload_0         
	//*  11   22:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  12   25:ifeq            29
			return;
	//   13   28:return          
		if(!layoutmanager.canScrollHorizontally())
	//*  14   29:aload           4
	//*  15   31:invokevirtual   #1581 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  16   34:ifne            39
			i = 0;
	//   17   37:iconst_0        
	//   18   38:istore_1        
		if(!mLayout.canScrollVertically())
	//*  19   39:aload_0         
	//*  20   40:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  21   43:invokevirtual   #1594 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  22   46:ifne            51
			j = 0;
	//   23   49:iconst_0        
	//   24   50:istore_2        
		if(i != 0 || j != 0)
	//*  25   51:iload_1         
	//*  26   52:ifne            59
	//*  27   55:iload_2         
	//*  28   56:ifeq            69
			mViewFlinger.smoothScrollBy(i, j, interpolator);
	//   29   59:aload_0         
	//   30   60:getfield        #437 <Field RecyclerView$ViewFlinger mViewFlinger>
	//   31   63:iload_1         
	//   32   64:iload_2         
	//   33   65:aload_3         
	//   34   66:invokevirtual   #2531 <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, Interpolator)>
	//   35   69:return          
	}

	public void smoothScrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1865 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		LayoutManager layoutmanager = mLayout;
	//    4    8:aload_0         
	//    5    9:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//    6   12:astore_2        
		if(layoutmanager == null)
	//*   7   13:aload_2         
	//*   8   14:ifnonnull       27
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    9   17:ldc1            #172 <String "RecyclerView">
	//   10   19:ldc2            #2530 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   11   22:invokestatic    #1254 <Method int Log.e(String, String)>
	//   12   25:pop             
			return;
	//   13   26:return          
		} else
		{
			layoutmanager.smoothScrollToPosition(this, mState, i);
	//   14   27:aload_2         
	//   15   28:aload_0         
	//   16   29:aload_0         
	//   17   30:getfield        #445 <Field RecyclerView$State mState>
	//   18   33:iload_1         
	//   19   34:invokevirtual   #2535 <Method void RecyclerView$LayoutManager.smoothScrollToPosition(RecyclerView, RecyclerView$State, int)>
			return;
	//   20   37:return          
		}
	}

	void startInterceptRequestLayout()
	{
		mInterceptRequestLayoutDepth = mInterceptRequestLayoutDepth + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #407 <Field int mInterceptRequestLayoutDepth>
		if(mInterceptRequestLayoutDepth == 1 && !mLayoutFrozen)
	//*   6   10:aload_0         
	//*   7   11:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//*   8   14:iconst_1        
	//*   9   15:icmpne          30
	//*  10   18:aload_0         
	//*  11   19:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  12   22:ifne            30
			mLayoutWasDefered = false;
	//   13   25:aload_0         
	//   14   26:iconst_0        
	//   15   27:putfield        #1617 <Field boolean mLayoutWasDefered>
	//   16   30:return          
	}

	public boolean startNestedScroll(int i)
	{
		return getScrollingChildHelper().startNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2537 <Method boolean NestedScrollingChildHelper.startNestedScroll(int)>
	//    4    8:ireturn         
	}

	public boolean startNestedScroll(int i, int j)
	{
		return getScrollingChildHelper().startNestedScroll(i, j);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #2538 <Method boolean NestedScrollingChildHelper.startNestedScroll(int, int)>
	//    5    9:ireturn         
	}

	void stopInterceptRequestLayout(boolean flag)
	{
		if(mInterceptRequestLayoutDepth < 1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//*   2    4:iconst_1        
	//*   3    5:icmpge          13
			mInterceptRequestLayoutDepth = 1;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #407 <Field int mInterceptRequestLayoutDepth>
		if(!flag && !mLayoutFrozen)
	//*   7   13:iload_1         
	//*   8   14:ifne            29
	//*   9   17:aload_0         
	//*  10   18:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  11   21:ifne            29
			mLayoutWasDefered = false;
	//   12   24:aload_0         
	//   13   25:iconst_0        
	//   14   26:putfield        #1617 <Field boolean mLayoutWasDefered>
		if(mInterceptRequestLayoutDepth == 1)
	//*  15   29:aload_0         
	//*  16   30:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//*  17   33:iconst_1        
	//*  18   34:icmpne          85
		{
			if(flag && mLayoutWasDefered && !mLayoutFrozen && mLayout != null && mAdapter != null)
	//*  19   37:iload_1         
	//*  20   38:ifeq            73
	//*  21   41:aload_0         
	//*  22   42:getfield        #1617 <Field boolean mLayoutWasDefered>
	//*  23   45:ifeq            73
	//*  24   48:aload_0         
	//*  25   49:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  26   52:ifne            73
	//*  27   55:aload_0         
	//*  28   56:getfield        #969 <Field RecyclerView$LayoutManager mLayout>
	//*  29   59:ifnull          73
	//*  30   62:aload_0         
	//*  31   63:getfield        #906 <Field RecyclerView$Adapter mAdapter>
	//*  32   66:ifnull          73
				dispatchLayout();
	//   33   69:aload_0         
	//   34   70:invokevirtual   #1622 <Method void dispatchLayout()>
			if(!mLayoutFrozen)
	//*  35   73:aload_0         
	//*  36   74:getfield        #1865 <Field boolean mLayoutFrozen>
	//*  37   77:ifne            85
				mLayoutWasDefered = false;
	//   38   80:aload_0         
	//   39   81:iconst_0        
	//   40   82:putfield        #1617 <Field boolean mLayoutWasDefered>
		}
		mInterceptRequestLayoutDepth = mInterceptRequestLayoutDepth - 1;
	//   41   85:aload_0         
	//   42   86:aload_0         
	//   43   87:getfield        #407 <Field int mInterceptRequestLayoutDepth>
	//   44   90:iconst_1        
	//   45   91:isub            
	//   46   92:putfield        #407 <Field int mInterceptRequestLayoutDepth>
	//   47   95:return          
	}

	public void stopNestedScroll()
	{
		getScrollingChildHelper().stopNestedScroll();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2540 <Method void NestedScrollingChildHelper.stopNestedScroll()>
	//    3    7:return          
	}

	public void stopNestedScroll(int i)
	{
		getScrollingChildHelper().stopNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1695 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2541 <Method void NestedScrollingChildHelper.stopNestedScroll(int)>
	//    4    8:return          
	}

	public void stopScroll()
	{
		setScrollState(0);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #723 <Method void setScrollState(int)>
		stopScrollersInternal();
	//    3    5:aload_0         
	//    4    6:invokespecial   #2506 <Method void stopScrollersInternal()>
	//    5    9:return          
	}

	public void swapAdapter(Adapter adapter, boolean flag)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2435 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, true, flag);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_1        
	//    6    8:iload_2         
	//    7    9:invokespecial   #2437 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		processDataSetCompletelyChanged(true);
	//    8   12:aload_0         
	//    9   13:iconst_1        
	//   10   14:invokevirtual   #2439 <Method void processDataSetCompletelyChanged(boolean)>
		requestLayout();
	//   11   17:aload_0         
	//   12   18:invokevirtual   #1518 <Method void requestLayout()>
	//   13   21:return          
	}

	void viewRangeUpdate(int i, int j, Object obj)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #679 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1567 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          106
		{
			View view = mChildHelper.getUnfilteredChildAt(k);
	//    9   19:aload_0         
	//   10   20:getfield        #679 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1570 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:astore          6
			ViewHolder viewholder = getChildViewHolderInt(view);
	//   14   30:aload           6
	//   15   32:invokestatic    #922 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   35:astore          7
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i && viewholder.mPosition < i + j)
	//*  17   37:aload           7
	//*  18   39:ifnull          97
	//*  19   42:aload           7
	//*  20   44:invokevirtual   #925 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   47:ifeq            53
	//*  22   50:goto            97
	//*  23   53:aload           7
	//*  24   55:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  25   58:iload_1         
	//*  26   59:icmplt          97
	//*  27   62:aload           7
	//*  28   64:getfield        #1860 <Field int RecyclerView$ViewHolder.mPosition>
	//*  29   67:iload_1         
	//*  30   68:iload_2         
	//*  31   69:iadd            
	//*  32   70:icmpge          97
			{
				viewholder.addFlags(2);
	//   33   73:aload           7
	//   34   75:iconst_2        
	//   35   76:invokevirtual   #2077 <Method void RecyclerView$ViewHolder.addFlags(int)>
				viewholder.addChangePayload(obj);
	//   36   79:aload           7
	//   37   81:aload_3         
	//   38   82:invokevirtual   #2548 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				((LayoutParams)view.getLayoutParams()).mInsetsDirty = true;
	//   39   85:aload           6
	//   40   87:invokevirtual   #683 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   41   90:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   42   93:iconst_1        
	//   43   94:putfield        #1416 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}
		}

	//   44   97:iload           4
	//   45   99:iconst_1        
	//   46  100:iadd            
	//   47  101:istore          4
	//*  48  103:goto            12
		mRecycler.viewRangeUpdate(i, j);
	//   49  106:aload_0         
	//   50  107:getfield        #378 <Field RecyclerView$Recycler mRecycler>
	//   51  110:iload_1         
	//   52  111:iload_2         
	//   53  112:invokevirtual   #2550 <Method void RecyclerView$Recycler.viewRangeUpdate(int, int)>
	//   54  115:return          
	}

	static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC;
	static final boolean ALLOW_THREAD_GAP_WORK;
	private static final int CLIP_TO_PADDING_ATTR[] = {
		0x10100eb
	};
	static final boolean DEBUG = false;
	static final int DEFAULT_ORIENTATION = 1;
	static final boolean DISPATCH_TEMP_DETACH = false;
	private static final boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION;
	static final boolean FORCE_INVALIDATE_DISPLAY_LIST;
	static final long FOREVER_NS = 0xffffffffL;
	public static final int HORIZONTAL = 0;
	private static final boolean IGNORE_DETACHED_FOCUSED_CHILD;
	private static final int INVALID_POINTER = -1;
	public static final int INVALID_TYPE = -1;
	private static final Class LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE[];
	static final int MAX_SCROLL_DURATION = 2000;
	private static final int NESTED_SCROLLING_ATTRS[] = {
		0x1010436
	};
	public static final long NO_ID = -1L;
	public static final int NO_POSITION = -1;
	static final boolean POST_UPDATES_ON_ANIMATION;
	public static final int SCROLL_STATE_DRAGGING = 1;
	public static final int SCROLL_STATE_IDLE = 0;
	public static final int SCROLL_STATE_SETTLING = 2;
	static final String TAG = "RecyclerView";
	public static final int TOUCH_SLOP_DEFAULT = 0;
	public static final int TOUCH_SLOP_PAGING = 1;
	static final String TRACE_BIND_VIEW_TAG = "RV OnBindView";
	static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
	private static final String TRACE_HANDLE_ADAPTER_UPDATES_TAG = "RV PartialInvalidate";
	static final String TRACE_NESTED_PREFETCH_TAG = "RV Nested Prefetch";
	private static final String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = "RV FullInvalidate";
	private static final String TRACE_ON_LAYOUT_TAG = "RV OnLayout";
	static final String TRACE_PREFETCH_TAG = "RV Prefetch";
	static final String TRACE_SCROLL_TAG = "RV Scroll";
	static final boolean VERBOSE_TRACING = false;
	public static final int VERTICAL = 1;
	static final Interpolator sQuinticInterpolator = new Interpolator() {

		public float getInterpolation(float f)
		{
			f--;
		//    0    0:fload_1         
		//    1    1:fconst_1        
		//    2    2:fsub            
		//    3    3:fstore_1        
			return f * f * f * f * f + 1.0F;
		//    4    4:fload_1         
		//    5    5:fload_1         
		//    6    6:fmul            
		//    7    7:fload_1         
		//    8    8:fmul            
		//    9    9:fload_1         
		//   10   10:fmul            
		//   11   11:fload_1         
		//   12   12:fmul            
		//   13   13:fconst_1        
		//   14   14:fadd            
		//   15   15:freturn         
		}

	}
;
	RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
	private final AccessibilityManager mAccessibilityManager;
	private OnItemTouchListener mActiveOnItemTouchListener;
	Adapter mAdapter;
	AdapterHelper mAdapterHelper;
	boolean mAdapterUpdateDuringMeasure;
	private EdgeEffect mBottomGlow;
	private ChildDrawingOrderCallback mChildDrawingOrderCallback;
	ChildHelper mChildHelper;
	boolean mClipToPadding;
	boolean mDataSetHasChangedAfterLayout;
	boolean mDispatchItemsChangedEvent;
	private int mDispatchScrollCounter;
	private int mEatenAccessibilityChangeFlags;
	private EdgeEffectFactory mEdgeEffectFactory;
	boolean mEnableFastScroller;
	boolean mFirstLayoutComplete;
	GapWorker mGapWorker;
	boolean mHasFixedSize;
	private boolean mIgnoreMotionEventTillDown;
	private int mInitialTouchX;
	private int mInitialTouchY;
	private int mInterceptRequestLayoutDepth;
	boolean mIsAttached;
	ItemAnimator mItemAnimator;
	private ItemAnimator.ItemAnimatorListener mItemAnimatorListener;
	private Runnable mItemAnimatorRunner = new Runnable() {

		public void run()
		{
			if(mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #14  <Field RecyclerView this$0>
		//*   2    4:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          20
				mItemAnimator.runPendingAnimations();
		//    4   10:aload_0         
		//    5   11:getfield        #14  <Field RecyclerView this$0>
		//    6   14:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:invokevirtual   #28  <Method void RecyclerView$ItemAnimator.runPendingAnimations()>
			mPostedAnimatorRunner = false;
		//    8   20:aload_0         
		//    9   21:getfield        #14  <Field RecyclerView this$0>
		//   10   24:iconst_0        
		//   11   25:putfield        #32  <Field boolean RecyclerView.mPostedAnimatorRunner>
		//   12   28:return          
		}

		final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
	}
;
	final ArrayList mItemDecorations;
	boolean mItemsAddedOrRemoved;
	boolean mItemsChanged;
	private int mLastTouchX;
	private int mLastTouchY;
	LayoutManager mLayout;
	boolean mLayoutFrozen;
	private int mLayoutOrScrollCounter;
	boolean mLayoutWasDefered;
	private EdgeEffect mLeftGlow;
	private final int mMaxFlingVelocity;
	private final int mMinFlingVelocity;
	private final int mMinMaxLayoutPositions[];
	private final int mNestedOffsets[];
	private final RecyclerViewDataObserver mObserver;
	private List mOnChildAttachStateListeners;
	private OnFlingListener mOnFlingListener;
	private final ArrayList mOnItemTouchListeners;
	final List mPendingAccessibilityImportanceChange;
	private SavedState mPendingSavedState;
	boolean mPostedAnimatorRunner;
	GapWorker.LayoutPrefetchRegistryImpl mPrefetchRegistry;
	private boolean mPreserveFocusAfterLayout;
	final Recycler mRecycler;
	RecyclerListener mRecyclerListener;
	private EdgeEffect mRightGlow;
	private float mScaledHorizontalScrollFactor;
	private float mScaledVerticalScrollFactor;
	final int mScrollConsumed[];
	private OnScrollListener mScrollListener;
	private List mScrollListeners;
	private final int mScrollOffset[];
	private int mScrollPointerId;
	private int mScrollState;
	final int mScrollStepConsumed[];
	private NestedScrollingChildHelper mScrollingChildHelper;
	final State mState;
	final Rect mTempRect;
	private final Rect mTempRect2;
	final RectF mTempRectF;
	private EdgeEffect mTopGlow;
	private int mTouchSlop;
	final Runnable mUpdateChildViewsRunnable;
	private VelocityTracker mVelocityTracker;
	final ViewFlinger mViewFlinger;
	private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback;
	final ViewInfoStore mViewInfoStore;

	static 
	{
	//    0    0:iconst_1        
	//    1    1:newarray        int[]
	//    2    3:dup             
	//    3    4:iconst_0        
	//    4    5:ldc2            #318 <Int 0x1010436>
	//    5    8:iastore         
	//    6    9:putstatic       #320 <Field int[] NESTED_SCROLLING_ATTRS>
	//    7   12:iconst_1        
	//    8   13:newarray        int[]
	//    9   15:dup             
	//   10   16:iconst_0        
	//   11   17:ldc2            #321 <Int 0x10100eb>
	//   12   20:iastore         
	//   13   21:putstatic       #323 <Field int[] CLIP_TO_PADDING_ATTR>
		boolean flag;
		if(android.os.Build.VERSION.SDK_INT != 18 && android.os.Build.VERSION.SDK_INT != 19 && android.os.Build.VERSION.SDK_INT != 20)
	//*  14   24:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  15   27:bipush          18
	//*  16   29:icmpeq          56
	//*  17   32:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  18   35:bipush          19
	//*  19   37:icmpeq          56
	//*  20   40:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  21   43:bipush          20
	//*  22   45:icmpne          51
	//*  23   48:goto            56
			flag = false;
	//   24   51:iconst_0        
	//   25   52:istore_0        
		else
	//*  26   53:goto            58
			flag = true;
	//   27   56:iconst_1        
	//   28   57:istore_0        
		FORCE_INVALIDATE_DISPLAY_LIST = flag;
	//   29   58:iload_0         
	//   30   59:putstatic       #330 <Field boolean FORCE_INVALIDATE_DISPLAY_LIST>
		if(android.os.Build.VERSION.SDK_INT >= 23)
	//*  31   62:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  32   65:bipush          23
	//*  33   67:icmplt          75
			flag = true;
	//   34   70:iconst_1        
	//   35   71:istore_0        
		else
	//*  36   72:goto            77
			flag = false;
	//   37   75:iconst_0        
	//   38   76:istore_0        
		ALLOW_SIZE_IN_UNSPECIFIED_SPEC = flag;
	//   39   77:iload_0         
	//   40   78:putstatic       #332 <Field boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		if(android.os.Build.VERSION.SDK_INT >= 16)
	//*  41   81:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  42   84:bipush          16
	//*  43   86:icmplt          94
			flag = true;
	//   44   89:iconst_1        
	//   45   90:istore_0        
		else
	//*  46   91:goto            96
			flag = false;
	//   47   94:iconst_0        
	//   48   95:istore_0        
		POST_UPDATES_ON_ANIMATION = flag;
	//   49   96:iload_0         
	//   50   97:putstatic       #334 <Field boolean POST_UPDATES_ON_ANIMATION>
		if(android.os.Build.VERSION.SDK_INT >= 21)
	//*  51  100:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  52  103:bipush          21
	//*  53  105:icmplt          113
			flag = true;
	//   54  108:iconst_1        
	//   55  109:istore_0        
		else
	//*  56  110:goto            115
			flag = false;
	//   57  113:iconst_0        
	//   58  114:istore_0        
		ALLOW_THREAD_GAP_WORK = flag;
	//   59  115:iload_0         
	//   60  116:putstatic       #336 <Field boolean ALLOW_THREAD_GAP_WORK>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  61  119:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  62  122:bipush          15
	//*  63  124:icmpgt          132
			flag = true;
	//   64  127:iconst_1        
	//   65  128:istore_0        
		else
	//*  66  129:goto            134
			flag = false;
	//   67  132:iconst_0        
	//   68  133:istore_0        
		FORCE_ABS_FOCUS_SEARCH_DIRECTION = flag;
	//   69  134:iload_0         
	//   70  135:putstatic       #338 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  71  138:getstatic       #328 <Field int android.os.Build$VERSION.SDK_INT>
	//*  72  141:bipush          15
	//*  73  143:icmpgt          151
			flag = true;
	//   74  146:iconst_1        
	//   75  147:istore_0        
		else
	//*  76  148:goto            153
			flag = false;
	//   77  151:iconst_0        
	//   78  152:istore_0        
		IGNORE_DETACHED_FOCUSED_CHILD = flag;
	//   79  153:iload_0         
	//   80  154:putstatic       #340 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
		LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE = (new Class[] {
			android/content/Context, android/util/AttributeSet, Integer.TYPE, Integer.TYPE
		});
	//   81  157:iconst_4        
	//   82  158:anewarray       Class[]
	//   83  161:dup             
	//   84  162:iconst_0        
	//   85  163:ldc2            #344 <Class Context>
	//   86  166:aastore         
	//   87  167:dup             
	//   88  168:iconst_1        
	//   89  169:ldc2            #346 <Class AttributeSet>
	//   90  172:aastore         
	//   91  173:dup             
	//   92  174:iconst_2        
	//   93  175:getstatic       #352 <Field Class Integer.TYPE>
	//   94  178:aastore         
	//   95  179:dup             
	//   96  180:iconst_3        
	//   97  181:getstatic       #352 <Field Class Integer.TYPE>
	//   98  184:aastore         
	//   99  185:putstatic       #354 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//  100  188:new             #14  <Class RecyclerView$3>
	//  101  191:dup             
	//  102  192:invokespecial   #357 <Method void RecyclerView$3()>
	//  103  195:putstatic       #359 <Field Interpolator sQuinticInterpolator>
	//* 104  198:return          
	}


/*
	static void access$000(RecyclerView recyclerview, View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
	{
		recyclerview.attachViewToParent(view, i, layoutparams);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iload_2         
	//    3    3:aload_3         
	//    4    4:invokevirtual   #638 <Method void attachViewToParent(View, int, android.view.ViewGroup$LayoutParams)>
		return;
	//    5    7:return          
	}

*/


/*
	static void access$100(RecyclerView recyclerview, int i)
	{
		recyclerview.detachViewFromParent(i);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:invokevirtual   #643 <Method void detachViewFromParent(int)>
		return;
	//    3    5:return          
	}

*/


/*
	static boolean access$200(RecyclerView recyclerview)
	{
		return recyclerview.awakenScrollBars();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #649 <Method boolean awakenScrollBars()>
	//    2    4:ireturn         
	}

*/


/*
	static void access$300(RecyclerView recyclerview, int i, int j)
	{
		recyclerview.setMeasuredDimension(i, j);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:invokevirtual   #655 <Method void setMeasuredDimension(int, int)>
		return;
	//    4    6:return          
	}

*/

	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$1

/* anonymous class */
	class LayoutManager._cls1
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedRight(view) + layoutparams.rightMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedRight(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.rightMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedLeft(view) - layoutparams.leftMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedLeft(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.leftMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getWidth() - getPaddingRight();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getWidth()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingRight()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingLeft()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}


	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$2

/* anonymous class */
	class LayoutManager._cls2
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedBottom(view) + layoutparams.bottomMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedBottom(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.bottomMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedTop(view) - layoutparams.topMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedTop(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.topMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getHeight() - getPaddingBottom();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getHeight()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingBottom()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingTop();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingTop()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}

}
