// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate safe 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.*;
import android.support.v4.os.TraceCompat;
import android.support.v4.view.*;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.*;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import java.lang.annotation.Annotation;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package android.support.v7.widget:
//			ViewInfoStore, DefaultItemAnimator, RecyclerViewAccessibilityDelegate, ChildHelper, 
//			AdapterHelper, FastScroller, GapWorker, ViewBoundsCheck

public class RecyclerView extends ViewGroup
	implements NestedScrollingChild2, ScrollingView
{
	public static abstract class Adapter
	{

		public final void bindViewHolder(ViewHolder viewholder, int i)
		{
			viewholder.mPosition = i;
		//    0    0:aload_1         
		//    1    1:iload_2         
		//    2    2:putfield        #32  <Field int RecyclerView$ViewHolder.mPosition>
			if(hasStableIds())
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #36  <Method boolean hasStableIds()>
		//*   5    9:ifeq            21
				viewholder.mItemId = getItemId(i);
		//    6   12:aload_1         
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:invokevirtual   #40  <Method long getItemId(int)>
		//   10   18:putfield        #44  <Field long RecyclerView$ViewHolder.mItemId>
			viewholder.setFlags(1, 519);
		//   11   21:aload_1         
		//   12   22:iconst_1        
		//   13   23:sipush          519
		//   14   26:invokevirtual   #48  <Method void RecyclerView$ViewHolder.setFlags(int, int)>
			TraceCompat.beginSection("RV OnBindView");
		//   15   29:ldc1            #50  <String "RV OnBindView">
		//   16   31:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			onBindViewHolder(viewholder, i, viewholder.getUnmodifiedPayloads());
		//   17   34:aload_0         
		//   18   35:aload_1         
		//   19   36:iload_2         
		//   20   37:aload_1         
		//   21   38:invokevirtual   #60  <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//   22   41:invokevirtual   #64  <Method void onBindViewHolder(RecyclerView$ViewHolder, int, List)>
			viewholder.clearPayload();
		//   23   44:aload_1         
		//   24   45:invokevirtual   #67  <Method void RecyclerView$ViewHolder.clearPayload()>
			viewholder = ((ViewHolder) (viewholder.itemView.getLayoutParams()));
		//   25   48:aload_1         
		//   26   49:getfield        #71  <Field View RecyclerView$ViewHolder.itemView>
		//   27   52:invokevirtual   #77  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   28   55:astore_1        
			if(viewholder instanceof LayoutParams)
		//*  29   56:aload_1         
		//*  30   57:instanceof      #79  <Class RecyclerView$LayoutParams>
		//*  31   60:ifeq            71
				((LayoutParams)viewholder).mInsetsDirty = true;
		//   32   63:aload_1         
		//   33   64:checkcast       #79  <Class RecyclerView$LayoutParams>
		//   34   67:iconst_1        
		//   35   68:putfield        #82  <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			TraceCompat.endSection();
		//   36   71:invokestatic    #85  <Method void TraceCompat.endSection()>
		//   37   74:return          
		}

		public final ViewHolder createViewHolder(ViewGroup viewgroup, int i)
		{
			TraceCompat.beginSection("RV CreateView");
		//    0    0:ldc1            #91  <String "RV CreateView">
		//    1    2:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			viewgroup = ((ViewGroup) (onCreateViewHolder(viewgroup, i)));
		//    2    5:aload_0         
		//    3    6:aload_1         
		//    4    7:iload_2         
		//    5    8:invokevirtual   #94  <Method RecyclerView$ViewHolder onCreateViewHolder(ViewGroup, int)>
		//    6   11:astore_1        
			viewgroup.mItemViewType = i;
		//    7   12:aload_1         
		//    8   13:iload_2         
		//    9   14:putfield        #97  <Field int RecyclerView$ViewHolder.mItemViewType>
			TraceCompat.endSection();
		//   10   17:invokestatic    #85  <Method void TraceCompat.endSection()>
			return ((ViewHolder) (viewgroup));
		//   11   20:aload_1         
		//   12   21:areturn         
		}

		public abstract int getItemCount();

		public long getItemId(int i)
		{
			return -1L;
		//    0    0:ldc2w           #101 <Long -1L>
		//    1    3:lreturn         
		}

		public int getItemViewType(int i)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public final boolean hasObservers()
		{
			return mObservable.hasObservers();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #107 <Method boolean RecyclerView$AdapterDataObservable.hasObservers()>
		//    3    7:ireturn         
		}

		public final boolean hasStableIds()
		{
			return mHasStableIds;
		//    0    0:aload_0         
		//    1    1:getfield        #23  <Field boolean mHasStableIds>
		//    2    4:ireturn         
		}

		public final void notifyDataSetChanged()
		{
			mObservable.notifyChanged();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #111 <Method void RecyclerView$AdapterDataObservable.notifyChanged()>
		//    3    7:return          
		}

		public final void notifyItemChanged(int i)
		{
			mObservable.notifyItemRangeChanged(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemChanged(int i, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, 1, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:aload_2         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemInserted(int i)
		{
			mObservable.notifyItemRangeInserted(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemMoved(int i, int j)
		{
			mObservable.notifyItemMoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #127 <Method void RecyclerView$AdapterDataObservable.notifyItemMoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j)
		{
			mObservable.notifyItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, j, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:aload_3         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemRangeInserted(int i, int j)
		{
			mObservable.notifyItemRangeInserted(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeRemoved(int i, int j)
		{
			mObservable.notifyItemRangeRemoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRemoved(int i)
		{
			mObservable.notifyItemRangeRemoved(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public void onAttachedToRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public abstract void onBindViewHolder(ViewHolder viewholder, int i);

		public void onBindViewHolder(ViewHolder viewholder, int i, List list)
		{
			onBindViewHolder(viewholder, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #135 <Method void onBindViewHolder(RecyclerView$ViewHolder, int)>
		//    4    6:return          
		}

		public abstract ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i);

		public void onDetachedFromRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public boolean onFailedToRecycleView(ViewHolder viewholder)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onViewAttachedToWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewDetachedFromWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewRecycled(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void registerAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.registerObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #151 <Method void RecyclerView$AdapterDataObservable.registerObserver(Object)>
		//    4    8:return          
		}

		public void setHasStableIds(boolean flag)
		{
			if(hasObservers())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #154 <Method boolean hasObservers()>
		//*   2    4:ifeq            17
			{
				throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
		//    3    7:new             #156 <Class IllegalStateException>
		//    4   10:dup             
		//    5   11:ldc1            #158 <String "Cannot change whether this adapter has stable IDs while the adapter has registered observers.">
		//    6   13:invokespecial   #160 <Method void IllegalStateException(String)>
		//    7   16:athrow          
			} else
			{
				mHasStableIds = flag;
		//    8   17:aload_0         
		//    9   18:iload_1         
		//   10   19:putfield        #23  <Field boolean mHasStableIds>
				return;
		//   11   22:return          
			}
		}

		public void unregisterAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.unregisterObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #164 <Method void RecyclerView$AdapterDataObservable.unregisterObserver(Object)>
		//    4    8:return          
		}

		private boolean mHasStableIds;
		private final AdapterDataObservable mObservable = new AdapterDataObservable();

		public Adapter()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #16  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #18  <Class RecyclerView$AdapterDataObservable>
		//    4    8:dup             
		//    5    9:invokespecial   #19  <Method void RecyclerView$AdapterDataObservable()>
		//    6   12:putfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
			mHasStableIds = false;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #23  <Field boolean mHasStableIds>
		//   10   20:return          
		}
	}

	static class AdapterDataObservable extends Observable
	{

		public boolean hasObservers()
		{
			return !mObservers.isEmpty();
		//    0    0:aload_0         
		//    1    1:getfield        #19  <Field ArrayList mObservers>
		//    2    4:invokevirtual   #24  <Method boolean ArrayList.isEmpty()>
		//    3    7:ifne            12
		//    4   10:iconst_1        
		//    5   11:ireturn         
		//    6   12:iconst_0        
		//    7   13:ireturn         
		}

		public void notifyChanged()
		{
			for(int i = mObservers.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            35
				((AdapterDataObserver)mObservers.get(i)).onChanged();
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_1         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:invokevirtual   #38  <Method void RecyclerView$AdapterDataObserver.onChanged()>

		//   14   28:iload_1         
		//   15   29:iconst_1        
		//   16   30:isub            
		//   17   31:istore_1        
		//*  18   32:goto            10
		//   19   35:return          
		}

		public void notifyItemMoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            38
				((AdapterDataObserver)mObservers.get(k)).onItemRangeMoved(i, j, 1);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:iconst_1        
		//   16   28:invokevirtual   #44  <Method void RecyclerView$AdapterDataObserver.onItemRangeMoved(int, int, int)>

		//   17   31:iload_3         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_3        
		//*  21   35:goto            10
		//   22   38:return          
		}

		public void notifyItemRangeChanged(int i, int j)
		{
			notifyItemRangeChanged(i, j, ((Object) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aconst_null     
		//    4    4:invokevirtual   #48  <Method void notifyItemRangeChanged(int, int, Object)>
		//    5    7:return          
		}

		public void notifyItemRangeChanged(int i, int j, Object obj)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            43
				((AdapterDataObserver)mObservers.get(k)).onItemRangeChanged(i, j, obj);
		//    8   16:aload_0         
		//    9   17:getfield        #19  <Field ArrayList mObservers>
		//   10   20:iload           4
		//   11   22:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   28:iload_1         
		//   14   29:iload_2         
		//   15   30:aload_3         
		//   16   31:invokevirtual   #51  <Method void RecyclerView$AdapterDataObserver.onItemRangeChanged(int, int, Object)>

		//   17   34:iload           4
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:istore          4
		//*  21   40:goto            11
		//   22   43:return          
		}

		public void notifyItemRangeInserted(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeInserted(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #55  <Method void RecyclerView$AdapterDataObserver.onItemRangeInserted(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		public void notifyItemRangeRemoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeRemoved(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #59  <Method void RecyclerView$AdapterDataObserver.onItemRangeRemoved(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		AdapterDataObservable()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #12  <Method void Observable()>
		//    2    4:return          
		}
	}

	public static abstract class AdapterDataObserver
	{

		public void onChanged()
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			onItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #18  <Method void onItemRangeChanged(int, int)>
		//    4    6:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
		//    0    0:return          
		}

		public AdapterDataObserver()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface ChildDrawingOrderCallback
	{

		public abstract int onGetChildDrawingOrder(int i, int j);
	}

	public static abstract class ItemAnimator
	{

		static int buildAdapterChangeFlagsForAnimations(ViewHolder viewholder)
		{
			int j = viewholder.mFlags & 0xe;
		//    0    0:aload_0         
		//    1    1:invokestatic    #71  <Method int RecyclerView$ViewHolder.access$1600(RecyclerView$ViewHolder)>
		//    2    4:bipush          14
		//    3    6:iand            
		//    4    7:istore_2        
			int i;
			if(viewholder.isInvalid())
		//*   5    8:aload_0         
		//*   6    9:invokevirtual   #75  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   7   12:ifeq            19
			{
				i = 4;
		//    8   15:iconst_4        
		//    9   16:istore_1        
			} else
		//*  10   17:iload_1         
		//*  11   18:ireturn         
			{
				i = j;
		//   12   19:iload_2         
		//   13   20:istore_1        
				if((j & 4) == 0)
		//*  14   21:iload_2         
		//*  15   22:iconst_4        
		//*  16   23:iand            
		//*  17   24:ifne            17
				{
					int k = viewholder.getOldPosition();
		//   18   27:aload_0         
		//   19   28:invokevirtual   #79  <Method int RecyclerView$ViewHolder.getOldPosition()>
		//   20   31:istore_3        
					int l = viewholder.getAdapterPosition();
		//   21   32:aload_0         
		//   22   33:invokevirtual   #82  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//   23   36:istore          4
					i = j;
		//   24   38:iload_2         
		//   25   39:istore_1        
					if(k != -1)
		//*  26   40:iload_3         
		//*  27   41:iconst_m1       
		//*  28   42:icmpeq          17
					{
						i = j;
		//   29   45:iload_2         
		//   30   46:istore_1        
						if(l != -1)
		//*  31   47:iload           4
		//*  32   49:iconst_m1       
		//*  33   50:icmpeq          17
						{
							i = j;
		//   34   53:iload_2         
		//   35   54:istore_1        
							if(k != l)
		//*  36   55:iload_3         
		//*  37   56:iload           4
		//*  38   58:icmpeq          17
								return j | 0x800;
		//   39   61:iload_2         
		//   40   62:sipush          2048
		//   41   65:ior             
		//   42   66:ireturn         
						}
					}
				}
			}
			return i;
		}

		public abstract boolean animateAppearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateDisappearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animatePersistence(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
		{
			return true;
		//    0    0:iconst_1        
		//    1    1:ireturn         
		}

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder, List list)
		{
			return canReuseUpdatedViewHolder(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #96  <Method boolean canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//    3    5:ireturn         
		}

		public final void dispatchAnimationFinished(ViewHolder viewholder)
		{
			onAnimationFinished(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #103 <Method void onAnimationFinished(RecyclerView$ViewHolder)>
			if(mListener != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//*   5    9:ifnull          22
				mListener.onAnimationFinished(viewholder);
		//    6   12:aload_0         
		//    7   13:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    8   16:aload_1         
		//    9   17:invokeinterface #104 <Method void RecyclerView$ItemAnimator$ItemAnimatorListener.onAnimationFinished(RecyclerView$ViewHolder)>
		//   10   22:return          
		}

		public final void dispatchAnimationStarted(ViewHolder viewholder)
		{
			onAnimationStarted(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #108 <Method void onAnimationStarted(RecyclerView$ViewHolder)>
		//    3    5:return          
		}

		public final void dispatchAnimationsFinished()
		{
			int j = mFinishedListeners.size();
		//    0    0:aload_0         
		//    1    1:getfield        #51  <Field ArrayList mFinishedListeners>
		//    2    4:invokevirtual   #112 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          38
				((ItemAnimatorFinishedListener)mFinishedListeners.get(i)).onAnimationsFinished();
		//    9   15:aload_0         
		//   10   16:getfield        #51  <Field ArrayList mFinishedListeners>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #116 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #12  <Class RecyclerView$ItemAnimator$ItemAnimatorFinishedListener>
		//   14   26:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>

		//   15   31:iload_1         
		//   16   32:iconst_1        
		//   17   33:iadd            
		//   18   34:istore_1        
		//*  19   35:goto            10
			mFinishedListeners.clear();
		//   20   38:aload_0         
		//   21   39:getfield        #51  <Field ArrayList mFinishedListeners>
		//   22   42:invokevirtual   #122 <Method void ArrayList.clear()>
		//   23   45:return          
		}

		public abstract void endAnimation(ViewHolder viewholder);

		public abstract void endAnimations();

		public long getAddDuration()
		{
			return mAddDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field long mAddDuration>
		//    2    4:lreturn         
		}

		public long getChangeDuration()
		{
			return mChangeDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #63  <Field long mChangeDuration>
		//    2    4:lreturn         
		}

		public long getMoveDuration()
		{
			return mMoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #61  <Field long mMoveDuration>
		//    2    4:lreturn         
		}

		public long getRemoveDuration()
		{
			return mRemoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #57  <Field long mRemoveDuration>
		//    2    4:lreturn         
		}

		public abstract boolean isRunning();

		public final boolean isRunning(ItemAnimatorFinishedListener itemanimatorfinishedlistener)
		{
			boolean flag;
label0:
			{
				flag = isRunning();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #133 <Method boolean isRunning()>
		//    2    4:istore_2        
				if(itemanimatorfinishedlistener != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          19
				{
					if(flag)
						break label0;
		//    5    9:iload_2         
		//    6   10:ifne            21
					itemanimatorfinishedlistener.onAnimationsFinished();
		//    7   13:aload_1         
		//    8   14:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>
				}
				return flag;
		//    9   19:iload_2         
		//   10   20:ireturn         
			}
			mFinishedListeners.add(((Object) (itemanimatorfinishedlistener)));
		//   11   21:aload_0         
		//   12   22:getfield        #51  <Field ArrayList mFinishedListeners>
		//   13   25:aload_1         
		//   14   26:invokevirtual   #137 <Method boolean ArrayList.add(Object)>
		//   15   29:pop             
			return flag;
		//   16   30:iload_2         
		//   17   31:ireturn         
		}

		public ItemHolderInfo obtainHolderInfo()
		{
			return new ItemHolderInfo();
		//    0    0:new             #18  <Class RecyclerView$ItemAnimator$ItemHolderInfo>
		//    1    3:dup             
		//    2    4:invokespecial   #140 <Method void RecyclerView$ItemAnimator$ItemHolderInfo()>
		//    3    7:areturn         
		}

		public void onAnimationFinished(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onAnimationStarted(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public ItemHolderInfo recordPostLayoutInformation(State state, ViewHolder viewholder)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public ItemHolderInfo recordPreLayoutInformation(State state, ViewHolder viewholder, int i, List list)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public abstract void runPendingAnimations();

		public void setAddDuration(long l)
		{
			mAddDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #55  <Field long mAddDuration>
		//    3    5:return          
		}

		public void setChangeDuration(long l)
		{
			mChangeDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #63  <Field long mChangeDuration>
		//    3    5:return          
		}

		void setListener(ItemAnimatorListener itemanimatorlistener)
		{
			mListener = itemanimatorlistener;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    3    5:return          
		}

		public void setMoveDuration(long l)
		{
			mMoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #61  <Field long mMoveDuration>
		//    3    5:return          
		}

		public void setRemoveDuration(long l)
		{
			mRemoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #57  <Field long mRemoveDuration>
		//    3    5:return          
		}

		public static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		public static final int FLAG_CHANGED = 2;
		public static final int FLAG_INVALIDATED = 4;
		public static final int FLAG_MOVED = 2048;
		public static final int FLAG_REMOVED = 8;
		private long mAddDuration;
		private long mChangeDuration;
		private ArrayList mFinishedListeners;
		private ItemAnimatorListener mListener;
		private long mMoveDuration;
		private long mRemoveDuration;

		public ItemAnimator()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #44  <Method void Object()>
			mListener = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
			mFinishedListeners = new ArrayList();
		//    5    9:aload_0         
		//    6   10:new             #48  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #49  <Method void ArrayList()>
		//    9   17:putfield        #51  <Field ArrayList mFinishedListeners>
			mAddDuration = 120L;
		//   10   20:aload_0         
		//   11   21:ldc2w           #52  <Long 120L>
		//   12   24:putfield        #55  <Field long mAddDuration>
			mRemoveDuration = 120L;
		//   13   27:aload_0         
		//   14   28:ldc2w           #52  <Long 120L>
		//   15   31:putfield        #57  <Field long mRemoveDuration>
			mMoveDuration = 250L;
		//   16   34:aload_0         
		//   17   35:ldc2w           #58  <Long 250L>
		//   18   38:putfield        #61  <Field long mMoveDuration>
			mChangeDuration = 250L;
		//   19   41:aload_0         
		//   20   42:ldc2w           #58  <Long 250L>
		//   21   45:putfield        #63  <Field long mChangeDuration>
		//   22   48:return          
		}
	}

	public static interface ItemAnimator.AdapterChanges
		extends Annotation
	{
	}

	public static interface ItemAnimator.ItemAnimatorFinishedListener
	{

		public abstract void onAnimationsFinished();
	}

	static interface ItemAnimator.ItemAnimatorListener
	{

		public abstract void onAnimationFinished(ViewHolder viewholder);
	}

	public static class ItemAnimator.ItemHolderInfo
	{

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder)
		{
			return setFrom(viewholder, 0);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #26  <Method RecyclerView$ItemAnimator$ItemHolderInfo setFrom(RecyclerView$ViewHolder, int)>
		//    4    6:areturn         
		}

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder, int i)
		{
			viewholder = ((ViewHolder) (viewholder.itemView));
		//    0    0:aload_1         
		//    1    1:getfield        #32  <Field View RecyclerView$ViewHolder.itemView>
		//    2    4:astore_1        
			left = ((View) (viewholder)).getLeft();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #38  <Method int View.getLeft()>
		//    6   10:putfield        #40  <Field int left>
			top = ((View) (viewholder)).getTop();
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:invokevirtual   #43  <Method int View.getTop()>
		//   10   18:putfield        #45  <Field int top>
			right = ((View) (viewholder)).getRight();
		//   11   21:aload_0         
		//   12   22:aload_1         
		//   13   23:invokevirtual   #48  <Method int View.getRight()>
		//   14   26:putfield        #50  <Field int right>
			bottom = ((View) (viewholder)).getBottom();
		//   15   29:aload_0         
		//   16   30:aload_1         
		//   17   31:invokevirtual   #53  <Method int View.getBottom()>
		//   18   34:putfield        #55  <Field int bottom>
			return this;
		//   19   37:aload_0         
		//   20   38:areturn         
		}

		public int bottom;
		public int changeFlags;
		public int left;
		public int right;
		public int top;

		public ItemAnimator.ItemHolderInfo()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	private class ItemAnimatorRestoreListener
		implements ItemAnimator.ItemAnimatorListener
	{

		public void onAnimationFinished(ViewHolder viewholder)
		{
			viewholder.setIsRecyclable(true);
		//    0    0:aload_1         
		//    1    1:iconst_1        
		//    2    2:invokevirtual   #27  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			if(viewholder.mShadowedHolder != null && viewholder.mShadowingHolder == null)
		//*   3    5:aload_1         
		//*   4    6:getfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
		//*   5    9:ifnull          24
		//*   6   12:aload_1         
		//*   7   13:getfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		//*   8   16:ifnonnull       24
				viewholder.mShadowedHolder = null;
		//    9   19:aload_1         
		//   10   20:aconst_null     
		//   11   21:putfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			viewholder.mShadowingHolder = null;
		//   12   24:aload_1         
		//   13   25:aconst_null     
		//   14   26:putfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
			if(!viewholder.shouldBeKeptAsChild() && !removeAnimatingView(viewholder.itemView) && viewholder.isTmpDetached())
		//*  15   29:aload_1         
		//*  16   30:invokestatic    #38  <Method boolean RecyclerView$ViewHolder.access$1500(RecyclerView$ViewHolder)>
		//*  17   33:ifne            69
		//*  18   36:aload_0         
		//*  19   37:getfield        #15  <Field RecyclerView this$0>
		//*  20   40:aload_1         
		//*  21   41:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   44:invokevirtual   #46  <Method boolean RecyclerView.removeAnimatingView(View)>
		//*  23   47:ifne            69
		//*  24   50:aload_1         
		//*  25   51:invokevirtual   #50  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  26   54:ifeq            69
				removeDetachedView(viewholder.itemView, false);
		//   27   57:aload_0         
		//   28   58:getfield        #15  <Field RecyclerView this$0>
		//   29   61:aload_1         
		//   30   62:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//   31   65:iconst_0        
		//   32   66:invokevirtual   #54  <Method void RecyclerView.removeDetachedView(View, boolean)>
		//   33   69:return          
		}

		final RecyclerView this$0;

		ItemAnimatorRestoreListener()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #15  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #18  <Method void Object()>
		//    5    9:return          
		}
	}

	public static abstract class ItemDecoration
	{

		public void getItemOffsets(Rect rect, int i, RecyclerView recyclerview)
		{
			rect.set(0, 0, 0, 0);
		//    0    0:aload_1         
		//    1    1:iconst_0        
		//    2    2:iconst_0        
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #21  <Method void Rect.set(int, int, int, int)>
		//    6    8:return          
		}

		public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, State state)
		{
			getItemOffsets(rect, ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition(), recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #29  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    6:checkcast       #31  <Class RecyclerView$LayoutParams>
		//    5    9:invokevirtual   #35  <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    6   12:aload_3         
		//    7   13:invokevirtual   #37  <Method void getItemOffsets(Rect, int, RecyclerView)>
		//    8   16:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDraw(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #42  <Method void onDraw(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDrawOver(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #45  <Method void onDrawOver(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public ItemDecoration()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class LayoutManager
	{

		private void addViewInt(View view, int i, boolean flag)
		{
			ViewHolder viewholder;
			LayoutParams layoutparams;
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          6
			if(flag || viewholder.isRemoved())
		//*   3    6:iload_3         
		//*   4    7:ifne            18
		//*   5   10:aload           6
		//*   6   12:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   15:ifeq            105
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    8   18:aload_0         
		//    9   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//   10   22:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   11   25:aload           6
		//   12   27:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  13   30:aload_1         
		//*  14   31:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  15   34:checkcast       #113 <Class RecyclerView$LayoutParams>
		//*  16   37:astore          7
		//*  17   39:aload           6
		//*  18   41:invokevirtual   #116 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   44:ifne            55
		//*  20   47:aload           6
		//*  21   49:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  22   52:ifeq            128
		//*  23   55:aload           6
		//*  24   57:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  25   60:ifeq            120
		//*  26   63:aload           6
		//*  27   65:invokevirtual   #122 <Method void RecyclerView$ViewHolder.unScrap()>
		//*  28   68:aload_0         
		//*  29   69:getfield        #124 <Field ChildHelper mChildHelper>
		//*  30   72:aload_1         
		//*  31   73:iload_2         
		//*  32   74:aload_1         
		//*  33   75:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  34   78:iconst_0        
		//*  35   79:invokevirtual   #130 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//*  36   82:aload           7
		//*  37   84:getfield        #133 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  38   87:ifeq            104
		//*  39   90:aload           6
		//*  40   92:getfield        #137 <Field View RecyclerView$ViewHolder.itemView>
		//*  41   95:invokevirtual   #140 <Method void View.invalidate()>
		//*  42   98:aload           7
		//*  43  100:iconst_0        
		//*  44  101:putfield        #133 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  45  104:return          
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   46  105:aload_0         
		//   47  106:getfield        #95  <Field RecyclerView mRecyclerView>
		//   48  109:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   49  112:aload           6
		//   50  114:invokevirtual   #143 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			layoutparams = (LayoutParams)view.getLayoutParams();
			if(!viewholder.wasReturnedFromScrap() && !viewholder.isScrap()) goto _L2; else goto _L1
_L1:
			if(viewholder.isScrap())
				viewholder.unScrap();
			else
		//*  51  117:goto            30
				viewholder.clearReturnedFromScrapFlag();
		//   52  120:aload           6
		//   53  122:invokevirtual   #146 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			mChildHelper.attachViewToParent(view, i, view.getLayoutParams(), false);
_L4:
			if(layoutparams.mPendingInvalidate)
			{
				viewholder.itemView.invalidate();
				layoutparams.mPendingInvalidate = false;
			}
			return;
		//*  54  125:goto            68
_L2:
			if(view.getParent() == mRecyclerView)
		//*  55  128:aload_1         
		//*  56  129:invokevirtual   #150 <Method ViewParent View.getParent()>
		//*  57  132:aload_0         
		//*  58  133:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  59  136:if_acmpne       240
			{
				int k = mChildHelper.indexOfChild(view);
		//   60  139:aload_0         
		//   61  140:getfield        #124 <Field ChildHelper mChildHelper>
		//   62  143:aload_1         
		//   63  144:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//   64  147:istore          5
				int j = i;
		//   65  149:iload_2         
		//   66  150:istore          4
				if(i == -1)
		//*  67  152:iload_2         
		//*  68  153:iconst_m1       
		//*  69  154:icmpne          166
					j = mChildHelper.getChildCount();
		//   70  157:aload_0         
		//   71  158:getfield        #124 <Field ChildHelper mChildHelper>
		//   72  161:invokevirtual   #158 <Method int ChildHelper.getChildCount()>
		//   73  164:istore          4
				if(k == -1)
		//*  74  166:iload           5
		//*  75  168:iconst_m1       
		//*  76  169:icmpne          216
					throw new IllegalStateException((new StringBuilder()).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:").append(mRecyclerView.indexOfChild(view)).append(mRecyclerView.exceptionLabel()).toString());
		//   77  172:new             #160 <Class IllegalStateException>
		//   78  175:dup             
		//   79  176:new             #162 <Class StringBuilder>
		//   80  179:dup             
		//   81  180:invokespecial   #163 <Method void StringBuilder()>
		//   82  183:ldc1            #165 <String "Added View has RecyclerView as parent but view is not a real child. Unfiltered index:">
		//   83  185:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   84  188:aload_0         
		//   85  189:getfield        #95  <Field RecyclerView mRecyclerView>
		//   86  192:aload_1         
		//   87  193:invokevirtual   #170 <Method int RecyclerView.indexOfChild(View)>
		//   88  196:invokevirtual   #173 <Method StringBuilder StringBuilder.append(int)>
		//   89  199:aload_0         
		//   90  200:getfield        #95  <Field RecyclerView mRecyclerView>
		//   91  203:invokevirtual   #177 <Method String RecyclerView.exceptionLabel()>
		//   92  206:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   93  209:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   94  212:invokespecial   #183 <Method void IllegalStateException(String)>
		//   95  215:athrow          
				if(k != j)
		//*  96  216:iload           5
		//*  97  218:iload           4
		//*  98  220:icmpeq          82
					mRecyclerView.mLayout.moveView(k, j);
		//   99  223:aload_0         
		//  100  224:getfield        #95  <Field RecyclerView mRecyclerView>
		//  101  227:getfield        #187 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//  102  230:iload           5
		//  103  232:iload           4
		//  104  234:invokevirtual   #191 <Method void moveView(int, int)>
			} else
		//* 105  237:goto            82
			{
				mChildHelper.addView(view, i, false);
		//  106  240:aload_0         
		//  107  241:getfield        #124 <Field ChildHelper mChildHelper>
		//  108  244:aload_1         
		//  109  245:iload_2         
		//  110  246:iconst_0        
		//  111  247:invokevirtual   #194 <Method void ChildHelper.addView(View, int, boolean)>
				layoutparams.mInsetsDirty = true;
		//  112  250:aload           7
		//  113  252:iconst_1        
		//  114  253:putfield        #197 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
				if(mSmoothScroller != null && mSmoothScroller.isRunning())
		//* 115  256:aload_0         
		//* 116  257:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 117  260:ifnull          82
		//* 118  263:aload_0         
		//* 119  264:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 120  267:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 121  270:ifeq            82
					mSmoothScroller.onChildAttachedToWindow(view);
		//  122  273:aload_0         
		//  123  274:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  124  277:aload_1         
		//  125  278:invokevirtual   #208 <Method void RecyclerView$SmoothScroller.onChildAttachedToWindow(View)>
			}
			if(true) goto _L4; else goto _L3
		//  126  281:goto            82
_L3:
		}

		public static int chooseSize(int i, int j, int k)
		{
			int i1 = android.view.View.MeasureSpec.getMode(i);
		//    0    0:iload_0         
		//    1    1:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore          4
			int l = android.view.View.MeasureSpec.getSize(i);
		//    3    6:iload_0         
		//    4    7:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5   10:istore_3        
			i = l;
		//    6   11:iload_3         
		//    7   12:istore_0        
			switch(i1)
		//*   8   13:iload           4
			{
		//*   9   15:lookupswitch    2: default 40
		//		               -2147483648: 48
		//		               1073741824: 46
			default:
				i = Math.max(j, k);
		//   10   40:iload_1         
		//   11   41:iload_2         
		//   12   42:invokestatic    #225 <Method int Math.max(int, int)>
		//   13   45:istore_0        
				// fall through

			case 1073741824: 
				return i;
		//   14   46:iload_0         
		//   15   47:ireturn         

			case -2147483648: 
				return Math.min(l, Math.max(j, k));
		//   16   48:iload_3         
		//   17   49:iload_1         
		//   18   50:iload_2         
		//   19   51:invokestatic    #225 <Method int Math.max(int, int)>
		//   20   54:invokestatic    #228 <Method int Math.min(int, int)>
		//   21   57:ireturn         
			}
		}

		private void detachViewInternal(int i, View view)
		{
			mChildHelper.detachViewFromParent(i);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #234 <Method void ChildHelper.detachViewFromParent(int)>
		//    4    8:return          
		}

		public static int getChildMeasureSpec(int i, int j, int k, int l, boolean flag)
		{
			int i1;
			boolean flag1;
			boolean flag2;
			flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          6
			flag2 = false;
		//    2    3:iconst_0        
		//    3    4:istore          7
			i1 = Math.max(0, i - k);
		//    4    6:iconst_0        
		//    5    7:iload_0         
		//    6    8:iload_2         
		//    7    9:isub            
		//    8   10:invokestatic    #225 <Method int Math.max(int, int)>
		//    9   13:istore          5
			if(!flag) goto _L2; else goto _L1
		//   10   15:iload           4
		//   11   17:ifeq            116
_L1:
			if(l < 0) goto _L4; else goto _L3
		//   12   20:iload_3         
		//   13   21:iflt            35
_L3:
			i = 0x40000000;
		//   14   24:ldc1            #237 <Int 0x40000000>
		//   15   26:istore_0        
			k = l;
		//   16   27:iload_3         
		//   17   28:istore_2        
_L13:
			return android.view.View.MeasureSpec.makeMeasureSpec(k, i);
		//   18   29:iload_2         
		//   19   30:iload_0         
		//   20   31:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   21   34:ireturn         
_L4:
			if(l != -1) goto _L6; else goto _L5
		//   22   35:iload_3         
		//   23   36:iconst_m1       
		//   24   37:icmpne          102
_L5:
			j;
		//   25   40:iload_1         
			JVM INSTR lookupswitch 3: default 76
		//		               -2147483648: 88
		//		               0: 94
		//		               1073741824: 88;
		//   26   41:lookupswitch    3: default 76
		//		               -2147483648: 88
		//		               0: 94
		//		               1073741824: 88
			   goto _L7 _L8 _L9 _L8
_L7:
			j = 0;
		//   27   76:iconst_0        
		//   28   77:istore_1        
			i = ((int) (flag1));
		//   29   78:iload           6
		//   30   80:istore_0        
_L10:
			k = i;
		//   31   81:iload_0         
		//   32   82:istore_2        
			i = j;
		//   33   83:iload_1         
		//   34   84:istore_0        
			continue; /* Loop/switch isn't completed */
		//   35   85:goto            29
_L8:
			i = i1;
		//   36   88:iload           5
		//   37   90:istore_0        
			continue; /* Loop/switch isn't completed */
		//   38   91:goto            81
_L9:
			j = 0;
		//   39   94:iconst_0        
		//   40   95:istore_1        
			i = ((int) (flag1));
		//   41   96:iload           6
		//   42   98:istore_0        
			if(true) goto _L10; else goto _L6
		//   43   99:goto            81
_L6:
			if(l == -2)
		//*  44  102:iload_3         
		//*  45  103:bipush          -2
		//*  46  105:icmpne          174
			{
				k = 0;
		//   47  108:iconst_0        
		//   48  109:istore_2        
				i = ((int) (flag2));
		//   49  110:iload           7
		//   50  112:istore_0        
				continue; /* Loop/switch isn't completed */
		//   51  113:goto            29
			}
			  goto _L11
_L2:
			if(l >= 0)
		//*  52  116:iload_3         
		//*  53  117:iflt            128
			{
				i = 0x40000000;
		//   54  120:ldc1            #237 <Int 0x40000000>
		//   55  122:istore_0        
				k = l;
		//   56  123:iload_3         
		//   57  124:istore_2        
				continue; /* Loop/switch isn't completed */
		//   58  125:goto            29
			}
			if(l == -1)
		//*  59  128:iload_3         
		//*  60  129:iconst_m1       
		//*  61  130:icmpne          141
			{
				i = j;
		//   62  133:iload_1         
		//   63  134:istore_0        
				k = i1;
		//   64  135:iload           5
		//   65  137:istore_2        
				continue; /* Loop/switch isn't completed */
		//   66  138:goto            29
			}
			if(l == -2)
		//*  67  141:iload_3         
		//*  68  142:bipush          -2
		//*  69  144:icmpne          174
			{
				if(j != 0x80000000)
		//*  70  147:iload_1         
		//*  71  148:ldc1            #241 <Int 0x80000000>
		//*  72  150:icmpeq          165
				{
					i = ((int) (flag2));
		//   73  153:iload           7
		//   74  155:istore_0        
					k = i1;
		//   75  156:iload           5
		//   76  158:istore_2        
					if(j != 0x40000000)
						continue; /* Loop/switch isn't completed */
		//   77  159:iload_1         
		//   78  160:ldc1            #237 <Int 0x40000000>
		//   79  162:icmpne          29
				}
				i = 0x80000000;
		//   80  165:ldc1            #241 <Int 0x80000000>
		//   81  167:istore_0        
				k = i1;
		//   82  168:iload           5
		//   83  170:istore_2        
				continue; /* Loop/switch isn't completed */
		//   84  171:goto            29
			}
_L11:
			k = 0;
		//   85  174:iconst_0        
		//   86  175:istore_2        
			i = ((int) (flag2));
		//   87  176:iload           7
		//   88  178:istore_0        
			if(true) goto _L13; else goto _L12
		//   89  179:goto            29
_L12:
		}

		public static int getChildMeasureSpec(int i, int j, int k, boolean flag)
		{
			int l;
			int i1;
			i1 = 0x40000000;
		//    0    0:ldc1            #237 <Int 0x40000000>
		//    1    2:istore          5
			l = Math.max(0, i - j);
		//    2    4:iconst_0        
		//    3    5:iload_0         
		//    4    6:iload_1         
		//    5    7:isub            
		//    6    8:invokestatic    #225 <Method int Math.max(int, int)>
		//    7   11:istore          4
			if(!flag) goto _L2; else goto _L1
		//    8   13:iload_3         
		//    9   14:ifeq            39
_L1:
			if(k >= 0)
		//*  10   17:iload_2         
		//*  11   18:iflt            32
			{
				i = k;
		//   12   21:iload_2         
		//   13   22:istore_0        
				j = i1;
		//   14   23:iload           5
		//   15   25:istore_1        
			} else
		//*  16   26:iload_0         
		//*  17   27:iload_1         
		//*  18   28:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//*  19   31:ireturn         
			{
				j = 0;
		//   20   32:iconst_0        
		//   21   33:istore_1        
				i = 0;
		//   22   34:iconst_0        
		//   23   35:istore_0        
			}
_L4:
			return android.view.View.MeasureSpec.makeMeasureSpec(i, j);
		//*  24   36:goto            26
_L2:
			j = i1;
		//   25   39:iload           5
		//   26   41:istore_1        
			i = k;
		//   27   42:iload_2         
		//   28   43:istore_0        
			if(k < 0)
		//*  29   44:iload_2         
		//*  30   45:ifge            26
				if(k == -1)
		//*  31   48:iload_2         
		//*  32   49:iconst_m1       
		//*  33   50:icmpne          62
				{
					i = l;
		//   34   53:iload           4
		//   35   55:istore_0        
					j = i1;
		//   36   56:iload           5
		//   37   58:istore_1        
				} else
		//*  38   59:goto            26
				if(k == -2)
		//*  39   62:iload_2         
		//*  40   63:bipush          -2
		//*  41   65:icmpne          77
				{
					j = 0x80000000;
		//   42   68:ldc1            #241 <Int 0x80000000>
		//   43   70:istore_1        
					i = l;
		//   44   71:iload           4
		//   45   73:istore_0        
				} else
		//*  46   74:goto            26
				{
					j = 0;
		//   47   77:iconst_0        
		//   48   78:istore_1        
					i = 0;
		//   49   79:iconst_0        
		//   50   80:istore_0        
				}
			if(true) goto _L4; else goto _L3
		//   51   81:goto            26
_L3:
		}

		private int[] getChildRectangleOnScreenScrollAmount(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			int k1 = getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #249 <Method int getPaddingLeft()>
		//    2    4:istore          11
			int l = getPaddingTop();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #252 <Method int getPaddingTop()>
		//    5   10:istore          8
			int l1 = getWidth() - getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #255 <Method int getWidth()>
		//    8   16:aload_0         
		//    9   17:invokevirtual   #258 <Method int getPaddingRight()>
		//   10   20:isub            
		//   11   21:istore          12
			int j1 = getHeight();
		//   12   23:aload_0         
		//   13   24:invokevirtual   #261 <Method int getHeight()>
		//   14   27:istore          10
			int k2 = getPaddingBottom();
		//   15   29:aload_0         
		//   16   30:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   33:istore          15
			int i2 = (view.getLeft() + rect.left) - view.getScrollX();
		//   18   35:aload_2         
		//   19   36:invokevirtual   #267 <Method int View.getLeft()>
		//   20   39:aload_3         
		//   21   40:getfield        #272 <Field int Rect.left>
		//   22   43:iadd            
		//   23   44:aload_2         
		//   24   45:invokevirtual   #275 <Method int View.getScrollX()>
		//   25   48:isub            
		//   26   49:istore          13
			int i1 = (view.getTop() + rect.top) - view.getScrollY();
		//   27   51:aload_2         
		//   28   52:invokevirtual   #278 <Method int View.getTop()>
		//   29   55:aload_3         
		//   30   56:getfield        #281 <Field int Rect.top>
		//   31   59:iadd            
		//   32   60:aload_2         
		//   33   61:invokevirtual   #284 <Method int View.getScrollY()>
		//   34   64:isub            
		//   35   65:istore          9
			int j2 = i2 + rect.width();
		//   36   67:iload           13
		//   37   69:aload_3         
		//   38   70:invokevirtual   #287 <Method int Rect.width()>
		//   39   73:iadd            
		//   40   74:istore          14
			int l2 = rect.height();
		//   41   76:aload_3         
		//   42   77:invokevirtual   #290 <Method int Rect.height()>
		//   43   80:istore          16
			int i = Math.min(0, i2 - k1);
		//   44   82:iconst_0        
		//   45   83:iload           13
		//   46   85:iload           11
		//   47   87:isub            
		//   48   88:invokestatic    #228 <Method int Math.min(int, int)>
		//   49   91:istore          5
			int j = Math.min(0, i1 - l);
		//   50   93:iconst_0        
		//   51   94:iload           9
		//   52   96:iload           8
		//   53   98:isub            
		//   54   99:invokestatic    #228 <Method int Math.min(int, int)>
		//   55  102:istore          6
			int k = Math.max(0, j2 - l1);
		//   56  104:iconst_0        
		//   57  105:iload           14
		//   58  107:iload           12
		//   59  109:isub            
		//   60  110:invokestatic    #225 <Method int Math.max(int, int)>
		//   61  113:istore          7
			j1 = Math.max(0, (i1 + l2) - (j1 - k2));
		//   62  115:iconst_0        
		//   63  116:iload           9
		//   64  118:iload           16
		//   65  120:iadd            
		//   66  121:iload           10
		//   67  123:iload           15
		//   68  125:isub            
		//   69  126:isub            
		//   70  127:invokestatic    #225 <Method int Math.max(int, int)>
		//   71  130:istore          10
			if(getLayoutDirection() == 1)
		//*  72  132:aload_0         
		//*  73  133:invokevirtual   #293 <Method int getLayoutDirection()>
		//*  74  136:iconst_1        
		//*  75  137:icmpne          183
			{
				if(k != 0)
		//*  76  140:iload           7
		//*  77  142:ifeq            168
					i = k;
		//   78  145:iload           7
		//   79  147:istore          5
				else
		//*  80  149:iload           6
		//*  81  151:ifeq            206
		//*  82  154:iconst_2        
		//*  83  155:newarray        int[]
		//*  84  157:dup             
		//*  85  158:iconst_0        
		//*  86  159:iload           5
		//*  87  161:iastore         
		//*  88  162:dup             
		//*  89  163:iconst_1        
		//*  90  164:iload           6
		//*  91  166:iastore         
		//*  92  167:areturn         
					i = Math.max(i, j2 - l1);
		//   93  168:iload           5
		//   94  170:iload           14
		//   95  172:iload           12
		//   96  174:isub            
		//   97  175:invokestatic    #225 <Method int Math.max(int, int)>
		//   98  178:istore          5
			} else
		//*  99  180:goto            149
			if(i == 0)
		//* 100  183:iload           5
		//* 101  185:ifeq            191
		//* 102  188:goto            149
				i = Math.min(i2 - k1, k);
		//  103  191:iload           13
		//  104  193:iload           11
		//  105  195:isub            
		//  106  196:iload           7
		//  107  198:invokestatic    #228 <Method int Math.min(int, int)>
		//  108  201:istore          5
			if(j == 0)
		//* 109  203:goto            188
				j = Math.min(i1 - l, j1);
		//  110  206:iload           9
		//  111  208:iload           8
		//  112  210:isub            
		//  113  211:iload           10
		//  114  213:invokestatic    #228 <Method int Math.min(int, int)>
		//  115  216:istore          6
			return (new int[] {
				i, j
			});
		//* 116  218:goto            154
		}

		public static Properties getProperties(Context context, AttributeSet attributeset, int i, int j)
		{
			Properties properties = new Properties();
		//    0    0:new             #16  <Class RecyclerView$LayoutManager$Properties>
		//    1    3:dup             
		//    2    4:invokespecial   #296 <Method void RecyclerView$LayoutManager$Properties()>
		//    3    7:astore          4
			context = ((Context) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, j)));
		//    4    9:aload_0         
		//    5   10:aload_1         
		//    6   11:getstatic       #302 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
		//    7   14:iload_2         
		//    8   15:iload_3         
		//    9   16:invokevirtual   #308 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
		//   10   19:astore_0        
			properties.orientation = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_orientation, 1);
		//   11   20:aload           4
		//   12   22:aload_0         
		//   13   23:getstatic       #311 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_orientation>
		//   14   26:iconst_1        
		//   15   27:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   16   30:putfield        #319 <Field int RecyclerView$LayoutManager$Properties.orientation>
			properties.spanCount = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_spanCount, 1);
		//   17   33:aload           4
		//   18   35:aload_0         
		//   19   36:getstatic       #322 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_spanCount>
		//   20   39:iconst_1        
		//   21   40:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   22   43:putfield        #325 <Field int RecyclerView$LayoutManager$Properties.spanCount>
			properties.reverseLayout = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_reverseLayout, false);
		//   23   46:aload           4
		//   24   48:aload_0         
		//   25   49:getstatic       #328 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_reverseLayout>
		//   26   52:iconst_0        
		//   27   53:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   28   56:putfield        #335 <Field boolean RecyclerView$LayoutManager$Properties.reverseLayout>
			properties.stackFromEnd = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_stackFromEnd, false);
		//   29   59:aload           4
		//   30   61:aload_0         
		//   31   62:getstatic       #338 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_stackFromEnd>
		//   32   65:iconst_0        
		//   33   66:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   34   69:putfield        #341 <Field boolean RecyclerView$LayoutManager$Properties.stackFromEnd>
			((TypedArray) (context)).recycle();
		//   35   72:aload_0         
		//   36   73:invokevirtual   #344 <Method void TypedArray.recycle()>
			return properties;
		//   37   76:aload           4
		//   38   78:areturn         
		}

		private boolean isFocusedChildVisibleAfterScrolling(RecyclerView recyclerview, int i, int j)
		{
			recyclerview = ((RecyclerView) (recyclerview.getFocusedChild()));
		//    0    0:aload_1         
		//    1    1:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
		//*   5    9:iconst_0        
		//*   6   10:ireturn         
			{
				int k = getPaddingLeft();
		//    7   11:aload_0         
		//    8   12:invokevirtual   #249 <Method int getPaddingLeft()>
		//    9   15:istore          4
				int l = getPaddingTop();
		//   10   17:aload_0         
		//   11   18:invokevirtual   #252 <Method int getPaddingTop()>
		//   12   21:istore          5
				int i1 = getWidth();
		//   13   23:aload_0         
		//   14   24:invokevirtual   #255 <Method int getWidth()>
		//   15   27:istore          6
				int j1 = getPaddingRight();
		//   16   29:aload_0         
		//   17   30:invokevirtual   #258 <Method int getPaddingRight()>
		//   18   33:istore          7
				int k1 = getHeight();
		//   19   35:aload_0         
		//   20   36:invokevirtual   #261 <Method int getHeight()>
		//   21   39:istore          8
				int l1 = getPaddingBottom();
		//   22   41:aload_0         
		//   23   42:invokevirtual   #264 <Method int getPaddingBottom()>
		//   24   45:istore          9
				Rect rect = mRecyclerView.mTempRect;
		//   25   47:aload_0         
		//   26   48:getfield        #95  <Field RecyclerView mRecyclerView>
		//   27   51:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   28   54:astore          10
				getDecoratedBoundsWithMargins(((View) (recyclerview)), rect);
		//   29   56:aload_0         
		//   30   57:aload_1         
		//   31   58:aload           10
		//   32   60:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				if(rect.left - i < i1 - j1 && rect.right - i > k && rect.top - j < k1 - l1 && rect.bottom - j > l)
		//*  33   63:aload           10
		//*  34   65:getfield        #272 <Field int Rect.left>
		//*  35   68:iload_2         
		//*  36   69:isub            
		//*  37   70:iload           6
		//*  38   72:iload           7
		//*  39   74:isub            
		//*  40   75:icmpge          9
		//*  41   78:aload           10
		//*  42   80:getfield        #361 <Field int Rect.right>
		//*  43   83:iload_2         
		//*  44   84:isub            
		//*  45   85:iload           4
		//*  46   87:icmple          9
		//*  47   90:aload           10
		//*  48   92:getfield        #281 <Field int Rect.top>
		//*  49   95:iload_3         
		//*  50   96:isub            
		//*  51   97:iload           8
		//*  52   99:iload           9
		//*  53  101:isub            
		//*  54  102:icmpge          9
		//*  55  105:aload           10
		//*  56  107:getfield        #364 <Field int Rect.bottom>
		//*  57  110:iload_3         
		//*  58  111:isub            
		//*  59  112:iload           5
		//*  60  114:icmple          9
					return true;
		//   61  117:iconst_1        
		//   62  118:ireturn         
			}
			return false;
		}

		private static boolean isMeasurementUpToDate(int i, int j, int k)
		{
			int l;
			boolean flag1;
			flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore          5
			l = android.view.View.MeasureSpec.getMode(j);
		//    2    3:iload_1         
		//    3    4:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    4    7:istore_3        
			j = android.view.View.MeasureSpec.getSize(j);
		//    5    8:iload_1         
		//    6    9:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    7   12:istore_1        
			if(k <= 0 || i == k) goto _L2; else goto _L1
		//    8   13:iload_2         
		//    9   14:ifle            28
		//   10   17:iload_0         
		//   11   18:iload_2         
		//   12   19:icmpeq          28
_L1:
			boolean flag = false;
		//   13   22:iconst_0        
		//   14   23:istore          4
_L4:
			return flag;
		//   15   25:iload           4
		//   16   27:ireturn         
_L2:
			flag = flag1;
		//   17   28:iload           5
		//   18   30:istore          4
			switch(l)
		//*  19   32:iload_3         
			{
		//*  20   33:lookupswitch    3: default 68
		//		               -2147483648: 70
		//		               0: 25
		//		               1073741824: 81
			default:
				return false;
		//   21   68:iconst_0        
		//   22   69:ireturn         

			case 0: // '\0'
				break;

			case -2147483648: 
				flag = flag1;
		//   23   70:iload           5
		//   24   72:istore          4
				if(j < i)
		//*  25   74:iload_1         
		//*  26   75:iload_0         
		//*  27   76:icmpge          25
					return false;
		//   28   79:iconst_0        
		//   29   80:ireturn         
				break;

			case 1073741824: 
				flag = flag1;
		//   30   81:iload           5
		//   31   83:istore          4
				continue; /* Loop/switch isn't completed */
			}
			if(true) goto _L4; else goto _L3
_L3:
			if(j == i) goto _L4; else goto _L5
		//   32   85:iload_1         
		//   33   86:iload_0         
		//   34   87:icmpeq          25
_L5:
			return false;
		//   35   90:iconst_0        
		//   36   91:ireturn         
		}

		private void onSmoothScrollerStopped(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller == smoothscroller)
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:aload_1         
		//*   3    5:if_acmpne       13
				mSmoothScroller = null;
		//    4    8:aload_0         
		//    5    9:aconst_null     
		//    6   10:putfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    7   13:return          
		}

		private void scrapOrRecycleView(Recycler recycler, int i, View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_3         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.shouldIgnore())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*   5   11:ifeq            15
				return;
		//    6   14:return          
			if(viewholder.isInvalid() && !viewholder.isRemoved() && !mRecyclerView.mAdapter.hasStableIds())
		//*   7   15:aload           4
		//*   8   17:invokevirtual   #374 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   9   20:ifeq            56
		//*  10   23:aload           4
		//*  11   25:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  12   28:ifne            56
		//*  13   31:aload_0         
		//*  14   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  15   35:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   38:invokevirtual   #383 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  17   41:ifne            56
			{
				removeViewAt(i);
		//   18   44:aload_0         
		//   19   45:iload_2         
		//   20   46:invokevirtual   #386 <Method void removeViewAt(int)>
				recycler.recycleViewHolderInternal(viewholder);
		//   21   49:aload_1         
		//   22   50:aload           4
		//   23   52:invokevirtual   #391 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
				return;
		//   24   55:return          
			} else
			{
				detachViewAt(i);
		//   25   56:aload_0         
		//   26   57:iload_2         
		//   27   58:invokevirtual   #394 <Method void detachViewAt(int)>
				recycler.scrapView(view);
		//   28   61:aload_1         
		//   29   62:aload_3         
		//   30   63:invokevirtual   #397 <Method void RecyclerView$Recycler.scrapView(View)>
				mRecyclerView.mViewInfoStore.onViewDetached(viewholder);
		//   31   66:aload_0         
		//   32   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   70:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   73:aload           4
		//   35   75:invokevirtual   #400 <Method void ViewInfoStore.onViewDetached(RecyclerView$ViewHolder)>
				return;
		//   36   78:return          
			}
		}

		public void addDisappearingView(View view)
		{
			addDisappearingView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #404 <Method void addDisappearingView(View, int)>
		//    4    6:return          
		}

		public void addDisappearingView(View view, int i)
		{
			addViewInt(view, i, true);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_1        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void addView(View view)
		{
			addView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #408 <Method void addView(View, int)>
		//    4    6:return          
		}

		public void addView(View view, int i)
		{
			addViewInt(view, i, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void assertInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #411 <Method void RecyclerView.assertInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void assertNotInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertNotInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #414 <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void attachView(View view)
		{
			attachView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #417 <Method void attachView(View, int)>
		//    4    6:return          
		}

		public void attachView(View view, int i)
		{
			attachView(view, i, (LayoutParams)view.getLayoutParams());
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:aload_1         
		//    4    4:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    5    7:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    6   10:invokevirtual   #420 <Method void attachView(View, int, RecyclerView$LayoutParams)>
		//    7   13:return          
		}

		public void attachView(View view, int i, LayoutParams layoutparams)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.isRemoved())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   5   11:ifeq            42
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    6   14:aload_0         
		//    7   15:getfield        #95  <Field RecyclerView mRecyclerView>
		//    8   18:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//    9   21:aload           4
		//   10   23:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  11   26:aload_0         
		//*  12   27:getfield        #124 <Field ChildHelper mChildHelper>
		//*  13   30:aload_1         
		//*  14   31:iload_2         
		//*  15   32:aload_3         
		//*  16   33:aload           4
		//*  17   35:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  18   38:invokevirtual   #130 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//*  19   41:return          
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   20   42:aload_0         
		//   21   43:getfield        #95  <Field RecyclerView mRecyclerView>
		//   22   46:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   23   49:aload           4
		//   24   51:invokevirtual   #143 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			mChildHelper.attachViewToParent(view, i, ((android.view.ViewGroup.LayoutParams) (layoutparams)), viewholder.isRemoved());
		//*  25   54:goto            26
		}

		public void calculateItemDecorationsForChild(View view, Rect rect)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       16
			{
				rect.set(0, 0, 0, 0);
		//    3    7:aload_2         
		//    4    8:iconst_0        
		//    5    9:iconst_0        
		//    6   10:iconst_0        
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
				return;
		//    9   15:return          
			} else
			{
				rect.set(mRecyclerView.getItemDecorInsetsForChild(view));
		//   10   16:aload_2         
		//   11   17:aload_0         
		//   12   18:getfield        #95  <Field RecyclerView mRecyclerView>
		//   13   21:aload_1         
		//   14   22:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//   15   25:invokevirtual   #432 <Method void Rect.set(Rect)>
				return;
		//   16   28:return          
			}
		}

		public boolean canScrollHorizontally()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean canScrollVertically()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean checkLayoutParams(LayoutParams layoutparams)
		{
			return layoutparams != null;
		//    0    0:aload_1         
		//    1    1:ifnull          6
		//    2    4:iconst_1        
		//    3    5:ireturn         
		//    4    6:iconst_0        
		//    5    7:ireturn         
		}

		public void collectAdjacentPrefetchPositions(int i, int j, State state, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public void collectInitialPrefetchPositions(int i, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public int computeHorizontalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void detachAndScrapAttachedViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            29
				scrapOrRecycleView(recycler, i, getChildAt(i));
		//    7   11:aload_0         
		//    8   12:aload_1         
		//    9   13:iload_2         
		//   10   14:aload_0         
		//   11   15:iload_2         
		//   12   16:invokevirtual   #454 <Method View getChildAt(int)>
		//   13   19:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>

		//   14   22:iload_2         
		//   15   23:iconst_1        
		//   16   24:isub            
		//   17   25:istore_2        
		//*  18   26:goto            7
		//   19   29:return          
		}

		public void detachAndScrapView(View view, Recycler recycler)
		{
			scrapOrRecycleView(recycler, mChildHelper.indexOfChild(view), view);
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:aload_0         
		//    3    3:getfield        #124 <Field ChildHelper mChildHelper>
		//    4    6:aload_1         
		//    5    7:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//    6   10:aload_1         
		//    7   11:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    8   14:return          
		}

		public void detachAndScrapViewAt(int i, Recycler recycler)
		{
			scrapOrRecycleView(recycler, i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:iload_1         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:invokevirtual   #454 <Method View getChildAt(int)>
		//    6    8:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    7   11:return          
		}

		public void detachView(View view)
		{
			int i = mChildHelper.indexOfChild(view);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//    4    8:istore_2        
			if(i >= 0)
		//*   5    9:iload_2         
		//*   6   10:iflt            19
				detachViewInternal(i, view);
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:aload_1         
		//   10   16:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//   11   19:return          
		}

		public void detachViewAt(int i)
		{
			detachViewInternal(i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:iload_1         
		//    4    4:invokevirtual   #454 <Method View getChildAt(int)>
		//    5    7:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//    6   10:return          
		}

		void dispatchAttachedToWindow(RecyclerView recyclerview)
		{
			mIsAttachedToWindow = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onAttachedToWindow(recyclerview);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #468 <Method void onAttachedToWindow(RecyclerView)>
		//    6   10:return          
		}

		void dispatchDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			mIsAttachedToWindow = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onDetachedFromWindow(recyclerview, recycler);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:aload_2         
		//    6    8:invokevirtual   #473 <Method void onDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		//    7   11:return          
		}

		public void endAnimation(View view)
		{
			if(mRecyclerView.mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          24
				mRecyclerView.mItemAnimator.endAnimation(RecyclerView.getChildViewHolderInt(view));
		//    4   10:aload_0         
		//    5   11:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   14:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:aload_1         
		//    8   18:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    9   21:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
		//   10   24:return          
		}

		public View findContainingItemView(View view)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
		//*   3    7:aconst_null     
		//*   4    8:areturn         
		//*   5    9:aload_0         
		//*   6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   13:aload_1         
		//*   8   14:invokevirtual   #486 <Method View RecyclerView.findContainingItemView(View)>
		//*   9   17:astore_1        
				if((view = mRecyclerView.findContainingItemView(view)) != null && !mChildHelper.isHidden(view))
		//*  10   18:aload_1         
		//*  11   19:ifnull          7
		//*  12   22:aload_0         
		//*  13   23:getfield        #124 <Field ChildHelper mChildHelper>
		//*  14   26:aload_1         
		//*  15   27:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  16   30:ifne            7
					return view;
		//   17   33:aload_1         
		//   18   34:areturn         
			return null;
		}

		public View findViewByPosition(int i)
		{
			int j;
			int k;
			k = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore_3        
			j = 0;
		//    3    5:iconst_0        
		//    4    6:istore_2        
_L3:
			View view;
			ViewHolder viewholder;
			if(j >= k)
				break; /* Loop/switch isn't completed */
		//    5    7:iload_2         
		//    6    8:iload_3         
		//    7    9:icmpge          79
			view = getChildAt(j);
		//    8   12:aload_0         
		//    9   13:iload_2         
		//   10   14:invokevirtual   #454 <Method View getChildAt(int)>
		//   11   17:astore          4
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//   12   19:aload           4
		//   13   21:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   24:astore          5
			  goto _L1
		//*  15   26:aload           5
		//*  16   28:ifnonnull       38
_L5:
			j++;
		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:iadd            
		//   20   34:istore_2        
			if(true) goto _L3; else goto _L2
		//   21   35:goto            7
_L1:
			if(viewholder == null || viewholder.getLayoutPosition() != i || viewholder.shouldIgnore() || !mRecyclerView.mState.isPreLayout() && viewholder.isRemoved()) goto _L5; else goto _L4
		//   22   38:aload           5
		//   23   40:invokevirtual   #495 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//   24   43:iload_1         
		//   25   44:icmpne          31
		//   26   47:aload           5
		//   27   49:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//   28   52:ifne            31
		//   29   55:aload_0         
		//   30   56:getfield        #95  <Field RecyclerView mRecyclerView>
		//   31   59:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//   32   62:invokevirtual   #504 <Method boolean RecyclerView$State.isPreLayout()>
		//   33   65:ifne            76
		//   34   68:aload           5
		//   35   70:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   36   73:ifne            31
_L4:
			return view;
		//   37   76:aload           4
		//   38   78:areturn         
_L2:
			return null;
		//   39   79:aconst_null     
		//   40   80:areturn         
		}

		public abstract LayoutParams generateDefaultLayoutParams();

		public LayoutParams generateLayoutParams(Context context, AttributeSet attributeset)
		{
			return new LayoutParams(context, attributeset);
		//    0    0:new             #113 <Class RecyclerView$LayoutParams>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:aload_2         
		//    4    6:invokespecial   #511 <Method void RecyclerView$LayoutParams(Context, AttributeSet)>
		//    5    9:areturn         
		}

		public LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			if(layoutparams instanceof LayoutParams)
		//*   0    0:aload_1         
		//*   1    1:instanceof      #113 <Class RecyclerView$LayoutParams>
		//*   2    4:ifeq            19
				return new LayoutParams((LayoutParams)layoutparams);
		//    3    7:new             #113 <Class RecyclerView$LayoutParams>
		//    4   10:dup             
		//    5   11:aload_1         
		//    6   12:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    7   15:invokespecial   #515 <Method void RecyclerView$LayoutParams(RecyclerView$LayoutParams)>
		//    8   18:areturn         
			if(layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
		//*   9   19:aload_1         
		//*  10   20:instanceof      #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//*  11   23:ifeq            38
				return new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
		//   12   26:new             #113 <Class RecyclerView$LayoutParams>
		//   13   29:dup             
		//   14   30:aload_1         
		//   15   31:checkcast       #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//   16   34:invokespecial   #520 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$MarginLayoutParams)>
		//   17   37:areturn         
			else
				return new LayoutParams(layoutparams);
		//   18   38:new             #113 <Class RecyclerView$LayoutParams>
		//   19   41:dup             
		//   20   42:aload_1         
		//   21   43:invokespecial   #523 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$LayoutParams)>
		//   22   46:areturn         
		}

		public int getBaseline()
		{
			return -1;
		//    0    0:iconst_m1       
		//    1    1:ireturn         
		}

		public int getBottomDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.bottom;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #364 <Field int Rect.bottom>
		//    5   13:ireturn         
		}

		public View getChildAt(int i)
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          16
				return mChildHelper.getChildAt(i);
		//    3    7:aload_0         
		//    4    8:getfield        #124 <Field ChildHelper mChildHelper>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #529 <Method View ChildHelper.getChildAt(int)>
		//    7   15:areturn         
			else
				return null;
		//    8   16:aconst_null     
		//    9   17:areturn         
		}

		public int getChildCount()
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          15
				return mChildHelper.getChildCount();
		//    3    7:aload_0         
		//    4    8:getfield        #124 <Field ChildHelper mChildHelper>
		//    5   11:invokevirtual   #158 <Method int ChildHelper.getChildCount()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public boolean getClipToPadding()
		{
			return mRecyclerView != null && mRecyclerView.mClipToPadding;
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:getfield        #533 <Field boolean RecyclerView.mClipToPadding>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public int getColumnCountForAccessibility(Recycler recycler, State state)
		{
			while(mRecyclerView == null || mRecyclerView.mAdapter == null || !canScrollHorizontally()) 
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:aload_0         
		//   10   20:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   11   23:ifeq            17
			return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
		}

		public int getDecoratedBottom(View view)
		{
			return view.getBottom() + getBottomDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #544 <Method int View.getBottom()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #546 <Method int getBottomDecorationHeight(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public void getDecoratedBoundsWithMargins(View view, Rect rect)
		{
			RecyclerView.getDecoratedBoundsWithMarginsInt(view, rect);
		//    0    0:aload_1         
		//    1    1:aload_2         
		//    2    2:invokestatic    #549 <Method void RecyclerView.getDecoratedBoundsWithMarginsInt(View, Rect)>
		//    3    5:return          
		}

		public int getDecoratedLeft(View view)
		{
			return view.getLeft() - getLeftDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #267 <Method int View.getLeft()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #553 <Method int getLeftDecorationWidth(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public int getDecoratedMeasuredHeight(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          4
			int i = view.getMeasuredHeight();
		//    5   12:aload_1         
		//    6   13:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//    7   16:istore_2        
			int j = rect.top;
		//    8   17:aload           4
		//    9   19:getfield        #281 <Field int Rect.top>
		//   10   22:istore_3        
			return rect.bottom + (i + j);
		//   11   23:aload           4
		//   12   25:getfield        #364 <Field int Rect.bottom>
		//   13   28:iload_2         
		//   14   29:iload_3         
		//   15   30:iadd            
		//   16   31:iadd            
		//   17   32:ireturn         
		}

		public int getDecoratedMeasuredWidth(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          4
			int i = view.getMeasuredWidth();
		//    5   12:aload_1         
		//    6   13:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    7   16:istore_2        
			int j = rect.left;
		//    8   17:aload           4
		//    9   19:getfield        #272 <Field int Rect.left>
		//   10   22:istore_3        
			return rect.right + (i + j);
		//   11   23:aload           4
		//   12   25:getfield        #361 <Field int Rect.right>
		//   13   28:iload_2         
		//   14   29:iload_3         
		//   15   30:iadd            
		//   16   31:iadd            
		//   17   32:ireturn         
		}

		public int getDecoratedRight(View view)
		{
			return view.getRight() + getRightDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #565 <Method int View.getRight()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #568 <Method int getRightDecorationWidth(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public int getDecoratedTop(View view)
		{
			return view.getTop() - getTopDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #278 <Method int View.getTop()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #572 <Method int getTopDecorationHeight(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public View getFocusedChild()
		{
			View view;
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
		//*   3    7:aconst_null     
		//*   4    8:areturn         
		//*   5    9:aload_0         
		//*   6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   13:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//*   8   16:astore_1        
				if((view = mRecyclerView.getFocusedChild()) != null && !mChildHelper.isHidden(view))
		//*   9   17:aload_1         
		//*  10   18:ifnull          7
		//*  11   21:aload_0         
		//*  12   22:getfield        #124 <Field ChildHelper mChildHelper>
		//*  13   25:aload_1         
		//*  14   26:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  15   29:ifne            7
					return view;
		//   16   32:aload_1         
		//   17   33:areturn         
			return null;
		}

		public int getHeight()
		{
			return mHeight;
		//    0    0:aload_0         
		//    1    1:getfield        #574 <Field int mHeight>
		//    2    4:ireturn         
		}

		public int getHeightMode()
		{
			return mHeightMode;
		//    0    0:aload_0         
		//    1    1:getfield        #577 <Field int mHeightMode>
		//    2    4:ireturn         
		}

		public int getItemCount()
		{
			Adapter adapter;
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          24
				adapter = mRecyclerView.getAdapter();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #581 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//    6   14:astore_1        
			else
		//*   7   15:aload_1         
		//*   8   16:ifnull          29
		//*   9   19:aload_1         
		//*  10   20:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//*  11   23:ireturn         
				adapter = null;
		//   12   24:aconst_null     
		//   13   25:astore_1        
			if(adapter != null)
				return adapter.getItemCount();
			else
		//*  14   26:goto            15
				return 0;
		//   15   29:iconst_0        
		//   16   30:ireturn         
		}

		public int getItemViewType(View view)
		{
			return RecyclerView.getChildViewHolderInt(view).getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:invokevirtual   #584 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    3    7:ireturn         
		}

		public int getLayoutDirection()
		{
			return ViewCompat.getLayoutDirection(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #588 <Method int ViewCompat.getLayoutDirection(View)>
		//    3    7:ireturn         
		}

		public int getLeftDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.left;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #272 <Field int Rect.left>
		//    5   13:ireturn         
		}

		public int getMinimumHeight()
		{
			return ViewCompat.getMinimumHeight(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #591 <Method int ViewCompat.getMinimumHeight(View)>
		//    3    7:ireturn         
		}

		public int getMinimumWidth()
		{
			return ViewCompat.getMinimumWidth(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #594 <Method int ViewCompat.getMinimumWidth(View)>
		//    3    7:ireturn         
		}

		public int getPaddingBottom()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingBottom();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #595 <Method int RecyclerView.getPaddingBottom()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingEnd()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingEnd(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #598 <Method int ViewCompat.getPaddingEnd(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingLeft()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingLeft();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #599 <Method int RecyclerView.getPaddingLeft()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingRight()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingRight();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #600 <Method int RecyclerView.getPaddingRight()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingStart()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingStart(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #603 <Method int ViewCompat.getPaddingStart(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingTop()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingTop();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #604 <Method int RecyclerView.getPaddingTop()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPosition(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:invokevirtual   #608 <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    4   10:ireturn         
		}

		public int getRightDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.right;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #361 <Field int Rect.right>
		//    5   13:ireturn         
		}

		public int getRowCountForAccessibility(Recycler recycler, State state)
		{
			while(mRecyclerView == null || mRecyclerView.mAdapter == null || !canScrollVertically()) 
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:aload_0         
		//   10   20:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   11   23:ifeq            17
			return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
		}

		public int getSelectionModeForAccessibility(Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int getTopDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.top;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #281 <Field int Rect.top>
		//    5   13:ireturn         
		}

		public void getTransformedBoundingBox(View view, boolean flag, Rect rect)
		{
			if(flag)
		//*   0    0:iload_2         
		//*   1    1:ifeq            178
			{
				Rect rect1 = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    2    4:aload_1         
		//    3    5:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    8:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          9
				int i = -rect1.left;
		//    7   16:aload           9
		//    8   18:getfield        #272 <Field int Rect.left>
		//    9   21:ineg            
		//   10   22:istore          4
				int j = -rect1.top;
		//   11   24:aload           9
		//   12   26:getfield        #281 <Field int Rect.top>
		//   13   29:ineg            
		//   14   30:istore          5
				int k = view.getWidth();
		//   15   32:aload_1         
		//   16   33:invokevirtual   #615 <Method int View.getWidth()>
		//   17   36:istore          6
				int l = rect1.right;
		//   18   38:aload           9
		//   19   40:getfield        #361 <Field int Rect.right>
		//   20   43:istore          7
				int i1 = view.getHeight();
		//   21   45:aload_1         
		//   22   46:invokevirtual   #616 <Method int View.getHeight()>
		//   23   49:istore          8
				rect.set(i, j, k + l, rect1.bottom + i1);
		//   24   51:aload_3         
		//   25   52:iload           4
		//   26   54:iload           5
		//   27   56:iload           6
		//   28   58:iload           7
		//   29   60:iadd            
		//   30   61:aload           9
		//   31   63:getfield        #364 <Field int Rect.bottom>
		//   32   66:iload           8
		//   33   68:iadd            
		//   34   69:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			} else
		//*  35   72:aload_0         
		//*  36   73:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  37   76:ifnull          165
		//*  38   79:aload_1         
		//*  39   80:invokevirtual   #620 <Method Matrix View.getMatrix()>
		//*  40   83:astore          9
		//*  41   85:aload           9
		//*  42   87:ifnull          165
		//*  43   90:aload           9
		//*  44   92:invokevirtual   #625 <Method boolean Matrix.isIdentity()>
		//*  45   95:ifne            165
		//*  46   98:aload_0         
		//*  47   99:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  48  102:getfield        #629 <Field RectF RecyclerView.mTempRectF>
		//*  49  105:astore          10
		//*  50  107:aload           10
		//*  51  109:aload_3         
		//*  52  110:invokevirtual   #632 <Method void RectF.set(Rect)>
		//*  53  113:aload           9
		//*  54  115:aload           10
		//*  55  117:invokevirtual   #636 <Method boolean Matrix.mapRect(RectF)>
		//*  56  120:pop             
		//*  57  121:aload_3         
		//*  58  122:aload           10
		//*  59  124:getfield        #639 <Field float RectF.left>
		//*  60  127:f2d             
		//*  61  128:invokestatic    #643 <Method double Math.floor(double)>
		//*  62  131:d2i             
		//*  63  132:aload           10
		//*  64  134:getfield        #645 <Field float RectF.top>
		//*  65  137:f2d             
		//*  66  138:invokestatic    #643 <Method double Math.floor(double)>
		//*  67  141:d2i             
		//*  68  142:aload           10
		//*  69  144:getfield        #647 <Field float RectF.right>
		//*  70  147:f2d             
		//*  71  148:invokestatic    #650 <Method double Math.ceil(double)>
		//*  72  151:d2i             
		//*  73  152:aload           10
		//*  74  154:getfield        #652 <Field float RectF.bottom>
		//*  75  157:f2d             
		//*  76  158:invokestatic    #650 <Method double Math.ceil(double)>
		//*  77  161:d2i             
		//*  78  162:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
		//*  79  165:aload_3         
		//*  80  166:aload_1         
		//*  81  167:invokevirtual   #267 <Method int View.getLeft()>
		//*  82  170:aload_1         
		//*  83  171:invokevirtual   #278 <Method int View.getTop()>
		//*  84  174:invokevirtual   #655 <Method void Rect.offset(int, int)>
		//*  85  177:return          
			{
				rect.set(0, 0, view.getWidth(), view.getHeight());
		//   86  178:aload_3         
		//   87  179:iconst_0        
		//   88  180:iconst_0        
		//   89  181:aload_1         
		//   90  182:invokevirtual   #615 <Method int View.getWidth()>
		//   91  185:aload_1         
		//   92  186:invokevirtual   #616 <Method int View.getHeight()>
		//   93  189:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			}
			if(mRecyclerView != null)
			{
				Matrix matrix = view.getMatrix();
				if(matrix != null && !matrix.isIdentity())
				{
					RectF rectf = mRecyclerView.mTempRectF;
					rectf.set(rect);
					matrix.mapRect(rectf);
					rect.set((int)Math.floor(rectf.left), (int)Math.floor(rectf.top), (int)Math.ceil(rectf.right), (int)Math.ceil(rectf.bottom));
				}
			}
			rect.offset(view.getLeft(), view.getTop());
		//*  94  192:goto            72
		}

		public int getWidth()
		{
			return mWidth;
		//    0    0:aload_0         
		//    1    1:getfield        #657 <Field int mWidth>
		//    2    4:ireturn         
		}

		public int getWidthMode()
		{
			return mWidthMode;
		//    0    0:aload_0         
		//    1    1:getfield        #660 <Field int mWidthMode>
		//    2    4:ireturn         
		}

		boolean hasFlexibleChildInBothOrientations()
		{
			boolean flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          4
			int j = getChildCount();
		//    2    3:aload_0         
		//    3    4:invokevirtual   #450 <Method int getChildCount()>
		//    4    7:istore_2        
			int i = 0;
		//    5    8:iconst_0        
		//    6    9:istore_1        
			do
			{
label0:
				{
					boolean flag = flag1;
		//    7   10:iload           4
		//    8   12:istore_3        
					if(i < j)
		//*   9   13:iload_1         
		//*  10   14:iload_2         
		//*  11   15:icmpge          46
					{
						android.view.ViewGroup.LayoutParams layoutparams = getChildAt(i).getLayoutParams();
		//   12   18:aload_0         
		//   13   19:iload_1         
		//   14   20:invokevirtual   #454 <Method View getChildAt(int)>
		//   15   23:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   26:astore          5
						if(layoutparams.width >= 0 || layoutparams.height >= 0)
							break label0;
		//   17   28:aload           5
		//   18   30:getfield        #665 <Field int android.view.ViewGroup$LayoutParams.width>
		//   19   33:ifge            48
		//   20   36:aload           5
		//   21   38:getfield        #667 <Field int android.view.ViewGroup$LayoutParams.height>
		//   22   41:ifge            48
						flag = true;
		//   23   44:iconst_1        
		//   24   45:istore_3        
					}
					return flag;
		//   25   46:iload_3         
		//   26   47:ireturn         
				}
				i++;
		//   27   48:iload_1         
		//   28   49:iconst_1        
		//   29   50:iadd            
		//   30   51:istore_1        
			} while(true);
		//   31   52:goto            10
		}

		public boolean hasFocus()
		{
			return mRecyclerView != null && mRecyclerView.hasFocus();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #670 <Method boolean RecyclerView.hasFocus()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public void ignoreView(View view)
		{
			if(view.getParent() != mRecyclerView || mRecyclerView.indexOfChild(view) == -1)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #150 <Method ViewParent View.getParent()>
		//*   2    4:aload_0         
		//*   3    5:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    8:if_acmpne       23
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:aload_1         
		//*   8   16:invokevirtual   #170 <Method int RecyclerView.indexOfChild(View)>
		//*   9   19:iconst_m1       
		//*  10   20:icmpne          57
			{
				throw new IllegalArgumentException((new StringBuilder()).append("View should be fully attached to be ignored").append(mRecyclerView.exceptionLabel()).toString());
		//   11   23:new             #673 <Class IllegalArgumentException>
		//   12   26:dup             
		//   13   27:new             #162 <Class StringBuilder>
		//   14   30:dup             
		//   15   31:invokespecial   #163 <Method void StringBuilder()>
		//   16   34:ldc2            #675 <String "View should be fully attached to be ignored">
		//   17   37:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   18   40:aload_0         
		//   19   41:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   44:invokevirtual   #177 <Method String RecyclerView.exceptionLabel()>
		//   21   47:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   22   50:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   23   53:invokespecial   #676 <Method void IllegalArgumentException(String)>
		//   24   56:athrow          
			} else
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//   25   57:aload_1         
		//   26   58:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   27   61:astore_1        
				((ViewHolder) (view)).addFlags(128);
		//   28   62:aload_1         
		//   29   63:sipush          128
		//   30   66:invokevirtual   #679 <Method void RecyclerView$ViewHolder.addFlags(int)>
				mRecyclerView.mViewInfoStore.removeViewHolder(((ViewHolder) (view)));
		//   31   69:aload_0         
		//   32   70:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   73:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   76:aload_1         
		//   35   77:invokevirtual   #682 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
				return;
		//   36   80:return          
			}
		}

		public boolean isAttachedToWindow()
		{
			return mIsAttachedToWindow;
		//    0    0:aload_0         
		//    1    1:getfield        #68  <Field boolean mIsAttachedToWindow>
		//    2    4:ireturn         
		}

		public boolean isAutoMeasureEnabled()
		{
			return mAutoMeasure;
		//    0    0:aload_0         
		//    1    1:getfield        #70  <Field boolean mAutoMeasure>
		//    2    4:ireturn         
		}

		public boolean isFocused()
		{
			return mRecyclerView != null && mRecyclerView.isFocused();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #687 <Method boolean RecyclerView.isFocused()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public final boolean isItemPrefetchEnabled()
		{
			return mItemPrefetchEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//    2    4:ireturn         
		}

		public boolean isLayoutHierarchical(Recycler recycler, State state)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean isMeasurementCacheEnabled()
		{
			return mMeasurementCacheEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ireturn         
		}

		public boolean isSmoothScrolling()
		{
			return mSmoothScroller != null && mSmoothScroller.isRunning();
		//    0    0:aload_0         
		//    1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public boolean isViewPartiallyVisible(View view, boolean flag, boolean flag1)
		{
			boolean flag2 = true;
		//    0    0:iconst_1        
		//    1    1:istore          4
			if(mHorizontalBoundCheck.isViewWithinBoundFlags(view, 24579) && mVerticalBoundCheck.isViewWithinBoundFlags(view, 24579))
		//*   2    3:aload_0         
		//*   3    4:getfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
		//*   4    7:aload_1         
		//*   5    8:sipush          24579
		//*   6   11:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*   7   14:ifeq            41
		//*   8   17:aload_0         
		//*   9   18:getfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
		//*  10   21:aload_1         
		//*  11   22:sipush          24579
		//*  12   25:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*  13   28:ifeq            41
				flag1 = true;
		//   14   31:iconst_1        
		//   15   32:istore_3        
			else
		//*  16   33:iload_2         
		//*  17   34:ifeq            46
		//*  18   37:iload_3         
		//*  19   38:istore_2        
		//*  20   39:iload_2         
		//*  21   40:ireturn         
				flag1 = false;
		//   22   41:iconst_0        
		//   23   42:istore_3        
			if(flag)
			{
				flag = flag1;
			} else
		//*  24   43:goto            33
			{
				flag = flag2;
		//   25   46:iload           4
		//   26   48:istore_2        
				if(flag1)
		//*  27   49:iload_3         
		//*  28   50:ifeq            39
					return false;
		//   29   53:iconst_0        
		//   30   54:ireturn         
			}
			return flag;
		}

		public void layoutDecorated(View view, int i, int j, int k, int l)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          6
			view.layout(rect.left + i, rect.top + j, k - rect.right, l - rect.bottom);
		//    5   12:aload_1         
		//    6   13:aload           6
		//    7   15:getfield        #272 <Field int Rect.left>
		//    8   18:iload_2         
		//    9   19:iadd            
		//   10   20:aload           6
		//   11   22:getfield        #281 <Field int Rect.top>
		//   12   25:iload_3         
		//   13   26:iadd            
		//   14   27:iload           4
		//   15   29:aload           6
		//   16   31:getfield        #361 <Field int Rect.right>
		//   17   34:isub            
		//   18   35:iload           5
		//   19   37:aload           6
		//   20   39:getfield        #364 <Field int Rect.bottom>
		//   21   42:isub            
		//   22   43:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   23   46:return          
		}

		public void layoutDecoratedWithMargins(View view, int i, int j, int k, int l)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          6
			Rect rect = layoutparams.mDecorInsets;
		//    4    9:aload           6
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          7
			view.layout(rect.left + i + layoutparams.leftMargin, rect.top + j + layoutparams.topMargin, k - rect.right - layoutparams.rightMargin, l - rect.bottom - layoutparams.bottomMargin);
		//    7   16:aload_1         
		//    8   17:aload           7
		//    9   19:getfield        #272 <Field int Rect.left>
		//   10   22:iload_2         
		//   11   23:iadd            
		//   12   24:aload           6
		//   13   26:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   14   29:iadd            
		//   15   30:aload           7
		//   16   32:getfield        #281 <Field int Rect.top>
		//   17   35:iload_3         
		//   18   36:iadd            
		//   19   37:aload           6
		//   20   39:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   21   42:iadd            
		//   22   43:iload           4
		//   23   45:aload           7
		//   24   47:getfield        #361 <Field int Rect.right>
		//   25   50:isub            
		//   26   51:aload           6
		//   27   53:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   28   56:isub            
		//   29   57:iload           5
		//   30   59:aload           7
		//   31   61:getfield        #364 <Field int Rect.bottom>
		//   32   64:isub            
		//   33   65:aload           6
		//   34   67:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   35   70:isub            
		//   36   71:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   37   74:return          
		}

		public void measureChild(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), i1 + j1 + i + (getPaddingLeft() + getPaddingRight()), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:iload           6
		//   26   57:iload           7
		//   27   59:iadd            
		//   28   60:iload_2         
		//   29   61:iadd            
		//   30   62:aload_0         
		//   31   63:invokevirtual   #249 <Method int getPaddingLeft()>
		//   32   66:aload_0         
		//   33   67:invokevirtual   #258 <Method int getPaddingRight()>
		//   34   70:iadd            
		//   35   71:iadd            
		//   36   72:aload           8
		//   37   74:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   38   77:aload_0         
		//   39   78:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   40   81:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   41   84:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), l + k + j + (getPaddingTop() + getPaddingBottom()), layoutparams.height, canScrollVertically());
		//   42   85:aload_0         
		//   43   86:invokevirtual   #261 <Method int getHeight()>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #727 <Method int getHeightMode()>
		//   46   93:iload           5
		//   47   95:iload           4
		//   48   97:iadd            
		//   49   98:iload_3         
		//   50   99:iadd            
		//   51  100:aload_0         
		//   52  101:invokevirtual   #252 <Method int getPaddingTop()>
		//   53  104:aload_0         
		//   54  105:invokevirtual   #264 <Method int getPaddingBottom()>
		//   55  108:iadd            
		//   56  109:iadd            
		//   57  110:aload           8
		//   58  112:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   59  115:aload_0         
		//   60  116:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   61  119:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   62  122:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  63  123:aload_0         
		//*  64  124:aload_1         
		//*  65  125:iload_2         
		//*  66  126:iload_3         
		//*  67  127:aload           8
		//*  68  129:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  69  132:ifeq            141
				view.measure(i, j);
		//   70  135:aload_1         
		//   71  136:iload_2         
		//   72  137:iload_3         
		//   73  138:invokevirtual   #735 <Method void View.measure(int, int)>
		//   74  141:return          
		}

		public void measureChildWithMargins(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), i1 + j1 + i + (getPaddingLeft() + getPaddingRight() + layoutparams.leftMargin + layoutparams.rightMargin), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:iload           6
		//   26   57:iload           7
		//   27   59:iadd            
		//   28   60:iload_2         
		//   29   61:iadd            
		//   30   62:aload_0         
		//   31   63:invokevirtual   #249 <Method int getPaddingLeft()>
		//   32   66:aload_0         
		//   33   67:invokevirtual   #258 <Method int getPaddingRight()>
		//   34   70:iadd            
		//   35   71:aload           8
		//   36   73:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   37   76:iadd            
		//   38   77:aload           8
		//   39   79:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   40   82:iadd            
		//   41   83:iadd            
		//   42   84:aload           8
		//   43   86:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   46   93:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   47   96:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), l + k + j + (getPaddingTop() + getPaddingBottom() + layoutparams.topMargin + layoutparams.bottomMargin), layoutparams.height, canScrollVertically());
		//   48   97:aload_0         
		//   49   98:invokevirtual   #261 <Method int getHeight()>
		//   50  101:aload_0         
		//   51  102:invokevirtual   #727 <Method int getHeightMode()>
		//   52  105:iload           5
		//   53  107:iload           4
		//   54  109:iadd            
		//   55  110:iload_3         
		//   56  111:iadd            
		//   57  112:aload_0         
		//   58  113:invokevirtual   #252 <Method int getPaddingTop()>
		//   59  116:aload_0         
		//   60  117:invokevirtual   #264 <Method int getPaddingBottom()>
		//   61  120:iadd            
		//   62  121:aload           8
		//   63  123:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   64  126:iadd            
		//   65  127:aload           8
		//   66  129:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   67  132:iadd            
		//   68  133:iadd            
		//   69  134:aload           8
		//   70  136:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   71  139:aload_0         
		//   72  140:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   73  143:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   74  146:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  75  147:aload_0         
		//*  76  148:aload_1         
		//*  77  149:iload_2         
		//*  78  150:iload_3         
		//*  79  151:aload           8
		//*  80  153:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  81  156:ifeq            165
				view.measure(i, j);
		//   82  159:aload_1         
		//   83  160:iload_2         
		//   84  161:iload_3         
		//   85  162:invokevirtual   #735 <Method void View.measure(int, int)>
		//   86  165:return          
		}

		public void moveView(int i, int j)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			if(view == null)
		//*   4    6:aload_3         
		//*   5    7:ifnonnull       48
			{
				throw new IllegalArgumentException((new StringBuilder()).append("Cannot move a child from non-existing index:").append(i).append(mRecyclerView.toString()).toString());
		//    6   10:new             #673 <Class IllegalArgumentException>
		//    7   13:dup             
		//    8   14:new             #162 <Class StringBuilder>
		//    9   17:dup             
		//   10   18:invokespecial   #163 <Method void StringBuilder()>
		//   11   21:ldc2            #738 <String "Cannot move a child from non-existing index:">
		//   12   24:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   13   27:iload_1         
		//   14   28:invokevirtual   #173 <Method StringBuilder StringBuilder.append(int)>
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:invokevirtual   #739 <Method String RecyclerView.toString()>
		//   18   38:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   19   41:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   20   44:invokespecial   #676 <Method void IllegalArgumentException(String)>
		//   21   47:athrow          
			} else
			{
				detachViewAt(i);
		//   22   48:aload_0         
		//   23   49:iload_1         
		//   24   50:invokevirtual   #394 <Method void detachViewAt(int)>
				attachView(view, j);
		//   25   53:aload_0         
		//   26   54:aload_3         
		//   27   55:iload_2         
		//   28   56:invokevirtual   #417 <Method void attachView(View, int)>
				return;
		//   29   59:return          
			}
		}

		public void offsetChildrenHorizontal(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenHorizontal(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #742 <Method void RecyclerView.offsetChildrenHorizontal(int)>
		//    7   15:return          
		}

		public void offsetChildrenVertical(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenVertical(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #745 <Method void RecyclerView.offsetChildrenVertical(int)>
		//    7   15:return          
		}

		public void onAdapterChanged(Adapter adapter, Adapter adapter1)
		{
		//    0    0:return          
		}

		public boolean onAddFocusables(RecyclerView recyclerview, ArrayList arraylist, int i, int j)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onAttachedToWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			onDetachedFromWindow(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #754 <Method void onDetachedFromWindow(RecyclerView)>
		//    3    5:return          
		}

		public View onFocusSearchFailed(View view, int i, Recycler recycler, State state)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onInitializeAccessibilityEvent(Recycler recycler, State state, AccessibilityEvent accessibilityevent)
		{
			boolean flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore          5
			if(mRecyclerView != null && accessibilityevent != null)
		//*   2    3:aload_0         
		//*   3    4:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    7:ifnull          14
		//*   5   10:aload_3         
		//*   6   11:ifnonnull       15
		//*   7   14:return          
			{
				boolean flag = flag1;
		//    8   15:iload           5
		//    9   17:istore          4
				if(!mRecyclerView.canScrollVertically(1))
		//*  10   19:aload_0         
		//*  11   20:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   23:iconst_1        
		//*  13   24:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  14   27:ifne            75
				{
					flag = flag1;
		//   15   30:iload           5
		//   16   32:istore          4
					if(!mRecyclerView.canScrollVertically(-1))
		//*  17   34:aload_0         
		//*  18   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  19   38:iconst_m1       
		//*  20   39:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  21   42:ifne            75
					{
						flag = flag1;
		//   22   45:iload           5
		//   23   47:istore          4
						if(!mRecyclerView.canScrollHorizontally(-1))
		//*  24   49:aload_0         
		//*  25   50:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  26   53:iconst_m1       
		//*  27   54:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  28   57:ifne            75
							if(mRecyclerView.canScrollHorizontally(1))
		//*  29   60:aload_0         
		//*  30   61:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  31   64:iconst_1        
		//*  32   65:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  33   68:ifeq            106
								flag = flag1;
		//   34   71:iload           5
		//   35   73:istore          4
							else
		//*  36   75:aload_3         
		//*  37   76:iload           4
		//*  38   78:invokevirtual   #769 <Method void AccessibilityEvent.setScrollable(boolean)>
		//*  39   81:aload_0         
		//*  40   82:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  41   85:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  42   88:ifnull          14
		//*  43   91:aload_3         
		//*  44   92:aload_0         
		//*  45   93:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  46   96:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  47   99:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//*  48  102:invokevirtual   #772 <Method void AccessibilityEvent.setItemCount(int)>
		//*  49  105:return          
								flag = false;
		//   50  106:iconst_0        
		//   51  107:istore          4
					}
				}
				accessibilityevent.setScrollable(flag);
				if(mRecyclerView.mAdapter != null)
				{
					accessibilityevent.setItemCount(mRecyclerView.mAdapter.getItemCount());
					return;
				}
			}
		//*  52  109:goto            75
		}

		public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent)
		{
			onInitializeAccessibilityEvent(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilityevent);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #779 <Method void onInitializeAccessibilityEvent(RecyclerView$Recycler, RecyclerView$State, AccessibilityEvent)>
		//    9   19:return          
		}

		void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			onInitializeAccessibilityNodeInfo(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilitynodeinfocompat);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #784 <Method void onInitializeAccessibilityNodeInfo(RecyclerView$Recycler, RecyclerView$State, AccessibilityNodeInfoCompat)>
		//    9   19:return          
		}

		public void onInitializeAccessibilityNodeInfo(Recycler recycler, State state, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			if(mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1))
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:iconst_m1       
		//*   3    5:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*   4    8:ifne            22
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:iconst_m1       
		//*   8   16:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*   9   19:ifeq            34
			{
				accessibilitynodeinfocompat.addAction(8192);
		//   10   22:aload_3         
		//   11   23:sipush          8192
		//   12   26:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   13   29:aload_3         
		//   14   30:iconst_1        
		//   15   31:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollHorizontally(1))
		//*  16   34:aload_0         
		//*  17   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  18   38:iconst_1        
		//*  19   39:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   42:ifne            56
		//*  21   45:aload_0         
		//*  22   46:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  23   49:iconst_1        
		//*  24   50:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  25   53:ifeq            68
			{
				accessibilitynodeinfocompat.addAction(4096);
		//   26   56:aload_3         
		//   27   57:sipush          4096
		//   28   60:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   29   63:aload_3         
		//   30   64:iconst_1        
		//   31   65:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			accessibilitynodeinfocompat.setCollectionInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(getRowCountForAccessibility(recycler, state), getColumnCountForAccessibility(recycler, state), isLayoutHierarchical(recycler, state), getSelectionModeForAccessibility(recycler, state)))));
		//   32   68:aload_3         
		//   33   69:aload_0         
		//   34   70:aload_1         
		//   35   71:aload_2         
		//   36   72:invokevirtual   #792 <Method int getRowCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   37   75:aload_0         
		//   38   76:aload_1         
		//   39   77:aload_2         
		//   40   78:invokevirtual   #794 <Method int getColumnCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   41   81:aload_0         
		//   42   82:aload_1         
		//   43   83:aload_2         
		//   44   84:invokevirtual   #796 <Method boolean isLayoutHierarchical(RecyclerView$Recycler, RecyclerView$State)>
		//   45   87:aload_0         
		//   46   88:aload_1         
		//   47   89:aload_2         
		//   48   90:invokevirtual   #798 <Method int getSelectionModeForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   49   93:invokestatic    #804 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat.obtain(int, int, boolean, int)>
		//   50   96:invokevirtual   #808 <Method void AccessibilityNodeInfoCompat.setCollectionInfo(Object)>
		//   51   99:return          
		}

		public void onInitializeAccessibilityNodeInfoForItem(Recycler recycler, State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			int i;
			int j;
			if(canScrollVertically())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #611 <Method boolean canScrollVertically()>
		//*   2    4:ifeq            45
				i = getPosition(view);
		//    3    7:aload_0         
		//    4    8:aload_3         
		//    5    9:invokevirtual   #812 <Method int getPosition(View)>
		//    6   12:istore          5
			else
		//*   7   14:aload_0         
		//*   8   15:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//*   9   18:ifeq            51
		//*  10   21:aload_0         
		//*  11   22:aload_3         
		//*  12   23:invokevirtual   #812 <Method int getPosition(View)>
		//*  13   26:istore          6
		//*  14   28:aload           4
		//*  15   30:iload           5
		//*  16   32:iconst_1        
		//*  17   33:iload           6
		//*  18   35:iconst_1        
		//*  19   36:iconst_0        
		//*  20   37:iconst_0        
		//*  21   38:invokestatic    #817 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean)>
		//*  22   41:invokevirtual   #820 <Method void AccessibilityNodeInfoCompat.setCollectionItemInfo(Object)>
		//*  23   44:return          
				i = 0;
		//   24   45:iconst_0        
		//   25   46:istore          5
			if(canScrollHorizontally())
				j = getPosition(view);
			else
		//*  26   48:goto            14
				j = 0;
		//   27   51:iconst_0        
		//   28   52:istore          6
			accessibilitynodeinfocompat.setCollectionItemInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, j, 1, false, false))));
		//*  29   54:goto            28
		}

		void onInitializeAccessibilityNodeInfoForItem(View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_3        
			if(viewholder != null && !viewholder.isRemoved() && !mChildHelper.isHidden(viewholder.itemView))
		//*   3    5:aload_3         
		//*   4    6:ifnull          50
		//*   5    9:aload_3         
		//*   6   10:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   13:ifne            50
		//*   8   16:aload_0         
		//*   9   17:getfield        #124 <Field ChildHelper mChildHelper>
		//*  10   20:aload_3         
		//*  11   21:getfield        #137 <Field View RecyclerView$ViewHolder.itemView>
		//*  12   24:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  13   27:ifne            50
				onInitializeAccessibilityNodeInfoForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, accessibilitynodeinfocompat);
		//   14   30:aload_0         
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   18   38:aload_0         
		//   19   39:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//   21   45:aload_1         
		//   22   46:aload_2         
		//   23   47:invokevirtual   #823 <Method void onInitializeAccessibilityNodeInfoForItem(RecyclerView$Recycler, RecyclerView$State, View, AccessibilityNodeInfoCompat)>
		//   24   50:return          
		}

		public View onInterceptFocusSearch(View view, int i)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onItemsAdded(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsChanged(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemsRemoved(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj)
		{
			onItemsUpdated(recyclerview, i, j);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:invokevirtual   #835 <Method void onItemsUpdated(RecyclerView, int, int)>
		//    5    7:return          
		}

		public void onLayoutChildren(Recycler recycler, State state)
		{
			Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #840 <String "You must override onLayoutChildren(Recycler recycler, State state) ">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void onLayoutCompleted(State state)
		{
		//    0    0:return          
		}

		public void onMeasure(Recycler recycler, State state, int i, int j)
		{
			mRecyclerView.defaultOnMeasure(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_3         
		//    3    5:iload           4
		//    4    7:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
		//    5   10:return          
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, State state, View view, View view1)
		{
			return onRequestChildFocus(recyclerview, view, view1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_3         
		//    3    3:aload           4
		//    4    5:invokevirtual   #858 <Method boolean onRequestChildFocus(RecyclerView, View, View)>
		//    5    8:ireturn         
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, View view, View view1)
		{
			return isSmoothScrolling() || recyclerview.isComputingLayout();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #860 <Method boolean isSmoothScrolling()>
		//    2    4:ifne            14
		//    3    7:aload_1         
		//    4    8:invokevirtual   #863 <Method boolean RecyclerView.isComputingLayout()>
		//    5   11:ifeq            16
		//    6   14:iconst_1        
		//    7   15:ireturn         
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void onRestoreInstanceState(Parcelable parcelable)
		{
		//    0    0:return          
		}

		public Parcelable onSaveInstanceState()
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onScrollStateChanged(int i)
		{
		//    0    0:return          
		}

		boolean performAccessibilityAction(int i, Bundle bundle)
		{
			return performAccessibilityAction(mRecyclerView.mRecycler, mRecyclerView.mState, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iload_1         
		//    8   16:aload_2         
		//    9   17:invokevirtual   #873 <Method boolean performAccessibilityAction(RecyclerView$Recycler, RecyclerView$State, int, Bundle)>
		//   10   20:ireturn         
		}

		public boolean performAccessibilityAction(Recycler recycler, State state, int i, Bundle bundle)
		{
			if(mRecyclerView != null) goto _L2; else goto _L1
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnonnull       9
_L1:
			return false;
		//    3    7:iconst_0        
		//    4    8:ireturn         
_L2:
			i;
		//    5    9:iload_3         
			JVM INSTR lookupswitch 2: default 36
		//		               4096: 129
		//		               8192: 62;
		//    6   10:lookupswitch    2: default 36
		//		               4096: 129
		//		               8192: 62
			   goto _L3 _L4 _L5
_L3:
			int j;
			i = 0;
		//    7   36:iconst_0        
		//    8   37:istore_3        
			j = 0;
		//    9   38:iconst_0        
		//   10   39:istore          5
_L8:
			if(j != 0 || i != 0)
		//*  11   41:iload           5
		//*  12   43:ifne            50
		//*  13   46:iload_3         
		//*  14   47:ifeq            7
			{
				mRecyclerView.scrollBy(i, j);
		//   15   50:aload_0         
		//   16   51:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   54:iload_3         
		//   18   55:iload           5
		//   19   57:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//   20   60:iconst_1        
		//   21   61:ireturn         
			}
			  goto _L1
_L5:
			int k;
			int l;
			int i1;
			if(mRecyclerView.canScrollVertically(-1))
		//*  22   62:aload_0         
		//*  23   63:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  24   66:iconst_m1       
		//*  25   67:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  26   70:ifeq            212
				i = -(getHeight() - getPaddingTop() - getPaddingBottom());
		//   27   73:aload_0         
		//   28   74:invokevirtual   #261 <Method int getHeight()>
		//   29   77:aload_0         
		//   30   78:invokevirtual   #252 <Method int getPaddingTop()>
		//   31   81:isub            
		//   32   82:aload_0         
		//   33   83:invokevirtual   #264 <Method int getPaddingBottom()>
		//   34   86:isub            
		//   35   87:ineg            
		//   36   88:istore_3        
			else
		//*  37   89:iload_3         
		//*  38   90:istore          5
		//*  39   92:aload_0         
		//*  40   93:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  41   96:iconst_m1       
		//*  42   97:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  43  100:ifeq            202
		//*  44  103:aload_0         
		//*  45  104:invokevirtual   #255 <Method int getWidth()>
		//*  46  107:aload_0         
		//*  47  108:invokevirtual   #249 <Method int getPaddingLeft()>
		//*  48  111:isub            
		//*  49  112:aload_0         
		//*  50  113:invokevirtual   #258 <Method int getPaddingRight()>
		//*  51  116:isub            
		//*  52  117:ineg            
		//*  53  118:istore          6
		//*  54  120:iload_3         
		//*  55  121:istore          5
		//*  56  123:iload           6
		//*  57  125:istore_3        
		//*  58  126:goto            41
		//*  59  129:aload_0         
		//*  60  130:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  61  133:iconst_1        
		//*  62  134:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  63  137:ifeq            207
		//*  64  140:aload_0         
		//*  65  141:invokevirtual   #261 <Method int getHeight()>
		//*  66  144:aload_0         
		//*  67  145:invokevirtual   #252 <Method int getPaddingTop()>
		//*  68  148:isub            
		//*  69  149:aload_0         
		//*  70  150:invokevirtual   #264 <Method int getPaddingBottom()>
		//*  71  153:isub            
		//*  72  154:istore_3        
		//*  73  155:iload_3         
		//*  74  156:istore          5
		//*  75  158:aload_0         
		//*  76  159:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  77  162:iconst_1        
		//*  78  163:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  79  166:ifeq            202
		//*  80  169:aload_0         
		//*  81  170:invokevirtual   #255 <Method int getWidth()>
		//*  82  173:istore          6
		//*  83  175:aload_0         
		//*  84  176:invokevirtual   #249 <Method int getPaddingLeft()>
		//*  85  179:istore          7
		//*  86  181:aload_0         
		//*  87  182:invokevirtual   #258 <Method int getPaddingRight()>
		//*  88  185:istore          8
		//*  89  187:iload_3         
		//*  90  188:istore          5
		//*  91  190:iload           6
		//*  92  192:iload           7
		//*  93  194:isub            
		//*  94  195:iload           8
		//*  95  197:isub            
		//*  96  198:istore_3        
		//*  97  199:goto            41
		//*  98  202:iconst_0        
		//*  99  203:istore_3        
		//* 100  204:goto            41
		//* 101  207:iconst_0        
		//* 102  208:istore_3        
		//* 103  209:goto            155
				i = 0;
		//  104  212:iconst_0        
		//  105  213:istore_3        
			j = i;
			if(!mRecyclerView.canScrollHorizontally(-1)) goto _L7; else goto _L6
_L6:
			k = -(getWidth() - getPaddingLeft() - getPaddingRight());
			j = i;
			i = k;
			  goto _L8
_L4:
			if(mRecyclerView.canScrollVertically(1))
				i = getHeight() - getPaddingTop() - getPaddingBottom();
			else
				i = 0;
			j = i;
			if(!mRecyclerView.canScrollHorizontally(1)) goto _L7; else goto _L9
_L9:
			k = getWidth();
			l = getPaddingLeft();
			i1 = getPaddingRight();
			j = i;
			i = k - l - i1;
			  goto _L8
_L7:
			i = 0;
			  goto _L8
		//* 106  214:goto            89
		}

		public boolean performAccessibilityActionForItem(Recycler recycler, State state, View view, int i, Bundle bundle)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean performAccessibilityActionForItem(View view, int i, Bundle bundle)
		{
			return performAccessibilityActionForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:iload_2         
		//    9   17:aload_3         
		//   10   18:invokevirtual   #881 <Method boolean performAccessibilityActionForItem(RecyclerView$Recycler, RecyclerView$State, View, int, Bundle)>
		//   11   21:ireturn         
		}

		public void postOnAnimation(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				ViewCompat.postOnAnimation(((View) (mRecyclerView)), runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokestatic    #886 <Method void ViewCompat.postOnAnimation(View, Runnable)>
		//    7   15:return          
		}

		public void removeAllViews()
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iflt            26
				mChildHelper.removeViewAt(i);
		//    7   11:aload_0         
		//    8   12:getfield        #124 <Field ChildHelper mChildHelper>
		//    9   15:iload_1         
		//   10   16:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            7
		//   16   26:return          
		}

		public void removeAndRecycleAllViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            38
				if(!RecyclerView.getChildViewHolderInt(getChildAt(i)).shouldIgnore())
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:invokevirtual   #454 <Method View getChildAt(int)>
		//*  10   16:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//*  11   19:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  12   22:ifne            31
					removeAndRecycleViewAt(i, recycler);
		//   13   25:aload_0         
		//   14   26:iload_2         
		//   15   27:aload_1         
		//   16   28:invokevirtual   #892 <Method void removeAndRecycleViewAt(int, RecyclerView$Recycler)>

		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_2        
		//*  21   35:goto            7
		//   22   38:return          
		}

		void removeAndRecycleScrapInt(Recycler recycler)
		{
			int j = recycler.getScrapCount();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #896 <Method int RecyclerView$Recycler.getScrapCount()>
		//    2    4:istore_3        
			int i = j - 1;
		//    3    5:iload_3         
		//    4    6:iconst_1        
		//    5    7:isub            
		//    6    8:istore_2        
			while(i >= 0) 
		//*   7    9:iload_2         
		//*   8   10:iflt            103
			{
				View view = recycler.getScrapViewAt(i);
		//    9   13:aload_1         
		//   10   14:iload_2         
		//   11   15:invokevirtual   #899 <Method View RecyclerView$Recycler.getScrapViewAt(int)>
		//   12   18:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   13   20:aload           4
		//   14   22:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   15   25:astore          5
				if(!viewholder.shouldIgnore())
		//*  16   27:aload           5
		//*  17   29:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  18   32:ifeq            42
		//*  19   35:iload_2         
		//*  20   36:iconst_1        
		//*  21   37:isub            
		//*  22   38:istore_2        
		//*  23   39:goto            9
				{
					viewholder.setIsRecyclable(false);
		//   24   42:aload           5
		//   25   44:iconst_0        
		//   26   45:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
					if(viewholder.isTmpDetached())
		//*  27   48:aload           5
		//*  28   50:invokevirtual   #905 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  29   53:ifeq            66
						mRecyclerView.removeDetachedView(view, false);
		//   30   56:aload_0         
		//   31   57:getfield        #95  <Field RecyclerView mRecyclerView>
		//   32   60:aload           4
		//   33   62:iconst_0        
		//   34   63:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
					if(mRecyclerView.mItemAnimator != null)
		//*  35   66:aload_0         
		//*  36   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  37   70:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*  38   73:ifnull          88
						mRecyclerView.mItemAnimator.endAnimation(viewholder);
		//   39   76:aload_0         
		//   40   77:getfield        #95  <Field RecyclerView mRecyclerView>
		//   41   80:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//   42   83:aload           5
		//   43   85:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
					viewholder.setIsRecyclable(true);
		//   44   88:aload           5
		//   45   90:iconst_1        
		//   46   91:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
					recycler.quickRecycleScrapView(view);
		//   47   94:aload_1         
		//   48   95:aload           4
		//   49   97:invokevirtual   #912 <Method void RecyclerView$Recycler.quickRecycleScrapView(View)>
				}
				i--;
			}
		//*  50  100:goto            35
			recycler.clearScrap();
		//   51  103:aload_1         
		//   52  104:invokevirtual   #915 <Method void RecyclerView$Recycler.clearScrap()>
			if(j > 0)
		//*  53  107:iload_3         
		//*  54  108:ifle            118
				mRecyclerView.invalidate();
		//   55  111:aload_0         
		//   56  112:getfield        #95  <Field RecyclerView mRecyclerView>
		//   57  115:invokevirtual   #916 <Method void RecyclerView.invalidate()>
		//   58  118:return          
		}

		public void removeAndRecycleView(View view, Recycler recycler)
		{
			removeView(view);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #920 <Method void removeView(View)>
			recycler.recycleView(view);
		//    3    5:aload_2         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//    6   10:return          
		}

		public void removeAndRecycleViewAt(int i, Recycler recycler)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			removeViewAt(i);
		//    4    6:aload_0         
		//    5    7:iload_1         
		//    6    8:invokevirtual   #386 <Method void removeViewAt(int)>
			recycler.recycleView(view);
		//    7   11:aload_2         
		//    8   12:aload_3         
		//    9   13:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//   10   16:return          
		}

		public boolean removeCallbacks(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          16
				return mRecyclerView.removeCallbacks(runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #927 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    7   15:ireturn         
			else
				return false;
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void removeDetachedView(View view)
		{
			mRecyclerView.removeDetachedView(view, false);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:iconst_0        
		//    4    6:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//    5    9:return          
		}

		public void removeView(View view)
		{
			mChildHelper.removeView(view);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #928 <Method void ChildHelper.removeView(View)>
		//    4    8:return          
		}

		public void removeViewAt(int i)
		{
			if(getChildAt(i) != null)
		//*   0    0:aload_0         
		//*   1    1:iload_1         
		//*   2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//*   3    5:ifnull          16
				mChildHelper.removeViewAt(i);
		//    4    8:aload_0         
		//    5    9:getfield        #124 <Field ChildHelper mChildHelper>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>
		//    8   16:return          
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			return requestChildRectangleOnScreen(recyclerview, view, rect, flag, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:iconst_0        
		//    6    7:invokevirtual   #933 <Method boolean requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
		//    7   10:ireturn         
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag, boolean flag1)
		{
label0:
			{
				boolean flag2 = false;
		//    0    0:iconst_0        
		//    1    1:istore          8
				view = ((View) (getChildRectangleOnScreenScrollAmount(recyclerview, view, rect, flag)));
		//    2    3:aload_0         
		//    3    4:aload_1         
		//    4    5:aload_2         
		//    5    6:aload_3         
		//    6    7:iload           4
		//    7    9:invokespecial   #935 <Method int[] getChildRectangleOnScreenScrollAmount(RecyclerView, View, Rect, boolean)>
		//    8   12:astore_2        
				int i = view[0];
		//    9   13:aload_2         
		//   10   14:iconst_0        
		//   11   15:iaload          
		//   12   16:istore          6
				int j = view[1];
		//   13   18:aload_2         
		//   14   19:iconst_1        
		//   15   20:iaload          
		//   16   21:istore          7
				if(flag1)
		//*  17   23:iload           5
		//*  18   25:ifeq            44
				{
					flag1 = flag2;
		//   19   28:iload           8
		//   20   30:istore          5
					if(!isFocusedChildVisibleAfterScrolling(recyclerview, i, j))
						break label0;
		//   21   32:aload_0         
		//   22   33:aload_1         
		//   23   34:iload           6
		//   24   36:iload           7
		//   25   38:invokespecial   #937 <Method boolean isFocusedChildVisibleAfterScrolling(RecyclerView, int, int)>
		//   26   41:ifeq            74
				}
				if(i == 0)
		//*  27   44:iload           6
		//*  28   46:ifne            58
				{
					flag1 = flag2;
		//   29   49:iload           8
		//   30   51:istore          5
					if(j == 0)
						break label0;
		//   31   53:iload           7
		//   32   55:ifeq            74
				}
				if(flag)
		//*  33   58:iload           4
		//*  34   60:ifeq            77
					recyclerview.scrollBy(i, j);
		//   35   63:aload_1         
		//   36   64:iload           6
		//   37   66:iload           7
		//   38   68:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				else
		//*  39   71:iconst_1        
		//*  40   72:istore          5
		//*  41   74:iload           5
		//*  42   76:ireturn         
					recyclerview.smoothScrollBy(i, j);
		//   43   77:aload_1         
		//   44   78:iload           6
		//   45   80:iload           7
		//   46   82:invokevirtual   #940 <Method void RecyclerView.smoothScrollBy(int, int)>
				flag1 = true;
			}
			return flag1;
		//*  47   85:goto            71
		}

		public void requestLayout()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          14
				mRecyclerView.requestLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #943 <Method void RecyclerView.requestLayout()>
		//    6   14:return          
		}

		public void requestSimpleAnimationsInNextLayout()
		{
			mRequestedSimpleAnimations = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #66  <Field boolean mRequestedSimpleAnimations>
		//    3    5:return          
		}

		public int scrollHorizontallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void scrollToPosition(int i)
		{
		//    0    0:return          
		}

		public int scrollVerticallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void setAutoMeasureEnabled(boolean flag)
		{
			mAutoMeasure = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #70  <Field boolean mAutoMeasure>
		//    3    5:return          
		}

		void setExactMeasureSpecsFrom(RecyclerView recyclerview)
		{
			setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getHeight(), 0x40000000));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//    3    5:ldc1            #237 <Int 0x40000000>
		//    4    7:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    5   10:aload_1         
		//    6   11:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//    7   14:ldc1            #237 <Int 0x40000000>
		//    8   16:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    9   19:invokevirtual   #955 <Method void setMeasureSpecs(int, int)>
		//   10   22:return          
		}

		public final void setItemPrefetchEnabled(boolean flag)
		{
			if(flag != mItemPrefetchEnabled)
		//*   0    0:iload_1         
		//*   1    1:aload_0         
		//*   2    2:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//*   3    5:icmpeq          35
			{
				mItemPrefetchEnabled = flag;
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:putfield        #74  <Field boolean mItemPrefetchEnabled>
				mPrefetchMaxCountObserved = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #958 <Field int mPrefetchMaxCountObserved>
				if(mRecyclerView != null)
		//*  10   18:aload_0         
		//*  11   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   22:ifnull          35
					mRecyclerView.mRecycler.updateViewCacheSize();
		//   13   25:aload_0         
		//   14   26:getfield        #95  <Field RecyclerView mRecyclerView>
		//   15   29:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   16   32:invokevirtual   #961 <Method void RecyclerView$Recycler.updateViewCacheSize()>
			}
		//   17   35:return          
		}

		void setMeasureSpecs(int i, int j)
		{
			mWidth = android.view.View.MeasureSpec.getSize(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    3    5:putfield        #657 <Field int mWidth>
			mWidthMode = android.view.View.MeasureSpec.getMode(i);
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    7   13:putfield        #660 <Field int mWidthMode>
			if(mWidthMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*   8   16:aload_0         
		//*   9   17:getfield        #660 <Field int mWidthMode>
		//*  10   20:ifne            34
		//*  11   23:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  12   26:ifne            34
				mWidth = 0;
		//   13   29:aload_0         
		//   14   30:iconst_0        
		//   15   31:putfield        #657 <Field int mWidth>
			mHeight = android.view.View.MeasureSpec.getSize(j);
		//   16   34:aload_0         
		//   17   35:iload_2         
		//   18   36:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//   19   39:putfield        #574 <Field int mHeight>
			mHeightMode = android.view.View.MeasureSpec.getMode(j);
		//   20   42:aload_0         
		//   21   43:iload_2         
		//   22   44:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//   23   47:putfield        #577 <Field int mHeightMode>
			if(mHeightMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*  24   50:aload_0         
		//*  25   51:getfield        #577 <Field int mHeightMode>
		//*  26   54:ifne            68
		//*  27   57:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  28   60:ifne            68
				mHeight = 0;
		//   29   63:aload_0         
		//   30   64:iconst_0        
		//   31   65:putfield        #574 <Field int mHeight>
		//   32   68:return          
		}

		public void setMeasuredDimension(int i, int j)
		{
			mRecyclerView.setMeasuredDimension(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokestatic    #968 <Method void RecyclerView.access$1200(RecyclerView, int, int)>
		//    5    9:return          
		}

		public void setMeasuredDimension(Rect rect, int i, int j)
		{
			int k = rect.width();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #287 <Method int Rect.width()>
		//    2    4:istore          4
			int l = getPaddingLeft();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #249 <Method int getPaddingLeft()>
		//    5   10:istore          5
			int i1 = getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #258 <Method int getPaddingRight()>
		//    8   16:istore          6
			int j1 = rect.height();
		//    9   18:aload_1         
		//   10   19:invokevirtual   #290 <Method int Rect.height()>
		//   11   22:istore          7
			int k1 = getPaddingTop();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #252 <Method int getPaddingTop()>
		//   14   28:istore          8
			int l1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   34:istore          9
			setMeasuredDimension(chooseSize(i, k + l + i1, getMinimumWidth()), chooseSize(j, j1 + k1 + l1, getMinimumHeight()));
		//   18   36:aload_0         
		//   19   37:iload_2         
		//   20   38:iload           4
		//   21   40:iload           5
		//   22   42:iadd            
		//   23   43:iload           6
		//   24   45:iadd            
		//   25   46:aload_0         
		//   26   47:invokevirtual   #971 <Method int getMinimumWidth()>
		//   27   50:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   28   53:iload_3         
		//   29   54:iload           7
		//   30   56:iload           8
		//   31   58:iadd            
		//   32   59:iload           9
		//   33   61:iadd            
		//   34   62:aload_0         
		//   35   63:invokevirtual   #975 <Method int getMinimumHeight()>
		//   36   66:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   37   69:invokevirtual   #977 <Method void setMeasuredDimension(int, int)>
		//   38   72:return          
		}

		void setMeasuredDimensionFromChildren(int i, int j)
		{
			int i1 = 0x7fffffff;
		//    0    0:ldc2            #979 <Int 0x7fffffff>
		//    1    3:istore          5
			int l = 0x80000000;
		//    2    5:ldc1            #241 <Int 0x80000000>
		//    3    7:istore          4
			int l2 = getChildCount();
		//    4    9:aload_0         
		//    5   10:invokevirtual   #450 <Method int getChildCount()>
		//    6   13:istore          12
			if(l2 == 0)
		//*   7   15:iload           12
		//*   8   17:ifne            30
			{
				mRecyclerView.defaultOnMeasure(i, j);
		//    9   20:aload_0         
		//   10   21:getfield        #95  <Field RecyclerView mRecyclerView>
		//   11   24:iload_1         
		//   12   25:iload_2         
		//   13   26:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
				return;
		//   14   29:return          
			}
			int k = 0;
		//   15   30:iconst_0        
		//   16   31:istore_3        
			int k1 = 0x80000000;
		//   17   32:ldc1            #241 <Int 0x80000000>
		//   18   34:istore          7
			int j2 = 0x7fffffff;
		//   19   36:ldc2            #979 <Int 0x7fffffff>
		//   20   39:istore          10
			while(k < l2) 
		//*  21   41:iload_3         
		//*  22   42:iload           12
		//*  23   44:icmpge          178
			{
				View view = getChildAt(k);
		//   24   47:aload_0         
		//   25   48:iload_3         
		//   26   49:invokevirtual   #454 <Method View getChildAt(int)>
		//   27   52:astore          13
				Rect rect = mRecyclerView.mTempRect;
		//   28   54:aload_0         
		//   29   55:getfield        #95  <Field RecyclerView mRecyclerView>
		//   30   58:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   31   61:astore          14
				getDecoratedBoundsWithMargins(view, rect);
		//   32   63:aload_0         
		//   33   64:aload           13
		//   34   66:aload           14
		//   35   68:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				int j1 = j2;
		//   36   71:iload           10
		//   37   73:istore          6
				if(rect.left < j2)
		//*  38   75:aload           14
		//*  39   77:getfield        #272 <Field int Rect.left>
		//*  40   80:iload           10
		//*  41   82:icmpge          92
					j1 = rect.left;
		//   42   85:aload           14
		//   43   87:getfield        #272 <Field int Rect.left>
		//   44   90:istore          6
				int l1 = k1;
		//   45   92:iload           7
		//   46   94:istore          8
				if(rect.right > k1)
		//*  47   96:aload           14
		//*  48   98:getfield        #361 <Field int Rect.right>
		//*  49  101:iload           7
		//*  50  103:icmple          113
					l1 = rect.right;
		//   51  106:aload           14
		//   52  108:getfield        #361 <Field int Rect.right>
		//   53  111:istore          8
				int i2 = i1;
		//   54  113:iload           5
		//   55  115:istore          9
				if(rect.top < i1)
		//*  56  117:aload           14
		//*  57  119:getfield        #281 <Field int Rect.top>
		//*  58  122:iload           5
		//*  59  124:icmpge          134
					i2 = rect.top;
		//   60  127:aload           14
		//   61  129:getfield        #281 <Field int Rect.top>
		//   62  132:istore          9
				int k2 = l;
		//   63  134:iload           4
		//   64  136:istore          11
				if(rect.bottom > l)
		//*  65  138:aload           14
		//*  66  140:getfield        #364 <Field int Rect.bottom>
		//*  67  143:iload           4
		//*  68  145:icmple          155
					k2 = rect.bottom;
		//   69  148:aload           14
		//   70  150:getfield        #364 <Field int Rect.bottom>
		//   71  153:istore          11
				k++;
		//   72  155:iload_3         
		//   73  156:iconst_1        
		//   74  157:iadd            
		//   75  158:istore_3        
				j2 = j1;
		//   76  159:iload           6
		//   77  161:istore          10
				k1 = l1;
		//   78  163:iload           8
		//   79  165:istore          7
				i1 = i2;
		//   80  167:iload           9
		//   81  169:istore          5
				l = k2;
		//   82  171:iload           11
		//   83  173:istore          4
			}
		//*  84  175:goto            41
			mRecyclerView.mTempRect.set(j2, i1, k1, l);
		//   85  178:aload_0         
		//   86  179:getfield        #95  <Field RecyclerView mRecyclerView>
		//   87  182:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   88  185:iload           10
		//   89  187:iload           5
		//   90  189:iload           7
		//   91  191:iload           4
		//   92  193:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			setMeasuredDimension(mRecyclerView.mTempRect, i, j);
		//   93  196:aload_0         
		//   94  197:aload_0         
		//   95  198:getfield        #95  <Field RecyclerView mRecyclerView>
		//   96  201:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   97  204:iload_1         
		//   98  205:iload_2         
		//   99  206:invokevirtual   #981 <Method void setMeasuredDimension(Rect, int, int)>
		//  100  209:return          
		}

		public void setMeasurementCacheEnabled(boolean flag)
		{
			mMeasurementCacheEnabled = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    3    5:return          
		}

		void setRecyclerView(RecyclerView recyclerview)
		{
			if(recyclerview == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       37
			{
				mRecyclerView = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = null;
		//    5    9:aload_0         
		//    6   10:aconst_null     
		//    7   11:putfield        #124 <Field ChildHelper mChildHelper>
				mWidth = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #657 <Field int mWidth>
				mHeight = 0;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #574 <Field int mHeight>
			} else
		//*  14   24:aload_0         
		//*  15   25:ldc1            #237 <Int 0x40000000>
		//*  16   27:putfield        #660 <Field int mWidthMode>
		//*  17   30:aload_0         
		//*  18   31:ldc1            #237 <Int 0x40000000>
		//*  19   33:putfield        #577 <Field int mHeightMode>
		//*  20   36:return          
			{
				mRecyclerView = recyclerview;
		//   21   37:aload_0         
		//   22   38:aload_1         
		//   23   39:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = recyclerview.mChildHelper;
		//   24   42:aload_0         
		//   25   43:aload_1         
		//   26   44:getfield        #984 <Field ChildHelper RecyclerView.mChildHelper>
		//   27   47:putfield        #124 <Field ChildHelper mChildHelper>
				mWidth = recyclerview.getWidth();
		//   28   50:aload_0         
		//   29   51:aload_1         
		//   30   52:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//   31   55:putfield        #657 <Field int mWidth>
				mHeight = recyclerview.getHeight();
		//   32   58:aload_0         
		//   33   59:aload_1         
		//   34   60:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//   35   63:putfield        #574 <Field int mHeight>
			}
			mWidthMode = 0x40000000;
			mHeightMode = 0x40000000;
		//*  36   66:goto            24
		}

		boolean shouldMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return view.isLayoutRequested() || !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getHeight(), j, layoutparams.height);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #987 <Method boolean View.isLayoutRequested()>
		//    2    4:ifne            46
		//    3    7:aload_0         
		//    4    8:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    5   11:ifeq            46
		//    6   14:aload_1         
		//    7   15:invokevirtual   #615 <Method int View.getWidth()>
		//    8   18:iload_2         
		//    9   19:aload           4
		//   10   21:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   11   24:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   12   27:ifeq            46
		//   13   30:aload_1         
		//   14   31:invokevirtual   #616 <Method int View.getHeight()>
		//   15   34:iload_3         
		//   16   35:aload           4
		//   17   37:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   18   40:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   19   43:ifne            48
		//   20   46:iconst_1        
		//   21   47:ireturn         
		//   22   48:iconst_0        
		//   23   49:ireturn         
		}

		boolean shouldMeasureTwice()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean shouldReMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getMeasuredWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getMeasuredHeight(), j, layoutparams.height);
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ifeq            39
		//    3    7:aload_1         
		//    4    8:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    5   11:iload_2         
		//    6   12:aload           4
		//    7   14:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//    8   17:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//    9   20:ifeq            39
		//   10   23:aload_1         
		//   11   24:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//   12   27:iload_3         
		//   13   28:aload           4
		//   14   30:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   15   33:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   16   36:ifne            41
		//   17   39:iconst_1        
		//   18   40:ireturn         
		//   19   41:iconst_0        
		//   20   42:ireturn         
		}

		public void smoothScrollToPosition(RecyclerView recyclerview, State state, int i)
		{
			Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #995 <String "You must override smoothScrollToPosition to support smooth scrolling">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void startSmoothScroll(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller != null && smoothscroller != mSmoothScroller && mSmoothScroller.isRunning())
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          32
		//*   3    7:aload_1         
		//*   4    8:aload_0         
		//*   5    9:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   6   12:if_acmpeq       32
		//*   7   15:aload_0         
		//*   8   16:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   9   19:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//*  10   22:ifeq            32
				mSmoothScroller.stop();
		//   11   25:aload_0         
		//   12   26:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   13   29:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
			mSmoothScroller = smoothscroller;
		//   14   32:aload_0         
		//   15   33:aload_1         
		//   16   34:putfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
			mSmoothScroller.start(mRecyclerView, this);
		//   17   37:aload_0         
		//   18   38:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   19   41:aload_0         
		//   20   42:getfield        #95  <Field RecyclerView mRecyclerView>
		//   21   45:aload_0         
		//   22   46:invokevirtual   #1003 <Method void RecyclerView$SmoothScroller.start(RecyclerView, RecyclerView$LayoutManager)>
		//   23   49:return          
		}

		public void stopIgnoringView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			((ViewHolder) (view)).stopIgnoring();
		//    3    5:aload_1         
		//    4    6:invokevirtual   #1007 <Method void RecyclerView$ViewHolder.stopIgnoring()>
			((ViewHolder) (view)).resetInternal();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #1010 <Method void RecyclerView$ViewHolder.resetInternal()>
			((ViewHolder) (view)).addFlags(4);
		//    7   13:aload_1         
		//    8   14:iconst_4        
		//    9   15:invokevirtual   #679 <Method void RecyclerView$ViewHolder.addFlags(int)>
		//   10   18:return          
		}

		void stopSmoothScroller()
		{
			if(mSmoothScroller != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          14
				mSmoothScroller.stop();
		//    3    7:aload_0         
		//    4    8:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
		//    6   14:return          
		}

		public boolean supportsPredictiveItemAnimations()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean mAutoMeasure;
		ChildHelper mChildHelper;
		private int mHeight;
		private int mHeightMode;
		ViewBoundsCheck mHorizontalBoundCheck;
		private final ViewBoundsCheck.Callback mHorizontalBoundCheckCallback = new _cls1();
		boolean mIsAttachedToWindow;
		private boolean mItemPrefetchEnabled;
		private boolean mMeasurementCacheEnabled;
		int mPrefetchMaxCountObserved;
		boolean mPrefetchMaxObservedInInitialPrefetch;
		RecyclerView mRecyclerView;
		boolean mRequestedSimpleAnimations;
		SmoothScroller mSmoothScroller;
		ViewBoundsCheck mVerticalBoundCheck;
		private final ViewBoundsCheck.Callback mVerticalBoundCheckCallback = new _cls2();
		private int mWidth;
		private int mWidthMode;


/*
		static void access$1400(LayoutManager layoutmanager, SmoothScroller smoothscroller)
		{
			layoutmanager.onSmoothScrollerStopped(smoothscroller);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #81  <Method void onSmoothScrollerStopped(RecyclerView$SmoothScroller)>
			return;
		//    3    5:return          
		}

*/

		public LayoutManager()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #47  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #9   <Class RecyclerView$LayoutManager$1>
		//    4    8:dup             
		//    5    9:aload_0         
		//    6   10:invokespecial   #50  <Method void RecyclerView$LayoutManager$1(RecyclerView$LayoutManager)>
		//    7   13:putfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//    8   16:aload_0         
		//    9   17:new             #11  <Class RecyclerView$LayoutManager$2>
		//   10   20:dup             
		//   11   21:aload_0         
		//   12   22:invokespecial   #53  <Method void RecyclerView$LayoutManager$2(RecyclerView$LayoutManager)>
		//   13   25:putfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
			mHorizontalBoundCheck = new ViewBoundsCheck(mHorizontalBoundCheckCallback);
		//   14   28:aload_0         
		//   15   29:new             #57  <Class ViewBoundsCheck>
		//   16   32:dup             
		//   17   33:aload_0         
		//   18   34:getfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//   19   37:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   20   40:putfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
			mVerticalBoundCheck = new ViewBoundsCheck(mVerticalBoundCheckCallback);
		//   21   43:aload_0         
		//   22   44:new             #57  <Class ViewBoundsCheck>
		//   23   47:dup             
		//   24   48:aload_0         
		//   25   49:getfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
		//   26   52:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   27   55:putfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
			mRequestedSimpleAnimations = false;
		//   28   58:aload_0         
		//   29   59:iconst_0        
		//   30   60:putfield        #66  <Field boolean mRequestedSimpleAnimations>
			mIsAttachedToWindow = false;
		//   31   63:aload_0         
		//   32   64:iconst_0        
		//   33   65:putfield        #68  <Field boolean mIsAttachedToWindow>
			mAutoMeasure = false;
		//   34   68:aload_0         
		//   35   69:iconst_0        
		//   36   70:putfield        #70  <Field boolean mAutoMeasure>
			mMeasurementCacheEnabled = true;
		//   37   73:aload_0         
		//   38   74:iconst_1        
		//   39   75:putfield        #72  <Field boolean mMeasurementCacheEnabled>
			mItemPrefetchEnabled = true;
		//   40   78:aload_0         
		//   41   79:iconst_1        
		//   42   80:putfield        #74  <Field boolean mItemPrefetchEnabled>
		//   43   83:return          
		}
	}

	public static interface LayoutManager.LayoutPrefetchRegistry
	{

		public abstract void addPosition(int i, int j);
	}

	public static class LayoutManager.Properties
	{

		public int orientation;
		public boolean reverseLayout;
		public int spanCount;
		public boolean stackFromEnd;

		public LayoutManager.Properties()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams
	{

		public int getViewAdapterPosition()
		{
			return mViewHolder.getAdapterPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #49  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//    3    7:ireturn         
		}

		public int getViewLayoutPosition()
		{
			return mViewHolder.getLayoutPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #53  <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//    3    7:ireturn         
		}

		public int getViewPosition()
		{
			return mViewHolder.getPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #58  <Method int RecyclerView$ViewHolder.getPosition()>
		//    3    7:ireturn         
		}

		public boolean isItemChanged()
		{
			return mViewHolder.isUpdated();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #64  <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//    3    7:ireturn         
		}

		public boolean isItemRemoved()
		{
			return mViewHolder.isRemoved();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #68  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//    3    7:ireturn         
		}

		public boolean isViewInvalid()
		{
			return mViewHolder.isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #72  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//    3    7:ireturn         
		}

		public boolean viewNeedsUpdate()
		{
			return mViewHolder.needsUpdate();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #76  <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//    3    7:ireturn         
		}

		final Rect mDecorInsets;
		boolean mInsetsDirty;
		boolean mPendingInvalidate;
		ViewHolder mViewHolder;

		public LayoutParams(int i, int j)
		{
			super(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #18  <Method void android.view.ViewGroup$MarginLayoutParams(int, int)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(Context context, AttributeSet attributeset)
		{
			super(context, attributeset);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #33  <Method void android.view.ViewGroup$MarginLayoutParams(Context, AttributeSet)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(LayoutParams layoutparams)
		{
			super(((android.view.ViewGroup.LayoutParams) (layoutparams)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			super(layoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams)
		{
			super(marginlayoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #40  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}
	}

	public static interface OnChildAttachStateChangeListener
	{

		public abstract void onChildViewAttachedToWindow(View view);

		public abstract void onChildViewDetachedFromWindow(View view);
	}

	public static abstract class OnFlingListener
	{

		public abstract boolean onFling(int i, int j);

		public OnFlingListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface OnItemTouchListener
	{

		public abstract boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);

		public abstract void onRequestDisallowInterceptTouchEvent(boolean flag);

		public abstract void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);
	}

	public static abstract class OnScrollListener
	{

		public void onScrollStateChanged(RecyclerView recyclerview, int i)
		{
		//    0    0:return          
		}

		public void onScrolled(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public OnScrollListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class RecycledViewPool
	{

		private ScrapData getScrapDataForType(int i)
		{
			ScrapData scrapdata1 = (ScrapData)mScrap.get(i);
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_3        
			ScrapData scrapdata = scrapdata1;
		//    6   12:aload_3         
		//    7   13:astore_2        
			if(scrapdata1 == null)
		//*   8   14:aload_3         
		//*   9   15:ifnonnull       35
			{
				scrapdata = new ScrapData();
		//   10   18:new             #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   11   21:dup             
		//   12   22:invokespecial   #36  <Method void RecyclerView$RecycledViewPool$ScrapData()>
		//   13   25:astore_2        
				mScrap.put(i, ((Object) (scrapdata)));
		//   14   26:aload_0         
		//   15   27:getfield        #26  <Field SparseArray mScrap>
		//   16   30:iload_1         
		//   17   31:aload_2         
		//   18   32:invokevirtual   #40  <Method void SparseArray.put(int, Object)>
			}
			return scrapdata;
		//   19   35:aload_2         
		//   20   36:areturn         
		}

		void attach(Adapter adapter)
		{
			mAttachCount = mAttachCount + 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:iadd            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		public void clear()
		{
			for(int i = 0; i < mScrap.size(); i++)
		//*   0    0:iconst_0        
		//*   1    1:istore_1        
		//*   2    2:iload_1         
		//*   3    3:aload_0         
		//*   4    4:getfield        #26  <Field SparseArray mScrap>
		//*   5    7:invokevirtual   #47  <Method int SparseArray.size()>
		//*   6   10:icmpge          37
				((ScrapData)mScrap.valueAt(i)).mScrapHeap.clear();
		//    7   13:aload_0         
		//    8   14:getfield        #26  <Field SparseArray mScrap>
		//    9   17:iload_1         
		//   10   18:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   11   21:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   12   24:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   13   27:invokevirtual   #58  <Method void ArrayList.clear()>

		//   14   30:iload_1         
		//   15   31:iconst_1        
		//   16   32:iadd            
		//   17   33:istore_1        
		//*  18   34:goto            2
		//   19   37:return          
		}

		void detach()
		{
			mAttachCount = mAttachCount - 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:isub            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		void factorInBindTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mBindRunningAverageNs = runningAverage(scrapdata.mBindRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//   11   22:return          
		}

		void factorInCreateTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mCreateRunningAverageNs = runningAverage(scrapdata.mCreateRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//   11   22:return          
		}

		public ViewHolder getRecycledView(int i)
		{
			Object obj = ((Object) ((ScrapData)mScrap.get(i)));
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_2        
			if(obj != null && !((ScrapData) (obj)).mScrapHeap.isEmpty())
		//*   6   12:aload_2         
		//*   7   13:ifnull          45
		//*   8   16:aload_2         
		//*   9   17:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//*  10   20:invokevirtual   #81  <Method boolean ArrayList.isEmpty()>
		//*  11   23:ifne            45
			{
				obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//   12   26:aload_2         
		//   13   27:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   14   30:astore_2        
				return (ViewHolder)((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1);
		//   15   31:aload_2         
		//   16   32:aload_2         
		//   17   33:invokevirtual   #82  <Method int ArrayList.size()>
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   21   41:checkcast       #87  <Class RecyclerView$ViewHolder>
		//   22   44:areturn         
			} else
			{
				return null;
		//   23   45:aconst_null     
		//   24   46:areturn         
			}
		}

		public int getRecycledViewCount(int i)
		{
			return getScrapDataForType(i).mScrapHeap.size();
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    4    8:invokevirtual   #82  <Method int ArrayList.size()>
		//    5   11:ireturn         
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			if(adapter != null)
		//*   0    0:aload_1         
		//*   1    1:ifnull          8
				detach();
		//    2    4:aload_0         
		//    3    5:invokevirtual   #93  <Method void detach()>
			if(!flag && mAttachCount == 0)
		//*   4    8:iload_3         
		//*   5    9:ifne            23
		//*   6   12:aload_0         
		//*   7   13:getfield        #28  <Field int mAttachCount>
		//*   8   16:ifne            23
				clear();
		//    9   19:aload_0         
		//   10   20:invokevirtual   #94  <Method void clear()>
			if(adapter1 != null)
		//*  11   23:aload_2         
		//*  12   24:ifnull          32
				attach(adapter1);
		//   13   27:aload_0         
		//   14   28:aload_2         
		//   15   29:invokevirtual   #96  <Method void attach(RecyclerView$Adapter)>
		//   16   32:return          
		}

		public void putRecycledView(ViewHolder viewholder)
		{
			int i = viewholder.getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #101 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    2    4:istore_2        
			ArrayList arraylist = getScrapDataForType(i).mScrapHeap;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    6   10:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    7   13:astore_3        
			if(((ScrapData)mScrap.get(i)).mMaxScrap <= arraylist.size())
		//*   8   14:aload_0         
		//*   9   15:getfield        #26  <Field SparseArray mScrap>
		//*  10   18:iload_2         
		//*  11   19:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//*  12   22:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//*  13   25:getfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
		//*  14   28:aload_3         
		//*  15   29:invokevirtual   #82  <Method int ArrayList.size()>
		//*  16   32:icmpgt          36
			{
				return;
		//   17   35:return          
			} else
			{
				viewholder.resetInternal();
		//   18   36:aload_1         
		//   19   37:invokevirtual   #107 <Method void RecyclerView$ViewHolder.resetInternal()>
				arraylist.add(((Object) (viewholder)));
		//   20   40:aload_3         
		//   21   41:aload_1         
		//   22   42:invokevirtual   #111 <Method boolean ArrayList.add(Object)>
		//   23   45:pop             
				return;
		//   24   46:return          
			}
		}

		long runningAverage(long l, long l1)
		{
			if(l == 0L)
		//*   0    0:lload_1         
		//*   1    1:lconst_0        
		//*   2    2:lcmp            
		//*   3    3:ifne            8
				return l1;
		//    4    6:lload_3         
		//    5    7:lreturn         
			else
				return (l / 4L) * 3L + l1 / 4L;
		//    6    8:lload_1         
		//    7    9:ldc2w           #112 <Long 4L>
		//    8   12:ldiv            
		//    9   13:ldc2w           #114 <Long 3L>
		//   10   16:lmul            
		//   11   17:lload_3         
		//   12   18:ldc2w           #112 <Long 4L>
		//   13   21:ldiv            
		//   14   22:ladd            
		//   15   23:lreturn         
		}

		public void setMaxRecycledViews(int i, int j)
		{
			Object obj = ((Object) (getScrapDataForType(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore_3        
			obj.mMaxScrap = j;
		//    4    6:aload_3         
		//    5    7:iload_2         
		//    6    8:putfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
			obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//    7   11:aload_3         
		//    8   12:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    9   15:astore_3        
			if(obj != null)
		//*  10   16:aload_3         
		//*  11   17:ifnull          42
				for(; ((ArrayList) (obj)).size() > j; ((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1));
		//   12   20:aload_3         
		//   13   21:invokevirtual   #82  <Method int ArrayList.size()>
		//   14   24:iload_2         
		//   15   25:icmple          42
		//   16   28:aload_3         
		//   17   29:aload_3         
		//   18   30:invokevirtual   #82  <Method int ArrayList.size()>
		//   19   33:iconst_1        
		//   20   34:isub            
		//   21   35:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   22   38:pop             
		//*  23   39:goto            20
		//   24   42:return          
		}

		int size()
		{
			int i = 0;
		//    0    0:iconst_0        
		//    1    1:istore_1        
			int j;
			int k;
			for(j = 0; i < mScrap.size(); j = k)
		//*   2    2:iconst_0        
		//*   3    3:istore_2        
		//*   4    4:iload_1         
		//*   5    5:aload_0         
		//*   6    6:getfield        #26  <Field SparseArray mScrap>
		//*   7    9:invokevirtual   #47  <Method int SparseArray.size()>
		//*   8   12:icmpge          55
			{
				ArrayList arraylist = ((ScrapData)mScrap.valueAt(i)).mScrapHeap;
		//    9   15:aload_0         
		//   10   16:getfield        #26  <Field SparseArray mScrap>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   13   23:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   14   26:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   15   29:astore          4
				k = j;
		//   16   31:iload_2         
		//   17   32:istore_3        
				if(arraylist != null)
		//*  18   33:aload           4
		//*  19   35:ifnull          46
					k = j + arraylist.size();
		//   20   38:iload_2         
		//   21   39:aload           4
		//   22   41:invokevirtual   #82  <Method int ArrayList.size()>
		//   23   44:iadd            
		//   24   45:istore_3        
				i++;
		//   25   46:iload_1         
		//   26   47:iconst_1        
		//   27   48:iadd            
		//   28   49:istore_1        
			}

		//   29   50:iload_3         
		//   30   51:istore_2        
		//*  31   52:goto            4
			return j;
		//   32   55:iload_2         
		//   33   56:ireturn         
		}

		boolean willBindInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mBindRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l2 + l < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload           6
		//   10   19:lload_2         
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		boolean willCreateInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mCreateRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l2 + l < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload           6
		//   10   19:lload_2         
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		private static final int DEFAULT_MAX_SCRAP = 5;
		private int mAttachCount;
		SparseArray mScrap;

		public RecycledViewPool()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #21  <Method void Object()>
			mScrap = new SparseArray();
		//    2    4:aload_0         
		//    3    5:new             #23  <Class SparseArray>
		//    4    8:dup             
		//    5    9:invokespecial   #24  <Method void SparseArray()>
		//    6   12:putfield        #26  <Field SparseArray mScrap>
			mAttachCount = 0;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #28  <Field int mAttachCount>
		//   10   20:return          
		}
	}

	static class RecycledViewPool.ScrapData
	{

		long mBindRunningAverageNs;
		long mCreateRunningAverageNs;
		int mMaxScrap;
		ArrayList mScrapHeap;

		RecycledViewPool.ScrapData()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #22  <Method void Object()>
			mScrapHeap = new ArrayList();
		//    2    4:aload_0         
		//    3    5:new             #24  <Class ArrayList>
		//    4    8:dup             
		//    5    9:invokespecial   #25  <Method void ArrayList()>
		//    6   12:putfield        #27  <Field ArrayList mScrapHeap>
			mMaxScrap = 5;
		//    7   15:aload_0         
		//    8   16:iconst_5        
		//    9   17:putfield        #29  <Field int mMaxScrap>
			mCreateRunningAverageNs = 0L;
		//   10   20:aload_0         
		//   11   21:lconst_0        
		//   12   22:putfield        #31  <Field long mCreateRunningAverageNs>
			mBindRunningAverageNs = 0L;
		//   13   25:aload_0         
		//   14   26:lconst_0        
		//   15   27:putfield        #33  <Field long mBindRunningAverageNs>
		//   16   30:return          
		}
	}

	public final class Recycler
	{

		private void attachAccessibilityDelegateOnBind(ViewHolder viewholder)
		{
			if(isAccessibilityEnabled())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:invokevirtual   #61  <Method boolean RecyclerView.isAccessibilityEnabled()>
		//*   3    7:ifeq            55
			{
				View view = viewholder.itemView;
		//    4   10:aload_1         
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:astore_2        
				if(ViewCompat.getImportantForAccessibility(view) == 0)
		//*   7   15:aload_2         
		//*   8   16:invokestatic    #73  <Method int ViewCompat.getImportantForAccessibility(View)>
		//*   9   19:ifne            27
					ViewCompat.setImportantForAccessibility(view, 1);
		//   10   22:aload_2         
		//   11   23:iconst_1        
		//   12   24:invokestatic    #77  <Method void ViewCompat.setImportantForAccessibility(View, int)>
				if(!ViewCompat.hasAccessibilityDelegate(view))
		//*  13   27:aload_2         
		//*  14   28:invokestatic    #81  <Method boolean ViewCompat.hasAccessibilityDelegate(View)>
		//*  15   31:ifne            55
				{
					viewholder.addFlags(16384);
		//   16   34:aload_1         
		//   17   35:sipush          16384
		//   18   38:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					ViewCompat.setAccessibilityDelegate(view, mAccessibilityDelegate.getItemDelegate());
		//   19   41:aload_2         
		//   20   42:aload_0         
		//   21   43:getfield        #30  <Field RecyclerView this$0>
		//   22   46:getfield        #89  <Field RecyclerViewAccessibilityDelegate RecyclerView.mAccessibilityDelegate>
		//   23   49:invokevirtual   #95  <Method android.support.v4.view.AccessibilityDelegateCompat RecyclerViewAccessibilityDelegate.getItemDelegate()>
		//   24   52:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
				}
			}
		//   25   55:return          
		}

		private void invalidateDisplayListInt(ViewHolder viewholder)
		{
			if(viewholder.itemView instanceof ViewGroup)
		//*   0    0:aload_1         
		//*   1    1:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*   2    4:instanceof      #102 <Class ViewGroup>
		//*   3    7:ifeq            22
				invalidateDisplayListInt((ViewGroup)viewholder.itemView, false);
		//    4   10:aload_0         
		//    5   11:aload_1         
		//    6   12:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    7   15:checkcast       #102 <Class ViewGroup>
		//    8   18:iconst_0        
		//    9   19:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
		//   10   22:return          
		}

		private void invalidateDisplayListInt(ViewGroup viewgroup, boolean flag)
		{
			for(int i = viewgroup.getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #109 <Method int ViewGroup.getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_3        
		//*   5    7:iload_3         
		//*   6    8:iflt            43
			{
				View view = viewgroup.getChildAt(i);
		//    7   11:aload_1         
		//    8   12:iload_3         
		//    9   13:invokevirtual   #113 <Method View ViewGroup.getChildAt(int)>
		//   10   16:astore          4
				if(view instanceof ViewGroup)
		//*  11   18:aload           4
		//*  12   20:instanceof      #102 <Class ViewGroup>
		//*  13   23:ifeq            36
					invalidateDisplayListInt((ViewGroup)view, true);
		//   14   26:aload_0         
		//   15   27:aload           4
		//   16   29:checkcast       #102 <Class ViewGroup>
		//   17   32:iconst_1        
		//   18   33:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
			}

		//   19   36:iload_3         
		//   20   37:iconst_1        
		//   21   38:isub            
		//   22   39:istore_3        
		//*  23   40:goto            7
			if(!flag)
		//*  24   43:iload_2         
		//*  25   44:ifne            48
				return;
		//   26   47:return          
			if(viewgroup.getVisibility() == 4)
		//*  27   48:aload_1         
		//*  28   49:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//*  29   52:iconst_4        
		//*  30   53:icmpne          67
			{
				viewgroup.setVisibility(0);
		//   31   56:aload_1         
		//   32   57:iconst_0        
		//   33   58:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(4);
		//   34   61:aload_1         
		//   35   62:iconst_4        
		//   36   63:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   37   66:return          
			} else
			{
				int j = viewgroup.getVisibility();
		//   38   67:aload_1         
		//   39   68:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//   40   71:istore_3        
				viewgroup.setVisibility(4);
		//   41   72:aload_1         
		//   42   73:iconst_4        
		//   43   74:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(j);
		//   44   77:aload_1         
		//   45   78:iload_3         
		//   46   79:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   47   82:return          
			}
		}

		private boolean tryBindViewHolderByDeadline(ViewHolder viewholder, int i, int j, long l)
		{
			viewholder.mOwnerRecyclerView = RecyclerView.this;
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #30  <Field RecyclerView this$0>
		//    3    5:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			int k = viewholder.getItemViewType();
		//    4    8:aload_1         
		//    5    9:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    6   12:istore          6
			long l1 = getNanoTime();
		//    7   14:aload_0         
		//    8   15:getfield        #30  <Field RecyclerView this$0>
		//    9   18:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   10   21:lstore          7
			if(l != 0xffffffffL && !mRecyclerPool.willBindInTime(k, l1, l))
		//*  11   23:lload           4
		//*  12   25:ldc2w           #132 <Long 0xffffffffL>
		//*  13   28:lcmp            
		//*  14   29:ifeq            50
		//*  15   32:aload_0         
		//*  16   33:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  17   36:iload           6
		//*  18   38:lload           7
		//*  19   40:lload           4
		//*  20   42:invokevirtual   #141 <Method boolean RecyclerView$RecycledViewPool.willBindInTime(int, long, long)>
		//*  21   45:ifne            50
				return false;
		//   22   48:iconst_0        
		//   23   49:ireturn         
			mAdapter.bindViewHolder(viewholder, i);
		//   24   50:aload_0         
		//   25   51:getfield        #30  <Field RecyclerView this$0>
		//   26   54:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   27   57:aload_1         
		//   28   58:iload_2         
		//   29   59:invokevirtual   #151 <Method void RecyclerView$Adapter.bindViewHolder(RecyclerView$ViewHolder, int)>
			l = getNanoTime();
		//   30   62:aload_0         
		//   31   63:getfield        #30  <Field RecyclerView this$0>
		//   32   66:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   33   69:lstore          4
			mRecyclerPool.factorInBindTime(viewholder.getItemViewType(), l - l1);
		//   34   71:aload_0         
		//   35   72:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   36   75:aload_1         
		//   37   76:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   38   79:lload           4
		//   39   81:lload           7
		//   40   83:lsub            
		//   41   84:invokevirtual   #155 <Method void RecyclerView$RecycledViewPool.factorInBindTime(int, long)>
			attachAccessibilityDelegateOnBind(viewholder);
		//   42   87:aload_0         
		//   43   88:aload_1         
		//   44   89:invokespecial   #157 <Method void attachAccessibilityDelegateOnBind(RecyclerView$ViewHolder)>
			if(mState.isPreLayout())
		//*  45   92:aload_0         
		//*  46   93:getfield        #30  <Field RecyclerView this$0>
		//*  47   96:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  48   99:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  49  102:ifeq            110
				viewholder.mPreLayoutPosition = j;
		//   50  105:aload_1         
		//   51  106:iload_3         
		//   52  107:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			return true;
		//   53  110:iconst_1        
		//   54  111:ireturn         
		}

		void addViewHolderToRecycledViewPool(ViewHolder viewholder, boolean flag)
		{
			RecyclerView.clearNestedRecyclerViewIfNotNested(viewholder);
		//    0    0:aload_1         
		//    1    1:invokestatic    #174 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
			if(viewholder.hasAnyOfTheFlags(16384))
		//*   2    4:aload_1         
		//*   3    5:sipush          16384
		//*   4    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   5   11:ifeq            30
			{
				viewholder.setFlags(0, 16384);
		//    6   14:aload_1         
		//    7   15:iconst_0        
		//    8   16:sipush          16384
		//    9   19:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				ViewCompat.setAccessibilityDelegate(viewholder.itemView, ((android.support.v4.view.AccessibilityDelegateCompat) (null)));
		//   10   22:aload_1         
		//   11   23:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   12   26:aconst_null     
		//   13   27:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			}
			if(flag)
		//*  14   30:iload_2         
		//*  15   31:ifeq            39
				dispatchViewRecycled(viewholder);
		//   16   34:aload_0         
		//   17   35:aload_1         
		//   18   36:invokevirtual   #185 <Method void dispatchViewRecycled(RecyclerView$ViewHolder)>
			viewholder.mOwnerRecyclerView = null;
		//   19   39:aload_1         
		//   20   40:aconst_null     
		//   21   41:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			getRecycledViewPool().putRecycledView(viewholder);
		//   22   44:aload_0         
		//   23   45:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//   24   48:aload_1         
		//   25   49:invokevirtual   #192 <Method void RecyclerView$RecycledViewPool.putRecycledView(RecyclerView$ViewHolder)>
		//   26   52:return          
		}

		public void bindViewToPosition(View view, int i)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          5
			if(viewholder == null)
		//*   3    6:aload           5
		//*   4    8:ifnonnull       44
				throw new IllegalArgumentException((new StringBuilder()).append("The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter").append(exceptionLabel()).toString());
		//    5   11:new             #199 <Class IllegalArgumentException>
		//    6   14:dup             
		//    7   15:new             #201 <Class StringBuilder>
		//    8   18:dup             
		//    9   19:invokespecial   #202 <Method void StringBuilder()>
		//   10   22:ldc1            #204 <String "The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter">
		//   11   24:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   12   27:aload_0         
		//   13   28:getfield        #30  <Field RecyclerView this$0>
		//   14   31:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   15   34:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   16   37:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   17   40:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   18   43:athrow          
			int j = mAdapterHelper.findPositionOffset(i);
		//   19   44:aload_0         
		//   20   45:getfield        #30  <Field RecyclerView this$0>
		//   21   48:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   22   51:iload_2         
		//   23   52:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   24   55:istore_3        
			if(j < 0 || j >= mAdapter.getItemCount())
		//*  25   56:iload_3         
		//*  26   57:iflt            74
		//*  27   60:iload_3         
		//*  28   61:aload_0         
		//*  29   62:getfield        #30  <Field RecyclerView this$0>
		//*  30   65:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  31   68:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  32   71:icmplt          143
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(j).append(").").append("state:").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//   33   74:new             #233 <Class IndexOutOfBoundsException>
		//   34   77:dup             
		//   35   78:new             #201 <Class StringBuilder>
		//   36   81:dup             
		//   37   82:invokespecial   #202 <Method void StringBuilder()>
		//   38   85:ldc1            #235 <String "Inconsistency detected. Invalid item position ">
		//   39   87:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   40   90:iload_2         
		//   41   91:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   42   94:ldc1            #240 <String "(offset:">
		//   43   96:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   44   99:iload_3         
		//   45  100:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   46  103:ldc1            #242 <String ").">
		//   47  105:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   48  108:ldc1            #244 <String "state:">
		//   49  110:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   50  113:aload_0         
		//   51  114:getfield        #30  <Field RecyclerView this$0>
		//   52  117:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   53  120:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   54  123:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   55  126:aload_0         
		//   56  127:getfield        #30  <Field RecyclerView this$0>
		//   57  130:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   58  133:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   59  136:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   60  139:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   61  142:athrow          
			tryBindViewHolderByDeadline(viewholder, j, i, 0xffffffffL);
		//   62  143:aload_0         
		//   63  144:aload           5
		//   64  146:iload_3         
		//   65  147:iload_2         
		//   66  148:ldc2w           #132 <Long 0xffffffffL>
		//   67  151:invokespecial   #248 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//   68  154:pop             
			view = ((View) (viewholder.itemView.getLayoutParams()));
		//   69  155:aload           5
		//   70  157:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   71  160:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   72  163:astore_1        
			boolean flag;
			if(view == null)
		//*  73  164:aload_1         
		//*  74  165:ifnonnull       220
			{
				view = ((View) ((LayoutParams)generateDefaultLayoutParams()));
		//   75  168:aload_0         
		//   76  169:getfield        #30  <Field RecyclerView this$0>
		//   77  172:invokevirtual   #257 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//   78  175:checkcast       #259 <Class RecyclerView$LayoutParams>
		//   79  178:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   80  179:aload           5
		//   81  181:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   82  184:aload_1         
		//   83  185:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//*  84  188:aload_1         
		//*  85  189:iconst_1        
		//*  86  190:putfield        #267 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//*  87  193:aload_1         
		//*  88  194:aload           5
		//*  89  196:putfield        #271 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
		//*  90  199:aload           5
		//*  91  201:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  92  204:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*  93  207:ifnonnull       263
		//*  94  210:iconst_1        
		//*  95  211:istore          4
		//*  96  213:aload_1         
		//*  97  214:iload           4
		//*  98  216:putfield        #278 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  99  219:return          
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (view))))
		//* 100  220:aload_0         
		//* 101  221:getfield        #30  <Field RecyclerView this$0>
		//* 102  224:aload_1         
		//* 103  225:invokevirtual   #282 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 104  228:ifne            255
			{
				view = ((View) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (view)))));
		//  105  231:aload_0         
		//  106  232:getfield        #30  <Field RecyclerView this$0>
		//  107  235:aload_1         
		//  108  236:invokevirtual   #286 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  109  239:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  110  242:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//  111  243:aload           5
		//  112  245:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  113  248:aload_1         
		//  114  249:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//* 115  252:goto            188
			{
				view = ((View) ((LayoutParams)view));
		//  116  255:aload_1         
		//  117  256:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  118  259:astore_1        
			}
			view.mInsetsDirty = true;
			view.mViewHolder = viewholder;
			if(viewholder.itemView.getParent() == null)
				flag = true;
			else
		//* 119  260:goto            188
				flag = false;
		//  120  263:iconst_0        
		//  121  264:istore          4
			view.mPendingInvalidate = flag;
		//* 122  266:goto            213
		}

		public void clear()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			recycleAndClearCachedViews();
		//    3    7:aload_0         
		//    4    8:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
		//    5   11:return          
		}

		void clearOldPositions()
		{
			boolean flag = false;
		//    0    0:iconst_0        
		//    1    1:istore_2        
			int l = mCachedViews.size();
		//    2    2:aload_0         
		//    3    3:getfield        #42  <Field ArrayList mCachedViews>
		//    4    6:invokevirtual   #296 <Method int ArrayList.size()>
		//    5    9:istore_3        
			for(int i = 0; i < l; i++)
		//*   6   10:iconst_0        
		//*   7   11:istore_1        
		//*   8   12:iload_1         
		//*   9   13:iload_3         
		//*  10   14:icmpge          38
				((ViewHolder)mCachedViews.get(i)).clearOldPosition();
		//   11   17:aload_0         
		//   12   18:getfield        #42  <Field ArrayList mCachedViews>
		//   13   21:iload_1         
		//   14   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   15   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   16   28:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   17   31:iload_1         
		//   18   32:iconst_1        
		//   19   33:iadd            
		//   20   34:istore_1        
		//*  21   35:goto            12
			l = mAttachedScrap.size();
		//   22   38:aload_0         
		//   23   39:getfield        #38  <Field ArrayList mAttachedScrap>
		//   24   42:invokevirtual   #296 <Method int ArrayList.size()>
		//   25   45:istore_3        
			for(int j = 0; j < l; j++)
		//*  26   46:iconst_0        
		//*  27   47:istore_1        
		//*  28   48:iload_1         
		//*  29   49:iload_3         
		//*  30   50:icmpge          74
				((ViewHolder)mAttachedScrap.get(j)).clearOldPosition();
		//   31   53:aload_0         
		//   32   54:getfield        #38  <Field ArrayList mAttachedScrap>
		//   33   57:iload_1         
		//   34   58:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   35   61:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   36   64:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   37   67:iload_1         
		//   38   68:iconst_1        
		//   39   69:iadd            
		//   40   70:istore_1        
		//*  41   71:goto            48
			if(mChangedScrap != null)
		//*  42   74:aload_0         
		//*  43   75:getfield        #40  <Field ArrayList mChangedScrap>
		//*  44   78:ifnull          117
			{
				int i1 = mChangedScrap.size();
		//   45   81:aload_0         
		//   46   82:getfield        #40  <Field ArrayList mChangedScrap>
		//   47   85:invokevirtual   #296 <Method int ArrayList.size()>
		//   48   88:istore_3        
				for(int k = ((int) (flag)); k < i1; k++)
		//*  49   89:iload_2         
		//*  50   90:istore_1        
		//*  51   91:iload_1         
		//*  52   92:iload_3         
		//*  53   93:icmpge          117
					((ViewHolder)mChangedScrap.get(k)).clearOldPosition();
		//   54   96:aload_0         
		//   55   97:getfield        #40  <Field ArrayList mChangedScrap>
		//   56  100:iload_1         
		//   57  101:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   58  104:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   59  107:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   60  110:iload_1         
		//   61  111:iconst_1        
		//   62  112:iadd            
		//   63  113:istore_1        
			}
		//*  64  114:goto            91
		//   65  117:return          
		}

		void clearScrap()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			if(mChangedScrap != null)
		//*   3    7:aload_0         
		//*   4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//*   5   11:ifnull          21
				mChangedScrap.clear();
		//    6   14:aload_0         
		//    7   15:getfield        #40  <Field ArrayList mChangedScrap>
		//    8   18:invokevirtual   #289 <Method void ArrayList.clear()>
		//    9   21:return          
		}

		public int convertPreLayoutPositionToPostLayout(int i)
		{
			if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            18
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          81
				throw new IndexOutOfBoundsException((new StringBuilder()).append("invalid position ").append(i).append(". State ").append("item count is ").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//    8   18:new             #233 <Class IndexOutOfBoundsException>
		//    9   21:dup             
		//   10   22:new             #201 <Class StringBuilder>
		//   11   25:dup             
		//   12   26:invokespecial   #202 <Method void StringBuilder()>
		//   13   29:ldc2            #307 <String "invalid position ">
		//   14   32:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   15   35:iload_1         
		//   16   36:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   17   39:ldc2            #309 <String ". State ">
		//   18   42:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   19   45:ldc2            #311 <String "item count is ">
		//   20   48:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   21   51:aload_0         
		//   22   52:getfield        #30  <Field RecyclerView this$0>
		//   23   55:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   24   58:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   25   61:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   26   64:aload_0         
		//   27   65:getfield        #30  <Field RecyclerView this$0>
		//   28   68:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   29   71:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   30   74:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   31   77:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   32   80:athrow          
			if(!mState.isPreLayout())
		//*  33   81:aload_0         
		//*  34   82:getfield        #30  <Field RecyclerView this$0>
		//*  35   85:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  36   88:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  37   91:ifne            96
				return i;
		//   38   94:iload_1         
		//   39   95:ireturn         
			else
				return mAdapterHelper.findPositionOffset(i);
		//   40   96:aload_0         
		//   41   97:getfield        #30  <Field RecyclerView this$0>
		//   42  100:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   43  103:iload_1         
		//   44  104:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   45  107:ireturn         
		}

		void dispatchViewRecycled(ViewHolder viewholder)
		{
			if(mRecyclerListener != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//*   3    7:ifnull          23
				mRecyclerListener.onViewRecycled(viewholder);
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//    7   17:aload_1         
		//    8   18:invokeinterface #320 <Method void RecyclerView$RecyclerListener.onViewRecycled(RecyclerView$ViewHolder)>
			if(mAdapter != null)
		//*   9   23:aload_0         
		//*  10   24:getfield        #30  <Field RecyclerView this$0>
		//*  11   27:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  12   30:ifnull          44
				mAdapter.onViewRecycled(viewholder);
		//   13   33:aload_0         
		//   14   34:getfield        #30  <Field RecyclerView this$0>
		//   15   37:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   16   40:aload_1         
		//   17   41:invokevirtual   #321 <Method void RecyclerView$Adapter.onViewRecycled(RecyclerView$ViewHolder)>
			if(mState != null)
		//*  18   44:aload_0         
		//*  19   45:getfield        #30  <Field RecyclerView this$0>
		//*  20   48:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  21   51:ifnull          65
				mViewInfoStore.removeViewHolder(viewholder);
		//   22   54:aload_0         
		//   23   55:getfield        #30  <Field RecyclerView this$0>
		//   24   58:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   61:aload_1         
		//   26   62:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//   27   65:return          
		}

		ViewHolder getChangedScrapViewForPosition(int i)
		{
			boolean flag;
			int k;
label0:
			{
				flag = false;
		//    0    0:iconst_0        
		//    1    1:istore_3        
				if(mChangedScrap != null)
		//*   2    2:aload_0         
		//*   3    3:getfield        #40  <Field ArrayList mChangedScrap>
		//*   4    6:ifnull          23
				{
					k = mChangedScrap.size();
		//    5    9:aload_0         
		//    6   10:getfield        #40  <Field ArrayList mChangedScrap>
		//    7   13:invokevirtual   #296 <Method int ArrayList.size()>
		//    8   16:istore          4
					if(k != 0)
						break label0;
		//    9   18:iload           4
		//   10   20:ifne            25
				}
				return null;
		//   11   23:aconst_null     
		//   12   24:areturn         
			}
			for(int j = 0; j < k; j++)
		//*  13   25:iconst_0        
		//*  14   26:istore_2        
		//*  15   27:iload_2         
		//*  16   28:iload           4
		//*  17   30:icmpge          80
			{
				ViewHolder viewholder = (ViewHolder)mChangedScrap.get(j);
		//   18   33:aload_0         
		//   19   34:getfield        #40  <Field ArrayList mChangedScrap>
		//   20   37:iload_2         
		//   21   38:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   22   41:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   23   44:astore          7
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i)
		//*  24   46:aload           7
		//*  25   48:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  26   51:ifne            73
		//*  27   54:aload           7
		//*  28   56:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  29   59:iload_1         
		//*  30   60:icmpne          73
				{
					viewholder.addFlags(32);
		//   31   63:aload           7
		//   32   65:bipush          32
		//   33   67:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   34   70:aload           7
		//   35   72:areturn         
				}
			}

		//   36   73:iload_2         
		//   37   74:iconst_1        
		//   38   75:iadd            
		//   39   76:istore_2        
		//*  40   77:goto            27
			if(mAdapter.hasStableIds())
		//*  41   80:aload_0         
		//*  42   81:getfield        #30  <Field RecyclerView this$0>
		//*  43   84:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  44   87:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  45   90:ifeq            193
			{
				i = mAdapterHelper.findPositionOffset(i);
		//   46   93:aload_0         
		//   47   94:getfield        #30  <Field RecyclerView this$0>
		//   48   97:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   49  100:iload_1         
		//   50  101:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   51  104:istore_1        
				if(i > 0 && i < mAdapter.getItemCount())
		//*  52  105:iload_1         
		//*  53  106:ifle            193
		//*  54  109:iload_1         
		//*  55  110:aload_0         
		//*  56  111:getfield        #30  <Field RecyclerView this$0>
		//*  57  114:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  58  117:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  59  120:icmpge          193
				{
					long l = mAdapter.getItemId(i);
		//   60  123:aload_0         
		//   61  124:getfield        #30  <Field RecyclerView this$0>
		//   62  127:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   63  130:iload_1         
		//   64  131:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//   65  134:lstore          5
					for(i = ((int) (flag)); i < k; i++)
		//*  66  136:iload_3         
		//*  67  137:istore_1        
		//*  68  138:iload_1         
		//*  69  139:iload           4
		//*  70  141:icmpge          193
					{
						ViewHolder viewholder1 = (ViewHolder)mChangedScrap.get(i);
		//   71  144:aload_0         
		//   72  145:getfield        #40  <Field ArrayList mChangedScrap>
		//   73  148:iload_1         
		//   74  149:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   75  152:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   76  155:astore          7
						if(!viewholder1.wasReturnedFromScrap() && viewholder1.getItemId() == l)
		//*  77  157:aload           7
		//*  78  159:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  79  162:ifne            186
		//*  80  165:aload           7
		//*  81  167:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  82  170:lload           5
		//*  83  172:lcmp            
		//*  84  173:ifne            186
						{
							viewholder1.addFlags(32);
		//   85  176:aload           7
		//   86  178:bipush          32
		//   87  180:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
							return viewholder1;
		//   88  183:aload           7
		//   89  185:areturn         
						}
					}

		//   90  186:iload_1         
		//   91  187:iconst_1        
		//   92  188:iadd            
		//   93  189:istore_1        
				}
			}
		//*  94  190:goto            138
			return null;
		//   95  193:aconst_null     
		//   96  194:areturn         
		}

		RecycledViewPool getRecycledViewPool()
		{
			if(mRecyclerPool == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnonnull       18
				mRecyclerPool = new RecycledViewPool();
		//    3    7:aload_0         
		//    4    8:new             #137 <Class RecyclerView$RecycledViewPool>
		//    5   11:dup             
		//    6   12:invokespecial   #348 <Method void RecyclerView$RecycledViewPool()>
		//    7   15:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			return mRecyclerPool;
		//    8   18:aload_0         
		//    9   19:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   10   22:areturn         
		}

		int getScrapCount()
		{
			return mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:ireturn         
		}

		public List getScrapList()
		{
			return mUnmodifiableAttachedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #50  <Field List mUnmodifiableAttachedScrap>
		//    2    4:areturn         
		}

		ViewHolder getScrapOrCachedViewForId(long l, int i, boolean flag)
		{
			int j = mAttachedScrap.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore          5
_L5:
			if(j < 0) goto _L2; else goto _L1
		//    6   11:iload           5
		//    7   13:iflt            154
_L1:
			ViewHolder viewholder1;
			viewholder1 = (ViewHolder)mAttachedScrap.get(j);
		//    8   16:aload_0         
		//    9   17:getfield        #38  <Field ArrayList mAttachedScrap>
		//   10   20:iload           5
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          7
			if(viewholder1.getItemId() != l || viewholder1.wasReturnedFromScrap())
				continue; /* Loop/switch isn't completed */
		//   14   30:aload           7
		//   15   32:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   16   35:lload_1         
		//   17   36:lcmp            
		//   18   37:ifne            145
		//   19   40:aload           7
		//   20   42:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   21   45:ifne            145
			if(i != viewholder1.getItemViewType()) goto _L4; else goto _L3
		//   22   48:iload_3         
		//   23   49:aload           7
		//   24   51:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   25   54:icmpne          108
_L3:
			ViewHolder viewholder;
			viewholder1.addFlags(32);
		//   26   57:aload           7
		//   27   59:bipush          32
		//   28   61:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
			viewholder = viewholder1;
		//   29   64:aload           7
		//   30   66:astore          6
			if(viewholder1.isRemoved())
		//*  31   68:aload           7
		//*  32   70:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  33   73:ifeq            105
			{
				viewholder = viewholder1;
		//   34   76:aload           7
		//   35   78:astore          6
				if(!mState.isPreLayout())
		//*  36   80:aload_0         
		//*  37   81:getfield        #30  <Field RecyclerView this$0>
		//*  38   84:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  39   87:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  40   90:ifne            105
				{
					viewholder1.setFlags(2, 14);
		//   41   93:aload           7
		//   42   95:iconst_2        
		//   43   96:bipush          14
		//   44   98:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
					viewholder = viewholder1;
		//   45  101:aload           7
		//   46  103:astore          6
				}
			}
_L8:
			return viewholder;
		//   47  105:aload           6
		//   48  107:areturn         
_L4:
			if(!flag)
		//*  49  108:iload           4
		//*  50  110:ifne            145
			{
				mAttachedScrap.remove(j);
		//   51  113:aload_0         
		//   52  114:getfield        #38  <Field ArrayList mAttachedScrap>
		//   53  117:iload           5
		//   54  119:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   55  122:pop             
				removeDetachedView(viewholder1.itemView, false);
		//   56  123:aload_0         
		//   57  124:getfield        #30  <Field RecyclerView this$0>
		//   58  127:aload           7
		//   59  129:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   60  132:iconst_0        
		//   61  133:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
				quickRecycleScrapView(viewholder1.itemView);
		//   62  136:aload_0         
		//   63  137:aload           7
		//   64  139:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   65  142:invokevirtual   #369 <Method void quickRecycleScrapView(View)>
			}
			j--;
		//   66  145:iload           5
		//   67  147:iconst_1        
		//   68  148:isub            
		//   69  149:istore          5
			  goto _L5
		//*  70  151:goto            11
_L2:
			j = mCachedViews.size() - 1;
		//   71  154:aload_0         
		//   72  155:getfield        #42  <Field ArrayList mCachedViews>
		//   73  158:invokevirtual   #296 <Method int ArrayList.size()>
		//   74  161:iconst_1        
		//   75  162:isub            
		//   76  163:istore          5
_L9:
			if(j < 0) goto _L7; else goto _L6
		//   77  165:iload           5
		//   78  167:iflt            247
_L6:
label0:
			{
				ViewHolder viewholder2 = (ViewHolder)mCachedViews.get(j);
		//   79  170:aload_0         
		//   80  171:getfield        #42  <Field ArrayList mCachedViews>
		//   81  174:iload           5
		//   82  176:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   83  179:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   84  182:astore          7
				if(viewholder2.getItemId() != l)
					continue; /* Loop/switch isn't completed */
		//   85  184:aload           7
		//   86  186:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   87  189:lload_1         
		//   88  190:lcmp            
		//   89  191:ifne            238
				if(i != viewholder2.getItemViewType())
					break label0;
		//   90  194:iload_3         
		//   91  195:aload           7
		//   92  197:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   93  200:icmpne          225
				viewholder = viewholder2;
		//   94  203:aload           7
		//   95  205:astore          6
				if(!flag)
		//*  96  207:iload           4
		//*  97  209:ifne            105
				{
					mCachedViews.remove(j);
		//   98  212:aload_0         
		//   99  213:getfield        #42  <Field ArrayList mCachedViews>
		//  100  216:iload           5
		//  101  218:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//  102  221:pop             
					return viewholder2;
		//  103  222:aload           7
		//  104  224:areturn         
				}
			}
			  goto _L8
			if(!flag)
		//* 105  225:iload           4
		//* 106  227:ifne            238
			{
				recycleCachedViewAt(j);
		//  107  230:aload_0         
		//  108  231:iload           5
		//  109  233:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
				return null;
		//  110  236:aconst_null     
		//  111  237:areturn         
			}
			j--;
		//  112  238:iload           5
		//  113  240:iconst_1        
		//  114  241:isub            
		//  115  242:istore          5
			  goto _L9
		//* 116  244:goto            165
_L7:
			return null;
		//  117  247:aconst_null     
		//  118  248:areturn         
			  goto _L8
		}

		ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int i, boolean flag)
		{
			int j;
			boolean flag1;
			int l;
			flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          4
			l = mAttachedScrap.size();
		//    2    3:aload_0         
		//    3    4:getfield        #38  <Field ArrayList mAttachedScrap>
		//    4    7:invokevirtual   #296 <Method int ArrayList.size()>
		//    5   10:istore          5
			j = 0;
		//    6   12:iconst_0        
		//    7   13:istore_3        
_L8:
			if(j >= l) goto _L2; else goto _L1
		//    8   14:iload_3         
		//    9   15:iload           5
		//   10   17:icmpge          96
_L1:
			Object obj = ((Object) ((ViewHolder)mAttachedScrap.get(j)));
		//   11   20:aload_0         
		//   12   21:getfield        #38  <Field ArrayList mAttachedScrap>
		//   13   24:iload_3         
		//   14   25:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   15   28:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   16   31:astore          6
			if(((ViewHolder) (obj)).wasReturnedFromScrap() || ((ViewHolder) (obj)).getLayoutPosition() != i || ((ViewHolder) (obj)).isInvalid() || !mState.mInPreLayout && ((ViewHolder) (obj)).isRemoved()) goto _L4; else goto _L3
		//   17   33:aload           6
		//   18   35:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   19   38:ifne            89
		//   20   41:aload           6
		//   21   43:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//   22   46:iload_1         
		//   23   47:icmpne          89
		//   24   50:aload           6
		//   25   52:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//   26   55:ifne            89
		//   27   58:aload_0         
		//   28   59:getfield        #30  <Field RecyclerView this$0>
		//   29   62:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   30   65:getfield        #380 <Field boolean RecyclerView$State.mInPreLayout>
		//   31   68:ifne            79
		//   32   71:aload           6
		//   33   73:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   34   76:ifne            89
_L3:
			((ViewHolder) (obj)).addFlags(32);
		//   35   79:aload           6
		//   36   81:bipush          32
		//   37   83:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
_L6:
			return ((ViewHolder) (obj));
		//   38   86:aload           6
		//   39   88:areturn         
_L4:
			j++;
		//   40   89:iload_3         
		//   41   90:iconst_1        
		//   42   91:iadd            
		//   43   92:istore_3        
			continue; /* Loop/switch isn't completed */
		//   44   93:goto            14
_L2:
			if(!flag)
		//*  45   96:iload_2         
		//*  46   97:ifne            222
			{
				obj = ((Object) (mChildHelper.findHiddenNonRemovedView(i)));
		//   47  100:aload_0         
		//   48  101:getfield        #30  <Field RecyclerView this$0>
		//   49  104:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   50  107:iload_1         
		//   51  108:invokevirtual   #389 <Method View ChildHelper.findHiddenNonRemovedView(int)>
		//   52  111:astore          6
				if(obj != null)
		//*  53  113:aload           6
		//*  54  115:ifnull          222
				{
					ViewHolder viewholder = RecyclerView.getChildViewHolderInt(((View) (obj)));
		//   55  118:aload           6
		//   56  120:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   57  123:astore          7
					mChildHelper.unhide(((View) (obj)));
		//   58  125:aload_0         
		//   59  126:getfield        #30  <Field RecyclerView this$0>
		//   60  129:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   61  132:aload           6
		//   62  134:invokevirtual   #392 <Method void ChildHelper.unhide(View)>
					i = mChildHelper.indexOfChild(((View) (obj)));
		//   63  137:aload_0         
		//   64  138:getfield        #30  <Field RecyclerView this$0>
		//   65  141:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   66  144:aload           6
		//   67  146:invokevirtual   #395 <Method int ChildHelper.indexOfChild(View)>
		//   68  149:istore_1        
					if(i == -1)
		//*  69  150:iload_1         
		//*  70  151:iconst_m1       
		//*  71  152:icmpne          194
					{
						throw new IllegalStateException((new StringBuilder()).append("layout index should not be -1 after unhiding a view:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   72  155:new             #397 <Class IllegalStateException>
		//   73  158:dup             
		//   74  159:new             #201 <Class StringBuilder>
		//   75  162:dup             
		//   76  163:invokespecial   #202 <Method void StringBuilder()>
		//   77  166:ldc2            #399 <String "layout index should not be -1 after unhiding a view:">
		//   78  169:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   79  172:aload           7
		//   80  174:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   81  177:aload_0         
		//   82  178:getfield        #30  <Field RecyclerView this$0>
		//   83  181:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   84  184:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   85  187:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   86  190:invokespecial   #403 <Method void IllegalStateException(String)>
		//   87  193:athrow          
					} else
					{
						mChildHelper.detachViewFromParent(i);
		//   88  194:aload_0         
		//   89  195:getfield        #30  <Field RecyclerView this$0>
		//   90  198:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   91  201:iload_1         
		//   92  202:invokevirtual   #406 <Method void ChildHelper.detachViewFromParent(int)>
						scrapView(((View) (obj)));
		//   93  205:aload_0         
		//   94  206:aload           6
		//   95  208:invokevirtual   #409 <Method void scrapView(View)>
						viewholder.addFlags(8224);
		//   96  211:aload           7
		//   97  213:sipush          8224
		//   98  216:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder;
		//   99  219:aload           7
		//  100  221:areturn         
					}
				}
			}
			int i1 = mCachedViews.size();
		//  101  222:aload_0         
		//  102  223:getfield        #42  <Field ArrayList mCachedViews>
		//  103  226:invokevirtual   #296 <Method int ArrayList.size()>
		//  104  229:istore          5
			int k = ((int) (flag1));
		//  105  231:iload           4
		//  106  233:istore_3        
label0:
			do
			{
label1:
				{
label2:
					{
						if(k >= i1)
							break label1;
		//  107  234:iload_3         
		//  108  235:iload           5
		//  109  237:icmpge          297
						ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//  110  240:aload_0         
		//  111  241:getfield        #42  <Field ArrayList mCachedViews>
		//  112  244:iload_3         
		//  113  245:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//  114  248:checkcast       #63  <Class RecyclerView$ViewHolder>
		//  115  251:astore          7
						if(viewholder1.isInvalid() || viewholder1.getLayoutPosition() != i)
							break label2;
		//  116  253:aload           7
		//  117  255:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//  118  258:ifne            290
		//  119  261:aload           7
		//  120  263:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//  121  266:iload_1         
		//  122  267:icmpne          290
						obj = ((Object) (viewholder1));
		//  123  270:aload           7
		//  124  272:astore          6
						if(!flag)
		//* 125  274:iload_2         
		//* 126  275:ifne            86
						{
							mCachedViews.remove(k);
		//  127  278:aload_0         
		//  128  279:getfield        #42  <Field ArrayList mCachedViews>
		//  129  282:iload_3         
		//  130  283:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//  131  286:pop             
							return viewholder1;
		//  132  287:aload           7
		//  133  289:areturn         
						}
					}
					if(true)
						break label0;
					k++;
		//  134  290:iload_3         
		//  135  291:iconst_1        
		//  136  292:iadd            
		//  137  293:istore_3        
				}
			} while(true);
		//  138  294:goto            234
			if(true) goto _L6; else goto _L5
_L5:
			return null;
		//  139  297:aconst_null     
		//  140  298:areturn         
			if(true) goto _L8; else goto _L7
_L7:
		}

		View getScrapViewAt(int i)
		{
			return ((ViewHolder)mAttachedScrap.get(i)).itemView;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    4    8:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:areturn         
		}

		public View getViewForPosition(int i)
		{
			return getViewForPosition(i, false);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #414 <Method View getViewForPosition(int, boolean)>
		//    4    6:areturn         
		}

		View getViewForPosition(int i, boolean flag)
		{
			return tryGetViewHolderForPositionByDeadline(i, flag, 0xffffffffL).itemView;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc2w           #132 <Long 0xffffffffL>
		//    4    6:invokevirtual   #418 <Method RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int, boolean, long)>
		//    5    9:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   12:areturn         
		}

		void markItemDecorInsetsDirty()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          52
			{
				LayoutParams layoutparams = (LayoutParams)((ViewHolder)mCachedViews.get(i)).itemView.getLayoutParams();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   26:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   15   29:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   32:checkcast       #259 <Class RecyclerView$LayoutParams>
		//   17   35:astore_3        
				if(layoutparams != null)
		//*  18   36:aload_3         
		//*  19   37:ifnull          45
					layoutparams.mInsetsDirty = true;
		//   20   40:aload_3         
		//   21   41:iconst_1        
		//   22   42:putfield        #267 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}

		//   23   45:iload_1         
		//   24   46:iconst_1        
		//   25   47:iadd            
		//   26   48:istore_1        
		//*  27   49:goto            10
		//   28   52:return          
		}

		void markKnownViewsInvalid()
		{
			if(mAdapter != null && mAdapter.hasStableIds())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   3    7:ifnull          72
		//*   4   10:aload_0         
		//*   5   11:getfield        #30  <Field RecyclerView this$0>
		//*   6   14:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   7   17:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*   8   20:ifeq            72
			{
				int j = mCachedViews.size();
		//    9   23:aload_0         
		//   10   24:getfield        #42  <Field ArrayList mCachedViews>
		//   11   27:invokevirtual   #296 <Method int ArrayList.size()>
		//   12   30:istore_2        
				for(int i = 0; i < j; i++)
		//*  13   31:iconst_0        
		//*  14   32:istore_1        
		//*  15   33:iload_1         
		//*  16   34:iload_2         
		//*  17   35:icmpge          76
				{
					ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//   18   38:aload_0         
		//   19   39:getfield        #42  <Field ArrayList mCachedViews>
		//   20   42:iload_1         
		//   21   43:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   22   46:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   23   49:astore_3        
					if(viewholder != null)
		//*  24   50:aload_3         
		//*  25   51:ifnull          65
					{
						viewholder.addFlags(6);
		//   26   54:aload_3         
		//   27   55:bipush          6
		//   28   57:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						viewholder.addChangePayload(((Object) (null)));
		//   29   60:aload_3         
		//   30   61:aconst_null     
		//   31   62:invokevirtual   #424 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
					}
				}

		//   32   65:iload_1         
		//   33   66:iconst_1        
		//   34   67:iadd            
		//   35   68:istore_1        
			} else
		//*  36   69:goto            33
			{
				recycleAndClearCachedViews();
		//   37   72:aload_0         
		//   38   73:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
			}
		//   39   76:return          
		}

		void offsetPositionRecordsForInsert(int i, int j)
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int k = 0; k < l; k++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          58
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    9   17:aload_0         
		//   10   18:getfield        #42  <Field ArrayList mCachedViews>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(viewholder != null && viewholder.mPosition >= i)
		//*  15   30:aload           5
		//*  16   32:ifnull          51
		//*  17   35:aload           5
		//*  18   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  19   40:iload_1         
		//*  20   41:icmplt          51
					viewholder.offsetPosition(j, true);
		//   21   44:aload           5
		//   22   46:iload_2         
		//   23   47:iconst_1        
		//   24   48:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   25   51:iload_3         
		//   26   52:iconst_1        
		//   27   53:iadd            
		//   28   54:istore_3        
		//*  29   55:goto            11
		//   30   58:return          
		}

		void offsetPositionRecordsForMove(int i, int j)
		{
			byte byte0;
			int k;
			int l;
			int i1;
			int j1;
			if(i < j)
		//*   0    0:iload_1         
		//*   1    1:iload_2         
		//*   2    2:icmpge          80
			{
				byte0 = -1;
		//    3    5:iconst_m1       
		//    4    6:istore_3        
				k = j;
		//    5    7:iload_2         
		//    6    8:istore          4
				l = i;
		//    7   10:iload_1         
		//    8   11:istore          5
			} else
		//*   9   13:aload_0         
		//*  10   14:getfield        #42  <Field ArrayList mCachedViews>
		//*  11   17:invokevirtual   #296 <Method int ArrayList.size()>
		//*  12   20:istore          7
		//*  13   22:iconst_0        
		//*  14   23:istore          6
		//*  15   25:iload           6
		//*  16   27:iload           7
		//*  17   29:icmpge          122
		//*  18   32:aload_0         
		//*  19   33:getfield        #42  <Field ArrayList mCachedViews>
		//*  20   36:iload           6
		//*  21   38:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//*  22   41:checkcast       #63  <Class RecyclerView$ViewHolder>
		//*  23   44:astore          8
		//*  24   46:aload           8
		//*  25   48:ifnull          71
		//*  26   51:aload           8
		//*  27   53:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  28   56:iload           5
		//*  29   58:icmplt          71
		//*  30   61:aload           8
		//*  31   63:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  32   66:iload           4
		//*  33   68:icmple          91
		//*  34   71:iload           6
		//*  35   73:iconst_1        
		//*  36   74:iadd            
		//*  37   75:istore          6
		//*  38   77:goto            25
			{
				byte0 = 1;
		//   39   80:iconst_1        
		//   40   81:istore_3        
				k = i;
		//   41   82:iload_1         
		//   42   83:istore          4
				l = j;
		//   43   85:iload_2         
		//   44   86:istore          5
			}
			j1 = mCachedViews.size();
			i1 = 0;
			while(i1 < j1) 
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i1);
				if(viewholder != null && viewholder.mPosition >= l && viewholder.mPosition <= k)
		//*  45   88:goto            13
					if(viewholder.mPosition == i)
		//*  46   91:aload           8
		//*  47   93:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  48   96:iload_1         
		//*  49   97:icmpne          112
						viewholder.offsetPosition(j - i, false);
		//   50  100:aload           8
		//   51  102:iload_2         
		//   52  103:iload_1         
		//   53  104:isub            
		//   54  105:iconst_0        
		//   55  106:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					else
		//*  56  109:goto            71
						viewholder.offsetPosition(((int) (byte0)), false);
		//   57  112:aload           8
		//   58  114:iload_3         
		//   59  115:iconst_0        
		//   60  116:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				i1++;
			}
		//*  61  119:goto            71
		//   62  122:return          
		}

		void offsetPositionRecordsForRemove(int i, int j, boolean flag)
		{
			int k = mCachedViews.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore          4
			while(k >= 0) 
		//*   6   11:iload           4
		//*   7   13:iflt            88
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload           4
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          5
				if(viewholder != null)
		//*  14   30:aload           5
		//*  15   32:ifnull          54
					if(viewholder.mPosition >= i + j)
		//*  16   35:aload           5
		//*  17   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  18   40:iload_1         
		//*  19   41:iload_2         
		//*  20   42:iadd            
		//*  21   43:icmplt          63
						viewholder.offsetPosition(-j, flag);
		//   22   46:aload           5
		//   23   48:iload_2         
		//   24   49:ineg            
		//   25   50:iload_3         
		//   26   51:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					else
		//*  27   54:iload           4
		//*  28   56:iconst_1        
		//*  29   57:isub            
		//*  30   58:istore          4
		//*  31   60:goto            11
					if(viewholder.mPosition >= i)
		//*  32   63:aload           5
		//*  33   65:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  34   68:iload_1         
		//*  35   69:icmplt          54
					{
						viewholder.addFlags(8);
		//   36   72:aload           5
		//   37   74:bipush          8
		//   38   76:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						recycleCachedViewAt(k);
		//   39   79:aload_0         
		//   40   80:iload           4
		//   41   82:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
					}
				k--;
			}
		//*  42   85:goto            54
		//   43   88:return          
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			clear();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method void clear()>
			getRecycledViewPool().onAdapterChanged(adapter, adapter1, flag);
		//    2    4:aload_0         
		//    3    5:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//    4    8:aload_1         
		//    5    9:aload_2         
		//    6   10:iload_3         
		//    7   11:invokevirtual   #440 <Method void RecyclerView$RecycledViewPool.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		//    8   14:return          
		}

		void quickRecycleScrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			view.mScrapContainer = null;
		//    3    5:aload_1         
		//    4    6:aconst_null     
		//    5    7:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//    6   10:pop             
			view.mInChangeScrap = false;
		//    7   11:aload_1         
		//    8   12:iconst_0        
		//    9   13:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//   10   16:pop             
			((ViewHolder) (view)).clearReturnedFromScrapFlag();
		//   11   17:aload_1         
		//   12   18:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(((ViewHolder) (view)));
		//   13   21:aload_0         
		//   14   22:aload_1         
		//   15   23:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   16   26:return          
		}

		void recycleAndClearCachedViews()
		{
			for(int i = mCachedViews.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            26
				recycleCachedViewAt(i);
		//    8   14:aload_0         
		//    9   15:iload_1         
		//   10   16:invokevirtual   #372 <Method void recycleCachedViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            10
			mCachedViews.clear();
		//   16   26:aload_0         
		//   17   27:getfield        #42  <Field ArrayList mCachedViews>
		//   18   30:invokevirtual   #289 <Method void ArrayList.clear()>
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  19   33:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//*  20   36:ifeq            49
				mPrefetchRegistry.clearPrefetchPositions();
		//   21   39:aload_0         
		//   22   40:getfield        #30  <Field RecyclerView this$0>
		//   23   43:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//   24   46:invokevirtual   #466 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//   25   49:return          
		}

		void recycleCachedViewAt(int i)
		{
			addViewHolderToRecycledViewPool((ViewHolder)mCachedViews.get(i), true);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #42  <Field ArrayList mCachedViews>
		//    3    5:iload_1         
		//    4    6:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    5    9:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    6   12:iconst_1        
		//    7   13:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
			mCachedViews.remove(i);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload_1         
		//   11   21:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   12   24:pop             
		//   13   25:return          
		}

		public void recycleView(View view)
		{
			ViewHolder viewholder;
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_2        
			if(viewholder.isTmpDetached())
		//*   3    5:aload_2         
		//*   4    6:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*   5    9:ifeq            21
				removeDetachedView(view, false);
		//    6   12:aload_0         
		//    7   13:getfield        #30  <Field RecyclerView this$0>
		//    8   16:aload_1         
		//    9   17:iconst_0        
		//   10   18:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
			if(!viewholder.isScrap()) goto _L2; else goto _L1
		//   11   21:aload_2         
		//   12   22:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//   13   25:ifeq            38
_L1:
			viewholder.unScrap();
		//   14   28:aload_2         
		//   15   29:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
_L4:
			recycleViewHolderInternal(viewholder);
		//   16   32:aload_0         
		//   17   33:aload_2         
		//   18   34:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
			return;
		//   19   37:return          
_L2:
			if(viewholder.wasReturnedFromScrap())
		//*  20   38:aload_2         
		//*  21   39:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  22   42:ifeq            32
				viewholder.clearReturnedFromScrapFlag();
		//   23   45:aload_2         
		//   24   46:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			if(true) goto _L4; else goto _L3
		//   25   49:goto            32
_L3:
		}

		void recycleViewHolderInternal(ViewHolder viewholder)
		{
			int i;
			int j;
			boolean flag = false;
		//    0    0:iconst_0        
		//    1    1:istore          4
			if(viewholder.isScrap() || viewholder.itemView.getParent() != null)
		//*   2    3:aload_1         
		//*   3    4:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*   4    7:ifne            20
		//*   5   10:aload_1         
		//*   6   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*   7   14:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*   8   17:ifnull          95
			{
				StringBuilder stringbuilder = (new StringBuilder()).append("Scrapped or attached views may not be recycled. isScrap:").append(viewholder.isScrap()).append(" isAttached:");
		//    9   20:new             #201 <Class StringBuilder>
		//   10   23:dup             
		//   11   24:invokespecial   #202 <Method void StringBuilder()>
		//   12   27:ldc2            #480 <String "Scrapped or attached views may not be recycled. isScrap:">
		//   13   30:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   14   33:aload_1         
		//   15   34:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//   16   37:invokevirtual   #483 <Method StringBuilder StringBuilder.append(boolean)>
		//   17   40:ldc2            #485 <String " isAttached:">
		//   18   43:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   19   46:astore          6
				boolean flag1;
				if(viewholder.itemView.getParent() != null)
		//*  20   48:aload_1         
		//*  21   49:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   52:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*  23   55:ifnull          89
					flag1 = true;
		//   24   58:iconst_1        
		//   25   59:istore          5
				else
		//*  26   61:new             #199 <Class IllegalArgumentException>
		//*  27   64:dup             
		//*  28   65:aload           6
		//*  29   67:iload           5
		//*  30   69:invokevirtual   #483 <Method StringBuilder StringBuilder.append(boolean)>
		//*  31   72:aload_0         
		//*  32   73:getfield        #30  <Field RecyclerView this$0>
		//*  33   76:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//*  34   79:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//*  35   82:invokevirtual   #215 <Method String StringBuilder.toString()>
		//*  36   85:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//*  37   88:athrow          
					flag1 = false;
		//   38   89:iconst_0        
		//   39   90:istore          5
				throw new IllegalArgumentException(stringbuilder.append(flag1).append(exceptionLabel()).toString());
			}
		//*  40   92:goto            61
			if(viewholder.isTmpDetached())
		//*  41   95:aload_1         
		//*  42   96:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  43   99:ifeq            140
				throw new IllegalArgumentException((new StringBuilder()).append("Tmp detached view should be removed from RecyclerView before it can be recycled: ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   44  102:new             #199 <Class IllegalArgumentException>
		//   45  105:dup             
		//   46  106:new             #201 <Class StringBuilder>
		//   47  109:dup             
		//   48  110:invokespecial   #202 <Method void StringBuilder()>
		//   49  113:ldc2            #487 <String "Tmp detached view should be removed from RecyclerView before it can be recycled: ">
		//   50  116:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   51  119:aload_1         
		//   52  120:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   53  123:aload_0         
		//   54  124:getfield        #30  <Field RecyclerView this$0>
		//   55  127:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   56  130:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   57  133:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   58  136:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   59  139:athrow          
			if(viewholder.shouldIgnore())
		//*  60  140:aload_1         
		//*  61  141:invokevirtual   #490 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  62  144:ifeq            181
				throw new IllegalArgumentException((new StringBuilder()).append("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.").append(exceptionLabel()).toString());
		//   63  147:new             #199 <Class IllegalArgumentException>
		//   64  150:dup             
		//   65  151:new             #201 <Class StringBuilder>
		//   66  154:dup             
		//   67  155:invokespecial   #202 <Method void StringBuilder()>
		//   68  158:ldc2            #492 <String "Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.">
		//   69  161:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   70  164:aload_0         
		//   71  165:getfield        #30  <Field RecyclerView this$0>
		//   72  168:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   73  171:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   74  174:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   75  177:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   76  180:athrow          
			boolean flag2 = viewholder.doesTransientStatePreventRecycling();
		//   77  181:aload_1         
		//   78  182:invokestatic    #496 <Method boolean RecyclerView$ViewHolder.access$900(RecyclerView$ViewHolder)>
		//   79  185:istore          5
			if(mAdapter != null && flag2 && mAdapter.onFailedToRecycleView(viewholder))
		//*  80  187:aload_0         
		//*  81  188:getfield        #30  <Field RecyclerView this$0>
		//*  82  191:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  83  194:ifnull          412
		//*  84  197:iload           5
		//*  85  199:ifeq            412
		//*  86  202:aload_0         
		//*  87  203:getfield        #30  <Field RecyclerView this$0>
		//*  88  206:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  89  209:aload_1         
		//*  90  210:invokevirtual   #499 <Method boolean RecyclerView$Adapter.onFailedToRecycleView(RecyclerView$ViewHolder)>
		//*  91  213:ifeq            412
				i = 1;
		//   92  216:iconst_1        
		//   93  217:istore_2        
			else
		//*  94  218:iload_2         
		//*  95  219:ifne            229
		//*  96  222:aload_1         
		//*  97  223:invokevirtual   #502 <Method boolean RecyclerView$ViewHolder.isRecyclable()>
		//*  98  226:ifeq            429
		//*  99  229:aload_0         
		//* 100  230:getfield        #54  <Field int mViewCacheMax>
		//* 101  233:ifle            424
		//* 102  236:aload_1         
		//* 103  237:sipush          526
		//* 104  240:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 105  243:ifne            424
		//* 106  246:aload_0         
		//* 107  247:getfield        #42  <Field ArrayList mCachedViews>
		//* 108  250:invokevirtual   #296 <Method int ArrayList.size()>
		//* 109  253:istore_3        
		//* 110  254:iload_3         
		//* 111  255:istore_2        
		//* 112  256:iload_3         
		//* 113  257:aload_0         
		//* 114  258:getfield        #54  <Field int mViewCacheMax>
		//* 115  261:icmplt          279
		//* 116  264:iload_3         
		//* 117  265:istore_2        
		//* 118  266:iload_3         
		//* 119  267:ifle            279
		//* 120  270:aload_0         
		//* 121  271:iconst_0        
		//* 122  272:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
		//* 123  275:iload_3         
		//* 124  276:iconst_1        
		//* 125  277:isub            
		//* 126  278:istore_2        
		//* 127  279:iload_2         
		//* 128  280:istore_3        
		//* 129  281:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 130  284:ifeq            353
		//* 131  287:iload_2         
		//* 132  288:istore_3        
		//* 133  289:iload_2         
		//* 134  290:ifle            353
		//* 135  293:iload_2         
		//* 136  294:istore_3        
		//* 137  295:aload_0         
		//* 138  296:getfield        #30  <Field RecyclerView this$0>
		//* 139  299:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 140  302:aload_1         
		//* 141  303:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 142  306:invokevirtual   #505 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 143  309:ifne            353
		//* 144  312:iload_2         
		//* 145  313:iconst_1        
		//* 146  314:isub            
		//* 147  315:istore_2        
		//* 148  316:iload_2         
		//* 149  317:iflt            349
		//* 150  320:aload_0         
		//* 151  321:getfield        #42  <Field ArrayList mCachedViews>
		//* 152  324:iload_2         
		//* 153  325:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//* 154  328:checkcast       #63  <Class RecyclerView$ViewHolder>
		//* 155  331:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 156  334:istore_3        
		//* 157  335:aload_0         
		//* 158  336:getfield        #30  <Field RecyclerView this$0>
		//* 159  339:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 160  342:iload_3         
		//* 161  343:invokevirtual   #505 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 162  346:ifne            417
		//* 163  349:iload_2         
		//* 164  350:iconst_1        
		//* 165  351:iadd            
		//* 166  352:istore_3        
		//* 167  353:aload_0         
		//* 168  354:getfield        #42  <Field ArrayList mCachedViews>
		//* 169  357:iload_3         
		//* 170  358:aload_1         
		//* 171  359:invokevirtual   #509 <Method void ArrayList.add(int, Object)>
		//* 172  362:iconst_1        
		//* 173  363:istore_2        
		//* 174  364:iload_2         
		//* 175  365:istore_3        
		//* 176  366:iload_2         
		//* 177  367:ifne            381
		//* 178  370:aload_0         
		//* 179  371:aload_1         
		//* 180  372:iconst_1        
		//* 181  373:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
		//* 182  376:iconst_1        
		//* 183  377:istore          4
		//* 184  379:iload_2         
		//* 185  380:istore_3        
		//* 186  381:aload_0         
		//* 187  382:getfield        #30  <Field RecyclerView this$0>
		//* 188  385:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//* 189  388:aload_1         
		//* 190  389:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//* 191  392:iload_3         
		//* 192  393:ifne            411
		//* 193  396:iload           4
		//* 194  398:ifne            411
		//* 195  401:iload           5
		//* 196  403:ifeq            411
		//* 197  406:aload_1         
		//* 198  407:aconst_null     
		//* 199  408:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
		//* 200  411:return          
				i = 0;
		//  201  412:iconst_0        
		//  202  413:istore_2        
			if(i == 0 && !viewholder.isRecyclable())
				break MISSING_BLOCK_LABEL_429;
			if(mViewCacheMax <= 0 || viewholder.hasAnyOfTheFlags(526)) goto _L2; else goto _L1
_L1:
			j = mCachedViews.size();
			i = j;
			if(j >= mViewCacheMax)
			{
				i = j;
				if(j > 0)
				{
					recycleCachedViewAt(0);
					i = j - 1;
				}
			}
			j = i;
			if(!RecyclerView.ALLOW_THREAD_GAP_WORK) goto _L4; else goto _L3
_L3:
			j = i;
			if(i <= 0) goto _L4; else goto _L5
_L5:
			j = i;
			if(mPrefetchRegistry.lastPrefetchIncludedPosition(viewholder.mPosition)) goto _L4; else goto _L6
_L6:
			i--;
_L10:
			if(i < 0) goto _L8; else goto _L7
_L7:
			j = ((ViewHolder)mCachedViews.get(i)).mPosition;
			if(mPrefetchRegistry.lastPrefetchIncludedPosition(j)) goto _L9; else goto _L8
_L8:
			j = i + 1;
_L4:
			mCachedViews.add(j, ((Object) (viewholder)));
			i = 1;
_L11:
			j = i;
			if(i == 0)
			{
				addViewHolderToRecycledViewPool(viewholder, true);
				flag = true;
				j = i;
			}
_L12:
			mViewInfoStore.removeViewHolder(viewholder);
			if(j == 0 && !flag && flag2)
				viewholder.mOwnerRecyclerView = null;
			return;
		//* 203  414:goto            218
_L9:
			i--;
		//  204  417:iload_2         
		//  205  418:iconst_1        
		//  206  419:isub            
		//  207  420:istore_2        
			  goto _L10
		//* 208  421:goto            316
_L2:
			i = 0;
		//  209  424:iconst_0        
		//  210  425:istore_2        
			  goto _L11
		//* 211  426:goto            364
			j = 0;
		//  212  429:iconst_0        
		//  213  430:istore_3        
			  goto _L12
		//* 214  431:goto            381
		}

		void recycleViewInternal(View view)
		{
			recycleViewHolderInternal(RecyclerView.getChildViewHolderInt(view));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    3    5:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		void scrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			if(((ViewHolder) (view)).hasAnyOfTheFlags(12) || !((ViewHolder) (view)).isUpdated() || canReuseUpdatedViewHolder(((ViewHolder) (view))))
		//*   3    5:aload_1         
		//*   4    6:bipush          12
		//*   5    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   6   11:ifne            32
		//*   7   14:aload_1         
		//*   8   15:invokevirtual   #513 <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//*   9   18:ifeq            32
		//*  10   21:aload_0         
		//*  11   22:getfield        #30  <Field RecyclerView this$0>
		//*  12   25:aload_1         
		//*  13   26:invokevirtual   #516 <Method boolean RecyclerView.canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//*  14   29:ifeq            109
				if(((ViewHolder) (view)).isInvalid() && !((ViewHolder) (view)).isRemoved() && !mAdapter.hasStableIds())
		//*  15   32:aload_1         
		//*  16   33:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  17   36:ifeq            93
		//*  18   39:aload_1         
		//*  19   40:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  20   43:ifne            93
		//*  21   46:aload_0         
		//*  22   47:getfield        #30  <Field RecyclerView this$0>
		//*  23   50:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  24   53:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  25   56:ifne            93
				{
					throw new IllegalArgumentException((new StringBuilder()).append("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.").append(exceptionLabel()).toString());
		//   26   59:new             #199 <Class IllegalArgumentException>
		//   27   62:dup             
		//   28   63:new             #201 <Class StringBuilder>
		//   29   66:dup             
		//   30   67:invokespecial   #202 <Method void StringBuilder()>
		//   31   70:ldc2            #518 <String "Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.">
		//   32   73:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   33   76:aload_0         
		//   34   77:getfield        #30  <Field RecyclerView this$0>
		//   35   80:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   36   83:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   37   86:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   38   89:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   39   92:athrow          
				} else
				{
					((ViewHolder) (view)).setScrapContainer(this, false);
		//   40   93:aload_1         
		//   41   94:aload_0         
		//   42   95:iconst_0        
		//   43   96:invokevirtual   #522 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
					mAttachedScrap.add(((Object) (view)));
		//   44   99:aload_0         
		//   45  100:getfield        #38  <Field ArrayList mAttachedScrap>
		//   46  103:aload_1         
		//   47  104:invokevirtual   #525 <Method boolean ArrayList.add(Object)>
		//   48  107:pop             
					return;
		//   49  108:return          
				}
			if(mChangedScrap == null)
		//*  50  109:aload_0         
		//*  51  110:getfield        #40  <Field ArrayList mChangedScrap>
		//*  52  113:ifnonnull       127
				mChangedScrap = new ArrayList();
		//   53  116:aload_0         
		//   54  117:new             #35  <Class ArrayList>
		//   55  120:dup             
		//   56  121:invokespecial   #36  <Method void ArrayList()>
		//   57  124:putfield        #40  <Field ArrayList mChangedScrap>
			((ViewHolder) (view)).setScrapContainer(this, true);
		//   58  127:aload_1         
		//   59  128:aload_0         
		//   60  129:iconst_1        
		//   61  130:invokevirtual   #522 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
			mChangedScrap.add(((Object) (view)));
		//   62  133:aload_0         
		//   63  134:getfield        #40  <Field ArrayList mChangedScrap>
		//   64  137:aload_1         
		//   65  138:invokevirtual   #525 <Method boolean ArrayList.add(Object)>
		//   66  141:pop             
		//   67  142:return          
		}

		void setRecycledViewPool(RecycledViewPool recycledviewpool)
		{
			if(mRecyclerPool != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnull          14
				mRecyclerPool.detach();
		//    3    7:aload_0         
		//    4    8:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//    5   11:invokevirtual   #530 <Method void RecyclerView$RecycledViewPool.detach()>
			mRecyclerPool = recycledviewpool;
		//    6   14:aload_0         
		//    7   15:aload_1         
		//    8   16:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			if(recycledviewpool != null)
		//*   9   19:aload_1         
		//*  10   20:ifnull          37
				mRecyclerPool.attach(getAdapter());
		//   11   23:aload_0         
		//   12   24:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   13   27:aload_0         
		//   14   28:getfield        #30  <Field RecyclerView this$0>
		//   15   31:invokevirtual   #534 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//   16   34:invokevirtual   #538 <Method void RecyclerView$RecycledViewPool.attach(RecyclerView$Adapter)>
		//   17   37:return          
		}

		void setViewCacheExtension(ViewCacheExtension viewcacheextension)
		{
			mViewCacheExtension = viewcacheextension;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//    3    5:return          
		}

		public void setViewCacheSize(int i)
		{
			mRequestedCacheMax = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #52  <Field int mRequestedCacheMax>
			updateViewCacheSize();
		//    3    5:aload_0         
		//    4    6:invokevirtual   #546 <Method void updateViewCacheSize()>
		//    5    9:return          
		}

		ViewHolder tryGetViewHolderForPositionByDeadline(int i, boolean flag, long l)
		{
			boolean flag2 = true;
		//    0    0:iconst_1        
		//    1    1:istore          8
			if(i < 0 || i >= mState.getItemCount())
		//*   2    3:iload_1         
		//*   3    4:iflt            21
		//*   4    7:iload_1         
		//*   5    8:aload_0         
		//*   6    9:getfield        #30  <Field RecyclerView this$0>
		//*   7   12:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   8   15:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//*   9   18:icmplt          88
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Invalid item position ").append(i).append("(").append(i).append("). Item count:").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//   10   21:new             #233 <Class IndexOutOfBoundsException>
		//   11   24:dup             
		//   12   25:new             #201 <Class StringBuilder>
		//   13   28:dup             
		//   14   29:invokespecial   #202 <Method void StringBuilder()>
		//   15   32:ldc2            #549 <String "Invalid item position ">
		//   16   35:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   17   38:iload_1         
		//   18   39:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   19   42:ldc2            #551 <String "(">
		//   20   45:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   21   48:iload_1         
		//   22   49:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   23   52:ldc2            #553 <String "). Item count:">
		//   24   55:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   25   58:aload_0         
		//   26   59:getfield        #30  <Field RecyclerView this$0>
		//   27   62:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   28   65:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   29   68:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   30   71:aload_0         
		//   31   72:getfield        #30  <Field RecyclerView this$0>
		//   32   75:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   33   78:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   34   81:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   35   84:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   36   87:athrow          
			boolean flag1;
			int j;
			int k;
			long l1;
			long l2;
			Object obj;
			Object obj1;
			View view;
			if(mState.isPreLayout())
		//*  37   88:aload_0         
		//*  38   89:getfield        #30  <Field RecyclerView this$0>
		//*  39   92:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  40   95:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  41   98:ifeq            1049
			{
				obj1 = ((Object) (getChangedScrapViewForPosition(i)));
		//   42  101:aload_0         
		//   43  102:iload_1         
		//   44  103:invokevirtual   #555 <Method RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
		//   45  106:astore          14
				if(obj1 != null)
		//*  46  108:aload           14
		//*  47  110:ifnull          320
					flag1 = true;
		//   48  113:iconst_1        
		//   49  114:istore          5
				else
		//*  50  116:iload           5
		//*  51  118:istore          6
		//*  52  120:aload           14
		//*  53  122:astore          13
		//*  54  124:iload           6
		//*  55  126:istore          5
		//*  56  128:aload           14
		//*  57  130:ifnonnull       212
		//*  58  133:aload_0         
		//*  59  134:iload_1         
		//*  60  135:iload_2         
		//*  61  136:invokevirtual   #557 <Method RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int, boolean)>
		//*  62  139:astore          14
		//*  63  141:aload           14
		//*  64  143:astore          13
		//*  65  145:iload           6
		//*  66  147:istore          5
		//*  67  149:aload           14
		//*  68  151:ifnull          212
		//*  69  154:aload_0         
		//*  70  155:aload           14
		//*  71  157:invokevirtual   #560 <Method boolean validateViewHolderForOffsetPosition(RecyclerView$ViewHolder)>
		//*  72  160:ifne            342
		//*  73  163:iload_2         
		//*  74  164:ifne            205
		//*  75  167:aload           14
		//*  76  169:iconst_4        
		//*  77  170:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
		//*  78  173:aload           14
		//*  79  175:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  80  178:ifeq            326
		//*  81  181:aload_0         
		//*  82  182:getfield        #30  <Field RecyclerView this$0>
		//*  83  185:aload           14
		//*  84  187:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  85  190:iconst_0        
		//*  86  191:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//*  87  194:aload           14
		//*  88  196:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
		//*  89  199:aload_0         
		//*  90  200:aload           14
		//*  91  202:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//*  92  205:aconst_null     
		//*  93  206:astore          13
		//*  94  208:iload           6
		//*  95  210:istore          5
		//*  96  212:aload           13
		//*  97  214:ifnonnull       1042
		//*  98  217:aload_0         
		//*  99  218:getfield        #30  <Field RecyclerView this$0>
		//* 100  221:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//* 101  224:iload_1         
		//* 102  225:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//* 103  228:istore          7
		//* 104  230:iload           7
		//* 105  232:iflt            250
		//* 106  235:iload           7
		//* 107  237:aload_0         
		//* 108  238:getfield        #30  <Field RecyclerView this$0>
		//* 109  241:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 110  244:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//* 111  247:icmplt          352
		//* 112  250:new             #233 <Class IndexOutOfBoundsException>
		//* 113  253:dup             
		//* 114  254:new             #201 <Class StringBuilder>
		//* 115  257:dup             
		//* 116  258:invokespecial   #202 <Method void StringBuilder()>
		//* 117  261:ldc1            #235 <String "Inconsistency detected. Invalid item position ">
		//* 118  263:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 119  266:iload_1         
		//* 120  267:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 121  270:ldc1            #240 <String "(offset:">
		//* 122  272:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 123  275:iload           7
		//* 124  277:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 125  280:ldc1            #242 <String ").">
		//* 126  282:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 127  285:ldc1            #244 <String "state:">
		//* 128  287:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 129  290:aload_0         
		//* 130  291:getfield        #30  <Field RecyclerView this$0>
		//* 131  294:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 132  297:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//* 133  300:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 134  303:aload_0         
		//* 135  304:getfield        #30  <Field RecyclerView this$0>
		//* 136  307:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//* 137  310:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 138  313:invokevirtual   #215 <Method String StringBuilder.toString()>
		//* 139  316:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//* 140  319:athrow          
					flag1 = false;
		//  141  320:iconst_0        
		//  142  321:istore          5
				j = ((int) (flag1));
			} else
		//* 143  323:goto            116
		//* 144  326:aload           14
		//* 145  328:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//* 146  331:ifeq            199
		//* 147  334:aload           14
		//* 148  336:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//* 149  339:goto            199
		//* 150  342:iconst_1        
		//* 151  343:istore          5
		//* 152  345:aload           14
		//* 153  347:astore          13
		//* 154  349:goto            212
		//* 155  352:aload_0         
		//* 156  353:getfield        #30  <Field RecyclerView this$0>
		//* 157  356:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 158  359:iload           7
		//* 159  361:invokevirtual   #562 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//* 160  364:istore          6
		//* 161  366:aload_0         
		//* 162  367:getfield        #30  <Field RecyclerView this$0>
		//* 163  370:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 164  373:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//* 165  376:ifeq            1035
		//* 166  379:aload_0         
		//* 167  380:aload_0         
		//* 168  381:getfield        #30  <Field RecyclerView this$0>
		//* 169  384:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 170  387:iload           7
		//* 171  389:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//* 172  392:iload           6
		//* 173  394:iload_2         
		//* 174  395:invokevirtual   #564 <Method RecyclerView$ViewHolder getScrapOrCachedViewForId(long, int, boolean)>
		//* 175  398:astore          14
		//* 176  400:aload           14
		//* 177  402:astore          13
		//* 178  404:aload           14
		//* 179  406:ifnull          1035
		//* 180  409:aload           14
		//* 181  411:iload           7
		//* 182  413:putfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 183  416:iconst_1        
		//* 184  417:istore          5
		//* 185  419:aload           14
		//* 186  421:astore          13
		//* 187  423:aload           14
		//* 188  425:ifnonnull       557
		//* 189  428:aload           14
		//* 190  430:astore          13
		//* 191  432:aload_0         
		//* 192  433:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//* 193  436:ifnull          557
		//* 194  439:aload_0         
		//* 195  440:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//* 196  443:aload_0         
		//* 197  444:iload_1         
		//* 198  445:iload           6
		//* 199  447:invokevirtual   #570 <Method View RecyclerView$ViewCacheExtension.getViewForPositionAndType(RecyclerView$Recycler, int, int)>
		//* 200  450:astore          15
		//* 201  452:aload           14
		//* 202  454:astore          13
		//* 203  456:aload           15
		//* 204  458:ifnull          557
		//* 205  461:aload_0         
		//* 206  462:getfield        #30  <Field RecyclerView this$0>
		//* 207  465:aload           15
		//* 208  467:invokevirtual   #573 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolder(View)>
		//* 209  470:astore          14
		//* 210  472:aload           14
		//* 211  474:ifnonnull       511
		//* 212  477:new             #199 <Class IllegalArgumentException>
		//* 213  480:dup             
		//* 214  481:new             #201 <Class StringBuilder>
		//* 215  484:dup             
		//* 216  485:invokespecial   #202 <Method void StringBuilder()>
		//* 217  488:ldc2            #575 <String "getViewForPositionAndType returned a view which does not have a ViewHolder">
		//* 218  491:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 219  494:aload_0         
		//* 220  495:getfield        #30  <Field RecyclerView this$0>
		//* 221  498:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//* 222  501:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 223  504:invokevirtual   #215 <Method String StringBuilder.toString()>
		//* 224  507:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//* 225  510:athrow          
		//* 226  511:aload           14
		//* 227  513:astore          13
		//* 228  515:aload           14
		//* 229  517:invokevirtual   #490 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//* 230  520:ifeq            557
		//* 231  523:new             #199 <Class IllegalArgumentException>
		//* 232  526:dup             
		//* 233  527:new             #201 <Class StringBuilder>
		//* 234  530:dup             
		//* 235  531:invokespecial   #202 <Method void StringBuilder()>
		//* 236  534:ldc2            #577 <String "getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.">
		//* 237  537:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 238  540:aload_0         
		//* 239  541:getfield        #30  <Field RecyclerView this$0>
		//* 240  544:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//* 241  547:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 242  550:invokevirtual   #215 <Method String StringBuilder.toString()>
		//* 243  553:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//* 244  556:athrow          
		//* 245  557:aload           13
		//* 246  559:astore          14
		//* 247  561:aload           13
		//* 248  563:ifnonnull       611
		//* 249  566:aload_0         
		//* 250  567:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//* 251  570:iload           6
		//* 252  572:invokevirtual   #580 <Method RecyclerView$ViewHolder RecyclerView$RecycledViewPool.getRecycledView(int)>
		//* 253  575:astore          13
		//* 254  577:aload           13
		//* 255  579:astore          14
		//* 256  581:aload           13
		//* 257  583:ifnull          611
		//* 258  586:aload           13
		//* 259  588:invokevirtual   #583 <Method void RecyclerView$ViewHolder.resetInternal()>
		//* 260  591:aload           13
		//* 261  593:astore          14
		//* 262  595:getstatic       #586 <Field boolean RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST>
		//* 263  598:ifeq            611
		//* 264  601:aload_0         
		//* 265  602:aload           13
		//* 266  604:invokespecial   #588 <Method void invalidateDisplayListInt(RecyclerView$ViewHolder)>
		//* 267  607:aload           13
		//* 268  609:astore          14
		//* 269  611:aload           14
		//* 270  613:astore          13
		//* 271  615:aload           14
		//* 272  617:ifnonnull       730
		//* 273  620:aload_0         
		//* 274  621:getfield        #30  <Field RecyclerView this$0>
		//* 275  624:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//* 276  627:lstore          9
		//* 277  629:lload_3         
		//* 278  630:ldc2w           #132 <Long 0xffffffffL>
		//* 279  633:lcmp            
		//* 280  634:ifeq            654
		//* 281  637:aload_0         
		//* 282  638:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 283  641:iload           6
		//* 284  643:lload           9
		//* 285  645:lload_3         
		//* 286  646:invokevirtual   #591 <Method boolean RecyclerView$RecycledViewPool.willCreateInTime(int, long, long)>
		//* 287  649:ifne            654
		//* 288  652:aconst_null     
		//* 289  653:areturn         
		//* 290  654:aload_0         
		//* 291  655:getfield        #30  <Field RecyclerView this$0>
		//* 292  658:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 293  661:aload_0         
		//* 294  662:getfield        #30  <Field RecyclerView this$0>
		//* 295  665:iload           6
		//* 296  667:invokevirtual   #595 <Method RecyclerView$ViewHolder RecyclerView$Adapter.createViewHolder(ViewGroup, int)>
		//* 297  670:astore          13
		//* 298  672:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 299  675:ifeq            707
		//* 300  678:aload           13
		//* 301  680:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 302  683:invokestatic    #599 <Method RecyclerView RecyclerView.findNestedRecyclerView(View)>
		//* 303  686:astore          14
		//* 304  688:aload           14
		//* 305  690:ifnull          707
		//* 306  693:aload           13
		//* 307  695:new             #601 <Class WeakReference>
		//* 308  698:dup             
		//* 309  699:aload           14
		//* 310  701:invokespecial   #603 <Method void WeakReference(Object)>
		//* 311  704:putfield        #607 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		//* 312  707:aload_0         
		//* 313  708:getfield        #30  <Field RecyclerView this$0>
		//* 314  711:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//* 315  714:lstore          11
		//* 316  716:aload_0         
		//* 317  717:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 318  720:iload           6
		//* 319  722:lload           11
		//* 320  724:lload           9
		//* 321  726:lsub            
		//* 322  727:invokevirtual   #610 <Method void RecyclerView$RecycledViewPool.factorInCreateTime(int, long)>
		//* 323  730:aload           13
		//* 324  732:astore          14
		//* 325  734:iload           5
		//* 326  736:ifeq            835
		//* 327  739:aload_0         
		//* 328  740:getfield        #30  <Field RecyclerView this$0>
		//* 329  743:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 330  746:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 331  749:ifne            835
		//* 332  752:aload           14
		//* 333  754:sipush          8192
		//* 334  757:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 335  760:ifeq            835
		//* 336  763:aload           14
		//* 337  765:iconst_0        
		//* 338  766:sipush          8192
		//* 339  769:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		//* 340  772:aload_0         
		//* 341  773:getfield        #30  <Field RecyclerView this$0>
		//* 342  776:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 343  779:getfield        #613 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		//* 344  782:ifeq            835
		//* 345  785:aload           14
		//* 346  787:invokestatic    #619 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
		//* 347  790:istore          6
		//* 348  792:aload_0         
		//* 349  793:getfield        #30  <Field RecyclerView this$0>
		//* 350  796:getfield        #623 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//* 351  799:aload_0         
		//* 352  800:getfield        #30  <Field RecyclerView this$0>
		//* 353  803:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 354  806:aload           14
		//* 355  808:iload           6
		//* 356  810:sipush          4096
		//* 357  813:ior             
		//* 358  814:aload           14
		//* 359  816:invokevirtual   #626 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//* 360  819:invokevirtual   #630 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
		//* 361  822:astore          13
		//* 362  824:aload_0         
		//* 363  825:getfield        #30  <Field RecyclerView this$0>
		//* 364  828:aload           14
		//* 365  830:aload           13
		//* 366  832:invokevirtual   #634 <Method void RecyclerView.recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
		//* 367  835:aload_0         
		//* 368  836:getfield        #30  <Field RecyclerView this$0>
		//* 369  839:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 370  842:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 371  845:ifeq            929
		//* 372  848:aload           14
		//* 373  850:invokevirtual   #637 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 374  853:ifeq            929
		//* 375  856:aload           14
		//* 376  858:iload_1         
		//* 377  859:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
		//* 378  862:iconst_0        
		//* 379  863:istore_2        
		//* 380  864:aload           14
		//* 381  866:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 382  869:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//* 383  872:astore          13
		//* 384  874:aload           13
		//* 385  876:ifnonnull       976
		//* 386  879:aload_0         
		//* 387  880:getfield        #30  <Field RecyclerView this$0>
		//* 388  883:invokevirtual   #257 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//* 389  886:checkcast       #259 <Class RecyclerView$LayoutParams>
		//* 390  889:astore          13
		//* 391  891:aload           14
		//* 392  893:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 393  896:aload           13
		//* 394  898:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 395  901:aload           13
		//* 396  903:aload           14
		//* 397  905:putfield        #271 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
		//* 398  908:iload           5
		//* 399  910:ifeq            1025
		//* 400  913:iload_2         
		//* 401  914:ifeq            1025
		//* 402  917:iload           8
		//* 403  919:istore_2        
		//* 404  920:aload           13
		//* 405  922:iload_2         
		//* 406  923:putfield        #278 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//* 407  926:aload           14
		//* 408  928:areturn         
		//* 409  929:aload           14
		//* 410  931:invokevirtual   #637 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 411  934:ifeq            953
		//* 412  937:aload           14
		//* 413  939:invokevirtual   #640 <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//* 414  942:ifne            953
		//* 415  945:aload           14
		//* 416  947:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 417  950:ifeq            1030
		//* 418  953:aload_0         
		//* 419  954:aload           14
		//* 420  956:aload_0         
		//* 421  957:getfield        #30  <Field RecyclerView this$0>
		//* 422  960:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//* 423  963:iload_1         
		//* 424  964:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//* 425  967:iload_1         
		//* 426  968:lload_3         
		//* 427  969:invokespecial   #248 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//* 428  972:istore_2        
		//* 429  973:goto            864
		//* 430  976:aload_0         
		//* 431  977:getfield        #30  <Field RecyclerView this$0>
		//* 432  980:aload           13
		//* 433  982:invokevirtual   #282 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 434  985:ifne            1015
		//* 435  988:aload_0         
		//* 436  989:getfield        #30  <Field RecyclerView this$0>
		//* 437  992:aload           13
		//* 438  994:invokevirtual   #286 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 439  997:checkcast       #259 <Class RecyclerView$LayoutParams>
		//* 440 1000:astore          13
		//* 441 1002:aload           14
		//* 442 1004:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 443 1007:aload           13
		//* 444 1009:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 445 1012:goto            901
		//* 446 1015:aload           13
		//* 447 1017:checkcast       #259 <Class RecyclerView$LayoutParams>
		//* 448 1020:astore          13
		//* 449 1022:goto            901
		//* 450 1025:iconst_0        
		//* 451 1026:istore_2        
		//* 452 1027:goto            920
		//* 453 1030:iconst_0        
		//* 454 1031:istore_2        
		//* 455 1032:goto            864
		//* 456 1035:aload           13
		//* 457 1037:astore          14
		//* 458 1039:goto            419
		//* 459 1042:aload           13
		//* 460 1044:astore          14
		//* 461 1046:goto            734
			{
				obj1 = null;
		//  462 1049:aconst_null     
		//  463 1050:astore          14
				j = 0;
		//  464 1052:iconst_0        
		//  465 1053:istore          6
			}
			obj = obj1;
			flag1 = ((boolean) (j));
			if(obj1 == null)
			{
				obj1 = ((Object) (getScrapOrHiddenOrCachedHolderForPosition(i, flag)));
				obj = obj1;
				flag1 = ((boolean) (j));
				if(obj1 != null)
					if(!validateViewHolderForOffsetPosition(((ViewHolder) (obj1))))
					{
						if(!flag)
						{
							((ViewHolder) (obj1)).addFlags(4);
							if(((ViewHolder) (obj1)).isScrap())
							{
								removeDetachedView(((ViewHolder) (obj1)).itemView, false);
								((ViewHolder) (obj1)).unScrap();
							} else
							if(((ViewHolder) (obj1)).wasReturnedFromScrap())
								((ViewHolder) (obj1)).clearReturnedFromScrapFlag();
							recycleViewHolderInternal(((ViewHolder) (obj1)));
						}
						obj = null;
						flag1 = ((boolean) (j));
					} else
					{
						flag1 = true;
						obj = obj1;
					}
			}
			if(obj != null)
				break MISSING_BLOCK_LABEL_1042;
			k = mAdapterHelper.findPositionOffset(i);
			if(k < 0 || k >= mAdapter.getItemCount())
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(k).append(").").append("state:").append(mState.getItemCount()).append(exceptionLabel()).toString());
			j = mAdapter.getItemViewType(k);
			if(!mAdapter.hasStableIds()) goto _L2; else goto _L1
_L1:
			obj1 = ((Object) (getScrapOrCachedViewForId(mAdapter.getItemId(k), j, flag)));
			obj = obj1;
			if(obj1 == null) goto _L2; else goto _L3
_L3:
			obj1.mPosition = k;
			flag1 = true;
_L4:
			obj = obj1;
			if(obj1 == null)
			{
				obj = obj1;
				if(mViewCacheExtension != null)
				{
					view = mViewCacheExtension.getViewForPositionAndType(this, i, j);
					obj = obj1;
					if(view != null)
					{
						obj1 = ((Object) (getChildViewHolder(view)));
						if(obj1 == null)
							throw new IllegalArgumentException((new StringBuilder()).append("getViewForPositionAndType returned a view which does not have a ViewHolder").append(exceptionLabel()).toString());
						obj = obj1;
						if(((ViewHolder) (obj1)).shouldIgnore())
							throw new IllegalArgumentException((new StringBuilder()).append("getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.").append(exceptionLabel()).toString());
					}
				}
			}
			obj1 = obj;
			if(obj == null)
			{
				obj = ((Object) (getRecycledViewPool().getRecycledView(j)));
				obj1 = obj;
				if(obj != null)
				{
					((ViewHolder) (obj)).resetInternal();
					obj1 = obj;
					if(RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST)
					{
						invalidateDisplayListInt(((ViewHolder) (obj)));
						obj1 = obj;
					}
				}
			}
			obj = obj1;
			if(obj1 == null)
			{
				l1 = getNanoTime();
				if(l != 0xffffffffL && !mRecyclerPool.willCreateInTime(j, l1, l))
					return null;
				obj = ((Object) (mAdapter.createViewHolder(((ViewGroup) (RecyclerView.this)), j)));
				if(RecyclerView.ALLOW_THREAD_GAP_WORK)
				{
					obj1 = ((Object) (RecyclerView.findNestedRecyclerView(((ViewHolder) (obj)).itemView)));
					if(obj1 != null)
						obj.mNestedRecyclerView = new WeakReference(obj1);
				}
				l2 = getNanoTime();
				mRecyclerPool.factorInCreateTime(j, l2 - l1);
			}
			obj1 = obj;
_L5:
			if(flag1 && !mState.isPreLayout() && ((ViewHolder) (obj1)).hasAnyOfTheFlags(8192))
			{
				((ViewHolder) (obj1)).setFlags(0, 8192);
				if(mState.mRunSimpleAnimations)
				{
					j = ItemAnimator.buildAdapterChangeFlagsForAnimations(((ViewHolder) (obj1)));
					obj = ((Object) (mItemAnimator.recordPreLayoutInformation(mState, ((ViewHolder) (obj1)), j | 0x1000, ((ViewHolder) (obj1)).getUnmodifiedPayloads())));
					recordAnimationInfoIfBouncedHiddenView(((ViewHolder) (obj1)), ((ItemAnimator.ItemHolderInfo) (obj)));
				}
			}
			if(mState.isPreLayout() && ((ViewHolder) (obj1)).isBound())
			{
				obj1.mPreLayoutPosition = i;
				flag = false;
			} else
			if(!((ViewHolder) (obj1)).isBound() || ((ViewHolder) (obj1)).needsUpdate() || ((ViewHolder) (obj1)).isInvalid())
				flag = tryBindViewHolderByDeadline(((ViewHolder) (obj1)), mAdapterHelper.findPositionOffset(i), i, l);
			else
				flag = false;
			obj = ((Object) (((ViewHolder) (obj1)).itemView.getLayoutParams()));
			if(obj == null)
			{
				obj = ((Object) ((LayoutParams)generateDefaultLayoutParams()));
				((ViewHolder) (obj1)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
			} else
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj))))
			{
				obj = ((Object) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)))));
				((ViewHolder) (obj1)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
			} else
			{
				obj = ((Object) ((LayoutParams)obj));
			}
			obj.mViewHolder = ((ViewHolder) (obj1));
			if(flag1 && flag)
				flag = flag2;
			else
				flag = false;
			obj.mPendingInvalidate = flag;
			return ((ViewHolder) (obj1));
_L2:
			obj1 = obj;
			  goto _L4
			obj1 = obj;
			  goto _L5
		//* 466 1055:goto            120
		}

		void unscrapView(ViewHolder viewholder)
		{
			if(viewholder.mInChangeScrap)
		//*   0    0:aload_1         
		//*   1    1:invokestatic    #645 <Method boolean RecyclerView$ViewHolder.access$1100(RecyclerView$ViewHolder)>
		//*   2    4:ifeq            33
				mChangedScrap.remove(((Object) (viewholder)));
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//    7   15:pop             
			else
		//*   8   16:aload_1         
		//*   9   17:aconst_null     
		//*  10   18:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//*  11   21:pop             
		//*  12   22:aload_1         
		//*  13   23:iconst_0        
		//*  14   24:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//*  15   27:pop             
		//*  16   28:aload_1         
		//*  17   29:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//*  18   32:return          
				mAttachedScrap.remove(((Object) (viewholder)));
		//   19   33:aload_0         
		//   20   34:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   37:aload_1         
		//   22   38:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//   23   41:pop             
			viewholder.mScrapContainer = null;
			viewholder.mInChangeScrap = false;
			viewholder.clearReturnedFromScrapFlag();
		//*  24   42:goto            16
		}

		void updateViewCacheSize()
		{
			int i;
			if(mLayout != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnull          71
				i = mLayout.mPrefetchMaxCountObserved;
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    7   17:getfield        #656 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
		//    8   20:istore_1        
			else
		//*   9   21:aload_0         
		//*  10   22:iload_1         
		//*  11   23:aload_0         
		//*  12   24:getfield        #52  <Field int mRequestedCacheMax>
		//*  13   27:iadd            
		//*  14   28:putfield        #54  <Field int mViewCacheMax>
		//*  15   31:aload_0         
		//*  16   32:getfield        #42  <Field ArrayList mCachedViews>
		//*  17   35:invokevirtual   #296 <Method int ArrayList.size()>
		//*  18   38:iconst_1        
		//*  19   39:isub            
		//*  20   40:istore_1        
		//*  21   41:iload_1         
		//*  22   42:iflt            76
		//*  23   45:aload_0         
		//*  24   46:getfield        #42  <Field ArrayList mCachedViews>
		//*  25   49:invokevirtual   #296 <Method int ArrayList.size()>
		//*  26   52:aload_0         
		//*  27   53:getfield        #54  <Field int mViewCacheMax>
		//*  28   56:icmple          76
		//*  29   59:aload_0         
		//*  30   60:iload_1         
		//*  31   61:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
		//*  32   64:iload_1         
		//*  33   65:iconst_1        
		//*  34   66:isub            
		//*  35   67:istore_1        
		//*  36   68:goto            41
				i = 0;
		//   37   71:iconst_0        
		//   38   72:istore_1        
			mViewCacheMax = i + mRequestedCacheMax;
			for(i = mCachedViews.size() - 1; i >= 0 && mCachedViews.size() > mViewCacheMax; i--)
				recycleCachedViewAt(i);

		//*  39   73:goto            21
		//   40   76:return          
		}

		boolean validateViewHolderForOffsetPosition(ViewHolder viewholder)
		{
			boolean flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore_3        
			boolean flag;
			if(viewholder.isRemoved())
		//*   2    2:aload_1         
		//*   3    3:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   4    6:ifeq            22
			{
				flag = mState.isPreLayout();
		//    5    9:aload_0         
		//    6   10:getfield        #30  <Field RecyclerView this$0>
		//    7   13:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//    8   16:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//    9   19:istore_2        
			} else
		//*  10   20:iload_2         
		//*  11   21:ireturn         
			{
				if(viewholder.mPosition < 0 || viewholder.mPosition >= mAdapter.getItemCount())
		//*  12   22:aload_1         
		//*  13   23:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  14   26:iflt            46
		//*  15   29:aload_1         
		//*  16   30:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  17   33:aload_0         
		//*  18   34:getfield        #30  <Field RecyclerView this$0>
		//*  19   37:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  20   40:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  21   43:icmplt          84
					throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid view holder adapter position").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   22   46:new             #233 <Class IndexOutOfBoundsException>
		//   23   49:dup             
		//   24   50:new             #201 <Class StringBuilder>
		//   25   53:dup             
		//   26   54:invokespecial   #202 <Method void StringBuilder()>
		//   27   57:ldc2            #658 <String "Inconsistency detected. Invalid view holder adapter position">
		//   28   60:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   29   63:aload_1         
		//   30   64:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   31   67:aload_0         
		//   32   68:getfield        #30  <Field RecyclerView this$0>
		//   33   71:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   34   74:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   35   77:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   36   80:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   37   83:athrow          
				if(!mState.isPreLayout() && mAdapter.getItemViewType(viewholder.mPosition) != viewholder.getItemViewType())
		//*  38   84:aload_0         
		//*  39   85:getfield        #30  <Field RecyclerView this$0>
		//*  40   88:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  41   91:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  42   94:ifne            120
		//*  43   97:aload_0         
		//*  44   98:getfield        #30  <Field RecyclerView this$0>
		//*  45  101:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  46  104:aload_1         
		//*  47  105:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  48  108:invokevirtual   #562 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//*  49  111:aload_1         
		//*  50  112:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  51  115:icmpeq          120
					return false;
		//   52  118:iconst_0        
		//   53  119:ireturn         
				flag = flag1;
		//   54  120:iload_3         
		//   55  121:istore_2        
				if(mAdapter.hasStableIds())
		//*  56  122:aload_0         
		//*  57  123:getfield        #30  <Field RecyclerView this$0>
		//*  58  126:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  59  129:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  60  132:ifeq            20
				{
					flag = flag1;
		//   61  135:iload_3         
		//   62  136:istore_2        
					if(viewholder.getItemId() != mAdapter.getItemId(viewholder.mPosition))
		//*  63  137:aload_1         
		//*  64  138:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  65  141:aload_0         
		//*  66  142:getfield        #30  <Field RecyclerView this$0>
		//*  67  145:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  68  148:aload_1         
		//*  69  149:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  70  152:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//*  71  155:lcmp            
		//*  72  156:ifeq            20
						return false;
		//   73  159:iconst_0        
		//   74  160:ireturn         
				}
			}
			return flag;
		}

		void viewRangeUpdate(int i, int j)
		{
			int k = mCachedViews.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore_3        
			while(k >= 0) 
		//*   6   10:iload_3         
		//*   7   11:iflt            74
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   14:aload_0         
		//    9   15:getfield        #42  <Field ArrayList mCachedViews>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   25:astore          5
				if(viewholder != null)
		//*  14   27:aload           5
		//*  15   29:ifnonnull       39
		//*  16   32:iload_3         
		//*  17   33:iconst_1        
		//*  18   34:isub            
		//*  19   35:istore_3        
		//*  20   36:goto            10
				{
					int l = viewholder.mPosition;
		//   21   39:aload           5
		//   22   41:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//   23   44:istore          4
					if(l >= i && l < i + j)
		//*  24   46:iload           4
		//*  25   48:iload_1         
		//*  26   49:icmplt          32
		//*  27   52:iload           4
		//*  28   54:iload_1         
		//*  29   55:iload_2         
		//*  30   56:iadd            
		//*  31   57:icmpge          32
					{
						viewholder.addFlags(2);
		//   32   60:aload           5
		//   33   62:iconst_2        
		//   34   63:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						recycleCachedViewAt(k);
		//   35   66:aload_0         
		//   36   67:iload_3         
		//   37   68:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
					}
				}
				k--;
			}
		//*  38   71:goto            32
		//   39   74:return          
		}

		static final int DEFAULT_CACHE_SIZE = 2;
		final ArrayList mAttachedScrap = new ArrayList();
		final ArrayList mCachedViews = new ArrayList();
		ArrayList mChangedScrap;
		RecycledViewPool mRecyclerPool;
		private int mRequestedCacheMax;
		private final List mUnmodifiableAttachedScrap;
		private ViewCacheExtension mViewCacheExtension;
		int mViewCacheMax;
		final RecyclerView this$0;

		public Recycler()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #30  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #33  <Method void Object()>
		//    5    9:aload_0         
		//    6   10:new             #35  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #36  <Method void ArrayList()>
		//    9   17:putfield        #38  <Field ArrayList mAttachedScrap>
			mChangedScrap = null;
		//   10   20:aload_0         
		//   11   21:aconst_null     
		//   12   22:putfield        #40  <Field ArrayList mChangedScrap>
		//   13   25:aload_0         
		//   14   26:new             #35  <Class ArrayList>
		//   15   29:dup             
		//   16   30:invokespecial   #36  <Method void ArrayList()>
		//   17   33:putfield        #42  <Field ArrayList mCachedViews>
			mUnmodifiableAttachedScrap = Collections.unmodifiableList(((List) (mAttachedScrap)));
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   41:invokestatic    #48  <Method List Collections.unmodifiableList(List)>
		//   22   44:putfield        #50  <Field List mUnmodifiableAttachedScrap>
			mRequestedCacheMax = 2;
		//   23   47:aload_0         
		//   24   48:iconst_2        
		//   25   49:putfield        #52  <Field int mRequestedCacheMax>
			mViewCacheMax = 2;
		//   26   52:aload_0         
		//   27   53:iconst_2        
		//   28   54:putfield        #54  <Field int mViewCacheMax>
		//   29   57:return          
		}
	}

	public static interface RecyclerListener
	{

		public abstract void onViewRecycled(ViewHolder viewholder);
	}

	private class RecyclerViewDataObserver extends AdapterDataObserver
	{

		public void onChanged()
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			mState.mStructureChanged = true;
		//    4    8:aload_0         
		//    5    9:getfield        #13  <Field RecyclerView this$0>
		//    6   12:getfield        #26  <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iconst_1        
		//    8   16:putfield        #32  <Field boolean RecyclerView$State.mStructureChanged>
			setDataSetChangedAfterLayout();
		//    9   19:aload_0         
		//   10   20:getfield        #13  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #35  <Method void RecyclerView.setDataSetChangedAfterLayout()>
			if(!mAdapterHelper.hasPendingUpdates())
		//*  12   26:aload_0         
		//*  13   27:getfield        #13  <Field RecyclerView this$0>
		//*  14   30:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*  15   33:invokevirtual   #45  <Method boolean AdapterHelper.hasPendingUpdates()>
		//*  16   36:ifne            46
				requestLayout();
		//   17   39:aload_0         
		//   18   40:getfield        #13  <Field RecyclerView this$0>
		//   19   43:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
		//   20   46:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeChanged(i, j, obj))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:aload_3         
		//*  10   18:invokevirtual   #53  <Method boolean AdapterHelper.onItemRangeChanged(int, int, Object)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeInserted(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #61  <Method boolean AdapterHelper.onItemRangeInserted(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeMoved(i, j, k))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:iload_3         
		//*  10   18:invokevirtual   #66  <Method boolean AdapterHelper.onItemRangeMoved(int, int, int)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeRemoved(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #69  <Method boolean AdapterHelper.onItemRangeRemoved(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		void triggerUpdateProcessor()
		{
			if(RecyclerView.POST_UPDATES_ON_ANIMATION && mHasFixedSize && mIsAttached)
		//*   0    0:getstatic       #72  <Field boolean RecyclerView.POST_UPDATES_ON_ANIMATION>
		//*   1    3:ifeq            41
		//*   2    6:aload_0         
		//*   3    7:getfield        #13  <Field RecyclerView this$0>
		//*   4   10:getfield        #75  <Field boolean RecyclerView.mHasFixedSize>
		//*   5   13:ifeq            41
		//*   6   16:aload_0         
		//*   7   17:getfield        #13  <Field RecyclerView this$0>
		//*   8   20:getfield        #78  <Field boolean RecyclerView.mIsAttached>
		//*   9   23:ifeq            41
			{
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), mUpdateChildViewsRunnable);
		//   10   26:aload_0         
		//   11   27:getfield        #13  <Field RecyclerView this$0>
		//   12   30:aload_0         
		//   13   31:getfield        #13  <Field RecyclerView this$0>
		//   14   34:getfield        #82  <Field Runnable RecyclerView.mUpdateChildViewsRunnable>
		//   15   37:invokestatic    #88  <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   40:return          
			} else
			{
				mAdapterUpdateDuringMeasure = true;
		//   17   41:aload_0         
		//   18   42:getfield        #13  <Field RecyclerView this$0>
		//   19   45:iconst_1        
		//   20   46:putfield        #91  <Field boolean RecyclerView.mAdapterUpdateDuringMeasure>
				requestLayout();
		//   21   49:aload_0         
		//   22   50:getfield        #13  <Field RecyclerView this$0>
		//   23   53:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
				return;
		//   24   56:return          
			}
		}

		final RecyclerView this$0;

		RecyclerViewDataObserver()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #13  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #16  <Method void RecyclerView$AdapterDataObserver()>
		//    5    9:return          
		}
	}

	public static class SavedState extends AbsSavedState
	{

		void copyFrom(SavedState savedstate)
		{
			mLayoutState = savedstate.mLayoutState;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:getfield        #37  <Field Parcelable mLayoutState>
		//    3    5:putfield        #37  <Field Parcelable mLayoutState>
		//    4    8:return          
		}

		public void writeToParcel(Parcel parcel, int i)
		{
			super.writeToParcel(parcel, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #54  <Method void AbsSavedState.writeToParcel(Parcel, int)>
			parcel.writeParcelable(mLayoutState, 0);
		//    4    6:aload_1         
		//    5    7:aload_0         
		//    6    8:getfield        #37  <Field Parcelable mLayoutState>
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #58  <Method void Parcel.writeParcelable(Parcelable, int)>
		//    9   15:return          
		}

		public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.ClassLoaderCreator() {

			public SavedState createFromParcel(Parcel parcel)
			{
				return new SavedState(parcel, ((ClassLoader) (null)));
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aconst_null     
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public SavedState createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return new SavedState(parcel, classloader);
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel)
			{
				return ((Object) (createFromParcel(parcel)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #26  <Method RecyclerView$SavedState createFromParcel(Parcel)>
			//    3    5:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return ((Object) (createFromParcel(parcel, classloader)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:aload_2         
			//    3    3:invokevirtual   #29  <Method RecyclerView$SavedState createFromParcel(Parcel, ClassLoader)>
			//    4    6:areturn         
			}

			public SavedState[] newArray(int i)
			{
				return new SavedState[i];
			//    0    0:iload_1         
			//    1    1:anewarray       SavedState[]
			//    2    4:areturn         
			}

			public volatile Object[] newArray(int i)
			{
				return ((Object []) (newArray(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #34  <Method RecyclerView$SavedState[] newArray(int)>
			//    3    5:areturn         
			}

		}
;
		Parcelable mLayoutState;

		static 
		{
		//    0    0:new             #9   <Class RecyclerView$SavedState$1>
		//    1    3:dup             
		//    2    4:invokespecial   #23  <Method void RecyclerView$SavedState$1()>
		//    3    7:putstatic       #25  <Field android.os.Parcelable$Creator CREATOR>
		//*   4   10:return          
		}

		SavedState(Parcel parcel, ClassLoader classloader)
		{
			super(parcel, classloader);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #29  <Method void AbsSavedState(Parcel, ClassLoader)>
			if(classloader == null)
		//*   4    6:aload_2         
		//*   5    7:ifnull          20
		//*   6   10:aload_0         
		//*   7   11:aload_1         
		//*   8   12:aload_2         
		//*   9   13:invokevirtual   #35  <Method Parcelable Parcel.readParcelable(ClassLoader)>
		//*  10   16:putfield        #37  <Field Parcelable mLayoutState>
		//*  11   19:return          
				classloader = ((Class) (android/support/v7/widget/RecyclerView$LayoutManager)).getClassLoader();
		//   12   20:ldc1            #39  <Class RecyclerView$LayoutManager>
		//   13   22:invokevirtual   #45  <Method ClassLoader Class.getClassLoader()>
		//   14   25:astore_2        
			mLayoutState = parcel.readParcelable(classloader);
		//*  15   26:goto            10
		}

		SavedState(Parcelable parcelable)
		{
			super(parcelable);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #48  <Method void AbsSavedState(Parcelable)>
		//    3    5:return          
		}
	}

	public static class SimpleOnItemTouchListener
		implements OnItemTouchListener
	{

		public boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onRequestDisallowInterceptTouchEvent(boolean flag)
		{
		//    0    0:return          
		}

		public void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
		//    0    0:return          
		}

		public SimpleOnItemTouchListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #13  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class SmoothScroller
	{

		private void onAnimation(int i, int j)
		{
label0:
			{
				RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:astore          4
				if(!mRunning || mTargetPosition == -1 || recyclerview == null)
		//*   3    6:aload_0         
		//*   4    7:getfield        #47  <Field boolean mRunning>
		//*   5   10:ifeq            26
		//*   6   13:aload_0         
		//*   7   14:getfield        #32  <Field int mTargetPosition>
		//*   8   17:iconst_m1       
		//*   9   18:icmpeq          26
		//*  10   21:aload           4
		//*  11   23:ifnonnull       30
					stop();
		//   12   26:aload_0         
		//   13   27:invokevirtual   #50  <Method void stop()>
				mPendingInitialRun = false;
		//   14   30:aload_0         
		//   15   31:iconst_0        
		//   16   32:putfield        #52  <Field boolean mPendingInitialRun>
				if(mTargetView != null)
		//*  17   35:aload_0         
		//*  18   36:getfield        #54  <Field View mTargetView>
		//*  19   39:ifnull          87
					if(getChildPosition(mTargetView) == mTargetPosition)
		//*  20   42:aload_0         
		//*  21   43:aload_0         
		//*  22   44:getfield        #54  <Field View mTargetView>
		//*  23   47:invokevirtual   #58  <Method int getChildPosition(View)>
		//*  24   50:aload_0         
		//*  25   51:getfield        #32  <Field int mTargetPosition>
		//*  26   54:icmpne          151
					{
						onTargetFound(mTargetView, recyclerview.mState, mRecyclingAction);
		//   27   57:aload_0         
		//   28   58:aload_0         
		//   29   59:getfield        #54  <Field View mTargetView>
		//   30   62:aload           4
		//   31   64:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   32   67:aload_0         
		//   33   68:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   34   71:invokevirtual   #66  <Method void onTargetFound(View, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
						mRecyclingAction.runIfNecessary(recyclerview);
		//   35   74:aload_0         
		//   36   75:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   37   78:aload           4
		//   38   80:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
						stop();
		//   39   83:aload_0         
		//   40   84:invokevirtual   #50  <Method void stop()>
					} else
		//*  41   87:aload_0         
		//*  42   88:getfield        #47  <Field boolean mRunning>
		//*  43   91:ifeq            150
		//*  44   94:aload_0         
		//*  45   95:iload_1         
		//*  46   96:iload_2         
		//*  47   97:aload           4
		//*  48   99:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//*  49  102:aload_0         
		//*  50  103:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  51  106:invokevirtual   #74  <Method void onSeekTargetStep(int, int, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
		//*  52  109:aload_0         
		//*  53  110:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  54  113:invokevirtual   #78  <Method boolean RecyclerView$SmoothScroller$Action.hasJumpTarget()>
		//*  55  116:istore_3        
		//*  56  117:aload_0         
		//*  57  118:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  58  121:aload           4
		//*  59  123:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
		//*  60  126:iload_3         
		//*  61  127:ifeq            150
		//*  62  130:aload_0         
		//*  63  131:getfield        #47  <Field boolean mRunning>
		//*  64  134:ifeq            167
		//*  65  137:aload_0         
		//*  66  138:iconst_1        
		//*  67  139:putfield        #52  <Field boolean mPendingInitialRun>
		//*  68  142:aload           4
		//*  69  144:getfield        #82  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//*  70  147:invokevirtual   #87  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
		//*  71  150:return          
					{
						Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
		//   72  151:ldc1            #89  <String "RecyclerView">
		//   73  153:ldc1            #91  <String "Passed over target position while smooth scrolling.">
		//   74  155:invokestatic    #97  <Method int Log.e(String, String)>
		//   75  158:pop             
						mTargetView = null;
		//   76  159:aload_0         
		//   77  160:aconst_null     
		//   78  161:putfield        #54  <Field View mTargetView>
					}
				if(mRunning)
				{
					onSeekTargetStep(i, j, recyclerview.mState, mRecyclingAction);
					boolean flag = mRecyclingAction.hasJumpTarget();
					mRecyclingAction.runIfNecessary(recyclerview);
					if(flag)
					{
						if(!mRunning)
							break label0;
						mPendingInitialRun = true;
						recyclerview.mViewFlinger.postOnAnimation();
					}
				}
				return;
			}
		//*  79  164:goto            87
			stop();
		//   80  167:aload_0         
		//   81  168:invokevirtual   #50  <Method void stop()>
		//   82  171:return          
		}

		public View findViewByPosition(int i)
		{
			return mRecyclerView.mLayout.findViewByPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:iload_1         
		//    4    8:invokevirtual   #106 <Method View RecyclerView$LayoutManager.findViewByPosition(int)>
		//    5   11:areturn         
		}

		public int getChildCount()
		{
			return mRecyclerView.mLayout.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:invokevirtual   #110 <Method int RecyclerView$LayoutManager.getChildCount()>
		//    4   10:ireturn         
		}

		public int getChildPosition(View view)
		{
			return mRecyclerView.getChildLayoutPosition(view);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #113 <Method int RecyclerView.getChildLayoutPosition(View)>
		//    4    8:ireturn         
		}

		public LayoutManager getLayoutManager()
		{
			return mLayoutManager;
		//    0    0:aload_0         
		//    1    1:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//    2    4:areturn         
		}

		public int getTargetPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #32  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public void instantScrollToPosition(int i)
		{
			mRecyclerView.scrollToPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #126 <Method void RecyclerView.scrollToPosition(int)>
		//    4    8:return          
		}

		public boolean isPendingInitialRun()
		{
			return mPendingInitialRun;
		//    0    0:aload_0         
		//    1    1:getfield        #52  <Field boolean mPendingInitialRun>
		//    2    4:ireturn         
		}

		public boolean isRunning()
		{
			return mRunning;
		//    0    0:aload_0         
		//    1    1:getfield        #47  <Field boolean mRunning>
		//    2    4:ireturn         
		}

		protected void normalize(PointF pointf)
		{
			float f = (float)Math.sqrt(pointf.x * pointf.x + pointf.y * pointf.y);
		//    0    0:aload_1         
		//    1    1:getfield        #137 <Field float PointF.x>
		//    2    4:aload_1         
		//    3    5:getfield        #137 <Field float PointF.x>
		//    4    8:fmul            
		//    5    9:aload_1         
		//    6   10:getfield        #140 <Field float PointF.y>
		//    7   13:aload_1         
		//    8   14:getfield        #140 <Field float PointF.y>
		//    9   17:fmul            
		//   10   18:fadd            
		//   11   19:f2d             
		//   12   20:invokestatic    #146 <Method double Math.sqrt(double)>
		//   13   23:d2f             
		//   14   24:fstore_2        
			pointf.x = pointf.x / f;
		//   15   25:aload_1         
		//   16   26:aload_1         
		//   17   27:getfield        #137 <Field float PointF.x>
		//   18   30:fload_2         
		//   19   31:fdiv            
		//   20   32:putfield        #137 <Field float PointF.x>
			pointf.y = pointf.y / f;
		//   21   35:aload_1         
		//   22   36:aload_1         
		//   23   37:getfield        #140 <Field float PointF.y>
		//   24   40:fload_2         
		//   25   41:fdiv            
		//   26   42:putfield        #140 <Field float PointF.y>
		//   27   45:return          
		}

		protected void onChildAttachedToWindow(View view)
		{
			if(getChildPosition(view) == getTargetPosition())
		//*   0    0:aload_0         
		//*   1    1:aload_1         
		//*   2    2:invokevirtual   #58  <Method int getChildPosition(View)>
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #150 <Method int getTargetPosition()>
		//*   5    9:icmpne          17
				mTargetView = view;
		//    6   12:aload_0         
		//    7   13:aload_1         
		//    8   14:putfield        #54  <Field View mTargetView>
		//    9   17:return          
		}

		protected abstract void onSeekTargetStep(int i, int j, State state, Action action);

		protected abstract void onStart();

		protected abstract void onStop();

		protected abstract void onTargetFound(View view, State state, Action action);

		public void setTargetPosition(int i)
		{
			mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #32  <Field int mTargetPosition>
		//    3    5:return          
		}

		void start(RecyclerView recyclerview, LayoutManager layoutmanager)
		{
			mRecyclerView = recyclerview;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #45  <Field RecyclerView mRecyclerView>
			mLayoutManager = layoutmanager;
		//    3    5:aload_0         
		//    4    6:aload_2         
		//    5    7:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
			if(mTargetPosition == -1)
		//*   6   10:aload_0         
		//*   7   11:getfield        #32  <Field int mTargetPosition>
		//*   8   14:iconst_m1       
		//*   9   15:icmpne          28
			{
				throw new IllegalArgumentException("Invalid target position");
		//   10   18:new             #157 <Class IllegalArgumentException>
		//   11   21:dup             
		//   12   22:ldc1            #159 <String "Invalid target position">
		//   13   24:invokespecial   #162 <Method void IllegalArgumentException(String)>
		//   14   27:athrow          
			} else
			{
				mRecyclerView.mState.mTargetPosition = mTargetPosition;
		//   15   28:aload_0         
		//   16   29:getfield        #45  <Field RecyclerView mRecyclerView>
		//   17   32:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   18   35:aload_0         
		//   19   36:getfield        #32  <Field int mTargetPosition>
		//   20   39:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   21   42:pop             
				mRunning = true;
		//   22   43:aload_0         
		//   23   44:iconst_1        
		//   24   45:putfield        #47  <Field boolean mRunning>
				mPendingInitialRun = true;
		//   25   48:aload_0         
		//   26   49:iconst_1        
		//   27   50:putfield        #52  <Field boolean mPendingInitialRun>
				mTargetView = findViewByPosition(getTargetPosition());
		//   28   53:aload_0         
		//   29   54:aload_0         
		//   30   55:aload_0         
		//   31   56:invokevirtual   #150 <Method int getTargetPosition()>
		//   32   59:invokevirtual   #169 <Method View findViewByPosition(int)>
		//   33   62:putfield        #54  <Field View mTargetView>
				onStart();
		//   34   65:aload_0         
		//   35   66:invokevirtual   #171 <Method void onStart()>
				mRecyclerView.mViewFlinger.postOnAnimation();
		//   36   69:aload_0         
		//   37   70:getfield        #45  <Field RecyclerView mRecyclerView>
		//   38   73:getfield        #82  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   39   76:invokevirtual   #87  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
				return;
		//   40   79:return          
			}
		}

		protected final void stop()
		{
			if(!mRunning)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field boolean mRunning>
		//*   2    4:ifne            8
			{
				return;
		//    3    7:return          
			} else
			{
				onStop();
		//    4    8:aload_0         
		//    5    9:invokevirtual   #173 <Method void onStop()>
				mRecyclerView.mState.mTargetPosition = -1;
		//    6   12:aload_0         
		//    7   13:getfield        #45  <Field RecyclerView mRecyclerView>
		//    8   16:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//    9   19:iconst_m1       
		//   10   20:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   11   23:pop             
				mTargetView = null;
		//   12   24:aload_0         
		//   13   25:aconst_null     
		//   14   26:putfield        #54  <Field View mTargetView>
				mTargetPosition = -1;
		//   15   29:aload_0         
		//   16   30:iconst_m1       
		//   17   31:putfield        #32  <Field int mTargetPosition>
				mPendingInitialRun = false;
		//   18   34:aload_0         
		//   19   35:iconst_0        
		//   20   36:putfield        #52  <Field boolean mPendingInitialRun>
				mRunning = false;
		//   21   39:aload_0         
		//   22   40:iconst_0        
		//   23   41:putfield        #47  <Field boolean mRunning>
				mLayoutManager.onSmoothScrollerStopped(this);
		//   24   44:aload_0         
		//   25   45:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//   26   48:aload_0         
		//   27   49:invokestatic    #177 <Method void RecyclerView$LayoutManager.access$1400(RecyclerView$LayoutManager, RecyclerView$SmoothScroller)>
				mLayoutManager = null;
		//   28   52:aload_0         
		//   29   53:aconst_null     
		//   30   54:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
				mRecyclerView = null;
		//   31   57:aload_0         
		//   32   58:aconst_null     
		//   33   59:putfield        #45  <Field RecyclerView mRecyclerView>
				return;
		//   34   62:return          
			}
		}

		private LayoutManager mLayoutManager;
		private boolean mPendingInitialRun;
		private RecyclerView mRecyclerView;
		private final Action mRecyclingAction = new Action(0, 0);
		private boolean mRunning;
		private int mTargetPosition;
		private View mTargetView;


/*
		static void access$600(SmoothScroller smoothscroller, int i, int j)
		{
			smoothscroller.onAnimation(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #43  <Method void onAnimation(int, int)>
			return;
		//    4    6:return          
		}

*/

		public SmoothScroller()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #30  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #32  <Field int mTargetPosition>
		//    5    9:aload_0         
		//    6   10:new             #9   <Class RecyclerView$SmoothScroller$Action>
		//    7   13:dup             
		//    8   14:iconst_0        
		//    9   15:iconst_0        
		//   10   16:invokespecial   #35  <Method void RecyclerView$SmoothScroller$Action(int, int)>
		//   11   19:putfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   12   22:return          
		}
	}

	public static class SmoothScroller.Action
	{

		private void validate()
		{
			if(mInterpolator != null && mDuration < 1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #46  <Field Interpolator mInterpolator>
		//*   2    4:ifnull          25
		//*   3    7:aload_0         
		//*   4    8:getfield        #44  <Field int mDuration>
		//*   5   11:iconst_1        
		//*   6   12:icmpge          25
				throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
		//    7   15:new             #49  <Class IllegalStateException>
		//    8   18:dup             
		//    9   19:ldc1            #51  <String "If you provide an interpolator, you must set a positive duration">
		//   10   21:invokespecial   #54  <Method void IllegalStateException(String)>
		//   11   24:athrow          
			if(mDuration < 1)
		//*  12   25:aload_0         
		//*  13   26:getfield        #44  <Field int mDuration>
		//*  14   29:iconst_1        
		//*  15   30:icmpge          43
				throw new IllegalStateException("Scroll duration must be a positive number");
		//   16   33:new             #49  <Class IllegalStateException>
		//   17   36:dup             
		//   18   37:ldc1            #56  <String "Scroll duration must be a positive number">
		//   19   39:invokespecial   #54  <Method void IllegalStateException(String)>
		//   20   42:athrow          
			else
				return;
		//   21   43:return          
		}

		public int getDuration()
		{
			return mDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mDuration>
		//    2    4:ireturn         
		}

		public int getDx()
		{
			return mDx;
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field int mDx>
		//    2    4:ireturn         
		}

		public int getDy()
		{
			return mDy;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field int mDy>
		//    2    4:ireturn         
		}

		public Interpolator getInterpolator()
		{
			return mInterpolator;
		//    0    0:aload_0         
		//    1    1:getfield        #46  <Field Interpolator mInterpolator>
		//    2    4:areturn         
		}

		boolean hasJumpTarget()
		{
			return mJumpToPosition >= 0;
		//    0    0:aload_0         
		//    1    1:getfield        #34  <Field int mJumpToPosition>
		//    2    4:iflt            9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		public void jumpTo(int i)
		{
			mJumpToPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #34  <Field int mJumpToPosition>
		//    3    5:return          
		}

		void runIfNecessary(RecyclerView recyclerview)
		{
			if(mJumpToPosition >= 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #34  <Field int mJumpToPosition>
		//*   2    4:iflt            28
			{
				int i = mJumpToPosition;
		//    3    7:aload_0         
		//    4    8:getfield        #34  <Field int mJumpToPosition>
		//    5   11:istore_2        
				mJumpToPosition = -1;
		//    6   12:aload_0         
		//    7   13:iconst_m1       
		//    8   14:putfield        #34  <Field int mJumpToPosition>
				recyclerview.jumpToPositionForSmoothScroller(i);
		//    9   17:aload_1         
		//   10   18:iload_2         
		//   11   19:invokevirtual   #71  <Method void RecyclerView.jumpToPositionForSmoothScroller(int)>
				mChanged = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #36  <Field boolean mChanged>
				return;
		//   15   27:return          
			}
			if(mChanged)
		//*  16   28:aload_0         
		//*  17   29:getfield        #36  <Field boolean mChanged>
		//*  18   32:ifeq            151
			{
				validate();
		//   19   35:aload_0         
		//   20   36:invokespecial   #73  <Method void validate()>
				if(mInterpolator == null)
		//*  21   39:aload_0         
		//*  22   40:getfield        #46  <Field Interpolator mInterpolator>
		//*  23   43:ifnonnull       125
				{
					if(mDuration == 0x80000000)
		//*  24   46:aload_0         
		//*  25   47:getfield        #44  <Field int mDuration>
		//*  26   50:ldc1            #13  <Int 0x80000000>
		//*  27   52:icmpne          103
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy);
		//   28   55:aload_1         
		//   29   56:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   30   59:aload_0         
		//   31   60:getfield        #40  <Field int mDx>
		//   32   63:aload_0         
		//   33   64:getfield        #42  <Field int mDy>
		//   34   67:invokevirtual   #82  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int)>
					else
		//*  35   70:aload_0         
		//*  36   71:aload_0         
		//*  37   72:getfield        #38  <Field int mConsecutiveUpdates>
		//*  38   75:iconst_1        
		//*  39   76:iadd            
		//*  40   77:putfield        #38  <Field int mConsecutiveUpdates>
		//*  41   80:aload_0         
		//*  42   81:getfield        #38  <Field int mConsecutiveUpdates>
		//*  43   84:bipush          10
		//*  44   86:icmple          97
		//*  45   89:ldc1            #84  <String "RecyclerView">
		//*  46   91:ldc1            #86  <String "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary">
		//*  47   93:invokestatic    #92  <Method int Log.e(String, String)>
		//*  48   96:pop             
		//*  49   97:aload_0         
		//*  50   98:iconst_0        
		//*  51   99:putfield        #36  <Field boolean mChanged>
		//*  52  102:return          
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration);
		//   53  103:aload_1         
		//   54  104:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   55  107:aload_0         
		//   56  108:getfield        #40  <Field int mDx>
		//   57  111:aload_0         
		//   58  112:getfield        #42  <Field int mDy>
		//   59  115:aload_0         
		//   60  116:getfield        #44  <Field int mDuration>
		//   61  119:invokevirtual   #94  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int)>
				} else
		//*  62  122:goto            70
				{
					recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration, mInterpolator);
		//   63  125:aload_1         
		//   64  126:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   65  129:aload_0         
		//   66  130:getfield        #40  <Field int mDx>
		//   67  133:aload_0         
		//   68  134:getfield        #42  <Field int mDy>
		//   69  137:aload_0         
		//   70  138:getfield        #44  <Field int mDuration>
		//   71  141:aload_0         
		//   72  142:getfield        #46  <Field Interpolator mInterpolator>
		//   73  145:invokevirtual   #96  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int, Interpolator)>
				}
				mConsecutiveUpdates = mConsecutiveUpdates + 1;
				if(mConsecutiveUpdates > 10)
					Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
				mChanged = false;
				return;
			} else
		//*  74  148:goto            70
			{
				mConsecutiveUpdates = 0;
		//   75  151:aload_0         
		//   76  152:iconst_0        
		//   77  153:putfield        #38  <Field int mConsecutiveUpdates>
				return;
		//   78  156:return          
			}
		}

		public void setDuration(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDuration = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #44  <Field int mDuration>
		//    6   10:return          
		}

		public void setDx(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDx = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #40  <Field int mDx>
		//    6   10:return          
		}

		public void setDy(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDy = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #42  <Field int mDy>
		//    6   10:return          
		}

		public void setInterpolator(Interpolator interpolator)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mInterpolator = interpolator;
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:putfield        #46  <Field Interpolator mInterpolator>
		//    6   10:return          
		}

		public void update(int i, int j, int k, Interpolator interpolator)
		{
			mDx = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #40  <Field int mDx>
			mDy = j;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #42  <Field int mDy>
			mDuration = k;
		//    6   10:aload_0         
		//    7   11:iload_3         
		//    8   12:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//    9   15:aload_0         
		//   10   16:aload           4
		//   11   18:putfield        #46  <Field Interpolator mInterpolator>
			mChanged = true;
		//   12   21:aload_0         
		//   13   22:iconst_1        
		//   14   23:putfield        #36  <Field boolean mChanged>
		//   15   26:return          
		}

		public static final int UNDEFINED_DURATION = 0x80000000;
		private boolean mChanged;
		private int mConsecutiveUpdates;
		private int mDuration;
		private int mDx;
		private int mDy;
		private Interpolator mInterpolator;
		private int mJumpToPosition;

		public SmoothScroller.Action(int i, int j)
		{
			this(i, j, 0x80000000, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc1            #13  <Int 0x80000000>
		//    4    5:aconst_null     
		//    5    6:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    9:return          
		}

		public SmoothScroller.Action(int i, int j, int k)
		{
			this(i, j, k, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:aconst_null     
		//    5    5:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    8:return          
		}

		public SmoothScroller.Action(int i, int j, int k, Interpolator interpolator)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #32  <Method void Object()>
			mJumpToPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #34  <Field int mJumpToPosition>
			mChanged = false;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #36  <Field boolean mChanged>
			mConsecutiveUpdates = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #38  <Field int mConsecutiveUpdates>
			mDx = i;
		//   11   19:aload_0         
		//   12   20:iload_1         
		//   13   21:putfield        #40  <Field int mDx>
			mDy = j;
		//   14   24:aload_0         
		//   15   25:iload_2         
		//   16   26:putfield        #42  <Field int mDy>
			mDuration = k;
		//   17   29:aload_0         
		//   18   30:iload_3         
		//   19   31:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//   20   34:aload_0         
		//   21   35:aload           4
		//   22   37:putfield        #46  <Field Interpolator mInterpolator>
		//   23   40:return          
		}
	}

	public static interface SmoothScroller.ScrollVectorProvider
	{

		public abstract PointF computeScrollVectorForPosition(int i);
	}

	public static class State
	{

		void assertLayoutStep(int i)
		{
			if((mLayoutStep & i) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #50  <Field int mLayoutStep>
		//*   2    4:iload_1         
		//*   3    5:iand            
		//*   4    6:ifne            54
				throw new IllegalStateException((new StringBuilder()).append("Layout state should be one of ").append(Integer.toBinaryString(i)).append(" but it is ").append(Integer.toBinaryString(mLayoutStep)).toString());
		//    5    9:new             #71  <Class IllegalStateException>
		//    6   12:dup             
		//    7   13:new             #73  <Class StringBuilder>
		//    8   16:dup             
		//    9   17:invokespecial   #74  <Method void StringBuilder()>
		//   10   20:ldc1            #76  <String "Layout state should be one of ">
		//   11   22:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   12   25:iload_1         
		//   13   26:invokestatic    #86  <Method String Integer.toBinaryString(int)>
		//   14   29:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   15   32:ldc1            #88  <String " but it is ">
		//   16   34:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   17   37:aload_0         
		//   18   38:getfield        #50  <Field int mLayoutStep>
		//   19   41:invokestatic    #86  <Method String Integer.toBinaryString(int)>
		//   20   44:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   21   47:invokevirtual   #92  <Method String StringBuilder.toString()>
		//   22   50:invokespecial   #95  <Method void IllegalStateException(String)>
		//   23   53:athrow          
			else
				return;
		//   24   54:return          
		}

		public boolean didStructureChange()
		{
			return mStructureChanged;
		//    0    0:aload_0         
		//    1    1:getfield        #54  <Field boolean mStructureChanged>
		//    2    4:ireturn         
		}

		public Object get(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       9
				return ((Object) (null));
		//    3    7:aconst_null     
		//    4    8:areturn         
			else
				return mData.get(i);
		//    5    9:aload_0         
		//    6   10:getfield        #101 <Field SparseArray mData>
		//    7   13:iload_1         
		//    8   14:invokevirtual   #105 <Method Object SparseArray.get(int)>
		//    9   17:areturn         
		}

		public int getItemCount()
		{
			if(mInPreLayout)
		//*   0    0:aload_0         
		//*   1    1:getfield        #56  <Field boolean mInPreLayout>
		//*   2    4:ifeq            17
				return mPreviousLayoutItemCount - mDeletedInvisibleItemCountSincePreviousLayout;
		//    3    7:aload_0         
		//    4    8:getfield        #46  <Field int mPreviousLayoutItemCount>
		//    5   11:aload_0         
		//    6   12:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//    7   15:isub            
		//    8   16:ireturn         
			else
				return mItemCount;
		//    9   17:aload_0         
		//   10   18:getfield        #52  <Field int mItemCount>
		//   11   21:ireturn         
		}

		public int getRemainingScrollHorizontal()
		{
			return mRemainingScrollHorizontal;
		//    0    0:aload_0         
		//    1    1:getfield        #112 <Field int mRemainingScrollHorizontal>
		//    2    4:ireturn         
		}

		public int getRemainingScrollVertical()
		{
			return mRemainingScrollVertical;
		//    0    0:aload_0         
		//    1    1:getfield        #115 <Field int mRemainingScrollVertical>
		//    2    4:ireturn         
		}

		public int getTargetScrollPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean hasTargetScrollPosition()
		{
			return mTargetPosition != -1;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:iconst_m1       
		//    3    5:icmpeq          10
		//    4    8:iconst_1        
		//    5    9:ireturn         
		//    6   10:iconst_0        
		//    7   11:ireturn         
		}

		public boolean isMeasuring()
		{
			return mIsMeasuring;
		//    0    0:aload_0         
		//    1    1:getfield        #60  <Field boolean mIsMeasuring>
		//    2    4:ireturn         
		}

		public boolean isPreLayout()
		{
			return mInPreLayout;
		//    0    0:aload_0         
		//    1    1:getfield        #56  <Field boolean mInPreLayout>
		//    2    4:ireturn         
		}

		void prepareForNestedPrefetch(Adapter adapter)
		{
			mLayoutStep = 1;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #50  <Field int mLayoutStep>
			mItemCount = adapter.getItemCount();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #125 <Method int RecyclerView$Adapter.getItemCount()>
		//    6   10:putfield        #52  <Field int mItemCount>
			mInPreLayout = false;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   10   18:aload_0         
		//   11   19:iconst_0        
		//   12   20:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   13   23:aload_0         
		//   14   24:iconst_0        
		//   15   25:putfield        #60  <Field boolean mIsMeasuring>
		//   16   28:return          
		}

		public void put(int i, Object obj)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       18
				mData = new SparseArray();
		//    3    7:aload_0         
		//    4    8:new             #103 <Class SparseArray>
		//    5   11:dup             
		//    6   12:invokespecial   #128 <Method void SparseArray()>
		//    7   15:putfield        #101 <Field SparseArray mData>
			mData.put(i, obj);
		//    8   18:aload_0         
		//    9   19:getfield        #101 <Field SparseArray mData>
		//   10   22:iload_1         
		//   11   23:aload_2         
		//   12   24:invokevirtual   #130 <Method void SparseArray.put(int, Object)>
		//   13   27:return          
		}

		public void remove(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       8
			{
				return;
		//    3    7:return          
			} else
			{
				mData.remove(i);
		//    4    8:aload_0         
		//    5    9:getfield        #101 <Field SparseArray mData>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #133 <Method void SparseArray.remove(int)>
				return;
		//    8   16:return          
			}
		}

		State reset()
		{
			mTargetPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #44  <Field int mTargetPosition>
			if(mData != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #101 <Field SparseArray mData>
		//*   5    9:ifnull          19
				mData.clear();
		//    6   12:aload_0         
		//    7   13:getfield        #101 <Field SparseArray mData>
		//    8   16:invokevirtual   #138 <Method void SparseArray.clear()>
			mItemCount = 0;
		//    9   19:aload_0         
		//   10   20:iconst_0        
		//   11   21:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   12   24:aload_0         
		//   13   25:iconst_0        
		//   14   26:putfield        #54  <Field boolean mStructureChanged>
			mIsMeasuring = false;
		//   15   29:aload_0         
		//   16   30:iconst_0        
		//   17   31:putfield        #60  <Field boolean mIsMeasuring>
			return this;
		//   18   34:aload_0         
		//   19   35:areturn         
		}

		public String toString()
		{
			return (new StringBuilder()).append("State{mTargetPosition=").append(mTargetPosition).append(", mData=").append(((Object) (mData))).append(", mItemCount=").append(mItemCount).append(", mPreviousLayoutItemCount=").append(mPreviousLayoutItemCount).append(", mDeletedInvisibleItemCountSincePreviousLayout=").append(mDeletedInvisibleItemCountSincePreviousLayout).append(", mStructureChanged=").append(mStructureChanged).append(", mInPreLayout=").append(mInPreLayout).append(", mRunSimpleAnimations=").append(mRunSimpleAnimations).append(", mRunPredictiveAnimations=").append(mRunPredictiveAnimations).append('}').toString();
		//    0    0:new             #73  <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #74  <Method void StringBuilder()>
		//    3    7:ldc1            #140 <String "State{mTargetPosition=">
		//    4    9:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//    5   12:aload_0         
		//    6   13:getfield        #44  <Field int mTargetPosition>
		//    7   16:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//    8   19:ldc1            #145 <String ", mData=">
		//    9   21:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   10   24:aload_0         
		//   11   25:getfield        #101 <Field SparseArray mData>
		//   12   28:invokevirtual   #148 <Method StringBuilder StringBuilder.append(Object)>
		//   13   31:ldc1            #150 <String ", mItemCount=">
		//   14   33:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   15   36:aload_0         
		//   16   37:getfield        #52  <Field int mItemCount>
		//   17   40:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   18   43:ldc1            #152 <String ", mPreviousLayoutItemCount=">
		//   19   45:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   20   48:aload_0         
		//   21   49:getfield        #46  <Field int mPreviousLayoutItemCount>
		//   22   52:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   23   55:ldc1            #154 <String ", mDeletedInvisibleItemCountSincePreviousLayout=">
		//   24   57:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   25   60:aload_0         
		//   26   61:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//   27   64:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   28   67:ldc1            #156 <String ", mStructureChanged=">
		//   29   69:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   30   72:aload_0         
		//   31   73:getfield        #54  <Field boolean mStructureChanged>
		//   32   76:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   33   79:ldc1            #161 <String ", mInPreLayout=">
		//   34   81:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   35   84:aload_0         
		//   36   85:getfield        #56  <Field boolean mInPreLayout>
		//   37   88:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   38   91:ldc1            #163 <String ", mRunSimpleAnimations=">
		//   39   93:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   40   96:aload_0         
		//   41   97:getfield        #62  <Field boolean mRunSimpleAnimations>
		//   42  100:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   43  103:ldc1            #165 <String ", mRunPredictiveAnimations=">
		//   44  105:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   45  108:aload_0         
		//   46  109:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//   47  112:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   48  115:bipush          125
		//   49  117:invokevirtual   #168 <Method StringBuilder StringBuilder.append(char)>
		//   50  120:invokevirtual   #92  <Method String StringBuilder.toString()>
		//   51  123:areturn         
		}

		public boolean willRunPredictiveAnimations()
		{
			return mRunPredictiveAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//    2    4:ireturn         
		}

		public boolean willRunSimpleAnimations()
		{
			return mRunSimpleAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #62  <Field boolean mRunSimpleAnimations>
		//    2    4:ireturn         
		}

		static final int STEP_ANIMATIONS = 4;
		static final int STEP_LAYOUT = 2;
		static final int STEP_START = 1;
		private SparseArray mData;
		int mDeletedInvisibleItemCountSincePreviousLayout;
		long mFocusedItemId;
		int mFocusedItemPosition;
		int mFocusedSubChildId;
		boolean mInPreLayout;
		boolean mIsMeasuring;
		int mItemCount;
		int mLayoutStep;
		int mPreviousLayoutItemCount;
		int mRemainingScrollHorizontal;
		int mRemainingScrollVertical;
		boolean mRunPredictiveAnimations;
		boolean mRunSimpleAnimations;
		boolean mStructureChanged;
		private int mTargetPosition;
		boolean mTrackOldChangeHolders;


/*
		static int access$1302(State state, int i)
		{
			state.mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #44  <Field int mTargetPosition>
			return i;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/

		public State()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #42  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #44  <Field int mTargetPosition>
			mPreviousLayoutItemCount = 0;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #46  <Field int mPreviousLayoutItemCount>
			mDeletedInvisibleItemCountSincePreviousLayout = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
			mLayoutStep = 1;
		//   11   19:aload_0         
		//   12   20:iconst_1        
		//   13   21:putfield        #50  <Field int mLayoutStep>
			mItemCount = 0;
		//   14   24:aload_0         
		//   15   25:iconst_0        
		//   16   26:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   17   29:aload_0         
		//   18   30:iconst_0        
		//   19   31:putfield        #54  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   20   34:aload_0         
		//   21   35:iconst_0        
		//   22   36:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   23   39:aload_0         
		//   24   40:iconst_0        
		//   25   41:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   26   44:aload_0         
		//   27   45:iconst_0        
		//   28   46:putfield        #60  <Field boolean mIsMeasuring>
			mRunSimpleAnimations = false;
		//   29   49:aload_0         
		//   30   50:iconst_0        
		//   31   51:putfield        #62  <Field boolean mRunSimpleAnimations>
			mRunPredictiveAnimations = false;
		//   32   54:aload_0         
		//   33   55:iconst_0        
		//   34   56:putfield        #64  <Field boolean mRunPredictiveAnimations>
		//   35   59:return          
		}
	}

	static interface State.LayoutState
		extends Annotation
	{
	}

	public static abstract class ViewCacheExtension
	{

		public abstract View getViewForPositionAndType(Recycler recycler, int i, int j);

		public ViewCacheExtension()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	class ViewFlinger
		implements Runnable
	{

		private int computeScrollDuration(int i, int j, int k, int l)
		{
			int i1 = Math.abs(i);
		//    0    0:iload_1         
		//    1    1:invokestatic    #59  <Method int Math.abs(int)>
		//    2    4:istore          9
			int j1 = Math.abs(j);
		//    3    6:iload_2         
		//    4    7:invokestatic    #59  <Method int Math.abs(int)>
		//    5   10:istore          10
			float f;
			float f1;
			float f2;
			boolean flag;
			if(i1 > j1)
		//*   6   12:iload           9
		//*   7   14:iload           10
		//*   8   16:icmple          134
				flag = true;
		//    9   19:iconst_1        
		//   10   20:istore          8
			else
		//*  11   22:iload_3         
		//*  12   23:iload_3         
		//*  13   24:imul            
		//*  14   25:iload           4
		//*  15   27:iload           4
		//*  16   29:imul            
		//*  17   30:iadd            
		//*  18   31:i2d             
		//*  19   32:invokestatic    #63  <Method double Math.sqrt(double)>
		//*  20   35:d2i             
		//*  21   36:istore_3        
		//*  22   37:iload_1         
		//*  23   38:iload_1         
		//*  24   39:imul            
		//*  25   40:iload_2         
		//*  26   41:iload_2         
		//*  27   42:imul            
		//*  28   43:iadd            
		//*  29   44:i2d             
		//*  30   45:invokestatic    #63  <Method double Math.sqrt(double)>
		//*  31   48:d2i             
		//*  32   49:istore_2        
		//*  33   50:iload           8
		//*  34   52:ifeq            140
		//*  35   55:aload_0         
		//*  36   56:getfield        #25  <Field RecyclerView this$0>
		//*  37   59:invokevirtual   #67  <Method int RecyclerView.getWidth()>
		//*  38   62:istore_1        
		//*  39   63:iload_1         
		//*  40   64:iconst_2        
		//*  41   65:idiv            
		//*  42   66:istore          4
		//*  43   68:fconst_1        
		//*  44   69:iload_2         
		//*  45   70:i2f             
		//*  46   71:fconst_1        
		//*  47   72:fmul            
		//*  48   73:iload_1         
		//*  49   74:i2f             
		//*  50   75:fdiv            
		//*  51   76:invokestatic    #71  <Method float Math.min(float, float)>
		//*  52   79:fstore          7
		//*  53   81:iload           4
		//*  54   83:i2f             
		//*  55   84:fstore          5
		//*  56   86:iload           4
		//*  57   88:i2f             
		//*  58   89:fstore          6
		//*  59   91:aload_0         
		//*  60   92:fload           7
		//*  61   94:invokespecial   #75  <Method float distanceInfluenceForSnapDuration(float)>
		//*  62   97:fstore          7
		//*  63   99:iload_3         
		//*  64  100:ifle            151
		//*  65  103:ldc1            #76  <Float 1000F>
		//*  66  105:fload           7
		//*  67  107:fload           6
		//*  68  109:fmul            
		//*  69  110:fload           5
		//*  70  112:fadd            
		//*  71  113:iload_3         
		//*  72  114:i2f             
		//*  73  115:fdiv            
		//*  74  116:invokestatic    #78  <Method float Math.abs(float)>
		//*  75  119:fmul            
		//*  76  120:invokestatic    #82  <Method int Math.round(float)>
		//*  77  123:iconst_4        
		//*  78  124:imul            
		//*  79  125:istore_1        
		//*  80  126:iload_1         
		//*  81  127:sipush          2000
		//*  82  130:invokestatic    #85  <Method int Math.min(int, int)>
		//*  83  133:ireturn         
				flag = false;
		//   84  134:iconst_0        
		//   85  135:istore          8
			k = (int)Math.sqrt(k * k + l * l);
			j = (int)Math.sqrt(i * i + j * j);
			if(flag)
				i = getWidth();
			else
		//*  86  137:goto            22
				i = getHeight();
		//   87  140:aload_0         
		//   88  141:getfield        #25  <Field RecyclerView this$0>
		//   89  144:invokevirtual   #88  <Method int RecyclerView.getHeight()>
		//   90  147:istore_1        
			l = i / 2;
			f2 = Math.min(1.0F, ((float)j * 1.0F) / (float)i);
			f = l;
			f1 = l;
			f2 = distanceInfluenceForSnapDuration(f2);
			if(k > 0)
			{
				i = Math.round(1000F * Math.abs((f2 * f1 + f) / (float)k)) * 4;
			} else
		//*  91  148:goto            63
			{
				if(flag)
		//*  92  151:iload           8
		//*  93  153:ifeq            174
					j = i1;
		//   94  156:iload           9
		//   95  158:istore_2        
				else
		//*  96  159:iload_2         
		//*  97  160:i2f             
		//*  98  161:iload_1         
		//*  99  162:i2f             
		//* 100  163:fdiv            
		//* 101  164:fconst_1        
		//* 102  165:fadd            
		//* 103  166:ldc1            #89  <Float 300F>
		//* 104  168:fmul            
		//* 105  169:f2i             
		//* 106  170:istore_1        
		//* 107  171:goto            126
					j = j1;
		//  108  174:iload           10
		//  109  176:istore_2        
				i = (int)(((float)j / (float)i + 1.0F) * 300F);
			}
			return Math.min(i, 2000);
		//* 110  177:goto            159
		}

		private void disableRunOnAnimationRequests()
		{
			mReSchedulePostAnimationCallback = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mEatRunOnAnimationRequest = true;
		//    3    5:aload_0         
		//    4    6:iconst_1        
		//    5    7:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//    6   10:return          
		}

		private float distanceInfluenceForSnapDuration(float f)
		{
			return (float)Math.sin((f - 0.5F) * 0.4712389F);
		//    0    0:fload_1         
		//    1    1:ldc1            #91  <Float 0.5F>
		//    2    3:fsub            
		//    3    4:ldc1            #92  <Float 0.4712389F>
		//    4    6:fmul            
		//    5    7:f2d             
		//    6    8:invokestatic    #95  <Method double Math.sin(double)>
		//    7   11:d2f             
		//    8   12:freturn         
		}

		private void enableRunOnAnimationRequests()
		{
			mEatRunOnAnimationRequest = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			if(mReSchedulePostAnimationCallback)
		//*   3    5:aload_0         
		//*   4    6:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//*   5    9:ifeq            16
				postOnAnimation();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #99  <Method void postOnAnimation()>
		//    8   16:return          
		}

		public void fling(int i, int j)
		{
			setScrollState(2);
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:iconst_2        
		//    3    5:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #109 <Field int mLastFlingX>
			mScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
		//   10   18:aload_0         
		//   11   19:getfield        #48  <Field OverScroller mScroller>
		//   12   22:iconst_0        
		//   13   23:iconst_0        
		//   14   24:iload_1         
		//   15   25:iload_2         
		//   16   26:ldc1            #110 <Int 0x80000000>
		//   17   28:ldc1            #111 <Int 0x7fffffff>
		//   18   30:ldc1            #110 <Int 0x80000000>
		//   19   32:ldc1            #111 <Int 0x7fffffff>
		//   20   34:invokevirtual   #114 <Method void OverScroller.fling(int, int, int, int, int, int, int, int)>
			postOnAnimation();
		//   21   37:aload_0         
		//   22   38:invokevirtual   #99  <Method void postOnAnimation()>
		//   23   41:return          
		}

		void postOnAnimation()
		{
			if(mEatRunOnAnimationRequest)
		//*   0    0:aload_0         
		//*   1    1:getfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//*   2    4:ifeq            13
			{
				mReSchedulePostAnimationCallback = true;
		//    3    7:aload_0         
		//    4    8:iconst_1        
		//    5    9:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
				return;
		//    6   12:return          
			} else
			{
				removeCallbacks(((Runnable) (this)));
		//    7   13:aload_0         
		//    8   14:getfield        #25  <Field RecyclerView this$0>
		//    9   17:aload_0         
		//   10   18:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//   11   21:pop             
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), ((Runnable) (this)));
		//   12   22:aload_0         
		//   13   23:getfield        #25  <Field RecyclerView this$0>
		//   14   26:aload_0         
		//   15   27:invokestatic    #123 <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   30:return          
			}
		}

		public void run()
		{
			OverScroller overscroller;
			SmoothScroller smoothscroller;
			if(mLayout == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #25  <Field RecyclerView this$0>
		//*   2    4:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnonnull       15
			{
				stop();
		//    4   10:aload_0         
		//    5   11:invokevirtual   #131 <Method void stop()>
				return;
		//    6   14:return          
			}
			disableRunOnAnimationRequests();
		//    7   15:aload_0         
		//    8   16:invokespecial   #133 <Method void disableRunOnAnimationRequests()>
			consumePendingUpdateOperations();
		//    9   19:aload_0         
		//   10   20:getfield        #25  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #136 <Method void RecyclerView.consumePendingUpdateOperations()>
			overscroller = mScroller;
		//   12   26:aload_0         
		//   13   27:getfield        #48  <Field OverScroller mScroller>
		//   14   30:astore          12
			smoothscroller = mLayout.mSmoothScroller;
		//   15   32:aload_0         
		//   16   33:getfield        #25  <Field RecyclerView this$0>
		//   17   36:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   18   39:getfield        #142 <Field RecyclerView$SmoothScroller RecyclerView$LayoutManager.mSmoothScroller>
		//   19   42:astore          13
			if(!overscroller.computeScrollOffset()) goto _L2; else goto _L1
		//   20   44:aload           12
		//   21   46:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   22   49:ifeq            672
_L1:
			int j1;
			int k1;
			int k2;
			int l2;
			int ai[] = mScrollConsumed;
		//   23   52:aload_0         
		//   24   53:getfield        #25  <Field RecyclerView this$0>
		//   25   56:invokestatic    #150 <Method int[] RecyclerView.access$500(RecyclerView)>
		//   26   59:astore          14
			k2 = overscroller.getCurrX();
		//   27   61:aload           12
		//   28   63:invokevirtual   #153 <Method int OverScroller.getCurrX()>
		//   29   66:istore          10
			l2 = overscroller.getCurrY();
		//   30   68:aload           12
		//   31   70:invokevirtual   #156 <Method int OverScroller.getCurrY()>
		//   32   73:istore          11
			k1 = k2 - mLastFlingX;
		//   33   75:iload           10
		//   34   77:aload_0         
		//   35   78:getfield        #109 <Field int mLastFlingX>
		//   36   81:isub            
		//   37   82:istore          6
			j1 = l2 - mLastFlingY;
		//   38   84:iload           11
		//   39   86:aload_0         
		//   40   87:getfield        #107 <Field int mLastFlingY>
		//   41   90:isub            
		//   42   91:istore          5
			mLastFlingX = k2;
		//   43   93:aload_0         
		//   44   94:iload           10
		//   45   96:putfield        #109 <Field int mLastFlingX>
			mLastFlingY = l2;
		//   46   99:aload_0         
		//   47  100:iload           11
		//   48  102:putfield        #107 <Field int mLastFlingY>
			if(dispatchNestedPreScroll(k1, j1, ai, ((int []) (null)), 1))
		//*  49  105:aload_0         
		//*  50  106:getfield        #25  <Field RecyclerView this$0>
		//*  51  109:iload           6
		//*  52  111:iload           5
		//*  53  113:aload           14
		//*  54  115:aconst_null     
		//*  55  116:iconst_1        
		//*  56  117:invokevirtual   #160 <Method boolean RecyclerView.dispatchNestedPreScroll(int, int, int[], int[], int)>
		//*  57  120:ifeq            891
			{
				int i = ai[0];
		//   58  123:aload           14
		//   59  125:iconst_0        
		//   60  126:iaload          
		//   61  127:istore_1        
				j1 -= ai[1];
		//   62  128:iload           5
		//   63  130:aload           14
		//   64  132:iconst_1        
		//   65  133:iaload          
		//   66  134:isub            
		//   67  135:istore          5
				k1 -= i;
		//   68  137:iload           6
		//   69  139:iload_1         
		//   70  140:isub            
		//   71  141:istore          6
			}
			if(mAdapter == null) goto _L4; else goto _L3
		//   72  143:aload_0         
		//   73  144:getfield        #25  <Field RecyclerView this$0>
		//   74  147:getfield        #164 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   75  150:ifnull          879
_L3:
			int j;
			int k;
			int l;
			int l1;
			eatRequestLayout();
		//   76  153:aload_0         
		//   77  154:getfield        #25  <Field RecyclerView this$0>
		//   78  157:invokevirtual   #167 <Method void RecyclerView.eatRequestLayout()>
			onEnterLayoutOrScroll();
		//   79  160:aload_0         
		//   80  161:getfield        #25  <Field RecyclerView this$0>
		//   81  164:invokevirtual   #170 <Method void RecyclerView.onEnterLayoutOrScroll()>
			TraceCompat.beginSection("RV Scroll");
		//   82  167:ldc1            #172 <String "RV Scroll">
		//   83  169:invokestatic    #178 <Method void TraceCompat.beginSection(String)>
			fillRemainingScrollValues(mState);
		//   84  172:aload_0         
		//   85  173:getfield        #25  <Field RecyclerView this$0>
		//   86  176:aload_0         
		//   87  177:getfield        #25  <Field RecyclerView this$0>
		//   88  180:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//   89  183:invokevirtual   #186 <Method void RecyclerView.fillRemainingScrollValues(RecyclerView$State)>
			int i1;
			int i2;
			int j2;
			if(k1 != 0)
		//*  90  186:iload           6
		//*  91  188:ifeq            871
			{
				j = mLayout.scrollHorizontallyBy(k1, mRecycler, mState);
		//   92  191:aload_0         
		//   93  192:getfield        #25  <Field RecyclerView this$0>
		//   94  195:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   95  198:iload           6
		//   96  200:aload_0         
		//   97  201:getfield        #25  <Field RecyclerView this$0>
		//   98  204:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   99  207:aload_0         
		//  100  208:getfield        #25  <Field RecyclerView this$0>
		//  101  211:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  102  214:invokevirtual   #194 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//  103  217:istore_1        
				i1 = k1 - j;
		//  104  218:iload           6
		//  105  220:iload_1         
		//  106  221:isub            
		//  107  222:istore          4
			} else
		//* 108  224:iload           5
		//* 109  226:ifeq            864
		//* 110  229:aload_0         
		//* 111  230:getfield        #25  <Field RecyclerView this$0>
		//* 112  233:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 113  236:iload           5
		//* 114  238:aload_0         
		//* 115  239:getfield        #25  <Field RecyclerView this$0>
		//* 116  242:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//* 117  245:aload_0         
		//* 118  246:getfield        #25  <Field RecyclerView this$0>
		//* 119  249:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//* 120  252:invokevirtual   #197 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//* 121  255:istore_2        
		//* 122  256:iload           5
		//* 123  258:iload_2         
		//* 124  259:isub            
		//* 125  260:istore_3        
		//* 126  261:invokestatic    #200 <Method void TraceCompat.endSection()>
		//* 127  264:aload_0         
		//* 128  265:getfield        #25  <Field RecyclerView this$0>
		//* 129  268:invokevirtual   #203 <Method void RecyclerView.repositionShadowingViews()>
		//* 130  271:aload_0         
		//* 131  272:getfield        #25  <Field RecyclerView this$0>
		//* 132  275:invokevirtual   #206 <Method void RecyclerView.onExitLayoutOrScroll()>
		//* 133  278:aload_0         
		//* 134  279:getfield        #25  <Field RecyclerView this$0>
		//* 135  282:iconst_0        
		//* 136  283:invokevirtual   #210 <Method void RecyclerView.resumeRequestLayout(boolean)>
		//* 137  286:aload           13
		//* 138  288:ifnull          763
		//* 139  291:aload           13
		//* 140  293:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 141  296:ifne            763
		//* 142  299:aload           13
		//* 143  301:invokevirtual   #218 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 144  304:ifeq            763
		//* 145  307:aload_0         
		//* 146  308:getfield        #25  <Field RecyclerView this$0>
		//* 147  311:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//* 148  314:invokevirtual   #223 <Method int RecyclerView$State.getItemCount()>
		//* 149  317:istore          7
		//* 150  319:iload           7
		//* 151  321:ifne            709
		//* 152  324:aload           13
		//* 153  326:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
		//* 154  329:iload           4
		//* 155  331:istore          7
		//* 156  333:aload_0         
		//* 157  334:getfield        #25  <Field RecyclerView this$0>
		//* 158  337:getfield        #228 <Field ArrayList RecyclerView.mItemDecorations>
		//* 159  340:invokevirtual   #233 <Method boolean ArrayList.isEmpty()>
		//* 160  343:ifne            353
		//* 161  346:aload_0         
		//* 162  347:getfield        #25  <Field RecyclerView this$0>
		//* 163  350:invokevirtual   #236 <Method void RecyclerView.invalidate()>
		//* 164  353:aload_0         
		//* 165  354:getfield        #25  <Field RecyclerView this$0>
		//* 166  357:invokevirtual   #239 <Method int RecyclerView.getOverScrollMode()>
		//* 167  360:iconst_2        
		//* 168  361:icmpeq          375
		//* 169  364:aload_0         
		//* 170  365:getfield        #25  <Field RecyclerView this$0>
		//* 171  368:iload           6
		//* 172  370:iload           5
		//* 173  372:invokevirtual   #242 <Method void RecyclerView.considerReleasingGlowsOnScroll(int, int)>
		//* 174  375:aload_0         
		//* 175  376:getfield        #25  <Field RecyclerView this$0>
		//* 176  379:iload_1         
		//* 177  380:iload_2         
		//* 178  381:iload           7
		//* 179  383:iload_3         
		//* 180  384:aconst_null     
		//* 181  385:iconst_1        
		//* 182  386:invokevirtual   #246 <Method boolean RecyclerView.dispatchNestedScroll(int, int, int, int, int[], int)>
		//* 183  389:ifne            511
		//* 184  392:iload           7
		//* 185  394:ifne            401
		//* 186  397:iload_3         
		//* 187  398:ifeq            511
		//* 188  401:aload           12
		//* 189  403:invokevirtual   #250 <Method float OverScroller.getCurrVelocity()>
		//* 190  406:f2i             
		//* 191  407:istore          8
		//* 192  409:iload           7
		//* 193  411:iload           10
		//* 194  413:icmpeq          858
		//* 195  416:iload           7
		//* 196  418:ifge            770
		//* 197  421:iload           8
		//* 198  423:ineg            
		//* 199  424:istore          4
		//* 200  426:iload           4
		//* 201  428:istore          9
		//* 202  430:iload_3         
		//* 203  431:iload           11
		//* 204  433:icmpeq          852
		//* 205  436:iload_3         
		//* 206  437:ifge            788
		//* 207  440:iload           8
		//* 208  442:ineg            
		//* 209  443:istore          4
		//* 210  445:aload_0         
		//* 211  446:getfield        #25  <Field RecyclerView this$0>
		//* 212  449:invokevirtual   #239 <Method int RecyclerView.getOverScrollMode()>
		//* 213  452:iconst_2        
		//* 214  453:icmpeq          467
		//* 215  456:aload_0         
		//* 216  457:getfield        #25  <Field RecyclerView this$0>
		//* 217  460:iload           9
		//* 218  462:iload           4
		//* 219  464:invokevirtual   #253 <Method void RecyclerView.absorbGlows(int, int)>
		//* 220  467:iload           9
		//* 221  469:ifne            487
		//* 222  472:iload           7
		//* 223  474:iload           10
		//* 224  476:icmpeq          487
		//* 225  479:aload           12
		//* 226  481:invokevirtual   #256 <Method int OverScroller.getFinalX()>
		//* 227  484:ifne            511
		//* 228  487:iload           4
		//* 229  489:ifne            506
		//* 230  492:iload_3         
		//* 231  493:iload           11
		//* 232  495:icmpeq          506
		//* 233  498:aload           12
		//* 234  500:invokevirtual   #259 <Method int OverScroller.getFinalY()>
		//* 235  503:ifne            511
		//* 236  506:aload           12
		//* 237  508:invokevirtual   #262 <Method void OverScroller.abortAnimation()>
		//* 238  511:iload_1         
		//* 239  512:ifne            519
		//* 240  515:iload_2         
		//* 241  516:ifeq            528
		//* 242  519:aload_0         
		//* 243  520:getfield        #25  <Field RecyclerView this$0>
		//* 244  523:iload_1         
		//* 245  524:iload_2         
		//* 246  525:invokevirtual   #265 <Method void RecyclerView.dispatchOnScrolled(int, int)>
		//* 247  528:aload_0         
		//* 248  529:getfield        #25  <Field RecyclerView this$0>
		//* 249  532:invokestatic    #269 <Method boolean RecyclerView.access$700(RecyclerView)>
		//* 250  535:ifne            545
		//* 251  538:aload_0         
		//* 252  539:getfield        #25  <Field RecyclerView this$0>
		//* 253  542:invokevirtual   #236 <Method void RecyclerView.invalidate()>
		//* 254  545:iload           5
		//* 255  547:ifeq            802
		//* 256  550:aload_0         
		//* 257  551:getfield        #25  <Field RecyclerView this$0>
		//* 258  554:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 259  557:invokevirtual   #272 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
		//* 260  560:ifeq            802
		//* 261  563:iload_2         
		//* 262  564:iload           5
		//* 263  566:icmpne          802
		//* 264  569:iconst_1        
		//* 265  570:istore_2        
		//* 266  571:iload           6
		//* 267  573:ifeq            807
		//* 268  576:aload_0         
		//* 269  577:getfield        #25  <Field RecyclerView this$0>
		//* 270  580:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 271  583:invokevirtual   #275 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
		//* 272  586:ifeq            807
		//* 273  589:iload_1         
		//* 274  590:iload           6
		//* 275  592:icmpne          807
		//* 276  595:iconst_1        
		//* 277  596:istore_1        
		//* 278  597:iload           6
		//* 279  599:ifne            607
		//* 280  602:iload           5
		//* 281  604:ifeq            615
		//* 282  607:iload_1         
		//* 283  608:ifne            615
		//* 284  611:iload_2         
		//* 285  612:ifeq            812
		//* 286  615:iconst_1        
		//* 287  616:istore_1        
		//* 288  617:aload           12
		//* 289  619:invokevirtual   #278 <Method boolean OverScroller.isFinished()>
		//* 290  622:ifne            640
		//* 291  625:iload_1         
		//* 292  626:ifne            817
		//* 293  629:aload_0         
		//* 294  630:getfield        #25  <Field RecyclerView this$0>
		//* 295  633:iconst_1        
		//* 296  634:invokevirtual   #282 <Method boolean RecyclerView.hasNestedScrollingParent(int)>
		//* 297  637:ifne            817
		//* 298  640:aload_0         
		//* 299  641:getfield        #25  <Field RecyclerView this$0>
		//* 300  644:iconst_0        
		//* 301  645:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
		//* 302  648:invokestatic    #285 <Method boolean RecyclerView.access$800()>
		//* 303  651:ifeq            664
		//* 304  654:aload_0         
		//* 305  655:getfield        #25  <Field RecyclerView this$0>
		//* 306  658:getfield        #289 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 307  661:invokevirtual   #294 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//* 308  664:aload_0         
		//* 309  665:getfield        #25  <Field RecyclerView this$0>
		//* 310  668:iconst_1        
		//* 311  669:invokevirtual   #297 <Method void RecyclerView.stopNestedScroll(int)>
		//* 312  672:aload           13
		//* 313  674:ifnull          704
		//* 314  677:aload           13
		//* 315  679:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 316  682:ifeq            692
		//* 317  685:aload           13
		//* 318  687:iconst_0        
		//* 319  688:iconst_0        
		//* 320  689:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 321  692:aload_0         
		//* 322  693:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//* 323  696:ifne            704
		//* 324  699:aload           13
		//* 325  701:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
		//* 326  704:aload_0         
		//* 327  705:invokespecial   #303 <Method void enableRunOnAnimationRequests()>
		//* 328  708:return          
		//* 329  709:aload           13
		//* 330  711:invokevirtual   #306 <Method int RecyclerView$SmoothScroller.getTargetPosition()>
		//* 331  714:iload           7
		//* 332  716:icmplt          749
		//* 333  719:aload           13
		//* 334  721:iload           7
		//* 335  723:iconst_1        
		//* 336  724:isub            
		//* 337  725:invokevirtual   #309 <Method void RecyclerView$SmoothScroller.setTargetPosition(int)>
		//* 338  728:aload           13
		//* 339  730:iload           6
		//* 340  732:iload           4
		//* 341  734:isub            
		//* 342  735:iload           5
		//* 343  737:iload_3         
		//* 344  738:isub            
		//* 345  739:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 346  742:iload           4
		//* 347  744:istore          7
		//* 348  746:goto            333
		//* 349  749:aload           13
		//* 350  751:iload           6
		//* 351  753:iload           4
		//* 352  755:isub            
		//* 353  756:iload           5
		//* 354  758:iload_3         
		//* 355  759:isub            
		//* 356  760:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 357  763:iload           4
		//* 358  765:istore          7
		//* 359  767:goto            333
		//* 360  770:iload           7
		//* 361  772:ifle            782
		//* 362  775:iload           8
		//* 363  777:istore          4
		//* 364  779:goto            426
		//* 365  782:iconst_0        
		//* 366  783:istore          4
		//* 367  785:goto            426
		//* 368  788:iload           8
		//* 369  790:istore          4
		//* 370  792:iload_3         
		//* 371  793:ifgt            445
		//* 372  796:iconst_0        
		//* 373  797:istore          4
		//* 374  799:goto            445
		//* 375  802:iconst_0        
		//* 376  803:istore_2        
		//* 377  804:goto            571
		//* 378  807:iconst_0        
		//* 379  808:istore_1        
		//* 380  809:goto            597
		//* 381  812:iconst_0        
		//* 382  813:istore_1        
		//* 383  814:goto            617
		//* 384  817:aload_0         
		//* 385  818:invokevirtual   #99  <Method void postOnAnimation()>
		//* 386  821:aload_0         
		//* 387  822:getfield        #25  <Field RecyclerView this$0>
		//* 388  825:getfield        #313 <Field GapWorker RecyclerView.mGapWorker>
		//* 389  828:ifnull          672
		//* 390  831:aload_0         
		//* 391  832:getfield        #25  <Field RecyclerView this$0>
		//* 392  835:getfield        #313 <Field GapWorker RecyclerView.mGapWorker>
		//* 393  838:aload_0         
		//* 394  839:getfield        #25  <Field RecyclerView this$0>
		//* 395  842:iload           6
		//* 396  844:iload           5
		//* 397  846:invokevirtual   #319 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
		//* 398  849:goto            672
		//* 399  852:iconst_0        
		//* 400  853:istore          4
		//* 401  855:goto            445
		//* 402  858:iconst_0        
		//* 403  859:istore          9
		//* 404  861:goto            430
		//* 405  864:iconst_0        
		//* 406  865:istore_3        
		//* 407  866:iconst_0        
		//* 408  867:istore_2        
		//* 409  868:goto            261
			{
				i1 = 0;
		//  410  871:iconst_0        
		//  411  872:istore          4
				j = 0;
		//  412  874:iconst_0        
		//  413  875:istore_1        
			}
			if(j1 != 0)
			{
				k = mLayout.scrollVerticallyBy(j1, mRecycler, mState);
				l = j1 - k;
			} else
			{
				l = 0;
				k = 0;
			}
			TraceCompat.endSection();
			repositionShadowingViews();
			onExitLayoutOrScroll();
			resumeRequestLayout(false);
			if(smoothscroller == null || smoothscroller.isPendingInitialRun() || !smoothscroller.isRunning()) goto _L6; else goto _L5
_L5:
			l1 = mState.getItemCount();
			if(l1 != 0) goto _L8; else goto _L7
_L7:
			smoothscroller.stop();
			l1 = i1;
_L19:
			if(!mItemDecorations.isEmpty())
				invalidate();
			if(getOverScrollMode() != 2)
				considerReleasingGlowsOnScroll(k1, j1);
			if(dispatchNestedScroll(j, k, l1, l, ((int []) (null)), 1) || l1 == 0 && l == 0) goto _L10; else goto _L9
_L9:
			i2 = (int)overscroller.getCurrVelocity();
			if(l1 != k2)
			{
				if(l1 < 0)
					i1 = -i2;
				else
				if(l1 > 0)
					i1 = i2;
				else
					i1 = 0;
				j2 = i1;
			} else
			{
				j2 = 0;
			}
			if(l == l2) goto _L12; else goto _L11
_L11:
			if(l >= 0) goto _L14; else goto _L13
_L13:
			i1 = -i2;
_L17:
			if(getOverScrollMode() != 2)
				absorbGlows(j2, i1);
			if((j2 != 0 || l1 == k2 || overscroller.getFinalX() == 0) && (i1 != 0 || l == l2 || overscroller.getFinalY() == 0))
				overscroller.abortAnimation();
_L10:
			if(j != 0 || k != 0)
				dispatchOnScrolled(j, k);
			if(!awakenScrollBars())
				invalidate();
			if(j1 != 0 && mLayout.canScrollVertically() && k == j1)
				k = 1;
			else
				k = 0;
			if(k1 != 0 && mLayout.canScrollHorizontally() && j == k1)
				j = 1;
			else
				j = 0;
			if(k1 == 0 && j1 == 0 || j != 0 || k != 0)
				j = 1;
			else
				j = 0;
			if(!overscroller.isFinished() && (j != 0 || hasNestedScrollingParent(1))) goto _L16; else goto _L15
_L15:
			setScrollState(0);
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
				mPrefetchRegistry.clearPrefetchPositions();
			stopNestedScroll(1);
_L2:
			if(smoothscroller != null)
			{
				if(smoothscroller.isPendingInitialRun())
					smoothscroller.onAnimation(0, 0);
				if(!mReSchedulePostAnimationCallback)
					smoothscroller.stop();
			}
			enableRunOnAnimationRequests();
			return;
_L8:
			if(smoothscroller.getTargetPosition() >= l1)
			{
				smoothscroller.setTargetPosition(l1 - 1);
				smoothscroller.onAnimation(k1 - i1, j1 - l);
				l1 = i1;
				continue; /* Loop/switch isn't completed */
			}
			smoothscroller.onAnimation(k1 - i1, j1 - l);
_L6:
			l1 = i1;
			continue; /* Loop/switch isn't completed */
_L14:
			i1 = i2;
			if(l <= 0)
				i1 = 0;
			continue; /* Loop/switch isn't completed */
_L16:
			postOnAnimation();
			if(mGapWorker != null)
				mGapWorker.postFromTraversal(RecyclerView.this, k1, j1);
			if(true) goto _L2; else goto _L12
_L12:
			i1 = 0;
			if(true) goto _L17; else goto _L4
		//* 414  876:goto            224
_L4:
			l = 0;
		//  415  879:iconst_0        
		//  416  880:istore_3        
			l1 = 0;
		//  417  881:iconst_0        
		//  418  882:istore          7
			k = 0;
		//  419  884:iconst_0        
		//  420  885:istore_2        
			j = 0;
		//  421  886:iconst_0        
		//  422  887:istore_1        
			if(true) goto _L19; else goto _L18
		//  423  888:goto            333
_L18:
		//* 424  891:goto            143
		}

		public void smoothScrollBy(int i, int j)
		{
			smoothScrollBy(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #323 <Method void smoothScrollBy(int, int, int, int)>
		//    6    8:return          
		}

		public void smoothScrollBy(int i, int j, int k)
		{
			smoothScrollBy(i, j, k, RecyclerView.sQuinticInterpolator);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    5    7:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//    6   10:return          
		}

		public void smoothScrollBy(int i, int j, int k, int l)
		{
			smoothScrollBy(i, j, computeScrollDuration(i, j, k, l));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:iload_2         
		//    6    6:iload_3         
		//    7    7:iload           4
		//    8    9:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    9   12:invokevirtual   #331 <Method void smoothScrollBy(int, int, int)>
		//   10   15:return          
		}

		public void smoothScrollBy(int i, int j, int k, Interpolator interpolator)
		{
			if(mInterpolator != interpolator)
		//*   0    0:aload_0         
		//*   1    1:getfield        #33  <Field Interpolator mInterpolator>
		//*   2    4:aload           4
		//*   3    6:if_acmpeq       35
			{
				mInterpolator = interpolator;
		//    4    9:aload_0         
		//    5   10:aload           4
		//    6   12:putfield        #33  <Field Interpolator mInterpolator>
				mScroller = new OverScroller(getContext(), interpolator);
		//    7   15:aload_0         
		//    8   16:new             #39  <Class OverScroller>
		//    9   19:dup             
		//   10   20:aload_0         
		//   11   21:getfield        #25  <Field RecyclerView this$0>
		//   12   24:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   13   27:aload           4
		//   14   29:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   15   32:putfield        #48  <Field OverScroller mScroller>
			}
			setScrollState(2);
		//   16   35:aload_0         
		//   17   36:getfield        #25  <Field RecyclerView this$0>
		//   18   39:iconst_2        
		//   19   40:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//   20   43:aload_0         
		//   21   44:iconst_0        
		//   22   45:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//   23   48:aload_0         
		//   24   49:iconst_0        
		//   25   50:putfield        #109 <Field int mLastFlingX>
			mScroller.startScroll(0, 0, i, j, k);
		//   26   53:aload_0         
		//   27   54:getfield        #48  <Field OverScroller mScroller>
		//   28   57:iconst_0        
		//   29   58:iconst_0        
		//   30   59:iload_1         
		//   31   60:iload_2         
		//   32   61:iload_3         
		//   33   62:invokevirtual   #335 <Method void OverScroller.startScroll(int, int, int, int, int)>
			if(android.os.Build.VERSION.SDK_INT < 23)
		//*  34   65:getstatic       #340 <Field int android.os.Build$VERSION.SDK_INT>
		//*  35   68:bipush          23
		//*  36   70:icmpge          81
				mScroller.computeScrollOffset();
		//   37   73:aload_0         
		//   38   74:getfield        #48  <Field OverScroller mScroller>
		//   39   77:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   40   80:pop             
			postOnAnimation();
		//   41   81:aload_0         
		//   42   82:invokevirtual   #99  <Method void postOnAnimation()>
		//   43   85:return          
		}

		public void smoothScrollBy(int i, int j, Interpolator interpolator)
		{
			int k = computeScrollDuration(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    6    8:istore          4
			Interpolator interpolator1 = interpolator;
		//    7   10:aload_3         
		//    8   11:astore          5
			if(interpolator == null)
		//*   9   13:aload_3         
		//*  10   14:ifnonnull       22
				interpolator1 = RecyclerView.sQuinticInterpolator;
		//   11   17:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   12   20:astore          5
			smoothScrollBy(i, j, k, interpolator1);
		//   13   22:aload_0         
		//   14   23:iload_1         
		//   15   24:iload_2         
		//   16   25:iload           4
		//   17   27:aload           5
		//   18   29:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//   19   32:return          
		}

		public void stop()
		{
			removeCallbacks(((Runnable) (this)));
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    4    8:pop             
			mScroller.abortAnimation();
		//    5    9:aload_0         
		//    6   10:getfield        #48  <Field OverScroller mScroller>
		//    7   13:invokevirtual   #262 <Method void OverScroller.abortAnimation()>
		//    8   16:return          
		}

		private boolean mEatRunOnAnimationRequest;
		Interpolator mInterpolator;
		private int mLastFlingX;
		private int mLastFlingY;
		private boolean mReSchedulePostAnimationCallback;
		private OverScroller mScroller;
		final RecyclerView this$0;


/*
		static OverScroller access$400(ViewFlinger viewflinger)
		{
			return viewflinger.mScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #48  <Field OverScroller mScroller>
		//    2    4:areturn         
		}

*/

		ViewFlinger()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #25  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #28  <Method void Object()>
			mInterpolator = RecyclerView.sQuinticInterpolator;
		//    5    9:aload_0         
		//    6   10:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    7   13:putfield        #33  <Field Interpolator mInterpolator>
			mEatRunOnAnimationRequest = false;
		//    8   16:aload_0         
		//    9   17:iconst_0        
		//   10   18:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			mReSchedulePostAnimationCallback = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mScroller = new OverScroller(getContext(), RecyclerView.sQuinticInterpolator);
		//   14   26:aload_0         
		//   15   27:new             #39  <Class OverScroller>
		//   16   30:dup             
		//   17   31:aload_1         
		//   18   32:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   19   35:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   20   38:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   21   41:putfield        #48  <Field OverScroller mScroller>
		//   22   44:return          
		}
	}

	public static abstract class ViewHolder
	{

		private void createPayloadsIfNeeded()
		{
			if(mPayloads == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnonnull       29
			{
				mPayloads = ((List) (new ArrayList()));
		//    3    7:aload_0         
		//    4    8:new             #153 <Class ArrayList>
		//    5   11:dup             
		//    6   12:invokespecial   #154 <Method void ArrayList()>
		//    7   15:putfield        #100 <Field List mPayloads>
				mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
		//    8   18:aload_0         
		//    9   19:aload_0         
		//   10   20:getfield        #100 <Field List mPayloads>
		//   11   23:invokestatic    #158 <Method List Collections.unmodifiableList(List)>
		//   12   26:putfield        #102 <Field List mUnmodifiedPayloads>
			}
		//   13   29:return          
		}

		private boolean doesTransientStatePreventRecycling()
		{
			return (mFlags & 0x10) == 0 && ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifeq            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		private void onEnteredHiddenState(RecyclerView recyclerview)
		{
			mWasImportantForAccessibilityBeforeHidden = ViewCompat.getImportantForAccessibility(itemView);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #121 <Field View itemView>
		//    3    5:invokestatic    #168 <Method int ViewCompat.getImportantForAccessibility(View)>
		//    4    8:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			recyclerview.setChildImportantForAccessibilityInternal(this, 4);
		//    5   11:aload_1         
		//    6   12:aload_0         
		//    7   13:iconst_4        
		//    8   14:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    9   17:pop             
		//   10   18:return          
		}

		private void onLeftHiddenState(RecyclerView recyclerview)
		{
			recyclerview.setChildImportantForAccessibilityInternal(this, mWasImportantForAccessibilityBeforeHidden);
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:aload_0         
		//    3    3:getfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    4    6:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    5    9:pop             
			mWasImportantForAccessibilityBeforeHidden = 0;
		//    6   10:aload_0         
		//    7   11:iconst_0        
		//    8   12:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    9   15:return          
		}

		private boolean shouldBeKeptAsChild()
		{
			return (mFlags & 0x10) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		void addChangePayload(Object obj)
		{
			if(obj == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       12
				addFlags(1024);
		//    2    4:aload_0         
		//    3    5:sipush          1024
		//    4    8:invokevirtual   #178 <Method void addFlags(int)>
			else
		//*   5   11:return          
			if((mFlags & 0x400) == 0)
		//*   6   12:aload_0         
		//*   7   13:getfield        #136 <Field int mFlags>
		//*   8   16:sipush          1024
		//*   9   19:iand            
		//*  10   20:ifne            11
			{
				createPayloadsIfNeeded();
		//   11   23:aload_0         
		//   12   24:invokespecial   #180 <Method void createPayloadsIfNeeded()>
				mPayloads.add(obj);
		//   13   27:aload_0         
		//   14   28:getfield        #100 <Field List mPayloads>
		//   15   31:aload_1         
		//   16   32:invokeinterface #186 <Method boolean List.add(Object)>
		//   17   37:pop             
				return;
		//   18   38:return          
			}
		}

		void addFlags(int i)
		{
			mFlags = mFlags | i;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:iload_1         
		//    4    6:ior             
		//    5    7:putfield        #136 <Field int mFlags>
		//    6   10:return          
		}

		void clearOldPosition()
		{
			mOldPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #86  <Field int mOldPosition>
			mPreLayoutPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #94  <Field int mPreLayoutPosition>
		//    6   10:return          
		}

		void clearPayload()
		{
			if(mPayloads != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnull          16
				mPayloads.clear();
		//    3    7:aload_0         
		//    4    8:getfield        #100 <Field List mPayloads>
		//    5   11:invokeinterface #191 <Method void List.clear()>
			mFlags = mFlags & 0xfffffbff;
		//    6   16:aload_0         
		//    7   17:aload_0         
		//    8   18:getfield        #136 <Field int mFlags>
		//    9   21:sipush          -1025
		//   10   24:iand            
		//   11   25:putfield        #136 <Field int mFlags>
		//   12   28:return          
		}

		void clearReturnedFromScrapFlag()
		{
			mFlags = mFlags & 0xffffffdf;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:bipush          -33
		//    4    7:iand            
		//    5    8:putfield        #136 <Field int mFlags>
		//    6   11:return          
		}

		void clearTmpDetachFlag()
		{
			mFlags = mFlags & 0xfffffeff;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -257
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		void flagRemovedAndOffsetPosition(int i, int j, boolean flag)
		{
			addFlags(8);
		//    0    0:aload_0         
		//    1    1:bipush          8
		//    2    3:invokevirtual   #178 <Method void addFlags(int)>
			offsetPosition(j, flag);
		//    3    6:aload_0         
		//    4    7:iload_2         
		//    5    8:iload_3         
		//    6    9:invokevirtual   #199 <Method void offsetPosition(int, boolean)>
			mPosition = i;
		//    7   12:aload_0         
		//    8   13:iload_1         
		//    9   14:putfield        #84  <Field int mPosition>
		//   10   17:return          
		}

		public final int getAdapterPosition()
		{
			if(mOwnerRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//*   2    4:ifnonnull       9
				return -1;
		//    3    7:iconst_m1       
		//    4    8:ireturn         
			else
				return mOwnerRecyclerView.getAdapterPositionFor(this);
		//    5    9:aload_0         
		//    6   10:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//    7   13:aload_0         
		//    8   14:invokevirtual   #206 <Method int RecyclerView.getAdapterPositionFor(RecyclerView$ViewHolder)>
		//    9   17:ireturn         
		}

		public final long getItemId()
		{
			return mItemId;
		//    0    0:aload_0         
		//    1    1:getfield        #90  <Field long mItemId>
		//    2    4:lreturn         
		}

		public final int getItemViewType()
		{
			return mItemViewType;
		//    0    0:aload_0         
		//    1    1:getfield        #92  <Field int mItemViewType>
		//    2    4:ireturn         
		}

		public final int getLayoutPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		public final int getOldPosition()
		{
			return mOldPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #86  <Field int mOldPosition>
		//    2    4:ireturn         
		}

		public final int getPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		List getUnmodifiedPayloads()
		{
			if((mFlags & 0x400) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #136 <Field int mFlags>
		//*   2    4:sipush          1024
		//*   3    7:iand            
		//*   4    8:ifne            39
			{
				if(mPayloads == null || mPayloads.size() == 0)
		//*   5   11:aload_0         
		//*   6   12:getfield        #100 <Field List mPayloads>
		//*   7   15:ifnull          30
		//*   8   18:aload_0         
		//*   9   19:getfield        #100 <Field List mPayloads>
		//*  10   22:invokeinterface #219 <Method int List.size()>
		//*  11   27:ifne            34
					return FULLUPDATE_PAYLOADS;
		//   12   30:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   13   33:areturn         
				else
					return mUnmodifiedPayloads;
		//   14   34:aload_0         
		//   15   35:getfield        #102 <Field List mUnmodifiedPayloads>
		//   16   38:areturn         
			} else
			{
				return FULLUPDATE_PAYLOADS;
		//   17   39:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   18   42:areturn         
			}
		}

		boolean hasAnyOfTheFlags(int i)
		{
			return (mFlags & i) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iload_1         
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isAdapterPositionUnknown()
		{
			return (mFlags & 0x200) != 0 || isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          512
		//    3    7:iand            
		//    4    8:ifne            18
		//    5   11:aload_0         
		//    6   12:invokevirtual   #227 <Method boolean isInvalid()>
		//    7   15:ifeq            20
		//    8   18:iconst_1        
		//    9   19:ireturn         
		//   10   20:iconst_0        
		//   11   21:ireturn         
		}

		boolean isBound()
		{
			return (mFlags & 1) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_1        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isInvalid()
		{
			return (mFlags & 4) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_4        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		public final boolean isRecyclable()
		{
			return (mFlags & 0x10) == 0 && !ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifne            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		boolean isRemoved()
		{
			return (mFlags & 8) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          8
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean isScrap()
		{
			return mScrapContainer != null;
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:ifnull          9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		boolean isTmpDetached()
		{
			return (mFlags & 0x100) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          256
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		boolean isUpdated()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean needsUpdate()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		void offsetPosition(int i, boolean flag)
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
			if(mPreLayoutPosition == -1)
		//*   8   16:aload_0         
		//*   9   17:getfield        #94  <Field int mPreLayoutPosition>
		//*  10   20:iconst_m1       
		//*  11   21:icmpne          32
				mPreLayoutPosition = mPosition;
		//   12   24:aload_0         
		//   13   25:aload_0         
		//   14   26:getfield        #84  <Field int mPosition>
		//   15   29:putfield        #94  <Field int mPreLayoutPosition>
			if(flag)
		//*  16   32:iload_2         
		//*  17   33:ifeq            46
				mPreLayoutPosition = mPreLayoutPosition + i;
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #94  <Field int mPreLayoutPosition>
		//   21   41:iload_1         
		//   22   42:iadd            
		//   23   43:putfield        #94  <Field int mPreLayoutPosition>
			mPosition = mPosition + i;
		//   24   46:aload_0         
		//   25   47:aload_0         
		//   26   48:getfield        #84  <Field int mPosition>
		//   27   51:iload_1         
		//   28   52:iadd            
		//   29   53:putfield        #84  <Field int mPosition>
			if(itemView.getLayoutParams() != null)
		//*  30   56:aload_0         
		//*  31   57:getfield        #121 <Field View itemView>
		//*  32   60:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  33   63:ifnull          80
				((LayoutParams)itemView.getLayoutParams()).mInsetsDirty = true;
		//   34   66:aload_0         
		//   35   67:getfield        #121 <Field View itemView>
		//   36   70:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   37   73:checkcast       #242 <Class RecyclerView$LayoutParams>
		//   38   76:iconst_1        
		//   39   77:putfield        #245 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//   40   80:return          
		}

		void resetInternal()
		{
			mFlags = 0;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #136 <Field int mFlags>
			mPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    6   10:aload_0         
		//    7   11:iconst_m1       
		//    8   12:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    9   15:aload_0         
		//   10   16:ldc2w           #87  <Long -1L>
		//   11   19:putfield        #90  <Field long mItemId>
			mPreLayoutPosition = -1;
		//   12   22:aload_0         
		//   13   23:iconst_m1       
		//   14   24:putfield        #94  <Field int mPreLayoutPosition>
			mIsRecyclableCount = 0;
		//   15   27:aload_0         
		//   16   28:iconst_0        
		//   17   29:putfield        #104 <Field int mIsRecyclableCount>
			mShadowedHolder = null;
		//   18   32:aload_0         
		//   19   33:aconst_null     
		//   20   34:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   21   37:aload_0         
		//   22   38:aconst_null     
		//   23   39:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			clearPayload();
		//   24   42:aload_0         
		//   25   43:invokevirtual   #248 <Method void clearPayload()>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   26   46:aload_0         
		//   27   47:iconst_0        
		//   28   48:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   29   51:aload_0         
		//   30   52:iconst_m1       
		//   31   53:putfield        #112 <Field int mPendingAccessibilityState>
			RecyclerView.clearNestedRecyclerViewIfNotNested(this);
		//   32   56:aload_0         
		//   33   57:invokestatic    #252 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
		//   34   60:return          
		}

		void saveOldPosition()
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
		//    8   16:return          
		}

		void setFlags(int i, int j)
		{
			mFlags = mFlags & ~j | i & j;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:iload_2         
		//    4    6:iconst_m1       
		//    5    7:ixor            
		//    6    8:iand            
		//    7    9:iload_1         
		//    8   10:iload_2         
		//    9   11:iand            
		//   10   12:ior             
		//   11   13:putfield        #136 <Field int mFlags>
		//   12   16:return          
		}

		public final void setIsRecyclable(boolean flag)
		{
			int i;
			if(flag)
		//*   0    0:iload_1         
		//*   1    1:ifeq            56
				i = mIsRecyclableCount - 1;
		//    2    4:aload_0         
		//    3    5:getfield        #104 <Field int mIsRecyclableCount>
		//    4    8:iconst_1        
		//    5    9:isub            
		//    6   10:istore_2        
			else
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:putfield        #104 <Field int mIsRecyclableCount>
		//*  10   16:aload_0         
		//*  11   17:getfield        #104 <Field int mIsRecyclableCount>
		//*  12   20:ifge            66
		//*  13   23:aload_0         
		//*  14   24:iconst_0        
		//*  15   25:putfield        #104 <Field int mIsRecyclableCount>
		//*  16   28:ldc2            #259 <String "View">
		//*  17   31:new             #261 <Class StringBuilder>
		//*  18   34:dup             
		//*  19   35:invokespecial   #262 <Method void StringBuilder()>
		//*  20   38:ldc2            #264 <String "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ">
		//*  21   41:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  22   44:aload_0         
		//*  23   45:invokevirtual   #271 <Method StringBuilder StringBuilder.append(Object)>
		//*  24   48:invokevirtual   #275 <Method String StringBuilder.toString()>
		//*  25   51:invokestatic    #281 <Method int Log.e(String, String)>
		//*  26   54:pop             
		//*  27   55:return          
				i = mIsRecyclableCount + 1;
		//   28   56:aload_0         
		//   29   57:getfield        #104 <Field int mIsRecyclableCount>
		//   30   60:iconst_1        
		//   31   61:iadd            
		//   32   62:istore_2        
			mIsRecyclableCount = i;
			if(mIsRecyclableCount < 0)
			{
				mIsRecyclableCount = 0;
				Log.e("View", (new StringBuilder()).append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ").append(((Object) (this))).toString());
			} else
		//*  33   63:goto            11
			{
				if(!flag && mIsRecyclableCount == 1)
		//*  34   66:iload_1         
		//*  35   67:ifne            90
		//*  36   70:aload_0         
		//*  37   71:getfield        #104 <Field int mIsRecyclableCount>
		//*  38   74:iconst_1        
		//*  39   75:icmpne          90
				{
					mFlags = mFlags | 0x10;
		//   40   78:aload_0         
		//   41   79:aload_0         
		//   42   80:getfield        #136 <Field int mFlags>
		//   43   83:bipush          16
		//   44   85:ior             
		//   45   86:putfield        #136 <Field int mFlags>
					return;
		//   46   89:return          
				}
				if(flag && mIsRecyclableCount == 0)
		//*  47   90:iload_1         
		//*  48   91:ifeq            55
		//*  49   94:aload_0         
		//*  50   95:getfield        #104 <Field int mIsRecyclableCount>
		//*  51   98:ifne            55
				{
					mFlags = mFlags & 0xffffffef;
		//   52  101:aload_0         
		//   53  102:aload_0         
		//   54  103:getfield        #136 <Field int mFlags>
		//   55  106:bipush          -17
		//   56  108:iand            
		//   57  109:putfield        #136 <Field int mFlags>
					return;
		//   58  112:return          
				}
			}
		}

		void setScrapContainer(Recycler recycler, boolean flag)
		{
			mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = flag;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #108 <Field boolean mInChangeScrap>
		//    6   10:return          
		}

		boolean shouldIgnore()
		{
			return (mFlags & 0x80) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          128
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		void stopIgnoring()
		{
			mFlags = mFlags & 0xffffff7f;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -129
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder((new StringBuilder()).append("ViewHolder{").append(Integer.toHexString(((Object)this).hashCode())).append(" position=").append(mPosition).append(" id=").append(mItemId).append(", oldPos=").append(mOldPosition).append(", pLpos:").append(mPreLayoutPosition).toString());
		//    0    0:new             #261 <Class StringBuilder>
		//    1    3:dup             
		//    2    4:new             #261 <Class StringBuilder>
		//    3    7:dup             
		//    4    8:invokespecial   #262 <Method void StringBuilder()>
		//    5   11:ldc2            #287 <String "ViewHolder{">
		//    6   14:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//    7   17:aload_0         
		//    8   18:invokevirtual   #290 <Method int Object.hashCode()>
		//    9   21:invokestatic    #296 <Method String Integer.toHexString(int)>
		//   10   24:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   11   27:ldc2            #298 <String " position=">
		//   12   30:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   13   33:aload_0         
		//   14   34:getfield        #84  <Field int mPosition>
		//   15   37:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   16   40:ldc2            #303 <String " id=">
		//   17   43:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   18   46:aload_0         
		//   19   47:getfield        #90  <Field long mItemId>
		//   20   50:invokevirtual   #306 <Method StringBuilder StringBuilder.append(long)>
		//   21   53:ldc2            #308 <String ", oldPos=">
		//   22   56:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   23   59:aload_0         
		//   24   60:getfield        #86  <Field int mOldPosition>
		//   25   63:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   26   66:ldc2            #310 <String ", pLpos:">
		//   27   69:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   28   72:aload_0         
		//   29   73:getfield        #94  <Field int mPreLayoutPosition>
		//   30   76:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   31   79:invokevirtual   #275 <Method String StringBuilder.toString()>
		//   32   82:invokespecial   #311 <Method void StringBuilder(String)>
		//   33   85:astore_2        
			if(isScrap())
		//*  34   86:aload_0         
		//*  35   87:invokevirtual   #313 <Method boolean isScrap()>
		//*  36   90:ifeq            118
			{
				StringBuilder stringbuilder1 = stringbuilder.append(" scrap ");
		//   37   93:aload_2         
		//   38   94:ldc2            #315 <String " scrap ">
		//   39   97:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   40  100:astore_3        
				String s;
				if(mInChangeScrap)
		//*  41  101:aload_0         
		//*  42  102:getfield        #108 <Field boolean mInChangeScrap>
		//*  43  105:ifeq            295
					s = "[changeScrap]";
		//   44  108:ldc2            #317 <String "[changeScrap]">
		//   45  111:astore_1        
				else
		//*  46  112:aload_3         
		//*  47  113:aload_1         
		//*  48  114:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  49  117:pop             
		//*  50  118:aload_0         
		//*  51  119:invokevirtual   #227 <Method boolean isInvalid()>
		//*  52  122:ifeq            133
		//*  53  125:aload_2         
		//*  54  126:ldc2            #319 <String " invalid">
		//*  55  129:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  56  132:pop             
		//*  57  133:aload_0         
		//*  58  134:invokevirtual   #321 <Method boolean isBound()>
		//*  59  137:ifne            148
		//*  60  140:aload_2         
		//*  61  141:ldc2            #323 <String " unbound">
		//*  62  144:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  63  147:pop             
		//*  64  148:aload_0         
		//*  65  149:invokevirtual   #325 <Method boolean needsUpdate()>
		//*  66  152:ifeq            163
		//*  67  155:aload_2         
		//*  68  156:ldc2            #327 <String " update">
		//*  69  159:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  70  162:pop             
		//*  71  163:aload_0         
		//*  72  164:invokevirtual   #329 <Method boolean isRemoved()>
		//*  73  167:ifeq            178
		//*  74  170:aload_2         
		//*  75  171:ldc2            #331 <String " removed">
		//*  76  174:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  77  177:pop             
		//*  78  178:aload_0         
		//*  79  179:invokevirtual   #333 <Method boolean shouldIgnore()>
		//*  80  182:ifeq            193
		//*  81  185:aload_2         
		//*  82  186:ldc2            #335 <String " ignored">
		//*  83  189:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  84  192:pop             
		//*  85  193:aload_0         
		//*  86  194:invokevirtual   #337 <Method boolean isTmpDetached()>
		//*  87  197:ifeq            208
		//*  88  200:aload_2         
		//*  89  201:ldc2            #339 <String " tmpDetached">
		//*  90  204:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  91  207:pop             
		//*  92  208:aload_0         
		//*  93  209:invokevirtual   #341 <Method boolean isRecyclable()>
		//*  94  212:ifne            249
		//*  95  215:aload_2         
		//*  96  216:new             #261 <Class StringBuilder>
		//*  97  219:dup             
		//*  98  220:invokespecial   #262 <Method void StringBuilder()>
		//*  99  223:ldc2            #343 <String " not recyclable(">
		//* 100  226:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 101  229:aload_0         
		//* 102  230:getfield        #104 <Field int mIsRecyclableCount>
		//* 103  233:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//* 104  236:ldc2            #345 <String ")">
		//* 105  239:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 106  242:invokevirtual   #275 <Method String StringBuilder.toString()>
		//* 107  245:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 108  248:pop             
		//* 109  249:aload_0         
		//* 110  250:invokevirtual   #347 <Method boolean isAdapterPositionUnknown()>
		//* 111  253:ifeq            264
		//* 112  256:aload_2         
		//* 113  257:ldc2            #349 <String " undefined adapter position">
		//* 114  260:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 115  263:pop             
		//* 116  264:aload_0         
		//* 117  265:getfield        #121 <Field View itemView>
		//* 118  268:invokevirtual   #353 <Method ViewParent View.getParent()>
		//* 119  271:ifnonnull       282
		//* 120  274:aload_2         
		//* 121  275:ldc2            #355 <String " no parent">
		//* 122  278:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 123  281:pop             
		//* 124  282:aload_2         
		//* 125  283:ldc2            #357 <String "}">
		//* 126  286:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 127  289:pop             
		//* 128  290:aload_2         
		//* 129  291:invokevirtual   #275 <Method String StringBuilder.toString()>
		//* 130  294:areturn         
					s = "[attachedScrap]";
		//  131  295:ldc2            #359 <String "[attachedScrap]">
		//  132  298:astore_1        
				stringbuilder1.append(s);
			}
			if(isInvalid())
				stringbuilder.append(" invalid");
			if(!isBound())
				stringbuilder.append(" unbound");
			if(needsUpdate())
				stringbuilder.append(" update");
			if(isRemoved())
				stringbuilder.append(" removed");
			if(shouldIgnore())
				stringbuilder.append(" ignored");
			if(isTmpDetached())
				stringbuilder.append(" tmpDetached");
			if(!isRecyclable())
				stringbuilder.append((new StringBuilder()).append(" not recyclable(").append(mIsRecyclableCount).append(")").toString());
			if(isAdapterPositionUnknown())
				stringbuilder.append(" undefined adapter position");
			if(itemView.getParent() == null)
				stringbuilder.append(" no parent");
			stringbuilder.append("}");
			return stringbuilder.toString();
		//* 133  299:goto            112
		}

		void unScrap()
		{
			mScrapContainer.unscrapView(this);
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #365 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		boolean wasReturnedFromScrap()
		{
			return (mFlags & 0x20) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          32
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		static final int FLAG_ADAPTER_FULLUPDATE = 1024;
		static final int FLAG_ADAPTER_POSITION_UNKNOWN = 512;
		static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 8192;
		static final int FLAG_BOUND = 1;
		static final int FLAG_IGNORE = 128;
		static final int FLAG_INVALID = 4;
		static final int FLAG_MOVED = 2048;
		static final int FLAG_NOT_RECYCLABLE = 16;
		static final int FLAG_REMOVED = 8;
		static final int FLAG_RETURNED_FROM_SCRAP = 32;
		static final int FLAG_SET_A11Y_ITEM_DELEGATE = 16384;
		static final int FLAG_TMP_DETACHED = 256;
		static final int FLAG_UPDATE = 2;
		private static final List FULLUPDATE_PAYLOADS;
		static final int PENDING_ACCESSIBILITY_STATE_NOT_SET = -1;
		public final View itemView;
		private int mFlags;
		private boolean mInChangeScrap;
		private int mIsRecyclableCount;
		long mItemId;
		int mItemViewType;
		WeakReference mNestedRecyclerView;
		int mOldPosition;
		RecyclerView mOwnerRecyclerView;
		List mPayloads;
		int mPendingAccessibilityState;
		int mPosition;
		int mPreLayoutPosition;
		private Recycler mScrapContainer;
		ViewHolder mShadowedHolder;
		ViewHolder mShadowingHolder;
		List mUnmodifiedPayloads;
		private int mWasImportantForAccessibilityBeforeHidden;

		static 
		{
			FULLUPDATE_PAYLOADS = Collections.EMPTY_LIST;
		//    0    0:getstatic       #75  <Field List Collections.EMPTY_LIST>
		//    1    3:putstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//*   2    6:return          
		}


/*
		static Recycler access$1002(ViewHolder viewholder, Recycler recycler)
		{
			viewholder.mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			return recycler;
		//    3    5:aload_1         
		//    4    6:areturn         
		}

*/


/*
		static boolean access$1100(ViewHolder viewholder)
		{
			return viewholder.mInChangeScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #108 <Field boolean mInChangeScrap>
		//    2    4:ireturn         
		}

*/


/*
		static boolean access$1102(ViewHolder viewholder, boolean flag)
		{
			viewholder.mInChangeScrap = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #108 <Field boolean mInChangeScrap>
			return flag;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/


/*
		static boolean access$1500(ViewHolder viewholder)
		{
			return viewholder.shouldBeKeptAsChild();
		//    0    0:aload_0         
		//    1    1:invokespecial   #132 <Method boolean shouldBeKeptAsChild()>
		//    2    4:ireturn         
		}

*/


/*
		static int access$1600(ViewHolder viewholder)
		{
			return viewholder.mFlags;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:ireturn         
		}

*/


/*
		static void access$200(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onEnteredHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #142 <Method void onEnteredHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static void access$300(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onLeftHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #146 <Method void onLeftHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static boolean access$900(ViewHolder viewholder)
		{
			return viewholder.doesTransientStatePreventRecycling();
		//    0    0:aload_0         
		//    1    1:invokespecial   #150 <Method boolean doesTransientStatePreventRecycling()>
		//    2    4:ireturn         
		}

*/

		public ViewHolder(View view)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #82  <Method void Object()>
			mPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    8   14:aload_0         
		//    9   15:ldc2w           #87  <Long -1L>
		//   10   18:putfield        #90  <Field long mItemId>
			mItemViewType = -1;
		//   11   21:aload_0         
		//   12   22:iconst_m1       
		//   13   23:putfield        #92  <Field int mItemViewType>
			mPreLayoutPosition = -1;
		//   14   26:aload_0         
		//   15   27:iconst_m1       
		//   16   28:putfield        #94  <Field int mPreLayoutPosition>
			mShadowedHolder = null;
		//   17   31:aload_0         
		//   18   32:aconst_null     
		//   19   33:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   20   36:aload_0         
		//   21   37:aconst_null     
		//   22   38:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			mPayloads = null;
		//   23   41:aload_0         
		//   24   42:aconst_null     
		//   25   43:putfield        #100 <Field List mPayloads>
			mUnmodifiedPayloads = null;
		//   26   46:aload_0         
		//   27   47:aconst_null     
		//   28   48:putfield        #102 <Field List mUnmodifiedPayloads>
			mIsRecyclableCount = 0;
		//   29   51:aload_0         
		//   30   52:iconst_0        
		//   31   53:putfield        #104 <Field int mIsRecyclableCount>
			mScrapContainer = null;
		//   32   56:aload_0         
		//   33   57:aconst_null     
		//   34   58:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = false;
		//   35   61:aload_0         
		//   36   62:iconst_0        
		//   37   63:putfield        #108 <Field boolean mInChangeScrap>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   38   66:aload_0         
		//   39   67:iconst_0        
		//   40   68:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   41   71:aload_0         
		//   42   72:iconst_m1       
		//   43   73:putfield        #112 <Field int mPendingAccessibilityState>
			if(view == null)
		//*  44   76:aload_1         
		//*  45   77:ifnonnull       90
			{
				throw new IllegalArgumentException("itemView may not be null");
		//   46   80:new             #114 <Class IllegalArgumentException>
		//   47   83:dup             
		//   48   84:ldc1            #116 <String "itemView may not be null">
		//   49   86:invokespecial   #119 <Method void IllegalArgumentException(String)>
		//   50   89:athrow          
			} else
			{
				itemView = view;
		//   51   90:aload_0         
		//   52   91:aload_1         
		//   53   92:putfield        #121 <Field View itemView>
				return;
		//   54   95:return          
			}
		}
	}


	public RecyclerView(Context context)
	{
		this(context, ((AttributeSet) (null)));
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aconst_null     
	//    3    3:invokespecial   #355 <Method void RecyclerView(Context, AttributeSet)>
	//    4    6:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset)
	{
		this(context, attributeset, 0);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iconst_0        
	//    4    4:invokespecial   #359 <Method void RecyclerView(Context, AttributeSet, int)>
	//    5    7:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset, int i)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          5
		super(context, attributeset, i);
	//    2    3:aload_0         
	//    3    4:aload_1         
	//    4    5:aload_2         
	//    5    6:iload_3         
	//    6    7:invokespecial   #361 <Method void ViewGroup(Context, AttributeSet, int)>
		mObserver = new RecyclerViewDataObserver();
	//    7   10:aload_0         
	//    8   11:new             #95  <Class RecyclerView$RecyclerViewDataObserver>
	//    9   14:dup             
	//   10   15:aload_0         
	//   11   16:invokespecial   #364 <Method void RecyclerView$RecyclerViewDataObserver(RecyclerView)>
	//   12   19:putfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
		mRecycler = new Recycler();
	//   13   22:aload_0         
	//   14   23:new             #89  <Class RecyclerView$Recycler>
	//   15   26:dup             
	//   16   27:aload_0         
	//   17   28:invokespecial   #367 <Method void RecyclerView$Recycler(RecyclerView)>
	//   18   31:putfield        #369 <Field RecyclerView$Recycler mRecycler>
		mViewInfoStore = new ViewInfoStore();
	//   19   34:aload_0         
	//   20   35:new             #371 <Class ViewInfoStore>
	//   21   38:dup             
	//   22   39:invokespecial   #372 <Method void ViewInfoStore()>
	//   23   42:putfield        #374 <Field ViewInfoStore mViewInfoStore>
		mUpdateChildViewsRunnable = new Runnable() {

			public void run()
			{
				if(!mFirstLayoutComplete || isLayoutRequested())
			//*   0    0:aload_0         
			//*   1    1:getfield        #14  <Field RecyclerView this$0>
			//*   2    4:getfield        #23  <Field boolean RecyclerView.mFirstLayoutComplete>
			//*   3    7:ifeq            20
			//*   4   10:aload_0         
			//*   5   11:getfield        #14  <Field RecyclerView this$0>
			//*   6   14:invokevirtual   #27  <Method boolean RecyclerView.isLayoutRequested()>
			//*   7   17:ifeq            21
					return;
			//    8   20:return          
				if(!mIsAttached)
			//*   9   21:aload_0         
			//*  10   22:getfield        #14  <Field RecyclerView this$0>
			//*  11   25:getfield        #30  <Field boolean RecyclerView.mIsAttached>
			//*  12   28:ifne            39
				{
					requestLayout();
			//   13   31:aload_0         
			//   14   32:getfield        #14  <Field RecyclerView this$0>
			//   15   35:invokevirtual   #33  <Method void RecyclerView.requestLayout()>
					return;
			//   16   38:return          
				}
				if(mLayoutFrozen)
			//*  17   39:aload_0         
			//*  18   40:getfield        #14  <Field RecyclerView this$0>
			//*  19   43:getfield        #36  <Field boolean RecyclerView.mLayoutFrozen>
			//*  20   46:ifeq            58
				{
					mLayoutRequestEaten = true;
			//   21   49:aload_0         
			//   22   50:getfield        #14  <Field RecyclerView this$0>
			//   23   53:iconst_1        
			//   24   54:putfield        #39  <Field boolean RecyclerView.mLayoutRequestEaten>
					return;
			//   25   57:return          
				} else
				{
					consumePendingUpdateOperations();
			//   26   58:aload_0         
			//   27   59:getfield        #14  <Field RecyclerView this$0>
			//   28   62:invokevirtual   #42  <Method void RecyclerView.consumePendingUpdateOperations()>
					return;
			//   29   65:return          
				}
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//   24   45:aload_0         
	//   25   46:new             #10  <Class RecyclerView$1>
	//   26   49:dup             
	//   27   50:aload_0         
	//   28   51:invokespecial   #375 <Method void RecyclerView$1(RecyclerView)>
	//   29   54:putfield        #377 <Field Runnable mUpdateChildViewsRunnable>
		mTempRect = new Rect();
	//   30   57:aload_0         
	//   31   58:new             #379 <Class Rect>
	//   32   61:dup             
	//   33   62:invokespecial   #380 <Method void Rect()>
	//   34   65:putfield        #382 <Field Rect mTempRect>
		mTempRect2 = new Rect();
	//   35   68:aload_0         
	//   36   69:new             #379 <Class Rect>
	//   37   72:dup             
	//   38   73:invokespecial   #380 <Method void Rect()>
	//   39   76:putfield        #384 <Field Rect mTempRect2>
		mTempRectF = new RectF();
	//   40   79:aload_0         
	//   41   80:new             #386 <Class RectF>
	//   42   83:dup             
	//   43   84:invokespecial   #387 <Method void RectF()>
	//   44   87:putfield        #389 <Field RectF mTempRectF>
		mItemDecorations = new ArrayList();
	//   45   90:aload_0         
	//   46   91:new             #391 <Class ArrayList>
	//   47   94:dup             
	//   48   95:invokespecial   #392 <Method void ArrayList()>
	//   49   98:putfield        #394 <Field ArrayList mItemDecorations>
		mOnItemTouchListeners = new ArrayList();
	//   50  101:aload_0         
	//   51  102:new             #391 <Class ArrayList>
	//   52  105:dup             
	//   53  106:invokespecial   #392 <Method void ArrayList()>
	//   54  109:putfield        #396 <Field ArrayList mOnItemTouchListeners>
		mEatRequestLayout = 0;
	//   55  112:aload_0         
	//   56  113:iconst_0        
	//   57  114:putfield        #398 <Field int mEatRequestLayout>
		mDataSetHasChangedAfterLayout = false;
	//   58  117:aload_0         
	//   59  118:iconst_0        
	//   60  119:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		mLayoutOrScrollCounter = 0;
	//   61  122:aload_0         
	//   62  123:iconst_0        
	//   63  124:putfield        #402 <Field int mLayoutOrScrollCounter>
		mDispatchScrollCounter = 0;
	//   64  127:aload_0         
	//   65  128:iconst_0        
	//   66  129:putfield        #404 <Field int mDispatchScrollCounter>
		mItemAnimator = ((ItemAnimator) (new DefaultItemAnimator()));
	//   67  132:aload_0         
	//   68  133:new             #406 <Class DefaultItemAnimator>
	//   69  136:dup             
	//   70  137:invokespecial   #407 <Method void DefaultItemAnimator()>
	//   71  140:putfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
		mScrollState = 0;
	//   72  143:aload_0         
	//   73  144:iconst_0        
	//   74  145:putfield        #411 <Field int mScrollState>
		mScrollPointerId = -1;
	//   75  148:aload_0         
	//   76  149:iconst_m1       
	//   77  150:putfield        #413 <Field int mScrollPointerId>
		mScaledHorizontalScrollFactor = 1.401298E-45F;
	//   78  153:aload_0         
	//   79  154:ldc2            #414 <Float 1.401298E-45F>
	//   80  157:putfield        #416 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = 1.401298E-45F;
	//   81  160:aload_0         
	//   82  161:ldc2            #414 <Float 1.401298E-45F>
	//   83  164:putfield        #418 <Field float mScaledVerticalScrollFactor>
		mPreserveFocusAfterLayout = true;
	//   84  167:aload_0         
	//   85  168:iconst_1        
	//   86  169:putfield        #420 <Field boolean mPreserveFocusAfterLayout>
		mViewFlinger = new ViewFlinger();
	//   87  172:aload_0         
	//   88  173:new             #124 <Class RecyclerView$ViewFlinger>
	//   89  176:dup             
	//   90  177:aload_0         
	//   91  178:invokespecial   #421 <Method void RecyclerView$ViewFlinger(RecyclerView)>
	//   92  181:putfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
		boolean flag;
		Object obj;
		if(ALLOW_THREAD_GAP_WORK)
	//*  93  184:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  94  187:ifeq            643
			obj = ((Object) (new GapWorker.LayoutPrefetchRegistryImpl()));
	//   95  190:new             #425 <Class GapWorker$LayoutPrefetchRegistryImpl>
	//   96  193:dup             
	//   97  194:invokespecial   #426 <Method void GapWorker$LayoutPrefetchRegistryImpl()>
	//   98  197:astore          6
		else
	//*  99  199:aload_0         
	//* 100  200:aload           6
	//* 101  202:putfield        #428 <Field GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry>
	//* 102  205:aload_0         
	//* 103  206:new             #115 <Class RecyclerView$State>
	//* 104  209:dup             
	//* 105  210:invokespecial   #429 <Method void RecyclerView$State()>
	//* 106  213:putfield        #431 <Field RecyclerView$State mState>
	//* 107  216:aload_0         
	//* 108  217:iconst_0        
	//* 109  218:putfield        #433 <Field boolean mItemsAddedOrRemoved>
	//* 110  221:aload_0         
	//* 111  222:iconst_0        
	//* 112  223:putfield        #435 <Field boolean mItemsChanged>
	//* 113  226:aload_0         
	//* 114  227:new             #49  <Class RecyclerView$ItemAnimatorRestoreListener>
	//* 115  230:dup             
	//* 116  231:aload_0         
	//* 117  232:invokespecial   #436 <Method void RecyclerView$ItemAnimatorRestoreListener(RecyclerView)>
	//* 118  235:putfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//* 119  238:aload_0         
	//* 120  239:iconst_0        
	//* 121  240:putfield        #440 <Field boolean mPostedAnimatorRunner>
	//* 122  243:aload_0         
	//* 123  244:iconst_2        
	//* 124  245:newarray        int[]
	//* 125  247:putfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 126  250:aload_0         
	//* 127  251:iconst_2        
	//* 128  252:newarray        int[]
	//* 129  254:putfield        #444 <Field int[] mScrollOffset>
	//* 130  257:aload_0         
	//* 131  258:iconst_2        
	//* 132  259:newarray        int[]
	//* 133  261:putfield        #446 <Field int[] mScrollConsumed>
	//* 134  264:aload_0         
	//* 135  265:iconst_2        
	//* 136  266:newarray        int[]
	//* 137  268:putfield        #448 <Field int[] mNestedOffsets>
	//* 138  271:aload_0         
	//* 139  272:new             #391 <Class ArrayList>
	//* 140  275:dup             
	//* 141  276:invokespecial   #392 <Method void ArrayList()>
	//* 142  279:putfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//* 143  282:aload_0         
	//* 144  283:new             #12  <Class RecyclerView$2>
	//* 145  286:dup             
	//* 146  287:aload_0         
	//* 147  288:invokespecial   #451 <Method void RecyclerView$2(RecyclerView)>
	//* 148  291:putfield        #453 <Field Runnable mItemAnimatorRunner>
	//* 149  294:aload_0         
	//* 150  295:new             #16  <Class RecyclerView$4>
	//* 151  298:dup             
	//* 152  299:aload_0         
	//* 153  300:invokespecial   #454 <Method void RecyclerView$4(RecyclerView)>
	//* 154  303:putfield        #456 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//* 155  306:aload_2         
	//* 156  307:ifnull          649
	//* 157  310:aload_1         
	//* 158  311:aload_2         
	//* 159  312:getstatic       #314 <Field int[] CLIP_TO_PADDING_ATTR>
	//* 160  315:iload_3         
	//* 161  316:iconst_0        
	//* 162  317:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 163  320:astore          6
	//* 164  322:aload_0         
	//* 165  323:aload           6
	//* 166  325:iconst_0        
	//* 167  326:iconst_1        
	//* 168  327:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 169  330:putfield        #468 <Field boolean mClipToPadding>
	//* 170  333:aload           6
	//* 171  335:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 172  338:aload_0         
	//* 173  339:iconst_1        
	//* 174  340:invokevirtual   #475 <Method void setScrollContainer(boolean)>
	//* 175  343:aload_0         
	//* 176  344:iconst_1        
	//* 177  345:invokevirtual   #478 <Method void setFocusableInTouchMode(boolean)>
	//* 178  348:aload_1         
	//* 179  349:invokestatic    #484 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//* 180  352:astore          6
	//* 181  354:aload_0         
	//* 182  355:aload           6
	//* 183  357:invokevirtual   #488 <Method int ViewConfiguration.getScaledTouchSlop()>
	//* 184  360:putfield        #490 <Field int mTouchSlop>
	//* 185  363:aload_0         
	//* 186  364:aload           6
	//* 187  366:aload_1         
	//* 188  367:invokestatic    #496 <Method float ViewConfigurationCompat.getScaledHorizontalScrollFactor(ViewConfiguration, Context)>
	//* 189  370:putfield        #416 <Field float mScaledHorizontalScrollFactor>
	//* 190  373:aload_0         
	//* 191  374:aload           6
	//* 192  376:aload_1         
	//* 193  377:invokestatic    #499 <Method float ViewConfigurationCompat.getScaledVerticalScrollFactor(ViewConfiguration, Context)>
	//* 194  380:putfield        #418 <Field float mScaledVerticalScrollFactor>
	//* 195  383:aload_0         
	//* 196  384:aload           6
	//* 197  386:invokevirtual   #502 <Method int ViewConfiguration.getScaledMinimumFlingVelocity()>
	//* 198  389:putfield        #504 <Field int mMinFlingVelocity>
	//* 199  392:aload_0         
	//* 200  393:aload           6
	//* 201  395:invokevirtual   #507 <Method int ViewConfiguration.getScaledMaximumFlingVelocity()>
	//* 202  398:putfield        #509 <Field int mMaxFlingVelocity>
	//* 203  401:aload_0         
	//* 204  402:invokevirtual   #512 <Method int getOverScrollMode()>
	//* 205  405:iconst_2        
	//* 206  406:icmpne          657
	//* 207  409:iconst_1        
	//* 208  410:istore          4
	//* 209  412:aload_0         
	//* 210  413:iload           4
	//* 211  415:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
	//* 212  418:aload_0         
	//* 213  419:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 214  422:aload_0         
	//* 215  423:getfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//* 216  426:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//* 217  429:aload_0         
	//* 218  430:invokevirtual   #522 <Method void initAdapterManager()>
	//* 219  433:aload_0         
	//* 220  434:invokespecial   #525 <Method void initChildrenHelper()>
	//* 221  437:aload_0         
	//* 222  438:invokestatic    #531 <Method int ViewCompat.getImportantForAccessibility(View)>
	//* 223  441:ifne            449
	//* 224  444:aload_0         
	//* 225  445:iconst_1        
	//* 226  446:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
	//* 227  449:aload_0         
	//* 228  450:aload_0         
	//* 229  451:invokevirtual   #539 <Method Context getContext()>
	//* 230  454:ldc2            #541 <String "accessibility">
	//* 231  457:invokevirtual   #545 <Method Object Context.getSystemService(String)>
	//* 232  460:checkcast       #547 <Class AccessibilityManager>
	//* 233  463:putfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//* 234  466:aload_0         
	//* 235  467:new             #551 <Class RecyclerViewAccessibilityDelegate>
	//* 236  470:dup             
	//* 237  471:aload_0         
	//* 238  472:invokespecial   #552 <Method void RecyclerViewAccessibilityDelegate(RecyclerView)>
	//* 239  475:invokevirtual   #556 <Method void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)>
	//* 240  478:aload_2         
	//* 241  479:ifnull          663
	//* 242  482:aload_1         
	//* 243  483:aload_2         
	//* 244  484:getstatic       #560 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
	//* 245  487:iload_3         
	//* 246  488:iconst_0        
	//* 247  489:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 248  492:astore          6
	//* 249  494:aload           6
	//* 250  496:getstatic       #563 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_layoutManager>
	//* 251  499:invokevirtual   #567 <Method String TypedArray.getString(int)>
	//* 252  502:astore          7
	//* 253  504:aload           6
	//* 254  506:getstatic       #570 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_descendantFocusability>
	//* 255  509:iconst_m1       
	//* 256  510:invokevirtual   #574 <Method int TypedArray.getInt(int, int)>
	//* 257  513:iconst_m1       
	//* 258  514:icmpne          524
	//* 259  517:aload_0         
	//* 260  518:ldc2            #575 <Int 0x40000>
	//* 261  521:invokevirtual   #579 <Method void setDescendantFocusability(int)>
	//* 262  524:aload_0         
	//* 263  525:aload           6
	//* 264  527:getstatic       #582 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollEnabled>
	//* 265  530:iconst_0        
	//* 266  531:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 267  534:putfield        #584 <Field boolean mEnableFastScroller>
	//* 268  537:aload_0         
	//* 269  538:getfield        #584 <Field boolean mEnableFastScroller>
	//* 270  541:ifeq            586
	//* 271  544:aload_0         
	//* 272  545:aload           6
	//* 273  547:getstatic       #587 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalThumbDrawable>
	//* 274  550:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 275  553:checkcast       #593 <Class StateListDrawable>
	//* 276  556:aload           6
	//* 277  558:getstatic       #596 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalTrackDrawable>
	//* 278  561:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 279  564:aload           6
	//* 280  566:getstatic       #599 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalThumbDrawable>
	//* 281  569:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 282  572:checkcast       #593 <Class StateListDrawable>
	//* 283  575:aload           6
	//* 284  577:getstatic       #602 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalTrackDrawable>
	//* 285  580:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 286  583:invokevirtual   #606 <Method void initFastScroller(StateListDrawable, Drawable, StateListDrawable, Drawable)>
	//* 287  586:aload           6
	//* 288  588:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 289  591:aload_0         
	//* 290  592:aload_1         
	//* 291  593:aload           7
	//* 292  595:aload_2         
	//* 293  596:iload_3         
	//* 294  597:iconst_0        
	//* 295  598:invokespecial   #610 <Method void createLayoutManager(Context, String, AttributeSet, int, int)>
	//* 296  601:iload           5
	//* 297  603:istore          4
	//* 298  605:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//* 299  608:bipush          21
	//* 300  610:icmplt          636
	//* 301  613:aload_1         
	//* 302  614:aload_2         
	//* 303  615:getstatic       #311 <Field int[] NESTED_SCROLLING_ATTRS>
	//* 304  618:iload_3         
	//* 305  619:iconst_0        
	//* 306  620:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 307  623:astore_1        
	//* 308  624:aload_1         
	//* 309  625:iconst_0        
	//* 310  626:iconst_1        
	//* 311  627:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 312  630:istore          4
	//* 313  632:aload_1         
	//* 314  633:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 315  636:aload_0         
	//* 316  637:iload           4
	//* 317  639:invokevirtual   #613 <Method void setNestedScrollingEnabled(boolean)>
	//* 318  642:return          
			obj = null;
	//  319  643:aconst_null     
	//  320  644:astore          6
		mPrefetchRegistry = ((GapWorker.LayoutPrefetchRegistryImpl) (obj));
		mState = new State();
		mItemsAddedOrRemoved = false;
		mItemsChanged = false;
		mItemAnimatorListener = ((ItemAnimator.ItemAnimatorListener) (new ItemAnimatorRestoreListener()));
		mPostedAnimatorRunner = false;
		mMinMaxLayoutPositions = new int[2];
		mScrollOffset = new int[2];
		mScrollConsumed = new int[2];
		mNestedOffsets = new int[2];
		mPendingAccessibilityImportanceChange = ((List) (new ArrayList()));
		mViewInfoProcessCallback = new ViewInfoStore.ProcessCallback() {

			public void processAppeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				animateAppearance(viewholder, itemholderinfo, itemholderinfo1);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #23  <Method void RecyclerView.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//    6   10:return          
			}

			public void processDisappeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				mRecycler.unscrapView(viewholder);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    3    7:aload_1         
			//    4    8:invokevirtual   #36  <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
				animateDisappearance(viewholder, itemholderinfo, itemholderinfo1);
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:aload_1         
			//    8   16:aload_2         
			//    9   17:aload_3         
			//   10   18:invokevirtual   #39  <Method void RecyclerView.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//   11   21:return          
			}

			public void processPersistent(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				viewholder.setIsRecyclable(false);
			//    0    0:aload_1         
			//    1    1:iconst_0        
			//    2    2:invokevirtual   #47  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(mDataSetHasChangedAfterLayout)
			//*   3    5:aload_0         
			//*   4    6:getfield        #14  <Field RecyclerView this$0>
			//*   5    9:getfield        #51  <Field boolean RecyclerView.mDataSetHasChangedAfterLayout>
			//*   6   12:ifeq            40
				{
					if(mItemAnimator.animateChange(viewholder, viewholder, itemholderinfo, itemholderinfo1))
			//*   7   15:aload_0         
			//*   8   16:getfield        #14  <Field RecyclerView this$0>
			//*   9   19:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  10   22:aload_1         
			//*  11   23:aload_1         
			//*  12   24:aload_2         
			//*  13   25:aload_3         
			//*  14   26:invokevirtual   #61  <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  15   29:ifeq            39
						postAnimationRunner();
			//   16   32:aload_0         
			//   17   33:getfield        #14  <Field RecyclerView this$0>
			//   18   36:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
				} else
			//*  19   39:return          
				if(mItemAnimator.animatePersistence(viewholder, itemholderinfo, itemholderinfo1))
			//*  20   40:aload_0         
			//*  21   41:getfield        #14  <Field RecyclerView this$0>
			//*  22   44:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  23   47:aload_1         
			//*  24   48:aload_2         
			//*  25   49:aload_3         
			//*  26   50:invokevirtual   #68  <Method boolean RecyclerView$ItemAnimator.animatePersistence(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  27   53:ifeq            39
				{
					postAnimationRunner();
			//   28   56:aload_0         
			//   29   57:getfield        #14  <Field RecyclerView this$0>
			//   30   60:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
					return;
			//   31   63:return          
				}
			}

			public void unused(ViewHolder viewholder)
			{
				mLayout.removeAndRecycleView(viewholder.itemView, mRecycler);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #73  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    3    7:aload_1         
			//    4    8:getfield        #77  <Field View RecyclerView$ViewHolder.itemView>
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    8   18:invokevirtual   #83  <Method void RecyclerView$LayoutManager.removeAndRecycleView(View, RecyclerView$Recycler)>
			//    9   21:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
		if(attributeset != null)
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, CLIP_TO_PADDING_ATTR, i, 0)));
			mClipToPadding = ((TypedArray) (obj)).getBoolean(0, true);
			((TypedArray) (obj)).recycle();
		} else
	//* 321  646:goto            199
		{
			mClipToPadding = true;
	//  322  649:aload_0         
	//  323  650:iconst_1        
	//  324  651:putfield        #468 <Field boolean mClipToPadding>
		}
		setScrollContainer(true);
		setFocusableInTouchMode(true);
		obj = ((Object) (ViewConfiguration.get(context)));
		mTouchSlop = ((ViewConfiguration) (obj)).getScaledTouchSlop();
		mScaledHorizontalScrollFactor = ViewConfigurationCompat.getScaledHorizontalScrollFactor(((ViewConfiguration) (obj)), context);
		mScaledVerticalScrollFactor = ViewConfigurationCompat.getScaledVerticalScrollFactor(((ViewConfiguration) (obj)), context);
		mMinFlingVelocity = ((ViewConfiguration) (obj)).getScaledMinimumFlingVelocity();
		mMaxFlingVelocity = ((ViewConfiguration) (obj)).getScaledMaximumFlingVelocity();
		if(getOverScrollMode() == 2)
			flag = true;
		else
	//* 325  654:goto            338
			flag = false;
	//  326  657:iconst_0        
	//  327  658:istore          4
		setWillNotDraw(flag);
		mItemAnimator.setListener(mItemAnimatorListener);
		initAdapterManager();
		initChildrenHelper();
		if(ViewCompat.getImportantForAccessibility(((View) (this))) == 0)
			ViewCompat.setImportantForAccessibility(((View) (this)), 1);
		mAccessibilityManager = (AccessibilityManager)getContext().getSystemService("accessibility");
		setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
		if(attributeset != null)
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, 0)));
			String s = ((TypedArray) (obj)).getString(android.support.v7.recyclerview.R.styleable.RecyclerView_layoutManager);
			if(((TypedArray) (obj)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_descendantFocusability, -1) == -1)
				setDescendantFocusability(0x40000);
			mEnableFastScroller = ((TypedArray) (obj)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollEnabled, false);
			if(mEnableFastScroller)
				initFastScroller((StateListDrawable)((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalThumbDrawable), ((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalTrackDrawable), (StateListDrawable)((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalThumbDrawable), ((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalTrackDrawable));
			((TypedArray) (obj)).recycle();
			createLayoutManager(context, s, attributeset, i, 0);
			flag = flag1;
			if(android.os.Build.VERSION.SDK_INT >= 21)
			{
				context = ((Context) (context.obtainStyledAttributes(attributeset, NESTED_SCROLLING_ATTRS, i, 0)));
				flag = ((TypedArray) (context)).getBoolean(0, true);
				((TypedArray) (context)).recycle();
			}
		} else
	//* 328  660:goto            412
		{
			setDescendantFocusability(0x40000);
	//  329  663:aload_0         
	//  330  664:ldc2            #575 <Int 0x40000>
	//  331  667:invokevirtual   #579 <Method void setDescendantFocusability(int)>
			flag = flag1;
	//  332  670:iload           5
	//  333  672:istore          4
		}
		setNestedScrollingEnabled(flag);
	//* 334  674:goto            636
	}

	private void addAnimatingView(ViewHolder viewholder)
	{
		View view = viewholder.itemView;
	//    0    0:aload_1         
	//    1    1:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//    2    4:astore_3        
		boolean flag;
		if(view.getParent() == this)
	//*   3    5:aload_3         
	//*   4    6:invokevirtual   #651 <Method ViewParent View.getParent()>
	//*   5    9:aload_0         
	//*   6   10:if_acmpne       49
			flag = true;
	//    7   13:iconst_1        
	//    8   14:istore_2        
		else
	//*   9   15:aload_0         
	//*  10   16:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//*  11   19:aload_0         
	//*  12   20:aload_3         
	//*  13   21:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//*  14   24:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
	//*  15   27:aload_1         
	//*  16   28:invokevirtual   #661 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*  17   31:ifeq            54
	//*  18   34:aload_0         
	//*  19   35:getfield        #663 <Field ChildHelper mChildHelper>
	//*  20   38:aload_3         
	//*  21   39:iconst_m1       
	//*  22   40:aload_3         
	//*  23   41:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//*  24   44:iconst_1        
	//*  25   45:invokevirtual   #672 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
	//*  26   48:return          
			flag = false;
	//   27   49:iconst_0        
	//   28   50:istore_2        
		mRecycler.unscrapView(getChildViewHolder(view));
		if(viewholder.isTmpDetached())
		{
			mChildHelper.attachViewToParent(view, -1, view.getLayoutParams(), true);
			return;
		}
	//*  29   51:goto            15
		if(!flag)
	//*  30   54:iload_2         
	//*  31   55:ifne            68
		{
			mChildHelper.addView(view, true);
	//   32   58:aload_0         
	//   33   59:getfield        #663 <Field ChildHelper mChildHelper>
	//   34   62:aload_3         
	//   35   63:iconst_1        
	//   36   64:invokevirtual   #676 <Method void ChildHelper.addView(View, boolean)>
			return;
	//   37   67:return          
		} else
		{
			mChildHelper.hide(view);
	//   38   68:aload_0         
	//   39   69:getfield        #663 <Field ChildHelper mChildHelper>
	//   40   72:aload_3         
	//   41   73:invokevirtual   #680 <Method void ChildHelper.hide(View)>
			return;
	//   42   76:return          
		}
	}

	private void animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1, boolean flag, boolean flag1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(flag)
	//*   3    5:iload           5
	//*   4    7:ifeq            15
			addAnimatingView(viewholder);
	//    5   10:aload_0         
	//    6   11:aload_1         
	//    7   12:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		if(viewholder != viewholder1)
	//*   8   15:aload_1         
	//*   9   16:aload_2         
	//*  10   17:if_acmpeq       58
		{
			if(flag1)
	//*  11   20:iload           6
	//*  12   22:ifeq            30
				addAnimatingView(viewholder1);
	//   13   25:aload_0         
	//   14   26:aload_2         
	//   15   27:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			viewholder.mShadowedHolder = viewholder1;
	//   16   30:aload_1         
	//   17   31:aload_2         
	//   18   32:putfield        #692 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			addAnimatingView(viewholder);
	//   19   35:aload_0         
	//   20   36:aload_1         
	//   21   37:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			mRecycler.unscrapView(viewholder);
	//   22   40:aload_0         
	//   23   41:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   24   44:aload_1         
	//   25   45:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			viewholder1.setIsRecyclable(false);
	//   26   48:aload_2         
	//   27   49:iconst_0        
	//   28   50:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			viewholder1.mShadowingHolder = viewholder;
	//   29   53:aload_2         
	//   30   54:aload_1         
	//   31   55:putfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		}
		if(mItemAnimator.animateChange(viewholder, viewholder1, itemholderinfo, itemholderinfo1))
	//*  32   58:aload_0         
	//*  33   59:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   62:aload_1         
	//*  35   63:aload_2         
	//*  36   64:aload_3         
	//*  37   65:aload           4
	//*  38   67:invokevirtual   #698 <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  39   70:ifeq            77
			postAnimationRunner();
	//   40   73:aload_0         
	//   41   74:invokevirtual   #701 <Method void postAnimationRunner()>
	//   42   77:return          
	}

	private void cancelTouch()
	{
		resetTouch();
	//    0    0:aload_0         
	//    1    1:invokespecial   #705 <Method void resetTouch()>
		setScrollState(0);
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:invokevirtual   #708 <Method void setScrollState(int)>
	//    5    9:return          
	}

	static void clearNestedRecyclerViewIfNotNested(ViewHolder viewholder)
	{
		if(viewholder.mNestedRecyclerView == null) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//    2    4:ifnull          30
_L1:
		Object obj = ((Object) ((View)viewholder.mNestedRecyclerView.get()));
	//    3    7:aload_0         
	//    4    8:getfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//    5   11:invokevirtual   #718 <Method Object WeakReference.get()>
	//    6   14:checkcast       #647 <Class View>
	//    7   17:astore_1        
_L5:
		if(obj == null)
			break; /* Loop/switch isn't completed */
	//    8   18:aload_1         
	//    9   19:ifnull          56
		if(obj != viewholder.itemView) goto _L3; else goto _L2
	//   10   22:aload_1         
	//   11   23:aload_0         
	//   12   24:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   13   27:if_acmpne       31
_L2:
		return;
	//   14   30:return          
_L3:
		obj = ((Object) (((View) (obj)).getParent()));
	//   15   31:aload_1         
	//   16   32:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   17   35:astore_1        
		if(obj instanceof View)
	//*  18   36:aload_1         
	//*  19   37:instanceof      #647 <Class View>
	//*  20   40:ifeq            51
			obj = ((Object) ((View)obj));
	//   21   43:aload_1         
	//   22   44:checkcast       #647 <Class View>
	//   23   47:astore_1        
		else
	//*  24   48:goto            18
			obj = null;
	//   25   51:aconst_null     
	//   26   52:astore_1        
		if(true) goto _L5; else goto _L4
	//   27   53:goto            18
_L4:
		viewholder.mNestedRecyclerView = null;
	//   28   56:aload_0         
	//   29   57:aconst_null     
	//   30   58:putfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		return;
	//   31   61:return          
	}

	private void createLayoutManager(Context context, String s, AttributeSet attributeset, int i, int j)
	{
		if(s == null) goto _L2; else goto _L1
	//    0    0:aload_2         
	//    1    1:ifnull          386
_L1:
		s = s.trim();
	//    2    4:aload_2         
	//    3    5:invokevirtual   #736 <Method String String.trim()>
	//    4    8:astore_2        
		if(s.isEmpty()) goto _L2; else goto _L3
	//    5    9:aload_2         
	//    6   10:invokevirtual   #739 <Method boolean String.isEmpty()>
	//    7   13:ifne            386
_L3:
		String s1 = getFullClassName(context, s);
	//    8   16:aload_0         
	//    9   17:aload_1         
	//   10   18:aload_2         
	//   11   19:invokespecial   #743 <Method String getFullClassName(Context, String)>
	//   12   22:astore          7
		if(!isInEditMode()) goto _L5; else goto _L4
	//   13   24:aload_0         
	//   14   25:invokevirtual   #746 <Method boolean isInEditMode()>
	//   15   28:ifeq            116
_L4:
		s = ((String) (((Object)this).getClass().getClassLoader()));
	//   16   31:aload_0         
	//   17   32:invokevirtual   #752 <Method Class Object.getClass()>
	//   18   35:invokevirtual   #756 <Method ClassLoader Class.getClassLoader()>
	//   19   38:astore_2        
_L8:
		Class class1 = ((ClassLoader) (s)).loadClass(s1).asSubclass(android/support/v7/widget/RecyclerView$LayoutManager);
	//   20   39:aload_2         
	//   21   40:aload           7
	//   22   42:invokevirtual   #762 <Method Class ClassLoader.loadClass(String)>
	//   23   45:ldc1            #55  <Class RecyclerView$LayoutManager>
	//   24   47:invokevirtual   #766 <Method Class Class.asSubclass(Class)>
	//   25   50:astore          8
		Object aobj[];
		s = ((String) (class1.getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE)));
	//   26   52:aload           8
	//   27   54:getstatic       #345 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   28   57:invokevirtual   #770 <Method Constructor Class.getConstructor(Class[])>
	//   29   60:astore_2        
		aobj = new Object[4];
	//   30   61:iconst_4        
	//   31   62:anewarray       Object[]
	//   32   65:astore          6
		aobj[0] = ((Object) (context));
	//   33   67:aload           6
	//   34   69:iconst_0        
	//   35   70:aload_1         
	//   36   71:aastore         
		aobj[1] = ((Object) (attributeset));
	//   37   72:aload           6
	//   38   74:iconst_1        
	//   39   75:aload_3         
	//   40   76:aastore         
		aobj[2] = ((Object) (Integer.valueOf(i)));
	//   41   77:aload           6
	//   42   79:iconst_2        
	//   43   80:iload           4
	//   44   82:invokestatic    #774 <Method Integer Integer.valueOf(int)>
	//   45   85:aastore         
		aobj[3] = ((Object) (Integer.valueOf(j)));
	//   46   86:aload           6
	//   47   88:iconst_3        
	//   48   89:iload           5
	//   49   91:invokestatic    #774 <Method Integer Integer.valueOf(int)>
	//   50   94:aastore         
		context = ((Context) (aobj));
	//   51   95:aload           6
	//   52   97:astore_1        
_L6:
		try
		{
			((Constructor) (s)).setAccessible(true);
	//   53   98:aload_2         
	//   54   99:iconst_1        
	//   55  100:invokevirtual   #779 <Method void Constructor.setAccessible(boolean)>
			setLayoutManager((LayoutManager)((Constructor) (s)).newInstance(((Object []) (context))));
	//   56  103:aload_0         
	//   57  104:aload_2         
	//   58  105:aload_1         
	//   59  106:invokevirtual   #783 <Method Object Constructor.newInstance(Object[])>
	//   60  109:checkcast       #55  <Class RecyclerView$LayoutManager>
	//   61  112:invokevirtual   #787 <Method void setLayoutManager(RecyclerView$LayoutManager)>
			return;
	//   62  115:return          
		}
	//*  63  116:aload_1         
	//*  64  117:invokevirtual   #788 <Method ClassLoader Context.getClassLoader()>
	//*  65  120:astore_2        
	//*  66  121:goto            39
	//*  67  124:astore_1        
	//*  68  125:aload           8
	//*  69  127:iconst_0        
	//*  70  128:anewarray       Class[]
	//*  71  131:invokevirtual   #770 <Method Constructor Class.getConstructor(Class[])>
	//*  72  134:astore_2        
	//*  73  135:aconst_null     
	//*  74  136:astore_1        
	//*  75  137:goto            98
	//*  76  140:astore_2        
	//*  77  141:aload_2         
	//*  78  142:aload_1         
	//*  79  143:invokevirtual   #792 <Method Throwable NoSuchMethodException.initCause(Throwable)>
	//*  80  146:pop             
	//*  81  147:new             #794 <Class IllegalStateException>
	//*  82  150:dup             
	//*  83  151:new             #796 <Class StringBuilder>
	//*  84  154:dup             
	//*  85  155:invokespecial   #797 <Method void StringBuilder()>
	//*  86  158:aload_3         
	//*  87  159:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//*  88  164:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  89  167:ldc2            #806 <String ": Error creating LayoutManager ">
	//*  90  170:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  91  173:aload           7
	//*  92  175:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  93  178:invokevirtual   #809 <Method String StringBuilder.toString()>
	//*  94  181:aload_2         
	//*  95  182:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//*  96  185:athrow          
		// Misplaced declaration of an exception variable
		catch(Context context)
	//*  97  186:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Unable to find LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//   98  187:new             #794 <Class IllegalStateException>
	//   99  190:dup             
	//  100  191:new             #796 <Class StringBuilder>
	//  101  194:dup             
	//  102  195:invokespecial   #797 <Method void StringBuilder()>
	//  103  198:aload_3         
	//  104  199:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  105  204:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  106  207:ldc2            #814 <String ": Unable to find LayoutManager ">
	//  107  210:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  108  213:aload           7
	//  109  215:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  110  218:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  111  221:aload_1         
	//  112  222:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  113  225:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 114  226:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  115  227:new             #794 <Class IllegalStateException>
	//  116  230:dup             
	//  117  231:new             #796 <Class StringBuilder>
	//  118  234:dup             
	//  119  235:invokespecial   #797 <Method void StringBuilder()>
	//  120  238:aload_3         
	//  121  239:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  122  244:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  123  247:ldc2            #816 <String ": Could not instantiate the LayoutManager: ">
	//  124  250:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  125  253:aload           7
	//  126  255:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  127  258:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  128  261:aload_1         
	//  129  262:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  130  265:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 131  266:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  132  267:new             #794 <Class IllegalStateException>
	//  133  270:dup             
	//  134  271:new             #796 <Class StringBuilder>
	//  135  274:dup             
	//  136  275:invokespecial   #797 <Method void StringBuilder()>
	//  137  278:aload_3         
	//  138  279:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  139  284:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  140  287:ldc2            #816 <String ": Could not instantiate the LayoutManager: ">
	//  141  290:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  142  293:aload           7
	//  143  295:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  144  298:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  145  301:aload_1         
	//  146  302:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  147  305:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 148  306:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Cannot access non-public constructor ").append(s1).toString(), ((Throwable) (context)));
	//  149  307:new             #794 <Class IllegalStateException>
	//  150  310:dup             
	//  151  311:new             #796 <Class StringBuilder>
	//  152  314:dup             
	//  153  315:invokespecial   #797 <Method void StringBuilder()>
	//  154  318:aload_3         
	//  155  319:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  156  324:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  157  327:ldc2            #818 <String ": Cannot access non-public constructor ">
	//  158  330:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  159  333:aload           7
	//  160  335:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  161  338:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  162  341:aload_1         
	//  163  342:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  164  345:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 165  346:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Class is not a LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//  166  347:new             #794 <Class IllegalStateException>
	//  167  350:dup             
	//  168  351:new             #796 <Class StringBuilder>
	//  169  354:dup             
	//  170  355:invokespecial   #797 <Method void StringBuilder()>
	//  171  358:aload_3         
	//  172  359:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  173  364:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  174  367:ldc2            #820 <String ": Class is not a LayoutManager ">
	//  175  370:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  176  373:aload           7
	//  177  375:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  178  378:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  179  381:aload_1         
	//  180  382:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  181  385:athrow          
		}
_L5:
		s = ((String) (context.getClassLoader()));
		continue; /* Loop/switch isn't completed */
		context;
		s = ((String) (class1.getConstructor(new Class[0])));
		context = null;
		  goto _L6
		s;
		((NoSuchMethodException) (s)).initCause(((Throwable) (context)));
		throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Error creating LayoutManager ").append(s1).toString(), ((Throwable) (s)));
_L2:
		return;
	//  182  386:return          
		if(true) goto _L8; else goto _L7
_L7:
	}

	private boolean didChildRangeChange(int i, int j)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore_3        
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//    2    2:aload_0         
	//    3    3:aload_0         
	//    4    4:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//    5    7:invokespecial   #826 <Method void findMinMaxChildLayoutPositions(int[])>
		if(mMinMaxLayoutPositions[0] != i || mMinMaxLayoutPositions[1] != j)
	//*   6   10:aload_0         
	//*   7   11:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*   8   14:iconst_0        
	//*   9   15:iaload          
	//*  10   16:iload_1         
	//*  11   17:icmpne          30
	//*  12   20:aload_0         
	//*  13   21:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*  14   24:iconst_1        
	//*  15   25:iaload          
	//*  16   26:iload_2         
	//*  17   27:icmpeq          32
			flag = true;
	//   18   30:iconst_1        
	//   19   31:istore_3        
		return flag;
	//   20   32:iload_3         
	//   21   33:ireturn         
	}

	private void dispatchContentChangedIfNecessary()
	{
		int i = mEatenAccessibilityChangeFlags;
	//    0    0:aload_0         
	//    1    1:getfield        #829 <Field int mEatenAccessibilityChangeFlags>
	//    2    4:istore_1        
		mEatenAccessibilityChangeFlags = 0;
	//    3    5:aload_0         
	//    4    6:iconst_0        
	//    5    7:putfield        #829 <Field int mEatenAccessibilityChangeFlags>
		if(i != 0 && isAccessibilityEnabled())
	//*   6   10:iload_1         
	//*   7   11:ifeq            42
	//*   8   14:aload_0         
	//*   9   15:invokevirtual   #832 <Method boolean isAccessibilityEnabled()>
	//*  10   18:ifeq            42
		{
			AccessibilityEvent accessibilityevent = AccessibilityEvent.obtain();
	//   11   21:invokestatic    #838 <Method AccessibilityEvent AccessibilityEvent.obtain()>
	//   12   24:astore_2        
			accessibilityevent.setEventType(2048);
	//   13   25:aload_2         
	//   14   26:sipush          2048
	//   15   29:invokevirtual   #841 <Method void AccessibilityEvent.setEventType(int)>
			AccessibilityEventCompat.setContentChangeTypes(accessibilityevent, i);
	//   16   32:aload_2         
	//   17   33:iload_1         
	//   18   34:invokestatic    #847 <Method void AccessibilityEventCompat.setContentChangeTypes(AccessibilityEvent, int)>
			sendAccessibilityEventUnchecked(accessibilityevent);
	//   19   37:aload_0         
	//   20   38:aload_2         
	//   21   39:invokevirtual   #851 <Method void sendAccessibilityEventUnchecked(AccessibilityEvent)>
		}
	//   22   42:return          
	}

	private void dispatchLayoutStep1()
	{
		boolean flag = true;
	//    0    0:iconst_1        
	//    1    1:istore          4
		mState.assertLayoutStep(1);
	//    2    3:aload_0         
	//    3    4:getfield        #431 <Field RecyclerView$State mState>
	//    4    7:iconst_1        
	//    5    8:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		fillRemainingScrollValues(mState);
	//    6   11:aload_0         
	//    7   12:aload_0         
	//    8   13:getfield        #431 <Field RecyclerView$State mState>
	//    9   16:invokevirtual   #859 <Method void fillRemainingScrollValues(RecyclerView$State)>
		mState.mIsMeasuring = false;
	//   10   19:aload_0         
	//   11   20:getfield        #431 <Field RecyclerView$State mState>
	//   12   23:iconst_0        
	//   13   24:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
		eatRequestLayout();
	//   14   27:aload_0         
	//   15   28:invokevirtual   #865 <Method void eatRequestLayout()>
		mViewInfoStore.clear();
	//   16   31:aload_0         
	//   17   32:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   18   35:invokevirtual   #868 <Method void ViewInfoStore.clear()>
		onEnterLayoutOrScroll();
	//   19   38:aload_0         
	//   20   39:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		processAdapterUpdatesAndSetAnimationFlags();
	//   21   42:aload_0         
	//   22   43:invokespecial   #874 <Method void processAdapterUpdatesAndSetAnimationFlags()>
		saveFocusInfo();
	//   23   46:aload_0         
	//   24   47:invokespecial   #877 <Method void saveFocusInfo()>
		State state = mState;
	//   25   50:aload_0         
	//   26   51:getfield        #431 <Field RecyclerView$State mState>
	//   27   54:astore          7
		if(!mState.mRunSimpleAnimations || !mItemsChanged)
	//*  28   56:aload_0         
	//*  29   57:getfield        #431 <Field RecyclerView$State mState>
	//*  30   60:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  31   63:ifeq            197
	//*  32   66:aload_0         
	//*  33   67:getfield        #435 <Field boolean mItemsChanged>
	//*  34   70:ifeq            197
	//*  35   73:aload           7
	//*  36   75:iload           4
	//*  37   77:putfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*  38   80:aload_0         
	//*  39   81:iconst_0        
	//*  40   82:putfield        #435 <Field boolean mItemsChanged>
	//*  41   85:aload_0         
	//*  42   86:iconst_0        
	//*  43   87:putfield        #433 <Field boolean mItemsAddedOrRemoved>
	//*  44   90:aload_0         
	//*  45   91:getfield        #431 <Field RecyclerView$State mState>
	//*  46   94:aload_0         
	//*  47   95:getfield        #431 <Field RecyclerView$State mState>
	//*  48   98:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//*  49  101:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
	//*  50  104:aload_0         
	//*  51  105:getfield        #431 <Field RecyclerView$State mState>
	//*  52  108:aload_0         
	//*  53  109:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  54  112:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//*  55  115:putfield        #897 <Field int RecyclerView$State.mItemCount>
	//*  56  118:aload_0         
	//*  57  119:aload_0         
	//*  58  120:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*  59  123:invokespecial   #826 <Method void findMinMaxChildLayoutPositions(int[])>
	//*  60  126:aload_0         
	//*  61  127:getfield        #431 <Field RecyclerView$State mState>
	//*  62  130:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  63  133:ifeq            303
	//*  64  136:aload_0         
	//*  65  137:getfield        #663 <Field ChildHelper mChildHelper>
	//*  66  140:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  67  143:istore_2        
	//*  68  144:iconst_0        
	//*  69  145:istore_1        
	//*  70  146:iload_1         
	//*  71  147:iload_2         
	//*  72  148:icmpge          303
	//*  73  151:aload_0         
	//*  74  152:getfield        #663 <Field ChildHelper mChildHelper>
	//*  75  155:iload_1         
	//*  76  156:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//*  77  159:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  78  162:astore          7
	//*  79  164:aload           7
	//*  80  166:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  81  169:ifne            190
	//*  82  172:aload           7
	//*  83  174:invokevirtual   #913 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//*  84  177:ifeq            203
	//*  85  180:aload_0         
	//*  86  181:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  87  184:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  88  187:ifne            203
	//*  89  190:iload_1         
	//*  90  191:iconst_1        
	//*  91  192:iadd            
	//*  92  193:istore_1        
	//*  93  194:goto            146
			flag = false;
	//   94  197:iconst_0        
	//   95  198:istore          4
		state.mTrackOldChangeHolders = flag;
		mItemsChanged = false;
		mItemsAddedOrRemoved = false;
		mState.mInPreLayout = mState.mRunPredictiveAnimations;
		mState.mItemCount = mAdapter.getItemCount();
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
		if(mState.mRunSimpleAnimations)
		{
			int k = mChildHelper.getChildCount();
			int i = 0;
			while(i < k) 
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
				if(!viewholder.shouldIgnore() && (!viewholder.isInvalid() || mAdapter.hasStableIds()))
	//*  96  200:goto            73
				{
					ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, viewholder, ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder), viewholder.getUnmodifiedPayloads());
	//   97  203:aload_0         
	//   98  204:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   99  207:aload_0         
	//  100  208:getfield        #431 <Field RecyclerView$State mState>
	//  101  211:aload           7
	//  102  213:aload           7
	//  103  215:invokestatic    #920 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  104  218:aload           7
	//  105  220:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  106  223:invokevirtual   #928 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  107  226:astore          8
					mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//  108  228:aload_0         
	//  109  229:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  110  232:aload           7
	//  111  234:aload           8
	//  112  236:invokevirtual   #932 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore() && !viewholder.isInvalid())
	//* 113  239:aload_0         
	//* 114  240:getfield        #431 <Field RecyclerView$State mState>
	//* 115  243:getfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//* 116  246:ifeq            190
	//* 117  249:aload           7
	//* 118  251:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//* 119  254:ifeq            190
	//* 120  257:aload           7
	//* 121  259:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//* 122  262:ifne            190
	//* 123  265:aload           7
	//* 124  267:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 125  270:ifne            190
	//* 126  273:aload           7
	//* 127  275:invokevirtual   #913 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//* 128  278:ifne            190
					{
						long l1 = getChangedHolderKey(viewholder);
	//  129  281:aload_0         
	//  130  282:aload           7
	//  131  284:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//  132  287:lstore          5
						mViewInfoStore.addToOldChangeHolders(l1, viewholder);
	//  133  289:aload_0         
	//  134  290:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  135  293:lload           5
	//  136  295:aload           7
	//  137  297:invokevirtual   #946 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
					}
				}
				i++;
			}
		}
	//* 138  300:goto            190
		if(!mState.mRunPredictiveAnimations) goto _L2; else goto _L1
	//  139  303:aload_0         
	//  140  304:getfield        #431 <Field RecyclerView$State mState>
	//  141  307:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//  142  310:ifeq            513
_L1:
		saveOldPositions();
	//  143  313:aload_0         
	//  144  314:invokevirtual   #949 <Method void saveOldPositions()>
		boolean flag1 = mState.mStructureChanged;
	//  145  317:aload_0         
	//  146  318:getfield        #431 <Field RecyclerView$State mState>
	//  147  321:getfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
	//  148  324:istore          4
		mState.mStructureChanged = false;
	//  149  326:aload_0         
	//  150  327:getfield        #431 <Field RecyclerView$State mState>
	//  151  330:iconst_0        
	//  152  331:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		mLayout.onLayoutChildren(mRecycler, mState);
	//  153  334:aload_0         
	//  154  335:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  155  338:aload_0         
	//  156  339:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  157  342:aload_0         
	//  158  343:getfield        #431 <Field RecyclerView$State mState>
	//  159  346:invokevirtual   #958 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = flag1;
	//  160  349:aload_0         
	//  161  350:getfield        #431 <Field RecyclerView$State mState>
	//  162  353:iload           4
	//  163  355:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		int j = 0;
	//  164  358:iconst_0        
	//  165  359:istore_1        
		do
		{
			if(j >= mChildHelper.getChildCount())
				break;
	//  166  360:iload_1         
	//  167  361:aload_0         
	//  168  362:getfield        #663 <Field ChildHelper mChildHelper>
	//  169  365:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//  170  368:icmpge          491
			ViewHolder viewholder1 = getChildViewHolderInt(mChildHelper.getChildAt(j));
	//  171  371:aload_0         
	//  172  372:getfield        #663 <Field ChildHelper mChildHelper>
	//  173  375:iload_1         
	//  174  376:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//  175  379:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//  176  382:astore          7
			if(!viewholder1.shouldIgnore() && !mViewInfoStore.isInPreLayout(viewholder1))
	//* 177  384:aload           7
	//* 178  386:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 179  389:ifeq            399
	//* 180  392:iload_1         
	//* 181  393:iconst_1        
	//* 182  394:iadd            
	//* 183  395:istore_1        
	//* 184  396:goto            360
	//* 185  399:aload_0         
	//* 186  400:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//* 187  403:aload           7
	//* 188  405:invokevirtual   #962 <Method boolean ViewInfoStore.isInPreLayout(RecyclerView$ViewHolder)>
	//* 189  408:ifne            392
			{
				int i1 = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder1);
	//  190  411:aload           7
	//  191  413:invokestatic    #920 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  192  416:istore_3        
				boolean flag2 = viewholder1.hasAnyOfTheFlags(8192);
	//  193  417:aload           7
	//  194  419:sipush          8192
	//  195  422:invokevirtual   #966 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//  196  425:istore          4
				int l = i1;
	//  197  427:iload_3         
	//  198  428:istore_2        
				if(!flag2)
	//* 199  429:iload           4
	//* 200  431:ifne            440
					l = i1 | 0x1000;
	//  201  434:iload_3         
	//  202  435:sipush          4096
	//  203  438:ior             
	//  204  439:istore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPreLayoutInformation(mState, viewholder1, l, viewholder1.getUnmodifiedPayloads());
	//  205  440:aload_0         
	//  206  441:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  207  444:aload_0         
	//  208  445:getfield        #431 <Field RecyclerView$State mState>
	//  209  448:aload           7
	//  210  450:iload_2         
	//  211  451:aload           7
	//  212  453:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  213  456:invokevirtual   #928 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  214  459:astore          8
				if(flag2)
	//* 215  461:iload           4
	//* 216  463:ifeq            477
					recordAnimationInfoIfBouncedHiddenView(viewholder1, itemholderinfo1);
	//  217  466:aload_0         
	//  218  467:aload           7
	//  219  469:aload           8
	//  220  471:invokevirtual   #969 <Method void recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				else
	//* 221  474:goto            392
					mViewInfoStore.addToAppearedInPreLayoutHolders(viewholder1, itemholderinfo1);
	//  222  477:aload_0         
	//  223  478:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  224  481:aload           7
	//  225  483:aload           8
	//  226  485:invokevirtual   #972 <Method void ViewInfoStore.addToAppearedInPreLayoutHolders(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
			}
			j++;
		} while(true);
	//* 227  488:goto            392
		clearOldPositions();
	//  228  491:aload_0         
	//  229  492:invokevirtual   #975 <Method void clearOldPositions()>
_L4:
		onExitLayoutOrScroll();
	//  230  495:aload_0         
	//  231  496:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  232  499:aload_0         
	//  233  500:iconst_0        
	//  234  501:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
		mState.mLayoutStep = 2;
	//  235  504:aload_0         
	//  236  505:getfield        #431 <Field RecyclerView$State mState>
	//  237  508:iconst_2        
	//  238  509:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
		return;
	//  239  512:return          
_L2:
		clearOldPositions();
	//  240  513:aload_0         
	//  241  514:invokevirtual   #975 <Method void clearOldPositions()>
		if(true) goto _L4; else goto _L3
	//  242  517:goto            495
_L3:
	}

	private void dispatchLayoutStep2()
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #865 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		mState.assertLayoutStep(6);
	//    4    8:aload_0         
	//    5    9:getfield        #431 <Field RecyclerView$State mState>
	//    6   12:bipush          6
	//    7   14:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		mAdapterHelper.consumeUpdatesInOnePass();
	//    8   17:aload_0         
	//    9   18:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   10   21:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		mState.mItemCount = mAdapter.getItemCount();
	//   11   24:aload_0         
	//   12   25:getfield        #431 <Field RecyclerView$State mState>
	//   13   28:aload_0         
	//   14   29:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   15   32:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//   16   35:putfield        #897 <Field int RecyclerView$State.mItemCount>
		mState.mDeletedInvisibleItemCountSincePreviousLayout = 0;
	//   17   38:aload_0         
	//   18   39:getfield        #431 <Field RecyclerView$State mState>
	//   19   42:iconst_0        
	//   20   43:putfield        #995 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
		mState.mInPreLayout = false;
	//   21   46:aload_0         
	//   22   47:getfield        #431 <Field RecyclerView$State mState>
	//   23   50:iconst_0        
	//   24   51:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
		mLayout.onLayoutChildren(mRecycler, mState);
	//   25   54:aload_0         
	//   26   55:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   27   58:aload_0         
	//   28   59:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   29   62:aload_0         
	//   30   63:getfield        #431 <Field RecyclerView$State mState>
	//   31   66:invokevirtual   #958 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = false;
	//   32   69:aload_0         
	//   33   70:getfield        #431 <Field RecyclerView$State mState>
	//   34   73:iconst_0        
	//   35   74:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		mPendingSavedState = null;
	//   36   77:aload_0         
	//   37   78:aconst_null     
	//   38   79:putfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
		State state = mState;
	//   39   82:aload_0         
	//   40   83:getfield        #431 <Field RecyclerView$State mState>
	//   41   86:astore_2        
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemAnimator != null)
	//*  42   87:aload_0         
	//*  43   88:getfield        #431 <Field RecyclerView$State mState>
	//*  44   91:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  45   94:ifeq            129
	//*  46   97:aload_0         
	//*  47   98:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  48  101:ifnull          129
			flag = true;
	//   49  104:iconst_1        
	//   50  105:istore_1        
		else
	//*  51  106:aload_2         
	//*  52  107:iload_1         
	//*  53  108:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  54  111:aload_0         
	//*  55  112:getfield        #431 <Field RecyclerView$State mState>
	//*  56  115:iconst_4        
	//*  57  116:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  58  119:aload_0         
	//*  59  120:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
	//*  60  123:aload_0         
	//*  61  124:iconst_0        
	//*  62  125:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  63  128:return          
			flag = false;
	//   64  129:iconst_0        
	//   65  130:istore_1        
		state.mRunSimpleAnimations = flag;
		mState.mLayoutStep = 4;
		onExitLayoutOrScroll();
		resumeRequestLayout(false);
	//*  66  131:goto            106
	}

	private void dispatchLayoutStep3()
	{
		mState.assertLayoutStep(4);
	//    0    0:aload_0         
	//    1    1:getfield        #431 <Field RecyclerView$State mState>
	//    2    4:iconst_4        
	//    3    5:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		eatRequestLayout();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #865 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    6   12:aload_0         
	//    7   13:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		mState.mLayoutStep = 1;
	//    8   16:aload_0         
	//    9   17:getfield        #431 <Field RecyclerView$State mState>
	//   10   20:iconst_1        
	//   11   21:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
		if(mState.mRunSimpleAnimations)
	//*  12   24:aload_0         
	//*  13   25:getfield        #431 <Field RecyclerView$State mState>
	//*  14   28:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  15   31:ifeq            263
		{
			int i = mChildHelper.getChildCount() - 1;
	//   16   34:aload_0         
	//   17   35:getfield        #663 <Field ChildHelper mChildHelper>
	//   18   38:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//   19   41:iconst_1        
	//   20   42:isub            
	//   21   43:istore_1        
			while(i >= 0) 
	//*  22   44:iload_1         
	//*  23   45:iflt            252
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   24   48:aload_0         
	//   25   49:getfield        #663 <Field ChildHelper mChildHelper>
	//   26   52:iload_1         
	//   27   53:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   28   56:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   59:astore          6
				if(!viewholder.shouldIgnore())
	//*  30   61:aload           6
	//*  31   63:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   66:ifeq            76
	//*  33   69:iload_1         
	//*  34   70:iconst_1        
	//*  35   71:isub            
	//*  36   72:istore_1        
	//*  37   73:goto            44
				{
					long l = getChangedHolderKey(viewholder);
	//   38   76:aload_0         
	//   39   77:aload           6
	//   40   79:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   41   82:lstore_2        
					ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPostLayoutInformation(mState, viewholder);
	//   42   83:aload_0         
	//   43   84:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   44   87:aload_0         
	//   45   88:getfield        #431 <Field RecyclerView$State mState>
	//   46   91:aload           6
	//   47   93:invokevirtual   #1002 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPostLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder)>
	//   48   96:astore          9
					ViewHolder viewholder1 = mViewInfoStore.getFromOldChangeHolders(l);
	//   49   98:aload_0         
	//   50   99:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   51  102:lload_2         
	//   52  103:invokevirtual   #1006 <Method RecyclerView$ViewHolder ViewInfoStore.getFromOldChangeHolders(long)>
	//   53  106:astore          7
					if(viewholder1 != null && !viewholder1.shouldIgnore())
	//*  54  108:aload           7
	//*  55  110:ifnull          238
	//*  56  113:aload           7
	//*  57  115:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  58  118:ifne            238
					{
						boolean flag = mViewInfoStore.isDisappearing(viewholder1);
	//   59  121:aload_0         
	//   60  122:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   61  125:aload           7
	//   62  127:invokevirtual   #1009 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   63  130:istore          4
						boolean flag1 = mViewInfoStore.isDisappearing(viewholder);
	//   64  132:aload_0         
	//   65  133:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   66  136:aload           6
	//   67  138:invokevirtual   #1009 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   68  141:istore          5
						if(flag && viewholder1 == viewholder)
	//*  69  143:iload           4
	//*  70  145:ifeq            169
	//*  71  148:aload           7
	//*  72  150:aload           6
	//*  73  152:if_acmpne       169
						{
							mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   74  155:aload_0         
	//   75  156:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   76  159:aload           6
	//   77  161:aload           9
	//   78  163:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
						} else
	//*  79  166:goto            69
						{
							ItemAnimator.ItemHolderInfo itemholderinfo = mViewInfoStore.popFromPreLayout(viewholder1);
	//   80  169:aload_0         
	//   81  170:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   82  173:aload           7
	//   83  175:invokevirtual   #1016 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPreLayout(RecyclerView$ViewHolder)>
	//   84  178:astore          8
							mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   85  180:aload_0         
	//   86  181:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   87  184:aload           6
	//   88  186:aload           9
	//   89  188:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
							itemholderinfo1 = mViewInfoStore.popFromPostLayout(viewholder);
	//   90  191:aload_0         
	//   91  192:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   92  195:aload           6
	//   93  197:invokevirtual   #1019 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPostLayout(RecyclerView$ViewHolder)>
	//   94  200:astore          9
							if(itemholderinfo == null)
	//*  95  202:aload           8
	//*  96  204:ifnonnull       219
								handleMissingPreInfoForChangeError(l, viewholder, viewholder1);
	//   97  207:aload_0         
	//   98  208:lload_2         
	//   99  209:aload           6
	//  100  211:aload           7
	//  101  213:invokespecial   #1023 <Method void handleMissingPreInfoForChangeError(long, RecyclerView$ViewHolder, RecyclerView$ViewHolder)>
							else
	//* 102  216:goto            69
								animateChange(viewholder1, viewholder, itemholderinfo, itemholderinfo1, flag, flag1);
	//  103  219:aload_0         
	//  104  220:aload           7
	//  105  222:aload           6
	//  106  224:aload           8
	//  107  226:aload           9
	//  108  228:iload           4
	//  109  230:iload           5
	//  110  232:invokespecial   #1025 <Method void animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo, boolean, boolean)>
						}
					} else
	//* 111  235:goto            69
					{
						mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//  112  238:aload_0         
	//  113  239:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  114  242:aload           6
	//  115  244:aload           9
	//  116  246:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					}
				}
				i--;
			}
	//* 117  249:goto            69
			mViewInfoStore.process(mViewInfoProcessCallback);
	//  118  252:aload_0         
	//  119  253:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  120  256:aload_0         
	//  121  257:getfield        #456 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//  122  260:invokevirtual   #1029 <Method void ViewInfoStore.process(ViewInfoStore$ProcessCallback)>
		}
		mLayout.removeAndRecycleScrapInt(mRecycler);
	//  123  263:aload_0         
	//  124  264:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  125  267:aload_0         
	//  126  268:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  127  271:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		mState.mPreviousLayoutItemCount = mState.mItemCount;
	//  128  274:aload_0         
	//  129  275:getfield        #431 <Field RecyclerView$State mState>
	//  130  278:aload_0         
	//  131  279:getfield        #431 <Field RecyclerView$State mState>
	//  132  282:getfield        #897 <Field int RecyclerView$State.mItemCount>
	//  133  285:putfield        #1036 <Field int RecyclerView$State.mPreviousLayoutItemCount>
		mDataSetHasChangedAfterLayout = false;
	//  134  288:aload_0         
	//  135  289:iconst_0        
	//  136  290:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		mState.mRunSimpleAnimations = false;
	//  137  293:aload_0         
	//  138  294:getfield        #431 <Field RecyclerView$State mState>
	//  139  297:iconst_0        
	//  140  298:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mRunPredictiveAnimations = false;
	//  141  301:aload_0         
	//  142  302:getfield        #431 <Field RecyclerView$State mState>
	//  143  305:iconst_0        
	//  144  306:putfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
		mLayout.mRequestedSimpleAnimations = false;
	//  145  309:aload_0         
	//  146  310:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  147  313:iconst_0        
	//  148  314:putfield        #1039 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
		if(mRecycler.mChangedScrap != null)
	//* 149  317:aload_0         
	//* 150  318:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 151  321:getfield        #1042 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//* 152  324:ifnull          337
			mRecycler.mChangedScrap.clear();
	//  153  327:aload_0         
	//  154  328:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  155  331:getfield        #1042 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//  156  334:invokevirtual   #1043 <Method void ArrayList.clear()>
		if(mLayout.mPrefetchMaxObservedInInitialPrefetch)
	//* 157  337:aload_0         
	//* 158  338:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 159  341:getfield        #1046 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
	//* 160  344:ifeq            370
		{
			mLayout.mPrefetchMaxCountObserved = 0;
	//  161  347:aload_0         
	//  162  348:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  163  351:iconst_0        
	//  164  352:putfield        #1049 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
			mLayout.mPrefetchMaxObservedInInitialPrefetch = false;
	//  165  355:aload_0         
	//  166  356:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  167  359:iconst_0        
	//  168  360:putfield        #1046 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
			mRecycler.updateViewCacheSize();
	//  169  363:aload_0         
	//  170  364:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  171  367:invokevirtual   #1052 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		}
		mLayout.onLayoutCompleted(mState);
	//  172  370:aload_0         
	//  173  371:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  174  374:aload_0         
	//  175  375:getfield        #431 <Field RecyclerView$State mState>
	//  176  378:invokevirtual   #1055 <Method void RecyclerView$LayoutManager.onLayoutCompleted(RecyclerView$State)>
		onExitLayoutOrScroll();
	//  177  381:aload_0         
	//  178  382:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  179  385:aload_0         
	//  180  386:iconst_0        
	//  181  387:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
		mViewInfoStore.clear();
	//  182  390:aload_0         
	//  183  391:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  184  394:invokevirtual   #868 <Method void ViewInfoStore.clear()>
		if(didChildRangeChange(mMinMaxLayoutPositions[0], mMinMaxLayoutPositions[1]))
	//* 185  397:aload_0         
	//* 186  398:aload_0         
	//* 187  399:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 188  402:iconst_0        
	//* 189  403:iaload          
	//* 190  404:aload_0         
	//* 191  405:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 192  408:iconst_1        
	//* 193  409:iaload          
	//* 194  410:invokespecial   #1057 <Method boolean didChildRangeChange(int, int)>
	//* 195  413:ifeq            422
			dispatchOnScrolled(0, 0);
	//  196  416:aload_0         
	//  197  417:iconst_0        
	//  198  418:iconst_0        
	//  199  419:invokevirtual   #1060 <Method void dispatchOnScrolled(int, int)>
		recoverFocusFromState();
	//  200  422:aload_0         
	//  201  423:invokespecial   #1063 <Method void recoverFocusFromState()>
		resetFocusInfo();
	//  202  426:aload_0         
	//  203  427:invokespecial   #1066 <Method void resetFocusInfo()>
	//  204  430:return          
	}

	private boolean dispatchOnItemTouch(MotionEvent motionevent)
	{
		int i = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//    2    4:istore_2        
		if(mActiveOnItemTouchListener == null) goto _L2; else goto _L1
	//    3    5:aload_0         
	//    4    6:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//    5    9:ifnull          21
_L1:
		if(i != 0) goto _L4; else goto _L3
	//    6   12:iload_2         
	//    7   13:ifne            73
_L3:
		mActiveOnItemTouchListener = null;
	//    8   16:aload_0         
	//    9   17:aconst_null     
	//   10   18:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
_L2:
		if(i == 0) goto _L6; else goto _L5
	//   11   21:iload_2         
	//   12   22:ifeq            108
_L5:
		int j;
		j = mOnItemTouchListeners.size();
	//   13   25:aload_0         
	//   14   26:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   15   29:invokevirtual   #1078 <Method int ArrayList.size()>
	//   16   32:istore_3        
		i = 0;
	//   17   33:iconst_0        
	//   18   34:istore_2        
_L7:
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//   19   35:iload_2         
	//   20   36:iload_3         
	//   21   37:icmpge          108
		OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   22   40:aload_0         
	//   23   41:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   24   44:iload_2         
	//   25   45:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   26   48:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   27   51:astore          4
		if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent))
	//*  28   53:aload           4
	//*  29   55:aload_0         
	//*  30   56:aload_1         
	//*  31   57:invokeinterface #1085 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  32   62:ifeq            101
		{
			mActiveOnItemTouchListener = onitemtouchlistener;
	//   33   65:aload_0         
	//   34   66:aload           4
	//   35   68:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
			return true;
	//   36   71:iconst_1        
	//   37   72:ireturn         
		}
	//*  38   73:aload_0         
	//*  39   74:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*  40   77:aload_0         
	//*  41   78:aload_1         
	//*  42   79:invokeinterface #1089 <Method void RecyclerView$OnItemTouchListener.onTouchEvent(RecyclerView, MotionEvent)>
	//*  43   84:iload_2         
	//*  44   85:iconst_3        
	//*  45   86:icmpeq          94
	//*  46   89:iload_2         
	//*  47   90:iconst_1        
	//*  48   91:icmpne          99
	//*  49   94:aload_0         
	//*  50   95:aconst_null     
	//*  51   96:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*  52   99:iconst_1        
	//*  53  100:ireturn         
		i++;
	//   54  101:iload_2         
	//   55  102:iconst_1        
	//   56  103:iadd            
	//   57  104:istore_2        
		continue; /* Loop/switch isn't completed */
	//   58  105:goto            35
_L4:
		mActiveOnItemTouchListener.onTouchEvent(this, motionevent);
		if(i == 3 || i == 1)
			mActiveOnItemTouchListener = null;
		return true;
		if(true) goto _L7; else goto _L6
_L6:
		return false;
	//   59  108:iconst_0        
	//   60  109:ireturn         
	}

	private boolean dispatchOnItemTouchIntercept(MotionEvent motionevent)
	{
		int j = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//    2    4:istore_3        
		if(j == 3 || j == 0)
	//*   3    5:iload_3         
	//*   4    6:iconst_3        
	//*   5    7:icmpeq          14
	//*   6   10:iload_3         
	//*   7   11:ifne            19
			mActiveOnItemTouchListener = null;
	//    8   14:aload_0         
	//    9   15:aconst_null     
	//   10   16:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		int k = mOnItemTouchListeners.size();
	//   11   19:aload_0         
	//   12   20:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   13   23:invokevirtual   #1078 <Method int ArrayList.size()>
	//   14   26:istore          4
		for(int i = 0; i < k; i++)
	//*  15   28:iconst_0        
	//*  16   29:istore_2        
	//*  17   30:iload_2         
	//*  18   31:iload           4
	//*  19   33:icmpge          81
		{
			OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   20   36:aload_0         
	//   21   37:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   24   44:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   25   47:astore          5
			if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent) && j != 3)
	//*  26   49:aload           5
	//*  27   51:aload_0         
	//*  28   52:aload_1         
	//*  29   53:invokeinterface #1085 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  30   58:ifeq            74
	//*  31   61:iload_3         
	//*  32   62:iconst_3        
	//*  33   63:icmpeq          74
			{
				mActiveOnItemTouchListener = onitemtouchlistener;
	//   34   66:aload_0         
	//   35   67:aload           5
	//   36   69:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   37   72:iconst_1        
	//   38   73:ireturn         
			}
		}

	//   39   74:iload_2         
	//   40   75:iconst_1        
	//   41   76:iadd            
	//   42   77:istore_2        
	//*  43   78:goto            30
		return false;
	//   44   81:iconst_0        
	//   45   82:ireturn         
	}

	private void findMinMaxChildLayoutPositions(int ai[])
	{
		int j1 = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          7
		if(j1 == 0)
	//*   4    9:iload           7
	//*   5   11:ifne            23
		{
			ai[0] = -1;
	//    6   14:aload_1         
	//    7   15:iconst_0        
	//    8   16:iconst_m1       
	//    9   17:iastore         
			ai[1] = -1;
	//   10   18:aload_1         
	//   11   19:iconst_1        
	//   12   20:iconst_m1       
	//   13   21:iastore         
			return;
	//   14   22:return          
		}
		int i = 0x7fffffff;
	//   15   23:ldc2            #1091 <Int 0x7fffffff>
	//   16   26:istore_2        
		int l = 0x80000000;
	//   17   27:ldc2            #1092 <Int 0x80000000>
	//   18   30:istore          5
		int k = 0;
	//   19   32:iconst_0        
	//   20   33:istore          4
		while(k < j1) 
	//*  21   35:iload           4
	//*  22   37:iload           7
	//*  23   39:icmpge          107
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(k));
	//   24   42:aload_0         
	//   25   43:getfield        #663 <Field ChildHelper mChildHelper>
	//   26   46:iload           4
	//   27   48:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   28   51:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   54:astore          8
			if(!viewholder.shouldIgnore())
	//*  30   56:aload           8
	//*  31   58:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   61:ifeq            73
	//*  33   64:iload           4
	//*  34   66:iconst_1        
	//*  35   67:iadd            
	//*  36   68:istore          4
	//*  37   70:goto            35
			{
				int i1 = viewholder.getLayoutPosition();
	//   38   73:aload           8
	//   39   75:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   40   78:istore          6
				int j = i;
	//   41   80:iload_2         
	//   42   81:istore_3        
				if(i1 < i)
	//*  43   82:iload           6
	//*  44   84:iload_2         
	//*  45   85:icmpge          91
					j = i1;
	//   46   88:iload           6
	//   47   90:istore_3        
				if(i1 > l)
	//*  48   91:iload           6
	//*  49   93:iload           5
	//*  50   95:icmple          117
				{
					l = i1;
	//   51   98:iload           6
	//   52  100:istore          5
					i = j;
	//   53  102:iload_3         
	//   54  103:istore_2        
				} else
	//*  55  104:goto            64
	//*  56  107:aload_1         
	//*  57  108:iconst_0        
	//*  58  109:iload_2         
	//*  59  110:iastore         
	//*  60  111:aload_1         
	//*  61  112:iconst_1        
	//*  62  113:iload           5
	//*  63  115:iastore         
	//*  64  116:return          
				{
					i = j;
	//   65  117:iload_3         
	//   66  118:istore_2        
				}
			}
			k++;
		}
		ai[0] = i;
		ai[1] = l;
	//*  67  119:goto            64
	}

	static RecyclerView findNestedRecyclerView(View view)
	{
		if(!(view instanceof ViewGroup))
	//*   0    0:aload_0         
	//*   1    1:instanceof      #4   <Class ViewGroup>
	//*   2    4:ifne            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		if(view instanceof RecyclerView)
	//*   5    9:aload_0         
	//*   6   10:instanceof      #2   <Class RecyclerView>
	//*   7   13:ifeq            21
			return (RecyclerView)view;
	//    8   16:aload_0         
	//    9   17:checkcast       #2   <Class RecyclerView>
	//   10   20:areturn         
		view = ((View) ((ViewGroup)view));
	//   11   21:aload_0         
	//   12   22:checkcast       #4   <Class ViewGroup>
	//   13   25:astore_0        
		int j = ((ViewGroup) (view)).getChildCount();
	//   14   26:aload_0         
	//   15   27:invokevirtual   #1098 <Method int ViewGroup.getChildCount()>
	//   16   30:istore_2        
		for(int i = 0; i < j; i++)
	//*  17   31:iconst_0        
	//*  18   32:istore_1        
	//*  19   33:iload_1         
	//*  20   34:iload_2         
	//*  21   35:icmpge          60
		{
			RecyclerView recyclerview = findNestedRecyclerView(((ViewGroup) (view)).getChildAt(i));
	//   22   38:aload_0         
	//   23   39:iload_1         
	//   24   40:invokevirtual   #1099 <Method View ViewGroup.getChildAt(int)>
	//   25   43:invokestatic    #1101 <Method RecyclerView findNestedRecyclerView(View)>
	//   26   46:astore_3        
			if(recyclerview != null)
	//*  27   47:aload_3         
	//*  28   48:ifnull          53
				return recyclerview;
	//   29   51:aload_3         
	//   30   52:areturn         
		}

	//   31   53:iload_1         
	//   32   54:iconst_1        
	//   33   55:iadd            
	//   34   56:istore_1        
	//*  35   57:goto            33
		return null;
	//   36   60:aconst_null     
	//   37   61:areturn         
	}

	private View findNextViewToFocus()
	{
		int i;
		int j;
		ViewHolder viewholder;
		int k;
		if(mState.mFocusedItemPosition != -1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #431 <Field RecyclerView$State mState>
	//*   2    4:getfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//*   3    7:iconst_m1       
	//*   4    8:icmpeq          72
			i = mState.mFocusedItemPosition;
	//    5   11:aload_0         
	//    6   12:getfield        #431 <Field RecyclerView$State mState>
	//    7   15:getfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//    8   18:istore_1        
		else
	//*   9   19:aload_0         
	//*  10   20:getfield        #431 <Field RecyclerView$State mState>
	//*  11   23:invokevirtual   #1108 <Method int RecyclerView$State.getItemCount()>
	//*  12   26:istore_3        
	//*  13   27:iload_1         
	//*  14   28:istore_2        
	//*  15   29:iload_2         
	//*  16   30:iload_3         
	//*  17   31:icmpge          46
	//*  18   34:aload_0         
	//*  19   35:iload_2         
	//*  20   36:invokevirtual   #1112 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//*  21   39:astore          4
	//*  22   41:aload           4
	//*  23   43:ifnonnull       77
	//*  24   46:iload_3         
	//*  25   47:iload_1         
	//*  26   48:invokestatic    #1117 <Method int Math.min(int, int)>
	//*  27   51:iconst_1        
	//*  28   52:isub            
	//*  29   53:istore_1        
	//*  30   54:iload_1         
	//*  31   55:iflt            125
	//*  32   58:aload_0         
	//*  33   59:iload_1         
	//*  34   60:invokevirtual   #1112 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//*  35   63:astore          4
	//*  36   65:aload           4
	//*  37   67:ifnonnull       101
	//*  38   70:aconst_null     
	//*  39   71:areturn         
			i = 0;
	//   40   72:iconst_0        
	//   41   73:istore_1        
		k = mState.getItemCount();
		j = i;
_L7:
		if(j >= k) goto _L2; else goto _L1
_L1:
		viewholder = findViewHolderForAdapterPosition(j);
		if(viewholder != null) goto _L3; else goto _L2
_L2:
		i = Math.min(k, i) - 1;
_L5:
		if(i < 0)
			break; /* Loop/switch isn't completed */
		viewholder = findViewHolderForAdapterPosition(i);
		if(viewholder == null)
			return null;
	//*  42   74:goto            19
	//*  43   77:aload           4
	//*  44   79:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  45   82:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  46   85:ifeq            94
	//*  47   88:aload           4
	//*  48   90:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  49   93:areturn         
	//*  50   94:iload_2         
	//*  51   95:iconst_1        
	//*  52   96:iadd            
	//*  53   97:istore_2        
	//*  54   98:goto            29
		if(viewholder.itemView.hasFocusable())
	//*  55  101:aload           4
	//*  56  103:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  57  106:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  58  109:ifeq            118
			return viewholder.itemView;
	//   59  112:aload           4
	//   60  114:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   61  117:areturn         
		i--;
	//   62  118:iload_1         
	//   63  119:iconst_1        
	//   64  120:isub            
	//   65  121:istore_1        
		continue; /* Loop/switch isn't completed */
	//   66  122:goto            54
_L3:
		if(viewholder.itemView.hasFocusable())
			return viewholder.itemView;
		j++;
		continue; /* Loop/switch isn't completed */
		if(true) goto _L5; else goto _L4
_L4:
		return null;
	//   67  125:aconst_null     
	//   68  126:areturn         
		if(true) goto _L7; else goto _L6
_L6:
	}

	static ViewHolder getChildViewHolderInt(View view)
	{
		if(view == null)
	//*   0    0:aload_0         
	//*   1    1:ifnonnull       6
			return null;
	//    2    4:aconst_null     
	//    3    5:areturn         
		else
			return ((LayoutParams)view.getLayoutParams()).mViewHolder;
	//    4    6:aload_0         
	//    5    7:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    6   10:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   13:getfield        #1123 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
	//    8   16:areturn         
	}

	static void getDecoratedBoundsWithMarginsInt(View view, Rect rect)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore          13
		Rect rect1 = layoutparams.mDecorInsets;
	//    4    9:aload           13
	//    5   11:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    6   14:astore          14
		int i = view.getLeft();
	//    7   16:aload_0         
	//    8   17:invokevirtual   #1131 <Method int View.getLeft()>
	//    9   20:istore_2        
		int j = rect1.left;
	//   10   21:aload           14
	//   11   23:getfield        #1134 <Field int Rect.left>
	//   12   26:istore_3        
		int k = layoutparams.leftMargin;
	//   13   27:aload           13
	//   14   29:getfield        #1137 <Field int RecyclerView$LayoutParams.leftMargin>
	//   15   32:istore          4
		int l = view.getTop();
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1140 <Method int View.getTop()>
	//   18   38:istore          5
		int i1 = rect1.top;
	//   19   40:aload           14
	//   20   42:getfield        #1143 <Field int Rect.top>
	//   21   45:istore          6
		int j1 = layoutparams.topMargin;
	//   22   47:aload           13
	//   23   49:getfield        #1146 <Field int RecyclerView$LayoutParams.topMargin>
	//   24   52:istore          7
		int k1 = view.getRight();
	//   25   54:aload_0         
	//   26   55:invokevirtual   #1149 <Method int View.getRight()>
	//   27   58:istore          8
		int l1 = rect1.right;
	//   28   60:aload           14
	//   29   62:getfield        #1152 <Field int Rect.right>
	//   30   65:istore          9
		int i2 = layoutparams.rightMargin;
	//   31   67:aload           13
	//   32   69:getfield        #1155 <Field int RecyclerView$LayoutParams.rightMargin>
	//   33   72:istore          10
		int j2 = view.getBottom();
	//   34   74:aload_0         
	//   35   75:invokevirtual   #1158 <Method int View.getBottom()>
	//   36   78:istore          11
		int k2 = rect1.bottom;
	//   37   80:aload           14
	//   38   82:getfield        #1161 <Field int Rect.bottom>
	//   39   85:istore          12
		rect.set(i - j - k, l - i1 - j1, k1 + l1 + i2, layoutparams.bottomMargin + (k2 + j2));
	//   40   87:aload_1         
	//   41   88:iload_2         
	//   42   89:iload_3         
	//   43   90:isub            
	//   44   91:iload           4
	//   45   93:isub            
	//   46   94:iload           5
	//   47   96:iload           6
	//   48   98:isub            
	//   49   99:iload           7
	//   50  101:isub            
	//   51  102:iload           8
	//   52  104:iload           9
	//   53  106:iadd            
	//   54  107:iload           10
	//   55  109:iadd            
	//   56  110:aload           13
	//   57  112:getfield        #1164 <Field int RecyclerView$LayoutParams.bottomMargin>
	//   58  115:iload           12
	//   59  117:iload           11
	//   60  119:iadd            
	//   61  120:iadd            
	//   62  121:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
	//   63  124:return          
	}

	private int getDeepestFocusedViewWithId(View view)
	{
		int i = view.getId();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1172 <Method int View.getId()>
	//    2    4:istore_2        
		do
		{
			if(view.isFocused() || !(view instanceof ViewGroup) || !view.hasFocus())
				break;
	//    3    5:aload_1         
	//    4    6:invokevirtual   #1175 <Method boolean View.isFocused()>
	//    5    9:ifne            50
	//    6   12:aload_1         
	//    7   13:instanceof      #4   <Class ViewGroup>
	//    8   16:ifeq            50
	//    9   19:aload_1         
	//   10   20:invokevirtual   #1178 <Method boolean View.hasFocus()>
	//   11   23:ifeq            50
			view = ((ViewGroup)view).getFocusedChild();
	//   12   26:aload_1         
	//   13   27:checkcast       #4   <Class ViewGroup>
	//   14   30:invokevirtual   #1181 <Method View ViewGroup.getFocusedChild()>
	//   15   33:astore_1        
			if(view.getId() != -1)
	//*  16   34:aload_1         
	//*  17   35:invokevirtual   #1172 <Method int View.getId()>
	//*  18   38:iconst_m1       
	//*  19   39:icmpeq          52
				i = view.getId();
	//   20   42:aload_1         
	//   21   43:invokevirtual   #1172 <Method int View.getId()>
	//   22   46:istore_2        
		} while(true);
	//   23   47:goto            5
		return i;
	//   24   50:iload_2         
	//   25   51:ireturn         
	//*  26   52:goto            47
	}

	private String getFullClassName(Context context, String s)
	{
		if(s.charAt(0) == '.')
	//*   0    0:aload_2         
	//*   1    1:iconst_0        
	//*   2    2:invokevirtual   #1185 <Method char String.charAt(int)>
	//*   3    5:bipush          46
	//*   4    7:icmpne          34
		{
			context = ((Context) ((new StringBuilder()).append(context.getPackageName()).append(s).toString()));
	//    5   10:new             #796 <Class StringBuilder>
	//    6   13:dup             
	//    7   14:invokespecial   #797 <Method void StringBuilder()>
	//    8   17:aload_1         
	//    9   18:invokevirtual   #1188 <Method String Context.getPackageName()>
	//   10   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   11   24:aload_2         
	//   12   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   28:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   31:astore_1        
		} else
	//*  15   32:aload_1         
	//*  16   33:areturn         
		{
			context = ((Context) (s));
	//   17   34:aload_2         
	//   18   35:astore_1        
			if(!s.contains("."))
	//*  19   36:aload_2         
	//*  20   37:ldc2            #1190 <String ".">
	//*  21   40:invokevirtual   #1194 <Method boolean String.contains(CharSequence)>
	//*  22   43:ifne            32
				return (new StringBuilder()).append(((Class) (android/support/v7/widget/RecyclerView)).getPackage().getName()).append('.').append(s).toString();
	//   23   46:new             #796 <Class StringBuilder>
	//   24   49:dup             
	//   25   50:invokespecial   #797 <Method void StringBuilder()>
	//   26   53:ldc1            #2   <Class RecyclerView>
	//   27   55:invokevirtual   #1198 <Method Package Class.getPackage()>
	//   28   58:invokevirtual   #1203 <Method String Package.getName()>
	//   29   61:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   30   64:bipush          46
	//   31   66:invokevirtual   #1206 <Method StringBuilder StringBuilder.append(char)>
	//   32   69:aload_2         
	//   33   70:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   34   73:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   35   76:areturn         
		}
		return ((String) (context));
	}

	private NestedScrollingChildHelper getScrollingChildHelper()
	{
		if(mScrollingChildHelper == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//*   2    4:ifnonnull       19
			mScrollingChildHelper = new NestedScrollingChildHelper(((View) (this)));
	//    3    7:aload_0         
	//    4    8:new             #1212 <Class NestedScrollingChildHelper>
	//    5   11:dup             
	//    6   12:aload_0         
	//    7   13:invokespecial   #1214 <Method void NestedScrollingChildHelper(View)>
	//    8   16:putfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
		return mScrollingChildHelper;
	//    9   19:aload_0         
	//   10   20:getfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//   11   23:areturn         
	}

	private void handleMissingPreInfoForChangeError(long l, ViewHolder viewholder, ViewHolder viewholder1)
	{
		int i;
		int j;
		j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          6
		i = 0;
	//    4    9:iconst_0        
	//    5   10:istore          5
_L3:
		ViewHolder viewholder2;
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//    6   12:iload           5
	//    7   14:iload           6
	//    8   16:icmpge          168
		viewholder2 = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           5
	//   12   25:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          7
		  goto _L1
	//*  15   33:aload           7
	//*  16   35:aload_3         
	//*  17   36:if_acmpne       48
_L5:
		i++;
	//   18   39:iload           5
	//   19   41:iconst_1        
	//   20   42:iadd            
	//   21   43:istore          5
		if(true) goto _L3; else goto _L2
	//   22   45:goto            12
_L1:
		if(viewholder2 == viewholder || getChangedHolderKey(viewholder2) != l) goto _L5; else goto _L4
	//   23   48:aload_0         
	//   24   49:aload           7
	//   25   51:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   26   54:lload_1         
	//   27   55:lcmp            
	//   28   56:ifne            39
_L4:
		if(mAdapter != null && mAdapter.hasStableIds())
	//*  29   59:aload_0         
	//*  30   60:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  31   63:ifnull          122
	//*  32   66:aload_0         
	//*  33   67:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  34   70:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  35   73:ifeq            122
			throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   36   76:new             #794 <Class IllegalStateException>
	//   37   79:dup             
	//   38   80:new             #796 <Class StringBuilder>
	//   39   83:dup             
	//   40   84:invokespecial   #797 <Method void StringBuilder()>
	//   41   87:ldc2            #1216 <String "Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:">
	//   42   90:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   43   93:aload           7
	//   44   95:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   45   98:ldc2            #1221 <String " \n View Holder 2:">
	//   46  101:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   47  104:aload_3         
	//   48  105:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   49  108:aload_0         
	//   50  109:invokevirtual   #1224 <Method String exceptionLabel()>
	//   51  112:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   52  115:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   53  118:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   54  121:athrow          
		else
			throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   55  122:new             #794 <Class IllegalStateException>
	//   56  125:dup             
	//   57  126:new             #796 <Class StringBuilder>
	//   58  129:dup             
	//   59  130:invokespecial   #797 <Method void StringBuilder()>
	//   60  133:ldc2            #1229 <String "Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:">
	//   61  136:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   62  139:aload           7
	//   63  141:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   64  144:ldc2            #1221 <String " \n View Holder 2:">
	//   65  147:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   66  150:aload_3         
	//   67  151:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   68  154:aload_0         
	//   69  155:invokevirtual   #1224 <Method String exceptionLabel()>
	//   70  158:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   71  161:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   72  164:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   73  167:athrow          
_L2:
		Log.e("RecyclerView", (new StringBuilder()).append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ").append(((Object) (viewholder1))).append(" cannot be found but it is necessary for ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   74  168:ldc1            #168 <String "RecyclerView">
	//   75  170:new             #796 <Class StringBuilder>
	//   76  173:dup             
	//   77  174:invokespecial   #797 <Method void StringBuilder()>
	//   78  177:ldc2            #1231 <String "Problem while matching changed view holders with the newones. The pre-layout information for the change holder ">
	//   79  180:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   80  183:aload           4
	//   81  185:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   82  188:ldc2            #1233 <String " cannot be found but it is necessary for ">
	//   83  191:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   84  194:aload_3         
	//   85  195:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   86  198:aload_0         
	//   87  199:invokevirtual   #1224 <Method String exceptionLabel()>
	//   88  202:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   89  205:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   90  208:invokestatic    #1239 <Method int Log.e(String, String)>
	//   91  211:pop             
		return;
	//   92  212:return          
	}

	private boolean hasUpdatedView()
	{
		int i;
		int j;
		boolean flag1;
		flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		j = mChildHelper.getChildCount();
	//    2    3:aload_0         
	//    3    4:getfield        #663 <Field ChildHelper mChildHelper>
	//    4    7:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    5   10:istore_2        
		i = 0;
	//    6   11:iconst_0        
	//    7   12:istore_1        
_L3:
		boolean flag;
		ViewHolder viewholder;
		flag = flag1;
	//    8   13:iload           4
	//    9   15:istore_3        
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//   10   16:iload_1         
	//   11   17:iload_2         
	//   12   18:icmpge          64
		viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   13   21:aload_0         
	//   14   22:getfield        #663 <Field ChildHelper mChildHelper>
	//   15   25:iload_1         
	//   16   26:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   17   29:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   18   32:astore          5
		  goto _L1
	//*  19   34:aload           5
	//*  20   36:ifnull          47
	//*  21   39:aload           5
	//*  22   41:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  23   44:ifeq            54
_L5:
		i++;
	//   24   47:iload_1         
	//   25   48:iconst_1        
	//   26   49:iadd            
	//   27   50:istore_1        
		if(true) goto _L3; else goto _L2
	//   28   51:goto            13
_L1:
		if(viewholder == null || viewholder.shouldIgnore() || !viewholder.isUpdated()) goto _L5; else goto _L4
	//   29   54:aload           5
	//   30   56:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//   31   59:ifeq            47
_L4:
		flag = true;
	//   32   62:iconst_1        
	//   33   63:istore_3        
_L2:
		return flag;
	//   34   64:iload_3         
	//   35   65:ireturn         
	}

	private void initChildrenHelper()
	{
		mChildHelper = new ChildHelper(new ChildHelper.Callback() {

			public void addView(View view, int i)
			{
				RecyclerView.this.addView(view, i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #24  <Method void RecyclerView.addView(View, int)>
				dispatchChildAttached(view);
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:aload_1         
			//    8   14:invokevirtual   #28  <Method void RecyclerView.dispatchChildAttached(View)>
			//    9   17:return          
			}

			public void attachViewToParent(View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
			{
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore          4
				if(viewholder != null)
			//*   3    6:aload           4
			//*   4    8:ifnull          70
				{
					if(!viewholder.isTmpDetached() && !viewholder.shouldIgnore())
			//*   5   11:aload           4
			//*   6   13:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*   7   16:ifne            65
			//*   8   19:aload           4
			//*   9   21:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  10   24:ifne            65
						throw new IllegalArgumentException((new StringBuilder()).append("Called attach on a child which is not detached: ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
			//   11   27:new             #45  <Class IllegalArgumentException>
			//   12   30:dup             
			//   13   31:new             #47  <Class StringBuilder>
			//   14   34:dup             
			//   15   35:invokespecial   #48  <Method void StringBuilder()>
			//   16   38:ldc1            #50  <String "Called attach on a child which is not detached: ">
			//   17   40:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   18   43:aload           4
			//   19   45:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   20   48:aload_0         
			//   21   49:getfield        #17  <Field RecyclerView this$0>
			//   22   52:invokevirtual   #61  <Method String RecyclerView.exceptionLabel()>
			//   23   55:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   24   58:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   25   61:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   26   64:athrow          
					viewholder.clearTmpDetachFlag();
			//   27   65:aload           4
			//   28   67:invokevirtual   #70  <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
				}
				RecyclerView.this.attachViewToParent(view, i, layoutparams);
			//   29   70:aload_0         
			//   30   71:getfield        #17  <Field RecyclerView this$0>
			//   31   74:aload_1         
			//   32   75:iload_2         
			//   33   76:aload_3         
			//   34   77:invokestatic    #74  <Method void RecyclerView.access$000(RecyclerView, View, int, android.view.ViewGroup$LayoutParams)>
			//   35   80:return          
			}

			public void detachViewFromParent(int i)
			{
				Object obj = ((Object) (getChildAt(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #80  <Method View getChildAt(int)>
			//    3    5:astore_2        
				if(obj != null)
			//*   4    6:aload_2         
			//*   5    7:ifnull          77
				{
					obj = ((Object) (RecyclerView.getChildViewHolderInt(((View) (obj)))));
			//    6   10:aload_2         
			//    7   11:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    8   14:astore_2        
					if(obj != null)
			//*   9   15:aload_2         
			//*  10   16:ifnull          77
					{
						if(((ViewHolder) (obj)).isTmpDetached() && !((ViewHolder) (obj)).shouldIgnore())
			//*  11   19:aload_2         
			//*  12   20:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*  13   23:ifeq            70
			//*  14   26:aload_2         
			//*  15   27:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  16   30:ifne            70
							throw new IllegalArgumentException((new StringBuilder()).append("called detach on an already detached child ").append(obj).append(exceptionLabel()).toString());
			//   17   33:new             #45  <Class IllegalArgumentException>
			//   18   36:dup             
			//   19   37:new             #47  <Class StringBuilder>
			//   20   40:dup             
			//   21   41:invokespecial   #48  <Method void StringBuilder()>
			//   22   44:ldc1            #82  <String "called detach on an already detached child ">
			//   23   46:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   24   49:aload_2         
			//   25   50:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   26   53:aload_0         
			//   27   54:getfield        #17  <Field RecyclerView this$0>
			//   28   57:invokevirtual   #61  <Method String RecyclerView.exceptionLabel()>
			//   29   60:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   30   63:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   31   66:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   32   69:athrow          
						((ViewHolder) (obj)).addFlags(256);
			//   33   70:aload_2         
			//   34   71:sipush          256
			//   35   74:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					}
				}
				RecyclerView.this.detachViewFromParent(i);
			//   36   77:aload_0         
			//   37   78:getfield        #17  <Field RecyclerView this$0>
			//   38   81:iload_1         
			//   39   82:invokestatic    #89  <Method void RecyclerView.access$100(RecyclerView, int)>
			//   40   85:return          
			}

			public View getChildAt(int i)
			{
				return RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:areturn         
			}

			public int getChildCount()
			{
				return RecyclerView.this.getChildCount();
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:invokevirtual   #94  <Method int RecyclerView.getChildCount()>
			//    3    7:ireturn         
			}

			public ViewHolder getChildViewHolder(View view)
			{
				return RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:areturn         
			}

			public int indexOfChild(View view)
			{
				return RecyclerView.this.indexOfChild(view);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:invokevirtual   #99  <Method int RecyclerView.indexOfChild(View)>
			//    4    8:ireturn         
			}

			public void onEnteredHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onEnteredHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #104 <Method void RecyclerView$ViewHolder.access$200(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void onLeftHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onLeftHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #108 <Method void RecyclerView$ViewHolder.access$300(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void removeAllViews()
			{
				int j = getChildCount();
			//    0    0:aload_0         
			//    1    1:invokevirtual   #110 <Method int getChildCount()>
			//    2    4:istore_2        
				for(int i = 0; i < j; i++)
			//*   3    5:iconst_0        
			//*   4    6:istore_1        
			//*   5    7:iload_1         
			//*   6    8:iload_2         
			//*   7    9:icmpge          37
				{
					View view = getChildAt(i);
			//    8   12:aload_0         
			//    9   13:iload_1         
			//   10   14:invokevirtual   #80  <Method View getChildAt(int)>
			//   11   17:astore_3        
					dispatchChildDetached(view);
			//   12   18:aload_0         
			//   13   19:getfield        #17  <Field RecyclerView this$0>
			//   14   22:aload_3         
			//   15   23:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   16   26:aload_3         
			//   17   27:invokevirtual   #118 <Method void View.clearAnimation()>
				}

			//   18   30:iload_1         
			//   19   31:iconst_1        
			//   20   32:iadd            
			//   21   33:istore_1        
			//*  22   34:goto            7
				RecyclerView.this.removeAllViews();
			//   23   37:aload_0         
			//   24   38:getfield        #17  <Field RecyclerView this$0>
			//   25   41:invokevirtual   #120 <Method void RecyclerView.removeAllViews()>
			//   26   44:return          
			}

			public void removeViewAt(int i)
			{
				View view = RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:astore_2        
				if(view != null)
			//*   5    9:aload_2         
			//*   6   10:ifnull          25
				{
					dispatchChildDetached(view);
			//    7   13:aload_0         
			//    8   14:getfield        #17  <Field RecyclerView this$0>
			//    9   17:aload_2         
			//   10   18:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   11   21:aload_2         
			//   12   22:invokevirtual   #118 <Method void View.clearAnimation()>
				}
				RecyclerView.this.removeViewAt(i);
			//   13   25:aload_0         
			//   14   26:getfield        #17  <Field RecyclerView this$0>
			//   15   29:iload_1         
			//   16   30:invokevirtual   #123 <Method void RecyclerView.removeViewAt(int)>
			//   17   33:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #669 <Class ChildHelper>
	//    2    4:dup             
	//    3    5:new             #18  <Class RecyclerView$5>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1241 <Method void RecyclerView$5(RecyclerView)>
	//    7   13:invokespecial   #1244 <Method void ChildHelper(ChildHelper$Callback)>
	//    8   16:putfield        #663 <Field ChildHelper mChildHelper>
	//    9   19:return          
	}

	private boolean isPreferredNextFocus(View view, View view1, int i)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          5
		if(view1 == null || view1 == this)
	//*   2    3:aload_2         
	//*   3    4:ifnull          12
	//*   4    7:aload_2         
	//*   5    8:aload_0         
	//*   6    9:if_acmpne       14
			return false;
	//    7   12:iconst_0        
	//    8   13:ireturn         
		if(view == null)
	//*   9   14:aload_1         
	//*  10   15:ifnonnull       20
			return true;
	//   11   18:iconst_1        
	//   12   19:ireturn         
		if(i == 2 || i == 1)
	//*  13   20:iload_3         
	//*  14   21:iconst_2        
	//*  15   22:icmpeq          30
	//*  16   25:iload_3         
	//*  17   26:iconst_1        
	//*  18   27:icmpne          114
		{
			byte byte0;
			if(mLayout.getLayoutDirection() == 1)
	//*  19   30:aload_0         
	//*  20   31:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  21   34:invokevirtual   #1249 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  22   37:iconst_1        
	//*  23   38:icmpne          77
				byte0 = 1;
	//   24   41:iconst_1        
	//   25   42:istore          4
			else
	//*  26   44:iload_3         
	//*  27   45:iconst_2        
	//*  28   46:icmpne          52
	//*  29   49:iconst_1        
	//*  30   50:istore          5
	//*  31   52:iload           5
	//*  32   54:iload           4
	//*  33   56:ixor            
	//*  34   57:ifeq            83
	//*  35   60:bipush          66
	//*  36   62:istore          4
	//*  37   64:aload_0         
	//*  38   65:aload_1         
	//*  39   66:aload_2         
	//*  40   67:iload           4
	//*  41   69:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//*  42   72:ifeq            90
	//*  43   75:iconst_1        
	//*  44   76:ireturn         
				byte0 = 0;
	//   45   77:iconst_0        
	//   46   78:istore          4
			if(i == 2)
				flag = true;
			if(flag ^ byte0)
				byte0 = 66;
			else
	//*  47   80:goto            44
				byte0 = 17;
	//   48   83:bipush          17
	//   49   85:istore          4
			if(isPreferredNextFocusAbsolute(view, view1, ((int) (byte0))))
				return true;
	//*  50   87:goto            64
			if(i == 2)
	//*  51   90:iload_3         
	//*  52   91:iconst_2        
	//*  53   92:icmpne          105
				return isPreferredNextFocusAbsolute(view, view1, 130);
	//   54   95:aload_0         
	//   55   96:aload_1         
	//   56   97:aload_2         
	//   57   98:sipush          130
	//   58  101:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   59  104:ireturn         
			else
				return isPreferredNextFocusAbsolute(view, view1, 33);
	//   60  105:aload_0         
	//   61  106:aload_1         
	//   62  107:aload_2         
	//   63  108:bipush          33
	//   64  110:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   65  113:ireturn         
		} else
		{
			return isPreferredNextFocusAbsolute(view, view1, i);
	//   66  114:aload_0         
	//   67  115:aload_1         
	//   68  116:aload_2         
	//   69  117:iload_3         
	//   70  118:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   71  121:ireturn         
		}
	}

	private boolean isPreferredNextFocusAbsolute(View view, View view1, int i)
	{
		mTempRect.set(0, 0, view.getWidth(), view.getHeight());
	//    0    0:aload_0         
	//    1    1:getfield        #382 <Field Rect mTempRect>
	//    2    4:iconst_0        
	//    3    5:iconst_0        
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1255 <Method int View.getWidth()>
	//    6   10:aload_1         
	//    7   11:invokevirtual   #1258 <Method int View.getHeight()>
	//    8   14:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		mTempRect2.set(0, 0, view1.getWidth(), view1.getHeight());
	//    9   17:aload_0         
	//   10   18:getfield        #384 <Field Rect mTempRect2>
	//   11   21:iconst_0        
	//   12   22:iconst_0        
	//   13   23:aload_2         
	//   14   24:invokevirtual   #1255 <Method int View.getWidth()>
	//   15   27:aload_2         
	//   16   28:invokevirtual   #1258 <Method int View.getHeight()>
	//   17   31:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		offsetDescendantRectToMyCoords(view, mTempRect);
	//   18   34:aload_0         
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:getfield        #382 <Field Rect mTempRect>
	//   22   40:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		offsetDescendantRectToMyCoords(view1, mTempRect2);
	//   23   43:aload_0         
	//   24   44:aload_2         
	//   25   45:aload_0         
	//   26   46:getfield        #384 <Field Rect mTempRect2>
	//   27   49:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		i;
	//   28   52:iload_3         
		JVM INSTR lookupswitch 4: default 96
	//	               17: 131
	//	               33: 239
	//	               66: 186
	//	               130: 292;
	//   29   53:lookupswitch    4: default 96
	//	               17: 131
	//	               33: 239
	//	               66: 186
	//	               130: 292
		   goto _L1 _L2 _L3 _L4 _L5
_L1:
		throw new IllegalArgumentException((new StringBuilder()).append("direction must be absolute. received:").append(i).append(exceptionLabel()).toString());
	//   30   96:new             #1263 <Class IllegalArgumentException>
	//   31   99:dup             
	//   32  100:new             #796 <Class StringBuilder>
	//   33  103:dup             
	//   34  104:invokespecial   #797 <Method void StringBuilder()>
	//   35  107:ldc2            #1265 <String "direction must be absolute. received:">
	//   36  110:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   37  113:iload_3         
	//   38  114:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//   39  117:aload_0         
	//   40  118:invokevirtual   #1224 <Method String exceptionLabel()>
	//   41  121:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   42  124:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   43  127:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   44  130:athrow          
_L2:
		if(mTempRect.right <= mTempRect2.right && mTempRect.left < mTempRect2.right || mTempRect.left <= mTempRect2.left) goto _L7; else goto _L6
	//   45  131:aload_0         
	//   46  132:getfield        #382 <Field Rect mTempRect>
	//   47  135:getfield        #1152 <Field int Rect.right>
	//   48  138:aload_0         
	//   49  139:getfield        #384 <Field Rect mTempRect2>
	//   50  142:getfield        #1152 <Field int Rect.right>
	//   51  145:icmpgt          165
	//   52  148:aload_0         
	//   53  149:getfield        #382 <Field Rect mTempRect>
	//   54  152:getfield        #1134 <Field int Rect.left>
	//   55  155:aload_0         
	//   56  156:getfield        #384 <Field Rect mTempRect2>
	//   57  159:getfield        #1152 <Field int Rect.right>
	//   58  162:icmplt          184
	//   59  165:aload_0         
	//   60  166:getfield        #382 <Field Rect mTempRect>
	//   61  169:getfield        #1134 <Field int Rect.left>
	//   62  172:aload_0         
	//   63  173:getfield        #384 <Field Rect mTempRect2>
	//   64  176:getfield        #1134 <Field int Rect.left>
	//   65  179:icmple          184
_L6:
		return true;
	//   66  182:iconst_1        
	//   67  183:ireturn         
_L7:
		return false;
	//   68  184:iconst_0        
	//   69  185:ireturn         
_L4:
		if(mTempRect.left >= mTempRect2.left && mTempRect.right > mTempRect2.left || mTempRect.right >= mTempRect2.right)
	//*  70  186:aload_0         
	//*  71  187:getfield        #382 <Field Rect mTempRect>
	//*  72  190:getfield        #1134 <Field int Rect.left>
	//*  73  193:aload_0         
	//*  74  194:getfield        #384 <Field Rect mTempRect2>
	//*  75  197:getfield        #1134 <Field int Rect.left>
	//*  76  200:icmplt          220
	//*  77  203:aload_0         
	//*  78  204:getfield        #382 <Field Rect mTempRect>
	//*  79  207:getfield        #1152 <Field int Rect.right>
	//*  80  210:aload_0         
	//*  81  211:getfield        #384 <Field Rect mTempRect2>
	//*  82  214:getfield        #1134 <Field int Rect.left>
	//*  83  217:icmpgt          237
	//*  84  220:aload_0         
	//*  85  221:getfield        #382 <Field Rect mTempRect>
	//*  86  224:getfield        #1152 <Field int Rect.right>
	//*  87  227:aload_0         
	//*  88  228:getfield        #384 <Field Rect mTempRect2>
	//*  89  231:getfield        #1152 <Field int Rect.right>
	//*  90  234:icmplt          182
			return false;
	//   91  237:iconst_0        
	//   92  238:ireturn         
		continue; /* Loop/switch isn't completed */
_L3:
		if(mTempRect.bottom <= mTempRect2.bottom && mTempRect.top < mTempRect2.bottom || mTempRect.top <= mTempRect2.top)
	//*  93  239:aload_0         
	//*  94  240:getfield        #382 <Field Rect mTempRect>
	//*  95  243:getfield        #1161 <Field int Rect.bottom>
	//*  96  246:aload_0         
	//*  97  247:getfield        #384 <Field Rect mTempRect2>
	//*  98  250:getfield        #1161 <Field int Rect.bottom>
	//*  99  253:icmpgt          273
	//* 100  256:aload_0         
	//* 101  257:getfield        #382 <Field Rect mTempRect>
	//* 102  260:getfield        #1143 <Field int Rect.top>
	//* 103  263:aload_0         
	//* 104  264:getfield        #384 <Field Rect mTempRect2>
	//* 105  267:getfield        #1161 <Field int Rect.bottom>
	//* 106  270:icmplt          290
	//* 107  273:aload_0         
	//* 108  274:getfield        #382 <Field Rect mTempRect>
	//* 109  277:getfield        #1143 <Field int Rect.top>
	//* 110  280:aload_0         
	//* 111  281:getfield        #384 <Field Rect mTempRect2>
	//* 112  284:getfield        #1143 <Field int Rect.top>
	//* 113  287:icmpgt          182
			return false;
	//  114  290:iconst_0        
	//  115  291:ireturn         
		continue; /* Loop/switch isn't completed */
_L5:
		if(mTempRect.top >= mTempRect2.top && mTempRect.bottom > mTempRect2.top || mTempRect.bottom >= mTempRect2.bottom)
	//* 116  292:aload_0         
	//* 117  293:getfield        #382 <Field Rect mTempRect>
	//* 118  296:getfield        #1143 <Field int Rect.top>
	//* 119  299:aload_0         
	//* 120  300:getfield        #384 <Field Rect mTempRect2>
	//* 121  303:getfield        #1143 <Field int Rect.top>
	//* 122  306:icmplt          326
	//* 123  309:aload_0         
	//* 124  310:getfield        #382 <Field Rect mTempRect>
	//* 125  313:getfield        #1161 <Field int Rect.bottom>
	//* 126  316:aload_0         
	//* 127  317:getfield        #384 <Field Rect mTempRect2>
	//* 128  320:getfield        #1143 <Field int Rect.top>
	//* 129  323:icmpgt          343
	//* 130  326:aload_0         
	//* 131  327:getfield        #382 <Field Rect mTempRect>
	//* 132  330:getfield        #1161 <Field int Rect.bottom>
	//* 133  333:aload_0         
	//* 134  334:getfield        #384 <Field Rect mTempRect2>
	//* 135  337:getfield        #1161 <Field int Rect.bottom>
	//* 136  340:icmplt          182
			return false;
	//  137  343:iconst_0        
	//  138  344:ireturn         
		if(true) goto _L6; else goto _L8
_L8:
	}

	private void onPointerUp(MotionEvent motionevent)
	{
		int i = motionevent.getActionIndex();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//    2    4:istore_2        
		if(motionevent.getPointerId(i) == mScrollPointerId)
	//*   3    5:aload_1         
	//*   4    6:iload_2         
	//*   5    7:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//*   6   10:aload_0         
	//*   7   11:getfield        #413 <Field int mScrollPointerId>
	//*   8   14:icmpne          74
		{
			int j;
			if(i == 0)
	//*   9   17:iload_2         
	//*  10   18:ifne            75
				i = 1;
	//   11   21:iconst_1        
	//   12   22:istore_2        
			else
	//*  13   23:aload_0         
	//*  14   24:aload_1         
	//*  15   25:iload_2         
	//*  16   26:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//*  17   29:putfield        #413 <Field int mScrollPointerId>
	//*  18   32:aload_1         
	//*  19   33:iload_2         
	//*  20   34:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//*  21   37:ldc2            #1283 <Float 0.5F>
	//*  22   40:fadd            
	//*  23   41:f2i             
	//*  24   42:istore_3        
	//*  25   43:aload_0         
	//*  26   44:iload_3         
	//*  27   45:putfield        #1285 <Field int mLastTouchX>
	//*  28   48:aload_0         
	//*  29   49:iload_3         
	//*  30   50:putfield        #1287 <Field int mInitialTouchX>
	//*  31   53:aload_1         
	//*  32   54:iload_2         
	//*  33   55:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//*  34   58:ldc2            #1283 <Float 0.5F>
	//*  35   61:fadd            
	//*  36   62:f2i             
	//*  37   63:istore_2        
	//*  38   64:aload_0         
	//*  39   65:iload_2         
	//*  40   66:putfield        #1292 <Field int mLastTouchY>
	//*  41   69:aload_0         
	//*  42   70:iload_2         
	//*  43   71:putfield        #1294 <Field int mInitialTouchY>
	//*  44   74:return          
				i = 0;
	//   45   75:iconst_0        
	//   46   76:istore_2        
			mScrollPointerId = motionevent.getPointerId(i);
			j = (int)(motionevent.getX(i) + 0.5F);
			mLastTouchX = j;
			mInitialTouchX = j;
			i = (int)(motionevent.getY(i) + 0.5F);
			mLastTouchY = i;
			mInitialTouchY = i;
		}
	//*  47   77:goto            23
	}

	private boolean predictiveItemAnimationsEnabled()
	{
		return mItemAnimator != null && mLayout.supportsPredictiveItemAnimations();
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1298 <Method boolean RecyclerView$LayoutManager.supportsPredictiveItemAnimations()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	private void processAdapterUpdatesAndSetAnimationFlags()
	{
		boolean flag2 = true;
	//    0    0:iconst_1        
	//    1    1:istore_3        
		if(mDataSetHasChangedAfterLayout)
	//*   2    2:aload_0         
	//*   3    3:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*   4    6:ifeq            24
		{
			mAdapterHelper.reset();
	//    5    9:aload_0         
	//    6   10:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//    7   13:invokevirtual   #1301 <Method void AdapterHelper.reset()>
			mLayout.onItemsChanged(this);
	//    8   16:aload_0         
	//    9   17:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   10   20:aload_0         
	//   11   21:invokevirtual   #1304 <Method void RecyclerView$LayoutManager.onItemsChanged(RecyclerView)>
		}
		boolean flag;
		boolean flag1;
		State state;
		if(predictiveItemAnimationsEnabled())
	//*  12   24:aload_0         
	//*  13   25:invokespecial   #1306 <Method boolean predictiveItemAnimationsEnabled()>
	//*  14   28:ifeq            163
			mAdapterHelper.preProcess();
	//   15   31:aload_0         
	//   16   32:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   17   35:invokevirtual   #1309 <Method void AdapterHelper.preProcess()>
		else
	//*  18   38:aload_0         
	//*  19   39:getfield        #433 <Field boolean mItemsAddedOrRemoved>
	//*  20   42:ifne            52
	//*  21   45:aload_0         
	//*  22   46:getfield        #435 <Field boolean mItemsChanged>
	//*  23   49:ifeq            173
	//*  24   52:iconst_1        
	//*  25   53:istore_1        
	//*  26   54:aload_0         
	//*  27   55:getfield        #431 <Field RecyclerView$State mState>
	//*  28   58:astore          4
	//*  29   60:aload_0         
	//*  30   61:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  31   64:ifeq            178
	//*  32   67:aload_0         
	//*  33   68:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   71:ifnull          178
	//*  35   74:aload_0         
	//*  36   75:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  37   78:ifne            95
	//*  38   81:iload_1         
	//*  39   82:ifne            95
	//*  40   85:aload_0         
	//*  41   86:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  42   89:getfield        #1039 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
	//*  43   92:ifeq            178
	//*  44   95:aload_0         
	//*  45   96:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  46   99:ifeq            112
	//*  47  102:aload_0         
	//*  48  103:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  49  106:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  50  109:ifeq            178
	//*  51  112:iconst_1        
	//*  52  113:istore_2        
	//*  53  114:aload           4
	//*  54  116:iload_2         
	//*  55  117:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  56  120:aload_0         
	//*  57  121:getfield        #431 <Field RecyclerView$State mState>
	//*  58  124:astore          4
	//*  59  126:aload_0         
	//*  60  127:getfield        #431 <Field RecyclerView$State mState>
	//*  61  130:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  62  133:ifeq            183
	//*  63  136:iload_1         
	//*  64  137:ifeq            183
	//*  65  140:aload_0         
	//*  66  141:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  67  144:ifne            183
	//*  68  147:aload_0         
	//*  69  148:invokespecial   #1306 <Method boolean predictiveItemAnimationsEnabled()>
	//*  70  151:ifeq            183
	//*  71  154:iload_3         
	//*  72  155:istore_2        
	//*  73  156:aload           4
	//*  74  158:iload_2         
	//*  75  159:putfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//*  76  162:return          
			mAdapterHelper.consumeUpdatesInOnePass();
	//   77  163:aload_0         
	//   78  164:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   79  167:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		if(mItemsAddedOrRemoved || mItemsChanged)
			flag = true;
		else
	//*  80  170:goto            38
			flag = false;
	//   81  173:iconst_0        
	//   82  174:istore_1        
		state = mState;
		if(mFirstLayoutComplete && mItemAnimator != null && (mDataSetHasChangedAfterLayout || flag || mLayout.mRequestedSimpleAnimations) && (!mDataSetHasChangedAfterLayout || mAdapter.hasStableIds()))
			flag1 = true;
		else
	//*  83  175:goto            54
			flag1 = false;
	//   84  178:iconst_0        
	//   85  179:istore_2        
		state.mRunSimpleAnimations = flag1;
		state = mState;
		if(mState.mRunSimpleAnimations && flag && !mDataSetHasChangedAfterLayout && predictiveItemAnimationsEnabled())
			flag1 = flag2;
		else
	//*  86  180:goto            114
			flag1 = false;
	//   87  183:iconst_0        
	//   88  184:istore_2        
		state.mRunPredictiveAnimations = flag1;
	//*  89  185:goto            156
	}

	private void pullGlows(float f, float f1, float f2, float f3)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          6
		boolean flag = false;
	//    2    3:iconst_0        
	//    3    4:istore          5
		if(f1 < 0.0F)
	//*   4    6:fload_2         
	//*   5    7:fconst_0        
	//*   6    8:fcmpg           
	//*   7    9:ifge            104
		{
			ensureLeftGlow();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1316 <Method void ensureLeftGlow()>
			EdgeEffectCompat.onPull(mLeftGlow, -f1 / (float)getWidth(), 1.0F - f2 / (float)getHeight());
	//   10   16:aload_0         
	//   11   17:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   12   20:fload_2         
	//   13   21:fneg            
	//   14   22:aload_0         
	//   15   23:invokevirtual   #1319 <Method int getWidth()>
	//   16   26:i2f             
	//   17   27:fdiv            
	//   18   28:fconst_1        
	//   19   29:fload_3         
	//   20   30:aload_0         
	//   21   31:invokevirtual   #1320 <Method int getHeight()>
	//   22   34:i2f             
	//   23   35:fdiv            
	//   24   36:fsub            
	//   25   37:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   26   40:iconst_1        
	//   27   41:istore          5
		} else
	//*  28   43:fload           4
	//*  29   45:fconst_0        
	//*  30   46:fcmpg           
	//*  31   47:ifge            141
	//*  32   50:aload_0         
	//*  33   51:invokevirtual   #1329 <Method void ensureTopGlow()>
	//*  34   54:aload_0         
	//*  35   55:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  36   58:fload           4
	//*  37   60:fneg            
	//*  38   61:aload_0         
	//*  39   62:invokevirtual   #1320 <Method int getHeight()>
	//*  40   65:i2f             
	//*  41   66:fdiv            
	//*  42   67:fload_1         
	//*  43   68:aload_0         
	//*  44   69:invokevirtual   #1319 <Method int getWidth()>
	//*  45   72:i2f             
	//*  46   73:fdiv            
	//*  47   74:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
	//*  48   77:iload           6
	//*  49   79:istore          5
	//*  50   81:iload           5
	//*  51   83:ifne            99
	//*  52   86:fload_2         
	//*  53   87:fconst_0        
	//*  54   88:fcmpl           
	//*  55   89:ifne            99
	//*  56   92:fload           4
	//*  57   94:fconst_0        
	//*  58   95:fcmpl           
	//*  59   96:ifeq            103
	//*  60   99:aload_0         
	//*  61  100:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//*  62  103:return          
		if(f1 > 0.0F)
	//*  63  104:fload_2         
	//*  64  105:fconst_0        
	//*  65  106:fcmpl           
	//*  66  107:ifle            43
		{
			ensureRightGlow();
	//   67  110:aload_0         
	//   68  111:invokevirtual   #1337 <Method void ensureRightGlow()>
			EdgeEffectCompat.onPull(mRightGlow, f1 / (float)getWidth(), f2 / (float)getHeight());
	//   69  114:aload_0         
	//   70  115:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   71  118:fload_2         
	//   72  119:aload_0         
	//   73  120:invokevirtual   #1319 <Method int getWidth()>
	//   74  123:i2f             
	//   75  124:fdiv            
	//   76  125:fload_3         
	//   77  126:aload_0         
	//   78  127:invokevirtual   #1320 <Method int getHeight()>
	//   79  130:i2f             
	//   80  131:fdiv            
	//   81  132:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   82  135:iconst_1        
	//   83  136:istore          5
		}
		if(f3 < 0.0F)
		{
			ensureTopGlow();
			EdgeEffectCompat.onPull(mTopGlow, -f3 / (float)getHeight(), f / (float)getWidth());
			flag = flag1;
		} else
	//*  84  138:goto            43
		if(f3 > 0.0F)
	//*  85  141:fload           4
	//*  86  143:fconst_0        
	//*  87  144:fcmpl           
	//*  88  145:ifle            183
		{
			ensureBottomGlow();
	//   89  148:aload_0         
	//   90  149:invokevirtual   #1342 <Method void ensureBottomGlow()>
			EdgeEffectCompat.onPull(mBottomGlow, f3 / (float)getHeight(), 1.0F - f / (float)getWidth());
	//   91  152:aload_0         
	//   92  153:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   93  156:fload           4
	//   94  158:aload_0         
	//   95  159:invokevirtual   #1320 <Method int getHeight()>
	//   96  162:i2f             
	//   97  163:fdiv            
	//   98  164:fconst_1        
	//   99  165:fload_1         
	//  100  166:aload_0         
	//  101  167:invokevirtual   #1319 <Method int getWidth()>
	//  102  170:i2f             
	//  103  171:fdiv            
	//  104  172:fsub            
	//  105  173:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = flag1;
	//  106  176:iload           6
	//  107  178:istore          5
		}
		if(flag || f1 != 0.0F || f3 != 0.0F)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//* 108  180:goto            81
	//* 109  183:goto            81
	}

	private void recoverFocusFromState()
	{
		Object obj1 = null;
	//    0    0:aconst_null     
	//    1    1:astore_2        
		if(mPreserveFocusAfterLayout && mAdapter != null && hasFocus() && getDescendantFocusability() != 0x60000 && (getDescendantFocusability() != 0x20000 || !isFocused())) goto _L2; else goto _L1
	//    2    2:aload_0         
	//    3    3:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    4    6:ifeq            50
	//    5    9:aload_0         
	//    6   10:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    7   13:ifnull          50
	//    8   16:aload_0         
	//    9   17:invokevirtual   #1345 <Method boolean hasFocus()>
	//   10   20:ifeq            50
	//   11   23:aload_0         
	//   12   24:invokevirtual   #1348 <Method int getDescendantFocusability()>
	//   13   27:ldc2            #1349 <Int 0x60000>
	//   14   30:icmpeq          50
	//   15   33:aload_0         
	//   16   34:invokevirtual   #1348 <Method int getDescendantFocusability()>
	//   17   37:ldc2            #1350 <Int 0x20000>
	//   18   40:icmpne          51
	//   19   43:aload_0         
	//   20   44:invokevirtual   #1351 <Method boolean isFocused()>
	//   21   47:ifeq            51
_L1:
		return;
	//   22   50:return          
_L2:
		View view;
		if(isFocused())
			break; /* Loop/switch isn't completed */
	//   23   51:aload_0         
	//   24   52:invokevirtual   #1351 <Method boolean isFocused()>
	//   25   55:ifne            110
		view = getFocusedChild();
	//   26   58:aload_0         
	//   27   59:invokevirtual   #1352 <Method View getFocusedChild()>
	//   28   62:astore_1        
		if(!IGNORE_DETACHED_FOCUSED_CHILD || view.getParent() != null && view.hasFocus())
			continue; /* Loop/switch isn't completed */
	//   29   63:getstatic       #331 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//   30   66:ifeq            99
	//   31   69:aload_1         
	//   32   70:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   33   73:ifnull          83
	//   34   76:aload_1         
	//   35   77:invokevirtual   #1178 <Method boolean View.hasFocus()>
	//   36   80:ifne            99
		if(mChildHelper.getChildCount() == 0)
	//*  37   83:aload_0         
	//*  38   84:getfield        #663 <Field ChildHelper mChildHelper>
	//*  39   87:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  40   90:ifne            110
		{
			requestFocus();
	//   41   93:aload_0         
	//   42   94:invokevirtual   #1355 <Method boolean requestFocus()>
	//   43   97:pop             
			return;
	//   44   98:return          
		}
		break; /* Loop/switch isn't completed */
		if(!mChildHelper.isHidden(view)) goto _L1; else goto _L3
	//   45   99:aload_0         
	//   46  100:getfield        #663 <Field ChildHelper mChildHelper>
	//   47  103:aload_1         
	//   48  104:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   49  107:ifeq            50
_L3:
		Object obj;
		if(mState.mFocusedItemId != -1L && mAdapter.hasStableIds())
	//*  50  110:aload_0         
	//*  51  111:getfield        #431 <Field RecyclerView$State mState>
	//*  52  114:getfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//*  53  117:ldc2w           #156 <Long -1L>
	//*  54  120:lcmp            
	//*  55  121:ifeq            252
	//*  56  124:aload_0         
	//*  57  125:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  58  128:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  59  131:ifeq            252
			obj = ((Object) (findViewHolderForItemId(mState.mFocusedItemId)));
	//   60  134:aload_0         
	//   61  135:aload_0         
	//   62  136:getfield        #431 <Field RecyclerView$State mState>
	//   63  139:getfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//   64  142:invokevirtual   #1365 <Method RecyclerView$ViewHolder findViewHolderForItemId(long)>
	//   65  145:astore_1        
		else
	//*  66  146:aload_1         
	//*  67  147:ifnull          174
	//*  68  150:aload_0         
	//*  69  151:getfield        #663 <Field ChildHelper mChildHelper>
	//*  70  154:aload_1         
	//*  71  155:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  72  158:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//*  73  161:ifne            174
	//*  74  164:aload_1         
	//*  75  165:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  76  168:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  77  171:ifne            241
	//*  78  174:aload_2         
	//*  79  175:astore_1        
	//*  80  176:aload_0         
	//*  81  177:getfield        #663 <Field ChildHelper mChildHelper>
	//*  82  180:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  83  183:ifle            191
	//*  84  186:aload_0         
	//*  85  187:invokespecial   #1367 <Method View findNextViewToFocus()>
	//*  86  190:astore_1        
	//*  87  191:aload_1         
	//*  88  192:ifnull          50
	//*  89  195:aload_0         
	//*  90  196:getfield        #431 <Field RecyclerView$State mState>
	//*  91  199:getfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//*  92  202:i2l             
	//*  93  203:ldc2w           #156 <Long -1L>
	//*  94  206:lcmp            
	//*  95  207:ifeq            249
	//*  96  210:aload_1         
	//*  97  211:aload_0         
	//*  98  212:getfield        #431 <Field RecyclerView$State mState>
	//*  99  215:getfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 100  218:invokevirtual   #1373 <Method View View.findViewById(int)>
	//* 101  221:astore_2        
	//* 102  222:aload_2         
	//* 103  223:ifnull          249
	//* 104  226:aload_2         
	//* 105  227:invokevirtual   #1376 <Method boolean View.isFocusable()>
	//* 106  230:ifeq            249
	//* 107  233:aload_2         
	//* 108  234:astore_1        
	//* 109  235:aload_1         
	//* 110  236:invokevirtual   #1377 <Method boolean View.requestFocus()>
	//* 111  239:pop             
	//* 112  240:return          
	//* 113  241:aload_1         
	//* 114  242:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//* 115  245:astore_1        
	//* 116  246:goto            191
	//* 117  249:goto            235
			obj = null;
	//  118  252:aconst_null     
	//  119  253:astore_1        
		if(obj == null || mChildHelper.isHidden(((ViewHolder) (obj)).itemView) || !((ViewHolder) (obj)).itemView.hasFocusable())
		{
			obj = ((Object) (obj1));
			if(mChildHelper.getChildCount() > 0)
				obj = ((Object) (findNextViewToFocus()));
		} else
		{
			obj = ((Object) (((ViewHolder) (obj)).itemView));
		}
		if(obj != null)
		{
			if((long)mState.mFocusedSubChildId != -1L)
			{
				View view1 = ((View) (obj)).findViewById(mState.mFocusedSubChildId);
				if(view1 != null && view1.isFocusable())
					obj = ((Object) (view1));
			}
			((View) (obj)).requestFocus();
			return;
		}
		if(true) goto _L1; else goto _L4
	//  120  254:goto            146
_L4:
	}

	private void releaseGlows()
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore_2        
		if(mLeftGlow != null)
	//*   2    2:aload_0         
	//*   3    3:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   4    6:ifnull          24
		{
			mLeftGlow.onRelease();
	//    5    9:aload_0         
	//    6   10:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//    7   13:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//    8   16:aload_0         
	//    9   17:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   10   20:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   11   23:istore_2        
		}
		boolean flag = flag1;
	//   12   24:iload_2         
	//   13   25:istore_1        
		if(mTopGlow != null)
	//*  14   26:aload_0         
	//*  15   27:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  16   30:ifnull          50
		{
			mTopGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   19   37:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mTopGlow.isFinished();
	//   20   40:iload_2         
	//   21   41:aload_0         
	//   22   42:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   23   45:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   24   48:ior             
	//   25   49:istore_1        
		}
		flag1 = flag;
	//   26   50:iload_1         
	//   27   51:istore_2        
		if(mRightGlow != null)
	//*  28   52:aload_0         
	//*  29   53:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  30   56:ifnull          76
		{
			mRightGlow.onRelease();
	//   31   59:aload_0         
	//   32   60:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   33   63:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag1 = flag | mRightGlow.isFinished();
	//   34   66:iload_1         
	//   35   67:aload_0         
	//   36   68:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   37   71:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   38   74:ior             
	//   39   75:istore_2        
		}
		flag = flag1;
	//   40   76:iload_2         
	//   41   77:istore_1        
		if(mBottomGlow != null)
	//*  42   78:aload_0         
	//*  43   79:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  44   82:ifnull          102
		{
			mBottomGlow.onRelease();
	//   45   85:aload_0         
	//   46   86:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   47   89:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mBottomGlow.isFinished();
	//   48   92:iload_2         
	//   49   93:aload_0         
	//   50   94:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   51   97:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   52  100:ior             
	//   53  101:istore_1        
		}
		if(flag)
	//*  54  102:iload_1         
	//*  55  103:ifeq            110
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   56  106:aload_0         
	//   57  107:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   58  110:return          
	}

	private void requestChildOnScreen(View view, View view1)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          5
		boolean flag;
		Object obj;
		Rect rect1;
		if(view1 != null)
	//*   2    3:aload_2         
	//*   3    4:ifnull          219
			obj = ((Object) (view1));
	//    4    7:aload_2         
	//    5    8:astore          6
		else
	//*   6   10:aload_0         
	//*   7   11:getfield        #382 <Field Rect mTempRect>
	//*   8   14:iconst_0        
	//*   9   15:iconst_0        
	//*  10   16:aload           6
	//*  11   18:invokevirtual   #1255 <Method int View.getWidth()>
	//*  12   21:aload           6
	//*  13   23:invokevirtual   #1258 <Method int View.getHeight()>
	//*  14   26:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
	//*  15   29:aload           6
	//*  16   31:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//*  17   34:astore          6
	//*  18   36:aload           6
	//*  19   38:instanceof      #68  <Class RecyclerView$LayoutParams>
	//*  20   41:ifeq            156
	//*  21   44:aload           6
	//*  22   46:checkcast       #68  <Class RecyclerView$LayoutParams>
	//*  23   49:astore          6
	//*  24   51:aload           6
	//*  25   53:getfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*  26   56:ifne            156
	//*  27   59:aload           6
	//*  28   61:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//*  29   64:astore          6
	//*  30   66:aload_0         
	//*  31   67:getfield        #382 <Field Rect mTempRect>
	//*  32   70:astore          7
	//*  33   72:aload           7
	//*  34   74:aload           7
	//*  35   76:getfield        #1134 <Field int Rect.left>
	//*  36   79:aload           6
	//*  37   81:getfield        #1134 <Field int Rect.left>
	//*  38   84:isub            
	//*  39   85:putfield        #1134 <Field int Rect.left>
	//*  40   88:aload_0         
	//*  41   89:getfield        #382 <Field Rect mTempRect>
	//*  42   92:astore          7
	//*  43   94:aload           7
	//*  44   96:aload           7
	//*  45   98:getfield        #1152 <Field int Rect.right>
	//*  46  101:aload           6
	//*  47  103:getfield        #1152 <Field int Rect.right>
	//*  48  106:iadd            
	//*  49  107:putfield        #1152 <Field int Rect.right>
	//*  50  110:aload_0         
	//*  51  111:getfield        #382 <Field Rect mTempRect>
	//*  52  114:astore          7
	//*  53  116:aload           7
	//*  54  118:aload           7
	//*  55  120:getfield        #1143 <Field int Rect.top>
	//*  56  123:aload           6
	//*  57  125:getfield        #1143 <Field int Rect.top>
	//*  58  128:isub            
	//*  59  129:putfield        #1143 <Field int Rect.top>
	//*  60  132:aload_0         
	//*  61  133:getfield        #382 <Field Rect mTempRect>
	//*  62  136:astore          7
	//*  63  138:aload           7
	//*  64  140:getfield        #1161 <Field int Rect.bottom>
	//*  65  143:istore_3        
	//*  66  144:aload           7
	//*  67  146:aload           6
	//*  68  148:getfield        #1161 <Field int Rect.bottom>
	//*  69  151:iload_3         
	//*  70  152:iadd            
	//*  71  153:putfield        #1161 <Field int Rect.bottom>
	//*  72  156:aload_2         
	//*  73  157:ifnull          178
	//*  74  160:aload_0         
	//*  75  161:aload_2         
	//*  76  162:aload_0         
	//*  77  163:getfield        #382 <Field Rect mTempRect>
	//*  78  166:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
	//*  79  169:aload_0         
	//*  80  170:aload_1         
	//*  81  171:aload_0         
	//*  82  172:getfield        #382 <Field Rect mTempRect>
	//*  83  175:invokevirtual   #1394 <Method void offsetRectIntoDescendantCoords(View, Rect)>
	//*  84  178:aload_0         
	//*  85  179:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  86  182:astore          6
	//*  87  184:aload_0         
	//*  88  185:getfield        #382 <Field Rect mTempRect>
	//*  89  188:astore          7
	//*  90  190:aload_0         
	//*  91  191:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  92  194:ifne            225
	//*  93  197:iconst_1        
	//*  94  198:istore          4
	//*  95  200:aload_2         
	//*  96  201:ifnonnull       231
	//*  97  204:aload           6
	//*  98  206:aload_0         
	//*  99  207:aload_1         
	//* 100  208:aload           7
	//* 101  210:iload           4
	//* 102  212:iload           5
	//* 103  214:invokevirtual   #1398 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
	//* 104  217:pop             
	//* 105  218:return          
			obj = ((Object) (view));
	//  106  219:aload_1         
	//  107  220:astore          6
		mTempRect.set(0, 0, ((View) (obj)).getWidth(), ((View) (obj)).getHeight());
		obj = ((Object) (((View) (obj)).getLayoutParams()));
		if(obj instanceof LayoutParams)
		{
			obj = ((Object) ((LayoutParams)obj));
			if(!((LayoutParams) (obj)).mInsetsDirty)
			{
				obj = ((Object) (((LayoutParams) (obj)).mDecorInsets));
				Rect rect = mTempRect;
				rect.left = rect.left - ((Rect) (obj)).left;
				rect = mTempRect;
				rect.right = rect.right + ((Rect) (obj)).right;
				rect = mTempRect;
				rect.top = rect.top - ((Rect) (obj)).top;
				rect = mTempRect;
				int i = rect.bottom;
				rect.bottom = ((Rect) (obj)).bottom + i;
			}
		}
		if(view1 != null)
		{
			offsetDescendantRectToMyCoords(view1, mTempRect);
			offsetRectIntoDescendantCoords(view, mTempRect);
		}
		obj = ((Object) (mLayout));
		rect1 = mTempRect;
		if(!mFirstLayoutComplete)
			flag = true;
		else
	//* 108  222:goto            10
			flag = false;
	//  109  225:iconst_0        
	//  110  226:istore          4
		if(view1 != null)
	//* 111  228:goto            200
			flag1 = false;
	//  112  231:iconst_0        
	//  113  232:istore          5
		((LayoutManager) (obj)).requestChildRectangleOnScreen(this, view, rect1, flag, flag1);
	//* 114  234:goto            204
	}

	private void resetFocusInfo()
	{
		mState.mFocusedItemId = -1L;
	//    0    0:aload_0         
	//    1    1:getfield        #431 <Field RecyclerView$State mState>
	//    2    4:ldc2w           #156 <Long -1L>
	//    3    7:putfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
		mState.mFocusedItemPosition = -1;
	//    4   10:aload_0         
	//    5   11:getfield        #431 <Field RecyclerView$State mState>
	//    6   14:iconst_m1       
	//    7   15:putfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = -1;
	//    8   18:aload_0         
	//    9   19:getfield        #431 <Field RecyclerView$State mState>
	//   10   22:iconst_m1       
	//   11   23:putfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//   12   26:return          
	}

	private void resetTouch()
	{
		if(mVelocityTracker != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*   2    4:ifnull          14
			mVelocityTracker.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//    5   11:invokevirtual   #1403 <Method void VelocityTracker.clear()>
		stopNestedScroll(0);
	//    6   14:aload_0         
	//    7   15:iconst_0        
	//    8   16:invokevirtual   #1406 <Method void stopNestedScroll(int)>
		releaseGlows();
	//    9   19:aload_0         
	//   10   20:invokespecial   #1408 <Method void releaseGlows()>
	//   11   23:return          
	}

	private void saveFocusInfo()
	{
		int i;
		long l;
		Object obj;
		State state;
		if(mPreserveFocusAfterLayout && hasFocus() && mAdapter != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//*   2    4:ifeq            155
	//*   3    7:aload_0         
	//*   4    8:invokevirtual   #1345 <Method boolean hasFocus()>
	//*   5   11:ifeq            155
	//*   6   14:aload_0         
	//*   7   15:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   8   18:ifnull          155
			obj = ((Object) (getFocusedChild()));
	//    9   21:aload_0         
	//   10   22:invokevirtual   #1352 <Method View getFocusedChild()>
	//   11   25:astore          4
		else
	//*  12   27:aload           4
	//*  13   29:ifnonnull       45
	//*  14   32:aconst_null     
	//*  15   33:astore          4
	//*  16   35:aload           4
	//*  17   37:ifnonnull       56
	//*  18   40:aload_0         
	//*  19   41:invokespecial   #1066 <Method void resetFocusInfo()>
	//*  20   44:return          
	//*  21   45:aload_0         
	//*  22   46:aload           4
	//*  23   48:invokevirtual   #1411 <Method RecyclerView$ViewHolder findContainingViewHolder(View)>
	//*  24   51:astore          4
	//*  25   53:goto            35
	//*  26   56:aload_0         
	//*  27   57:getfield        #431 <Field RecyclerView$State mState>
	//*  28   60:astore          5
	//*  29   62:aload_0         
	//*  30   63:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  31   66:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  32   69:ifeq            122
	//*  33   72:aload           4
	//*  34   74:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//*  35   77:lstore_2        
	//*  36   78:aload           5
	//*  37   80:lload_2         
	//*  38   81:putfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//*  39   84:aload_0         
	//*  40   85:getfield        #431 <Field RecyclerView$State mState>
	//*  41   88:astore          5
	//*  42   90:aload_0         
	//*  43   91:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  44   94:ifeq            129
	//*  45   97:iconst_m1       
	//*  46   98:istore_1        
	//*  47   99:aload           5
	//*  48  101:iload_1         
	//*  49  102:putfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//*  50  105:aload_0         
	//*  51  106:getfield        #431 <Field RecyclerView$State mState>
	//*  52  109:aload_0         
	//*  53  110:aload           4
	//*  54  112:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  55  115:invokespecial   #1417 <Method int getDeepestFocusedViewWithId(View)>
	//*  56  118:putfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//*  57  121:return          
	//*  58  122:ldc2w           #156 <Long -1L>
	//*  59  125:lstore_2        
	//*  60  126:goto            78
	//*  61  129:aload           4
	//*  62  131:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  63  134:ifeq            146
	//*  64  137:aload           4
	//*  65  139:getfield        #1420 <Field int RecyclerView$ViewHolder.mOldPosition>
	//*  66  142:istore_1        
	//*  67  143:goto            99
	//*  68  146:aload           4
	//*  69  148:invokevirtual   #1423 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//*  70  151:istore_1        
	//*  71  152:goto            99
			obj = null;
	//   72  155:aconst_null     
	//   73  156:astore          4
		if(obj == null)
			obj = null;
		else
			obj = ((Object) (findContainingViewHolder(((View) (obj)))));
		if(obj == null)
		{
			resetFocusInfo();
			return;
		}
		state = mState;
		if(mAdapter.hasStableIds())
			l = ((ViewHolder) (obj)).getItemId();
		else
			l = -1L;
		state.mFocusedItemId = l;
		state = mState;
		if(mDataSetHasChangedAfterLayout)
			i = -1;
		else
		if(((ViewHolder) (obj)).isRemoved())
			i = ((ViewHolder) (obj)).mOldPosition;
		else
			i = ((ViewHolder) (obj)).getAdapterPosition();
		state.mFocusedItemPosition = i;
		mState.mFocusedSubChildId = getDeepestFocusedViewWithId(((ViewHolder) (obj)).itemView);
	//*  74  158:goto            27
	}

	private void setAdapterInternal(Adapter adapter, boolean flag, boolean flag1)
	{
		if(mAdapter != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          26
		{
			mAdapter.unregisterAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//    3    7:aload_0         
	//    4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    5   11:aload_0         
	//    6   12:getfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//    7   15:invokevirtual   #1429 <Method void RecyclerView$Adapter.unregisterAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			mAdapter.onDetachedFromRecyclerView(this);
	//    8   18:aload_0         
	//    9   19:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   10   22:aload_0         
	//   11   23:invokevirtual   #1432 <Method void RecyclerView$Adapter.onDetachedFromRecyclerView(RecyclerView)>
		}
		if(!flag || flag1)
	//*  12   26:iload_2         
	//*  13   27:ifeq            34
	//*  14   30:iload_3         
	//*  15   31:ifeq            38
			removeAndRecycleViews();
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1435 <Method void removeAndRecycleViews()>
		mAdapterHelper.reset();
	//   18   38:aload_0         
	//   19   39:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   20   42:invokevirtual   #1301 <Method void AdapterHelper.reset()>
		Adapter adapter1 = mAdapter;
	//   21   45:aload_0         
	//   22   46:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   23   49:astore          4
		mAdapter = adapter;
	//   24   51:aload_0         
	//   25   52:aload_1         
	//   26   53:putfield        #891 <Field RecyclerView$Adapter mAdapter>
		if(adapter != null)
	//*  27   56:aload_1         
	//*  28   57:ifnull          73
		{
			adapter.registerAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//   29   60:aload_1         
	//   30   61:aload_0         
	//   31   62:getfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//   32   65:invokevirtual   #1438 <Method void RecyclerView$Adapter.registerAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			adapter.onAttachedToRecyclerView(this);
	//   33   68:aload_1         
	//   34   69:aload_0         
	//   35   70:invokevirtual   #1441 <Method void RecyclerView$Adapter.onAttachedToRecyclerView(RecyclerView)>
		}
		if(mLayout != null)
	//*  36   73:aload_0         
	//*  37   74:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  38   77:ifnull          93
			mLayout.onAdapterChanged(adapter1, mAdapter);
	//   39   80:aload_0         
	//   40   81:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   41   84:aload           4
	//   42   86:aload_0         
	//   43   87:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   44   90:invokevirtual   #1445 <Method void RecyclerView$LayoutManager.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter)>
		mRecycler.onAdapterChanged(adapter1, mAdapter, flag);
	//   45   93:aload_0         
	//   46   94:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   47   97:aload           4
	//   48   99:aload_0         
	//   49  100:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   50  103:iload_2         
	//   51  104:invokevirtual   #1448 <Method void RecyclerView$Recycler.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		mState.mStructureChanged = true;
	//   52  107:aload_0         
	//   53  108:getfield        #431 <Field RecyclerView$State mState>
	//   54  111:iconst_1        
	//   55  112:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		setDataSetChangedAfterLayout();
	//   56  115:aload_0         
	//   57  116:invokevirtual   #1451 <Method void setDataSetChangedAfterLayout()>
	//   58  119:return          
	}

	private void stopScrollersInternal()
	{
		mViewFlinger.stop();
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    2    4:invokevirtual   #1455 <Method void RecyclerView$ViewFlinger.stop()>
		if(mLayout != null)
	//*   3    7:aload_0         
	//*   4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:ifnull          21
			mLayout.stopSmoothScroller();
	//    6   14:aload_0         
	//    7   15:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    8   18:invokevirtual   #1458 <Method void RecyclerView$LayoutManager.stopSmoothScroller()>
	//    9   21:return          
	}

	void absorbGlows(int i, int j)
	{
		if(i < 0)
	//*   0    0:iload_1         
	//*   1    1:ifge            47
		{
			ensureLeftGlow();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #1316 <Method void ensureLeftGlow()>
			mLeftGlow.onAbsorb(-i);
	//    4    8:aload_0         
	//    5    9:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//    6   12:iload_1         
	//    7   13:ineg            
	//    8   14:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*   9   17:iload_2         
	//*  10   18:ifge            66
	//*  11   21:aload_0         
	//*  12   22:invokevirtual   #1329 <Method void ensureTopGlow()>
	//*  13   25:aload_0         
	//*  14   26:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  15   29:iload_2         
	//*  16   30:ineg            
	//*  17   31:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
	//*  18   34:iload_1         
	//*  19   35:ifne            42
	//*  20   38:iload_2         
	//*  21   39:ifeq            46
	//*  22   42:aload_0         
	//*  23   43:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//*  24   46:return          
		if(i > 0)
	//*  25   47:iload_1         
	//*  26   48:ifle            17
		{
			ensureRightGlow();
	//   27   51:aload_0         
	//   28   52:invokevirtual   #1337 <Method void ensureRightGlow()>
			mRightGlow.onAbsorb(i);
	//   29   55:aload_0         
	//   30   56:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   31   59:iload_1         
	//   32   60:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(j < 0)
		{
			ensureTopGlow();
			mTopGlow.onAbsorb(-j);
		} else
	//*  33   63:goto            17
		if(j > 0)
	//*  34   66:iload_2         
	//*  35   67:ifle            34
		{
			ensureBottomGlow();
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1342 <Method void ensureBottomGlow()>
			mBottomGlow.onAbsorb(j);
	//   38   74:aload_0         
	//   39   75:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   40   78:iload_2         
	//   41   79:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(i != 0 || j != 0)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//*  42   82:goto            34
	}

	public void addFocusables(ArrayList arraylist, int i, int j)
	{
		if(mLayout == null || !mLayout.onAddFocusables(this, arraylist, i, j))
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          21
	//*   3    7:aload_0         
	//*   4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:aload_0         
	//*   6   12:aload_1         
	//*   7   13:iload_2         
	//*   8   14:iload_3         
	//*   9   15:invokevirtual   #1468 <Method boolean RecyclerView$LayoutManager.onAddFocusables(RecyclerView, ArrayList, int, int)>
	//*  10   18:ifne            28
			super.addFocusables(arraylist, i, j);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:iload_2         
	//   14   24:iload_3         
	//   15   25:invokespecial   #1470 <Method void ViewGroup.addFocusables(ArrayList, int, int)>
	//   16   28:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration)
	{
		addItemDecoration(itemdecoration, -1);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iconst_m1       
	//    3    3:invokevirtual   #1477 <Method void addItemDecoration(RecyclerView$ItemDecoration, int)>
	//    4    6:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration, int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #1479 <String "Cannot add item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		if(mItemDecorations.isEmpty())
	//*   7   17:aload_0         
	//*   8   18:getfield        #394 <Field ArrayList mItemDecorations>
	//*   9   21:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  10   24:ifeq            32
			setWillNotDraw(false);
	//   11   27:aload_0         
	//   12   28:iconst_0        
	//   13   29:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
		if(i < 0)
	//*  14   32:iload_2         
	//*  15   33:ifge            54
			mItemDecorations.add(((Object) (itemdecoration)));
	//   16   36:aload_0         
	//   17   37:getfield        #394 <Field ArrayList mItemDecorations>
	//   18   40:aload_1         
	//   19   41:invokevirtual   #1487 <Method boolean ArrayList.add(Object)>
	//   20   44:pop             
		else
	//*  21   45:aload_0         
	//*  22   46:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
	//*  23   49:aload_0         
	//*  24   50:invokevirtual   #1493 <Method void requestLayout()>
	//*  25   53:return          
			mItemDecorations.add(i, ((Object) (itemdecoration)));
	//   26   54:aload_0         
	//   27   55:getfield        #394 <Field ArrayList mItemDecorations>
	//   28   58:iload_2         
	//   29   59:aload_1         
	//   30   60:invokevirtual   #1496 <Method void ArrayList.add(int, Object)>
		markItemDecorInsetsDirty();
		requestLayout();
	//*  31   63:goto            45
	}

	public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       18
			mOnChildAttachStateListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #391 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #392 <Method void ArrayList()>
	//    7   15:putfield        #1500 <Field List mOnChildAttachStateListeners>
		mOnChildAttachStateListeners.add(((Object) (onchildattachstatechangelistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1503 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	public void addOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.add(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #1487 <Method boolean ArrayList.add(Object)>
	//    4    8:pop             
	//    5    9:return          
	}

	public void addOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnonnull       18
			mScrollListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #391 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #392 <Method void ArrayList()>
	//    7   15:putfield        #1509 <Field List mScrollListeners>
		mScrollListeners.add(((Object) (onscrolllistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1509 <Field List mScrollListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1503 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	void animateAppearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateAppearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   3    5:aload_0         
	//*   4    6:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:aload_3         
	//*   8   12:invokevirtual   #1514 <Method boolean RecyclerView$ItemAnimator.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*   9   15:ifeq            22
			postAnimationRunner();
	//   10   18:aload_0         
	//   11   19:invokevirtual   #701 <Method void postAnimationRunner()>
	//   12   22:return          
	}

	void animateDisappearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		addAnimatingView(viewholder);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		viewholder.setIsRecyclable(false);
	//    3    5:aload_1         
	//    4    6:iconst_0        
	//    5    7:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateDisappearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   6   10:aload_0         
	//*   7   11:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   8   14:aload_1         
	//*   9   15:aload_2         
	//*  10   16:aload_3         
	//*  11   17:invokevirtual   #1517 <Method boolean RecyclerView$ItemAnimator.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  12   20:ifeq            27
			postAnimationRunner();
	//   13   23:aload_0         
	//   14   24:invokevirtual   #701 <Method void postAnimationRunner()>
	//   15   27:return          
	}

	void assertInLayoutOrScroll(String s)
	{
		if(!isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifne            71
		{
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       42
				throw new IllegalStateException((new StringBuilder()).append("Cannot call this method unless RecyclerView is computing a layout or scrolling").append(exceptionLabel()).toString());
	//    5   11:new             #794 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:new             #796 <Class StringBuilder>
	//    8   18:dup             
	//    9   19:invokespecial   #797 <Method void StringBuilder()>
	//   10   22:ldc2            #1523 <String "Cannot call this method unless RecyclerView is computing a layout or scrolling">
	//   11   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1224 <Method String exceptionLabel()>
	//   14   32:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   35:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   16   38:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   17   41:athrow          
			else
				throw new IllegalStateException((new StringBuilder()).append(s).append(exceptionLabel()).toString());
	//   18   42:new             #794 <Class IllegalStateException>
	//   19   45:dup             
	//   20   46:new             #796 <Class StringBuilder>
	//   21   49:dup             
	//   22   50:invokespecial   #797 <Method void StringBuilder()>
	//   23   53:aload_1         
	//   24   54:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   25   57:aload_0         
	//   26   58:invokevirtual   #1224 <Method String exceptionLabel()>
	//   27   61:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   28   64:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   29   67:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   30   70:athrow          
		} else
		{
			return;
	//   31   71:return          
		}
	}

	void assertNotInLayoutOrScroll(String s)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            51
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       42
				throw new IllegalStateException((new StringBuilder()).append("Cannot call this method while RecyclerView is computing a layout or scrolling").append(exceptionLabel()).toString());
	//    5   11:new             #794 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:new             #796 <Class StringBuilder>
	//    8   18:dup             
	//    9   19:invokespecial   #797 <Method void StringBuilder()>
	//   10   22:ldc2            #1525 <String "Cannot call this method while RecyclerView is computing a layout or scrolling">
	//   11   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1224 <Method String exceptionLabel()>
	//   14   32:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   35:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   16   38:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   17   41:athrow          
			else
				throw new IllegalStateException(s);
	//   18   42:new             #794 <Class IllegalStateException>
	//   19   45:dup             
	//   20   46:aload_1         
	//   21   47:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   22   50:athrow          
		if(mDispatchScrollCounter > 0)
	//*  23   51:aload_0         
	//*  24   52:getfield        #404 <Field int mDispatchScrollCounter>
	//*  25   55:ifle            97
			Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", ((Throwable) (new IllegalStateException((new StringBuilder()).append("").append(exceptionLabel()).toString()))));
	//   26   58:ldc1            #168 <String "RecyclerView">
	//   27   60:ldc2            #1527 <String "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.">
	//   28   63:new             #794 <Class IllegalStateException>
	//   29   66:dup             
	//   30   67:new             #796 <Class StringBuilder>
	//   31   70:dup             
	//   32   71:invokespecial   #797 <Method void StringBuilder()>
	//   33   74:ldc2            #1529 <String "">
	//   34   77:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   35   80:aload_0         
	//   36   81:invokevirtual   #1224 <Method String exceptionLabel()>
	//   37   84:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   38   87:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   39   90:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   40   93:invokestatic    #1533 <Method int Log.w(String, String, Throwable)>
	//   41   96:pop             
	//   42   97:return          
	}

	boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
	{
		return mItemAnimator == null || mItemAnimator.canReuseUpdatedViewHolder(viewholder, viewholder.getUnmodifiedPayloads());
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          22
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:aload_1         
	//    6   12:aload_1         
	//    7   13:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//    8   16:invokevirtual   #1537 <Method boolean RecyclerView$ItemAnimator.canReuseUpdatedViewHolder(RecyclerView$ViewHolder, List)>
	//    9   19:ifeq            24
	//   10   22:iconst_1        
	//   11   23:ireturn         
	//   12   24:iconst_0        
	//   13   25:ireturn         
	}

	protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		return (layoutparams instanceof LayoutParams) && mLayout.checkLayoutParams((LayoutParams)layoutparams);
	//    0    0:aload_1         
	//    1    1:instanceof      #68  <Class RecyclerView$LayoutParams>
	//    2    4:ifeq            23
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:aload_1         
	//    6   12:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   15:invokevirtual   #1542 <Method boolean RecyclerView$LayoutManager.checkLayoutParams(RecyclerView$LayoutParams)>
	//    8   18:ifeq            23
	//    9   21:iconst_1        
	//   10   22:ireturn         
	//   11   23:iconst_0        
	//   12   24:ireturn         
	}

	void clearOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.clearOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #1551 <Method void RecyclerView$ViewHolder.clearOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
		mRecycler.clearOldPositions();
	//   25   45:aload_0         
	//   26   46:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   27   49:invokevirtual   #1552 <Method void RecyclerView$Recycler.clearOldPositions()>
	//   28   52:return          
	}

	public void clearOnChildAttachStateChangeListeners()
	{
		if(mOnChildAttachStateListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnull          16
			mOnChildAttachStateListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//    5   11:invokeinterface #1554 <Method void List.clear()>
	//    6   16:return          
	}

	public void clearOnScrollListeners()
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnull          16
			mScrollListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1509 <Field List mScrollListeners>
	//    5   11:invokeinterface #1554 <Method void List.clear()>
	//    6   16:return          
	}

	public int computeHorizontalScrollExtent()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1562 <Method int RecyclerView$LayoutManager.computeHorizontalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeHorizontalScrollOffset()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1565 <Method int RecyclerView$LayoutManager.computeHorizontalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeHorizontalScrollRange()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1568 <Method int RecyclerView$LayoutManager.computeHorizontalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollExtent()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1574 <Method int RecyclerView$LayoutManager.computeVerticalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollOffset()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1577 <Method int RecyclerView$LayoutManager.computeVerticalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollRange()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1580 <Method int RecyclerView$LayoutManager.computeVerticalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
	}

	void considerReleasingGlowsOnScroll(int i, int j)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		boolean flag = flag1;
	//    2    3:iload           4
	//    3    5:istore_3        
		if(mLeftGlow != null)
	//*   4    6:aload_0         
	//*   5    7:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   6   10:ifnull          48
		{
			flag = flag1;
	//    7   13:iload           4
	//    8   15:istore_3        
			if(!mLeftGlow.isFinished())
	//*   9   16:aload_0         
	//*  10   17:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  11   20:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  12   23:ifne            48
			{
				flag = flag1;
	//   13   26:iload           4
	//   14   28:istore_3        
				if(i > 0)
	//*  15   29:iload_1         
	//*  16   30:ifle            48
				{
					mLeftGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   19   37:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag = mLeftGlow.isFinished();
	//   20   40:aload_0         
	//   21   41:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   22   44:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   23   47:istore_3        
				}
			}
		}
		flag1 = flag;
	//   24   48:iload_3         
	//   25   49:istore          4
		if(mRightGlow != null)
	//*  26   51:aload_0         
	//*  27   52:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  28   55:ifnull          96
		{
			flag1 = flag;
	//   29   58:iload_3         
	//   30   59:istore          4
			if(!mRightGlow.isFinished())
	//*  31   61:aload_0         
	//*  32   62:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  33   65:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  34   68:ifne            96
			{
				flag1 = flag;
	//   35   71:iload_3         
	//   36   72:istore          4
				if(i < 0)
	//*  37   74:iload_1         
	//*  38   75:ifge            96
				{
					mRightGlow.onRelease();
	//   39   78:aload_0         
	//   40   79:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   41   82:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mRightGlow.isFinished();
	//   42   85:iload_3         
	//   43   86:aload_0         
	//   44   87:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   45   90:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   46   93:ior             
	//   47   94:istore          4
				}
			}
		}
		flag = flag1;
	//   48   96:iload           4
	//   49   98:istore_3        
		if(mTopGlow != null)
	//*  50   99:aload_0         
	//*  51  100:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  52  103:ifnull          144
		{
			flag = flag1;
	//   53  106:iload           4
	//   54  108:istore_3        
			if(!mTopGlow.isFinished())
	//*  55  109:aload_0         
	//*  56  110:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  57  113:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  58  116:ifne            144
			{
				flag = flag1;
	//   59  119:iload           4
	//   60  121:istore_3        
				if(j > 0)
	//*  61  122:iload_2         
	//*  62  123:ifle            144
				{
					mTopGlow.onRelease();
	//   63  126:aload_0         
	//   64  127:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   65  130:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mTopGlow.isFinished();
	//   66  133:iload           4
	//   67  135:aload_0         
	//   68  136:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   69  139:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   70  142:ior             
	//   71  143:istore_3        
				}
			}
		}
		flag1 = flag;
	//   72  144:iload_3         
	//   73  145:istore          4
		if(mBottomGlow != null)
	//*  74  147:aload_0         
	//*  75  148:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  76  151:ifnull          192
		{
			flag1 = flag;
	//   77  154:iload_3         
	//   78  155:istore          4
			if(!mBottomGlow.isFinished())
	//*  79  157:aload_0         
	//*  80  158:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  81  161:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  82  164:ifne            192
			{
				flag1 = flag;
	//   83  167:iload_3         
	//   84  168:istore          4
				if(j < 0)
	//*  85  170:iload_2         
	//*  86  171:ifge            192
				{
					mBottomGlow.onRelease();
	//   87  174:aload_0         
	//   88  175:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   89  178:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mBottomGlow.isFinished();
	//   90  181:iload_3         
	//   91  182:aload_0         
	//   92  183:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   93  186:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   94  189:ior             
	//   95  190:istore          4
				}
			}
		}
		if(flag1)
	//*  96  192:iload           4
	//*  97  194:ifeq            201
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   98  197:aload_0         
	//   99  198:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  100  201:return          
	}

	void consumePendingUpdateOperations()
	{
		if(!mFirstLayoutComplete || mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*   2    4:ifeq            14
	//*   3    7:aload_0         
	//*   4    8:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*   5   11:ifeq            27
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//    6   14:ldc1            #185 <String "RV FullInvalidate">
	//    7   16:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//    8   19:aload_0         
	//    9   20:invokevirtual   #1590 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   10   23:invokestatic    #1593 <Method void TraceCompat.endSection()>
		} else
	//*  11   26:return          
		if(mAdapterHelper.hasPendingUpdates())
	//*  12   27:aload_0         
	//*  13   28:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  14   31:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  15   34:ifeq            26
		{
			if(mAdapterHelper.hasAnyUpdateTypes(4) && !mAdapterHelper.hasAnyUpdateTypes(11))
	//*  16   37:aload_0         
	//*  17   38:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  18   41:iconst_4        
	//*  19   42:invokevirtual   #1599 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  20   45:ifeq            121
	//*  21   48:aload_0         
	//*  22   49:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  23   52:bipush          11
	//*  24   54:invokevirtual   #1599 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  25   57:ifne            121
			{
				TraceCompat.beginSection("RV PartialInvalidate");
	//   26   60:ldc1            #179 <String "RV PartialInvalidate">
	//   27   62:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
				eatRequestLayout();
	//   28   65:aload_0         
	//   29   66:invokevirtual   #865 <Method void eatRequestLayout()>
				onEnterLayoutOrScroll();
	//   30   69:aload_0         
	//   31   70:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
				mAdapterHelper.preProcess();
	//   32   73:aload_0         
	//   33   74:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   34   77:invokevirtual   #1309 <Method void AdapterHelper.preProcess()>
				if(!mLayoutRequestEaten)
	//*  35   80:aload_0         
	//*  36   81:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  37   84:ifne            98
					if(hasUpdatedView())
	//*  38   87:aload_0         
	//*  39   88:invokespecial   #1603 <Method boolean hasUpdatedView()>
	//*  40   91:ifeq            111
						dispatchLayout();
	//   41   94:aload_0         
	//   42   95:invokevirtual   #1590 <Method void dispatchLayout()>
					else
	//*  43   98:aload_0         
	//*  44   99:iconst_1        
	//*  45  100:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  46  103:aload_0         
	//*  47  104:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
	//*  48  107:invokestatic    #1593 <Method void TraceCompat.endSection()>
	//*  49  110:return          
						mAdapterHelper.consumePostponedUpdates();
	//   50  111:aload_0         
	//   51  112:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   52  115:invokevirtual   #1606 <Method void AdapterHelper.consumePostponedUpdates()>
				resumeRequestLayout(true);
				onExitLayoutOrScroll();
				TraceCompat.endSection();
				return;
			}
	//*  53  118:goto            98
			if(mAdapterHelper.hasPendingUpdates())
	//*  54  121:aload_0         
	//*  55  122:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  56  125:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  57  128:ifeq            26
			{
				TraceCompat.beginSection("RV FullInvalidate");
	//   58  131:ldc1            #185 <String "RV FullInvalidate">
	//   59  133:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
				dispatchLayout();
	//   60  136:aload_0         
	//   61  137:invokevirtual   #1590 <Method void dispatchLayout()>
				TraceCompat.endSection();
	//   62  140:invokestatic    #1593 <Method void TraceCompat.endSection()>
				return;
	//   63  143:return          
			}
		}
	}

	void defaultOnMeasure(int i, int j)
	{
		setMeasuredDimension(LayoutManager.chooseSize(i, getPaddingLeft() + getPaddingRight(), ViewCompat.getMinimumWidth(((View) (this)))), LayoutManager.chooseSize(j, getPaddingTop() + getPaddingBottom(), ViewCompat.getMinimumHeight(((View) (this)))));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:invokevirtual   #1610 <Method int getPaddingLeft()>
	//    4    6:aload_0         
	//    5    7:invokevirtual   #1613 <Method int getPaddingRight()>
	//    6   10:iadd            
	//    7   11:aload_0         
	//    8   12:invokestatic    #1616 <Method int ViewCompat.getMinimumWidth(View)>
	//    9   15:invokestatic    #1620 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   10   18:iload_2         
	//   11   19:aload_0         
	//   12   20:invokevirtual   #1623 <Method int getPaddingTop()>
	//   13   23:aload_0         
	//   14   24:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   15   27:iadd            
	//   16   28:aload_0         
	//   17   29:invokestatic    #1629 <Method int ViewCompat.getMinimumHeight(View)>
	//   18   32:invokestatic    #1620 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   19   35:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
	//   20   38:return          
	}

	void dispatchChildAttached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildAttachedToWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1633 <Method void onChildAttachedToWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewAttachedToWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1636 <Method void RecyclerView$Adapter.onViewAttachedToWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1637 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewAttachedToWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1638 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1641 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewAttachedToWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchChildDetached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildDetachedFromWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1645 <Method void onChildDetachedFromWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewDetachedFromWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1648 <Method void RecyclerView$Adapter.onViewDetachedFromWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1637 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewDetachedFromWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1638 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1651 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewDetachedFromWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchLayout()
	{
		if(mAdapter == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "No adapter attached; skipping layout");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #1653 <String "No adapter attached; skipping layout">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayout == null)
	//*   8   17:aload_0         
	//*   9   18:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  10   21:ifnonnull       34
		{
			Log.e("RecyclerView", "No layout manager attached; skipping layout");
	//   11   24:ldc1            #168 <String "RecyclerView">
	//   12   26:ldc2            #1655 <String "No layout manager attached; skipping layout">
	//   13   29:invokestatic    #1239 <Method int Log.e(String, String)>
	//   14   32:pop             
			return;
	//   15   33:return          
		}
		mState.mIsMeasuring = false;
	//   16   34:aload_0         
	//   17   35:getfield        #431 <Field RecyclerView$State mState>
	//   18   38:iconst_0        
	//   19   39:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
		if(mState.mLayoutStep == 1)
	//*  20   42:aload_0         
	//*  21   43:getfield        #431 <Field RecyclerView$State mState>
	//*  22   46:getfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  23   49:iconst_1        
	//*  24   50:icmpne          74
		{
			dispatchLayoutStep1();
	//   25   53:aload_0         
	//   26   54:invokespecial   #1657 <Method void dispatchLayoutStep1()>
			mLayout.setExactMeasureSpecsFrom(this);
	//   27   57:aload_0         
	//   28   58:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   31   65:aload_0         
	//   32   66:invokespecial   #1662 <Method void dispatchLayoutStep2()>
		} else
	//*  33   69:aload_0         
	//*  34   70:invokespecial   #1664 <Method void dispatchLayoutStep3()>
	//*  35   73:return          
		if(mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth() || mLayout.getHeight() != getHeight())
	//*  36   74:aload_0         
	//*  37   75:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  38   78:invokevirtual   #1667 <Method boolean AdapterHelper.hasUpdates()>
	//*  39   81:ifne            112
	//*  40   84:aload_0         
	//*  41   85:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  42   88:invokevirtual   #1668 <Method int RecyclerView$LayoutManager.getWidth()>
	//*  43   91:aload_0         
	//*  44   92:invokevirtual   #1319 <Method int getWidth()>
	//*  45   95:icmpne          112
	//*  46   98:aload_0         
	//*  47   99:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  48  102:invokevirtual   #1669 <Method int RecyclerView$LayoutManager.getHeight()>
	//*  49  105:aload_0         
	//*  50  106:invokevirtual   #1320 <Method int getHeight()>
	//*  51  109:icmpeq          127
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   52  112:aload_0         
	//   53  113:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   54  116:aload_0         
	//   55  117:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   56  120:aload_0         
	//   57  121:invokespecial   #1662 <Method void dispatchLayoutStep2()>
		} else
	//*  58  124:goto            69
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   59  127:aload_0         
	//   60  128:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   61  131:aload_0         
	//   62  132:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
		}
		dispatchLayoutStep3();
	//*  63  135:goto            69
	}

	public boolean dispatchNestedFling(float f, float f1, boolean flag)
	{
		return getScrollingChildHelper().dispatchNestedFling(f, f1, flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:iload_3         
	//    5    7:invokevirtual   #1675 <Method boolean NestedScrollingChildHelper.dispatchNestedFling(float, float, boolean)>
	//    6   10:ireturn         
	}

	public boolean dispatchNestedPreFling(float f, float f1)
	{
		return getScrollingChildHelper().dispatchNestedPreFling(f, f1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:invokevirtual   #1679 <Method boolean NestedScrollingChildHelper.dispatchNestedPreFling(float, float)>
	//    5    9:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[])
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:invokevirtual   #1683 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[])>
	//    7   12:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[], int k)
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1, k);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:iload           5
	//    7   11:invokevirtual   #1686 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[], int)>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[])
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:invokevirtual   #1690 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[])>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[], int i1)
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai, i1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:iload           6
	//    8   13:invokevirtual   #1693 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[], int)>
	//    9   16:ireturn         
	}

	void dispatchOnScrollStateChanged(int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			mLayout.onScrollStateChanged(i);
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:iload_1         
	//    6   12:invokevirtual   #1697 <Method void RecyclerView$LayoutManager.onScrollStateChanged(int)>
		onScrollStateChanged(i);
	//    7   15:aload_0         
	//    8   16:iload_1         
	//    9   17:invokevirtual   #1698 <Method void onScrollStateChanged(int)>
		if(mScrollListener != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  12   24:ifnull          36
			mScrollListener.onScrollStateChanged(this, i);
	//   13   27:aload_0         
	//   14   28:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//   15   31:aload_0         
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1702 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>
		if(mScrollListeners != null)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1509 <Field List mScrollListeners>
	//*  20   40:ifnull          84
		{
			for(int j = mScrollListeners.size() - 1; j >= 0; j--)
	//*  21   43:aload_0         
	//*  22   44:getfield        #1509 <Field List mScrollListeners>
	//*  23   47:invokeinterface #1637 <Method int List.size()>
	//*  24   52:iconst_1        
	//*  25   53:isub            
	//*  26   54:istore_2        
	//*  27   55:iload_2         
	//*  28   56:iflt            84
				((OnScrollListener)mScrollListeners.get(j)).onScrollStateChanged(this, i);
	//   29   59:aload_0         
	//   30   60:getfield        #1509 <Field List mScrollListeners>
	//   31   63:iload_2         
	//   32   64:invokeinterface #1638 <Method Object List.get(int)>
	//   33   69:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   34   72:aload_0         
	//   35   73:iload_1         
	//   36   74:invokevirtual   #1702 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>

	//   37   77:iload_2         
	//   38   78:iconst_1        
	//   39   79:isub            
	//   40   80:istore_2        
		}
	//*  41   81:goto            55
	//   42   84:return          
	}

	void dispatchOnScrolled(int i, int j)
	{
		mDispatchScrollCounter = mDispatchScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #404 <Field int mDispatchScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #404 <Field int mDispatchScrollCounter>
		int k = getScrollX();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #1705 <Method int getScrollX()>
	//    8   14:istore_3        
		int i1 = getScrollY();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #1708 <Method int getScrollY()>
	//   11   19:istore          4
		onScrollChanged(k, i1, k, i1);
	//   12   21:aload_0         
	//   13   22:iload_3         
	//   14   23:iload           4
	//   15   25:iload_3         
	//   16   26:iload           4
	//   17   28:invokevirtual   #1711 <Method void onScrollChanged(int, int, int, int)>
		onScrolled(i, j);
	//   18   31:aload_0         
	//   19   32:iload_1         
	//   20   33:iload_2         
	//   21   34:invokevirtual   #1714 <Method void onScrolled(int, int)>
		if(mScrollListener != null)
	//*  22   37:aload_0         
	//*  23   38:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  24   41:ifnull          54
			mScrollListener.onScrolled(this, i, j);
	//   25   44:aload_0         
	//   26   45:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//   27   48:aload_0         
	//   28   49:iload_1         
	//   29   50:iload_2         
	//   30   51:invokevirtual   #1716 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>
		if(mScrollListeners != null)
	//*  31   54:aload_0         
	//*  32   55:getfield        #1509 <Field List mScrollListeners>
	//*  33   58:ifnull          103
		{
			for(int l = mScrollListeners.size() - 1; l >= 0; l--)
	//*  34   61:aload_0         
	//*  35   62:getfield        #1509 <Field List mScrollListeners>
	//*  36   65:invokeinterface #1637 <Method int List.size()>
	//*  37   70:iconst_1        
	//*  38   71:isub            
	//*  39   72:istore_3        
	//*  40   73:iload_3         
	//*  41   74:iflt            103
				((OnScrollListener)mScrollListeners.get(l)).onScrolled(this, i, j);
	//   42   77:aload_0         
	//   43   78:getfield        #1509 <Field List mScrollListeners>
	//   44   81:iload_3         
	//   45   82:invokeinterface #1638 <Method Object List.get(int)>
	//   46   87:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   47   90:aload_0         
	//   48   91:iload_1         
	//   49   92:iload_2         
	//   50   93:invokevirtual   #1716 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>

	//   51   96:iload_3         
	//   52   97:iconst_1        
	//   53   98:isub            
	//   54   99:istore_3        
		}
	//*  55  100:goto            73
		mDispatchScrollCounter = mDispatchScrollCounter - 1;
	//   56  103:aload_0         
	//   57  104:aload_0         
	//   58  105:getfield        #404 <Field int mDispatchScrollCounter>
	//   59  108:iconst_1        
	//   60  109:isub            
	//   61  110:putfield        #404 <Field int mDispatchScrollCounter>
	//   62  113:return          
	}

	void dispatchPendingImportantForAccessibilityChanges()
	{
		int i = mPendingAccessibilityImportanceChange.size() - 1;
	//    0    0:aload_0         
	//    1    1:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//    2    4:invokeinterface #1637 <Method int List.size()>
	//    3    9:iconst_1        
	//    4   10:isub            
	//    5   11:istore_1        
		while(i >= 0) 
	//*   6   12:iload_1         
	//*   7   13:iflt            81
		{
			ViewHolder viewholder = (ViewHolder)mPendingAccessibilityImportanceChange.get(i);
	//    8   16:aload_0         
	//    9   17:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   10   20:iload_1         
	//   11   21:invokeinterface #1638 <Method Object List.get(int)>
	//   12   26:checkcast       #127 <Class RecyclerView$ViewHolder>
	//   13   29:astore_3        
			if(viewholder.itemView.getParent() == this && !viewholder.shouldIgnore())
	//*  14   30:aload_3         
	//*  15   31:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  16   34:invokevirtual   #651 <Method ViewParent View.getParent()>
	//*  17   37:aload_0         
	//*  18   38:if_acmpne       48
	//*  19   41:aload_3         
	//*  20   42:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   45:ifeq            55
	//*  22   48:iload_1         
	//*  23   49:iconst_1        
	//*  24   50:isub            
	//*  25   51:istore_1        
	//*  26   52:goto            12
			{
				int j = viewholder.mPendingAccessibilityState;
	//   27   55:aload_3         
	//   28   56:getfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
	//   29   59:istore_2        
				if(j != -1)
	//*  30   60:iload_2         
	//*  31   61:iconst_m1       
	//*  32   62:icmpeq          48
				{
					ViewCompat.setImportantForAccessibility(viewholder.itemView, j);
	//   33   65:aload_3         
	//   34   66:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   35   69:iload_2         
	//   36   70:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
					viewholder.mPendingAccessibilityState = -1;
	//   37   73:aload_3         
	//   38   74:iconst_m1       
	//   39   75:putfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
				}
			}
			i--;
		}
	//*  40   78:goto            48
		mPendingAccessibilityImportanceChange.clear();
	//   41   81:aload_0         
	//   42   82:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   43   85:invokeinterface #1554 <Method void List.clear()>
	//   44   90:return          
	}

	protected void dispatchRestoreInstanceState(SparseArray sparsearray)
	{
		dispatchThawSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1725 <Method void dispatchThawSelfOnly(SparseArray)>
	//    3    5:return          
	}

	protected void dispatchSaveInstanceState(SparseArray sparsearray)
	{
		dispatchFreezeSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1730 <Method void dispatchFreezeSelfOnly(SparseArray)>
	//    3    5:return          
	}

	public void draw(Canvas canvas)
	{
		boolean flag = true;
	//    0    0:iconst_1        
	//    1    1:istore          4
		boolean flag1 = false;
	//    2    3:iconst_0        
	//    3    4:istore          5
		super.draw(canvas);
	//    4    6:aload_0         
	//    5    7:aload_1         
	//    6    8:invokespecial   #1734 <Method void ViewGroup.draw(Canvas)>
		int k = mItemDecorations.size();
	//    7   11:aload_0         
	//    8   12:getfield        #394 <Field ArrayList mItemDecorations>
	//    9   15:invokevirtual   #1078 <Method int ArrayList.size()>
	//   10   18:istore_3        
		for(int i = 0; i < k; i++)
	//*  11   19:iconst_0        
	//*  12   20:istore_2        
	//*  13   21:iload_2         
	//*  14   22:iload_3         
	//*  15   23:icmpge          53
			((ItemDecoration)mItemDecorations.get(i)).onDrawOver(canvas, this, mState);
	//   16   26:aload_0         
	//   17   27:getfield        #394 <Field ArrayList mItemDecorations>
	//   18   30:iload_2         
	//   19   31:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   20   34:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   21   37:aload_1         
	//   22   38:aload_0         
	//   23   39:aload_0         
	//   24   40:getfield        #431 <Field RecyclerView$State mState>
	//   25   43:invokevirtual   #1738 <Method void RecyclerView$ItemDecoration.onDrawOver(Canvas, RecyclerView, RecyclerView$State)>

	//   26   46:iload_2         
	//   27   47:iconst_1        
	//   28   48:iadd            
	//   29   49:istore_2        
	//*  30   50:goto            21
		int j;
		if(mLeftGlow != null && !mLeftGlow.isFinished())
	//*  31   53:aload_0         
	//*  32   54:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  33   57:ifnull          498
	//*  34   60:aload_0         
	//*  35   61:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  36   64:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  37   67:ifne            498
		{
			int l = canvas.save();
	//   38   70:aload_1         
	//   39   71:invokevirtual   #1743 <Method int Canvas.save()>
	//   40   74:istore          6
			int i1;
			if(mClipToPadding)
	//*  41   76:aload_0         
	//*  42   77:getfield        #468 <Field boolean mClipToPadding>
	//*  43   80:ifeq            451
				j = getPaddingBottom();
	//   44   83:aload_0         
	//   45   84:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   46   87:istore_2        
			else
	//*  47   88:aload_1         
	//*  48   89:ldc2            #1744 <Float 270F>
	//*  49   92:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//*  50   95:aload_1         
	//*  51   96:iload_2         
	//*  52   97:aload_0         
	//*  53   98:invokevirtual   #1320 <Method int getHeight()>
	//*  54  101:ineg            
	//*  55  102:iadd            
	//*  56  103:i2f             
	//*  57  104:fconst_0        
	//*  58  105:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//*  59  108:aload_0         
	//*  60  109:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  61  112:ifnull          456
	//*  62  115:aload_0         
	//*  63  116:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  64  119:aload_1         
	//*  65  120:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//*  66  123:ifeq            456
	//*  67  126:iconst_1        
	//*  68  127:istore_3        
	//*  69  128:aload_1         
	//*  70  129:iload           6
	//*  71  131:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//*  72  134:iload_3         
	//*  73  135:istore_2        
	//*  74  136:aload_0         
	//*  75  137:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  76  140:ifnull          212
	//*  77  143:iload_3         
	//*  78  144:istore_2        
	//*  79  145:aload_0         
	//*  80  146:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  81  149:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  82  152:ifne            212
	//*  83  155:aload_1         
	//*  84  156:invokevirtual   #1743 <Method int Canvas.save()>
	//*  85  159:istore          6
	//*  86  161:aload_0         
	//*  87  162:getfield        #468 <Field boolean mClipToPadding>
	//*  88  165:ifeq            182
	//*  89  168:aload_1         
	//*  90  169:aload_0         
	//*  91  170:invokevirtual   #1610 <Method int getPaddingLeft()>
	//*  92  173:i2f             
	//*  93  174:aload_0         
	//*  94  175:invokevirtual   #1623 <Method int getPaddingTop()>
	//*  95  178:i2f             
	//*  96  179:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//*  97  182:aload_0         
	//*  98  183:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  99  186:ifnull          461
	//* 100  189:aload_0         
	//* 101  190:getfield        #1331 <Field EdgeEffect mTopGlow>
	//* 102  193:aload_1         
	//* 103  194:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 104  197:ifeq            461
	//* 105  200:iconst_1        
	//* 106  201:istore_2        
	//* 107  202:iload_3         
	//* 108  203:iload_2         
	//* 109  204:ior             
	//* 110  205:istore_2        
	//* 111  206:aload_1         
	//* 112  207:iload           6
	//* 113  209:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 114  212:iload_2         
	//* 115  213:istore_3        
	//* 116  214:aload_0         
	//* 117  215:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 118  218:ifnull          305
	//* 119  221:iload_2         
	//* 120  222:istore_3        
	//* 121  223:aload_0         
	//* 122  224:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 123  227:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//* 124  230:ifne            305
	//* 125  233:aload_1         
	//* 126  234:invokevirtual   #1743 <Method int Canvas.save()>
	//* 127  237:istore          6
	//* 128  239:aload_0         
	//* 129  240:invokevirtual   #1319 <Method int getWidth()>
	//* 130  243:istore          7
	//* 131  245:aload_0         
	//* 132  246:getfield        #468 <Field boolean mClipToPadding>
	//* 133  249:ifeq            466
	//* 134  252:aload_0         
	//* 135  253:invokevirtual   #1623 <Method int getPaddingTop()>
	//* 136  256:istore_3        
	//* 137  257:aload_1         
	//* 138  258:ldc2            #1759 <Float 90F>
	//* 139  261:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//* 140  264:aload_1         
	//* 141  265:iload_3         
	//* 142  266:ineg            
	//* 143  267:i2f             
	//* 144  268:iload           7
	//* 145  270:ineg            
	//* 146  271:i2f             
	//* 147  272:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 148  275:aload_0         
	//* 149  276:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 150  279:ifnull          471
	//* 151  282:aload_0         
	//* 152  283:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 153  286:aload_1         
	//* 154  287:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 155  290:ifeq            471
	//* 156  293:iconst_1        
	//* 157  294:istore_3        
	//* 158  295:iload_2         
	//* 159  296:iload_3         
	//* 160  297:ior             
	//* 161  298:istore_3        
	//* 162  299:aload_1         
	//* 163  300:iload           6
	//* 164  302:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 165  305:iload_3         
	//* 166  306:istore_2        
	//* 167  307:aload_0         
	//* 168  308:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 169  311:ifnull          408
	//* 170  314:iload_3         
	//* 171  315:istore_2        
	//* 172  316:aload_0         
	//* 173  317:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 174  320:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//* 175  323:ifne            408
	//* 176  326:aload_1         
	//* 177  327:invokevirtual   #1743 <Method int Canvas.save()>
	//* 178  330:istore          6
	//* 179  332:aload_1         
	//* 180  333:ldc2            #1760 <Float 180F>
	//* 181  336:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//* 182  339:aload_0         
	//* 183  340:getfield        #468 <Field boolean mClipToPadding>
	//* 184  343:ifeq            476
	//* 185  346:aload_1         
	//* 186  347:aload_0         
	//* 187  348:invokevirtual   #1319 <Method int getWidth()>
	//* 188  351:ineg            
	//* 189  352:aload_0         
	//* 190  353:invokevirtual   #1613 <Method int getPaddingRight()>
	//* 191  356:iadd            
	//* 192  357:i2f             
	//* 193  358:aload_0         
	//* 194  359:invokevirtual   #1320 <Method int getHeight()>
	//* 195  362:ineg            
	//* 196  363:aload_0         
	//* 197  364:invokevirtual   #1626 <Method int getPaddingBottom()>
	//* 198  367:iadd            
	//* 199  368:i2f             
	//* 200  369:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 201  372:iload           5
	//* 202  374:istore_2        
	//* 203  375:aload_0         
	//* 204  376:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 205  379:ifnull          398
	//* 206  382:iload           5
	//* 207  384:istore_2        
	//* 208  385:aload_0         
	//* 209  386:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 210  389:aload_1         
	//* 211  390:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 212  393:ifeq            398
	//* 213  396:iconst_1        
	//* 214  397:istore_2        
	//* 215  398:iload_3         
	//* 216  399:iload_2         
	//* 217  400:ior             
	//* 218  401:istore_2        
	//* 219  402:aload_1         
	//* 220  403:iload           6
	//* 221  405:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 222  408:iload_2         
	//* 223  409:ifne            495
	//* 224  412:aload_0         
	//* 225  413:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 226  416:ifnull          495
	//* 227  419:aload_0         
	//* 228  420:getfield        #394 <Field ArrayList mItemDecorations>
	//* 229  423:invokevirtual   #1078 <Method int ArrayList.size()>
	//* 230  426:ifle            495
	//* 231  429:aload_0         
	//* 232  430:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 233  433:invokevirtual   #1763 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//* 234  436:ifeq            495
	//* 235  439:iload           4
	//* 236  441:istore_2        
	//* 237  442:iload_2         
	//* 238  443:ifeq            450
	//* 239  446:aload_0         
	//* 240  447:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//* 241  450:return          
				j = 0;
	//  242  451:iconst_0        
	//  243  452:istore_2        
			canvas.rotate(270F);
			canvas.translate(j + -getHeight(), 0.0F);
			if(mLeftGlow != null && mLeftGlow.draw(canvas))
				k = 1;
			else
	//* 244  453:goto            88
				k = 0;
	//  245  456:iconst_0        
	//  246  457:istore_3        
			canvas.restoreToCount(l);
		} else
	//* 247  458:goto            128
	//* 248  461:iconst_0        
	//* 249  462:istore_2        
	//* 250  463:goto            202
	//* 251  466:iconst_0        
	//* 252  467:istore_3        
	//* 253  468:goto            257
	//* 254  471:iconst_0        
	//* 255  472:istore_3        
	//* 256  473:goto            295
	//* 257  476:aload_1         
	//* 258  477:aload_0         
	//* 259  478:invokevirtual   #1319 <Method int getWidth()>
	//* 260  481:ineg            
	//* 261  482:i2f             
	//* 262  483:aload_0         
	//* 263  484:invokevirtual   #1320 <Method int getHeight()>
	//* 264  487:ineg            
	//* 265  488:i2f             
	//* 266  489:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 267  492:goto            372
	//* 268  495:goto            442
		{
			k = 0;
	//  269  498:iconst_0        
	//  270  499:istore_3        
		}
		j = k;
		if(mTopGlow != null)
		{
			j = k;
			if(!mTopGlow.isFinished())
			{
				l = canvas.save();
				if(mClipToPadding)
					canvas.translate(getPaddingLeft(), getPaddingTop());
				if(mTopGlow != null && mTopGlow.draw(canvas))
					j = 1;
				else
					j = 0;
				j = ((int) (k | j));
				canvas.restoreToCount(l);
			}
		}
		k = j;
		if(mRightGlow != null)
		{
			k = j;
			if(!mRightGlow.isFinished())
			{
				l = canvas.save();
				i1 = getWidth();
				if(mClipToPadding)
					k = getPaddingTop();
				else
					k = 0;
				canvas.rotate(90F);
				canvas.translate(-k, -i1);
				if(mRightGlow != null && mRightGlow.draw(canvas))
					k = 1;
				else
					k = 0;
				k = j | k;
				canvas.restoreToCount(l);
			}
		}
		j = k;
		if(mBottomGlow != null)
		{
			j = k;
			if(!mBottomGlow.isFinished())
			{
				l = canvas.save();
				canvas.rotate(180F);
				if(mClipToPadding)
					canvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
				else
					canvas.translate(-getWidth(), -getHeight());
				j = ((int) (flag1));
				if(mBottomGlow != null)
				{
					j = ((int) (flag1));
					if(mBottomGlow.draw(canvas))
						j = 1;
				}
				j = k | j;
				canvas.restoreToCount(l);
			}
		}
		if(j == 0 && mItemAnimator != null && mItemDecorations.size() > 0 && mItemAnimator.isRunning())
			j = ((int) (flag));
		if(j != 0)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//* 271  500:goto            134
	}

	public boolean drawChild(Canvas canvas, View view, long l)
	{
		return super.drawChild(canvas, view, l);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:lload_3         
	//    4    4:invokespecial   #1767 <Method boolean ViewGroup.drawChild(Canvas, View, long)>
	//    5    7:ireturn         
	}

	void eatRequestLayout()
	{
		mEatRequestLayout = mEatRequestLayout + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #398 <Field int mEatRequestLayout>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #398 <Field int mEatRequestLayout>
		if(mEatRequestLayout == 1 && !mLayoutFrozen)
	//*   6   10:aload_0         
	//*   7   11:getfield        #398 <Field int mEatRequestLayout>
	//*   8   14:iconst_1        
	//*   9   15:icmpne          30
	//*  10   18:aload_0         
	//*  11   19:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  12   22:ifne            30
			mLayoutRequestEaten = false;
	//   13   25:aload_0         
	//   14   26:iconst_0        
	//   15   27:putfield        #1601 <Field boolean mLayoutRequestEaten>
	//   16   30:return          
	}

	void ensureBottomGlow()
	{
		if(mBottomGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mBottomGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1344 <Field EdgeEffect mBottomGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mBottomGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1613 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1623 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mBottomGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureLeftGlow()
	{
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mLeftGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1318 <Field EdgeEffect mLeftGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mLeftGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1623 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1613 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mLeftGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureRightGlow()
	{
		if(mRightGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mRightGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1339 <Field EdgeEffect mRightGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mRightGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1623 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1613 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mRightGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureTopGlow()
	{
		if(mTopGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mTopGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1331 <Field EdgeEffect mTopGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mTopGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1613 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1623 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mTopGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	String exceptionLabel()
	{
		return (new StringBuilder()).append(" ").append(super.toString()).append(", adapter:").append(((Object) (mAdapter))).append(", layout:").append(((Object) (mLayout))).append(", context:").append(((Object) (getContext()))).toString();
	//    0    0:new             #796 <Class StringBuilder>
	//    1    3:dup             
	//    2    4:invokespecial   #797 <Method void StringBuilder()>
	//    3    7:ldc2            #1782 <String " ">
	//    4   10:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//    5   13:aload_0         
	//    6   14:invokespecial   #1783 <Method String ViewGroup.toString()>
	//    7   17:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//    8   20:ldc2            #1785 <String ", adapter:">
	//    9   23:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   26:aload_0         
	//   11   27:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   12   30:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   13   33:ldc2            #1787 <String ", layout:">
	//   14   36:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   39:aload_0         
	//   16   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   17   43:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   18   46:ldc2            #1789 <String ", context:">
	//   19   49:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   20   52:aload_0         
	//   21   53:invokevirtual   #539 <Method Context getContext()>
	//   22   56:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   23   59:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   24   62:areturn         
	}

	final void fillRemainingScrollValues(State state)
	{
		if(getScrollState() == 2)
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1792 <Method int getScrollState()>
	//*   2    4:iconst_2        
	//*   3    5:icmpne          43
		{
			OverScroller overscroller = mViewFlinger.mScroller;
	//    4    8:aload_0         
	//    5    9:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    6   12:invokestatic    #1796 <Method OverScroller RecyclerView$ViewFlinger.access$400(RecyclerView$ViewFlinger)>
	//    7   15:astore_2        
			state.mRemainingScrollHorizontal = overscroller.getFinalX() - overscroller.getCurrX();
	//    8   16:aload_1         
	//    9   17:aload_2         
	//   10   18:invokevirtual   #1801 <Method int OverScroller.getFinalX()>
	//   11   21:aload_2         
	//   12   22:invokevirtual   #1804 <Method int OverScroller.getCurrX()>
	//   13   25:isub            
	//   14   26:putfield        #1807 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = overscroller.getFinalY() - overscroller.getCurrY();
	//   15   29:aload_1         
	//   16   30:aload_2         
	//   17   31:invokevirtual   #1810 <Method int OverScroller.getFinalY()>
	//   18   34:aload_2         
	//   19   35:invokevirtual   #1813 <Method int OverScroller.getCurrY()>
	//   20   38:isub            
	//   21   39:putfield        #1816 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   22   42:return          
		} else
		{
			state.mRemainingScrollHorizontal = 0;
	//   23   43:aload_1         
	//   24   44:iconst_0        
	//   25   45:putfield        #1807 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = 0;
	//   26   48:aload_1         
	//   27   49:iconst_0        
	//   28   50:putfield        #1816 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   29   53:return          
		}
	}

	public View findChildViewUnder(float f, float f1)
	{
		for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//*   2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*   3    7:iconst_1        
	//*   4    8:isub            
	//*   5    9:istore          5
	//*   6   11:iload           5
	//*   7   13:iflt            106
		{
			View view = mChildHelper.getChildAt(i);
	//    8   16:aload_0         
	//    9   17:getfield        #663 <Field ChildHelper mChildHelper>
	//   10   20:iload           5
	//   11   22:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   12   25:astore          6
			float f2 = view.getTranslationX();
	//   13   27:aload           6
	//   14   29:invokevirtual   #1822 <Method float View.getTranslationX()>
	//   15   32:fstore_3        
			float f3 = view.getTranslationY();
	//   16   33:aload           6
	//   17   35:invokevirtual   #1825 <Method float View.getTranslationY()>
	//   18   38:fstore          4
			if(f >= (float)view.getLeft() + f2 && f <= f2 + (float)view.getRight() && f1 >= (float)view.getTop() + f3 && f1 <= (float)view.getBottom() + f3)
	//*  19   40:fload_1         
	//*  20   41:aload           6
	//*  21   43:invokevirtual   #1131 <Method int View.getLeft()>
	//*  22   46:i2f             
	//*  23   47:fload_3         
	//*  24   48:fadd            
	//*  25   49:fcmpl           
	//*  26   50:iflt            97
	//*  27   53:fload_1         
	//*  28   54:fload_3         
	//*  29   55:aload           6
	//*  30   57:invokevirtual   #1149 <Method int View.getRight()>
	//*  31   60:i2f             
	//*  32   61:fadd            
	//*  33   62:fcmpg           
	//*  34   63:ifgt            97
	//*  35   66:fload_2         
	//*  36   67:aload           6
	//*  37   69:invokevirtual   #1140 <Method int View.getTop()>
	//*  38   72:i2f             
	//*  39   73:fload           4
	//*  40   75:fadd            
	//*  41   76:fcmpl           
	//*  42   77:iflt            97
	//*  43   80:fload_2         
	//*  44   81:aload           6
	//*  45   83:invokevirtual   #1158 <Method int View.getBottom()>
	//*  46   86:i2f             
	//*  47   87:fload           4
	//*  48   89:fadd            
	//*  49   90:fcmpg           
	//*  50   91:ifgt            97
				return view;
	//   51   94:aload           6
	//   52   96:areturn         
		}

	//   53   97:iload           5
	//   54   99:iconst_1        
	//   55  100:isub            
	//   56  101:istore          5
	//*  57  103:goto            11
		return null;
	//   58  106:aconst_null     
	//   59  107:areturn         
	}

	public View findContainingItemView(View view)
	{
		ViewParent viewparent;
		for(viewparent = view.getParent(); viewparent != null && viewparent != this && (viewparent instanceof View); viewparent = view.getParent())
	//*   0    0:aload_1         
	//*   1    1:invokevirtual   #651 <Method ViewParent View.getParent()>
	//*   2    4:astore_2        
	//*   3    5:aload_2         
	//*   4    6:ifnull          34
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpeq       34
	//*   8   14:aload_2         
	//*   9   15:instanceof      #647 <Class View>
	//*  10   18:ifeq            34
			view = (View)viewparent;
	//   11   21:aload_2         
	//   12   22:checkcast       #647 <Class View>
	//   13   25:astore_1        

	//   14   26:aload_1         
	//   15   27:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   16   30:astore_2        
	//*  17   31:goto            5
		if(viewparent == this)
	//*  18   34:aload_2         
	//*  19   35:aload_0         
	//*  20   36:if_acmpne       41
			return view;
	//   21   39:aload_1         
	//   22   40:areturn         
		else
			return null;
	//   23   41:aconst_null     
	//   24   42:areturn         
	}

	public ViewHolder findContainingViewHolder(View view)
	{
		view = findContainingItemView(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//    3    5:astore_1        
		if(view == null)
	//*   4    6:aload_1         
	//*   5    7:ifnonnull       12
			return null;
	//    6   10:aconst_null     
	//    7   11:areturn         
		else
			return getChildViewHolder(view);
	//    8   12:aload_0         
	//    9   13:aload_1         
	//   10   14:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   11   17:areturn         
	}

	public ViewHolder findViewHolderForAdapterPosition(int i)
	{
		ViewHolder viewholder = null;
	//    0    0:aconst_null     
	//    1    1:astore          4
		if(!mDataSetHasChangedAfterLayout) goto _L2; else goto _L1
	//    2    3:aload_0         
	//    3    4:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//    4    7:ifeq            13
_L1:
		return viewholder;
	//    5   10:aload           4
	//    6   12:areturn         
_L2:
		int j;
		int k;
		k = mChildHelper.getUnfilteredChildCount();
	//    7   13:aload_0         
	//    8   14:getfield        #663 <Field ChildHelper mChildHelper>
	//    9   17:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//   10   20:istore_3        
		j = 0;
	//   11   21:iconst_0        
	//   12   22:istore_2        
		viewholder = null;
	//   13   23:aconst_null     
	//   14   24:astore          4
_L6:
		if(j >= k) goto _L4; else goto _L3
	//   15   26:iload_2         
	//   16   27:iload_3         
	//   17   28:icmpge          97
_L3:
		ViewHolder viewholder1;
		viewholder1 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   18   31:aload_0         
	//   19   32:getfield        #663 <Field ChildHelper mChildHelper>
	//   20   35:iload_2         
	//   21   36:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   22   39:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   23   42:astore          5
		if(viewholder1 == null || viewholder1.isRemoved() || getAdapterPositionFor(viewholder1) != i)
			continue; /* Loop/switch isn't completed */
	//   24   44:aload           5
	//   25   46:ifnull          100
	//   26   49:aload           5
	//   27   51:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   28   54:ifne            100
	//   29   57:aload_0         
	//   30   58:aload           5
	//   31   60:invokevirtual   #1832 <Method int getAdapterPositionFor(RecyclerView$ViewHolder)>
	//   32   63:iload_1         
	//   33   64:icmpne          100
		viewholder = viewholder1;
	//   34   67:aload           5
	//   35   69:astore          4
		if(!mChildHelper.isHidden(viewholder1.itemView)) goto _L1; else goto _L5
	//   36   71:aload_0         
	//   37   72:getfield        #663 <Field ChildHelper mChildHelper>
	//   38   75:aload           5
	//   39   77:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   40   80:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   41   83:ifeq            10
_L5:
		viewholder = viewholder1;
	//   42   86:aload           5
	//   43   88:astore          4
		j++;
	//   44   90:iload_2         
	//   45   91:iconst_1        
	//   46   92:iadd            
	//   47   93:istore_2        
		  goto _L6
	//*  48   94:goto            26
_L4:
		return viewholder;
	//   49   97:aload           4
	//   50   99:areturn         
	//*  51  100:goto            90
	}

	public ViewHolder findViewHolderForItemId(long l)
	{
		ViewHolder viewholder;
		ViewHolder viewholder1;
		viewholder1 = null;
	//    0    0:aconst_null     
	//    1    1:astore          6
		viewholder = viewholder1;
	//    2    3:aload           6
	//    3    5:astore          5
		if(mAdapter == null) goto _L2; else goto _L1
	//    4    7:aload_0         
	//    5    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    6   11:ifnull          28
_L1:
		if(mAdapter.hasStableIds()) goto _L4; else goto _L3
	//    7   14:aload_0         
	//    8   15:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    9   18:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//   10   21:ifne            31
_L3:
		viewholder = viewholder1;
	//   11   24:aload           6
	//   12   26:astore          5
_L2:
		return viewholder;
	//   13   28:aload           5
	//   14   30:areturn         
_L4:
		int i;
		int j;
		j = mChildHelper.getUnfilteredChildCount();
	//   15   31:aload_0         
	//   16   32:getfield        #663 <Field ChildHelper mChildHelper>
	//   17   35:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//   18   38:istore          4
		i = 0;
	//   19   40:iconst_0        
	//   20   41:istore_3        
		viewholder = null;
	//   21   42:aconst_null     
	//   22   43:astore          5
_L8:
		if(i >= j) goto _L6; else goto _L5
	//   23   45:iload_3         
	//   24   46:iload           4
	//   25   48:icmpge          117
_L5:
		viewholder1 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   26   51:aload_0         
	//   27   52:getfield        #663 <Field ChildHelper mChildHelper>
	//   28   55:iload_3         
	//   29   56:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   30   59:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   31   62:astore          6
		if(viewholder1 == null || viewholder1.isRemoved() || viewholder1.getItemId() != l)
			continue; /* Loop/switch isn't completed */
	//   32   64:aload           6
	//   33   66:ifnull          120
	//   34   69:aload           6
	//   35   71:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   36   74:ifne            120
	//   37   77:aload           6
	//   38   79:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//   39   82:lload_1         
	//   40   83:lcmp            
	//   41   84:ifne            120
		viewholder = viewholder1;
	//   42   87:aload           6
	//   43   89:astore          5
		if(!mChildHelper.isHidden(viewholder1.itemView)) goto _L2; else goto _L7
	//   44   91:aload_0         
	//   45   92:getfield        #663 <Field ChildHelper mChildHelper>
	//   46   95:aload           6
	//   47   97:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   48  100:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   49  103:ifeq            28
_L7:
		viewholder = viewholder1;
	//   50  106:aload           6
	//   51  108:astore          5
		i++;
	//   52  110:iload_3         
	//   53  111:iconst_1        
	//   54  112:iadd            
	//   55  113:istore_3        
		  goto _L8
	//*  56  114:goto            45
_L6:
		return viewholder;
	//   57  117:aload           5
	//   58  119:areturn         
	//*  59  120:goto            110
	}

	public ViewHolder findViewHolderForLayoutPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1837 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	public ViewHolder findViewHolderForPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1837 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	ViewHolder findViewHolderForPosition(int i, boolean flag)
	{
		int j;
		int k;
		ViewHolder viewholder;
		k = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		j = 0;
	//    4    9:iconst_0        
	//    5   10:istore_3        
		viewholder = null;
	//    6   11:aconst_null     
	//    7   12:astore          5
_L8:
		ViewHolder viewholder1;
		ViewHolder viewholder2;
		if(j >= k)
			break MISSING_BLOCK_LABEL_121;
	//    8   14:iload_3         
	//    9   15:iload           4
	//   10   17:icmpge          121
		viewholder1 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   11   20:aload_0         
	//   12   21:getfield        #663 <Field ChildHelper mChildHelper>
	//   13   24:iload_3         
	//   14   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   15   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   31:astore          6
		viewholder2 = viewholder;
	//   17   33:aload           5
	//   18   35:astore          7
		if(viewholder1 == null) goto _L2; else goto _L1
	//   19   37:aload           6
	//   20   39:ifnull          71
_L1:
		viewholder2 = viewholder;
	//   21   42:aload           5
	//   22   44:astore          7
		if(viewholder1.isRemoved()) goto _L2; else goto _L3
	//   23   46:aload           6
	//   24   48:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   25   51:ifne            71
_L3:
		if(!flag) goto _L5; else goto _L4
	//   26   54:iload_2         
	//   27   55:ifeq            82
_L4:
		if(viewholder1.mPosition == i) goto _L7; else goto _L6
	//   28   58:aload           6
	//   29   60:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//   30   63:iload_1         
	//   31   64:icmpeq          95
_L6:
		viewholder2 = viewholder;
	//   32   67:aload           5
	//   33   69:astore          7
_L2:
		j++;
	//   34   71:iload_3         
	//   35   72:iconst_1        
	//   36   73:iadd            
	//   37   74:istore_3        
		viewholder = viewholder2;
	//   38   75:aload           7
	//   39   77:astore          5
		  goto _L8
	//*  40   79:goto            14
_L5:
		viewholder2 = viewholder;
	//   41   82:aload           5
	//   42   84:astore          7
		if(viewholder1.getLayoutPosition() != i) goto _L2; else goto _L7
	//   43   86:aload           6
	//   44   88:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   45   91:iload_1         
	//   46   92:icmpne          71
_L7:
		viewholder = viewholder1;
	//   47   95:aload           6
	//   48   97:astore          5
		if(!mChildHelper.isHidden(viewholder1.itemView))
			break MISSING_BLOCK_LABEL_121;
	//   49   99:aload_0         
	//   50  100:getfield        #663 <Field ChildHelper mChildHelper>
	//   51  103:aload           6
	//   52  105:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   53  108:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   54  111:ifeq            121
		viewholder2 = viewholder1;
	//   55  114:aload           6
	//   56  116:astore          7
		  goto _L2
	//*  57  118:goto            71
		return viewholder;
	//   58  121:aload           5
	//   59  123:areturn         
	}

	public boolean fling(int i, int j)
	{
		if(mLayout != null) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:ifnonnull       18
_L1:
		Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #1845 <String "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
_L4:
		return false;
	//    7   16:iconst_0        
	//    8   17:ireturn         
_L2:
		int k;
		int l;
		boolean flag1;
		boolean flag2;
label0:
		{
			if(mLayoutFrozen)
				continue; /* Loop/switch isn't completed */
	//    9   18:aload_0         
	//   10   19:getfield        #1769 <Field boolean mLayoutFrozen>
	//   11   22:ifne            16
			flag1 = mLayout.canScrollHorizontally();
	//   12   25:aload_0         
	//   13   26:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   15   32:istore          6
			flag2 = mLayout.canScrollVertically();
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   19   41:istore          7
			if(flag1)
	//*  20   43:iload           6
	//*  21   45:ifeq            61
			{
				k = i;
	//   22   48:iload_1         
	//   23   49:istore_3        
				if(Math.abs(i) >= mMinFlingVelocity)
					break label0;
	//   24   50:iload_1         
	//   25   51:invokestatic    #1848 <Method int Math.abs(int)>
	//   26   54:aload_0         
	//   27   55:getfield        #504 <Field int mMinFlingVelocity>
	//   28   58:icmpge          63
			}
			k = 0;
	//   29   61:iconst_0        
	//   30   62:istore_3        
		}
		if(flag2)
	//*  31   63:iload           7
	//*  32   65:ifeq            82
		{
			l = j;
	//   33   68:iload_2         
	//   34   69:istore          4
			if(Math.abs(j) >= mMinFlingVelocity)
				continue; /* Loop/switch isn't completed */
	//   35   71:iload_2         
	//   36   72:invokestatic    #1848 <Method int Math.abs(int)>
	//   37   75:aload_0         
	//   38   76:getfield        #504 <Field int mMinFlingVelocity>
	//   39   79:icmpge          85
		}
		l = 0;
	//   40   82:iconst_0        
	//   41   83:istore          4
		if(k == 0 && l == 0 || dispatchNestedPreFling(k, l)) goto _L4; else goto _L3
	//   42   85:iload_3         
	//   43   86:ifne            94
	//   44   89:iload           4
	//   45   91:ifeq            16
	//   46   94:aload_0         
	//   47   95:iload_3         
	//   48   96:i2f             
	//   49   97:iload           4
	//   50   99:i2f             
	//   51  100:invokevirtual   #1849 <Method boolean dispatchNestedPreFling(float, float)>
	//   52  103:ifne            16
_L3:
		boolean flag;
		if(flag1 || flag2)
	//*  53  106:iload           6
	//*  54  108:ifne            116
	//*  55  111:iload           7
	//*  56  113:ifeq            153
			flag = true;
	//   57  116:iconst_1        
	//   58  117:istore          5
		else
	//*  59  119:aload_0         
	//*  60  120:iload_3         
	//*  61  121:i2f             
	//*  62  122:iload           4
	//*  63  124:i2f             
	//*  64  125:iload           5
	//*  65  127:invokevirtual   #1850 <Method boolean dispatchNestedFling(float, float, boolean)>
	//*  66  130:pop             
	//*  67  131:aload_0         
	//*  68  132:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  69  135:ifnull          159
	//*  70  138:aload_0         
	//*  71  139:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  72  142:iload_3         
	//*  73  143:iload           4
	//*  74  145:invokevirtual   #1855 <Method boolean RecyclerView$OnFlingListener.onFling(int, int)>
	//*  75  148:ifeq            159
	//*  76  151:iconst_1        
	//*  77  152:ireturn         
			flag = false;
	//   78  153:iconst_0        
	//   79  154:istore          5
		dispatchNestedFling(k, l, flag);
		if(mOnFlingListener != null && mOnFlingListener.onFling(k, l))
			return true;
	//*  80  156:goto            119
		if(flag)
	//*  81  159:iload           5
	//*  82  161:ifeq            16
		{
			if(flag1)
	//*  83  164:iload           6
	//*  84  166:ifeq            235
				i = 1;
	//   85  169:iconst_1        
	//   86  170:istore_1        
			else
	//*  87  171:iload_1         
	//*  88  172:istore_2        
	//*  89  173:iload           7
	//*  90  175:ifeq            182
	//*  91  178:iload_1         
	//*  92  179:iconst_2        
	//*  93  180:ior             
	//*  94  181:istore_2        
	//*  95  182:aload_0         
	//*  96  183:iload_2         
	//*  97  184:iconst_1        
	//*  98  185:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//*  99  188:pop             
	//* 100  189:aload_0         
	//* 101  190:getfield        #509 <Field int mMaxFlingVelocity>
	//* 102  193:ineg            
	//* 103  194:iload_3         
	//* 104  195:aload_0         
	//* 105  196:getfield        #509 <Field int mMaxFlingVelocity>
	//* 106  199:invokestatic    #1117 <Method int Math.min(int, int)>
	//* 107  202:invokestatic    #1861 <Method int Math.max(int, int)>
	//* 108  205:istore_1        
	//* 109  206:aload_0         
	//* 110  207:getfield        #509 <Field int mMaxFlingVelocity>
	//* 111  210:ineg            
	//* 112  211:iload           4
	//* 113  213:aload_0         
	//* 114  214:getfield        #509 <Field int mMaxFlingVelocity>
	//* 115  217:invokestatic    #1117 <Method int Math.min(int, int)>
	//* 116  220:invokestatic    #1861 <Method int Math.max(int, int)>
	//* 117  223:istore_2        
	//* 118  224:aload_0         
	//* 119  225:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//* 120  228:iload_1         
	//* 121  229:iload_2         
	//* 122  230:invokevirtual   #1863 <Method void RecyclerView$ViewFlinger.fling(int, int)>
	//* 123  233:iconst_1        
	//* 124  234:ireturn         
				i = 0;
	//  125  235:iconst_0        
	//  126  236:istore_1        
			j = i;
			if(flag2)
				j = i | 2;
			startNestedScroll(j, 1);
			i = Math.max(-mMaxFlingVelocity, Math.min(k, mMaxFlingVelocity));
			j = Math.max(-mMaxFlingVelocity, Math.min(l, mMaxFlingVelocity));
			mViewFlinger.fling(i, j);
			return true;
		}
		if(true) goto _L4; else goto _L5
	//  127  237:goto            171
_L5:
	}

	public View focusSearch(View view, int i)
	{
		byte byte1 = 1;
	//    0    0:iconst_1        
	//    1    1:istore          5
		Object obj = ((Object) (mLayout.onInterceptFocusSearch(view, i)));
	//    2    3:aload_0         
	//    3    4:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    4    7:aload_1         
	//    5    8:iload_2         
	//    6    9:invokevirtual   #1868 <Method View RecyclerView$LayoutManager.onInterceptFocusSearch(View, int)>
	//    7   12:astore          6
		if(obj != null)
	//*   8   14:aload           6
	//*   9   16:ifnull          22
			return ((View) (obj));
	//   10   19:aload           6
	//   11   21:areturn         
		byte byte0;
		if(mAdapter != null && mLayout != null && !isComputingLayout() && !mLayoutFrozen)
	//*  12   22:aload_0         
	//*  13   23:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  14   26:ifnull          209
	//*  15   29:aload_0         
	//*  16   30:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  17   33:ifnull          209
	//*  18   36:aload_0         
	//*  19   37:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*  20   40:ifne            209
	//*  21   43:aload_0         
	//*  22   44:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  23   47:ifne            209
			byte0 = 1;
	//   24   50:iconst_1        
	//   25   51:istore_3        
		else
	//*  26   52:invokestatic    #1874 <Method FocusFinder FocusFinder.getInstance()>
	//*  27   55:astore          6
	//*  28   57:iload_3         
	//*  29   58:ifeq            313
	//*  30   61:iload_2         
	//*  31   62:iconst_2        
	//*  32   63:icmpeq          71
	//*  33   66:iload_2         
	//*  34   67:iconst_1        
	//*  35   68:icmpne          313
	//*  36   71:aload_0         
	//*  37   72:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  38   75:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  39   78:ifeq            423
	//*  40   81:iload_2         
	//*  41   82:iconst_2        
	//*  42   83:icmpne          214
	//*  43   86:sipush          130
	//*  44   89:istore          4
	//*  45   91:aload           6
	//*  46   93:aload_0         
	//*  47   94:aload_1         
	//*  48   95:iload           4
	//*  49   97:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  50  100:ifnonnull       221
	//*  51  103:iconst_1        
	//*  52  104:istore_3        
	//*  53  105:getstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  54  108:ifeq            420
	//*  55  111:iload           4
	//*  56  113:istore_2        
	//*  57  114:iload_3         
	//*  58  115:ifne            414
	//*  59  118:aload_0         
	//*  60  119:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  61  122:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  62  125:ifeq            414
	//*  63  128:aload_0         
	//*  64  129:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  65  132:invokevirtual   #1249 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  66  135:iconst_1        
	//*  67  136:icmpne          226
	//*  68  139:iconst_1        
	//*  69  140:istore_3        
	//*  70  141:iload_2         
	//*  71  142:iconst_2        
	//*  72  143:icmpne          231
	//*  73  146:iconst_1        
	//*  74  147:istore          4
	//*  75  149:iload           4
	//*  76  151:iload_3         
	//*  77  152:ixor            
	//*  78  153:ifeq            237
	//*  79  156:bipush          66
	//*  80  158:istore_3        
	//*  81  159:aload           6
	//*  82  161:aload_0         
	//*  83  162:aload_1         
	//*  84  163:iload_3         
	//*  85  164:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  86  167:ifnonnull       243
	//*  87  170:iload           5
	//*  88  172:istore          4
	//*  89  174:iload           4
	//*  90  176:istore          5
	//*  91  178:getstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  92  181:ifeq            190
	//*  93  184:iload_3         
	//*  94  185:istore_2        
	//*  95  186:iload           4
	//*  96  188:istore          5
	//*  97  190:iload           5
	//*  98  192:ifeq            276
	//*  99  195:aload_0         
	//* 100  196:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
	//* 101  199:aload_0         
	//* 102  200:aload_1         
	//* 103  201:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//* 104  204:ifnonnull       249
	//* 105  207:aconst_null     
	//* 106  208:areturn         
			byte0 = 0;
	//  107  209:iconst_0        
	//  108  210:istore_3        
		obj = ((Object) (FocusFinder.getInstance()));
		if(byte0 != 0 && (i == 2 || i == 1))
		{
			char c;
			if(mLayout.canScrollVertically())
			{
				if(i == 2)
					c = '\202';
				else
	//* 109  211:goto            52
					c = '!';
	//  110  214:bipush          33
	//  111  216:istore          4
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (c))) == null)
					byte0 = 1;
				else
	//* 112  218:goto            91
					byte0 = 0;
	//  113  221:iconst_0        
	//  114  222:istore_3        
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
					i = ((int) (c));
			} else
	//* 115  223:goto            105
	//* 116  226:iconst_0        
	//* 117  227:istore_3        
	//* 118  228:goto            141
	//* 119  231:iconst_0        
	//* 120  232:istore          4
	//* 121  234:goto            149
	//* 122  237:bipush          17
	//* 123  239:istore_3        
	//* 124  240:goto            159
	//* 125  243:iconst_0        
	//* 126  244:istore          4
	//* 127  246:goto            174
	//* 128  249:aload_0         
	//* 129  250:invokevirtual   #865 <Method void eatRequestLayout()>
	//* 130  253:aload_0         
	//* 131  254:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 132  257:aload_1         
	//* 133  258:iload_2         
	//* 134  259:aload_0         
	//* 135  260:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 136  263:aload_0         
	//* 137  264:getfield        #431 <Field RecyclerView$State mState>
	//* 138  267:invokevirtual   #1884 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//* 139  270:pop             
	//* 140  271:aload_0         
	//* 141  272:iconst_0        
	//* 142  273:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 143  276:aload           6
	//* 144  278:aload_0         
	//* 145  279:aload_1         
	//* 146  280:iload_2         
	//* 147  281:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 148  284:astore          6
	//* 149  286:aload           6
	//* 150  288:ifnull          386
	//* 151  291:aload           6
	//* 152  293:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//* 153  296:ifne            386
	//* 154  299:aload_0         
	//* 155  300:invokevirtual   #1352 <Method View getFocusedChild()>
	//* 156  303:ifnonnull       377
	//* 157  306:aload_0         
	//* 158  307:aload_1         
	//* 159  308:iload_2         
	//* 160  309:invokespecial   #1886 <Method View ViewGroup.focusSearch(View, int)>
	//* 161  312:areturn         
	//* 162  313:aload           6
	//* 163  315:aload_0         
	//* 164  316:aload_1         
	//* 165  317:iload_2         
	//* 166  318:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 167  321:astore          6
	//* 168  323:aload           6
	//* 169  325:ifnonnull       411
	//* 170  328:iload_3         
	//* 171  329:ifeq            411
	//* 172  332:aload_0         
	//* 173  333:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
	//* 174  336:aload_0         
	//* 175  337:aload_1         
	//* 176  338:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//* 177  341:ifnonnull       346
	//* 178  344:aconst_null     
	//* 179  345:areturn         
	//* 180  346:aload_0         
	//* 181  347:invokevirtual   #865 <Method void eatRequestLayout()>
	//* 182  350:aload_0         
	//* 183  351:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 184  354:aload_1         
	//* 185  355:iload_2         
	//* 186  356:aload_0         
	//* 187  357:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 188  360:aload_0         
	//* 189  361:getfield        #431 <Field RecyclerView$State mState>
	//* 190  364:invokevirtual   #1884 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//* 191  367:astore          6
	//* 192  369:aload_0         
	//* 193  370:iconst_0        
	//* 194  371:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 195  374:goto            286
	//* 196  377:aload_0         
	//* 197  378:aload           6
	//* 198  380:aconst_null     
	//* 199  381:invokespecial   #1888 <Method void requestChildOnScreen(View, View)>
	//* 200  384:aload_1         
	//* 201  385:areturn         
	//* 202  386:aload_0         
	//* 203  387:aload_1         
	//* 204  388:aload           6
	//* 205  390:iload_2         
	//* 206  391:invokespecial   #1890 <Method boolean isPreferredNextFocus(View, View, int)>
	//* 207  394:ifeq            400
	//* 208  397:aload           6
	//* 209  399:areturn         
	//* 210  400:aload_0         
	//* 211  401:aload_1         
	//* 212  402:iload_2         
	//* 213  403:invokespecial   #1886 <Method View ViewGroup.focusSearch(View, int)>
	//* 214  406:astore          6
	//* 215  408:goto            397
	//* 216  411:goto            286
	//* 217  414:iload_3         
	//* 218  415:istore          5
	//* 219  417:goto            190
	//* 220  420:goto            114
			{
				byte0 = 0;
	//  221  423:iconst_0        
	//  222  424:istore_3        
			}
			if(byte0 == 0 && mLayout.canScrollHorizontally())
			{
				if(mLayout.getLayoutDirection() == 1)
					byte0 = 1;
				else
					byte0 = 0;
				if(i == 2)
					c = '\001';
				else
					c = '\0';
				if((c ^ byte0) != 0)
					byte0 = 66;
				else
					byte0 = 17;
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (byte0))) == null)
					c = ((char) (byte1));
				else
					c = '\0';
				byte1 = ((byte) (c));
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
				{
					i = ((int) (byte0));
					byte1 = ((byte) (c));
				}
			} else
			{
				byte1 = byte0;
			}
			if(byte1 != 0)
			{
				consumePendingUpdateOperations();
				if(findContainingItemView(view) == null)
					return null;
				eatRequestLayout();
				mLayout.onFocusSearchFailed(view, i, mRecycler, mState);
				resumeRequestLayout(false);
			}
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i)));
		} else
		{
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i)));
			if(obj == null && byte0 != 0)
			{
				consumePendingUpdateOperations();
				if(findContainingItemView(view) == null)
					return null;
				eatRequestLayout();
				obj = ((Object) (mLayout.onFocusSearchFailed(view, i, mRecycler, mState)));
				resumeRequestLayout(false);
			}
		}
		if(obj != null && !((View) (obj)).hasFocusable())
			if(getFocusedChild() == null)
			{
				return super.focusSearch(view, i);
			} else
			{
				requestChildOnScreen(((View) (obj)), ((View) (null)));
				return view;
			}
		if(!isPreferredNextFocus(view, ((View) (obj)), i))
			obj = ((Object) (super.focusSearch(view, i)));
		return ((View) (obj));
	//* 223  425:goto            114
	}

	protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateDefaultLayoutParams()));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:invokevirtual   #1896 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateDefaultLayoutParams()>
	//   19   45:areturn         
	}

	public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(getContext(), attributeset)));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:aload_0         
	//   19   43:invokevirtual   #539 <Method Context getContext()>
	//   20   46:aload_1         
	//   21   47:invokevirtual   #1901 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(Context, AttributeSet)>
	//   22   50:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(layoutparams)));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:aload_1         
	//   19   43:invokevirtual   #1905 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
	//   20   46:areturn         
	}

	public Adapter getAdapter()
	{
		return mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    2    4:areturn         
	}

	int getAdapterPositionFor(ViewHolder viewholder)
	{
		if(viewholder.hasAnyOfTheFlags(524) || !viewholder.isBound())
	//*   0    0:aload_1         
	//*   1    1:sipush          524
	//*   2    4:invokevirtual   #966 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//*   3    7:ifne            17
	//*   4   10:aload_1         
	//*   5   11:invokevirtual   #1910 <Method boolean RecyclerView$ViewHolder.isBound()>
	//*   6   14:ifne            19
			return -1;
	//    7   17:iconst_m1       
	//    8   18:ireturn         
		else
			return mAdapterHelper.applyPendingUpdatesToPosition(viewholder.mPosition);
	//    9   19:aload_0         
	//   10   20:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   11   23:aload_1         
	//   12   24:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//   13   27:invokevirtual   #1913 <Method int AdapterHelper.applyPendingUpdatesToPosition(int)>
	//   14   30:ireturn         
	}

	public int getBaseline()
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			return mLayout.getBaseline();
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1916 <Method int RecyclerView$LayoutManager.getBaseline()>
	//    6   14:ireturn         
		else
			return super.getBaseline();
	//    7   15:aload_0         
	//    8   16:invokespecial   #1917 <Method int ViewGroup.getBaseline()>
	//    9   19:ireturn         
	}

	long getChangedHolderKey(ViewHolder viewholder)
	{
		if(mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   3    7:ifeq            15
			return viewholder.getItemId();
	//    4   10:aload_1         
	//    5   11:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//    6   14:lreturn         
		else
			return (long)viewholder.mPosition;
	//    7   15:aload_1         
	//    8   16:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//    9   19:i2l             
	//   10   20:lreturn         
	}

	public int getChildAdapterPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getAdapterPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1423 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	protected int getChildDrawingOrder(int i, int j)
	{
		if(mChildDrawingOrderCallback == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   2    4:ifnonnull       14
			return super.getChildDrawingOrder(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokespecial   #1923 <Method int ViewGroup.getChildDrawingOrder(int, int)>
	//    7   13:ireturn         
		else
			return mChildDrawingOrderCallback.onGetChildDrawingOrder(i, j);
	//    8   14:aload_0         
	//    9   15:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//   10   18:iload_1         
	//   11   19:iload_2         
	//   12   20:invokeinterface #1926 <Method int RecyclerView$ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int)>
	//   13   25:ireturn         
	}

	public long getChildItemId(View view)
	{
		if(mAdapter != null && mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          17
	//*   3    7:aload_0         
	//*   4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   6   14:ifne            21
	//*   7   17:ldc2w           #156 <Long -1L>
	//*   8   20:lreturn         
	//*   9   21:aload_1         
	//*  10   22:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  11   25:astore_1        
			if((view = ((View) (getChildViewHolderInt(view)))) != null)
	//*  12   26:aload_1         
	//*  13   27:ifnull          17
				return ((ViewHolder) (view)).getItemId();
	//   14   30:aload_1         
	//   15   31:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//   16   34:lreturn         
		return -1L;
	}

	public int getChildLayoutPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getLayoutPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	public int getChildPosition(View view)
	{
		return getChildAdapterPosition(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1932 <Method int getChildAdapterPosition(View)>
	//    3    5:ireturn         
	}

	public ViewHolder getChildViewHolder(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #651 <Method ViewParent View.getParent()>
	//    2    4:astore_2        
		if(viewparent != null && viewparent != this)
	//*   3    5:aload_2         
	//*   4    6:ifnull          52
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpeq       52
			throw new IllegalArgumentException((new StringBuilder()).append("View ").append(((Object) (view))).append(" is not a direct child of ").append(((Object) (this))).toString());
	//    8   14:new             #1263 <Class IllegalArgumentException>
	//    9   17:dup             
	//   10   18:new             #796 <Class StringBuilder>
	//   11   21:dup             
	//   12   22:invokespecial   #797 <Method void StringBuilder()>
	//   13   25:ldc2            #1934 <String "View ">
	//   14   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:aload_1         
	//   16   32:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   17   35:ldc2            #1936 <String " is not a direct child of ">
	//   18   38:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   19   41:aload_0         
	//   20   42:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   21   45:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   22   48:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   23   51:athrow          
		else
			return getChildViewHolderInt(view);
	//   24   52:aload_1         
	//   25   53:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   26   56:areturn         
	}

	public boolean getClipToPadding()
	{
		return mClipToPadding;
	//    0    0:aload_0         
	//    1    1:getfield        #468 <Field boolean mClipToPadding>
	//    2    4:ireturn         
	}

	public RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
	{
		return mAccessibilityDelegate;
	//    0    0:aload_0         
	//    1    1:getfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    2    4:areturn         
	}

	public void getDecoratedBoundsWithMargins(View view, Rect rect)
	{
		getDecoratedBoundsWithMarginsInt(view, rect);
	//    0    0:aload_1         
	//    1    1:aload_2         
	//    2    2:invokestatic    #1944 <Method void getDecoratedBoundsWithMarginsInt(View, Rect)>
	//    3    5:return          
	}

	public ItemAnimator getItemAnimator()
	{
		return mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:areturn         
	}

	Rect getItemDecorInsetsForChild(View view)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore          4
		if(!layoutparams.mInsetsDirty)
	//*   4    9:aload           4
	//*   5   11:getfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*   6   14:ifne            23
			return layoutparams.mDecorInsets;
	//    7   17:aload           4
	//    8   19:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    9   22:areturn         
		if(mState.isPreLayout() && (layoutparams.isItemChanged() || layoutparams.isViewInvalid()))
	//*  10   23:aload_0         
	//*  11   24:getfield        #431 <Field RecyclerView$State mState>
	//*  12   27:invokevirtual   #1951 <Method boolean RecyclerView$State.isPreLayout()>
	//*  13   30:ifeq            55
	//*  14   33:aload           4
	//*  15   35:invokevirtual   #1954 <Method boolean RecyclerView$LayoutParams.isItemChanged()>
	//*  16   38:ifne            49
	//*  17   41:aload           4
	//*  18   43:invokevirtual   #1957 <Method boolean RecyclerView$LayoutParams.isViewInvalid()>
	//*  19   46:ifeq            55
			return layoutparams.mDecorInsets;
	//   20   49:aload           4
	//   21   51:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   22   54:areturn         
		Rect rect = layoutparams.mDecorInsets;
	//   23   55:aload           4
	//   24   57:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   25   60:astore          5
		rect.set(0, 0, 0, 0);
	//   26   62:aload           5
	//   27   64:iconst_0        
	//   28   65:iconst_0        
	//   29   66:iconst_0        
	//   30   67:iconst_0        
	//   31   68:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		int j = mItemDecorations.size();
	//   32   71:aload_0         
	//   33   72:getfield        #394 <Field ArrayList mItemDecorations>
	//   34   75:invokevirtual   #1078 <Method int ArrayList.size()>
	//   35   78:istore_3        
		for(int i = 0; i < j; i++)
	//*  36   79:iconst_0        
	//*  37   80:istore_2        
	//*  38   81:iload_2         
	//*  39   82:iload_3         
	//*  40   83:icmpge          200
		{
			mTempRect.set(0, 0, 0, 0);
	//   41   86:aload_0         
	//   42   87:getfield        #382 <Field Rect mTempRect>
	//   43   90:iconst_0        
	//   44   91:iconst_0        
	//   45   92:iconst_0        
	//   46   93:iconst_0        
	//   47   94:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
			((ItemDecoration)mItemDecorations.get(i)).getItemOffsets(mTempRect, view, this, mState);
	//   48   97:aload_0         
	//   49   98:getfield        #394 <Field ArrayList mItemDecorations>
	//   50  101:iload_2         
	//   51  102:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   52  105:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   53  108:aload_0         
	//   54  109:getfield        #382 <Field Rect mTempRect>
	//   55  112:aload_1         
	//   56  113:aload_0         
	//   57  114:aload_0         
	//   58  115:getfield        #431 <Field RecyclerView$State mState>
	//   59  118:invokevirtual   #1961 <Method void RecyclerView$ItemDecoration.getItemOffsets(Rect, View, RecyclerView, RecyclerView$State)>
			rect.left = rect.left + mTempRect.left;
	//   60  121:aload           5
	//   61  123:aload           5
	//   62  125:getfield        #1134 <Field int Rect.left>
	//   63  128:aload_0         
	//   64  129:getfield        #382 <Field Rect mTempRect>
	//   65  132:getfield        #1134 <Field int Rect.left>
	//   66  135:iadd            
	//   67  136:putfield        #1134 <Field int Rect.left>
			rect.top = rect.top + mTempRect.top;
	//   68  139:aload           5
	//   69  141:aload           5
	//   70  143:getfield        #1143 <Field int Rect.top>
	//   71  146:aload_0         
	//   72  147:getfield        #382 <Field Rect mTempRect>
	//   73  150:getfield        #1143 <Field int Rect.top>
	//   74  153:iadd            
	//   75  154:putfield        #1143 <Field int Rect.top>
			rect.right = rect.right + mTempRect.right;
	//   76  157:aload           5
	//   77  159:aload           5
	//   78  161:getfield        #1152 <Field int Rect.right>
	//   79  164:aload_0         
	//   80  165:getfield        #382 <Field Rect mTempRect>
	//   81  168:getfield        #1152 <Field int Rect.right>
	//   82  171:iadd            
	//   83  172:putfield        #1152 <Field int Rect.right>
			rect.bottom = rect.bottom + mTempRect.bottom;
	//   84  175:aload           5
	//   85  177:aload           5
	//   86  179:getfield        #1161 <Field int Rect.bottom>
	//   87  182:aload_0         
	//   88  183:getfield        #382 <Field Rect mTempRect>
	//   89  186:getfield        #1161 <Field int Rect.bottom>
	//   90  189:iadd            
	//   91  190:putfield        #1161 <Field int Rect.bottom>
		}

	//   92  193:iload_2         
	//   93  194:iconst_1        
	//   94  195:iadd            
	//   95  196:istore_2        
	//*  96  197:goto            81
		layoutparams.mInsetsDirty = false;
	//   97  200:aload           4
	//   98  202:iconst_0        
	//   99  203:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		return rect;
	//  100  206:aload           5
	//  101  208:areturn         
	}

	public ItemDecoration getItemDecorationAt(int i)
	{
		if(i < 0 || i >= mItemDecorations.size())
	//*   0    0:iload_1         
	//*   1    1:iflt            15
	//*   2    4:iload_1         
	//*   3    5:aload_0         
	//*   4    6:getfield        #394 <Field ArrayList mItemDecorations>
	//*   5    9:invokevirtual   #1078 <Method int ArrayList.size()>
	//*   6   12:icmplt          17
			return null;
	//    7   15:aconst_null     
	//    8   16:areturn         
		else
			return (ItemDecoration)mItemDecorations.get(i);
	//    9   17:aload_0         
	//   10   18:getfield        #394 <Field ArrayList mItemDecorations>
	//   11   21:iload_1         
	//   12   22:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   13   25:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   14   28:areturn         
	}

	public LayoutManager getLayoutManager()
	{
		return mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:areturn         
	}

	public int getMaxFlingVelocity()
	{
		return mMaxFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #509 <Field int mMaxFlingVelocity>
	//    2    4:ireturn         
	}

	public int getMinFlingVelocity()
	{
		return mMinFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #504 <Field int mMinFlingVelocity>
	//    2    4:ireturn         
	}

	long getNanoTime()
	{
		if(ALLOW_THREAD_GAP_WORK)
	//*   0    0:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*   1    3:ifeq            10
			return System.nanoTime();
	//    2    6:invokestatic    #1973 <Method long System.nanoTime()>
	//    3    9:lreturn         
		else
			return 0L;
	//    4   10:lconst_0        
	//    5   11:lreturn         
	}

	public OnFlingListener getOnFlingListener()
	{
		return mOnFlingListener;
	//    0    0:aload_0         
	//    1    1:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    2    4:areturn         
	}

	public boolean getPreserveFocusAfterLayout()
	{
		return mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ireturn         
	}

	public RecycledViewPool getRecycledViewPool()
	{
		return mRecycler.getRecycledViewPool();
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:invokevirtual   #1980 <Method RecyclerView$RecycledViewPool RecyclerView$Recycler.getRecycledViewPool()>
	//    3    7:areturn         
	}

	public int getScrollState()
	{
		return mScrollState;
	//    0    0:aload_0         
	//    1    1:getfield        #411 <Field int mScrollState>
	//    2    4:ireturn         
	}

	public boolean hasFixedSize()
	{
		return mHasFixedSize;
	//    0    0:aload_0         
	//    1    1:getfield        #1983 <Field boolean mHasFixedSize>
	//    2    4:ireturn         
	}

	public boolean hasNestedScrollingParent()
	{
		return getScrollingChildHelper().hasNestedScrollingParent();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #1986 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent()>
	//    3    7:ireturn         
	}

	public boolean hasNestedScrollingParent(int i)
	{
		return getScrollingChildHelper().hasNestedScrollingParent(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #1988 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent(int)>
	//    4    8:ireturn         
	}

	public boolean hasPendingAdapterUpdates()
	{
		return !mFirstLayoutComplete || mDataSetHasChangedAfterLayout || mAdapterHelper.hasPendingUpdates();
	//    0    0:aload_0         
	//    1    1:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//    2    4:ifeq            24
	//    3    7:aload_0         
	//    4    8:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//    5   11:ifne            24
	//    6   14:aload_0         
	//    7   15:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//    8   18:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//    9   21:ifeq            26
	//   10   24:iconst_1        
	//   11   25:ireturn         
	//   12   26:iconst_0        
	//   13   27:ireturn         
	}

	void initAdapterManager()
	{
		mAdapterHelper = new AdapterHelper(new AdapterHelper.Callback() {

			void dispatchUpdate(AdapterHelper.UpdateOp updateop)
			{
				switch(updateop.cmd)
			//*   0    0:aload_1         
			//*   1    1:getfield        #28  <Field int AdapterHelper$UpdateOp.cmd>
				{
			//*   2    4:tableswitch     1 8: default 52
			//			               1 53
			//			               2 76
			//			               3 52
			//			               4 99
			//			               5 52
			//			               6 52
			//			               7 52
			//			               8 126
				case 3: // '\003'
				case 5: // '\005'
				case 6: // '\006'
				case 7: // '\007'
				default:
					return;
			//    3   52:return          

				case 1: // '\001'
					mLayout.onItemsAdded(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//    4   53:aload_0         
			//    5   54:getfield        #17  <Field RecyclerView this$0>
			//    6   57:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    7   60:aload_0         
			//    8   61:getfield        #17  <Field RecyclerView this$0>
			//    9   64:aload_1         
			//   10   65:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   11   68:aload_1         
			//   12   69:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   13   72:invokevirtual   #44  <Method void RecyclerView$LayoutManager.onItemsAdded(RecyclerView, int, int)>
					return;
			//   14   75:return          

				case 2: // '\002'
					mLayout.onItemsRemoved(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   15   76:aload_0         
			//   16   77:getfield        #17  <Field RecyclerView this$0>
			//   17   80:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   18   83:aload_0         
			//   19   84:getfield        #17  <Field RecyclerView this$0>
			//   20   87:aload_1         
			//   21   88:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   22   91:aload_1         
			//   23   92:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   24   95:invokevirtual   #47  <Method void RecyclerView$LayoutManager.onItemsRemoved(RecyclerView, int, int)>
					return;
			//   25   98:return          

				case 4: // '\004'
					mLayout.onItemsUpdated(RecyclerView.this, updateop.positionStart, updateop.itemCount, updateop.payload);
			//   26   99:aload_0         
			//   27  100:getfield        #17  <Field RecyclerView this$0>
			//   28  103:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   29  106:aload_0         
			//   30  107:getfield        #17  <Field RecyclerView this$0>
			//   31  110:aload_1         
			//   32  111:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   33  114:aload_1         
			//   34  115:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   35  118:aload_1         
			//   36  119:getfield        #51  <Field Object AdapterHelper$UpdateOp.payload>
			//   37  122:invokevirtual   #55  <Method void RecyclerView$LayoutManager.onItemsUpdated(RecyclerView, int, int, Object)>
					return;
			//   38  125:return          

				case 8: // '\b'
					mLayout.onItemsMoved(RecyclerView.this, updateop.positionStart, updateop.itemCount, 1);
			//   39  126:aload_0         
			//   40  127:getfield        #17  <Field RecyclerView this$0>
			//   41  130:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   42  133:aload_0         
			//   43  134:getfield        #17  <Field RecyclerView this$0>
			//   44  137:aload_1         
			//   45  138:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   46  141:aload_1         
			//   47  142:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   48  145:iconst_1        
			//   49  146:invokevirtual   #59  <Method void RecyclerView$LayoutManager.onItemsMoved(RecyclerView, int, int, int)>
					break;
				}
			//   50  149:return          
			}

			public ViewHolder findViewHolder(int i)
			{
				ViewHolder viewholder;
				for(viewholder = findViewHolderForPosition(i, true); viewholder == null || mChildHelper.isHidden(viewholder.itemView);)
			//*   0    0:aload_0         
			//*   1    1:getfield        #17  <Field RecyclerView this$0>
			//*   2    4:iload_1         
			//*   3    5:iconst_1        
			//*   4    6:invokevirtual   #65  <Method RecyclerView$ViewHolder RecyclerView.findViewHolderForPosition(int, boolean)>
			//*   5    9:astore_2        
			//*   6   10:aload_2         
			//*   7   11:ifnonnull       16
					return null;
			//    8   14:aconst_null     
			//    9   15:areturn         

			//   10   16:aload_0         
			//   11   17:getfield        #17  <Field RecyclerView this$0>
			//   12   20:getfield        #69  <Field ChildHelper RecyclerView.mChildHelper>
			//   13   23:aload_2         
			//   14   24:getfield        #75  <Field View RecyclerView$ViewHolder.itemView>
			//   15   27:invokevirtual   #81  <Method boolean ChildHelper.isHidden(View)>
			//   16   30:ifne            14
				return viewholder;
			//   17   33:aload_2         
			//   18   34:areturn         
			}

			public void markViewHoldersUpdated(int i, int j, Object obj)
			{
				viewRangeUpdate(i, j, obj);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #86  <Method void RecyclerView.viewRangeUpdate(int, int, Object)>
				mItemsChanged = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #90  <Field boolean RecyclerView.mItemsChanged>
			//   10   18:return          
			}

			public void offsetPositionsForAdd(int i, int j)
			{
				offsetPositionRecordsForInsert(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #95  <Method void RecyclerView.offsetPositionRecordsForInsert(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForMove(int i, int j)
			{
				offsetPositionRecordsForMove(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #102 <Method void RecyclerView.offsetPositionRecordsForMove(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForRemovingInvisible(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_1        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
				State state = mState;
			//   10   18:aload_0         
			//   11   19:getfield        #17  <Field RecyclerView this$0>
			//   12   22:getfield        #111 <Field RecyclerView$State RecyclerView.mState>
			//   13   25:astore_3        
				state.mDeletedInvisibleItemCountSincePreviousLayout = state.mDeletedInvisibleItemCountSincePreviousLayout + j;
			//   14   26:aload_3         
			//   15   27:aload_3         
			//   16   28:getfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   17   31:iload_2         
			//   18   32:iadd            
			//   19   33:putfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   20   36:return          
			}

			public void offsetPositionsForRemovingLaidOutOrNewView(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, false);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_0        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//   10   18:return          
			}

			public void onDispatchFirstPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			public void onDispatchSecondPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #989 <Class AdapterHelper>
	//    2    4:dup             
	//    3    5:new             #20  <Class RecyclerView$6>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1990 <Method void RecyclerView$6(RecyclerView)>
	//    7   13:invokespecial   #1993 <Method void AdapterHelper(AdapterHelper$Callback)>
	//    8   16:putfield        #987 <Field AdapterHelper mAdapterHelper>
	//    9   19:return          
	}

	void initFastScroller(StateListDrawable statelistdrawable, Drawable drawable, StateListDrawable statelistdrawable1, Drawable drawable1)
	{
		if(statelistdrawable == null || drawable == null || statelistdrawable1 == null || drawable1 == null)
	//*   0    0:aload_1         
	//*   1    1:ifnull          17
	//*   2    4:aload_2         
	//*   3    5:ifnull          17
	//*   4    8:aload_3         
	//*   5    9:ifnull          17
	//*   6   12:aload           4
	//*   7   14:ifnonnull       48
		{
			throw new IllegalArgumentException((new StringBuilder()).append("Trying to set fast scroller without both required drawables.").append(exceptionLabel()).toString());
	//    8   17:new             #1263 <Class IllegalArgumentException>
	//    9   20:dup             
	//   10   21:new             #796 <Class StringBuilder>
	//   11   24:dup             
	//   12   25:invokespecial   #797 <Method void StringBuilder()>
	//   13   28:ldc2            #1995 <String "Trying to set fast scroller without both required drawables.">
	//   14   31:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   34:aload_0         
	//   16   35:invokevirtual   #1224 <Method String exceptionLabel()>
	//   17   38:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   18   41:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   19   44:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   20   47:athrow          
		} else
		{
			Resources resources = getContext().getResources();
	//   21   48:aload_0         
	//   22   49:invokevirtual   #539 <Method Context getContext()>
	//   23   52:invokevirtual   #1999 <Method Resources Context.getResources()>
	//   24   55:astore          5
			new FastScroller(this, statelistdrawable, drawable, statelistdrawable1, drawable1, resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_default_thickness), resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_minimum_range), resources.getDimensionPixelOffset(android.support.v7.recyclerview.R.dimen.fastscroll_margin));
	//   25   57:new             #2001 <Class FastScroller>
	//   26   60:dup             
	//   27   61:aload_0         
	//   28   62:aload_1         
	//   29   63:aload_2         
	//   30   64:aload_3         
	//   31   65:aload           4
	//   32   67:aload           5
	//   33   69:getstatic       #2006 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_default_thickness>
	//   34   72:invokevirtual   #2011 <Method int Resources.getDimensionPixelSize(int)>
	//   35   75:aload           5
	//   36   77:getstatic       #2014 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_minimum_range>
	//   37   80:invokevirtual   #2011 <Method int Resources.getDimensionPixelSize(int)>
	//   38   83:aload           5
	//   39   85:getstatic       #2017 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_margin>
	//   40   88:invokevirtual   #2020 <Method int Resources.getDimensionPixelOffset(int)>
	//   41   91:invokespecial   #2023 <Method void FastScroller(RecyclerView, StateListDrawable, Drawable, StateListDrawable, Drawable, int, int, int)>
	//   42   94:pop             
			return;
	//   43   95:return          
		}
	}

	void invalidateGlows()
	{
		mBottomGlow = null;
	//    0    0:aload_0         
	//    1    1:aconst_null     
	//    2    2:putfield        #1344 <Field EdgeEffect mBottomGlow>
		mTopGlow = null;
	//    3    5:aload_0         
	//    4    6:aconst_null     
	//    5    7:putfield        #1331 <Field EdgeEffect mTopGlow>
		mRightGlow = null;
	//    6   10:aload_0         
	//    7   11:aconst_null     
	//    8   12:putfield        #1339 <Field EdgeEffect mRightGlow>
		mLeftGlow = null;
	//    9   15:aload_0         
	//   10   16:aconst_null     
	//   11   17:putfield        #1318 <Field EdgeEffect mLeftGlow>
	//   12   20:return          
	}

	public void invalidateItemDecorations()
	{
		if(mItemDecorations.size() == 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #394 <Field ArrayList mItemDecorations>
	//*   2    4:invokevirtual   #1078 <Method int ArrayList.size()>
	//*   3    7:ifne            11
			return;
	//    4   10:return          
		if(mLayout != null)
	//*   5   11:aload_0         
	//*   6   12:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   7   15:ifnull          28
			mLayout.assertNotInLayoutOrScroll("Cannot invalidate item decorations during a scroll or layout");
	//    8   18:aload_0         
	//    9   19:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:ldc2            #2027 <String "Cannot invalidate item decorations during a scroll or layout">
	//   11   25:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		markItemDecorInsetsDirty();
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   14   32:aload_0         
	//   15   33:invokevirtual   #1493 <Method void requestLayout()>
	//   16   36:return          
	}

	boolean isAccessibilityEnabled()
	{
		return mAccessibilityManager != null && mAccessibilityManager.isEnabled();
	//    0    0:aload_0         
	//    1    1:getfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//    5   11:invokevirtual   #2030 <Method boolean AccessibilityManager.isEnabled()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAnimating()
	{
		return mItemAnimator != null && mItemAnimator.isRunning();
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #1763 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAttachedToWindow()
	{
		return mIsAttached;
	//    0    0:aload_0         
	//    1    1:getfield        #2034 <Field boolean mIsAttached>
	//    2    4:ireturn         
	}

	public boolean isComputingLayout()
	{
		return mLayoutOrScrollCounter > 0;
	//    0    0:aload_0         
	//    1    1:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    2    4:ifle            9
	//    3    7:iconst_1        
	//    4    8:ireturn         
	//    5    9:iconst_0        
	//    6   10:ireturn         
	}

	public boolean isLayoutFrozen()
	{
		return mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//    2    4:ireturn         
	}

	public boolean isNestedScrollingEnabled()
	{
		return getScrollingChildHelper().isNestedScrollingEnabled();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2038 <Method boolean NestedScrollingChildHelper.isNestedScrollingEnabled()>
	//    3    7:ireturn         
	}

	void jumpToPositionForSmoothScroller(int i)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//    4    8:aload_0         
	//    5    9:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    6   12:iload_1         
	//    7   13:invokevirtual   #2042 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//    8   16:aload_0         
	//    9   17:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//   10   20:pop             
			return;
	//   11   21:return          
		}
	}

	void markItemDecorInsetsDirty()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          40
			((LayoutParams)mChildHelper.getUnfilteredChildAt(i).getLayoutParams()).mInsetsDirty = true;
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   14   26:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   15   29:iconst_1        
	//   16   30:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>

	//   17   33:iload_1         
	//   18   34:iconst_1        
	//   19   35:iadd            
	//   20   36:istore_1        
	//*  21   37:goto            10
		mRecycler.markItemDecorInsetsDirty();
	//   22   40:aload_0         
	//   23   41:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   24   44:invokevirtual   #2043 <Method void RecyclerView$Recycler.markItemDecorInsetsDirty()>
	//   25   47:return          
	}

	void markKnownViewsInvalid()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          51
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:ifnull          44
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifne            44
				viewholder.addFlags(6);
	//   20   38:aload_3         
	//   21   39:bipush          6
	//   22   41:invokevirtual   #2047 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   23   44:iload_1         
	//   24   45:iconst_1        
	//   25   46:iadd            
	//   26   47:istore_1        
	//*  27   48:goto            10
		markItemDecorInsetsDirty();
	//   28   51:aload_0         
	//   29   52:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
		mRecycler.markKnownViewsInvalid();
	//   30   55:aload_0         
	//   31   56:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   32   59:invokevirtual   #2049 <Method void RecyclerView$Recycler.markKnownViewsInvalid()>
	//   33   62:return          
	}

	public void offsetChildrenHorizontal(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetLeftAndRight(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2053 <Method void View.offsetLeftAndRight(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	public void offsetChildrenVertical(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetTopAndBottom(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2057 <Method void View.offsetTopAndBottom(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	void offsetPositionRecordsForInsert(int i, int j)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore_3        
	//*   6   11:iload_3         
	//*   7   12:iload           4
	//*   8   14:icmpge          74
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   17:aload_0         
	//   10   18:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   21:iload_3         
	//   12   22:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   25:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   28:astore          5
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i)
	//*  15   30:aload           5
	//*  16   32:ifnull          67
	//*  17   35:aload           5
	//*  18   37:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   40:ifne            67
	//*  20   43:aload           5
	//*  21   45:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   48:iload_1         
	//*  23   49:icmplt          67
			{
				viewholder.offsetPosition(j, false);
	//   24   52:aload           5
	//   25   54:iload_2         
	//   26   55:iconst_0        
	//   27   56:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   28   59:aload_0         
	//   29   60:getfield        #431 <Field RecyclerView$State mState>
	//   30   63:iconst_1        
	//   31   64:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   32   67:iload_3         
	//   33   68:iconst_1        
	//   34   69:iadd            
	//   35   70:istore_3        
	//*  36   71:goto            11
		mRecycler.offsetPositionRecordsForInsert(i, j);
	//   37   74:aload_0         
	//   38   75:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   39   78:iload_1         
	//   40   79:iload_2         
	//   41   80:invokevirtual   #2064 <Method void RecyclerView$Recycler.offsetPositionRecordsForInsert(int, int)>
		requestLayout();
	//   42   83:aload_0         
	//   43   84:invokevirtual   #1493 <Method void requestLayout()>
	//   44   87:return          
	}

	void offsetPositionRecordsForMove(int i, int j)
	{
		int j1 = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          7
		byte byte0;
		int k;
		int l;
		int i1;
		if(i < j)
	//*   4    9:iload_1         
	//*   5   10:iload_2         
	//*   6   11:icmpge          80
		{
			byte0 = -1;
	//    7   14:iconst_m1       
	//    8   15:istore_3        
			k = j;
	//    9   16:iload_2         
	//   10   17:istore          4
			l = i;
	//   11   19:iload_1         
	//   12   20:istore          5
		} else
	//*  13   22:iconst_0        
	//*  14   23:istore          6
	//*  15   25:iload           6
	//*  16   27:iload           7
	//*  17   29:icmpge          130
	//*  18   32:aload_0         
	//*  19   33:getfield        #663 <Field ChildHelper mChildHelper>
	//*  20   36:iload           6
	//*  21   38:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//*  22   41:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  23   44:astore          8
	//*  24   46:aload           8
	//*  25   48:ifnull          71
	//*  26   51:aload           8
	//*  27   53:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  28   56:iload           5
	//*  29   58:icmplt          71
	//*  30   61:aload           8
	//*  31   63:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  32   66:iload           4
	//*  33   68:icmple          91
	//*  34   71:iload           6
	//*  35   73:iconst_1        
	//*  36   74:iadd            
	//*  37   75:istore          6
	//*  38   77:goto            25
		{
			byte0 = 1;
	//   39   80:iconst_1        
	//   40   81:istore_3        
			k = i;
	//   41   82:iload_1         
	//   42   83:istore          4
			l = j;
	//   43   85:iload_2         
	//   44   86:istore          5
		}
		i1 = 0;
		while(i1 < j1) 
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i1));
			if(viewholder != null && viewholder.mPosition >= l && viewholder.mPosition <= k)
	//*  45   88:goto            22
			{
				if(viewholder.mPosition == i)
	//*  46   91:aload           8
	//*  47   93:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  48   96:iload_1         
	//*  49   97:icmpne          120
					viewholder.offsetPosition(j - i, false);
	//   50  100:aload           8
	//   51  102:iload_2         
	//   52  103:iload_1         
	//   53  104:isub            
	//   54  105:iconst_0        
	//   55  106:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				else
	//*  56  109:aload_0         
	//*  57  110:getfield        #431 <Field RecyclerView$State mState>
	//*  58  113:iconst_1        
	//*  59  114:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
	//*  60  117:goto            71
					viewholder.offsetPosition(((int) (byte0)), false);
	//   61  120:aload           8
	//   62  122:iload_3         
	//   63  123:iconst_0        
	//   64  124:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
			}
			i1++;
		}
	//*  65  127:goto            109
		mRecycler.offsetPositionRecordsForMove(i, j);
	//   66  130:aload_0         
	//   67  131:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   68  134:iload_1         
	//   69  135:iload_2         
	//   70  136:invokevirtual   #2067 <Method void RecyclerView$Recycler.offsetPositionRecordsForMove(int, int)>
		requestLayout();
	//   71  139:aload_0         
	//   72  140:invokevirtual   #1493 <Method void requestLayout()>
	//   73  143:return          
	}

	void offsetPositionRecordsForRemove(int i, int j, boolean flag)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		int k = 0;
	//    4    9:iconst_0        
	//    5   10:istore          4
		while(k < l) 
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          6
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   33:aload           6
	//*  16   35:ifnull          73
	//*  17   38:aload           6
	//*  18   40:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   43:ifne            73
				if(viewholder.mPosition >= i + j)
	//*  20   46:aload           6
	//*  21   48:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   51:iload_1         
	//*  23   52:iload_2         
	//*  24   53:iadd            
	//*  25   54:icmplt          82
				{
					viewholder.offsetPosition(-j, flag);
	//   26   57:aload           6
	//   27   59:iload_2         
	//   28   60:ineg            
	//   29   61:iload_3         
	//   30   62:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					mState.mStructureChanged = true;
	//   31   65:aload_0         
	//   32   66:getfield        #431 <Field RecyclerView$State mState>
	//   33   69:iconst_1        
	//   34   70:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
				} else
	//*  35   73:iload           4
	//*  36   75:iconst_1        
	//*  37   76:iadd            
	//*  38   77:istore          4
	//*  39   79:goto            12
				if(viewholder.mPosition >= i)
	//*  40   82:aload           6
	//*  41   84:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  42   87:iload_1         
	//*  43   88:icmplt          73
				{
					viewholder.flagRemovedAndOffsetPosition(i - 1, -j, flag);
	//   44   91:aload           6
	//   45   93:iload_1         
	//   46   94:iconst_1        
	//   47   95:isub            
	//   48   96:iload_2         
	//   49   97:ineg            
	//   50   98:iload_3         
	//   51   99:invokevirtual   #2072 <Method void RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int, int, boolean)>
					mState.mStructureChanged = true;
	//   52  102:aload_0         
	//   53  103:getfield        #431 <Field RecyclerView$State mState>
	//   54  106:iconst_1        
	//   55  107:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
				}
			k++;
		}
	//*  56  110:goto            73
		mRecycler.offsetPositionRecordsForRemove(i, j, flag);
	//   57  113:aload_0         
	//   58  114:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:iload_3         
	//   62  120:invokevirtual   #2074 <Method void RecyclerView$Recycler.offsetPositionRecordsForRemove(int, int, boolean)>
		requestLayout();
	//   63  123:aload_0         
	//   64  124:invokevirtual   #1493 <Method void requestLayout()>
	//   65  127:return          
	}

	protected void onAttachedToWindow()
	{
		float f;
		boolean flag = true;
	//    0    0:iconst_1        
	//    1    1:istore_2        
		super.onAttachedToWindow();
	//    2    2:aload_0         
	//    3    3:invokespecial   #2077 <Method void ViewGroup.onAttachedToWindow()>
		mLayoutOrScrollCounter = 0;
	//    4    6:aload_0         
	//    5    7:iconst_0        
	//    6    8:putfield        #402 <Field int mLayoutOrScrollCounter>
		mIsAttached = true;
	//    7   11:aload_0         
	//    8   12:iconst_1        
	//    9   13:putfield        #2034 <Field boolean mIsAttached>
		Display display;
		if(!mFirstLayoutComplete || isLayoutRequested())
	//*  10   16:aload_0         
	//*  11   17:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  12   20:ifeq            153
	//*  13   23:aload_0         
	//*  14   24:invokevirtual   #2080 <Method boolean isLayoutRequested()>
	//*  15   27:ifne            153
	//*  16   30:aload_0         
	//*  17   31:iload_2         
	//*  18   32:putfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  19   35:aload_0         
	//*  20   36:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  21   39:ifnull          50
	//*  22   42:aload_0         
	//*  23   43:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  24   46:aload_0         
	//*  25   47:invokevirtual   #2083 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
	//*  26   50:aload_0         
	//*  27   51:iconst_0        
	//*  28   52:putfield        #440 <Field boolean mPostedAnimatorRunner>
	//*  29   55:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  30   58:ifeq            152
	//*  31   61:aload_0         
	//*  32   62:getstatic       #2089 <Field ThreadLocal GapWorker.sGapWorker>
	//*  33   65:invokevirtual   #2092 <Method Object ThreadLocal.get()>
	//*  34   68:checkcast       #2085 <Class GapWorker>
	//*  35   71:putfield        #2094 <Field GapWorker mGapWorker>
	//*  36   74:aload_0         
	//*  37   75:getfield        #2094 <Field GapWorker mGapWorker>
	//*  38   78:ifnonnull       144
	//*  39   81:aload_0         
	//*  40   82:new             #2085 <Class GapWorker>
	//*  41   85:dup             
	//*  42   86:invokespecial   #2095 <Method void GapWorker()>
	//*  43   89:putfield        #2094 <Field GapWorker mGapWorker>
	//*  44   92:aload_0         
	//*  45   93:invokestatic    #2099 <Method Display ViewCompat.getDisplay(View)>
	//*  46   96:astore_3        
	//*  47   97:aload_0         
	//*  48   98:invokevirtual   #746 <Method boolean isInEditMode()>
	//*  49  101:ifne            158
	//*  50  104:aload_3         
	//*  51  105:ifnull          158
	//*  52  108:aload_3         
	//*  53  109:invokevirtual   #2104 <Method float Display.getRefreshRate()>
	//*  54  112:fstore_1        
	//*  55  113:fload_1         
	//*  56  114:ldc2            #2105 <Float 30F>
	//*  57  117:fcmpl           
	//*  58  118:iflt            158
	//*  59  121:aload_0         
	//*  60  122:getfield        #2094 <Field GapWorker mGapWorker>
	//*  61  125:ldc2            #2106 <Float 1E+09F>
	//*  62  128:fload_1         
	//*  63  129:fdiv            
	//*  64  130:f2l             
	//*  65  131:putfield        #2109 <Field long GapWorker.mFrameIntervalNs>
	//*  66  134:getstatic       #2089 <Field ThreadLocal GapWorker.sGapWorker>
	//*  67  137:aload_0         
	//*  68  138:getfield        #2094 <Field GapWorker mGapWorker>
	//*  69  141:invokevirtual   #2112 <Method void ThreadLocal.set(Object)>
	//*  70  144:aload_0         
	//*  71  145:getfield        #2094 <Field GapWorker mGapWorker>
	//*  72  148:aload_0         
	//*  73  149:invokevirtual   #2114 <Method void GapWorker.add(RecyclerView)>
	//*  74  152:return          
			flag = false;
	//   75  153:iconst_0        
	//   76  154:istore_2        
		mFirstLayoutComplete = flag;
		if(mLayout != null)
			mLayout.dispatchAttachedToWindow(this);
		mPostedAnimatorRunner = false;
		if(!ALLOW_THREAD_GAP_WORK) goto _L2; else goto _L1
_L1:
		mGapWorker = (GapWorker)GapWorker.sGapWorker.get();
		if(mGapWorker != null) goto _L4; else goto _L3
_L3:
		mGapWorker = new GapWorker();
		display = ViewCompat.getDisplay(((View) (this)));
		if(isInEditMode() || display == null) goto _L6; else goto _L5
_L5:
		f = display.getRefreshRate();
		if(f < 30F) goto _L6; else goto _L7
_L7:
		mGapWorker.mFrameIntervalNs = (long)(1E+09F / f);
		GapWorker.sGapWorker.set(((Object) (mGapWorker)));
_L4:
		mGapWorker.add(this);
_L2:
		return;
	//*  77  155:goto            30
_L6:
		f = 60F;
	//   78  158:ldc2            #2115 <Float 60F>
	//   79  161:fstore_1        
		if(true) goto _L7; else goto _L8
	//   80  162:goto            121
_L8:
	}

	public void onChildAttachedToWindow(View view)
	{
	//    0    0:return          
	}

	public void onChildDetachedFromWindow(View view)
	{
	//    0    0:return          
	}

	protected void onDetachedFromWindow()
	{
		super.onDetachedFromWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2118 <Method void ViewGroup.onDetachedFromWindow()>
		if(mItemAnimator != null)
	//*   2    4:aload_0         
	//*   3    5:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   4    8:ifnull          18
			mItemAnimator.endAnimations();
	//    5   11:aload_0         
	//    6   12:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    7   15:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
		stopScroll();
	//    8   18:aload_0         
	//    9   19:invokevirtual   #2124 <Method void stopScroll()>
		mIsAttached = false;
	//   10   22:aload_0         
	//   11   23:iconst_0        
	//   12   24:putfield        #2034 <Field boolean mIsAttached>
		if(mLayout != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  15   31:ifnull          46
			mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:aload_0         
	//   20   40:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   21   43:invokevirtual   #2128 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		mPendingAccessibilityImportanceChange.clear();
	//   22   46:aload_0         
	//   23   47:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   24   50:invokeinterface #1554 <Method void List.clear()>
		removeCallbacks(mItemAnimatorRunner);
	//   25   55:aload_0         
	//   26   56:aload_0         
	//   27   57:getfield        #453 <Field Runnable mItemAnimatorRunner>
	//   28   60:invokevirtual   #2132 <Method boolean removeCallbacks(Runnable)>
	//   29   63:pop             
		mViewInfoStore.onDetach();
	//   30   64:aload_0         
	//   31   65:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   32   68:invokevirtual   #2135 <Method void ViewInfoStore.onDetach()>
		if(ALLOW_THREAD_GAP_WORK)
	//*  33   71:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  34   74:ifeq            90
		{
			mGapWorker.remove(this);
	//   35   77:aload_0         
	//   36   78:getfield        #2094 <Field GapWorker mGapWorker>
	//   37   81:aload_0         
	//   38   82:invokevirtual   #2138 <Method void GapWorker.remove(RecyclerView)>
			mGapWorker = null;
	//   39   85:aload_0         
	//   40   86:aconst_null     
	//   41   87:putfield        #2094 <Field GapWorker mGapWorker>
		}
	//   42   90:return          
	}

	public void onDraw(Canvas canvas)
	{
		super.onDraw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #2141 <Method void ViewGroup.onDraw(Canvas)>
		int j = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #394 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1078 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < j; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDraw(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #394 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #431 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #2143 <Method void RecyclerView$ItemDecoration.onDraw(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
	//   27   47:return          
	}

	void onEnterLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #402 <Field int mLayoutOrScrollCounter>
	//    6   10:return          
	}

	void onExitLayoutOrScroll()
	{
		onExitLayoutOrScroll(true);
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:invokevirtual   #2145 <Method void onExitLayoutOrScroll(boolean)>
	//    3    5:return          
	}

	void onExitLayoutOrScroll(boolean flag)
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter - 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:isub            
	//    5    7:putfield        #402 <Field int mLayoutOrScrollCounter>
		if(mLayoutOrScrollCounter < 1)
	//*   6   10:aload_0         
	//*   7   11:getfield        #402 <Field int mLayoutOrScrollCounter>
	//*   8   14:iconst_1        
	//*   9   15:icmpge          35
		{
			mLayoutOrScrollCounter = 0;
	//   10   18:aload_0         
	//   11   19:iconst_0        
	//   12   20:putfield        #402 <Field int mLayoutOrScrollCounter>
			if(flag)
	//*  13   23:iload_1         
	//*  14   24:ifeq            35
			{
				dispatchContentChangedIfNecessary();
	//   15   27:aload_0         
	//   16   28:invokespecial   #2147 <Method void dispatchContentChangedIfNecessary()>
				dispatchPendingImportantForAccessibilityChanges();
	//   17   31:aload_0         
	//   18   32:invokevirtual   #2149 <Method void dispatchPendingImportantForAccessibilityChanges()>
			}
		}
	//   19   35:return          
	}

	public boolean onGenericMotionEvent(MotionEvent motionevent)
	{
		if(mLayout != null && !mLayoutFrozen && motionevent.getAction() == 8)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
	//*   3    7:iconst_0        
	//*   4    8:ireturn         
	//*   5    9:aload_0         
	//*   6   10:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   7   13:ifne            7
	//*   8   16:aload_1         
	//*   9   17:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//*  10   20:bipush          8
	//*  11   22:icmpne          7
		{
			float f;
			float f1;
			if((motionevent.getSource() & 2) != 0)
	//*  12   25:aload_1         
	//*  13   26:invokevirtual   #2153 <Method int MotionEvent.getSource()>
	//*  14   29:iconst_2        
	//*  15   30:iand            
	//*  16   31:ifeq            121
			{
				if(mLayout.canScrollVertically())
	//*  17   34:aload_0         
	//*  18   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  19   38:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  20   41:ifeq            109
					f = -motionevent.getAxisValue(9);
	//   21   44:aload_1         
	//   22   45:bipush          9
	//   23   47:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//   24   50:fneg            
	//   25   51:fstore_2        
				else
	//*  26   52:aload_0         
	//*  27   53:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  28   56:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  29   59:ifeq            114
	//*  30   62:aload_1         
	//*  31   63:bipush          10
	//*  32   65:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//*  33   68:fstore          4
	//*  34   70:fload_2         
	//*  35   71:fstore_3        
	//*  36   72:fload           4
	//*  37   74:fstore_2        
	//*  38   75:fload_3         
	//*  39   76:fconst_0        
	//*  40   77:fcmpl           
	//*  41   78:ifne            87
	//*  42   81:fload_2         
	//*  43   82:fconst_0        
	//*  44   83:fcmpl           
	//*  45   84:ifeq            7
	//*  46   87:aload_0         
	//*  47   88:fload_2         
	//*  48   89:aload_0         
	//*  49   90:getfield        #416 <Field float mScaledHorizontalScrollFactor>
	//*  50   93:fmul            
	//*  51   94:f2i             
	//*  52   95:aload_0         
	//*  53   96:getfield        #418 <Field float mScaledVerticalScrollFactor>
	//*  54   99:fload_3         
	//*  55  100:fmul            
	//*  56  101:f2i             
	//*  57  102:aload_1         
	//*  58  103:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//*  59  106:pop             
	//*  60  107:iconst_0        
	//*  61  108:ireturn         
					f = 0.0F;
	//   62  109:fconst_0        
	//   63  110:fstore_2        
				if(mLayout.canScrollHorizontally())
				{
					float f2 = motionevent.getAxisValue(10);
					f1 = f;
					f = f2;
				} else
	//*  64  111:goto            52
				{
					f1 = f;
	//   65  114:fload_2         
	//   66  115:fstore_3        
					f = 0.0F;
	//   67  116:fconst_0        
	//   68  117:fstore_2        
				}
			} else
	//*  69  118:goto            75
			if((motionevent.getSource() & 0x400000) != 0)
	//*  70  121:aload_1         
	//*  71  122:invokevirtual   #2153 <Method int MotionEvent.getSource()>
	//*  72  125:ldc2            #2161 <Int 0x400000>
	//*  73  128:iand            
	//*  74  129:ifeq            179
			{
				f = motionevent.getAxisValue(26);
	//   75  132:aload_1         
	//   76  133:bipush          26
	//   77  135:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//   78  138:fstore_2        
				if(mLayout.canScrollVertically())
	//*  79  139:aload_0         
	//*  80  140:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  81  143:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  82  146:ifeq            157
				{
					f1 = -f;
	//   83  149:fload_2         
	//   84  150:fneg            
	//   85  151:fstore_3        
					f = 0.0F;
	//   86  152:fconst_0        
	//   87  153:fstore_2        
				} else
	//*  88  154:goto            75
				if(mLayout.canScrollHorizontally())
	//*  89  157:aload_0         
	//*  90  158:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  91  161:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  92  164:ifeq            172
				{
					f1 = 0.0F;
	//   93  167:fconst_0        
	//   94  168:fstore_3        
				} else
	//*  95  169:goto            75
				{
					f = 0.0F;
	//   96  172:fconst_0        
	//   97  173:fstore_2        
					f1 = 0.0F;
	//   98  174:fconst_0        
	//   99  175:fstore_3        
				}
			} else
	//* 100  176:goto            75
			{
				f = 0.0F;
	//  101  179:fconst_0        
	//  102  180:fstore_2        
				f1 = 0.0F;
	//  103  181:fconst_0        
	//  104  182:fstore_3        
			}
			if(f1 != 0.0F || f != 0.0F)
			{
				scrollByInternal((int)(f * mScaledHorizontalScrollFactor), (int)(mScaledVerticalScrollFactor * f1), motionevent);
				return false;
			}
		}
		return false;
	//* 105  183:goto            75
	}

	public boolean onInterceptTouchEvent(MotionEvent motionevent)
	{
		if(!mLayoutFrozen) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//    2    4:ifeq            9
_L1:
		return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
_L2:
		if(dispatchOnItemTouchIntercept(motionevent))
	//*   5    9:aload_0         
	//*   6   10:aload_1         
	//*   7   11:invokespecial   #2163 <Method boolean dispatchOnItemTouchIntercept(MotionEvent)>
	//*   8   14:ifeq            23
		{
			cancelTouch();
	//    9   17:aload_0         
	//   10   18:invokespecial   #2165 <Method void cancelTouch()>
			return true;
	//   11   21:iconst_1        
	//   12   22:ireturn         
		}
		if(mLayout == null) goto _L1; else goto _L3
	//   13   23:aload_0         
	//   14   24:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:ifnull          7
_L3:
		int i;
		int j;
		boolean flag1;
		boolean flag2;
		flag1 = mLayout.canScrollHorizontally();
	//   16   30:aload_0         
	//   17   31:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   34:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   19   37:istore          6
		flag2 = mLayout.canScrollVertically();
	//   20   39:aload_0         
	//   21   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   22   43:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   23   46:istore          7
		if(mVelocityTracker == null)
	//*  24   48:aload_0         
	//*  25   49:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*  26   52:ifnonnull       62
			mVelocityTracker = VelocityTracker.obtain();
	//   27   55:aload_0         
	//   28   56:invokestatic    #2168 <Method VelocityTracker VelocityTracker.obtain()>
	//   29   59:putfield        #1400 <Field VelocityTracker mVelocityTracker>
		mVelocityTracker.addMovement(motionevent);
	//   30   62:aload_0         
	//   31   63:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//   32   66:aload_1         
	//   33   67:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
		j = motionevent.getActionMasked();
	//   34   70:aload_1         
	//   35   71:invokevirtual   #2174 <Method int MotionEvent.getActionMasked()>
	//   36   74:istore_3        
		i = motionevent.getActionIndex();
	//   37   75:aload_1         
	//   38   76:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//   39   79:istore_2        
		j;
	//   40   80:iload_3         
		JVM INSTR tableswitch 0 6: default 124
	//	               0 138
	//	               1 489
	//	               2 320
	//	               3 504
	//	               4 124
	//	               5 266
	//	               6 481;
	//   41   81:tableswitch     0 6: default 124
	//	               0 138
	//	               1 489
	//	               2 320
	//	               3 504
	//	               4 124
	//	               5 266
	//	               6 481
		   goto _L4 _L5 _L6 _L7 _L8 _L4 _L9 _L10
_L4:
		break; /* Loop/switch isn't completed */
_L8:
		break MISSING_BLOCK_LABEL_504;
_L11:
		int k;
		boolean flag;
		int l;
		int i1;
		if(mScrollState == 1)
	//*  42  124:aload_0         
	//*  43  125:getfield        #411 <Field int mScrollState>
	//*  44  128:iconst_1        
	//*  45  129:icmpne          511
			flag1 = true;
	//   46  132:iconst_1        
	//   47  133:istore          6
		else
	//*  48  135:iload           6
	//*  49  137:ireturn         
	//*  50  138:aload_0         
	//*  51  139:getfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//*  52  142:ifeq            150
	//*  53  145:aload_0         
	//*  54  146:iconst_0        
	//*  55  147:putfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//*  56  150:aload_0         
	//*  57  151:aload_1         
	//*  58  152:iconst_0        
	//*  59  153:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//*  60  156:putfield        #413 <Field int mScrollPointerId>
	//*  61  159:aload_1         
	//*  62  160:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//*  63  163:ldc2            #1283 <Float 0.5F>
	//*  64  166:fadd            
	//*  65  167:f2i             
	//*  66  168:istore_2        
	//*  67  169:aload_0         
	//*  68  170:iload_2         
	//*  69  171:putfield        #1285 <Field int mLastTouchX>
	//*  70  174:aload_0         
	//*  71  175:iload_2         
	//*  72  176:putfield        #1287 <Field int mInitialTouchX>
	//*  73  179:aload_1         
	//*  74  180:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//*  75  183:ldc2            #1283 <Float 0.5F>
	//*  76  186:fadd            
	//*  77  187:f2i             
	//*  78  188:istore_2        
	//*  79  189:aload_0         
	//*  80  190:iload_2         
	//*  81  191:putfield        #1292 <Field int mLastTouchY>
	//*  82  194:aload_0         
	//*  83  195:iload_2         
	//*  84  196:putfield        #1294 <Field int mInitialTouchY>
	//*  85  199:aload_0         
	//*  86  200:getfield        #411 <Field int mScrollState>
	//*  87  203:iconst_2        
	//*  88  204:icmpne          222
	//*  89  207:aload_0         
	//*  90  208:invokevirtual   #2181 <Method ViewParent getParent()>
	//*  91  211:iconst_1        
	//*  92  212:invokeinterface #2186 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
	//*  93  217:aload_0         
	//*  94  218:iconst_1        
	//*  95  219:invokevirtual   #708 <Method void setScrollState(int)>
	//*  96  222:aload_0         
	//*  97  223:getfield        #448 <Field int[] mNestedOffsets>
	//*  98  226:astore_1        
	//*  99  227:aload_0         
	//* 100  228:getfield        #448 <Field int[] mNestedOffsets>
	//* 101  231:iconst_1        
	//* 102  232:iconst_0        
	//* 103  233:iastore         
	//* 104  234:aload_1         
	//* 105  235:iconst_0        
	//* 106  236:iconst_0        
	//* 107  237:iastore         
	//* 108  238:iload           6
	//* 109  240:ifeq            522
	//* 110  243:iconst_1        
	//* 111  244:istore_2        
	//* 112  245:iload_2         
	//* 113  246:istore_3        
	//* 114  247:iload           7
	//* 115  249:ifeq            256
	//* 116  252:iload_2         
	//* 117  253:iconst_2        
	//* 118  254:ior             
	//* 119  255:istore_3        
	//* 120  256:aload_0         
	//* 121  257:iload_3         
	//* 122  258:iconst_0        
	//* 123  259:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//* 124  262:pop             
	//* 125  263:goto            124
	//* 126  266:aload_0         
	//* 127  267:aload_1         
	//* 128  268:iload_2         
	//* 129  269:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//* 130  272:putfield        #413 <Field int mScrollPointerId>
	//* 131  275:aload_1         
	//* 132  276:iload_2         
	//* 133  277:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//* 134  280:ldc2            #1283 <Float 0.5F>
	//* 135  283:fadd            
	//* 136  284:f2i             
	//* 137  285:istore_3        
	//* 138  286:aload_0         
	//* 139  287:iload_3         
	//* 140  288:putfield        #1285 <Field int mLastTouchX>
	//* 141  291:aload_0         
	//* 142  292:iload_3         
	//* 143  293:putfield        #1287 <Field int mInitialTouchX>
	//* 144  296:aload_1         
	//* 145  297:iload_2         
	//* 146  298:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//* 147  301:ldc2            #1283 <Float 0.5F>
	//* 148  304:fadd            
	//* 149  305:f2i             
	//* 150  306:istore_2        
	//* 151  307:aload_0         
	//* 152  308:iload_2         
	//* 153  309:putfield        #1292 <Field int mLastTouchY>
	//* 154  312:aload_0         
	//* 155  313:iload_2         
	//* 156  314:putfield        #1294 <Field int mInitialTouchY>
	//* 157  317:goto            124
	//* 158  320:aload_1         
	//* 159  321:aload_0         
	//* 160  322:getfield        #413 <Field int mScrollPointerId>
	//* 161  325:invokevirtual   #2189 <Method int MotionEvent.findPointerIndex(int)>
	//* 162  328:istore_3        
	//* 163  329:iload_3         
	//* 164  330:ifge            370
	//* 165  333:ldc1            #168 <String "RecyclerView">
	//* 166  335:new             #796 <Class StringBuilder>
	//* 167  338:dup             
	//* 168  339:invokespecial   #797 <Method void StringBuilder()>
	//* 169  342:ldc2            #2191 <String "Error processing scroll; pointer index for id ">
	//* 170  345:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//* 171  348:aload_0         
	//* 172  349:getfield        #413 <Field int mScrollPointerId>
	//* 173  352:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//* 174  355:ldc2            #2193 <String " not found. Did any MotionEvents get skipped?">
	//* 175  358:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//* 176  361:invokevirtual   #809 <Method String StringBuilder.toString()>
	//* 177  364:invokestatic    #1239 <Method int Log.e(String, String)>
	//* 178  367:pop             
	//* 179  368:iconst_0        
	//* 180  369:ireturn         
	//* 181  370:aload_1         
	//* 182  371:iload_3         
	//* 183  372:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//* 184  375:ldc2            #1283 <Float 0.5F>
	//* 185  378:fadd            
	//* 186  379:f2i             
	//* 187  380:istore_2        
	//* 188  381:aload_1         
	//* 189  382:iload_3         
	//* 190  383:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//* 191  386:ldc2            #1283 <Float 0.5F>
	//* 192  389:fadd            
	//* 193  390:f2i             
	//* 194  391:istore          4
	//* 195  393:aload_0         
	//* 196  394:getfield        #411 <Field int mScrollState>
	//* 197  397:iconst_1        
	//* 198  398:icmpeq          124
	//* 199  401:aload_0         
	//* 200  402:getfield        #1287 <Field int mInitialTouchX>
	//* 201  405:istore_3        
	//* 202  406:aload_0         
	//* 203  407:getfield        #1294 <Field int mInitialTouchY>
	//* 204  410:istore          5
	//* 205  412:iload           6
	//* 206  414:ifeq            517
	//* 207  417:iload_2         
	//* 208  418:iload_3         
	//* 209  419:isub            
	//* 210  420:invokestatic    #1848 <Method int Math.abs(int)>
	//* 211  423:aload_0         
	//* 212  424:getfield        #490 <Field int mTouchSlop>
	//* 213  427:icmple          517
	//* 214  430:aload_0         
	//* 215  431:iload_2         
	//* 216  432:putfield        #1285 <Field int mLastTouchX>
	//* 217  435:iconst_1        
	//* 218  436:istore_2        
	//* 219  437:iload_2         
	//* 220  438:istore_3        
	//* 221  439:iload           7
	//* 222  441:ifeq            469
	//* 223  444:iload_2         
	//* 224  445:istore_3        
	//* 225  446:iload           4
	//* 226  448:iload           5
	//* 227  450:isub            
	//* 228  451:invokestatic    #1848 <Method int Math.abs(int)>
	//* 229  454:aload_0         
	//* 230  455:getfield        #490 <Field int mTouchSlop>
	//* 231  458:icmple          469
	//* 232  461:aload_0         
	//* 233  462:iload           4
	//* 234  464:putfield        #1292 <Field int mLastTouchY>
	//* 235  467:iconst_1        
	//* 236  468:istore_3        
	//* 237  469:iload_3         
	//* 238  470:ifeq            124
	//* 239  473:aload_0         
	//* 240  474:iconst_1        
	//* 241  475:invokevirtual   #708 <Method void setScrollState(int)>
	//* 242  478:goto            124
	//* 243  481:aload_0         
	//* 244  482:aload_1         
	//* 245  483:invokespecial   #2195 <Method void onPointerUp(MotionEvent)>
	//* 246  486:goto            124
	//* 247  489:aload_0         
	//* 248  490:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 249  493:invokevirtual   #1403 <Method void VelocityTracker.clear()>
	//* 250  496:aload_0         
	//* 251  497:iconst_0        
	//* 252  498:invokevirtual   #1406 <Method void stopNestedScroll(int)>
	//* 253  501:goto            124
	//* 254  504:aload_0         
	//* 255  505:invokespecial   #2165 <Method void cancelTouch()>
	//* 256  508:goto            124
			flag1 = false;
	//  257  511:iconst_0        
	//  258  512:istore          6
		return flag1;
_L5:
		if(mIgnoreMotionEventTillDown)
			mIgnoreMotionEventTillDown = false;
		mScrollPointerId = motionevent.getPointerId(0);
		i = (int)(motionevent.getX() + 0.5F);
		mLastTouchX = i;
		mInitialTouchX = i;
		i = (int)(motionevent.getY() + 0.5F);
		mLastTouchY = i;
		mInitialTouchY = i;
		if(mScrollState == 2)
		{
			getParent().requestDisallowInterceptTouchEvent(true);
			setScrollState(1);
		}
		motionevent = ((MotionEvent) (mNestedOffsets));
		mNestedOffsets[1] = 0;
		motionevent[0] = 0;
		if(flag1)
			i = 1;
		else
	//* 259  514:goto            135
	//* 260  517:iconst_0        
	//* 261  518:istore_2        
	//* 262  519:goto            437
			i = 0;
	//  263  522:iconst_0        
	//  264  523:istore_2        
		k = i;
		if(flag2)
			k = i | 2;
		startNestedScroll(k, 0);
		  goto _L11
_L9:
		mScrollPointerId = motionevent.getPointerId(i);
		k = (int)(motionevent.getX(i) + 0.5F);
		mLastTouchX = k;
		mInitialTouchX = k;
		i = (int)(motionevent.getY(i) + 0.5F);
		mLastTouchY = i;
		mInitialTouchY = i;
		  goto _L11
_L7:
		k = motionevent.findPointerIndex(mScrollPointerId);
		if(k < 0)
		{
			Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
			return false;
		}
		i = (int)(motionevent.getX(k) + 0.5F);
		l = (int)(motionevent.getY(k) + 0.5F);
		if(mScrollState != 1)
		{
			k = mInitialTouchX;
			i1 = mInitialTouchY;
			if(flag1 && Math.abs(i - k) > mTouchSlop)
			{
				mLastTouchX = i;
				i = 1;
			} else
			{
				i = 0;
			}
			flag = ((boolean) (i));
			if(flag2)
			{
				flag = ((boolean) (i));
				if(Math.abs(l - i1) > mTouchSlop)
				{
					mLastTouchY = l;
					flag = true;
				}
			}
			if(flag)
				setScrollState(1);
		}
		  goto _L11
_L10:
		onPointerUp(motionevent);
		  goto _L11
_L6:
		mVelocityTracker.clear();
		stopNestedScroll(0);
		  goto _L11
		cancelTouch();
		  goto _L11
	//* 265  524:goto            245
	}

	protected void onLayout(boolean flag, int i, int j, int k, int l)
	{
		TraceCompat.beginSection("RV OnLayout");
	//    0    0:ldc1            #188 <String "RV OnLayout">
	//    1    2:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
		dispatchLayout();
	//    2    5:aload_0         
	//    3    6:invokevirtual   #1590 <Method void dispatchLayout()>
		TraceCompat.endSection();
	//    4    9:invokestatic    #1593 <Method void TraceCompat.endSection()>
		mFirstLayoutComplete = true;
	//    5   12:aload_0         
	//    6   13:iconst_1        
	//    7   14:putfield        #1311 <Field boolean mFirstLayoutComplete>
	//    8   17:return          
	}

	protected void onMeasure(int i, int j)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		if(mLayout != null) goto _L2; else goto _L1
	//    2    3:aload_0         
	//    3    4:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    4    7:ifnonnull       17
_L1:
		defaultOnMeasure(i, j);
	//    5   10:aload_0         
	//    6   11:iload_1         
	//    7   12:iload_2         
	//    8   13:invokevirtual   #2200 <Method void defaultOnMeasure(int, int)>
_L4:
		return;
	//    9   16:return          
_L2:
		if(!mLayout.mAutoMeasure)
			break; /* Loop/switch isn't completed */
	//   10   17:aload_0         
	//   11   18:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   12   21:getfield        #2203 <Field boolean RecyclerView$LayoutManager.mAutoMeasure>
	//   13   24:ifeq            195
		int k = android.view.View.MeasureSpec.getMode(i);
	//   14   27:iload_1         
	//   15   28:invokestatic    #2208 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   16   31:istore          5
		int l = android.view.View.MeasureSpec.getMode(j);
	//   17   33:iload_2         
	//   18   34:invokestatic    #2208 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   19   37:istore          6
		boolean flag = flag1;
	//   20   39:iload           4
	//   21   41:istore_3        
		if(k == 0x40000000)
	//*  22   42:iload           5
	//*  23   44:ldc2            #2209 <Int 0x40000000>
	//*  24   47:icmpne          63
		{
			flag = flag1;
	//   25   50:iload           4
	//   26   52:istore_3        
			if(l == 0x40000000)
	//*  27   53:iload           6
	//*  28   55:ldc2            #2209 <Int 0x40000000>
	//*  29   58:icmpne          63
				flag = true;
	//   30   61:iconst_1        
	//   31   62:istore_3        
		}
		mLayout.onMeasure(mRecycler, mState, i, j);
	//   32   63:aload_0         
	//   33   64:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   34   67:aload_0         
	//   35   68:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   36   71:aload_0         
	//   37   72:getfield        #431 <Field RecyclerView$State mState>
	//   38   75:iload_1         
	//   39   76:iload_2         
	//   40   77:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
		if(!flag && mAdapter != null)
	//*  41   80:iload_3         
	//*  42   81:ifne            16
	//*  43   84:aload_0         
	//*  44   85:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  45   88:ifnull          16
		{
			if(mState.mLayoutStep == 1)
	//*  46   91:aload_0         
	//*  47   92:getfield        #431 <Field RecyclerView$State mState>
	//*  48   95:getfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  49   98:iconst_1        
	//*  50   99:icmpne          106
				dispatchLayoutStep1();
	//   51  102:aload_0         
	//   52  103:invokespecial   #1657 <Method void dispatchLayoutStep1()>
			mLayout.setMeasureSpecs(i, j);
	//   53  106:aload_0         
	//   54  107:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   55  110:iload_1         
	//   56  111:iload_2         
	//   57  112:invokevirtual   #2215 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
			mState.mIsMeasuring = true;
	//   58  115:aload_0         
	//   59  116:getfield        #431 <Field RecyclerView$State mState>
	//   60  119:iconst_1        
	//   61  120:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
			dispatchLayoutStep2();
	//   62  123:aload_0         
	//   63  124:invokespecial   #1662 <Method void dispatchLayoutStep2()>
			mLayout.setMeasuredDimensionFromChildren(i, j);
	//   64  127:aload_0         
	//   65  128:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   66  131:iload_1         
	//   67  132:iload_2         
	//   68  133:invokevirtual   #2218 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
			if(mLayout.shouldMeasureTwice())
	//*  69  136:aload_0         
	//*  70  137:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  71  140:invokevirtual   #2221 <Method boolean RecyclerView$LayoutManager.shouldMeasureTwice()>
	//*  72  143:ifeq            16
			{
				mLayout.setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000));
	//   73  146:aload_0         
	//   74  147:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   75  150:aload_0         
	//   76  151:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   77  154:ldc2            #2209 <Int 0x40000000>
	//   78  157:invokestatic    #2224 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   79  160:aload_0         
	//   80  161:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   81  164:ldc2            #2209 <Int 0x40000000>
	//   82  167:invokestatic    #2224 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   83  170:invokevirtual   #2215 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
				mState.mIsMeasuring = true;
	//   84  173:aload_0         
	//   85  174:getfield        #431 <Field RecyclerView$State mState>
	//   86  177:iconst_1        
	//   87  178:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
				dispatchLayoutStep2();
	//   88  181:aload_0         
	//   89  182:invokespecial   #1662 <Method void dispatchLayoutStep2()>
				mLayout.setMeasuredDimensionFromChildren(i, j);
	//   90  185:aload_0         
	//   91  186:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   92  189:iload_1         
	//   93  190:iload_2         
	//   94  191:invokevirtual   #2218 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
				return;
	//   95  194:return          
			}
		}
		if(true) goto _L4; else goto _L3
_L3:
		if(mHasFixedSize)
	//*  96  195:aload_0         
	//*  97  196:getfield        #1983 <Field boolean mHasFixedSize>
	//*  98  199:ifeq            220
		{
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   99  202:aload_0         
	//  100  203:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  101  206:aload_0         
	//  102  207:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  103  210:aload_0         
	//  104  211:getfield        #431 <Field RecyclerView$State mState>
	//  105  214:iload_1         
	//  106  215:iload_2         
	//  107  216:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			return;
	//  108  219:return          
		}
		if(mAdapterUpdateDuringMeasure)
	//* 109  220:aload_0         
	//* 110  221:getfield        #2226 <Field boolean mAdapterUpdateDuringMeasure>
	//* 111  224:ifeq            345
		{
			eatRequestLayout();
	//  112  227:aload_0         
	//  113  228:invokevirtual   #865 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//  114  231:aload_0         
	//  115  232:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
			processAdapterUpdatesAndSetAnimationFlags();
	//  116  235:aload_0         
	//  117  236:invokespecial   #874 <Method void processAdapterUpdatesAndSetAnimationFlags()>
			onExitLayoutOrScroll();
	//  118  239:aload_0         
	//  119  240:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
			if(mState.mRunPredictiveAnimations)
	//* 120  243:aload_0         
	//* 121  244:getfield        #431 <Field RecyclerView$State mState>
	//* 122  247:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 123  250:ifeq            327
			{
				mState.mInPreLayout = true;
	//  124  253:aload_0         
	//  125  254:getfield        #431 <Field RecyclerView$State mState>
	//  126  257:iconst_1        
	//  127  258:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
			} else
	//* 128  261:aload_0         
	//* 129  262:iconst_0        
	//* 130  263:putfield        #2226 <Field boolean mAdapterUpdateDuringMeasure>
	//* 131  266:aload_0         
	//* 132  267:iconst_0        
	//* 133  268:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 134  271:aload_0         
	//* 135  272:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//* 136  275:ifnull          368
	//* 137  278:aload_0         
	//* 138  279:getfield        #431 <Field RecyclerView$State mState>
	//* 139  282:aload_0         
	//* 140  283:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//* 141  286:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//* 142  289:putfield        #897 <Field int RecyclerView$State.mItemCount>
	//* 143  292:aload_0         
	//* 144  293:invokevirtual   #865 <Method void eatRequestLayout()>
	//* 145  296:aload_0         
	//* 146  297:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 147  300:aload_0         
	//* 148  301:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 149  304:aload_0         
	//* 150  305:getfield        #431 <Field RecyclerView$State mState>
	//* 151  308:iload_1         
	//* 152  309:iload_2         
	//* 153  310:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
	//* 154  313:aload_0         
	//* 155  314:iconst_0        
	//* 156  315:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 157  318:aload_0         
	//* 158  319:getfield        #431 <Field RecyclerView$State mState>
	//* 159  322:iconst_0        
	//* 160  323:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
	//* 161  326:return          
			{
				mAdapterHelper.consumeUpdatesInOnePass();
	//  162  327:aload_0         
	//  163  328:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//  164  331:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
				mState.mInPreLayout = false;
	//  165  334:aload_0         
	//  166  335:getfield        #431 <Field RecyclerView$State mState>
	//  167  338:iconst_0        
	//  168  339:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
			}
			mAdapterUpdateDuringMeasure = false;
			resumeRequestLayout(false);
		} else
	//* 169  342:goto            261
		if(mState.mRunPredictiveAnimations)
	//* 170  345:aload_0         
	//* 171  346:getfield        #431 <Field RecyclerView$State mState>
	//* 172  349:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 173  352:ifeq            271
		{
			setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());
	//  174  355:aload_0         
	//  175  356:aload_0         
	//  176  357:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//  177  360:aload_0         
	//  178  361:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//  179  364:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
			return;
	//  180  367:return          
		}
		if(mAdapter != null)
			mState.mItemCount = mAdapter.getItemCount();
		else
			mState.mItemCount = 0;
	//  181  368:aload_0         
	//  182  369:getfield        #431 <Field RecyclerView$State mState>
	//  183  372:iconst_0        
	//  184  373:putfield        #897 <Field int RecyclerView$State.mItemCount>
		eatRequestLayout();
		mLayout.onMeasure(mRecycler, mState, i, j);
		resumeRequestLayout(false);
		mState.mInPreLayout = false;
		return;
	//* 185  376:goto            292
	}

	protected boolean onRequestFocusInDescendants(int i, Rect rect)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		else
			return super.onRequestFocusInDescendants(i, rect);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:aload_2         
	//    8   12:invokespecial   #2230 <Method boolean ViewGroup.onRequestFocusInDescendants(int, Rect)>
	//    9   15:ireturn         
	}

	protected void onRestoreInstanceState(Parcelable parcelable)
	{
		if(!(parcelable instanceof SavedState))
	//*   0    0:aload_1         
	//*   1    1:instanceof      #98  <Class RecyclerView$SavedState>
	//*   2    4:ifne            13
		{
			super.onRestoreInstanceState(parcelable);
	//    3    7:aload_0         
	//    4    8:aload_1         
	//    5    9:invokespecial   #2234 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
		} else
	//*   6   12:return          
		{
			mPendingSavedState = (SavedState)parcelable;
	//    7   13:aload_0         
	//    8   14:aload_1         
	//    9   15:checkcast       #98  <Class RecyclerView$SavedState>
	//   10   18:putfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
			super.onRestoreInstanceState(mPendingSavedState.getSuperState());
	//   11   21:aload_0         
	//   12   22:aload_0         
	//   13   23:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   14   26:invokevirtual   #2238 <Method Parcelable RecyclerView$SavedState.getSuperState()>
	//   15   29:invokespecial   #2234 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
			if(mLayout != null && mPendingSavedState.mLayoutState != null)
	//*  16   32:aload_0         
	//*  17   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  18   36:ifnull          12
	//*  19   39:aload_0         
	//*  20   40:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//*  21   43:getfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//*  22   46:ifnull          12
			{
				mLayout.onRestoreInstanceState(mPendingSavedState.mLayoutState);
	//   23   49:aload_0         
	//   24   50:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   25   53:aload_0         
	//   26   54:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   27   57:getfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//   28   60:invokevirtual   #2243 <Method void RecyclerView$LayoutManager.onRestoreInstanceState(Parcelable)>
				return;
	//   29   63:return          
			}
		}
	}

	protected Parcelable onSaveInstanceState()
	{
		SavedState savedstate = new SavedState(super.onSaveInstanceState());
	//    0    0:new             #98  <Class RecyclerView$SavedState>
	//    1    3:dup             
	//    2    4:aload_0         
	//    3    5:invokespecial   #2246 <Method Parcelable ViewGroup.onSaveInstanceState()>
	//    4    8:invokespecial   #2248 <Method void RecyclerView$SavedState(Parcelable)>
	//    5   11:astore_1        
		if(mPendingSavedState != null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//*   8   16:ifnull          29
		{
			savedstate.copyFrom(mPendingSavedState);
	//    9   19:aload_1         
	//   10   20:aload_0         
	//   11   21:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   12   24:invokevirtual   #2252 <Method void RecyclerView$SavedState.copyFrom(RecyclerView$SavedState)>
			return ((Parcelable) (savedstate));
	//   13   27:aload_1         
	//   14   28:areturn         
		}
		if(mLayout != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  17   33:ifnull          49
		{
			savedstate.mLayoutState = mLayout.onSaveInstanceState();
	//   18   36:aload_1         
	//   19   37:aload_0         
	//   20   38:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   21   41:invokevirtual   #2253 <Method Parcelable RecyclerView$LayoutManager.onSaveInstanceState()>
	//   22   44:putfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   23   47:aload_1         
	//   24   48:areturn         
		} else
		{
			savedstate.mLayoutState = null;
	//   25   49:aload_1         
	//   26   50:aconst_null     
	//   27   51:putfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   28   54:aload_1         
	//   29   55:areturn         
		}
	}

	public void onScrollStateChanged(int i)
	{
	//    0    0:return          
	}

	public void onScrolled(int i, int j)
	{
	//    0    0:return          
	}

	protected void onSizeChanged(int i, int j, int k, int l)
	{
		super.onSizeChanged(i, j, k, l);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:iload_3         
	//    4    4:iload           4
	//    5    6:invokespecial   #2256 <Method void ViewGroup.onSizeChanged(int, int, int, int)>
		if(i != k || j != l)
	//*   6    9:iload_1         
	//*   7   10:iload_3         
	//*   8   11:icmpne          20
	//*   9   14:iload_2         
	//*  10   15:iload           4
	//*  11   17:icmpeq          24
			invalidateGlows();
	//   12   20:aload_0         
	//   13   21:invokevirtual   #2258 <Method void invalidateGlows()>
	//   14   24:return          
	}

	public boolean onTouchEvent(MotionEvent motionevent)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          10
		if(!mLayoutFrozen && !mIgnoreMotionEventTillDown) goto _L2; else goto _L1
	//    2    3:aload_0         
	//    3    4:getfield        #1769 <Field boolean mLayoutFrozen>
	//    4    7:ifne            17
	//    5   10:aload_0         
	//    6   11:getfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//    7   14:ifeq            19
_L1:
		return false;
	//    8   17:iconst_0        
	//    9   18:ireturn         
_L2:
		if(dispatchOnItemTouch(motionevent))
	//*  10   19:aload_0         
	//*  11   20:aload_1         
	//*  12   21:invokespecial   #2260 <Method boolean dispatchOnItemTouch(MotionEvent)>
	//*  13   24:ifeq            33
		{
			cancelTouch();
	//   14   27:aload_0         
	//   15   28:invokespecial   #2165 <Method void cancelTouch()>
			return true;
	//   16   31:iconst_1        
	//   17   32:ireturn         
		}
		if(mLayout == null) goto _L1; else goto _L3
	//   18   33:aload_0         
	//   19   34:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   20   37:ifnull          17
_L3:
		int i;
		int j;
		int k;
		boolean flag1;
		boolean flag2;
		MotionEvent motionevent1;
		flag1 = mLayout.canScrollHorizontally();
	//   21   40:aload_0         
	//   22   41:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   23   44:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   24   47:istore          13
		flag2 = mLayout.canScrollVertically();
	//   25   49:aload_0         
	//   26   50:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   27   53:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   28   56:istore          14
		if(mVelocityTracker == null)
	//*  29   58:aload_0         
	//*  30   59:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*  31   62:ifnonnull       72
			mVelocityTracker = VelocityTracker.obtain();
	//   32   65:aload_0         
	//   33   66:invokestatic    #2168 <Method VelocityTracker VelocityTracker.obtain()>
	//   34   69:putfield        #1400 <Field VelocityTracker mVelocityTracker>
		motionevent1 = MotionEvent.obtain(motionevent);
	//   35   72:aload_1         
	//   36   73:invokestatic    #2263 <Method MotionEvent MotionEvent.obtain(MotionEvent)>
	//   37   76:astore          15
		k = motionevent.getActionMasked();
	//   38   78:aload_1         
	//   39   79:invokevirtual   #2174 <Method int MotionEvent.getActionMasked()>
	//   40   82:istore          6
		j = motionevent.getActionIndex();
	//   41   84:aload_1         
	//   42   85:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//   43   88:istore          5
		if(k == 0)
	//*  44   90:iload           6
	//*  45   92:ifne            113
		{
			int ai[] = mNestedOffsets;
	//   46   95:aload_0         
	//   47   96:getfield        #448 <Field int[] mNestedOffsets>
	//   48   99:astore          16
			mNestedOffsets[1] = 0;
	//   49  101:aload_0         
	//   50  102:getfield        #448 <Field int[] mNestedOffsets>
	//   51  105:iconst_1        
	//   52  106:iconst_0        
	//   53  107:iastore         
			ai[0] = 0;
	//   54  108:aload           16
	//   55  110:iconst_0        
	//   56  111:iconst_0        
	//   57  112:iastore         
		}
		motionevent1.offsetLocation(mNestedOffsets[0], mNestedOffsets[1]);
	//   58  113:aload           15
	//   59  115:aload_0         
	//   60  116:getfield        #448 <Field int[] mNestedOffsets>
	//   61  119:iconst_0        
	//   62  120:iaload          
	//   63  121:i2f             
	//   64  122:aload_0         
	//   65  123:getfield        #448 <Field int[] mNestedOffsets>
	//   66  126:iconst_1        
	//   67  127:iaload          
	//   68  128:i2f             
	//   69  129:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
		i = ((int) (flag));
	//   70  132:iload           10
	//   71  134:istore          4
		k;
	//   72  136:iload           6
		JVM INSTR tableswitch 0 6: default 180
	//	               0 205
	//	               1 867
	//	               2 365
	//	               3 975
	//	               4 184
	//	               5 298
	//	               6 855;
	//   73  138:tableswitch     0 6: default 180
	//	               0 205
	//	               1 867
	//	               2 365
	//	               3 975
	//	               4 184
	//	               5 298
	//	               6 855
		   goto _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11
_L9:
		break; /* Loop/switch isn't completed */
_L4:
		i = ((int) (flag));
	//   74  180:iload           10
	//   75  182:istore          4
_L13:
		if(i == 0)
	//*  76  184:iload           4
	//*  77  186:ifne            198
			mVelocityTracker.addMovement(motionevent1);
	//   78  189:aload_0         
	//   79  190:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//   80  193:aload           15
	//   81  195:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
		motionevent1.recycle();
	//   82  198:aload           15
	//   83  200:invokevirtual   #2267 <Method void MotionEvent.recycle()>
		return true;
	//   84  203:iconst_1        
	//   85  204:ireturn         
_L5:
		mScrollPointerId = motionevent.getPointerId(0);
	//   86  205:aload_0         
	//   87  206:aload_1         
	//   88  207:iconst_0        
	//   89  208:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//   90  211:putfield        #413 <Field int mScrollPointerId>
		i = (int)(motionevent.getX() + 0.5F);
	//   91  214:aload_1         
	//   92  215:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//   93  218:ldc2            #1283 <Float 0.5F>
	//   94  221:fadd            
	//   95  222:f2i             
	//   96  223:istore          4
		mLastTouchX = i;
	//   97  225:aload_0         
	//   98  226:iload           4
	//   99  228:putfield        #1285 <Field int mLastTouchX>
		mInitialTouchX = i;
	//  100  231:aload_0         
	//  101  232:iload           4
	//  102  234:putfield        #1287 <Field int mInitialTouchX>
		i = (int)(motionevent.getY() + 0.5F);
	//  103  237:aload_1         
	//  104  238:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//  105  241:ldc2            #1283 <Float 0.5F>
	//  106  244:fadd            
	//  107  245:f2i             
	//  108  246:istore          4
		mLastTouchY = i;
	//  109  248:aload_0         
	//  110  249:iload           4
	//  111  251:putfield        #1292 <Field int mLastTouchY>
		mInitialTouchY = i;
	//  112  254:aload_0         
	//  113  255:iload           4
	//  114  257:putfield        #1294 <Field int mInitialTouchY>
		float f;
		float f1;
		int l;
		int i1;
		int j1;
		int k1;
		int l1;
		int i2;
		if(flag1)
	//* 115  260:iload           13
	//* 116  262:ifeq            992
			i = 1;
	//  117  265:iconst_1        
	//  118  266:istore          4
		else
	//* 119  268:iload           4
	//* 120  270:istore          5
	//* 121  272:iload           14
	//* 122  274:ifeq            283
	//* 123  277:iload           4
	//* 124  279:iconst_2        
	//* 125  280:ior             
	//* 126  281:istore          5
	//* 127  283:aload_0         
	//* 128  284:iload           5
	//* 129  286:iconst_0        
	//* 130  287:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//* 131  290:pop             
	//* 132  291:iload           10
	//* 133  293:istore          4
	//* 134  295:goto            184
	//* 135  298:aload_0         
	//* 136  299:aload_1         
	//* 137  300:iload           5
	//* 138  302:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//* 139  305:putfield        #413 <Field int mScrollPointerId>
	//* 140  308:aload_1         
	//* 141  309:iload           5
	//* 142  311:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//* 143  314:ldc2            #1283 <Float 0.5F>
	//* 144  317:fadd            
	//* 145  318:f2i             
	//* 146  319:istore          4
	//* 147  321:aload_0         
	//* 148  322:iload           4
	//* 149  324:putfield        #1285 <Field int mLastTouchX>
	//* 150  327:aload_0         
	//* 151  328:iload           4
	//* 152  330:putfield        #1287 <Field int mInitialTouchX>
	//* 153  333:aload_1         
	//* 154  334:iload           5
	//* 155  336:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//* 156  339:ldc2            #1283 <Float 0.5F>
	//* 157  342:fadd            
	//* 158  343:f2i             
	//* 159  344:istore          4
	//* 160  346:aload_0         
	//* 161  347:iload           4
	//* 162  349:putfield        #1292 <Field int mLastTouchY>
	//* 163  352:aload_0         
	//* 164  353:iload           4
	//* 165  355:putfield        #1294 <Field int mInitialTouchY>
	//* 166  358:iload           10
	//* 167  360:istore          4
	//* 168  362:goto            184
	//* 169  365:aload_1         
	//* 170  366:aload_0         
	//* 171  367:getfield        #413 <Field int mScrollPointerId>
	//* 172  370:invokevirtual   #2189 <Method int MotionEvent.findPointerIndex(int)>
	//* 173  373:istore          4
	//* 174  375:iload           4
	//* 175  377:ifge            417
	//* 176  380:ldc1            #168 <String "RecyclerView">
	//* 177  382:new             #796 <Class StringBuilder>
	//* 178  385:dup             
	//* 179  386:invokespecial   #797 <Method void StringBuilder()>
	//* 180  389:ldc2            #2191 <String "Error processing scroll; pointer index for id ">
	//* 181  392:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//* 182  395:aload_0         
	//* 183  396:getfield        #413 <Field int mScrollPointerId>
	//* 184  399:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//* 185  402:ldc2            #2193 <String " not found. Did any MotionEvents get skipped?">
	//* 186  405:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//* 187  408:invokevirtual   #809 <Method String StringBuilder.toString()>
	//* 188  411:invokestatic    #1239 <Method int Log.e(String, String)>
	//* 189  414:pop             
	//* 190  415:iconst_0        
	//* 191  416:ireturn         
	//* 192  417:aload_1         
	//* 193  418:iload           4
	//* 194  420:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//* 195  423:ldc2            #1283 <Float 0.5F>
	//* 196  426:fadd            
	//* 197  427:f2i             
	//* 198  428:istore          11
	//* 199  430:aload_1         
	//* 200  431:iload           4
	//* 201  433:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//* 202  436:ldc2            #1283 <Float 0.5F>
	//* 203  439:fadd            
	//* 204  440:f2i             
	//* 205  441:istore          12
	//* 206  443:aload_0         
	//* 207  444:getfield        #1285 <Field int mLastTouchX>
	//* 208  447:iload           11
	//* 209  449:isub            
	//* 210  450:istore          7
	//* 211  452:aload_0         
	//* 212  453:getfield        #1292 <Field int mLastTouchY>
	//* 213  456:iload           12
	//* 214  458:isub            
	//* 215  459:istore          6
	//* 216  461:iload           7
	//* 217  463:istore          5
	//* 218  465:iload           6
	//* 219  467:istore          4
	//* 220  469:aload_0         
	//* 221  470:iload           7
	//* 222  472:iload           6
	//* 223  474:aload_0         
	//* 224  475:getfield        #446 <Field int[] mScrollConsumed>
	//* 225  478:aload_0         
	//* 226  479:getfield        #444 <Field int[] mScrollOffset>
	//* 227  482:iconst_0        
	//* 228  483:invokevirtual   #2268 <Method boolean dispatchNestedPreScroll(int, int, int[], int[], int)>
	//* 229  486:ifeq            566
	//* 230  489:iload           7
	//* 231  491:aload_0         
	//* 232  492:getfield        #446 <Field int[] mScrollConsumed>
	//* 233  495:iconst_0        
	//* 234  496:iaload          
	//* 235  497:isub            
	//* 236  498:istore          5
	//* 237  500:iload           6
	//* 238  502:aload_0         
	//* 239  503:getfield        #446 <Field int[] mScrollConsumed>
	//* 240  506:iconst_1        
	//* 241  507:iaload          
	//* 242  508:isub            
	//* 243  509:istore          4
	//* 244  511:aload           15
	//* 245  513:aload_0         
	//* 246  514:getfield        #444 <Field int[] mScrollOffset>
	//* 247  517:iconst_0        
	//* 248  518:iaload          
	//* 249  519:i2f             
	//* 250  520:aload_0         
	//* 251  521:getfield        #444 <Field int[] mScrollOffset>
	//* 252  524:iconst_1        
	//* 253  525:iaload          
	//* 254  526:i2f             
	//* 255  527:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
	//* 256  530:aload_0         
	//* 257  531:getfield        #448 <Field int[] mNestedOffsets>
	//* 258  534:astore_1        
	//* 259  535:aload_1         
	//* 260  536:iconst_0        
	//* 261  537:aload_1         
	//* 262  538:iconst_0        
	//* 263  539:iaload          
	//* 264  540:aload_0         
	//* 265  541:getfield        #444 <Field int[] mScrollOffset>
	//* 266  544:iconst_0        
	//* 267  545:iaload          
	//* 268  546:iadd            
	//* 269  547:iastore         
	//* 270  548:aload_0         
	//* 271  549:getfield        #448 <Field int[] mNestedOffsets>
	//* 272  552:astore_1        
	//* 273  553:aload_1         
	//* 274  554:iconst_1        
	//* 275  555:aload_1         
	//* 276  556:iconst_1        
	//* 277  557:iaload          
	//* 278  558:aload_0         
	//* 279  559:getfield        #444 <Field int[] mScrollOffset>
	//* 280  562:iconst_1        
	//* 281  563:iaload          
	//* 282  564:iadd            
	//* 283  565:iastore         
	//* 284  566:iload           5
	//* 285  568:istore          6
	//* 286  570:iload           4
	//* 287  572:istore          7
	//* 288  574:aload_0         
	//* 289  575:getfield        #411 <Field int mScrollState>
	//* 290  578:iconst_1        
	//* 291  579:icmpeq          696
	//* 292  582:iload           13
	//* 293  584:ifeq            986
	//* 294  587:iload           5
	//* 295  589:invokestatic    #1848 <Method int Math.abs(int)>
	//* 296  592:aload_0         
	//* 297  593:getfield        #490 <Field int mTouchSlop>
	//* 298  596:icmple          986
	//* 299  599:iload           5
	//* 300  601:ifle            819
	//* 301  604:iload           5
	//* 302  606:aload_0         
	//* 303  607:getfield        #490 <Field int mTouchSlop>
	//* 304  610:isub            
	//* 305  611:istore          5
	//* 306  613:iconst_1        
	//* 307  614:istore          6
	//* 308  616:iload           6
	//* 309  618:istore          9
	//* 310  620:iload           4
	//* 311  622:istore          8
	//* 312  624:iload           14
	//* 313  626:ifeq            670
	//* 314  629:iload           6
	//* 315  631:istore          9
	//* 316  633:iload           4
	//* 317  635:istore          8
	//* 318  637:iload           4
	//* 319  639:invokestatic    #1848 <Method int Math.abs(int)>
	//* 320  642:aload_0         
	//* 321  643:getfield        #490 <Field int mTouchSlop>
	//* 322  646:icmple          670
	//* 323  649:iload           4
	//* 324  651:ifle            831
	//* 325  654:iload           4
	//* 326  656:aload_0         
	//* 327  657:getfield        #490 <Field int mTouchSlop>
	//* 328  660:isub            
	//* 329  661:istore          4
	//* 330  663:iconst_1        
	//* 331  664:istore          9
	//* 332  666:iload           4
	//* 333  668:istore          8
	//* 334  670:iload           5
	//* 335  672:istore          6
	//* 336  674:iload           8
	//* 337  676:istore          7
	//* 338  678:iload           9
	//* 339  680:ifeq            696
	//* 340  683:aload_0         
	//* 341  684:iconst_1        
	//* 342  685:invokevirtual   #708 <Method void setScrollState(int)>
	//* 343  688:iload           8
	//* 344  690:istore          7
	//* 345  692:iload           5
	//* 346  694:istore          6
	//* 347  696:iload           10
	//* 348  698:istore          4
	//* 349  700:aload_0         
	//* 350  701:getfield        #411 <Field int mScrollState>
	//* 351  704:iconst_1        
	//* 352  705:icmpne          184
	//* 353  708:aload_0         
	//* 354  709:iload           11
	//* 355  711:aload_0         
	//* 356  712:getfield        #444 <Field int[] mScrollOffset>
	//* 357  715:iconst_0        
	//* 358  716:iaload          
	//* 359  717:isub            
	//* 360  718:putfield        #1285 <Field int mLastTouchX>
	//* 361  721:aload_0         
	//* 362  722:iload           12
	//* 363  724:aload_0         
	//* 364  725:getfield        #444 <Field int[] mScrollOffset>
	//* 365  728:iconst_1        
	//* 366  729:iaload          
	//* 367  730:isub            
	//* 368  731:putfield        #1292 <Field int mLastTouchY>
	//* 369  734:iload           13
	//* 370  736:ifeq            843
	//* 371  739:iload           6
	//* 372  741:istore          4
	//* 373  743:iload           14
	//* 374  745:ifeq            849
	//* 375  748:iload           7
	//* 376  750:istore          5
	//* 377  752:aload_0         
	//* 378  753:iload           4
	//* 379  755:iload           5
	//* 380  757:aload           15
	//* 381  759:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//* 382  762:ifeq            775
	//* 383  765:aload_0         
	//* 384  766:invokevirtual   #2181 <Method ViewParent getParent()>
	//* 385  769:iconst_1        
	//* 386  770:invokeinterface #2186 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
	//* 387  775:iload           10
	//* 388  777:istore          4
	//* 389  779:aload_0         
	//* 390  780:getfield        #2094 <Field GapWorker mGapWorker>
	//* 391  783:ifnull          184
	//* 392  786:iload           6
	//* 393  788:ifne            800
	//* 394  791:iload           10
	//* 395  793:istore          4
	//* 396  795:iload           7
	//* 397  797:ifeq            184
	//* 398  800:aload_0         
	//* 399  801:getfield        #2094 <Field GapWorker mGapWorker>
	//* 400  804:aload_0         
	//* 401  805:iload           6
	//* 402  807:iload           7
	//* 403  809:invokevirtual   #2271 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
	//* 404  812:iload           10
	//* 405  814:istore          4
	//* 406  816:goto            184
	//* 407  819:aload_0         
	//* 408  820:getfield        #490 <Field int mTouchSlop>
	//* 409  823:iload           5
	//* 410  825:iadd            
	//* 411  826:istore          5
	//* 412  828:goto            613
	//* 413  831:aload_0         
	//* 414  832:getfield        #490 <Field int mTouchSlop>
	//* 415  835:iload           4
	//* 416  837:iadd            
	//* 417  838:istore          4
	//* 418  840:goto            663
	//* 419  843:iconst_0        
	//* 420  844:istore          4
	//* 421  846:goto            743
	//* 422  849:iconst_0        
	//* 423  850:istore          5
	//* 424  852:goto            752
	//* 425  855:aload_0         
	//* 426  856:aload_1         
	//* 427  857:invokespecial   #2195 <Method void onPointerUp(MotionEvent)>
	//* 428  860:iload           10
	//* 429  862:istore          4
	//* 430  864:goto            184
	//* 431  867:aload_0         
	//* 432  868:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 433  871:aload           15
	//* 434  873:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
	//* 435  876:aload_0         
	//* 436  877:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 437  880:sipush          1000
	//* 438  883:aload_0         
	//* 439  884:getfield        #509 <Field int mMaxFlingVelocity>
	//* 440  887:i2f             
	//* 441  888:invokevirtual   #2275 <Method void VelocityTracker.computeCurrentVelocity(int, float)>
	//* 442  891:iload           13
	//* 443  893:ifeq            965
	//* 444  896:aload_0         
	//* 445  897:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 446  900:aload_0         
	//* 447  901:getfield        #413 <Field int mScrollPointerId>
	//* 448  904:invokevirtual   #2278 <Method float VelocityTracker.getXVelocity(int)>
	//* 449  907:fneg            
	//* 450  908:fstore_2        
	//* 451  909:iload           14
	//* 452  911:ifeq            970
	//* 453  914:aload_0         
	//* 454  915:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 455  918:aload_0         
	//* 456  919:getfield        #413 <Field int mScrollPointerId>
	//* 457  922:invokevirtual   #2281 <Method float VelocityTracker.getYVelocity(int)>
	//* 458  925:fneg            
	//* 459  926:fstore_3        
	//* 460  927:fload_2         
	//* 461  928:fconst_0        
	//* 462  929:fcmpl           
	//* 463  930:ifne            939
	//* 464  933:fload_3         
	//* 465  934:fconst_0        
	//* 466  935:fcmpl           
	//* 467  936:ifeq            950
	//* 468  939:aload_0         
	//* 469  940:fload_2         
	//* 470  941:f2i             
	//* 471  942:fload_3         
	//* 472  943:f2i             
	//* 473  944:invokevirtual   #2283 <Method boolean fling(int, int)>
	//* 474  947:ifne            955
	//* 475  950:aload_0         
	//* 476  951:iconst_0        
	//* 477  952:invokevirtual   #708 <Method void setScrollState(int)>
	//* 478  955:aload_0         
	//* 479  956:invokespecial   #705 <Method void resetTouch()>
	//* 480  959:iconst_1        
	//* 481  960:istore          4
	//* 482  962:goto            184
	//* 483  965:fconst_0        
	//* 484  966:fstore_2        
	//* 485  967:goto            909
	//* 486  970:fconst_0        
	//* 487  971:fstore_3        
	//* 488  972:goto            927
	//* 489  975:aload_0         
	//* 490  976:invokespecial   #2165 <Method void cancelTouch()>
	//* 491  979:iload           10
	//* 492  981:istore          4
	//* 493  983:goto            184
	//* 494  986:iconst_0        
	//* 495  987:istore          6
	//* 496  989:goto            616
			i = 0;
	//  497  992:iconst_0        
	//  498  993:istore          4
		j = i;
		if(flag2)
			j = i | 2;
		startNestedScroll(j, 0);
		i = ((int) (flag));
		continue; /* Loop/switch isn't completed */
	//  499  995:goto            268
_L10:
		mScrollPointerId = motionevent.getPointerId(j);
		i = (int)(motionevent.getX(j) + 0.5F);
		mLastTouchX = i;
		mInitialTouchX = i;
		i = (int)(motionevent.getY(j) + 0.5F);
		mLastTouchY = i;
		mInitialTouchY = i;
		i = ((int) (flag));
		continue; /* Loop/switch isn't completed */
_L7:
		i = motionevent.findPointerIndex(mScrollPointerId);
		if(i < 0)
		{
			Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
			return false;
		}
		l1 = (int)(motionevent.getX(i) + 0.5F);
		i2 = (int)(motionevent.getY(i) + 0.5F);
		i1 = mLastTouchX - l1;
		l = mLastTouchY - i2;
		j = i1;
		i = l;
		if(dispatchNestedPreScroll(i1, l, mScrollConsumed, mScrollOffset, 0))
		{
			j = i1 - mScrollConsumed[0];
			i = l - mScrollConsumed[1];
			motionevent1.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
			motionevent = ((MotionEvent) (mNestedOffsets));
			motionevent[0] = motionevent[0] + mScrollOffset[0];
			motionevent = ((MotionEvent) (mNestedOffsets));
			motionevent[1] = motionevent[1] + mScrollOffset[1];
		}
		l = j;
		i1 = i;
		if(mScrollState != 1)
		{
			if(flag1 && Math.abs(j) > mTouchSlop)
			{
				if(j > 0)
					j -= mTouchSlop;
				else
					j = mTouchSlop + j;
				l = 1;
			} else
			{
				l = 0;
			}
			k1 = l;
			j1 = i;
			if(flag2)
			{
				k1 = l;
				j1 = i;
				if(Math.abs(i) > mTouchSlop)
				{
					if(i > 0)
						i -= mTouchSlop;
					else
						i = mTouchSlop + i;
					k1 = 1;
					j1 = i;
				}
			}
			l = j;
			i1 = j1;
			if(k1 != 0)
			{
				setScrollState(1);
				i1 = j1;
				l = j;
			}
		}
		i = ((int) (flag));
		if(mScrollState != 1)
			continue; /* Loop/switch isn't completed */
		mLastTouchX = l1 - mScrollOffset[0];
		mLastTouchY = i2 - mScrollOffset[1];
		if(flag1)
			i = l;
		else
			i = 0;
		if(flag2)
			j = i1;
		else
			j = 0;
		if(scrollByInternal(i, j, motionevent1))
			getParent().requestDisallowInterceptTouchEvent(true);
		i = ((int) (flag));
		if(mGapWorker == null)
			continue; /* Loop/switch isn't completed */
		if(l == 0)
		{
			i = ((int) (flag));
			if(i1 == 0)
				continue; /* Loop/switch isn't completed */
		}
		mGapWorker.postFromTraversal(this, l, i1);
		i = ((int) (flag));
		continue; /* Loop/switch isn't completed */
_L11:
		onPointerUp(motionevent);
		i = ((int) (flag));
		continue; /* Loop/switch isn't completed */
_L6:
		mVelocityTracker.addMovement(motionevent1);
		mVelocityTracker.computeCurrentVelocity(1000, mMaxFlingVelocity);
		if(flag1)
			f = -mVelocityTracker.getXVelocity(mScrollPointerId);
		else
			f = 0.0F;
		if(flag2)
			f1 = -mVelocityTracker.getYVelocity(mScrollPointerId);
		else
			f1 = 0.0F;
		if(f == 0.0F && f1 == 0.0F || !fling((int)f, (int)f1))
			setScrollState(0);
		resetTouch();
		i = 1;
		continue; /* Loop/switch isn't completed */
_L8:
		cancelTouch();
		i = ((int) (flag));
		if(true) goto _L13; else goto _L12
_L12:
	}

	void postAnimationRunner()
	{
		if(!mPostedAnimatorRunner && mIsAttached)
	//*   0    0:aload_0         
	//*   1    1:getfield        #440 <Field boolean mPostedAnimatorRunner>
	//*   2    4:ifne            27
	//*   3    7:aload_0         
	//*   4    8:getfield        #2034 <Field boolean mIsAttached>
	//*   5   11:ifeq            27
		{
			ViewCompat.postOnAnimation(((View) (this)), mItemAnimatorRunner);
	//    6   14:aload_0         
	//    7   15:aload_0         
	//    8   16:getfield        #453 <Field Runnable mItemAnimatorRunner>
	//    9   19:invokestatic    #2287 <Method void ViewCompat.postOnAnimation(View, Runnable)>
			mPostedAnimatorRunner = true;
	//   10   22:aload_0         
	//   11   23:iconst_1        
	//   12   24:putfield        #440 <Field boolean mPostedAnimatorRunner>
		}
	//   13   27:return          
	}

	void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo)
	{
		viewholder.setFlags(0, 8192);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:sipush          8192
	//    3    5:invokevirtual   #2290 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore())
	//*   4    8:aload_0         
	//*   5    9:getfield        #431 <Field RecyclerView$State mState>
	//*   6   12:getfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*   7   15:ifeq            54
	//*   8   18:aload_1         
	//*   9   19:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  10   22:ifeq            54
	//*  11   25:aload_1         
	//*  12   26:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  13   29:ifne            54
	//*  14   32:aload_1         
	//*  15   33:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  16   36:ifne            54
		{
			long l = getChangedHolderKey(viewholder);
	//   17   39:aload_0         
	//   18   40:aload_1         
	//   19   41:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   20   44:lstore_3        
			mViewInfoStore.addToOldChangeHolders(l, viewholder);
	//   21   45:aload_0         
	//   22   46:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   23   49:lload_3         
	//   24   50:aload_1         
	//   25   51:invokevirtual   #946 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
		}
		mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//   26   54:aload_0         
	//   27   55:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   28   58:aload_1         
	//   29   59:aload_2         
	//   30   60:invokevirtual   #932 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//   31   63:return          
	}

	void removeAndRecycleViews()
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          14
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
		if(mLayout != null)
	//*   6   14:aload_0         
	//*   7   15:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   8   18:ifnull          43
		{
			mLayout.removeAndRecycleAllViews(mRecycler);
	//    9   21:aload_0         
	//   10   22:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   13   29:invokevirtual   #2293 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   14   32:aload_0         
	//   15   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   16   36:aload_0         
	//   17   37:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   18   40:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		}
		mRecycler.clear();
	//   19   43:aload_0         
	//   20   44:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   21   47:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
	//   22   50:return          
	}

	boolean removeAnimatingView(View view)
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #865 <Method void eatRequestLayout()>
		boolean flag1 = mChildHelper.removeViewIfHidden(view);
	//    2    4:aload_0         
	//    3    5:getfield        #663 <Field ChildHelper mChildHelper>
	//    4    8:aload_1         
	//    5    9:invokevirtual   #2298 <Method boolean ChildHelper.removeViewIfHidden(View)>
	//    6   12:istore_3        
		if(flag1)
	//*   7   13:iload_3         
	//*   8   14:ifeq            38
		{
			view = ((View) (getChildViewHolderInt(view)));
	//    9   17:aload_1         
	//   10   18:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   21:astore_1        
			mRecycler.unscrapView(((ViewHolder) (view)));
	//   12   22:aload_0         
	//   13   23:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   14   26:aload_1         
	//   15   27:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			mRecycler.recycleViewHolderInternal(((ViewHolder) (view)));
	//   16   30:aload_0         
	//   17   31:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   18   34:aload_1         
	//   19   35:invokevirtual   #2301 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
		}
		boolean flag;
		if(!flag1)
	//*  20   38:iload_3         
	//*  21   39:ifne            51
			flag = true;
	//   22   42:iconst_1        
	//   23   43:istore_2        
		else
	//*  24   44:aload_0         
	//*  25   45:iload_2         
	//*  26   46:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  27   49:iload_3         
	//*  28   50:ireturn         
			flag = false;
	//   29   51:iconst_0        
	//   30   52:istore_2        
		resumeRequestLayout(flag);
		return flag1;
	//*  31   53:goto            44
	}

	protected void removeDetachedView(View view, boolean flag)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		if(viewholder != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          20
			if(viewholder.isTmpDetached())
	//*   5    9:aload_3         
	//*   6   10:invokevirtual   #661 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*   7   13:ifeq            36
				viewholder.clearTmpDetachFlag();
	//    8   16:aload_3         
	//    9   17:invokevirtual   #2305 <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
			else
	//*  10   20:aload_1         
	//*  11   21:invokevirtual   #2308 <Method void View.clearAnimation()>
	//*  12   24:aload_0         
	//*  13   25:aload_1         
	//*  14   26:invokevirtual   #2310 <Method void dispatchChildDetached(View)>
	//*  15   29:aload_0         
	//*  16   30:aload_1         
	//*  17   31:iload_2         
	//*  18   32:invokespecial   #2312 <Method void ViewGroup.removeDetachedView(View, boolean)>
	//*  19   35:return          
			if(!viewholder.shouldIgnore())
	//*  20   36:aload_3         
	//*  21   37:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  22   40:ifne            20
				throw new IllegalArgumentException((new StringBuilder()).append("Called removeDetachedView with a view which is not flagged as tmp detached.").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   23   43:new             #1263 <Class IllegalArgumentException>
	//   24   46:dup             
	//   25   47:new             #796 <Class StringBuilder>
	//   26   50:dup             
	//   27   51:invokespecial   #797 <Method void StringBuilder()>
	//   28   54:ldc2            #2314 <String "Called removeDetachedView with a view which is not flagged as tmp detached.">
	//   29   57:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   30   60:aload_3         
	//   31   61:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   32   64:aload_0         
	//   33   65:invokevirtual   #1224 <Method String exceptionLabel()>
	//   34   68:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   35   71:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   36   74:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   37   77:athrow          
		view.clearAnimation();
		dispatchChildDetached(view);
		super.removeDetachedView(view, flag);
	}

	public void removeItemDecoration(ItemDecoration itemdecoration)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #2317 <String "Cannot remove item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		mItemDecorations.remove(((Object) (itemdecoration)));
	//    7   17:aload_0         
	//    8   18:getfield        #394 <Field ArrayList mItemDecorations>
	//    9   21:aload_1         
	//   10   22:invokevirtual   #2319 <Method boolean ArrayList.remove(Object)>
	//   11   25:pop             
		if(mItemDecorations.isEmpty())
	//*  12   26:aload_0         
	//*  13   27:getfield        #394 <Field ArrayList mItemDecorations>
	//*  14   30:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  15   33:ifeq            51
		{
			boolean flag;
			if(getOverScrollMode() == 2)
	//*  16   36:aload_0         
	//*  17   37:invokevirtual   #512 <Method int getOverScrollMode()>
	//*  18   40:iconst_2        
	//*  19   41:icmpne          60
				flag = true;
	//   20   44:iconst_1        
	//   21   45:istore_2        
			else
	//*  22   46:aload_0         
	//*  23   47:iload_2         
	//*  24   48:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
	//*  25   51:aload_0         
	//*  26   52:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
	//*  27   55:aload_0         
	//*  28   56:invokevirtual   #1493 <Method void requestLayout()>
	//*  29   59:return          
				flag = false;
	//   30   60:iconst_0        
	//   31   61:istore_2        
			setWillNotDraw(flag);
		}
		markItemDecorInsetsDirty();
		requestLayout();
	//*  32   62:goto            46
	}

	public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mOnChildAttachStateListeners.remove(((Object) (onchildattachstatechangelistener)));
	//    4    8:aload_0         
	//    5    9:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//    6   12:aload_1         
	//    7   13:invokeinterface #2321 <Method boolean List.remove(Object)>
	//    8   18:pop             
			return;
	//    9   19:return          
		}
	}

	public void removeOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.remove(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2319 <Method boolean ArrayList.remove(Object)>
	//    4    8:pop             
		if(mActiveOnItemTouchListener == onitemtouchlistener)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   7   13:aload_1         
	//*   8   14:if_acmpne       22
			mActiveOnItemTouchListener = null;
	//    9   17:aload_0         
	//   10   18:aconst_null     
	//   11   19:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   12   22:return          
	}

	public void removeOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnull          18
			mScrollListeners.remove(((Object) (onscrolllistener)));
	//    3    7:aload_0         
	//    4    8:getfield        #1509 <Field List mScrollListeners>
	//    5   11:aload_1         
	//    6   12:invokeinterface #2321 <Method boolean List.remove(Object)>
	//    7   17:pop             
	//    8   18:return          
	}

	void repositionShadowingViews()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          118
		{
			View view = mChildHelper.getChildAt(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:astore          5
			Object obj = ((Object) (getChildViewHolder(view)));
	//   14   25:aload_0         
	//   15   26:aload           5
	//   16   28:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   31:astore          6
			if(obj == null || ((ViewHolder) (obj)).mShadowingHolder == null)
				continue;
	//   18   33:aload           6
	//   19   35:ifnull          111
	//   20   38:aload           6
	//   21   40:getfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   22   43:ifnull          111
			obj = ((Object) (((ViewHolder) (obj)).mShadowingHolder.itemView));
	//   23   46:aload           6
	//   24   48:getfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   25   51:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   26   54:astore          6
			int k = view.getLeft();
	//   27   56:aload           5
	//   28   58:invokevirtual   #1131 <Method int View.getLeft()>
	//   29   61:istore_3        
			int l = view.getTop();
	//   30   62:aload           5
	//   31   64:invokevirtual   #1140 <Method int View.getTop()>
	//   32   67:istore          4
			if(k != ((View) (obj)).getLeft() || l != ((View) (obj)).getTop())
	//*  33   69:iload_3         
	//*  34   70:aload           6
	//*  35   72:invokevirtual   #1131 <Method int View.getLeft()>
	//*  36   75:icmpne          88
	//*  37   78:iload           4
	//*  38   80:aload           6
	//*  39   82:invokevirtual   #1140 <Method int View.getTop()>
	//*  40   85:icmpeq          111
				((View) (obj)).layout(k, l, ((View) (obj)).getWidth() + k, ((View) (obj)).getHeight() + l);
	//   41   88:aload           6
	//   42   90:iload_3         
	//   43   91:iload           4
	//   44   93:aload           6
	//   45   95:invokevirtual   #1255 <Method int View.getWidth()>
	//   46   98:iload_3         
	//   47   99:iadd            
	//   48  100:aload           6
	//   49  102:invokevirtual   #1258 <Method int View.getHeight()>
	//   50  105:iload           4
	//   51  107:iadd            
	//   52  108:invokevirtual   #2327 <Method void View.layout(int, int, int, int)>
		}

	//   53  111:iload_1         
	//   54  112:iconst_1        
	//   55  113:iadd            
	//   56  114:istore_1        
	//*  57  115:goto            10
	//   58  118:return          
	}

	public void requestChildFocus(View view, View view1)
	{
		if(!mLayout.onRequestChildFocus(this, mState, view, view1) && view1 != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:aload_0         
	//*   3    5:aload_0         
	//*   4    6:getfield        #431 <Field RecyclerView$State mState>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:invokevirtual   #2332 <Method boolean RecyclerView$LayoutManager.onRequestChildFocus(RecyclerView, RecyclerView$State, View, View)>
	//*   8   14:ifne            27
	//*   9   17:aload_2         
	//*  10   18:ifnull          27
			requestChildOnScreen(view, view1);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:aload_2         
	//   14   24:invokespecial   #1888 <Method void requestChildOnScreen(View, View)>
		super.requestChildFocus(view, view1);
	//   15   27:aload_0         
	//   16   28:aload_1         
	//   17   29:aload_2         
	//   18   30:invokespecial   #2334 <Method void ViewGroup.requestChildFocus(View, View)>
	//   19   33:return          
	}

	public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean flag)
	{
		return mLayout.requestChildRectangleOnScreen(this, view, rect, flag);
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_0         
	//    3    5:aload_1         
	//    4    6:aload_2         
	//    5    7:iload_3         
	//    6    8:invokevirtual   #2338 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean)>
	//    7   11:ireturn         
	}

	public void requestDisallowInterceptTouchEvent(boolean flag)
	{
		int j = mOnItemTouchListeners.size();
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:invokevirtual   #1078 <Method int ArrayList.size()>
	//    3    7:istore_3        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          39
			((OnItemTouchListener)mOnItemTouchListeners.get(i)).onRequestDisallowInterceptTouchEvent(flag);
	//    9   15:aload_0         
	//   10   16:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   13   23:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   14   26:iload_1         
	//   15   27:invokeinterface #2341 <Method void RecyclerView$OnItemTouchListener.onRequestDisallowInterceptTouchEvent(boolean)>

	//   16   32:iload_2         
	//   17   33:iconst_1        
	//   18   34:iadd            
	//   19   35:istore_2        
	//*  20   36:goto            10
		super.requestDisallowInterceptTouchEvent(flag);
	//   21   39:aload_0         
	//   22   40:iload_1         
	//   23   41:invokespecial   #2342 <Method void ViewGroup.requestDisallowInterceptTouchEvent(boolean)>
	//   24   44:return          
	}

	public void requestLayout()
	{
		if(mEatRequestLayout == 0 && !mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #398 <Field int mEatRequestLayout>
	//*   2    4:ifne            19
	//*   3    7:aload_0         
	//*   4    8:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   5   11:ifne            19
		{
			super.requestLayout();
	//    6   14:aload_0         
	//    7   15:invokespecial   #2343 <Method void ViewGroup.requestLayout()>
			return;
	//    8   18:return          
		} else
		{
			mLayoutRequestEaten = true;
	//    9   19:aload_0         
	//   10   20:iconst_1        
	//   11   21:putfield        #1601 <Field boolean mLayoutRequestEaten>
			return;
	//   12   24:return          
		}
	}

	void resumeRequestLayout(boolean flag)
	{
		if(mEatRequestLayout < 1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #398 <Field int mEatRequestLayout>
	//*   2    4:iconst_1        
	//*   3    5:icmpge          13
			mEatRequestLayout = 1;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #398 <Field int mEatRequestLayout>
		if(!flag)
	//*   7   13:iload_1         
	//*   8   14:ifne            22
			mLayoutRequestEaten = false;
	//    9   17:aload_0         
	//   10   18:iconst_0        
	//   11   19:putfield        #1601 <Field boolean mLayoutRequestEaten>
		if(mEatRequestLayout == 1)
	//*  12   22:aload_0         
	//*  13   23:getfield        #398 <Field int mEatRequestLayout>
	//*  14   26:iconst_1        
	//*  15   27:icmpne          78
		{
			if(flag && mLayoutRequestEaten && !mLayoutFrozen && mLayout != null && mAdapter != null)
	//*  16   30:iload_1         
	//*  17   31:ifeq            66
	//*  18   34:aload_0         
	//*  19   35:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  20   38:ifeq            66
	//*  21   41:aload_0         
	//*  22   42:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  23   45:ifne            66
	//*  24   48:aload_0         
	//*  25   49:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  26   52:ifnull          66
	//*  27   55:aload_0         
	//*  28   56:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  29   59:ifnull          66
				dispatchLayout();
	//   30   62:aload_0         
	//   31   63:invokevirtual   #1590 <Method void dispatchLayout()>
			if(!mLayoutFrozen)
	//*  32   66:aload_0         
	//*  33   67:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  34   70:ifne            78
				mLayoutRequestEaten = false;
	//   35   73:aload_0         
	//   36   74:iconst_0        
	//   37   75:putfield        #1601 <Field boolean mLayoutRequestEaten>
		}
		mEatRequestLayout = mEatRequestLayout - 1;
	//   38   78:aload_0         
	//   39   79:aload_0         
	//   40   80:getfield        #398 <Field int mEatRequestLayout>
	//   41   83:iconst_1        
	//   42   84:isub            
	//   43   85:putfield        #398 <Field int mEatRequestLayout>
	//   44   88:return          
	}

	void saveOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.saveOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #2346 <Method void RecyclerView$ViewHolder.saveOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
	//   25   45:return          
	}

	public void scrollBy(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
			Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #2349 <String "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
		else
	//*   7   16:return          
		if(!mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  10   21:ifne            16
		{
			boolean flag = mLayout.canScrollHorizontally();
	//   11   24:aload_0         
	//   12   25:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   13   28:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   14   31:istore_3        
			boolean flag1 = mLayout.canScrollVertically();
	//   15   32:aload_0         
	//   16   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   17   36:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   18   39:istore          4
			if(flag || flag1)
	//*  19   41:iload_3         
	//*  20   42:ifne            50
	//*  21   45:iload           4
	//*  22   47:ifeq            16
			{
				if(!flag)
	//*  23   50:iload_3         
	//*  24   51:ifeq            68
	//*  25   54:iload           4
	//*  26   56:ifeq            73
	//*  27   59:aload_0         
	//*  28   60:iload_1         
	//*  29   61:iload_2         
	//*  30   62:aconst_null     
	//*  31   63:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//*  32   66:pop             
	//*  33   67:return          
					i = 0;
	//   34   68:iconst_0        
	//   35   69:istore_1        
				if(!flag1)
	//*  36   70:goto            54
					j = 0;
	//   37   73:iconst_0        
	//   38   74:istore_2        
				scrollByInternal(i, j, ((MotionEvent) (null)));
				return;
			}
		}
	//*  39   75:goto            59
	}

	boolean scrollByInternal(int i, int j, MotionEvent motionevent)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          9
		consumePendingUpdateOperations();
	//    2    3:aload_0         
	//    3    4:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
		int k;
		int l;
		int i1;
		int j1;
		if(mAdapter != null)
	//*   4    7:aload_0         
	//*   5    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   6   11:ifnull          353
		{
			eatRequestLayout();
	//    7   14:aload_0         
	//    8   15:invokevirtual   #865 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//    9   18:aload_0         
	//   10   19:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
			TraceCompat.beginSection("RV Scroll");
	//   11   22:ldc1            #194 <String "RV Scroll">
	//   12   24:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
			fillRemainingScrollValues(mState);
	//   13   27:aload_0         
	//   14   28:aload_0         
	//   15   29:getfield        #431 <Field RecyclerView$State mState>
	//   16   32:invokevirtual   #859 <Method void fillRemainingScrollValues(RecyclerView$State)>
			int k1;
			if(i != 0)
	//*  17   35:iload_1         
	//*  18   36:ifeq            344
			{
				l = mLayout.scrollHorizontallyBy(i, mRecycler, mState);
	//   19   39:aload_0         
	//   20   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   21   43:iload_1         
	//   22   44:aload_0         
	//   23   45:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   24   48:aload_0         
	//   25   49:getfield        #431 <Field RecyclerView$State mState>
	//   26   52:invokevirtual   #2353 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   27   55:istore          5
				k = i - l;
	//   28   57:iload_1         
	//   29   58:iload           5
	//   30   60:isub            
	//   31   61:istore          4
			} else
	//*  32   63:iload_2         
	//*  33   64:ifeq            335
	//*  34   67:aload_0         
	//*  35   68:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  36   71:iload_2         
	//*  37   72:aload_0         
	//*  38   73:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//*  39   76:aload_0         
	//*  40   77:getfield        #431 <Field RecyclerView$State mState>
	//*  41   80:invokevirtual   #2356 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//*  42   83:istore          6
	//*  43   85:iload_2         
	//*  44   86:iload           6
	//*  45   88:isub            
	//*  46   89:istore          7
	//*  47   91:invokestatic    #1593 <Method void TraceCompat.endSection()>
	//*  48   94:aload_0         
	//*  49   95:invokevirtual   #2358 <Method void repositionShadowingViews()>
	//*  50   98:aload_0         
	//*  51   99:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
	//*  52  102:aload_0         
	//*  53  103:iconst_0        
	//*  54  104:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  55  107:iload           6
	//*  56  109:istore          8
	//*  57  111:iload           4
	//*  58  113:istore          6
	//*  59  115:iload           8
	//*  60  117:istore          4
	//*  61  119:aload_0         
	//*  62  120:getfield        #394 <Field ArrayList mItemDecorations>
	//*  63  123:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  64  126:ifne            133
	//*  65  129:aload_0         
	//*  66  130:invokevirtual   #2361 <Method void invalidate()>
	//*  67  133:aload_0         
	//*  68  134:iload           5
	//*  69  136:iload           4
	//*  70  138:iload           6
	//*  71  140:iload           7
	//*  72  142:aload_0         
	//*  73  143:getfield        #444 <Field int[] mScrollOffset>
	//*  74  146:iconst_0        
	//*  75  147:invokevirtual   #2362 <Method boolean dispatchNestedScroll(int, int, int, int, int[], int)>
	//*  76  150:ifeq            286
	//*  77  153:aload_0         
	//*  78  154:aload_0         
	//*  79  155:getfield        #1285 <Field int mLastTouchX>
	//*  80  158:aload_0         
	//*  81  159:getfield        #444 <Field int[] mScrollOffset>
	//*  82  162:iconst_0        
	//*  83  163:iaload          
	//*  84  164:isub            
	//*  85  165:putfield        #1285 <Field int mLastTouchX>
	//*  86  168:aload_0         
	//*  87  169:aload_0         
	//*  88  170:getfield        #1292 <Field int mLastTouchY>
	//*  89  173:aload_0         
	//*  90  174:getfield        #444 <Field int[] mScrollOffset>
	//*  91  177:iconst_1        
	//*  92  178:iaload          
	//*  93  179:isub            
	//*  94  180:putfield        #1292 <Field int mLastTouchY>
	//*  95  183:aload_3         
	//*  96  184:ifnull          205
	//*  97  187:aload_3         
	//*  98  188:aload_0         
	//*  99  189:getfield        #444 <Field int[] mScrollOffset>
	//* 100  192:iconst_0        
	//* 101  193:iaload          
	//* 102  194:i2f             
	//* 103  195:aload_0         
	//* 104  196:getfield        #444 <Field int[] mScrollOffset>
	//* 105  199:iconst_1        
	//* 106  200:iaload          
	//* 107  201:i2f             
	//* 108  202:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
	//* 109  205:aload_0         
	//* 110  206:getfield        #448 <Field int[] mNestedOffsets>
	//* 111  209:astore_3        
	//* 112  210:aload_3         
	//* 113  211:iconst_0        
	//* 114  212:aload_3         
	//* 115  213:iconst_0        
	//* 116  214:iaload          
	//* 117  215:aload_0         
	//* 118  216:getfield        #444 <Field int[] mScrollOffset>
	//* 119  219:iconst_0        
	//* 120  220:iaload          
	//* 121  221:iadd            
	//* 122  222:iastore         
	//* 123  223:aload_0         
	//* 124  224:getfield        #448 <Field int[] mNestedOffsets>
	//* 125  227:astore_3        
	//* 126  228:aload_3         
	//* 127  229:iconst_1        
	//* 128  230:aload_3         
	//* 129  231:iconst_1        
	//* 130  232:iaload          
	//* 131  233:aload_0         
	//* 132  234:getfield        #444 <Field int[] mScrollOffset>
	//* 133  237:iconst_1        
	//* 134  238:iaload          
	//* 135  239:iadd            
	//* 136  240:iastore         
	//* 137  241:iload           5
	//* 138  243:ifne            251
	//* 139  246:iload           4
	//* 140  248:ifeq            259
	//* 141  251:aload_0         
	//* 142  252:iload           5
	//* 143  254:iload           4
	//* 144  256:invokevirtual   #1060 <Method void dispatchOnScrolled(int, int)>
	//* 145  259:aload_0         
	//* 146  260:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//* 147  263:ifne            270
	//* 148  266:aload_0         
	//* 149  267:invokevirtual   #2361 <Method void invalidate()>
	//* 150  270:iload           5
	//* 151  272:ifne            280
	//* 152  275:iload           4
	//* 153  277:ifeq            283
	//* 154  280:iconst_1        
	//* 155  281:istore          9
	//* 156  283:iload           9
	//* 157  285:ireturn         
	//* 158  286:aload_0         
	//* 159  287:invokevirtual   #512 <Method int getOverScrollMode()>
	//* 160  290:iconst_2        
	//* 161  291:icmpeq          241
	//* 162  294:aload_3         
	//* 163  295:ifnull          326
	//* 164  298:aload_3         
	//* 165  299:sipush          8194
	//* 166  302:invokestatic    #2368 <Method boolean MotionEventCompat.isFromSource(MotionEvent, int)>
	//* 167  305:ifne            326
	//* 168  308:aload_0         
	//* 169  309:aload_3         
	//* 170  310:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//* 171  313:iload           6
	//* 172  315:i2f             
	//* 173  316:aload_3         
	//* 174  317:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//* 175  320:iload           7
	//* 176  322:i2f             
	//* 177  323:invokespecial   #2370 <Method void pullGlows(float, float, float, float)>
	//* 178  326:aload_0         
	//* 179  327:iload_1         
	//* 180  328:iload_2         
	//* 181  329:invokevirtual   #2372 <Method void considerReleasingGlowsOnScroll(int, int)>
	//* 182  332:goto            241
	//* 183  335:iconst_0        
	//* 184  336:istore          6
	//* 185  338:iconst_0        
	//* 186  339:istore          7
	//* 187  341:goto            91
			{
				l = 0;
	//  188  344:iconst_0        
	//  189  345:istore          5
				k = 0;
	//  190  347:iconst_0        
	//  191  348:istore          4
			}
			if(j != 0)
			{
				i1 = mLayout.scrollVerticallyBy(j, mRecycler, mState);
				j1 = j - i1;
			} else
			{
				i1 = 0;
				j1 = 0;
			}
			TraceCompat.endSection();
			repositionShadowingViews();
			onExitLayoutOrScroll();
			resumeRequestLayout(false);
			k1 = i1;
			i1 = k;
			k = k1;
		} else
	//* 192  350:goto            63
		{
			k = 0;
	//  193  353:iconst_0        
	//  194  354:istore          4
			l = 0;
	//  195  356:iconst_0        
	//  196  357:istore          5
			j1 = 0;
	//  197  359:iconst_0        
	//  198  360:istore          7
			i1 = 0;
	//  199  362:iconst_0        
	//  200  363:istore          6
		}
		if(!mItemDecorations.isEmpty())
			invalidate();
		if(!dispatchNestedScroll(l, k, i1, j1, mScrollOffset, 0)) goto _L2; else goto _L1
_L1:
		mLastTouchX = mLastTouchX - mScrollOffset[0];
		mLastTouchY = mLastTouchY - mScrollOffset[1];
		if(motionevent != null)
			motionevent.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
		motionevent = ((MotionEvent) (mNestedOffsets));
		motionevent[0] = motionevent[0] + mScrollOffset[0];
		motionevent = ((MotionEvent) (mNestedOffsets));
		motionevent[1] = motionevent[1] + mScrollOffset[1];
_L4:
		if(l != 0 || k != 0)
			dispatchOnScrolled(l, k);
		if(!awakenScrollBars())
			invalidate();
		if(l != 0 || k != 0)
			flag = true;
		return flag;
_L2:
		if(getOverScrollMode() != 2)
		{
			if(motionevent != null && !MotionEventCompat.isFromSource(motionevent, 8194))
				pullGlows(motionevent.getX(), i1, motionevent.getY(), j1);
			considerReleasingGlowsOnScroll(i, j);
		}
		if(true) goto _L4; else goto _L3
_L3:
	//* 201  365:goto            119
	}

	public void scrollTo(int i, int j)
	{
		Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
	//    0    0:ldc1            #168 <String "RecyclerView">
	//    1    2:ldc2            #2375 <String "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead">
	//    2    5:invokestatic    #2377 <Method int Log.w(String, String)>
	//    3    8:pop             
	//    4    9:return          
	}

	public void scrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		stopScroll();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2124 <Method void stopScroll()>
		if(mLayout == null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   8   16:ifnonnull       29
		{
			Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    9   19:ldc1            #168 <String "RecyclerView">
	//   10   21:ldc2            #2379 <String "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   11   24:invokestatic    #1239 <Method int Log.e(String, String)>
	//   12   27:pop             
			return;
	//   13   28:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//   14   29:aload_0         
	//   15   30:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   16   33:iload_1         
	//   17   34:invokevirtual   #2042 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//   18   37:aload_0         
	//   19   38:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//   20   41:pop             
			return;
	//   21   42:return          
		}
	}

	public void sendAccessibilityEventUnchecked(AccessibilityEvent accessibilityevent)
	{
		if(shouldDeferAccessibilityEvent(accessibilityevent))
	//*   0    0:aload_0         
	//*   1    1:aload_1         
	//*   2    2:invokevirtual   #2383 <Method boolean shouldDeferAccessibilityEvent(AccessibilityEvent)>
	//*   3    5:ifeq            9
		{
			return;
	//    4    8:return          
		} else
		{
			super.sendAccessibilityEventUnchecked(accessibilityevent);
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:invokespecial   #2384 <Method void ViewGroup.sendAccessibilityEventUnchecked(AccessibilityEvent)>
			return;
	//    8   14:return          
		}
	}

	public void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate recyclerviewaccessibilitydelegate)
	{
		mAccessibilityDelegate = recyclerviewaccessibilitydelegate;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
		ViewCompat.setAccessibilityDelegate(((View) (this)), ((android.support.v4.view.AccessibilityDelegateCompat) (mAccessibilityDelegate)));
	//    3    5:aload_0         
	//    4    6:aload_0         
	//    5    7:getfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    6   10:invokestatic    #2388 <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
	//    7   13:return          
	}

	public void setAdapter(Adapter adapter)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2393 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, false, true);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_0        
	//    6    8:iconst_1        
	//    7    9:invokespecial   #2395 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		requestLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1493 <Method void requestLayout()>
	//   10   16:return          
	}

	public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childdrawingordercallback)
	{
		if(childdrawingordercallback == mChildDrawingOrderCallback)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		mChildDrawingOrderCallback = childdrawingordercallback;
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:putfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
		boolean flag;
		if(mChildDrawingOrderCallback != null)
	//*   8   14:aload_0         
	//*   9   15:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*  10   18:ifnull          29
			flag = true;
	//   11   21:iconst_1        
	//   12   22:istore_2        
		else
	//*  13   23:aload_0         
	//*  14   24:iload_2         
	//*  15   25:invokevirtual   #2400 <Method void setChildrenDrawingOrderEnabled(boolean)>
	//*  16   28:return          
			flag = false;
	//   17   29:iconst_0        
	//   18   30:istore_2        
		setChildrenDrawingOrderEnabled(flag);
	//*  19   31:goto            23
	}

	boolean setChildImportantForAccessibilityInternal(ViewHolder viewholder, int i)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            25
		{
			viewholder.mPendingAccessibilityState = i;
	//    3    7:aload_1         
	//    4    8:iload_2         
	//    5    9:putfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			mPendingAccessibilityImportanceChange.add(((Object) (viewholder)));
	//    6   12:aload_0         
	//    7   13:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//    8   16:aload_1         
	//    9   17:invokeinterface #1503 <Method boolean List.add(Object)>
	//   10   22:pop             
			return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
		} else
		{
			ViewCompat.setImportantForAccessibility(viewholder.itemView, i);
	//   13   25:aload_1         
	//   14   26:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   15   29:iload_2         
	//   16   30:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
			return true;
	//   17   33:iconst_1        
	//   18   34:ireturn         
		}
	}

	public void setClipToPadding(boolean flag)
	{
		if(flag != mClipToPadding)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #468 <Field boolean mClipToPadding>
	//*   3    5:icmpeq          12
			invalidateGlows();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2258 <Method void invalidateGlows()>
		mClipToPadding = flag;
	//    6   12:aload_0         
	//    7   13:iload_1         
	//    8   14:putfield        #468 <Field boolean mClipToPadding>
		super.setClipToPadding(flag);
	//    9   17:aload_0         
	//   10   18:iload_1         
	//   11   19:invokespecial   #2405 <Method void ViewGroup.setClipToPadding(boolean)>
		if(mFirstLayoutComplete)
	//*  12   22:aload_0         
	//*  13   23:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  14   26:ifeq            33
			requestLayout();
	//   15   29:aload_0         
	//   16   30:invokevirtual   #1493 <Method void requestLayout()>
	//   17   33:return          
	}

	void setDataSetChangedAfterLayout()
	{
		mDataSetHasChangedAfterLayout = true;
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		markKnownViewsInvalid();
	//    3    5:aload_0         
	//    4    6:invokevirtual   #2406 <Method void markKnownViewsInvalid()>
	//    5    9:return          
	}

	public void setHasFixedSize(boolean flag)
	{
		mHasFixedSize = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #1983 <Field boolean mHasFixedSize>
	//    3    5:return          
	}

	public void setItemAnimator(ItemAnimator itemanimator)
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          22
		{
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mItemAnimator.setListener(((ItemAnimator.ItemAnimatorListener) (null)));
	//    6   14:aload_0         
	//    7   15:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    8   18:aconst_null     
	//    9   19:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		}
		mItemAnimator = itemanimator;
	//   10   22:aload_0         
	//   11   23:aload_1         
	//   12   24:putfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
		if(mItemAnimator != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  15   31:ifnull          45
			mItemAnimator.setListener(mItemAnimatorListener);
	//   16   34:aload_0         
	//   17   35:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   18   38:aload_0         
	//   19   39:getfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//   20   42:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//   21   45:return          
	}

	public void setItemViewCacheSize(int i)
	{
		mRecycler.setViewCacheSize(i);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2413 <Method void RecyclerView$Recycler.setViewCacheSize(int)>
	//    4    8:return          
	}

	public void setLayoutFrozen(boolean flag)
	{
label0:
		{
			if(flag != mLayoutFrozen)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   3    5:icmpeq          54
			{
				assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
	//    4    8:aload_0         
	//    5    9:ldc2            #2415 <String "Do not setLayoutFrozen in layout or scroll">
	//    6   12:invokevirtual   #2416 <Method void assertNotInLayoutOrScroll(String)>
				if(flag)
					break label0;
	//    7   15:iload_1         
	//    8   16:ifne            55
				mLayoutFrozen = false;
	//    9   19:aload_0         
	//   10   20:iconst_0        
	//   11   21:putfield        #1769 <Field boolean mLayoutFrozen>
				if(mLayoutRequestEaten && mLayout != null && mAdapter != null)
	//*  12   24:aload_0         
	//*  13   25:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  14   28:ifeq            49
	//*  15   31:aload_0         
	//*  16   32:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  17   35:ifnull          49
	//*  18   38:aload_0         
	//*  19   39:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  20   42:ifnull          49
					requestLayout();
	//   21   45:aload_0         
	//   22   46:invokevirtual   #1493 <Method void requestLayout()>
				mLayoutRequestEaten = false;
	//   23   49:aload_0         
	//   24   50:iconst_0        
	//   25   51:putfield        #1601 <Field boolean mLayoutRequestEaten>
			}
			return;
	//   26   54:return          
		}
		long l = SystemClock.uptimeMillis();
	//   27   55:invokestatic    #2421 <Method long SystemClock.uptimeMillis()>
	//   28   58:lstore_2        
		onTouchEvent(MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0));
	//   29   59:aload_0         
	//   30   60:lload_2         
	//   31   61:lload_2         
	//   32   62:iconst_3        
	//   33   63:fconst_0        
	//   34   64:fconst_0        
	//   35   65:iconst_0        
	//   36   66:invokestatic    #2424 <Method MotionEvent MotionEvent.obtain(long, long, int, float, float, int)>
	//   37   69:invokevirtual   #2426 <Method boolean onTouchEvent(MotionEvent)>
	//   38   72:pop             
		mLayoutFrozen = true;
	//   39   73:aload_0         
	//   40   74:iconst_1        
	//   41   75:putfield        #1769 <Field boolean mLayoutFrozen>
		mIgnoreMotionEventTillDown = true;
	//   42   78:aload_0         
	//   43   79:iconst_1        
	//   44   80:putfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
		stopScroll();
	//   45   83:aload_0         
	//   46   84:invokevirtual   #2124 <Method void stopScroll()>
	//   47   87:return          
	}

	public void setLayoutManager(LayoutManager layoutmanager)
	{
		if(layoutmanager == mLayout)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		stopScroll();
	//    5    9:aload_0         
	//    6   10:invokevirtual   #2124 <Method void stopScroll()>
		if(mLayout != null)
	//*   7   13:aload_0         
	//*   8   14:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   9   17:ifnull          162
		{
			if(mItemAnimator != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  12   24:ifnull          34
				mItemAnimator.endAnimations();
	//   13   27:aload_0         
	//   14   28:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   15   31:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mLayout.removeAndRecycleAllViews(mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   20   42:invokevirtual   #2293 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   21   45:aload_0         
	//   22   46:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   23   49:aload_0         
	//   24   50:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   25   53:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
			mRecycler.clear();
	//   26   56:aload_0         
	//   27   57:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   28   60:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
			if(mIsAttached)
	//*  29   63:aload_0         
	//*  30   64:getfield        #2034 <Field boolean mIsAttached>
	//*  31   67:ifeq            82
				mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   32   70:aload_0         
	//   33   71:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   34   74:aload_0         
	//   35   75:aload_0         
	//   36   76:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   37   79:invokevirtual   #2128 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
			mLayout.setRecyclerView(((RecyclerView) (null)));
	//   38   82:aload_0         
	//   39   83:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   40   86:aconst_null     
	//   41   87:invokevirtual   #2429 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			mLayout = null;
	//   42   90:aload_0         
	//   43   91:aconst_null     
	//   44   92:putfield        #954 <Field RecyclerView$LayoutManager mLayout>
		} else
	//*  45   95:aload_0         
	//*  46   96:getfield        #663 <Field ChildHelper mChildHelper>
	//*  47   99:invokevirtual   #2432 <Method void ChildHelper.removeAllViewsUnfiltered()>
	//*  48  102:aload_0         
	//*  49  103:aload_1         
	//*  50  104:putfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  51  107:aload_1         
	//*  52  108:ifnull          195
	//*  53  111:aload_1         
	//*  54  112:getfield        #2436 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  55  115:ifnull          172
	//*  56  118:new             #1263 <Class IllegalArgumentException>
	//*  57  121:dup             
	//*  58  122:new             #796 <Class StringBuilder>
	//*  59  125:dup             
	//*  60  126:invokespecial   #797 <Method void StringBuilder()>
	//*  61  129:ldc2            #2438 <String "LayoutManager ">
	//*  62  132:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  63  135:aload_1         
	//*  64  136:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//*  65  139:ldc2            #2440 <String " is already attached to a RecyclerView:">
	//*  66  142:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  67  145:aload_1         
	//*  68  146:getfield        #2436 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  69  149:invokevirtual   #1224 <Method String exceptionLabel()>
	//*  70  152:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  71  155:invokevirtual   #809 <Method String StringBuilder.toString()>
	//*  72  158:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//*  73  161:athrow          
		{
			mRecycler.clear();
	//   74  162:aload_0         
	//   75  163:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   76  166:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
		}
		mChildHelper.removeAllViewsUnfiltered();
		mLayout = layoutmanager;
		if(layoutmanager != null)
		{
			if(layoutmanager.mRecyclerView != null)
				throw new IllegalArgumentException((new StringBuilder()).append("LayoutManager ").append(((Object) (layoutmanager))).append(" is already attached to a RecyclerView:").append(layoutmanager.mRecyclerView.exceptionLabel()).toString());
	//*  77  169:goto            95
			mLayout.setRecyclerView(this);
	//   78  172:aload_0         
	//   79  173:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   80  176:aload_0         
	//   81  177:invokevirtual   #2429 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			if(mIsAttached)
	//*  82  180:aload_0         
	//*  83  181:getfield        #2034 <Field boolean mIsAttached>
	//*  84  184:ifeq            195
				mLayout.dispatchAttachedToWindow(this);
	//   85  187:aload_0         
	//   86  188:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   87  191:aload_0         
	//   88  192:invokevirtual   #2083 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
		}
		mRecycler.updateViewCacheSize();
	//   89  195:aload_0         
	//   90  196:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   91  199:invokevirtual   #1052 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		requestLayout();
	//   92  202:aload_0         
	//   93  203:invokevirtual   #1493 <Method void requestLayout()>
	//   94  206:return          
	}

	public void setNestedScrollingEnabled(boolean flag)
	{
		getScrollingChildHelper().setNestedScrollingEnabled(flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2441 <Method void NestedScrollingChildHelper.setNestedScrollingEnabled(boolean)>
	//    4    8:return          
	}

	public void setOnFlingListener(OnFlingListener onflinglistener)
	{
		mOnFlingListener = onflinglistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    3    5:return          
	}

	public void setOnScrollListener(OnScrollListener onscrolllistener)
	{
		mScrollListener = onscrolllistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//    3    5:return          
	}

	public void setPreserveFocusAfterLayout(boolean flag)
	{
		mPreserveFocusAfterLayout = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    3    5:return          
	}

	public void setRecycledViewPool(RecycledViewPool recycledviewpool)
	{
		mRecycler.setRecycledViewPool(recycledviewpool);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2449 <Method void RecyclerView$Recycler.setRecycledViewPool(RecyclerView$RecycledViewPool)>
	//    4    8:return          
	}

	public void setRecyclerListener(RecyclerListener recyclerlistener)
	{
		mRecyclerListener = recyclerlistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #2453 <Field RecyclerView$RecyclerListener mRecyclerListener>
	//    3    5:return          
	}

	void setScrollState(int i)
	{
		if(i == mScrollState)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #411 <Field int mScrollState>
	//*   3    5:icmpne          9
			return;
	//    4    8:return          
		mScrollState = i;
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:putfield        #411 <Field int mScrollState>
		if(i != 2)
	//*   8   14:iload_1         
	//*   9   15:iconst_2        
	//*  10   16:icmpeq          23
			stopScrollersInternal();
	//   11   19:aload_0         
	//   12   20:invokespecial   #2455 <Method void stopScrollersInternal()>
		dispatchOnScrollStateChanged(i);
	//   13   23:aload_0         
	//   14   24:iload_1         
	//   15   25:invokevirtual   #2457 <Method void dispatchOnScrollStateChanged(int)>
	//   16   28:return          
	}

	public void setScrollingTouchSlop(int i)
	{
		ViewConfiguration viewconfiguration = ViewConfiguration.get(getContext());
	//    0    0:aload_0         
	//    1    1:invokevirtual   #539 <Method Context getContext()>
	//    2    4:invokestatic    #484 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//    3    7:astore_2        
		switch(i)
	//*   4    8:iload_1         
		{
	//*   5    9:tableswitch     0 1: default 32
	//	               0 64
	//	               1 73
		default:
			Log.w("RecyclerView", (new StringBuilder()).append("setScrollingTouchSlop(): bad argument constant ").append(i).append("; using default value").toString());
	//    6   32:ldc1            #168 <String "RecyclerView">
	//    7   34:new             #796 <Class StringBuilder>
	//    8   37:dup             
	//    9   38:invokespecial   #797 <Method void StringBuilder()>
	//   10   41:ldc2            #2460 <String "setScrollingTouchSlop(): bad argument constant ">
	//   11   44:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   47:iload_1         
	//   13   48:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//   14   51:ldc2            #2462 <String "; using default value">
	//   15   54:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   16   57:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   17   60:invokestatic    #2377 <Method int Log.w(String, String)>
	//   18   63:pop             
			// fall through

		case 0: // '\0'
			mTouchSlop = viewconfiguration.getScaledTouchSlop();
	//   19   64:aload_0         
	//   20   65:aload_2         
	//   21   66:invokevirtual   #488 <Method int ViewConfiguration.getScaledTouchSlop()>
	//   22   69:putfield        #490 <Field int mTouchSlop>
			return;
	//   23   72:return          

		case 1: // '\001'
			mTouchSlop = viewconfiguration.getScaledPagingTouchSlop();
	//   24   73:aload_0         
	//   25   74:aload_2         
	//   26   75:invokevirtual   #2465 <Method int ViewConfiguration.getScaledPagingTouchSlop()>
	//   27   78:putfield        #490 <Field int mTouchSlop>
			break;
		}
	//   28   81:return          
	}

	public void setViewCacheExtension(ViewCacheExtension viewcacheextension)
	{
		mRecycler.setViewCacheExtension(viewcacheextension);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2469 <Method void RecyclerView$Recycler.setViewCacheExtension(RecyclerView$ViewCacheExtension)>
	//    4    8:return          
	}

	boolean shouldDeferAccessibilityEvent(AccessibilityEvent accessibilityevent)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		boolean flag = false;
	//    2    3:iconst_0        
	//    3    4:istore_3        
		if(isComputingLayout())
	//*   4    5:aload_0         
	//*   5    6:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   6    9:ifeq            40
		{
			int i;
			if(accessibilityevent != null)
	//*   7   12:aload_1         
	//*   8   13:ifnull          46
				i = AccessibilityEventCompat.getContentChangeTypes(accessibilityevent);
	//    9   16:aload_1         
	//   10   17:invokestatic    #2473 <Method int AccessibilityEventCompat.getContentChangeTypes(AccessibilityEvent)>
	//   11   20:istore_2        
			else
	//*  12   21:iload_2         
	//*  13   22:ifne            43
	//*  14   25:iload_3         
	//*  15   26:istore_2        
	//*  16   27:aload_0         
	//*  17   28:iload_2         
	//*  18   29:aload_0         
	//*  19   30:getfield        #829 <Field int mEatenAccessibilityChangeFlags>
	//*  20   33:ior             
	//*  21   34:putfield        #829 <Field int mEatenAccessibilityChangeFlags>
	//*  22   37:iconst_1        
	//*  23   38:istore          4
	//*  24   40:iload           4
	//*  25   42:ireturn         
	//*  26   43:goto            27
				i = 0;
	//   27   46:iconst_0        
	//   28   47:istore_2        
			if(i == 0)
				i = ((int) (flag));
			mEatenAccessibilityChangeFlags = i | mEatenAccessibilityChangeFlags;
			flag1 = true;
		}
		return flag1;
	//*  29   48:goto            21
	}

	public void smoothScrollBy(int i, int j)
	{
		smoothScrollBy(i, j, ((Interpolator) (null)));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:aconst_null     
	//    4    4:invokevirtual   #2477 <Method void smoothScrollBy(int, int, Interpolator)>
	//    5    7:return          
	}

	public void smoothScrollBy(int i, int j, Interpolator interpolator)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		if(mLayout == null)
	//*   2    3:aload_0         
	//*   3    4:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   4    7:ifnonnull       20
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    5   10:ldc1            #168 <String "RecyclerView">
	//    6   12:ldc2            #2479 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    7   15:invokestatic    #1239 <Method int Log.e(String, String)>
	//    8   18:pop             
		else
	//*   9   19:return          
		if(!mLayoutFrozen)
	//*  10   20:aload_0         
	//*  11   21:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  12   24:ifne            19
		{
			if(!mLayout.canScrollHorizontally())
	//*  13   27:aload_0         
	//*  14   28:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  15   31:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  16   34:ifne            39
				i = 0;
	//   17   37:iconst_0        
	//   18   38:istore_1        
			if(!mLayout.canScrollVertically())
	//*  19   39:aload_0         
	//*  20   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  21   43:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  22   46:ifne            71
				j = ((int) (flag));
	//   23   49:iload           4
	//   24   51:istore_2        
			if(i != 0 || j != 0)
	//*  25   52:iload_1         
	//*  26   53:ifne            60
	//*  27   56:iload_2         
	//*  28   57:ifeq            19
			{
				mViewFlinger.smoothScrollBy(i, j, interpolator);
	//   29   60:aload_0         
	//   30   61:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//   31   64:iload_1         
	//   32   65:iload_2         
	//   33   66:aload_3         
	//   34   67:invokevirtual   #2480 <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, Interpolator)>
				return;
	//   35   70:return          
			}
		}
	//*  36   71:goto            52
	}

	public void smoothScrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		if(mLayout == null)
	//*   4    8:aload_0         
	//*   5    9:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   6   12:ifnonnull       25
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   15:ldc1            #168 <String "RecyclerView">
	//    8   17:ldc2            #2479 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   20:invokestatic    #1239 <Method int Log.e(String, String)>
	//   10   23:pop             
			return;
	//   11   24:return          
		} else
		{
			mLayout.smoothScrollToPosition(this, mState, i);
	//   12   25:aload_0         
	//   13   26:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:aload_0         
	//   15   30:aload_0         
	//   16   31:getfield        #431 <Field RecyclerView$State mState>
	//   17   34:iload_1         
	//   18   35:invokevirtual   #2484 <Method void RecyclerView$LayoutManager.smoothScrollToPosition(RecyclerView, RecyclerView$State, int)>
			return;
	//   19   38:return          
		}
	}

	public boolean startNestedScroll(int i)
	{
		return getScrollingChildHelper().startNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2486 <Method boolean NestedScrollingChildHelper.startNestedScroll(int)>
	//    4    8:ireturn         
	}

	public boolean startNestedScroll(int i, int j)
	{
		return getScrollingChildHelper().startNestedScroll(i, j);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #2487 <Method boolean NestedScrollingChildHelper.startNestedScroll(int, int)>
	//    5    9:ireturn         
	}

	public void stopNestedScroll()
	{
		getScrollingChildHelper().stopNestedScroll();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2489 <Method void NestedScrollingChildHelper.stopNestedScroll()>
	//    3    7:return          
	}

	public void stopNestedScroll(int i)
	{
		getScrollingChildHelper().stopNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2490 <Method void NestedScrollingChildHelper.stopNestedScroll(int)>
	//    4    8:return          
	}

	public void stopScroll()
	{
		setScrollState(0);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #708 <Method void setScrollState(int)>
		stopScrollersInternal();
	//    3    5:aload_0         
	//    4    6:invokespecial   #2455 <Method void stopScrollersInternal()>
	//    5    9:return          
	}

	public void swapAdapter(Adapter adapter, boolean flag)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2393 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, true, flag);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_1        
	//    6    8:iload_2         
	//    7    9:invokespecial   #2395 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		requestLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1493 <Method void requestLayout()>
	//   10   16:return          
	}

	void viewRangeUpdate(int i, int j, Object obj)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		int k = 0;
	//    4    9:iconst_0        
	//    5   10:istore          4
		do
		{
			if(k >= l)
				break;
	//    6   12:iload           4
	//    7   14:iload           5
	//    8   16:icmpge          106
			View view = mChildHelper.getUnfilteredChildAt(k);
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:astore          6
			ViewHolder viewholder = getChildViewHolderInt(view);
	//   14   30:aload           6
	//   15   32:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   35:astore          7
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i && viewholder.mPosition < i + j)
	//*  17   37:aload           7
	//*  18   39:ifnull          50
	//*  19   42:aload           7
	//*  20   44:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   47:ifeq            59
	//*  22   50:iload           4
	//*  23   52:iconst_1        
	//*  24   53:iadd            
	//*  25   54:istore          4
	//*  26   56:goto            12
	//*  27   59:aload           7
	//*  28   61:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  29   64:iload_1         
	//*  30   65:icmplt          50
	//*  31   68:aload           7
	//*  32   70:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  33   73:iload_1         
	//*  34   74:iload_2         
	//*  35   75:iadd            
	//*  36   76:icmpge          50
			{
				viewholder.addFlags(2);
	//   37   79:aload           7
	//   38   81:iconst_2        
	//   39   82:invokevirtual   #2047 <Method void RecyclerView$ViewHolder.addFlags(int)>
				viewholder.addChangePayload(obj);
	//   40   85:aload           7
	//   41   87:aload_3         
	//   42   88:invokevirtual   #2497 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				((LayoutParams)view.getLayoutParams()).mInsetsDirty = true;
	//   43   91:aload           6
	//   44   93:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   45   96:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   46   99:iconst_1        
	//   47  100:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}
			k++;
		} while(true);
	//*  48  103:goto            50
		mRecycler.viewRangeUpdate(i, j);
	//   49  106:aload_0         
	//   50  107:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   51  110:iload_1         
	//   52  111:iload_2         
	//   53  112:invokevirtual   #2499 <Method void RecyclerView$Recycler.viewRangeUpdate(int, int)>
	//   54  115:return          
	}

	static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC;
	private static final boolean ALLOW_THREAD_GAP_WORK;
	private static final int CLIP_TO_PADDING_ATTR[] = {
		0x10100eb
	};
	static final boolean DEBUG = false;
	static final boolean DISPATCH_TEMP_DETACH = false;
	private static final boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION;
	static final boolean FORCE_INVALIDATE_DISPLAY_LIST;
	static final long FOREVER_NS = 0xffffffffL;
	public static final int HORIZONTAL = 0;
	private static final boolean IGNORE_DETACHED_FOCUSED_CHILD;
	private static final int INVALID_POINTER = -1;
	public static final int INVALID_TYPE = -1;
	private static final Class LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE[];
	static final int MAX_SCROLL_DURATION = 2000;
	private static final int NESTED_SCROLLING_ATTRS[] = {
		0x1010436
	};
	public static final long NO_ID = -1L;
	public static final int NO_POSITION = -1;
	static final boolean POST_UPDATES_ON_ANIMATION;
	public static final int SCROLL_STATE_DRAGGING = 1;
	public static final int SCROLL_STATE_IDLE = 0;
	public static final int SCROLL_STATE_SETTLING = 2;
	static final String TAG = "RecyclerView";
	public static final int TOUCH_SLOP_DEFAULT = 0;
	public static final int TOUCH_SLOP_PAGING = 1;
	static final String TRACE_BIND_VIEW_TAG = "RV OnBindView";
	static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
	private static final String TRACE_HANDLE_ADAPTER_UPDATES_TAG = "RV PartialInvalidate";
	static final String TRACE_NESTED_PREFETCH_TAG = "RV Nested Prefetch";
	private static final String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = "RV FullInvalidate";
	private static final String TRACE_ON_LAYOUT_TAG = "RV OnLayout";
	static final String TRACE_PREFETCH_TAG = "RV Prefetch";
	static final String TRACE_SCROLL_TAG = "RV Scroll";
	static final boolean VERBOSE_TRACING = false;
	public static final int VERTICAL = 1;
	static final Interpolator sQuinticInterpolator = new Interpolator() {

		public float getInterpolation(float f)
		{
			f--;
		//    0    0:fload_1         
		//    1    1:fconst_1        
		//    2    2:fsub            
		//    3    3:fstore_1        
			return f * (f * f * f * f) + 1.0F;
		//    4    4:fload_1         
		//    5    5:fload_1         
		//    6    6:fload_1         
		//    7    7:fmul            
		//    8    8:fload_1         
		//    9    9:fmul            
		//   10   10:fload_1         
		//   11   11:fmul            
		//   12   12:fmul            
		//   13   13:fconst_1        
		//   14   14:fadd            
		//   15   15:freturn         
		}

	}
;
	RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
	private final AccessibilityManager mAccessibilityManager;
	private OnItemTouchListener mActiveOnItemTouchListener;
	Adapter mAdapter;
	AdapterHelper mAdapterHelper;
	boolean mAdapterUpdateDuringMeasure;
	private EdgeEffect mBottomGlow;
	private ChildDrawingOrderCallback mChildDrawingOrderCallback;
	ChildHelper mChildHelper;
	boolean mClipToPadding;
	boolean mDataSetHasChangedAfterLayout;
	private int mDispatchScrollCounter;
	private int mEatRequestLayout;
	private int mEatenAccessibilityChangeFlags;
	boolean mEnableFastScroller;
	boolean mFirstLayoutComplete;
	GapWorker mGapWorker;
	boolean mHasFixedSize;
	private boolean mIgnoreMotionEventTillDown;
	private int mInitialTouchX;
	private int mInitialTouchY;
	boolean mIsAttached;
	ItemAnimator mItemAnimator;
	private ItemAnimator.ItemAnimatorListener mItemAnimatorListener;
	private Runnable mItemAnimatorRunner = new Runnable() {

		public void run()
		{
			if(mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #14  <Field RecyclerView this$0>
		//*   2    4:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          20
				mItemAnimator.runPendingAnimations();
		//    4   10:aload_0         
		//    5   11:getfield        #14  <Field RecyclerView this$0>
		//    6   14:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:invokevirtual   #28  <Method void RecyclerView$ItemAnimator.runPendingAnimations()>
			mPostedAnimatorRunner = false;
		//    8   20:aload_0         
		//    9   21:getfield        #14  <Field RecyclerView this$0>
		//   10   24:iconst_0        
		//   11   25:putfield        #32  <Field boolean RecyclerView.mPostedAnimatorRunner>
		//   12   28:return          
		}

		final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
	}
;
	final ArrayList mItemDecorations;
	boolean mItemsAddedOrRemoved;
	boolean mItemsChanged;
	private int mLastTouchX;
	private int mLastTouchY;
	LayoutManager mLayout;
	boolean mLayoutFrozen;
	private int mLayoutOrScrollCounter;
	boolean mLayoutRequestEaten;
	private EdgeEffect mLeftGlow;
	private final int mMaxFlingVelocity;
	private final int mMinFlingVelocity;
	private final int mMinMaxLayoutPositions[];
	private final int mNestedOffsets[];
	private final RecyclerViewDataObserver mObserver;
	private List mOnChildAttachStateListeners;
	private OnFlingListener mOnFlingListener;
	private final ArrayList mOnItemTouchListeners;
	final List mPendingAccessibilityImportanceChange;
	private SavedState mPendingSavedState;
	boolean mPostedAnimatorRunner;
	GapWorker.LayoutPrefetchRegistryImpl mPrefetchRegistry;
	private boolean mPreserveFocusAfterLayout;
	final Recycler mRecycler;
	RecyclerListener mRecyclerListener;
	private EdgeEffect mRightGlow;
	private float mScaledHorizontalScrollFactor;
	private float mScaledVerticalScrollFactor;
	private final int mScrollConsumed[];
	private OnScrollListener mScrollListener;
	private List mScrollListeners;
	private final int mScrollOffset[];
	private int mScrollPointerId;
	private int mScrollState;
	private NestedScrollingChildHelper mScrollingChildHelper;
	final State mState;
	final Rect mTempRect;
	private final Rect mTempRect2;
	final RectF mTempRectF;
	private EdgeEffect mTopGlow;
	private int mTouchSlop;
	final Runnable mUpdateChildViewsRunnable;
	private VelocityTracker mVelocityTracker;
	final ViewFlinger mViewFlinger;
	private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback;
	final ViewInfoStore mViewInfoStore;

	static 
	{
	//    0    0:iconst_1        
	//    1    1:newarray        int[]
	//    2    3:dup             
	//    3    4:iconst_0        
	//    4    5:ldc2            #309 <Int 0x1010436>
	//    5    8:iastore         
	//    6    9:putstatic       #311 <Field int[] NESTED_SCROLLING_ATTRS>
	//    7   12:iconst_1        
	//    8   13:newarray        int[]
	//    9   15:dup             
	//   10   16:iconst_0        
	//   11   17:ldc2            #312 <Int 0x10100eb>
	//   12   20:iastore         
	//   13   21:putstatic       #314 <Field int[] CLIP_TO_PADDING_ATTR>
		boolean flag;
		if(android.os.Build.VERSION.SDK_INT == 18 || android.os.Build.VERSION.SDK_INT == 19 || android.os.Build.VERSION.SDK_INT == 20)
	//*  14   24:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  15   27:bipush          18
	//*  16   29:icmpeq          48
	//*  17   32:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  18   35:bipush          19
	//*  19   37:icmpeq          48
	//*  20   40:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  21   43:bipush          20
	//*  22   45:icmpne          166
			flag = true;
	//   23   48:iconst_1        
	//   24   49:istore_0        
		else
	//*  25   50:iload_0         
	//*  26   51:putstatic       #321 <Field boolean FORCE_INVALIDATE_DISPLAY_LIST>
	//*  27   54:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  28   57:bipush          23
	//*  29   59:icmplt          171
	//*  30   62:iconst_1        
	//*  31   63:istore_0        
	//*  32   64:iload_0         
	//*  33   65:putstatic       #323 <Field boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
	//*  34   68:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  35   71:bipush          16
	//*  36   73:icmplt          176
	//*  37   76:iconst_1        
	//*  38   77:istore_0        
	//*  39   78:iload_0         
	//*  40   79:putstatic       #325 <Field boolean POST_UPDATES_ON_ANIMATION>
	//*  41   82:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  42   85:bipush          21
	//*  43   87:icmplt          181
	//*  44   90:iconst_1        
	//*  45   91:istore_0        
	//*  46   92:iload_0         
	//*  47   93:putstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  48   96:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  49   99:bipush          15
	//*  50  101:icmpgt          186
	//*  51  104:iconst_1        
	//*  52  105:istore_0        
	//*  53  106:iload_0         
	//*  54  107:putstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  55  110:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  56  113:bipush          15
	//*  57  115:icmpgt          191
	//*  58  118:iconst_1        
	//*  59  119:istore_0        
	//*  60  120:iload_0         
	//*  61  121:putstatic       #331 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//*  62  124:iconst_4        
	//*  63  125:anewarray       Class[]
	//*  64  128:dup             
	//*  65  129:iconst_0        
	//*  66  130:ldc2            #335 <Class Context>
	//*  67  133:aastore         
	//*  68  134:dup             
	//*  69  135:iconst_1        
	//*  70  136:ldc2            #337 <Class AttributeSet>
	//*  71  139:aastore         
	//*  72  140:dup             
	//*  73  141:iconst_2        
	//*  74  142:getstatic       #343 <Field Class Integer.TYPE>
	//*  75  145:aastore         
	//*  76  146:dup             
	//*  77  147:iconst_3        
	//*  78  148:getstatic       #343 <Field Class Integer.TYPE>
	//*  79  151:aastore         
	//*  80  152:putstatic       #345 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//*  81  155:new             #14  <Class RecyclerView$3>
	//*  82  158:dup             
	//*  83  159:invokespecial   #348 <Method void RecyclerView$3()>
	//*  84  162:putstatic       #350 <Field Interpolator sQuinticInterpolator>
	//*  85  165:return          
			flag = false;
	//   86  166:iconst_0        
	//   87  167:istore_0        
		FORCE_INVALIDATE_DISPLAY_LIST = flag;
		if(android.os.Build.VERSION.SDK_INT >= 23)
			flag = true;
		else
	//*  88  168:goto            50
			flag = false;
	//   89  171:iconst_0        
	//   90  172:istore_0        
		ALLOW_SIZE_IN_UNSPECIFIED_SPEC = flag;
		if(android.os.Build.VERSION.SDK_INT >= 16)
			flag = true;
		else
	//*  91  173:goto            64
			flag = false;
	//   92  176:iconst_0        
	//   93  177:istore_0        
		POST_UPDATES_ON_ANIMATION = flag;
		if(android.os.Build.VERSION.SDK_INT >= 21)
			flag = true;
		else
	//*  94  178:goto            78
			flag = false;
	//   95  181:iconst_0        
	//   96  182:istore_0        
		ALLOW_THREAD_GAP_WORK = flag;
		if(android.os.Build.VERSION.SDK_INT <= 15)
			flag = true;
		else
	//*  97  183:goto            92
			flag = false;
	//   98  186:iconst_0        
	//   99  187:istore_0        
		FORCE_ABS_FOCUS_SEARCH_DIRECTION = flag;
		if(android.os.Build.VERSION.SDK_INT <= 15)
			flag = true;
		else
	//* 100  188:goto            106
			flag = false;
	//  101  191:iconst_0        
	//  102  192:istore_0        
		IGNORE_DETACHED_FOCUSED_CHILD = flag;
		LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE = (new Class[] {
			android/content/Context, android/util/AttributeSet, Integer.TYPE, Integer.TYPE
		});
	//* 103  193:goto            120
	}


/*
	static void access$000(RecyclerView recyclerview, View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
	{
		recyclerview.attachViewToParent(view, i, layoutparams);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iload_2         
	//    3    3:aload_3         
	//    4    4:invokevirtual   #619 <Method void attachViewToParent(View, int, android.view.ViewGroup$LayoutParams)>
		return;
	//    5    7:return          
	}

*/


/*
	static void access$100(RecyclerView recyclerview, int i)
	{
		recyclerview.detachViewFromParent(i);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:invokevirtual   #624 <Method void detachViewFromParent(int)>
		return;
	//    3    5:return          
	}

*/


/*
	static void access$1200(RecyclerView recyclerview, int i, int j)
	{
		recyclerview.setMeasuredDimension(i, j);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
		return;
	//    4    6:return          
	}

*/


/*
	static int[] access$500(RecyclerView recyclerview)
	{
		return recyclerview.mScrollConsumed;
	//    0    0:aload_0         
	//    1    1:getfield        #446 <Field int[] mScrollConsumed>
	//    2    4:areturn         
	}

*/


/*
	static boolean access$700(RecyclerView recyclerview)
	{
		return recyclerview.awakenScrollBars();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//    2    4:ireturn         
	}

*/


/*
	static boolean access$800()
	{
		return ALLOW_THREAD_GAP_WORK;
	//    0    0:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//    1    3:ireturn         
	}

*/

	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$1

/* anonymous class */
	class LayoutManager._cls1
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_3        
			int i = getDecoratedRight(view);
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedRight(View)>
		//    8   16:istore_2        
			return layoutparams.rightMargin + i;
		//    9   17:aload_3         
		//   10   18:getfield        #46  <Field int RecyclerView$LayoutParams.rightMargin>
		//   11   21:iload_2         
		//   12   22:iadd            
		//   13   23:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedLeft(view) - layoutparams.leftMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedLeft(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.leftMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getWidth() - getPaddingRight();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getWidth()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingRight()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingLeft()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}


	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$2

/* anonymous class */
	class LayoutManager._cls2
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_3        
			int i = getDecoratedBottom(view);
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedBottom(View)>
		//    8   16:istore_2        
			return layoutparams.bottomMargin + i;
		//    9   17:aload_3         
		//   10   18:getfield        #46  <Field int RecyclerView$LayoutParams.bottomMargin>
		//   11   21:iload_2         
		//   12   22:iadd            
		//   13   23:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedTop(view) - layoutparams.topMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedTop(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.topMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getHeight() - getPaddingBottom();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getHeight()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingBottom()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingTop();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingTop()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}

}
