// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate safe 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.*;
import android.support.v4.os.TraceCompat;
import android.support.v4.util.Preconditions;
import android.support.v4.view.*;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.*;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import java.lang.annotation.Annotation;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package android.support.v7.widget:
//			ViewInfoStore, DefaultItemAnimator, RecyclerViewAccessibilityDelegate, ChildHelper, 
//			AdapterHelper, FastScroller, GapWorker, ViewBoundsCheck

public class RecyclerView extends ViewGroup
	implements ScrollingView, NestedScrollingChild2
{
	public static abstract class Adapter
	{

		public final void bindViewHolder(ViewHolder viewholder, int i)
		{
			viewholder.mPosition = i;
		//    0    0:aload_1         
		//    1    1:iload_2         
		//    2    2:putfield        #33  <Field int RecyclerView$ViewHolder.mPosition>
			if(hasStableIds())
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #37  <Method boolean hasStableIds()>
		//*   5    9:ifeq            21
				viewholder.mItemId = getItemId(i);
		//    6   12:aload_1         
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:invokevirtual   #41  <Method long getItemId(int)>
		//   10   18:putfield        #45  <Field long RecyclerView$ViewHolder.mItemId>
			viewholder.setFlags(1, 519);
		//   11   21:aload_1         
		//   12   22:iconst_1        
		//   13   23:sipush          519
		//   14   26:invokevirtual   #49  <Method void RecyclerView$ViewHolder.setFlags(int, int)>
			TraceCompat.beginSection("RV OnBindView");
		//   15   29:ldc1            #51  <String "RV OnBindView">
		//   16   31:invokestatic    #57  <Method void TraceCompat.beginSection(String)>
			onBindViewHolder(viewholder, i, viewholder.getUnmodifiedPayloads());
		//   17   34:aload_0         
		//   18   35:aload_1         
		//   19   36:iload_2         
		//   20   37:aload_1         
		//   21   38:invokevirtual   #61  <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//   22   41:invokevirtual   #65  <Method void onBindViewHolder(RecyclerView$ViewHolder, int, List)>
			viewholder.clearPayload();
		//   23   44:aload_1         
		//   24   45:invokevirtual   #68  <Method void RecyclerView$ViewHolder.clearPayload()>
			viewholder = ((ViewHolder) (viewholder.itemView.getLayoutParams()));
		//   25   48:aload_1         
		//   26   49:getfield        #72  <Field View RecyclerView$ViewHolder.itemView>
		//   27   52:invokevirtual   #78  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   28   55:astore_1        
			if(viewholder instanceof LayoutParams)
		//*  29   56:aload_1         
		//*  30   57:instanceof      #80  <Class RecyclerView$LayoutParams>
		//*  31   60:ifeq            71
				((LayoutParams)viewholder).mInsetsDirty = true;
		//   32   63:aload_1         
		//   33   64:checkcast       #80  <Class RecyclerView$LayoutParams>
		//   34   67:iconst_1        
		//   35   68:putfield        #83  <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			TraceCompat.endSection();
		//   36   71:invokestatic    #86  <Method void TraceCompat.endSection()>
		//   37   74:return          
		}

		public final ViewHolder createViewHolder(ViewGroup viewgroup, int i)
		{
			TraceCompat.beginSection("RV CreateView");
		//    0    0:ldc1            #93  <String "RV CreateView">
		//    1    2:invokestatic    #57  <Method void TraceCompat.beginSection(String)>
			viewgroup = ((ViewGroup) (onCreateViewHolder(viewgroup, i)));
		//    2    5:aload_0         
		//    3    6:aload_1         
		//    4    7:iload_2         
		//    5    8:invokevirtual   #96  <Method RecyclerView$ViewHolder onCreateViewHolder(ViewGroup, int)>
		//    6   11:astore_1        
			if(((ViewHolder) (viewgroup)).itemView.getParent() != null)
		//*   7   12:aload_1         
		//*   8   13:getfield        #72  <Field View RecyclerView$ViewHolder.itemView>
		//*   9   16:invokevirtual   #100 <Method ViewParent View.getParent()>
		//*  10   19:ifnull          32
				throw new IllegalStateException("ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)");
		//   11   22:new             #102 <Class IllegalStateException>
		//   12   25:dup             
		//   13   26:ldc1            #104 <String "ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)">
		//   14   28:invokespecial   #106 <Method void IllegalStateException(String)>
		//   15   31:athrow          
			viewgroup.mItemViewType = i;
		//   16   32:aload_1         
		//   17   33:iload_2         
		//   18   34:putfield        #109 <Field int RecyclerView$ViewHolder.mItemViewType>
			TraceCompat.endSection();
		//   19   37:invokestatic    #86  <Method void TraceCompat.endSection()>
			return ((ViewHolder) (viewgroup));
		//   20   40:aload_1         
		//   21   41:areturn         
			viewgroup;
		//   22   42:astore_1        
			TraceCompat.endSection();
		//   23   43:invokestatic    #86  <Method void TraceCompat.endSection()>
			throw viewgroup;
		//   24   46:aload_1         
		//   25   47:athrow          
		}

		public abstract int getItemCount();

		public long getItemId(int i)
		{
			return -1L;
		//    0    0:ldc2w           #113 <Long -1L>
		//    1    3:lreturn         
		}

		public int getItemViewType(int i)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public final boolean hasObservers()
		{
			return mObservable.hasObservers();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #119 <Method boolean RecyclerView$AdapterDataObservable.hasObservers()>
		//    3    7:ireturn         
		}

		public final boolean hasStableIds()
		{
			return mHasStableIds;
		//    0    0:aload_0         
		//    1    1:getfield        #23  <Field boolean mHasStableIds>
		//    2    4:ireturn         
		}

		public final void notifyDataSetChanged()
		{
			mObservable.notifyChanged();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #123 <Method void RecyclerView$AdapterDataObservable.notifyChanged()>
		//    3    7:return          
		}

		public final void notifyItemChanged(int i)
		{
			mObservable.notifyItemRangeChanged(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #128 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemChanged(int i, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, 1, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:aload_2         
		//    5    7:invokevirtual   #133 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemInserted(int i)
		{
			mObservable.notifyItemRangeInserted(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #137 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemMoved(int i, int j)
		{
			mObservable.notifyItemMoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #140 <Method void RecyclerView$AdapterDataObservable.notifyItemMoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j)
		{
			mObservable.notifyItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #128 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, j, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:aload_3         
		//    5    7:invokevirtual   #133 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemRangeInserted(int i, int j)
		{
			mObservable.notifyItemRangeInserted(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #137 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeRemoved(int i, int j)
		{
			mObservable.notifyItemRangeRemoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #143 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRemoved(int i)
		{
			mObservable.notifyItemRangeRemoved(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #143 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public void onAttachedToRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public abstract void onBindViewHolder(ViewHolder viewholder, int i);

		public void onBindViewHolder(ViewHolder viewholder, int i, List list)
		{
			onBindViewHolder(viewholder, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #148 <Method void onBindViewHolder(RecyclerView$ViewHolder, int)>
		//    4    6:return          
		}

		public abstract ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i);

		public void onDetachedFromRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public boolean onFailedToRecycleView(ViewHolder viewholder)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onViewAttachedToWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewDetachedFromWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewRecycled(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void registerAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.registerObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #164 <Method void RecyclerView$AdapterDataObservable.registerObserver(Object)>
		//    4    8:return          
		}

		public void setHasStableIds(boolean flag)
		{
			if(hasObservers())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #167 <Method boolean hasObservers()>
		//*   2    4:ifeq            17
			{
				throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
		//    3    7:new             #102 <Class IllegalStateException>
		//    4   10:dup             
		//    5   11:ldc1            #169 <String "Cannot change whether this adapter has stable IDs while the adapter has registered observers.">
		//    6   13:invokespecial   #106 <Method void IllegalStateException(String)>
		//    7   16:athrow          
			} else
			{
				mHasStableIds = flag;
		//    8   17:aload_0         
		//    9   18:iload_1         
		//   10   19:putfield        #23  <Field boolean mHasStableIds>
				return;
		//   11   22:return          
			}
		}

		public void unregisterAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.unregisterObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #173 <Method void RecyclerView$AdapterDataObservable.unregisterObserver(Object)>
		//    4    8:return          
		}

		private boolean mHasStableIds;
		private final AdapterDataObservable mObservable = new AdapterDataObservable();

		public Adapter()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #16  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #18  <Class RecyclerView$AdapterDataObservable>
		//    4    8:dup             
		//    5    9:invokespecial   #19  <Method void RecyclerView$AdapterDataObservable()>
		//    6   12:putfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
			mHasStableIds = false;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #23  <Field boolean mHasStableIds>
		//   10   20:return          
		}
	}

	static class AdapterDataObservable extends Observable
	{

		public boolean hasObservers()
		{
			return mObservers.isEmpty() ^ true;
		//    0    0:aload_0         
		//    1    1:getfield        #19  <Field ArrayList mObservers>
		//    2    4:invokevirtual   #24  <Method boolean ArrayList.isEmpty()>
		//    3    7:iconst_1        
		//    4    8:ixor            
		//    5    9:ireturn         
		}

		public void notifyChanged()
		{
			for(int i = mObservers.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            35
				((AdapterDataObserver)mObservers.get(i)).onChanged();
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_1         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:invokevirtual   #38  <Method void RecyclerView$AdapterDataObserver.onChanged()>

		//   14   28:iload_1         
		//   15   29:iconst_1        
		//   16   30:isub            
		//   17   31:istore_1        
		//*  18   32:goto            10
		//   19   35:return          
		}

		public void notifyItemMoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            38
				((AdapterDataObserver)mObservers.get(k)).onItemRangeMoved(i, j, 1);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:iconst_1        
		//   16   28:invokevirtual   #44  <Method void RecyclerView$AdapterDataObserver.onItemRangeMoved(int, int, int)>

		//   17   31:iload_3         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_3        
		//*  21   35:goto            10
		//   22   38:return          
		}

		public void notifyItemRangeChanged(int i, int j)
		{
			notifyItemRangeChanged(i, j, ((Object) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aconst_null     
		//    4    4:invokevirtual   #48  <Method void notifyItemRangeChanged(int, int, Object)>
		//    5    7:return          
		}

		public void notifyItemRangeChanged(int i, int j, Object obj)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            43
				((AdapterDataObserver)mObservers.get(k)).onItemRangeChanged(i, j, obj);
		//    8   16:aload_0         
		//    9   17:getfield        #19  <Field ArrayList mObservers>
		//   10   20:iload           4
		//   11   22:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   28:iload_1         
		//   14   29:iload_2         
		//   15   30:aload_3         
		//   16   31:invokevirtual   #52  <Method void RecyclerView$AdapterDataObserver.onItemRangeChanged(int, int, Object)>

		//   17   34:iload           4
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:istore          4
		//*  21   40:goto            11
		//   22   43:return          
		}

		public void notifyItemRangeInserted(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeInserted(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #57  <Method void RecyclerView$AdapterDataObserver.onItemRangeInserted(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		public void notifyItemRangeRemoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeRemoved(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #61  <Method void RecyclerView$AdapterDataObserver.onItemRangeRemoved(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		AdapterDataObservable()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #12  <Method void Observable()>
		//    2    4:return          
		}
	}

	public static abstract class AdapterDataObserver
	{

		public void onChanged()
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			onItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #19  <Method void onItemRangeChanged(int, int)>
		//    4    6:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
		//    0    0:return          
		}

		public AdapterDataObserver()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface ChildDrawingOrderCallback
	{

		public abstract int onGetChildDrawingOrder(int i, int j);
	}

	public static class EdgeEffectFactory
	{

		protected EdgeEffect createEdgeEffect(RecyclerView recyclerview, int i)
		{
			return new EdgeEffect(recyclerview.getContext());
		//    0    0:new             #29  <Class EdgeEffect>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:invokevirtual   #33  <Method Context RecyclerView.getContext()>
		//    4    8:invokespecial   #36  <Method void EdgeEffect(Context)>
		//    5   11:areturn         
		}

		public static final int DIRECTION_BOTTOM = 3;
		public static final int DIRECTION_LEFT = 0;
		public static final int DIRECTION_RIGHT = 2;
		public static final int DIRECTION_TOP = 1;

		public EdgeEffectFactory()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #23  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface EdgeEffectFactory.EdgeDirection
		extends Annotation
	{
	}

	public static abstract class ItemAnimator
	{

		static int buildAdapterChangeFlagsForAnimations(ViewHolder viewholder)
		{
			int j = viewholder.mFlags & 0xe;
		//    0    0:aload_0         
		//    1    1:invokestatic    #71  <Method int RecyclerView$ViewHolder.access$1600(RecyclerView$ViewHolder)>
		//    2    4:bipush          14
		//    3    6:iand            
		//    4    7:istore_2        
			if(viewholder.isInvalid())
		//*   5    8:aload_0         
		//*   6    9:invokevirtual   #75  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   7   12:ifeq            17
				return 4;
		//    8   15:iconst_4        
		//    9   16:ireturn         
			int i = j;
		//   10   17:iload_2         
		//   11   18:istore_1        
			if((j & 4) == 0)
		//*  12   19:iload_2         
		//*  13   20:iconst_4        
		//*  14   21:iand            
		//*  15   22:ifne            65
			{
				int k = viewholder.getOldPosition();
		//   16   25:aload_0         
		//   17   26:invokevirtual   #79  <Method int RecyclerView$ViewHolder.getOldPosition()>
		//   18   29:istore_3        
				int l = viewholder.getAdapterPosition();
		//   19   30:aload_0         
		//   20   31:invokevirtual   #82  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//   21   34:istore          4
				i = j;
		//   22   36:iload_2         
		//   23   37:istore_1        
				if(k != -1)
		//*  24   38:iload_3         
		//*  25   39:iconst_m1       
		//*  26   40:icmpeq          65
				{
					i = j;
		//   27   43:iload_2         
		//   28   44:istore_1        
					if(l != -1)
		//*  29   45:iload           4
		//*  30   47:iconst_m1       
		//*  31   48:icmpeq          65
					{
						i = j;
		//   32   51:iload_2         
		//   33   52:istore_1        
						if(k != l)
		//*  34   53:iload_3         
		//*  35   54:iload           4
		//*  36   56:icmpeq          65
							i = j | 0x800;
		//   37   59:iload_2         
		//   38   60:sipush          2048
		//   39   63:ior             
		//   40   64:istore_1        
					}
				}
			}
			return i;
		//   41   65:iload_1         
		//   42   66:ireturn         
		}

		public abstract boolean animateAppearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateDisappearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animatePersistence(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
		{
			return true;
		//    0    0:iconst_1        
		//    1    1:ireturn         
		}

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder, List list)
		{
			return canReuseUpdatedViewHolder(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #96  <Method boolean canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//    3    5:ireturn         
		}

		public final void dispatchAnimationFinished(ViewHolder viewholder)
		{
			onAnimationFinished(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #103 <Method void onAnimationFinished(RecyclerView$ViewHolder)>
			if(mListener != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//*   5    9:ifnull          22
				mListener.onAnimationFinished(viewholder);
		//    6   12:aload_0         
		//    7   13:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    8   16:aload_1         
		//    9   17:invokeinterface #104 <Method void RecyclerView$ItemAnimator$ItemAnimatorListener.onAnimationFinished(RecyclerView$ViewHolder)>
		//   10   22:return          
		}

		public final void dispatchAnimationStarted(ViewHolder viewholder)
		{
			onAnimationStarted(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #108 <Method void onAnimationStarted(RecyclerView$ViewHolder)>
		//    3    5:return          
		}

		public final void dispatchAnimationsFinished()
		{
			int j = mFinishedListeners.size();
		//    0    0:aload_0         
		//    1    1:getfield        #51  <Field ArrayList mFinishedListeners>
		//    2    4:invokevirtual   #112 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          38
				((ItemAnimatorFinishedListener)mFinishedListeners.get(i)).onAnimationsFinished();
		//    9   15:aload_0         
		//   10   16:getfield        #51  <Field ArrayList mFinishedListeners>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #116 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #12  <Class RecyclerView$ItemAnimator$ItemAnimatorFinishedListener>
		//   14   26:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>

		//   15   31:iload_1         
		//   16   32:iconst_1        
		//   17   33:iadd            
		//   18   34:istore_1        
		//*  19   35:goto            10
			mFinishedListeners.clear();
		//   20   38:aload_0         
		//   21   39:getfield        #51  <Field ArrayList mFinishedListeners>
		//   22   42:invokevirtual   #122 <Method void ArrayList.clear()>
		//   23   45:return          
		}

		public abstract void endAnimation(ViewHolder viewholder);

		public abstract void endAnimations();

		public long getAddDuration()
		{
			return mAddDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field long mAddDuration>
		//    2    4:lreturn         
		}

		public long getChangeDuration()
		{
			return mChangeDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #63  <Field long mChangeDuration>
		//    2    4:lreturn         
		}

		public long getMoveDuration()
		{
			return mMoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #61  <Field long mMoveDuration>
		//    2    4:lreturn         
		}

		public long getRemoveDuration()
		{
			return mRemoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #57  <Field long mRemoveDuration>
		//    2    4:lreturn         
		}

		public abstract boolean isRunning();

		public final boolean isRunning(ItemAnimatorFinishedListener itemanimatorfinishedlistener)
		{
			boolean flag = isRunning();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #133 <Method boolean isRunning()>
		//    2    4:istore_2        
			if(itemanimatorfinishedlistener != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          30
			{
				if(!flag)
		//*   5    9:iload_2         
		//*   6   10:ifne            21
				{
					itemanimatorfinishedlistener.onAnimationsFinished();
		//    7   13:aload_1         
		//    8   14:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>
					return flag;
		//    9   19:iload_2         
		//   10   20:ireturn         
				}
				mFinishedListeners.add(((Object) (itemanimatorfinishedlistener)));
		//   11   21:aload_0         
		//   12   22:getfield        #51  <Field ArrayList mFinishedListeners>
		//   13   25:aload_1         
		//   14   26:invokevirtual   #137 <Method boolean ArrayList.add(Object)>
		//   15   29:pop             
			}
			return flag;
		//   16   30:iload_2         
		//   17   31:ireturn         
		}

		public ItemHolderInfo obtainHolderInfo()
		{
			return new ItemHolderInfo();
		//    0    0:new             #18  <Class RecyclerView$ItemAnimator$ItemHolderInfo>
		//    1    3:dup             
		//    2    4:invokespecial   #140 <Method void RecyclerView$ItemAnimator$ItemHolderInfo()>
		//    3    7:areturn         
		}

		public void onAnimationFinished(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onAnimationStarted(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public ItemHolderInfo recordPostLayoutInformation(State state, ViewHolder viewholder)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public ItemHolderInfo recordPreLayoutInformation(State state, ViewHolder viewholder, int i, List list)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public abstract void runPendingAnimations();

		public void setAddDuration(long l)
		{
			mAddDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #55  <Field long mAddDuration>
		//    3    5:return          
		}

		public void setChangeDuration(long l)
		{
			mChangeDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #63  <Field long mChangeDuration>
		//    3    5:return          
		}

		void setListener(ItemAnimatorListener itemanimatorlistener)
		{
			mListener = itemanimatorlistener;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    3    5:return          
		}

		public void setMoveDuration(long l)
		{
			mMoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #61  <Field long mMoveDuration>
		//    3    5:return          
		}

		public void setRemoveDuration(long l)
		{
			mRemoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #57  <Field long mRemoveDuration>
		//    3    5:return          
		}

		public static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		public static final int FLAG_CHANGED = 2;
		public static final int FLAG_INVALIDATED = 4;
		public static final int FLAG_MOVED = 2048;
		public static final int FLAG_REMOVED = 8;
		private long mAddDuration;
		private long mChangeDuration;
		private ArrayList mFinishedListeners;
		private ItemAnimatorListener mListener;
		private long mMoveDuration;
		private long mRemoveDuration;

		public ItemAnimator()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #44  <Method void Object()>
			mListener = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
			mFinishedListeners = new ArrayList();
		//    5    9:aload_0         
		//    6   10:new             #48  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #49  <Method void ArrayList()>
		//    9   17:putfield        #51  <Field ArrayList mFinishedListeners>
			mAddDuration = 120L;
		//   10   20:aload_0         
		//   11   21:ldc2w           #52  <Long 120L>
		//   12   24:putfield        #55  <Field long mAddDuration>
			mRemoveDuration = 120L;
		//   13   27:aload_0         
		//   14   28:ldc2w           #52  <Long 120L>
		//   15   31:putfield        #57  <Field long mRemoveDuration>
			mMoveDuration = 250L;
		//   16   34:aload_0         
		//   17   35:ldc2w           #58  <Long 250L>
		//   18   38:putfield        #61  <Field long mMoveDuration>
			mChangeDuration = 250L;
		//   19   41:aload_0         
		//   20   42:ldc2w           #58  <Long 250L>
		//   21   45:putfield        #63  <Field long mChangeDuration>
		//   22   48:return          
		}
	}

	public static interface ItemAnimator.AdapterChanges
		extends Annotation
	{
	}

	public static interface ItemAnimator.ItemAnimatorFinishedListener
	{

		public abstract void onAnimationsFinished();
	}

	static interface ItemAnimator.ItemAnimatorListener
	{

		public abstract void onAnimationFinished(ViewHolder viewholder);
	}

	public static class ItemAnimator.ItemHolderInfo
	{

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder)
		{
			return setFrom(viewholder, 0);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #26  <Method RecyclerView$ItemAnimator$ItemHolderInfo setFrom(RecyclerView$ViewHolder, int)>
		//    4    6:areturn         
		}

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder, int i)
		{
			viewholder = ((ViewHolder) (viewholder.itemView));
		//    0    0:aload_1         
		//    1    1:getfield        #32  <Field View RecyclerView$ViewHolder.itemView>
		//    2    4:astore_1        
			left = ((View) (viewholder)).getLeft();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #38  <Method int View.getLeft()>
		//    6   10:putfield        #40  <Field int left>
			top = ((View) (viewholder)).getTop();
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:invokevirtual   #43  <Method int View.getTop()>
		//   10   18:putfield        #45  <Field int top>
			right = ((View) (viewholder)).getRight();
		//   11   21:aload_0         
		//   12   22:aload_1         
		//   13   23:invokevirtual   #48  <Method int View.getRight()>
		//   14   26:putfield        #50  <Field int right>
			bottom = ((View) (viewholder)).getBottom();
		//   15   29:aload_0         
		//   16   30:aload_1         
		//   17   31:invokevirtual   #53  <Method int View.getBottom()>
		//   18   34:putfield        #55  <Field int bottom>
			return this;
		//   19   37:aload_0         
		//   20   38:areturn         
		}

		public int bottom;
		public int changeFlags;
		public int left;
		public int right;
		public int top;

		public ItemAnimator.ItemHolderInfo()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	private class ItemAnimatorRestoreListener
		implements ItemAnimator.ItemAnimatorListener
	{

		public void onAnimationFinished(ViewHolder viewholder)
		{
			viewholder.setIsRecyclable(true);
		//    0    0:aload_1         
		//    1    1:iconst_1        
		//    2    2:invokevirtual   #27  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			if(viewholder.mShadowedHolder != null && viewholder.mShadowingHolder == null)
		//*   3    5:aload_1         
		//*   4    6:getfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
		//*   5    9:ifnull          24
		//*   6   12:aload_1         
		//*   7   13:getfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		//*   8   16:ifnonnull       24
				viewholder.mShadowedHolder = null;
		//    9   19:aload_1         
		//   10   20:aconst_null     
		//   11   21:putfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			viewholder.mShadowingHolder = null;
		//   12   24:aload_1         
		//   13   25:aconst_null     
		//   14   26:putfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
			if(!viewholder.shouldBeKeptAsChild() && !removeAnimatingView(viewholder.itemView) && viewholder.isTmpDetached())
		//*  15   29:aload_1         
		//*  16   30:invokestatic    #38  <Method boolean RecyclerView$ViewHolder.access$1500(RecyclerView$ViewHolder)>
		//*  17   33:ifne            69
		//*  18   36:aload_0         
		//*  19   37:getfield        #15  <Field RecyclerView this$0>
		//*  20   40:aload_1         
		//*  21   41:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   44:invokevirtual   #46  <Method boolean RecyclerView.removeAnimatingView(View)>
		//*  23   47:ifne            69
		//*  24   50:aload_1         
		//*  25   51:invokevirtual   #50  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  26   54:ifeq            69
				removeDetachedView(viewholder.itemView, false);
		//   27   57:aload_0         
		//   28   58:getfield        #15  <Field RecyclerView this$0>
		//   29   61:aload_1         
		//   30   62:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//   31   65:iconst_0        
		//   32   66:invokevirtual   #54  <Method void RecyclerView.removeDetachedView(View, boolean)>
		//   33   69:return          
		}

		final RecyclerView this$0;

		ItemAnimatorRestoreListener()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #15  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #18  <Method void Object()>
		//    5    9:return          
		}
	}

	public static abstract class ItemDecoration
	{

		public void getItemOffsets(Rect rect, int i, RecyclerView recyclerview)
		{
			rect.set(0, 0, 0, 0);
		//    0    0:aload_1         
		//    1    1:iconst_0        
		//    2    2:iconst_0        
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #21  <Method void Rect.set(int, int, int, int)>
		//    6    8:return          
		}

		public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, State state)
		{
			getItemOffsets(rect, ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition(), recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #29  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    6:checkcast       #31  <Class RecyclerView$LayoutParams>
		//    5    9:invokevirtual   #35  <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    6   12:aload_3         
		//    7   13:invokevirtual   #37  <Method void getItemOffsets(Rect, int, RecyclerView)>
		//    8   16:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDraw(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #42  <Method void onDraw(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDrawOver(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #45  <Method void onDrawOver(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public ItemDecoration()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class LayoutManager
	{

		private void addViewInt(View view, int i, boolean flag)
		{
			Object obj = ((Object) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          6
			if(!flag && !((ViewHolder) (obj)).isRemoved())
		//*   3    6:iload_3         
		//*   4    7:ifne            36
		//*   5   10:aload           6
		//*   6   12:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   15:ifeq            21
		//*   8   18:goto            36
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(((ViewHolder) (obj)));
		//    9   21:aload_0         
		//   10   22:getfield        #95  <Field RecyclerView mRecyclerView>
		//   11   25:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   12   28:aload           6
		//   13   30:invokevirtual   #105 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  14   33:goto            48
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(((ViewHolder) (obj)));
		//   15   36:aload_0         
		//   16   37:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   40:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   18   43:aload           6
		//   19   45:invokevirtual   #108 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//   20   48:aload_1         
		//   21   49:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   22   52:checkcast       #116 <Class RecyclerView$LayoutParams>
		//   23   55:astore          7
			if(!((ViewHolder) (obj)).wasReturnedFromScrap() && !((ViewHolder) (obj)).isScrap())
		//*  24   57:aload           6
		//*  25   59:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  26   62:ifne            245
		//*  27   65:aload           6
		//*  28   67:invokevirtual   #122 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  29   70:ifeq            76
		//*  30   73:goto            245
			{
				if(view.getParent() == mRecyclerView)
		//*  31   76:aload_1         
		//*  32   77:invokevirtual   #126 <Method ViewParent View.getParent()>
		//*  33   80:aload_0         
		//*  34   81:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  35   84:if_acmpne       201
				{
					int k = mChildHelper.indexOfChild(view);
		//   36   87:aload_0         
		//   37   88:getfield        #128 <Field ChildHelper mChildHelper>
		//   38   91:aload_1         
		//   39   92:invokevirtual   #134 <Method int ChildHelper.indexOfChild(View)>
		//   40   95:istore          5
					int j = i;
		//   41   97:iload_2         
		//   42   98:istore          4
					if(i == -1)
		//*  43  100:iload_2         
		//*  44  101:iconst_m1       
		//*  45  102:icmpne          114
						j = mChildHelper.getChildCount();
		//   46  105:aload_0         
		//   47  106:getfield        #128 <Field ChildHelper mChildHelper>
		//   48  109:invokevirtual   #138 <Method int ChildHelper.getChildCount()>
		//   49  112:istore          4
					if(k == -1)
		//*  50  114:iload           5
		//*  51  116:iconst_m1       
		//*  52  117:icmpne          177
					{
						obj = ((Object) (new StringBuilder()));
		//   53  120:new             #140 <Class StringBuilder>
		//   54  123:dup             
		//   55  124:invokespecial   #141 <Method void StringBuilder()>
		//   56  127:astore          6
						((StringBuilder) (obj)).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:");
		//   57  129:aload           6
		//   58  131:ldc1            #143 <String "Added View has RecyclerView as parent but view is not a real child. Unfiltered index:">
		//   59  133:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   60  136:pop             
						((StringBuilder) (obj)).append(mRecyclerView.indexOfChild(view));
		//   61  137:aload           6
		//   62  139:aload_0         
		//   63  140:getfield        #95  <Field RecyclerView mRecyclerView>
		//   64  143:aload_1         
		//   65  144:invokevirtual   #148 <Method int RecyclerView.indexOfChild(View)>
		//   66  147:invokevirtual   #151 <Method StringBuilder StringBuilder.append(int)>
		//   67  150:pop             
						((StringBuilder) (obj)).append(mRecyclerView.exceptionLabel());
		//   68  151:aload           6
		//   69  153:aload_0         
		//   70  154:getfield        #95  <Field RecyclerView mRecyclerView>
		//   71  157:invokevirtual   #155 <Method String RecyclerView.exceptionLabel()>
		//   72  160:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   73  163:pop             
						throw new IllegalStateException(((StringBuilder) (obj)).toString());
		//   74  164:new             #157 <Class IllegalStateException>
		//   75  167:dup             
		//   76  168:aload           6
		//   77  170:invokevirtual   #160 <Method String StringBuilder.toString()>
		//   78  173:invokespecial   #163 <Method void IllegalStateException(String)>
		//   79  176:athrow          
					}
					if(k != j)
		//*  80  177:iload           5
		//*  81  179:iload           4
		//*  82  181:icmpeq          280
						mRecyclerView.mLayout.moveView(k, j);
		//   83  184:aload_0         
		//   84  185:getfield        #95  <Field RecyclerView mRecyclerView>
		//   85  188:getfield        #167 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   86  191:iload           5
		//   87  193:iload           4
		//   88  195:invokevirtual   #171 <Method void moveView(int, int)>
				} else
		//*  89  198:goto            280
				{
					mChildHelper.addView(view, i, false);
		//   90  201:aload_0         
		//   91  202:getfield        #128 <Field ChildHelper mChildHelper>
		//   92  205:aload_1         
		//   93  206:iload_2         
		//   94  207:iconst_0        
		//   95  208:invokevirtual   #174 <Method void ChildHelper.addView(View, int, boolean)>
					layoutparams.mInsetsDirty = true;
		//   96  211:aload           7
		//   97  213:iconst_1        
		//   98  214:putfield        #177 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
					if(mSmoothScroller != null && mSmoothScroller.isRunning())
		//*  99  217:aload_0         
		//* 100  218:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 101  221:ifnull          280
		//* 102  224:aload_0         
		//* 103  225:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 104  228:invokevirtual   #184 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 105  231:ifeq            280
						mSmoothScroller.onChildAttachedToWindow(view);
		//  106  234:aload_0         
		//  107  235:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  108  238:aload_1         
		//  109  239:invokevirtual   #188 <Method void RecyclerView$SmoothScroller.onChildAttachedToWindow(View)>
				}
			} else
		//* 110  242:goto            280
			{
				if(((ViewHolder) (obj)).isScrap())
		//* 111  245:aload           6
		//* 112  247:invokevirtual   #122 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//* 113  250:ifeq            261
					((ViewHolder) (obj)).unScrap();
		//  114  253:aload           6
		//  115  255:invokevirtual   #191 <Method void RecyclerView$ViewHolder.unScrap()>
				else
		//* 116  258:goto            266
					((ViewHolder) (obj)).clearReturnedFromScrapFlag();
		//  117  261:aload           6
		//  118  263:invokevirtual   #194 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
				mChildHelper.attachViewToParent(view, i, view.getLayoutParams(), false);
		//  119  266:aload_0         
		//  120  267:getfield        #128 <Field ChildHelper mChildHelper>
		//  121  270:aload_1         
		//  122  271:iload_2         
		//  123  272:aload_1         
		//  124  273:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//  125  276:iconst_0        
		//  126  277:invokevirtual   #198 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			}
			if(layoutparams.mPendingInvalidate)
		//* 127  280:aload           7
		//* 128  282:getfield        #201 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//* 129  285:ifeq            302
			{
				((ViewHolder) (obj)).itemView.invalidate();
		//  130  288:aload           6
		//  131  290:getfield        #205 <Field View RecyclerView$ViewHolder.itemView>
		//  132  293:invokevirtual   #208 <Method void View.invalidate()>
				layoutparams.mPendingInvalidate = false;
		//  133  296:aload           7
		//  134  298:iconst_0        
		//  135  299:putfield        #201 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
			}
		//  136  302:return          
		}

		public static int chooseSize(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(i);
		//    0    0:iload_0         
		//    1    1:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			i = android.view.View.MeasureSpec.getSize(i);
		//    3    5:iload_0         
		//    4    6:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_0        
			if(l != 0x80000000)
		//*   6   10:iload_3         
		//*   7   11:ldc1            #220 <Int 0x80000000>
		//*   8   13:icmpeq          30
			{
				if(l != 0x40000000)
		//*   9   16:iload_3         
		//*  10   17:ldc1            #221 <Int 0x40000000>
		//*  11   19:icmpeq          28
					return Math.max(j, k);
		//   12   22:iload_1         
		//   13   23:iload_2         
		//   14   24:invokestatic    #227 <Method int Math.max(int, int)>
		//   15   27:ireturn         
				else
					return i;
		//   16   28:iload_0         
		//   17   29:ireturn         
			} else
			{
				return Math.min(i, Math.max(j, k));
		//   18   30:iload_0         
		//   19   31:iload_1         
		//   20   32:iload_2         
		//   21   33:invokestatic    #227 <Method int Math.max(int, int)>
		//   22   36:invokestatic    #230 <Method int Math.min(int, int)>
		//   23   39:ireturn         
			}
		}

		private void detachViewInternal(int i, View view)
		{
			mChildHelper.detachViewFromParent(i);
		//    0    0:aload_0         
		//    1    1:getfield        #128 <Field ChildHelper mChildHelper>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #236 <Method void ChildHelper.detachViewFromParent(int)>
		//    4    8:return          
		}

		public static int getChildMeasureSpec(int i, int j, int k, int l, boolean flag)
		{
			int i1;
			boolean flag1;
			flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          6
			i1 = Math.max(0, i - k);
		//    2    3:iconst_0        
		//    3    4:iload_0         
		//    4    5:iload_2         
		//    5    6:isub            
		//    6    7:invokestatic    #227 <Method int Math.max(int, int)>
		//    7   10:istore          5
			if(!flag) goto _L2; else goto _L1
		//    8   12:iload           4
		//    9   14:ifeq            67
_L1:
			if(l < 0) goto _L4; else goto _L3
		//   10   17:iload_3         
		//   11   18:iflt            29
_L3:
			k = l;
		//   12   21:iload_3         
		//   13   22:istore_2        
			i = 0x40000000;
		//   14   23:ldc1            #221 <Int 0x40000000>
		//   15   25:istore_0        
			break MISSING_BLOCK_LABEL_125;
		//   16   26:goto            125
_L4:
			if(l == -1)
		//*  17   29:iload_3         
		//*  18   30:iconst_m1       
		//*  19   31:icmpne          120
			{
				if(j != 0x80000000 && (j == 0 || j != 0x40000000))
		//*  20   34:iload_1         
		//*  21   35:ldc1            #220 <Int 0x80000000>
		//*  22   37:icmpeq          57
		//*  23   40:iload_1         
		//*  24   41:ifeq            50
		//*  25   44:iload_1         
		//*  26   45:ldc1            #221 <Int 0x40000000>
		//*  27   47:icmpeq          57
				{
					j = 0;
		//   28   50:iconst_0        
		//   29   51:istore_1        
					i = j;
		//   30   52:iload_1         
		//   31   53:istore_0        
				} else
		//*  32   54:goto            60
				{
					i = i1;
		//   33   57:iload           5
		//   34   59:istore_0        
				}
				k = i;
		//   35   60:iload_0         
		//   36   61:istore_2        
				i = j;
		//   37   62:iload_1         
		//   38   63:istore_0        
				break MISSING_BLOCK_LABEL_125;
		//   39   64:goto            125
			}
			break; /* Loop/switch isn't completed */
_L2:
			if(l >= 0)
		//*  40   67:iload_3         
		//*  41   68:iflt            74
				continue; /* Loop/switch isn't completed */
		//   42   71:goto            21
			if(l == -1)
		//*  43   74:iload_3         
		//*  44   75:iconst_m1       
		//*  45   76:icmpne          87
			{
				i = j;
		//   46   79:iload_1         
		//   47   80:istore_0        
				k = i1;
		//   48   81:iload           5
		//   49   83:istore_2        
				break MISSING_BLOCK_LABEL_125;
		//   50   84:goto            125
			}
			if(l == -2)
		//*  51   87:iload_3         
		//*  52   88:bipush          -2
		//*  53   90:icmpne          120
			{
				if(j != 0x80000000)
		//*  54   93:iload_1         
		//*  55   94:ldc1            #220 <Int 0x80000000>
		//*  56   96:icmpeq          111
				{
					k = i1;
		//   57   99:iload           5
		//   58  101:istore_2        
					i = ((int) (flag1));
		//   59  102:iload           6
		//   60  104:istore_0        
					if(j != 0x40000000)
						break MISSING_BLOCK_LABEL_125;
		//   61  105:iload_1         
		//   62  106:ldc1            #221 <Int 0x40000000>
		//   63  108:icmpne          125
				}
				i = 0x80000000;
		//   64  111:ldc1            #220 <Int 0x80000000>
		//   65  113:istore_0        
				k = i1;
		//   66  114:iload           5
		//   67  116:istore_2        
				break MISSING_BLOCK_LABEL_125;
		//   68  117:goto            125
			}
			break; /* Loop/switch isn't completed */
			if(true) goto _L3; else goto _L5
_L5:
			k = 0;
		//   69  120:iconst_0        
		//   70  121:istore_2        
			i = ((int) (flag1));
		//   71  122:iload           6
		//   72  124:istore_0        
			return android.view.View.MeasureSpec.makeMeasureSpec(k, i);
		//   73  125:iload_2         
		//   74  126:iload_0         
		//   75  127:invokestatic    #241 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   76  130:ireturn         
		}

		public static int getChildMeasureSpec(int i, int j, int k, boolean flag)
		{
			boolean flag1;
			flag1 = false;
		//    0    0:iconst_0        
		//    1    1:istore          4
			i = Math.max(0, i - j);
		//    2    3:iconst_0        
		//    3    4:iload_0         
		//    4    5:iload_1         
		//    5    6:isub            
		//    6    7:invokestatic    #227 <Method int Math.max(int, int)>
		//    7   10:istore_0        
			if(!flag) goto _L2; else goto _L1
		//    8   11:iload_3         
		//    9   12:ifeq            35
_L1:
			if(k < 0) goto _L4; else goto _L3
		//   10   15:iload_2         
		//   11   16:iflt            27
_L3:
			i = k;
		//   12   19:iload_2         
		//   13   20:istore_0        
_L7:
			j = 0x40000000;
		//   14   21:ldc1            #221 <Int 0x40000000>
		//   15   23:istore_1        
			  goto _L5
		//*  16   24:goto            59
_L4:
			i = 0;
		//   17   27:iconst_0        
		//   18   28:istore_0        
			j = ((int) (flag1));
		//   19   29:iload           4
		//   20   31:istore_1        
			break; /* Loop/switch isn't completed */
		//   21   32:goto            59
_L2:
			if(k < 0) goto _L6; else goto _L3
		//   22   35:iload_2         
		//   23   36:iflt            42
		//*  24   39:goto            19
_L6:
			if(k != -1) goto _L8; else goto _L7
		//   25   42:iload_2         
		//   26   43:iconst_m1       
		//   27   44:icmpne          50
		//*  28   47:goto            21
_L8:
			if(k != -2)
				continue; /* Loop/switch isn't completed */
		//   29   50:iload_2         
		//   30   51:bipush          -2
		//   31   53:icmpne          27
			j = 0x80000000;
		//   32   56:ldc1            #220 <Int 0x80000000>
		//   33   58:istore_1        
			break; /* Loop/switch isn't completed */
			if(true) goto _L4; else goto _L5
_L5:
			return android.view.View.MeasureSpec.makeMeasureSpec(i, j);
		//   34   59:iload_0         
		//   35   60:iload_1         
		//   36   61:invokestatic    #241 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   37   64:ireturn         
		}

		private int[] getChildRectangleOnScreenScrollAmount(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			int i = getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #249 <Method int getPaddingLeft()>
		//    2    4:istore          5
			int j = getPaddingTop();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #252 <Method int getPaddingTop()>
		//    5   10:istore          6
			int k = getWidth();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #255 <Method int getWidth()>
		//    8   16:istore          7
			int j2 = getPaddingRight();
		//    9   18:aload_0         
		//   10   19:invokevirtual   #258 <Method int getPaddingRight()>
		//   11   22:istore          14
			int i1 = getHeight();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #261 <Method int getHeight()>
		//   14   28:istore          9
			int j1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   34:istore          10
			int k2 = (view.getLeft() + rect.left) - view.getScrollX();
		//   18   36:aload_2         
		//   19   37:invokevirtual   #267 <Method int View.getLeft()>
		//   20   40:aload_3         
		//   21   41:getfield        #272 <Field int Rect.left>
		//   22   44:iadd            
		//   23   45:aload_2         
		//   24   46:invokevirtual   #275 <Method int View.getScrollX()>
		//   25   49:isub            
		//   26   50:istore          15
			int k1 = (view.getTop() + rect.top) - view.getScrollY();
		//   27   52:aload_2         
		//   28   53:invokevirtual   #278 <Method int View.getTop()>
		//   29   56:aload_3         
		//   30   57:getfield        #281 <Field int Rect.top>
		//   31   60:iadd            
		//   32   61:aload_2         
		//   33   62:invokevirtual   #284 <Method int View.getScrollY()>
		//   34   65:isub            
		//   35   66:istore          11
			int l2 = rect.width();
		//   36   68:aload_3         
		//   37   69:invokevirtual   #287 <Method int Rect.width()>
		//   38   72:istore          16
			int l1 = rect.height();
		//   39   74:aload_3         
		//   40   75:invokevirtual   #290 <Method int Rect.height()>
		//   41   78:istore          12
			int i2 = k2 - i;
		//   42   80:iload           15
		//   43   82:iload           5
		//   44   84:isub            
		//   45   85:istore          13
			i = Math.min(0, i2);
		//   46   87:iconst_0        
		//   47   88:iload           13
		//   48   90:invokestatic    #230 <Method int Math.min(int, int)>
		//   49   93:istore          5
			int l = k1 - j;
		//   50   95:iload           11
		//   51   97:iload           6
		//   52   99:isub            
		//   53  100:istore          8
			j = Math.min(0, l);
		//   54  102:iconst_0        
		//   55  103:iload           8
		//   56  105:invokestatic    #230 <Method int Math.min(int, int)>
		//   57  108:istore          6
			j2 = (l2 + k2) - (k - j2);
		//   58  110:iload           16
		//   59  112:iload           15
		//   60  114:iadd            
		//   61  115:iload           7
		//   62  117:iload           14
		//   63  119:isub            
		//   64  120:isub            
		//   65  121:istore          14
			k = Math.max(0, j2);
		//   66  123:iconst_0        
		//   67  124:iload           14
		//   68  126:invokestatic    #227 <Method int Math.max(int, int)>
		//   69  129:istore          7
			i1 = Math.max(0, (l1 + k1) - (i1 - j1));
		//   70  131:iconst_0        
		//   71  132:iload           12
		//   72  134:iload           11
		//   73  136:iadd            
		//   74  137:iload           9
		//   75  139:iload           10
		//   76  141:isub            
		//   77  142:isub            
		//   78  143:invokestatic    #227 <Method int Math.max(int, int)>
		//   79  146:istore          9
			if(getLayoutDirection() == 1)
		//*  80  148:aload_0         
		//*  81  149:invokevirtual   #293 <Method int getLayoutDirection()>
		//*  82  152:iconst_1        
		//*  83  153:icmpne          180
			{
				if(k != 0)
		//*  84  156:iload           7
		//*  85  158:ifeq            168
					i = k;
		//   86  161:iload           7
		//   87  163:istore          5
				else
		//*  88  165:goto            200
					i = Math.max(i, j2);
		//   89  168:iload           5
		//   90  170:iload           14
		//   91  172:invokestatic    #227 <Method int Math.max(int, int)>
		//   92  175:istore          5
			} else
		//*  93  177:goto            200
			if(i == 0)
		//*  94  180:iload           5
		//*  95  182:ifeq            188
		//*  96  185:goto            200
				i = Math.min(i2, k);
		//   97  188:iload           13
		//   98  190:iload           7
		//   99  192:invokestatic    #230 <Method int Math.min(int, int)>
		//  100  195:istore          5
		//* 101  197:goto            185
			if(j == 0)
		//* 102  200:iload           6
		//* 103  202:ifeq            208
		//* 104  205:goto            217
				j = Math.min(l, i1);
		//  105  208:iload           8
		//  106  210:iload           9
		//  107  212:invokestatic    #230 <Method int Math.min(int, int)>
		//  108  215:istore          6
			return (new int[] {
				i, j
			});
		//  109  217:iconst_2        
		//  110  218:newarray        int[]
		//  111  220:dup             
		//  112  221:iconst_0        
		//  113  222:iload           5
		//  114  224:iastore         
		//  115  225:dup             
		//  116  226:iconst_1        
		//  117  227:iload           6
		//  118  229:iastore         
		//  119  230:areturn         
		}

		public static Properties getProperties(Context context, AttributeSet attributeset, int i, int j)
		{
			Properties properties = new Properties();
		//    0    0:new             #16  <Class RecyclerView$LayoutManager$Properties>
		//    1    3:dup             
		//    2    4:invokespecial   #296 <Method void RecyclerView$LayoutManager$Properties()>
		//    3    7:astore          4
			context = ((Context) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, j)));
		//    4    9:aload_0         
		//    5   10:aload_1         
		//    6   11:getstatic       #302 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
		//    7   14:iload_2         
		//    8   15:iload_3         
		//    9   16:invokevirtual   #308 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
		//   10   19:astore_0        
			properties.orientation = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_orientation, 1);
		//   11   20:aload           4
		//   12   22:aload_0         
		//   13   23:getstatic       #311 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_orientation>
		//   14   26:iconst_1        
		//   15   27:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   16   30:putfield        #319 <Field int RecyclerView$LayoutManager$Properties.orientation>
			properties.spanCount = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_spanCount, 1);
		//   17   33:aload           4
		//   18   35:aload_0         
		//   19   36:getstatic       #322 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_spanCount>
		//   20   39:iconst_1        
		//   21   40:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   22   43:putfield        #325 <Field int RecyclerView$LayoutManager$Properties.spanCount>
			properties.reverseLayout = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_reverseLayout, false);
		//   23   46:aload           4
		//   24   48:aload_0         
		//   25   49:getstatic       #328 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_reverseLayout>
		//   26   52:iconst_0        
		//   27   53:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   28   56:putfield        #335 <Field boolean RecyclerView$LayoutManager$Properties.reverseLayout>
			properties.stackFromEnd = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_stackFromEnd, false);
		//   29   59:aload           4
		//   30   61:aload_0         
		//   31   62:getstatic       #338 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_stackFromEnd>
		//   32   65:iconst_0        
		//   33   66:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   34   69:putfield        #341 <Field boolean RecyclerView$LayoutManager$Properties.stackFromEnd>
			((TypedArray) (context)).recycle();
		//   35   72:aload_0         
		//   36   73:invokevirtual   #344 <Method void TypedArray.recycle()>
			return properties;
		//   37   76:aload           4
		//   38   78:areturn         
		}

		private boolean isFocusedChildVisibleAfterScrolling(RecyclerView recyclerview, int i, int j)
		{
			recyclerview = ((RecyclerView) (recyclerview.getFocusedChild()));
		//    0    0:aload_1         
		//    1    1:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//    2    4:astore_1        
			if(recyclerview == null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
				return false;
		//    5    9:iconst_0        
		//    6   10:ireturn         
			int k = getPaddingLeft();
		//    7   11:aload_0         
		//    8   12:invokevirtual   #249 <Method int getPaddingLeft()>
		//    9   15:istore          4
			int l = getPaddingTop();
		//   10   17:aload_0         
		//   11   18:invokevirtual   #252 <Method int getPaddingTop()>
		//   12   21:istore          5
			int i1 = getWidth();
		//   13   23:aload_0         
		//   14   24:invokevirtual   #255 <Method int getWidth()>
		//   15   27:istore          6
			int j1 = getPaddingRight();
		//   16   29:aload_0         
		//   17   30:invokevirtual   #258 <Method int getPaddingRight()>
		//   18   33:istore          7
			int k1 = getHeight();
		//   19   35:aload_0         
		//   20   36:invokevirtual   #261 <Method int getHeight()>
		//   21   39:istore          8
			int l1 = getPaddingBottom();
		//   22   41:aload_0         
		//   23   42:invokevirtual   #264 <Method int getPaddingBottom()>
		//   24   45:istore          9
			Rect rect = mRecyclerView.mTempRect;
		//   25   47:aload_0         
		//   26   48:getfield        #95  <Field RecyclerView mRecyclerView>
		//   27   51:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   28   54:astore          10
			getDecoratedBoundsWithMargins(((View) (recyclerview)), rect);
		//   29   56:aload_0         
		//   30   57:aload_1         
		//   31   58:aload           10
		//   32   60:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
			if(rect.left - i < i1 - j1 && rect.right - i > k && rect.top - j < k1 - l1)
		//*  33   63:aload           10
		//*  34   65:getfield        #272 <Field int Rect.left>
		//*  35   68:iload_2         
		//*  36   69:isub            
		//*  37   70:iload           6
		//*  38   72:iload           7
		//*  39   74:isub            
		//*  40   75:icmpge          121
		//*  41   78:aload           10
		//*  42   80:getfield        #361 <Field int Rect.right>
		//*  43   83:iload_2         
		//*  44   84:isub            
		//*  45   85:iload           4
		//*  46   87:icmple          121
		//*  47   90:aload           10
		//*  48   92:getfield        #281 <Field int Rect.top>
		//*  49   95:iload_3         
		//*  50   96:isub            
		//*  51   97:iload           8
		//*  52   99:iload           9
		//*  53  101:isub            
		//*  54  102:icmpge          121
				return rect.bottom - j > l;
		//   55  105:aload           10
		//   56  107:getfield        #364 <Field int Rect.bottom>
		//   57  110:iload_3         
		//   58  111:isub            
		//   59  112:iload           5
		//   60  114:icmpgt          119
		//   61  117:iconst_0        
		//   62  118:ireturn         
		//   63  119:iconst_1        
		//   64  120:ireturn         
			else
				return false;
		//   65  121:iconst_0        
		//   66  122:ireturn         
		}

		private static boolean isMeasurementUpToDate(int i, int j, int k)
		{
			int l = android.view.View.MeasureSpec.getMode(j);
		//    0    0:iload_1         
		//    1    1:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore_3        
			j = android.view.View.MeasureSpec.getSize(j);
		//    3    5:iload_1         
		//    4    6:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5    9:istore_1        
			boolean flag1 = false;
		//    6   10:iconst_0        
		//    7   11:istore          5
			boolean flag = false;
		//    8   13:iconst_0        
		//    9   14:istore          4
			if(k > 0 && i != k)
		//*  10   16:iload_2         
		//*  11   17:ifle            27
		//*  12   20:iload_0         
		//*  13   21:iload_2         
		//*  14   22:icmpeq          27
				return false;
		//   15   25:iconst_0        
		//   16   26:ireturn         
			if(l != 0x80000000)
		//*  17   27:iload_3         
		//*  18   28:ldc1            #220 <Int 0x80000000>
		//*  19   30:icmpeq          58
				if(l != 0)
		//*  20   33:iload_3         
		//*  21   34:ifeq            56
				{
					if(l != 0x40000000)
		//*  22   37:iload_3         
		//*  23   38:ldc1            #221 <Int 0x40000000>
		//*  24   40:icmpeq          45
						return false;
		//   25   43:iconst_0        
		//   26   44:ireturn         
					if(j == i)
		//*  27   45:iload_1         
		//*  28   46:iload_0         
		//*  29   47:icmpne          53
						flag = true;
		//   30   50:iconst_1        
		//   31   51:istore          4
					return flag;
		//   32   53:iload           4
		//   33   55:ireturn         
				} else
				{
					return true;
		//   34   56:iconst_1        
		//   35   57:ireturn         
				}
			flag = flag1;
		//   36   58:iload           5
		//   37   60:istore          4
			if(j >= i)
		//*  38   62:iload_1         
		//*  39   63:iload_0         
		//*  40   64:icmplt          70
				flag = true;
		//   41   67:iconst_1        
		//   42   68:istore          4
			return flag;
		//   43   70:iload           4
		//   44   72:ireturn         
		}

		private void onSmoothScrollerStopped(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller == smoothscroller)
		//*   0    0:aload_0         
		//*   1    1:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:aload_1         
		//*   3    5:if_acmpne       13
				mSmoothScroller = null;
		//    4    8:aload_0         
		//    5    9:aconst_null     
		//    6   10:putfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    7   13:return          
		}

		private void scrapOrRecycleView(Recycler recycler, int i, View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_3         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.shouldIgnore())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*   5   11:ifeq            15
				return;
		//    6   14:return          
			if(viewholder.isInvalid() && !viewholder.isRemoved() && !mRecyclerView.mAdapter.hasStableIds())
		//*   7   15:aload           4
		//*   8   17:invokevirtual   #374 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   9   20:ifeq            56
		//*  10   23:aload           4
		//*  11   25:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  12   28:ifne            56
		//*  13   31:aload_0         
		//*  14   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  15   35:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   38:invokevirtual   #383 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  17   41:ifne            56
			{
				removeViewAt(i);
		//   18   44:aload_0         
		//   19   45:iload_2         
		//   20   46:invokevirtual   #386 <Method void removeViewAt(int)>
				recycler.recycleViewHolderInternal(viewholder);
		//   21   49:aload_1         
		//   22   50:aload           4
		//   23   52:invokevirtual   #391 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
				return;
		//   24   55:return          
			} else
			{
				detachViewAt(i);
		//   25   56:aload_0         
		//   26   57:iload_2         
		//   27   58:invokevirtual   #394 <Method void detachViewAt(int)>
				recycler.scrapView(view);
		//   28   61:aload_1         
		//   29   62:aload_3         
		//   30   63:invokevirtual   #397 <Method void RecyclerView$Recycler.scrapView(View)>
				mRecyclerView.mViewInfoStore.onViewDetached(viewholder);
		//   31   66:aload_0         
		//   32   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   70:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   73:aload           4
		//   35   75:invokevirtual   #400 <Method void ViewInfoStore.onViewDetached(RecyclerView$ViewHolder)>
				return;
		//   36   78:return          
			}
		}

		public void addDisappearingView(View view)
		{
			addDisappearingView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #404 <Method void addDisappearingView(View, int)>
		//    4    6:return          
		}

		public void addDisappearingView(View view, int i)
		{
			addViewInt(view, i, true);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_1        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void addView(View view)
		{
			addView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #408 <Method void addView(View, int)>
		//    4    6:return          
		}

		public void addView(View view, int i)
		{
			addViewInt(view, i, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void assertInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #411 <Method void RecyclerView.assertInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void assertNotInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertNotInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #414 <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void attachView(View view)
		{
			attachView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #417 <Method void attachView(View, int)>
		//    4    6:return          
		}

		public void attachView(View view, int i)
		{
			attachView(view, i, (LayoutParams)view.getLayoutParams());
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:aload_1         
		//    4    4:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    5    7:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    6   10:invokevirtual   #420 <Method void attachView(View, int, RecyclerView$LayoutParams)>
		//    7   13:return          
		}

		public void attachView(View view, int i, LayoutParams layoutparams)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.isRemoved())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   5   11:ifeq            29
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    6   14:aload_0         
		//    7   15:getfield        #95  <Field RecyclerView mRecyclerView>
		//    8   18:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//    9   21:aload           4
		//   10   23:invokevirtual   #108 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  11   26:goto            41
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   12   29:aload_0         
		//   13   30:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   33:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   15   36:aload           4
		//   16   38:invokevirtual   #105 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			mChildHelper.attachViewToParent(view, i, ((android.view.ViewGroup.LayoutParams) (layoutparams)), viewholder.isRemoved());
		//   17   41:aload_0         
		//   18   42:getfield        #128 <Field ChildHelper mChildHelper>
		//   19   45:aload_1         
		//   20   46:iload_2         
		//   21   47:aload_3         
		//   22   48:aload           4
		//   23   50:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   24   53:invokevirtual   #198 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//   25   56:return          
		}

		public void calculateItemDecorationsForChild(View view, Rect rect)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       16
			{
				rect.set(0, 0, 0, 0);
		//    3    7:aload_2         
		//    4    8:iconst_0        
		//    5    9:iconst_0        
		//    6   10:iconst_0        
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
				return;
		//    9   15:return          
			} else
			{
				rect.set(mRecyclerView.getItemDecorInsetsForChild(view));
		//   10   16:aload_2         
		//   11   17:aload_0         
		//   12   18:getfield        #95  <Field RecyclerView mRecyclerView>
		//   13   21:aload_1         
		//   14   22:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//   15   25:invokevirtual   #432 <Method void Rect.set(Rect)>
				return;
		//   16   28:return          
			}
		}

		public boolean canScrollHorizontally()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean canScrollVertically()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean checkLayoutParams(LayoutParams layoutparams)
		{
			return layoutparams != null;
		//    0    0:aload_1         
		//    1    1:ifnull          6
		//    2    4:iconst_1        
		//    3    5:ireturn         
		//    4    6:iconst_0        
		//    5    7:ireturn         
		}

		public void collectAdjacentPrefetchPositions(int i, int j, State state, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public void collectInitialPrefetchPositions(int i, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public int computeHorizontalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void detachAndScrapAttachedViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            29
				scrapOrRecycleView(recycler, i, getChildAt(i));
		//    7   11:aload_0         
		//    8   12:aload_1         
		//    9   13:iload_2         
		//   10   14:aload_0         
		//   11   15:iload_2         
		//   12   16:invokevirtual   #454 <Method View getChildAt(int)>
		//   13   19:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>

		//   14   22:iload_2         
		//   15   23:iconst_1        
		//   16   24:isub            
		//   17   25:istore_2        
		//*  18   26:goto            7
		//   19   29:return          
		}

		public void detachAndScrapView(View view, Recycler recycler)
		{
			scrapOrRecycleView(recycler, mChildHelper.indexOfChild(view), view);
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:aload_0         
		//    3    3:getfield        #128 <Field ChildHelper mChildHelper>
		//    4    6:aload_1         
		//    5    7:invokevirtual   #134 <Method int ChildHelper.indexOfChild(View)>
		//    6   10:aload_1         
		//    7   11:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    8   14:return          
		}

		public void detachAndScrapViewAt(int i, Recycler recycler)
		{
			scrapOrRecycleView(recycler, i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:iload_1         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:invokevirtual   #454 <Method View getChildAt(int)>
		//    6    8:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    7   11:return          
		}

		public void detachView(View view)
		{
			int i = mChildHelper.indexOfChild(view);
		//    0    0:aload_0         
		//    1    1:getfield        #128 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #134 <Method int ChildHelper.indexOfChild(View)>
		//    4    8:istore_2        
			if(i >= 0)
		//*   5    9:iload_2         
		//*   6   10:iflt            19
				detachViewInternal(i, view);
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:aload_1         
		//   10   16:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//   11   19:return          
		}

		public void detachViewAt(int i)
		{
			detachViewInternal(i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:iload_1         
		//    4    4:invokevirtual   #454 <Method View getChildAt(int)>
		//    5    7:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//    6   10:return          
		}

		void dispatchAttachedToWindow(RecyclerView recyclerview)
		{
			mIsAttachedToWindow = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onAttachedToWindow(recyclerview);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #468 <Method void onAttachedToWindow(RecyclerView)>
		//    6   10:return          
		}

		void dispatchDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			mIsAttachedToWindow = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onDetachedFromWindow(recyclerview, recycler);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:aload_2         
		//    6    8:invokevirtual   #473 <Method void onDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		//    7   11:return          
		}

		public void endAnimation(View view)
		{
			if(mRecyclerView.mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          24
				mRecyclerView.mItemAnimator.endAnimation(RecyclerView.getChildViewHolderInt(view));
		//    4   10:aload_0         
		//    5   11:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   14:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:aload_1         
		//    8   18:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    9   21:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
		//   10   24:return          
		}

		public View findContainingItemView(View view)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
				return null;
		//    3    7:aconst_null     
		//    4    8:areturn         
			view = mRecyclerView.findContainingItemView(view);
		//    5    9:aload_0         
		//    6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   13:aload_1         
		//    8   14:invokevirtual   #486 <Method View RecyclerView.findContainingItemView(View)>
		//    9   17:astore_1        
			if(view == null)
		//*  10   18:aload_1         
		//*  11   19:ifnonnull       24
				return null;
		//   12   22:aconst_null     
		//   13   23:areturn         
			if(mChildHelper.isHidden(view))
		//*  14   24:aload_0         
		//*  15   25:getfield        #128 <Field ChildHelper mChildHelper>
		//*  16   28:aload_1         
		//*  17   29:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  18   32:ifeq            37
				return null;
		//   19   35:aconst_null     
		//   20   36:areturn         
			else
				return view;
		//   21   37:aload_1         
		//   22   38:areturn         
		}

		public View findViewByPosition(int i)
		{
			int k = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore_3        
			for(int j = 0; j < k; j++)
		//*   3    5:iconst_0        
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iload_3         
		//*   7    9:icmpge          82
			{
				View view = getChildAt(j);
		//    8   12:aload_0         
		//    9   13:iload_2         
		//   10   14:invokevirtual   #454 <Method View getChildAt(int)>
		//   11   17:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   12   19:aload           4
		//   13   21:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   24:astore          5
				if(viewholder != null && viewholder.getLayoutPosition() == i && !viewholder.shouldIgnore() && (mRecyclerView.mState.isPreLayout() || !viewholder.isRemoved()))
		//*  15   26:aload           5
		//*  16   28:ifnonnull       34
		//*  17   31:goto            75
		//*  18   34:aload           5
		//*  19   36:invokevirtual   #495 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  20   39:iload_1         
		//*  21   40:icmpne          75
		//*  22   43:aload           5
		//*  23   45:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  24   48:ifne            75
		//*  25   51:aload_0         
		//*  26   52:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  27   55:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//*  28   58:invokevirtual   #504 <Method boolean RecyclerView$State.isPreLayout()>
		//*  29   61:ifne            72
		//*  30   64:aload           5
		//*  31   66:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  32   69:ifne            75
					return view;
		//   33   72:aload           4
		//   34   74:areturn         
			}

		//   35   75:iload_2         
		//   36   76:iconst_1        
		//   37   77:iadd            
		//   38   78:istore_2        
		//*  39   79:goto            7
			return null;
		//   40   82:aconst_null     
		//   41   83:areturn         
		}

		public abstract LayoutParams generateDefaultLayoutParams();

		public LayoutParams generateLayoutParams(Context context, AttributeSet attributeset)
		{
			return new LayoutParams(context, attributeset);
		//    0    0:new             #116 <Class RecyclerView$LayoutParams>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:aload_2         
		//    4    6:invokespecial   #511 <Method void RecyclerView$LayoutParams(Context, AttributeSet)>
		//    5    9:areturn         
		}

		public LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			if(layoutparams instanceof LayoutParams)
		//*   0    0:aload_1         
		//*   1    1:instanceof      #116 <Class RecyclerView$LayoutParams>
		//*   2    4:ifeq            19
				return new LayoutParams((LayoutParams)layoutparams);
		//    3    7:new             #116 <Class RecyclerView$LayoutParams>
		//    4   10:dup             
		//    5   11:aload_1         
		//    6   12:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    7   15:invokespecial   #515 <Method void RecyclerView$LayoutParams(RecyclerView$LayoutParams)>
		//    8   18:areturn         
			if(layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
		//*   9   19:aload_1         
		//*  10   20:instanceof      #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//*  11   23:ifeq            38
				return new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
		//   12   26:new             #116 <Class RecyclerView$LayoutParams>
		//   13   29:dup             
		//   14   30:aload_1         
		//   15   31:checkcast       #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//   16   34:invokespecial   #520 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$MarginLayoutParams)>
		//   17   37:areturn         
			else
				return new LayoutParams(layoutparams);
		//   18   38:new             #116 <Class RecyclerView$LayoutParams>
		//   19   41:dup             
		//   20   42:aload_1         
		//   21   43:invokespecial   #523 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$LayoutParams)>
		//   22   46:areturn         
		}

		public int getBaseline()
		{
			return -1;
		//    0    0:iconst_m1       
		//    1    1:ireturn         
		}

		public int getBottomDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.bottom;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #364 <Field int Rect.bottom>
		//    5   13:ireturn         
		}

		public View getChildAt(int i)
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #128 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          16
				return mChildHelper.getChildAt(i);
		//    3    7:aload_0         
		//    4    8:getfield        #128 <Field ChildHelper mChildHelper>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #529 <Method View ChildHelper.getChildAt(int)>
		//    7   15:areturn         
			else
				return null;
		//    8   16:aconst_null     
		//    9   17:areturn         
		}

		public int getChildCount()
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #128 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          15
				return mChildHelper.getChildCount();
		//    3    7:aload_0         
		//    4    8:getfield        #128 <Field ChildHelper mChildHelper>
		//    5   11:invokevirtual   #138 <Method int ChildHelper.getChildCount()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public boolean getClipToPadding()
		{
			return mRecyclerView != null && mRecyclerView.mClipToPadding;
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:getfield        #533 <Field boolean RecyclerView.mClipToPadding>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public int getColumnCountForAccessibility(Recycler recycler, State state)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			int i = 1;
		//    3    5:iconst_1        
		//    4    6:istore_3        
			if(recycler != null)
		//*   5    7:aload_1         
		//*   6    8:ifnull          43
			{
				if(mRecyclerView.mAdapter == null)
		//*   7   11:aload_0         
		//*   8   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   9   15:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  10   18:ifnonnull       23
					return 1;
		//   11   21:iconst_1        
		//   12   22:ireturn         
				if(canScrollHorizontally())
		//*  13   23:aload_0         
		//*  14   24:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//*  15   27:ifeq            41
					i = mRecyclerView.mAdapter.getItemCount();
		//   16   30:aload_0         
		//   17   31:getfield        #95  <Field RecyclerView mRecyclerView>
		//   18   34:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   19   37:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   20   40:istore_3        
				return i;
		//   21   41:iload_3         
		//   22   42:ireturn         
			} else
			{
				return 1;
		//   23   43:iconst_1        
		//   24   44:ireturn         
			}
		}

		public int getDecoratedBottom(View view)
		{
			return view.getBottom() + getBottomDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #544 <Method int View.getBottom()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #546 <Method int getBottomDecorationHeight(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public void getDecoratedBoundsWithMargins(View view, Rect rect)
		{
			RecyclerView.getDecoratedBoundsWithMarginsInt(view, rect);
		//    0    0:aload_1         
		//    1    1:aload_2         
		//    2    2:invokestatic    #549 <Method void RecyclerView.getDecoratedBoundsWithMarginsInt(View, Rect)>
		//    3    5:return          
		}

		public int getDecoratedLeft(View view)
		{
			return view.getLeft() - getLeftDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #267 <Method int View.getLeft()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #553 <Method int getLeftDecorationWidth(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public int getDecoratedMeasuredHeight(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredHeight() + rect.top + rect.bottom;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//    7   15:aload_2         
		//    8   16:getfield        #281 <Field int Rect.top>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #364 <Field int Rect.bottom>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedMeasuredWidth(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredWidth() + rect.left + rect.right;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    7   15:aload_2         
		//    8   16:getfield        #272 <Field int Rect.left>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #361 <Field int Rect.right>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedRight(View view)
		{
			return view.getRight() + getRightDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #565 <Method int View.getRight()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #568 <Method int getRightDecorationWidth(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public int getDecoratedTop(View view)
		{
			return view.getTop() - getTopDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #278 <Method int View.getTop()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #572 <Method int getTopDecorationHeight(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public View getFocusedChild()
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
				return null;
		//    3    7:aconst_null     
		//    4    8:areturn         
			View view = mRecyclerView.getFocusedChild();
		//    5    9:aload_0         
		//    6   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   13:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//    8   16:astore_1        
			if(view != null)
		//*   9   17:aload_1         
		//*  10   18:ifnull          36
			{
				if(mChildHelper.isHidden(view))
		//*  11   21:aload_0         
		//*  12   22:getfield        #128 <Field ChildHelper mChildHelper>
		//*  13   25:aload_1         
		//*  14   26:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  15   29:ifeq            34
					return null;
		//   16   32:aconst_null     
		//   17   33:areturn         
				else
					return view;
		//   18   34:aload_1         
		//   19   35:areturn         
			} else
			{
				return null;
		//   20   36:aconst_null     
		//   21   37:areturn         
			}
		}

		public int getHeight()
		{
			return mHeight;
		//    0    0:aload_0         
		//    1    1:getfield        #574 <Field int mHeight>
		//    2    4:ireturn         
		}

		public int getHeightMode()
		{
			return mHeightMode;
		//    0    0:aload_0         
		//    1    1:getfield        #577 <Field int mHeightMode>
		//    2    4:ireturn         
		}

		public int getItemCount()
		{
			Adapter adapter;
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          18
				adapter = mRecyclerView.getAdapter();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #581 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//    6   14:astore_1        
			else
		//*   7   15:goto            20
				adapter = null;
		//    8   18:aconst_null     
		//    9   19:astore_1        
			if(adapter != null)
		//*  10   20:aload_1         
		//*  11   21:ifnull          29
				return adapter.getItemCount();
		//   12   24:aload_1         
		//   13   25:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   14   28:ireturn         
			else
				return 0;
		//   15   29:iconst_0        
		//   16   30:ireturn         
		}

		public int getItemViewType(View view)
		{
			return RecyclerView.getChildViewHolderInt(view).getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:invokevirtual   #584 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    3    7:ireturn         
		}

		public int getLayoutDirection()
		{
			return ViewCompat.getLayoutDirection(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #588 <Method int ViewCompat.getLayoutDirection(View)>
		//    3    7:ireturn         
		}

		public int getLeftDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.left;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #272 <Field int Rect.left>
		//    5   13:ireturn         
		}

		public int getMinimumHeight()
		{
			return ViewCompat.getMinimumHeight(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #591 <Method int ViewCompat.getMinimumHeight(View)>
		//    3    7:ireturn         
		}

		public int getMinimumWidth()
		{
			return ViewCompat.getMinimumWidth(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #594 <Method int ViewCompat.getMinimumWidth(View)>
		//    3    7:ireturn         
		}

		public int getPaddingBottom()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingBottom();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #595 <Method int RecyclerView.getPaddingBottom()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingEnd()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingEnd(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #598 <Method int ViewCompat.getPaddingEnd(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingLeft()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingLeft();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #599 <Method int RecyclerView.getPaddingLeft()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingRight()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingRight();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #600 <Method int RecyclerView.getPaddingRight()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingStart()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingStart(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #603 <Method int ViewCompat.getPaddingStart(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingTop()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingTop();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #604 <Method int RecyclerView.getPaddingTop()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPosition(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:invokevirtual   #608 <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    4   10:ireturn         
		}

		public int getRightDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.right;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #361 <Field int Rect.right>
		//    5   13:ireturn         
		}

		public int getRowCountForAccessibility(Recycler recycler, State state)
		{
			recycler = ((Recycler) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:astore_1        
			int i = 1;
		//    3    5:iconst_1        
		//    4    6:istore_3        
			if(recycler != null)
		//*   5    7:aload_1         
		//*   6    8:ifnull          43
			{
				if(mRecyclerView.mAdapter == null)
		//*   7   11:aload_0         
		//*   8   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   9   15:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  10   18:ifnonnull       23
					return 1;
		//   11   21:iconst_1        
		//   12   22:ireturn         
				if(canScrollVertically())
		//*  13   23:aload_0         
		//*  14   24:invokevirtual   #611 <Method boolean canScrollVertically()>
		//*  15   27:ifeq            41
					i = mRecyclerView.mAdapter.getItemCount();
		//   16   30:aload_0         
		//   17   31:getfield        #95  <Field RecyclerView mRecyclerView>
		//   18   34:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   19   37:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   20   40:istore_3        
				return i;
		//   21   41:iload_3         
		//   22   42:ireturn         
			} else
			{
				return 1;
		//   23   43:iconst_1        
		//   24   44:ireturn         
			}
		}

		public int getSelectionModeForAccessibility(Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int getTopDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.top;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #281 <Field int Rect.top>
		//    5   13:ireturn         
		}

		public void getTransformedBoundingBox(View view, boolean flag, Rect rect)
		{
			if(flag)
		//*   0    0:iload_2         
		//*   1    1:ifeq            55
			{
				Rect rect1 = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    2    4:aload_1         
		//    3    5:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    8:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          4
				rect.set(-rect1.left, -rect1.top, view.getWidth() + rect1.right, view.getHeight() + rect1.bottom);
		//    7   16:aload_3         
		//    8   17:aload           4
		//    9   19:getfield        #272 <Field int Rect.left>
		//   10   22:ineg            
		//   11   23:aload           4
		//   12   25:getfield        #281 <Field int Rect.top>
		//   13   28:ineg            
		//   14   29:aload_1         
		//   15   30:invokevirtual   #615 <Method int View.getWidth()>
		//   16   33:aload           4
		//   17   35:getfield        #361 <Field int Rect.right>
		//   18   38:iadd            
		//   19   39:aload_1         
		//   20   40:invokevirtual   #616 <Method int View.getHeight()>
		//   21   43:aload           4
		//   22   45:getfield        #364 <Field int Rect.bottom>
		//   23   48:iadd            
		//   24   49:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			} else
		//*  25   52:goto            69
			{
				rect.set(0, 0, view.getWidth(), view.getHeight());
		//   26   55:aload_3         
		//   27   56:iconst_0        
		//   28   57:iconst_0        
		//   29   58:aload_1         
		//   30   59:invokevirtual   #615 <Method int View.getWidth()>
		//   31   62:aload_1         
		//   32   63:invokevirtual   #616 <Method int View.getHeight()>
		//   33   66:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			}
			if(mRecyclerView != null)
		//*  34   69:aload_0         
		//*  35   70:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  36   73:ifnull          162
			{
				Matrix matrix = view.getMatrix();
		//   37   76:aload_1         
		//   38   77:invokevirtual   #620 <Method Matrix View.getMatrix()>
		//   39   80:astore          4
				if(matrix != null && !matrix.isIdentity())
		//*  40   82:aload           4
		//*  41   84:ifnull          162
		//*  42   87:aload           4
		//*  43   89:invokevirtual   #625 <Method boolean Matrix.isIdentity()>
		//*  44   92:ifne            162
				{
					RectF rectf = mRecyclerView.mTempRectF;
		//   45   95:aload_0         
		//   46   96:getfield        #95  <Field RecyclerView mRecyclerView>
		//   47   99:getfield        #629 <Field RectF RecyclerView.mTempRectF>
		//   48  102:astore          5
					rectf.set(rect);
		//   49  104:aload           5
		//   50  106:aload_3         
		//   51  107:invokevirtual   #632 <Method void RectF.set(Rect)>
					matrix.mapRect(rectf);
		//   52  110:aload           4
		//   53  112:aload           5
		//   54  114:invokevirtual   #636 <Method boolean Matrix.mapRect(RectF)>
		//   55  117:pop             
					rect.set((int)Math.floor(rectf.left), (int)Math.floor(rectf.top), (int)Math.ceil(rectf.right), (int)Math.ceil(rectf.bottom));
		//   56  118:aload_3         
		//   57  119:aload           5
		//   58  121:getfield        #639 <Field float RectF.left>
		//   59  124:f2d             
		//   60  125:invokestatic    #643 <Method double Math.floor(double)>
		//   61  128:d2i             
		//   62  129:aload           5
		//   63  131:getfield        #645 <Field float RectF.top>
		//   64  134:f2d             
		//   65  135:invokestatic    #643 <Method double Math.floor(double)>
		//   66  138:d2i             
		//   67  139:aload           5
		//   68  141:getfield        #647 <Field float RectF.right>
		//   69  144:f2d             
		//   70  145:invokestatic    #650 <Method double Math.ceil(double)>
		//   71  148:d2i             
		//   72  149:aload           5
		//   73  151:getfield        #652 <Field float RectF.bottom>
		//   74  154:f2d             
		//   75  155:invokestatic    #650 <Method double Math.ceil(double)>
		//   76  158:d2i             
		//   77  159:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
				}
			}
			rect.offset(view.getLeft(), view.getTop());
		//   78  162:aload_3         
		//   79  163:aload_1         
		//   80  164:invokevirtual   #267 <Method int View.getLeft()>
		//   81  167:aload_1         
		//   82  168:invokevirtual   #278 <Method int View.getTop()>
		//   83  171:invokevirtual   #655 <Method void Rect.offset(int, int)>
		//   84  174:return          
		}

		public int getWidth()
		{
			return mWidth;
		//    0    0:aload_0         
		//    1    1:getfield        #657 <Field int mWidth>
		//    2    4:ireturn         
		}

		public int getWidthMode()
		{
			return mWidthMode;
		//    0    0:aload_0         
		//    1    1:getfield        #660 <Field int mWidthMode>
		//    2    4:ireturn         
		}

		boolean hasFlexibleChildInBothOrientations()
		{
			int j = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore_2        
			for(int i = 0; i < j; i++)
		//*   3    5:iconst_0        
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iload_2         
		//*   7    9:icmpge          44
			{
				android.view.ViewGroup.LayoutParams layoutparams = getChildAt(i).getLayoutParams();
		//    8   12:aload_0         
		//    9   13:iload_1         
		//   10   14:invokevirtual   #454 <Method View getChildAt(int)>
		//   11   17:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   12   20:astore_3        
				if(layoutparams.width < 0 && layoutparams.height < 0)
		//*  13   21:aload_3         
		//*  14   22:getfield        #665 <Field int android.view.ViewGroup$LayoutParams.width>
		//*  15   25:ifge            37
		//*  16   28:aload_3         
		//*  17   29:getfield        #667 <Field int android.view.ViewGroup$LayoutParams.height>
		//*  18   32:ifge            37
					return true;
		//   19   35:iconst_1        
		//   20   36:ireturn         
			}

		//   21   37:iload_1         
		//   22   38:iconst_1        
		//   23   39:iadd            
		//   24   40:istore_1        
		//*  25   41:goto            7
			return false;
		//   26   44:iconst_0        
		//   27   45:ireturn         
		}

		public boolean hasFocus()
		{
			return mRecyclerView != null && mRecyclerView.hasFocus();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #670 <Method boolean RecyclerView.hasFocus()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public void ignoreView(View view)
		{
			if(view.getParent() == mRecyclerView && mRecyclerView.indexOfChild(view) != -1)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #126 <Method ViewParent View.getParent()>
		//*   2    4:aload_0         
		//*   3    5:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    8:if_acmpne       50
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:aload_1         
		//*   8   16:invokevirtual   #148 <Method int RecyclerView.indexOfChild(View)>
		//*   9   19:iconst_m1       
		//*  10   20:icmpne          26
		//*  11   23:goto            50
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//   12   26:aload_1         
		//   13   27:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   30:astore_1        
				((ViewHolder) (view)).addFlags(128);
		//   15   31:aload_1         
		//   16   32:sipush          128
		//   17   35:invokevirtual   #674 <Method void RecyclerView$ViewHolder.addFlags(int)>
				mRecyclerView.mViewInfoStore.removeViewHolder(((ViewHolder) (view)));
		//   18   38:aload_0         
		//   19   39:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   21   45:aload_1         
		//   22   46:invokevirtual   #677 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
				return;
		//   23   49:return          
			} else
			{
				view = ((View) (new StringBuilder()));
		//   24   50:new             #140 <Class StringBuilder>
		//   25   53:dup             
		//   26   54:invokespecial   #141 <Method void StringBuilder()>
		//   27   57:astore_1        
				((StringBuilder) (view)).append("View should be fully attached to be ignored");
		//   28   58:aload_1         
		//   29   59:ldc2            #679 <String "View should be fully attached to be ignored">
		//   30   62:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   31   65:pop             
				((StringBuilder) (view)).append(mRecyclerView.exceptionLabel());
		//   32   66:aload_1         
		//   33   67:aload_0         
		//   34   68:getfield        #95  <Field RecyclerView mRecyclerView>
		//   35   71:invokevirtual   #155 <Method String RecyclerView.exceptionLabel()>
		//   36   74:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   37   77:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
		//   38   78:new             #681 <Class IllegalArgumentException>
		//   39   81:dup             
		//   40   82:aload_1         
		//   41   83:invokevirtual   #160 <Method String StringBuilder.toString()>
		//   42   86:invokespecial   #682 <Method void IllegalArgumentException(String)>
		//   43   89:athrow          
			}
		}

		public boolean isAttachedToWindow()
		{
			return mIsAttachedToWindow;
		//    0    0:aload_0         
		//    1    1:getfield        #68  <Field boolean mIsAttachedToWindow>
		//    2    4:ireturn         
		}

		public boolean isAutoMeasureEnabled()
		{
			return mAutoMeasure;
		//    0    0:aload_0         
		//    1    1:getfield        #70  <Field boolean mAutoMeasure>
		//    2    4:ireturn         
		}

		public boolean isFocused()
		{
			return mRecyclerView != null && mRecyclerView.isFocused();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #687 <Method boolean RecyclerView.isFocused()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public final boolean isItemPrefetchEnabled()
		{
			return mItemPrefetchEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//    2    4:ireturn         
		}

		public boolean isLayoutHierarchical(Recycler recycler, State state)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean isMeasurementCacheEnabled()
		{
			return mMeasurementCacheEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ireturn         
		}

		public boolean isSmoothScrolling()
		{
			return mSmoothScroller != null && mSmoothScroller.isRunning();
		//    0    0:aload_0         
		//    1    1:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #184 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public boolean isViewPartiallyVisible(View view, boolean flag, boolean flag1)
		{
			if(mHorizontalBoundCheck.isViewWithinBoundFlags(view, 24579) && mVerticalBoundCheck.isViewWithinBoundFlags(view, 24579))
		//*   0    0:aload_0         
		//*   1    1:getfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
		//*   2    4:aload_1         
		//*   3    5:sipush          24579
		//*   4    8:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*   5   11:ifeq            33
		//*   6   14:aload_0         
		//*   7   15:getfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
		//*   8   18:aload_1         
		//*   9   19:sipush          24579
		//*  10   22:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*  11   25:ifeq            33
				flag1 = true;
		//   12   28:iconst_1        
		//   13   29:istore_3        
			else
		//*  14   30:goto            35
				flag1 = false;
		//   15   33:iconst_0        
		//   16   34:istore_3        
			if(flag)
		//*  17   35:iload_2         
		//*  18   36:ifeq            41
				return flag1;
		//   19   39:iload_3         
		//   20   40:ireturn         
			else
				return flag1 ^ true;
		//   21   41:iload_3         
		//   22   42:iconst_1        
		//   23   43:ixor            
		//   24   44:ireturn         
		}

		public void layoutDecorated(View view, int i, int j, int k, int l)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          6
			view.layout(i + rect.left, j + rect.top, k - rect.right, l - rect.bottom);
		//    5   12:aload_1         
		//    6   13:iload_2         
		//    7   14:aload           6
		//    8   16:getfield        #272 <Field int Rect.left>
		//    9   19:iadd            
		//   10   20:iload_3         
		//   11   21:aload           6
		//   12   23:getfield        #281 <Field int Rect.top>
		//   13   26:iadd            
		//   14   27:iload           4
		//   15   29:aload           6
		//   16   31:getfield        #361 <Field int Rect.right>
		//   17   34:isub            
		//   18   35:iload           5
		//   19   37:aload           6
		//   20   39:getfield        #364 <Field int Rect.bottom>
		//   21   42:isub            
		//   22   43:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   23   46:return          
		}

		public void layoutDecoratedWithMargins(View view, int i, int j, int k, int l)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          6
			Rect rect = layoutparams.mDecorInsets;
		//    4    9:aload           6
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          7
			view.layout(i + rect.left + layoutparams.leftMargin, j + rect.top + layoutparams.topMargin, k - rect.right - layoutparams.rightMargin, l - rect.bottom - layoutparams.bottomMargin);
		//    7   16:aload_1         
		//    8   17:iload_2         
		//    9   18:aload           7
		//   10   20:getfield        #272 <Field int Rect.left>
		//   11   23:iadd            
		//   12   24:aload           6
		//   13   26:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   14   29:iadd            
		//   15   30:iload_3         
		//   16   31:aload           7
		//   17   33:getfield        #281 <Field int Rect.top>
		//   18   36:iadd            
		//   19   37:aload           6
		//   20   39:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   21   42:iadd            
		//   22   43:iload           4
		//   23   45:aload           7
		//   24   47:getfield        #361 <Field int Rect.right>
		//   25   50:isub            
		//   26   51:aload           6
		//   27   53:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   28   56:isub            
		//   29   57:iload           5
		//   30   59:aload           7
		//   31   61:getfield        #364 <Field int Rect.bottom>
		//   32   64:isub            
		//   33   65:aload           6
		//   34   67:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   35   70:isub            
		//   36   71:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   37   74:return          
		}

		public void measureChild(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #249 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #258 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:iload_2         
		//   31   65:iload           6
		//   32   67:iload           7
		//   33   69:iadd            
		//   34   70:iadd            
		//   35   71:iadd            
		//   36   72:aload           8
		//   37   74:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   38   77:aload_0         
		//   39   78:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   40   81:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   41   84:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   42   85:aload_0         
		//   43   86:invokevirtual   #261 <Method int getHeight()>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #727 <Method int getHeightMode()>
		//   46   93:aload_0         
		//   47   94:invokevirtual   #252 <Method int getPaddingTop()>
		//   48   97:aload_0         
		//   49   98:invokevirtual   #264 <Method int getPaddingBottom()>
		//   50  101:iadd            
		//   51  102:iload_3         
		//   52  103:iload           4
		//   53  105:iload           5
		//   54  107:iadd            
		//   55  108:iadd            
		//   56  109:iadd            
		//   57  110:aload           8
		//   58  112:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   59  115:aload_0         
		//   60  116:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   61  119:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   62  122:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  63  123:aload_0         
		//*  64  124:aload_1         
		//*  65  125:iload_2         
		//*  66  126:iload_3         
		//*  67  127:aload           8
		//*  68  129:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  69  132:ifeq            141
				view.measure(i, j);
		//   70  135:aload_1         
		//   71  136:iload_2         
		//   72  137:iload_3         
		//   73  138:invokevirtual   #735 <Method void View.measure(int, int)>
		//   74  141:return          
		}

		public void measureChildWithMargins(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #114 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #116 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + layoutparams.leftMargin + layoutparams.rightMargin + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #249 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #258 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:aload           8
		//   31   66:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   32   69:iadd            
		//   33   70:aload           8
		//   34   72:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   35   75:iadd            
		//   36   76:iload_2         
		//   37   77:iload           6
		//   38   79:iload           7
		//   39   81:iadd            
		//   40   82:iadd            
		//   41   83:iadd            
		//   42   84:aload           8
		//   43   86:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   46   93:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   47   96:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + layoutparams.topMargin + layoutparams.bottomMargin + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   48   97:aload_0         
		//   49   98:invokevirtual   #261 <Method int getHeight()>
		//   50  101:aload_0         
		//   51  102:invokevirtual   #727 <Method int getHeightMode()>
		//   52  105:aload_0         
		//   53  106:invokevirtual   #252 <Method int getPaddingTop()>
		//   54  109:aload_0         
		//   55  110:invokevirtual   #264 <Method int getPaddingBottom()>
		//   56  113:iadd            
		//   57  114:aload           8
		//   58  116:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   59  119:iadd            
		//   60  120:aload           8
		//   61  122:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   62  125:iadd            
		//   63  126:iload_3         
		//   64  127:iload           4
		//   65  129:iload           5
		//   66  131:iadd            
		//   67  132:iadd            
		//   68  133:iadd            
		//   69  134:aload           8
		//   70  136:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   71  139:aload_0         
		//   72  140:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   73  143:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   74  146:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  75  147:aload_0         
		//*  76  148:aload_1         
		//*  77  149:iload_2         
		//*  78  150:iload_3         
		//*  79  151:aload           8
		//*  80  153:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  81  156:ifeq            165
				view.measure(i, j);
		//   82  159:aload_1         
		//   83  160:iload_2         
		//   84  161:iload_3         
		//   85  162:invokevirtual   #735 <Method void View.measure(int, int)>
		//   86  165:return          
		}

		public void moveView(int i, int j)
		{
			Object obj = ((Object) (getChildAt(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			if(obj == null)
		//*   4    6:aload_3         
		//*   5    7:ifnonnull       56
			{
				obj = ((Object) (new StringBuilder()));
		//    6   10:new             #140 <Class StringBuilder>
		//    7   13:dup             
		//    8   14:invokespecial   #141 <Method void StringBuilder()>
		//    9   17:astore_3        
				((StringBuilder) (obj)).append("Cannot move a child from non-existing index:");
		//   10   18:aload_3         
		//   11   19:ldc2            #738 <String "Cannot move a child from non-existing index:">
		//   12   22:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   13   25:pop             
				((StringBuilder) (obj)).append(i);
		//   14   26:aload_3         
		//   15   27:iload_1         
		//   16   28:invokevirtual   #151 <Method StringBuilder StringBuilder.append(int)>
		//   17   31:pop             
				((StringBuilder) (obj)).append(mRecyclerView.toString());
		//   18   32:aload_3         
		//   19   33:aload_0         
		//   20   34:getfield        #95  <Field RecyclerView mRecyclerView>
		//   21   37:invokevirtual   #739 <Method String RecyclerView.toString()>
		//   22   40:invokevirtual   #147 <Method StringBuilder StringBuilder.append(String)>
		//   23   43:pop             
				throw new IllegalArgumentException(((StringBuilder) (obj)).toString());
		//   24   44:new             #681 <Class IllegalArgumentException>
		//   25   47:dup             
		//   26   48:aload_3         
		//   27   49:invokevirtual   #160 <Method String StringBuilder.toString()>
		//   28   52:invokespecial   #682 <Method void IllegalArgumentException(String)>
		//   29   55:athrow          
			} else
			{
				detachViewAt(i);
		//   30   56:aload_0         
		//   31   57:iload_1         
		//   32   58:invokevirtual   #394 <Method void detachViewAt(int)>
				attachView(((View) (obj)), j);
		//   33   61:aload_0         
		//   34   62:aload_3         
		//   35   63:iload_2         
		//   36   64:invokevirtual   #417 <Method void attachView(View, int)>
				return;
		//   37   67:return          
			}
		}

		public void offsetChildrenHorizontal(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenHorizontal(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #742 <Method void RecyclerView.offsetChildrenHorizontal(int)>
		//    7   15:return          
		}

		public void offsetChildrenVertical(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenVertical(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #745 <Method void RecyclerView.offsetChildrenVertical(int)>
		//    7   15:return          
		}

		public void onAdapterChanged(Adapter adapter, Adapter adapter1)
		{
		//    0    0:return          
		}

		public boolean onAddFocusables(RecyclerView recyclerview, ArrayList arraylist, int i, int j)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onAttachedToWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			onDetachedFromWindow(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #754 <Method void onDetachedFromWindow(RecyclerView)>
		//    3    5:return          
		}

		public View onFocusSearchFailed(View view, int i, Recycler recycler, State state)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onInitializeAccessibilityEvent(Recycler recycler, State state, AccessibilityEvent accessibilityevent)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          114
			{
				if(accessibilityevent == null)
		//*   3    7:aload_3         
		//*   4    8:ifnonnull       12
					return;
		//    5   11:return          
				recycler = ((Recycler) (mRecyclerView));
		//    6   12:aload_0         
		//    7   13:getfield        #95  <Field RecyclerView mRecyclerView>
		//    8   16:astore_1        
				boolean flag1 = true;
		//    9   17:iconst_1        
		//   10   18:istore          5
				boolean flag = flag1;
		//   11   20:iload           5
		//   12   22:istore          4
				if(!((RecyclerView) (recycler)).canScrollVertically(1))
		//*  13   24:aload_1         
		//*  14   25:iconst_1        
		//*  15   26:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  16   29:ifne            83
				{
					flag = flag1;
		//   17   32:iload           5
		//   18   34:istore          4
					if(!mRecyclerView.canScrollVertically(-1))
		//*  19   36:aload_0         
		//*  20   37:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  21   40:iconst_m1       
		//*  22   41:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  23   44:ifne            83
					{
						flag = flag1;
		//   24   47:iload           5
		//   25   49:istore          4
						if(!mRecyclerView.canScrollHorizontally(-1))
		//*  26   51:aload_0         
		//*  27   52:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  28   55:iconst_m1       
		//*  29   56:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  30   59:ifne            83
							if(mRecyclerView.canScrollHorizontally(1))
		//*  31   62:aload_0         
		//*  32   63:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  33   66:iconst_1        
		//*  34   67:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  35   70:ifeq            80
								flag = flag1;
		//   36   73:iload           5
		//   37   75:istore          4
							else
		//*  38   77:goto            83
								flag = false;
		//   39   80:iconst_0        
		//   40   81:istore          4
					}
				}
				accessibilityevent.setScrollable(flag);
		//   41   83:aload_3         
		//   42   84:iload           4
		//   43   86:invokevirtual   #769 <Method void AccessibilityEvent.setScrollable(boolean)>
				if(mRecyclerView.mAdapter != null)
		//*  44   89:aload_0         
		//*  45   90:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  46   93:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  47   96:ifnull          113
					accessibilityevent.setItemCount(mRecyclerView.mAdapter.getItemCount());
		//   48   99:aload_3         
		//   49  100:aload_0         
		//   50  101:getfield        #95  <Field RecyclerView mRecyclerView>
		//   51  104:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   52  107:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   53  110:invokevirtual   #772 <Method void AccessibilityEvent.setItemCount(int)>
				return;
		//   54  113:return          
			} else
			{
				return;
		//   55  114:return          
			}
		}

		public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent)
		{
			onInitializeAccessibilityEvent(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilityevent);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #779 <Method void onInitializeAccessibilityEvent(RecyclerView$Recycler, RecyclerView$State, AccessibilityEvent)>
		//    9   19:return          
		}

		void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			onInitializeAccessibilityNodeInfo(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilitynodeinfocompat);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #784 <Method void onInitializeAccessibilityNodeInfo(RecyclerView$Recycler, RecyclerView$State, AccessibilityNodeInfoCompat)>
		//    9   19:return          
		}

		public void onInitializeAccessibilityNodeInfo(Recycler recycler, State state, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			if(mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1))
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:iconst_m1       
		//*   3    5:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*   4    8:ifne            22
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:iconst_m1       
		//*   8   16:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*   9   19:ifeq            34
			{
				accessibilitynodeinfocompat.addAction(8192);
		//   10   22:aload_3         
		//   11   23:sipush          8192
		//   12   26:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   13   29:aload_3         
		//   14   30:iconst_1        
		//   15   31:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollHorizontally(1))
		//*  16   34:aload_0         
		//*  17   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  18   38:iconst_1        
		//*  19   39:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   42:ifne            56
		//*  21   45:aload_0         
		//*  22   46:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  23   49:iconst_1        
		//*  24   50:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  25   53:ifeq            68
			{
				accessibilitynodeinfocompat.addAction(4096);
		//   26   56:aload_3         
		//   27   57:sipush          4096
		//   28   60:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   29   63:aload_3         
		//   30   64:iconst_1        
		//   31   65:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			accessibilitynodeinfocompat.setCollectionInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(getRowCountForAccessibility(recycler, state), getColumnCountForAccessibility(recycler, state), isLayoutHierarchical(recycler, state), getSelectionModeForAccessibility(recycler, state)))));
		//   32   68:aload_3         
		//   33   69:aload_0         
		//   34   70:aload_1         
		//   35   71:aload_2         
		//   36   72:invokevirtual   #792 <Method int getRowCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   37   75:aload_0         
		//   38   76:aload_1         
		//   39   77:aload_2         
		//   40   78:invokevirtual   #794 <Method int getColumnCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   41   81:aload_0         
		//   42   82:aload_1         
		//   43   83:aload_2         
		//   44   84:invokevirtual   #796 <Method boolean isLayoutHierarchical(RecyclerView$Recycler, RecyclerView$State)>
		//   45   87:aload_0         
		//   46   88:aload_1         
		//   47   89:aload_2         
		//   48   90:invokevirtual   #798 <Method int getSelectionModeForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   49   93:invokestatic    #804 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat.obtain(int, int, boolean, int)>
		//   50   96:invokevirtual   #808 <Method void AccessibilityNodeInfoCompat.setCollectionInfo(Object)>
		//   51   99:return          
		}

		public void onInitializeAccessibilityNodeInfoForItem(Recycler recycler, State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			boolean flag = canScrollVertically();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #611 <Method boolean canScrollVertically()>
		//    2    4:istore          7
			int j = 0;
		//    3    6:iconst_0        
		//    4    7:istore          6
			int i;
			if(flag)
		//*   5    9:iload           7
		//*   6   11:ifeq            24
				i = getPosition(view);
		//    7   14:aload_0         
		//    8   15:aload_3         
		//    9   16:invokevirtual   #812 <Method int getPosition(View)>
		//   10   19:istore          5
			else
		//*  11   21:goto            27
				i = 0;
		//   12   24:iconst_0        
		//   13   25:istore          5
			if(canScrollHorizontally())
		//*  14   27:aload_0         
		//*  15   28:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//*  16   31:ifeq            41
				j = getPosition(view);
		//   17   34:aload_0         
		//   18   35:aload_3         
		//   19   36:invokevirtual   #812 <Method int getPosition(View)>
		//   20   39:istore          6
			accessibilitynodeinfocompat.setCollectionItemInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, j, 1, false, false))));
		//   21   41:aload           4
		//   22   43:iload           5
		//   23   45:iconst_1        
		//   24   46:iload           6
		//   25   48:iconst_1        
		//   26   49:iconst_0        
		//   27   50:iconst_0        
		//   28   51:invokestatic    #817 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean)>
		//   29   54:invokevirtual   #820 <Method void AccessibilityNodeInfoCompat.setCollectionItemInfo(Object)>
		//   30   57:return          
		}

		void onInitializeAccessibilityNodeInfoForItem(View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_3        
			if(viewholder != null && !viewholder.isRemoved() && !mChildHelper.isHidden(viewholder.itemView))
		//*   3    5:aload_3         
		//*   4    6:ifnull          50
		//*   5    9:aload_3         
		//*   6   10:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   13:ifne            50
		//*   8   16:aload_0         
		//*   9   17:getfield        #128 <Field ChildHelper mChildHelper>
		//*  10   20:aload_3         
		//*  11   21:getfield        #205 <Field View RecyclerView$ViewHolder.itemView>
		//*  12   24:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  13   27:ifne            50
				onInitializeAccessibilityNodeInfoForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, accessibilitynodeinfocompat);
		//   14   30:aload_0         
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   18   38:aload_0         
		//   19   39:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//   21   45:aload_1         
		//   22   46:aload_2         
		//   23   47:invokevirtual   #823 <Method void onInitializeAccessibilityNodeInfoForItem(RecyclerView$Recycler, RecyclerView$State, View, AccessibilityNodeInfoCompat)>
		//   24   50:return          
		}

		public View onInterceptFocusSearch(View view, int i)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onItemsAdded(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsChanged(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemsRemoved(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj)
		{
			onItemsUpdated(recyclerview, i, j);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:invokevirtual   #835 <Method void onItemsUpdated(RecyclerView, int, int)>
		//    5    7:return          
		}

		public void onLayoutChildren(Recycler recycler, State state)
		{
			Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #840 <String "You must override onLayoutChildren(Recycler recycler, State state) ">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void onLayoutCompleted(State state)
		{
		//    0    0:return          
		}

		public void onMeasure(Recycler recycler, State state, int i, int j)
		{
			mRecyclerView.defaultOnMeasure(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_3         
		//    3    5:iload           4
		//    4    7:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
		//    5   10:return          
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, State state, View view, View view1)
		{
			return onRequestChildFocus(recyclerview, view, view1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_3         
		//    3    3:aload           4
		//    4    5:invokevirtual   #858 <Method boolean onRequestChildFocus(RecyclerView, View, View)>
		//    5    8:ireturn         
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, View view, View view1)
		{
			return isSmoothScrolling() || recyclerview.isComputingLayout();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #860 <Method boolean isSmoothScrolling()>
		//    2    4:ifne            19
		//    3    7:aload_1         
		//    4    8:invokevirtual   #863 <Method boolean RecyclerView.isComputingLayout()>
		//    5   11:ifeq            17
		//    6   14:goto            19
		//    7   17:iconst_0        
		//    8   18:ireturn         
		//    9   19:iconst_1        
		//   10   20:ireturn         
		}

		public void onRestoreInstanceState(Parcelable parcelable)
		{
		//    0    0:return          
		}

		public Parcelable onSaveInstanceState()
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onScrollStateChanged(int i)
		{
		//    0    0:return          
		}

		boolean performAccessibilityAction(int i, Bundle bundle)
		{
			return performAccessibilityAction(mRecyclerView.mRecycler, mRecyclerView.mState, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iload_1         
		//    8   16:aload_2         
		//    9   17:invokevirtual   #873 <Method boolean performAccessibilityAction(RecyclerView$Recycler, RecyclerView$State, int, Bundle)>
		//   10   20:ireturn         
		}

		public boolean performAccessibilityAction(Recycler recycler, State state, int i, Bundle bundle)
		{
			int j;
label0:
			{
				if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       9
					return false;
		//    3    7:iconst_0        
		//    4    8:ireturn         
				int k;
				if(i != 4096)
		//*   5    9:iload_3         
		//*   6   10:sipush          4096
		//*   7   13:icmpeq          97
				{
					if(i != 8192)
		//*   8   16:iload_3         
		//*   9   17:sipush          8192
		//*  10   20:icmpeq          31
					{
						i = 0;
		//   11   23:iconst_0        
		//   12   24:istore_3        
						j = i;
		//   13   25:iload_3         
		//   14   26:istore          5
						break label0;
		//   15   28:goto            167
					}
					if(mRecyclerView.canScrollVertically(-1))
		//*  16   31:aload_0         
		//*  17   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  18   35:iconst_m1       
		//*  19   36:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   39:ifeq            61
						i = -(getHeight() - getPaddingTop() - getPaddingBottom());
		//   21   42:aload_0         
		//   22   43:invokevirtual   #261 <Method int getHeight()>
		//   23   46:aload_0         
		//   24   47:invokevirtual   #252 <Method int getPaddingTop()>
		//   25   50:isub            
		//   26   51:aload_0         
		//   27   52:invokevirtual   #264 <Method int getPaddingBottom()>
		//   28   55:isub            
		//   29   56:ineg            
		//   30   57:istore_3        
					else
		//*  31   58:goto            63
						i = 0;
		//   32   61:iconst_0        
		//   33   62:istore_3        
					k = i;
		//   34   63:iload_3         
		//   35   64:istore          6
					if(mRecyclerView.canScrollHorizontally(-1))
		//*  36   66:aload_0         
		//*  37   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  38   70:iconst_m1       
		//*  39   71:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  40   74:ifeq            161
					{
						j = -(getWidth() - getPaddingLeft() - getPaddingRight());
		//   41   77:aload_0         
		//   42   78:invokevirtual   #255 <Method int getWidth()>
		//   43   81:aload_0         
		//   44   82:invokevirtual   #249 <Method int getPaddingLeft()>
		//   45   85:isub            
		//   46   86:aload_0         
		//   47   87:invokevirtual   #258 <Method int getPaddingRight()>
		//   48   90:isub            
		//   49   91:ineg            
		//   50   92:istore          5
						break label0;
		//   51   94:goto            167
					}
				} else
				{
					if(mRecyclerView.canScrollVertically(1))
		//*  52   97:aload_0         
		//*  53   98:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  54  101:iconst_1        
		//*  55  102:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  56  105:ifeq            126
						i = getHeight() - getPaddingTop() - getPaddingBottom();
		//   57  108:aload_0         
		//   58  109:invokevirtual   #261 <Method int getHeight()>
		//   59  112:aload_0         
		//   60  113:invokevirtual   #252 <Method int getPaddingTop()>
		//   61  116:isub            
		//   62  117:aload_0         
		//   63  118:invokevirtual   #264 <Method int getPaddingBottom()>
		//   64  121:isub            
		//   65  122:istore_3        
					else
		//*  66  123:goto            128
						i = 0;
		//   67  126:iconst_0        
		//   68  127:istore_3        
					k = i;
		//   69  128:iload_3         
		//   70  129:istore          6
					if(mRecyclerView.canScrollHorizontally(1))
		//*  71  131:aload_0         
		//*  72  132:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  73  135:iconst_1        
		//*  74  136:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  75  139:ifeq            161
					{
						j = getWidth() - getPaddingLeft() - getPaddingRight();
		//   76  142:aload_0         
		//   77  143:invokevirtual   #255 <Method int getWidth()>
		//   78  146:aload_0         
		//   79  147:invokevirtual   #249 <Method int getPaddingLeft()>
		//   80  150:isub            
		//   81  151:aload_0         
		//   82  152:invokevirtual   #258 <Method int getPaddingRight()>
		//   83  155:isub            
		//   84  156:istore          5
						break label0;
		//   85  158:goto            167
					}
				}
				j = 0;
		//   86  161:iconst_0        
		//   87  162:istore          5
				i = k;
		//   88  164:iload           6
		//   89  166:istore_3        
			}
			if(i == 0 && j == 0)
		//*  90  167:iload_3         
		//*  91  168:ifne            178
		//*  92  171:iload           5
		//*  93  173:ifne            178
			{
				return false;
		//   94  176:iconst_0        
		//   95  177:ireturn         
			} else
			{
				mRecyclerView.scrollBy(j, i);
		//   96  178:aload_0         
		//   97  179:getfield        #95  <Field RecyclerView mRecyclerView>
		//   98  182:iload           5
		//   99  184:iload_3         
		//  100  185:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//  101  188:iconst_1        
		//  102  189:ireturn         
			}
		}

		public boolean performAccessibilityActionForItem(Recycler recycler, State state, View view, int i, Bundle bundle)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean performAccessibilityActionForItem(View view, int i, Bundle bundle)
		{
			return performAccessibilityActionForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:iload_2         
		//    9   17:aload_3         
		//   10   18:invokevirtual   #881 <Method boolean performAccessibilityActionForItem(RecyclerView$Recycler, RecyclerView$State, View, int, Bundle)>
		//   11   21:ireturn         
		}

		public void postOnAnimation(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				ViewCompat.postOnAnimation(((View) (mRecyclerView)), runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokestatic    #886 <Method void ViewCompat.postOnAnimation(View, Runnable)>
		//    7   15:return          
		}

		public void removeAllViews()
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iflt            26
				mChildHelper.removeViewAt(i);
		//    7   11:aload_0         
		//    8   12:getfield        #128 <Field ChildHelper mChildHelper>
		//    9   15:iload_1         
		//   10   16:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            7
		//   16   26:return          
		}

		public void removeAndRecycleAllViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            38
				if(!RecyclerView.getChildViewHolderInt(getChildAt(i)).shouldIgnore())
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:invokevirtual   #454 <Method View getChildAt(int)>
		//*  10   16:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//*  11   19:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  12   22:ifne            31
					removeAndRecycleViewAt(i, recycler);
		//   13   25:aload_0         
		//   14   26:iload_2         
		//   15   27:aload_1         
		//   16   28:invokevirtual   #892 <Method void removeAndRecycleViewAt(int, RecyclerView$Recycler)>

		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_2        
		//*  21   35:goto            7
		//   22   38:return          
		}

		void removeAndRecycleScrapInt(Recycler recycler)
		{
			int j = recycler.getScrapCount();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #896 <Method int RecyclerView$Recycler.getScrapCount()>
		//    2    4:istore_3        
			for(int i = j - 1; i >= 0; i--)
		//*   3    5:iload_3         
		//*   4    6:iconst_1        
		//*   5    7:isub            
		//*   6    8:istore_2        
		//*   7    9:iload_2         
		//*   8   10:iflt            103
			{
				View view = recycler.getScrapViewAt(i);
		//    9   13:aload_1         
		//   10   14:iload_2         
		//   11   15:invokevirtual   #899 <Method View RecyclerView$Recycler.getScrapViewAt(int)>
		//   12   18:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   13   20:aload           4
		//   14   22:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   15   25:astore          5
				if(viewholder.shouldIgnore())
		//*  16   27:aload           5
		//*  17   29:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  18   32:ifeq            38
					continue;
		//   19   35:goto            96
				viewholder.setIsRecyclable(false);
		//   20   38:aload           5
		//   21   40:iconst_0        
		//   22   41:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(viewholder.isTmpDetached())
		//*  23   44:aload           5
		//*  24   46:invokevirtual   #905 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  25   49:ifeq            62
					mRecyclerView.removeDetachedView(view, false);
		//   26   52:aload_0         
		//   27   53:getfield        #95  <Field RecyclerView mRecyclerView>
		//   28   56:aload           4
		//   29   58:iconst_0        
		//   30   59:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
				if(mRecyclerView.mItemAnimator != null)
		//*  31   62:aload_0         
		//*  32   63:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  33   66:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*  34   69:ifnull          84
					mRecyclerView.mItemAnimator.endAnimation(viewholder);
		//   35   72:aload_0         
		//   36   73:getfield        #95  <Field RecyclerView mRecyclerView>
		//   37   76:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//   38   79:aload           5
		//   39   81:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
				viewholder.setIsRecyclable(true);
		//   40   84:aload           5
		//   41   86:iconst_1        
		//   42   87:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				recycler.quickRecycleScrapView(view);
		//   43   90:aload_1         
		//   44   91:aload           4
		//   45   93:invokevirtual   #912 <Method void RecyclerView$Recycler.quickRecycleScrapView(View)>
			}

		//   46   96:iload_2         
		//   47   97:iconst_1        
		//   48   98:isub            
		//   49   99:istore_2        
		//*  50  100:goto            9
			recycler.clearScrap();
		//   51  103:aload_1         
		//   52  104:invokevirtual   #915 <Method void RecyclerView$Recycler.clearScrap()>
			if(j > 0)
		//*  53  107:iload_3         
		//*  54  108:ifle            118
				mRecyclerView.invalidate();
		//   55  111:aload_0         
		//   56  112:getfield        #95  <Field RecyclerView mRecyclerView>
		//   57  115:invokevirtual   #916 <Method void RecyclerView.invalidate()>
		//   58  118:return          
		}

		public void removeAndRecycleView(View view, Recycler recycler)
		{
			removeView(view);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #920 <Method void removeView(View)>
			recycler.recycleView(view);
		//    3    5:aload_2         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//    6   10:return          
		}

		public void removeAndRecycleViewAt(int i, Recycler recycler)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			removeViewAt(i);
		//    4    6:aload_0         
		//    5    7:iload_1         
		//    6    8:invokevirtual   #386 <Method void removeViewAt(int)>
			recycler.recycleView(view);
		//    7   11:aload_2         
		//    8   12:aload_3         
		//    9   13:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//   10   16:return          
		}

		public boolean removeCallbacks(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          16
				return mRecyclerView.removeCallbacks(runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #927 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    7   15:ireturn         
			else
				return false;
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void removeDetachedView(View view)
		{
			mRecyclerView.removeDetachedView(view, false);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:iconst_0        
		//    4    6:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//    5    9:return          
		}

		public void removeView(View view)
		{
			mChildHelper.removeView(view);
		//    0    0:aload_0         
		//    1    1:getfield        #128 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #928 <Method void ChildHelper.removeView(View)>
		//    4    8:return          
		}

		public void removeViewAt(int i)
		{
			if(getChildAt(i) != null)
		//*   0    0:aload_0         
		//*   1    1:iload_1         
		//*   2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//*   3    5:ifnull          16
				mChildHelper.removeViewAt(i);
		//    4    8:aload_0         
		//    5    9:getfield        #128 <Field ChildHelper mChildHelper>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>
		//    8   16:return          
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			return requestChildRectangleOnScreen(recyclerview, view, rect, flag, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:iconst_0        
		//    6    7:invokevirtual   #933 <Method boolean requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
		//    7   10:ireturn         
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag, boolean flag1)
		{
			view = ((View) (getChildRectangleOnScreenScrollAmount(recyclerview, view, rect, flag)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:invokespecial   #935 <Method int[] getChildRectangleOnScreenScrollAmount(RecyclerView, View, Rect, boolean)>
		//    6    9:astore_2        
			int i = view[0];
		//    7   10:aload_2         
		//    8   11:iconst_0        
		//    9   12:iaload          
		//   10   13:istore          6
			int j = view[1];
		//   11   15:aload_2         
		//   12   16:iconst_1        
		//   13   17:iaload          
		//   14   18:istore          7
			if(flag1 && !isFocusedChildVisibleAfterScrolling(recyclerview, i, j) || i == 0 && j == 0)
		//*  15   20:iload           5
		//*  16   22:ifeq            37
		//*  17   25:aload_0         
		//*  18   26:aload_1         
		//*  19   27:iload           6
		//*  20   29:iload           7
		//*  21   31:invokespecial   #937 <Method boolean isFocusedChildVisibleAfterScrolling(RecyclerView, int, int)>
		//*  22   34:ifeq            50
		//*  23   37:iload           6
		//*  24   39:ifne            52
		//*  25   42:iload           7
		//*  26   44:ifeq            50
		//*  27   47:goto            52
				return false;
		//   28   50:iconst_0        
		//   29   51:ireturn         
			if(flag)
		//*  30   52:iload           4
		//*  31   54:ifeq            67
			{
				recyclerview.scrollBy(i, j);
		//   32   57:aload_1         
		//   33   58:iload           6
		//   34   60:iload           7
		//   35   62:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//   36   65:iconst_1        
		//   37   66:ireturn         
			} else
			{
				recyclerview.smoothScrollBy(i, j);
		//   38   67:aload_1         
		//   39   68:iload           6
		//   40   70:iload           7
		//   41   72:invokevirtual   #940 <Method void RecyclerView.smoothScrollBy(int, int)>
				return true;
		//   42   75:iconst_1        
		//   43   76:ireturn         
			}
		}

		public void requestLayout()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          14
				mRecyclerView.requestLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #943 <Method void RecyclerView.requestLayout()>
		//    6   14:return          
		}

		public void requestSimpleAnimationsInNextLayout()
		{
			mRequestedSimpleAnimations = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #66  <Field boolean mRequestedSimpleAnimations>
		//    3    5:return          
		}

		public int scrollHorizontallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void scrollToPosition(int i)
		{
		//    0    0:return          
		}

		public int scrollVerticallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void setAutoMeasureEnabled(boolean flag)
		{
			mAutoMeasure = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #70  <Field boolean mAutoMeasure>
		//    3    5:return          
		}

		void setExactMeasureSpecsFrom(RecyclerView recyclerview)
		{
			setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getHeight(), 0x40000000));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//    3    5:ldc1            #221 <Int 0x40000000>
		//    4    7:invokestatic    #241 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    5   10:aload_1         
		//    6   11:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//    7   14:ldc1            #221 <Int 0x40000000>
		//    8   16:invokestatic    #241 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    9   19:invokevirtual   #955 <Method void setMeasureSpecs(int, int)>
		//   10   22:return          
		}

		public final void setItemPrefetchEnabled(boolean flag)
		{
			if(flag != mItemPrefetchEnabled)
		//*   0    0:iload_1         
		//*   1    1:aload_0         
		//*   2    2:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//*   3    5:icmpeq          35
			{
				mItemPrefetchEnabled = flag;
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:putfield        #74  <Field boolean mItemPrefetchEnabled>
				mPrefetchMaxCountObserved = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #958 <Field int mPrefetchMaxCountObserved>
				if(mRecyclerView != null)
		//*  10   18:aload_0         
		//*  11   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   22:ifnull          35
					mRecyclerView.mRecycler.updateViewCacheSize();
		//   13   25:aload_0         
		//   14   26:getfield        #95  <Field RecyclerView mRecyclerView>
		//   15   29:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   16   32:invokevirtual   #961 <Method void RecyclerView$Recycler.updateViewCacheSize()>
			}
		//   17   35:return          
		}

		void setMeasureSpecs(int i, int j)
		{
			mWidth = android.view.View.MeasureSpec.getSize(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    3    5:putfield        #657 <Field int mWidth>
			mWidthMode = android.view.View.MeasureSpec.getMode(i);
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    7   13:putfield        #660 <Field int mWidthMode>
			if(mWidthMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*   8   16:aload_0         
		//*   9   17:getfield        #660 <Field int mWidthMode>
		//*  10   20:ifne            34
		//*  11   23:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  12   26:ifne            34
				mWidth = 0;
		//   13   29:aload_0         
		//   14   30:iconst_0        
		//   15   31:putfield        #657 <Field int mWidth>
			mHeight = android.view.View.MeasureSpec.getSize(j);
		//   16   34:aload_0         
		//   17   35:iload_2         
		//   18   36:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//   19   39:putfield        #574 <Field int mHeight>
			mHeightMode = android.view.View.MeasureSpec.getMode(j);
		//   20   42:aload_0         
		//   21   43:iload_2         
		//   22   44:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//   23   47:putfield        #577 <Field int mHeightMode>
			if(mHeightMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*  24   50:aload_0         
		//*  25   51:getfield        #577 <Field int mHeightMode>
		//*  26   54:ifne            68
		//*  27   57:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  28   60:ifne            68
				mHeight = 0;
		//   29   63:aload_0         
		//   30   64:iconst_0        
		//   31   65:putfield        #574 <Field int mHeight>
		//   32   68:return          
		}

		public void setMeasuredDimension(int i, int j)
		{
			mRecyclerView.setMeasuredDimension(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokestatic    #968 <Method void RecyclerView.access$1200(RecyclerView, int, int)>
		//    5    9:return          
		}

		public void setMeasuredDimension(Rect rect, int i, int j)
		{
			int k = rect.width();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #287 <Method int Rect.width()>
		//    2    4:istore          4
			int l = getPaddingLeft();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #249 <Method int getPaddingLeft()>
		//    5   10:istore          5
			int i1 = getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #258 <Method int getPaddingRight()>
		//    8   16:istore          6
			int j1 = rect.height();
		//    9   18:aload_1         
		//   10   19:invokevirtual   #290 <Method int Rect.height()>
		//   11   22:istore          7
			int k1 = getPaddingTop();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #252 <Method int getPaddingTop()>
		//   14   28:istore          8
			int l1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   34:istore          9
			setMeasuredDimension(chooseSize(i, k + l + i1, getMinimumWidth()), chooseSize(j, j1 + k1 + l1, getMinimumHeight()));
		//   18   36:aload_0         
		//   19   37:iload_2         
		//   20   38:iload           4
		//   21   40:iload           5
		//   22   42:iadd            
		//   23   43:iload           6
		//   24   45:iadd            
		//   25   46:aload_0         
		//   26   47:invokevirtual   #971 <Method int getMinimumWidth()>
		//   27   50:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   28   53:iload_3         
		//   29   54:iload           7
		//   30   56:iload           8
		//   31   58:iadd            
		//   32   59:iload           9
		//   33   61:iadd            
		//   34   62:aload_0         
		//   35   63:invokevirtual   #975 <Method int getMinimumHeight()>
		//   36   66:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   37   69:invokevirtual   #977 <Method void setMeasuredDimension(int, int)>
		//   38   72:return          
		}

		void setMeasuredDimensionFromChildren(int i, int j)
		{
			int k2 = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore          11
			if(k2 == 0)
		//*   3    6:iload           11
		//*   4    8:ifne            21
			{
				mRecyclerView.defaultOnMeasure(i, j);
		//    5   11:aload_0         
		//    6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   15:iload_1         
		//    8   16:iload_2         
		//    9   17:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
				return;
		//   10   20:return          
			}
			int l = 0;
		//   11   21:iconst_0        
		//   12   22:istore          4
			int i2 = 0x7fffffff;
		//   13   24:ldc2            #979 <Int 0x7fffffff>
		//   14   27:istore          9
			int k1 = 0x80000000;
		//   15   29:ldc1            #220 <Int 0x80000000>
		//   16   31:istore          7
			int k = k1;
		//   17   33:iload           7
		//   18   35:istore_3        
			int j1 = 0x7fffffff;
		//   19   36:ldc2            #979 <Int 0x7fffffff>
		//   20   39:istore          6
			while(l < k2) 
		//*  21   41:iload           4
		//*  22   43:iload           11
		//*  23   45:icmpge          179
			{
				View view = getChildAt(l);
		//   24   48:aload_0         
		//   25   49:iload           4
		//   26   51:invokevirtual   #454 <Method View getChildAt(int)>
		//   27   54:astore          12
				Rect rect = mRecyclerView.mTempRect;
		//   28   56:aload_0         
		//   29   57:getfield        #95  <Field RecyclerView mRecyclerView>
		//   30   60:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   31   63:astore          13
				getDecoratedBoundsWithMargins(view, rect);
		//   32   65:aload_0         
		//   33   66:aload           12
		//   34   68:aload           13
		//   35   70:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				int i1 = i2;
		//   36   73:iload           9
		//   37   75:istore          5
				if(rect.left < i2)
		//*  38   77:aload           13
		//*  39   79:getfield        #272 <Field int Rect.left>
		//*  40   82:iload           9
		//*  41   84:icmpge          94
					i1 = rect.left;
		//   42   87:aload           13
		//   43   89:getfield        #272 <Field int Rect.left>
		//   44   92:istore          5
				int l1 = k1;
		//   45   94:iload           7
		//   46   96:istore          8
				if(rect.right > k1)
		//*  47   98:aload           13
		//*  48  100:getfield        #361 <Field int Rect.right>
		//*  49  103:iload           7
		//*  50  105:icmple          115
					l1 = rect.right;
		//   51  108:aload           13
		//   52  110:getfield        #361 <Field int Rect.right>
		//   53  113:istore          8
				k1 = j1;
		//   54  115:iload           6
		//   55  117:istore          7
				if(rect.top < j1)
		//*  56  119:aload           13
		//*  57  121:getfield        #281 <Field int Rect.top>
		//*  58  124:iload           6
		//*  59  126:icmpge          136
					k1 = rect.top;
		//   60  129:aload           13
		//   61  131:getfield        #281 <Field int Rect.top>
		//   62  134:istore          7
				int j2 = k;
		//   63  136:iload_3         
		//   64  137:istore          10
				if(rect.bottom > k)
		//*  65  139:aload           13
		//*  66  141:getfield        #364 <Field int Rect.bottom>
		//*  67  144:iload_3         
		//*  68  145:icmple          155
					j2 = rect.bottom;
		//   69  148:aload           13
		//   70  150:getfield        #364 <Field int Rect.bottom>
		//   71  153:istore          10
				l++;
		//   72  155:iload           4
		//   73  157:iconst_1        
		//   74  158:iadd            
		//   75  159:istore          4
				j1 = k1;
		//   76  161:iload           7
		//   77  163:istore          6
				i2 = i1;
		//   78  165:iload           5
		//   79  167:istore          9
				k1 = l1;
		//   80  169:iload           8
		//   81  171:istore          7
				k = j2;
		//   82  173:iload           10
		//   83  175:istore_3        
			}
		//*  84  176:goto            41
			mRecyclerView.mTempRect.set(i2, j1, k1, k);
		//   85  179:aload_0         
		//   86  180:getfield        #95  <Field RecyclerView mRecyclerView>
		//   87  183:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   88  186:iload           9
		//   89  188:iload           6
		//   90  190:iload           7
		//   91  192:iload_3         
		//   92  193:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			setMeasuredDimension(mRecyclerView.mTempRect, i, j);
		//   93  196:aload_0         
		//   94  197:aload_0         
		//   95  198:getfield        #95  <Field RecyclerView mRecyclerView>
		//   96  201:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   97  204:iload_1         
		//   98  205:iload_2         
		//   99  206:invokevirtual   #981 <Method void setMeasuredDimension(Rect, int, int)>
		//  100  209:return          
		}

		public void setMeasurementCacheEnabled(boolean flag)
		{
			mMeasurementCacheEnabled = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    3    5:return          
		}

		void setRecyclerView(RecyclerView recyclerview)
		{
			if(recyclerview == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       27
			{
				mRecyclerView = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = null;
		//    5    9:aload_0         
		//    6   10:aconst_null     
		//    7   11:putfield        #128 <Field ChildHelper mChildHelper>
				mWidth = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #657 <Field int mWidth>
				mHeight = 0;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #574 <Field int mHeight>
			} else
		//*  14   24:goto            56
			{
				mRecyclerView = recyclerview;
		//   15   27:aload_0         
		//   16   28:aload_1         
		//   17   29:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = recyclerview.mChildHelper;
		//   18   32:aload_0         
		//   19   33:aload_1         
		//   20   34:getfield        #984 <Field ChildHelper RecyclerView.mChildHelper>
		//   21   37:putfield        #128 <Field ChildHelper mChildHelper>
				mWidth = recyclerview.getWidth();
		//   22   40:aload_0         
		//   23   41:aload_1         
		//   24   42:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//   25   45:putfield        #657 <Field int mWidth>
				mHeight = recyclerview.getHeight();
		//   26   48:aload_0         
		//   27   49:aload_1         
		//   28   50:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//   29   53:putfield        #574 <Field int mHeight>
			}
			mWidthMode = 0x40000000;
		//   30   56:aload_0         
		//   31   57:ldc1            #221 <Int 0x40000000>
		//   32   59:putfield        #660 <Field int mWidthMode>
			mHeightMode = 0x40000000;
		//   33   62:aload_0         
		//   34   63:ldc1            #221 <Int 0x40000000>
		//   35   65:putfield        #577 <Field int mHeightMode>
		//   36   68:return          
		}

		boolean shouldMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return view.isLayoutRequested() || !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getHeight(), j, layoutparams.height);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #987 <Method boolean View.isLayoutRequested()>
		//    2    4:ifne            51
		//    3    7:aload_0         
		//    4    8:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    5   11:ifeq            51
		//    6   14:aload_1         
		//    7   15:invokevirtual   #615 <Method int View.getWidth()>
		//    8   18:iload_2         
		//    9   19:aload           4
		//   10   21:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   11   24:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   12   27:ifeq            51
		//   13   30:aload_1         
		//   14   31:invokevirtual   #616 <Method int View.getHeight()>
		//   15   34:iload_3         
		//   16   35:aload           4
		//   17   37:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   18   40:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   19   43:ifne            49
		//   20   46:goto            51
		//   21   49:iconst_0        
		//   22   50:ireturn         
		//   23   51:iconst_1        
		//   24   52:ireturn         
		}

		boolean shouldMeasureTwice()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean shouldReMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getMeasuredWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getMeasuredHeight(), j, layoutparams.height);
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ifeq            44
		//    3    7:aload_1         
		//    4    8:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    5   11:iload_2         
		//    6   12:aload           4
		//    7   14:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//    8   17:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//    9   20:ifeq            44
		//   10   23:aload_1         
		//   11   24:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//   12   27:iload_3         
		//   13   28:aload           4
		//   14   30:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   15   33:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   16   36:ifne            42
		//   17   39:goto            44
		//   18   42:iconst_0        
		//   19   43:ireturn         
		//   20   44:iconst_1        
		//   21   45:ireturn         
		}

		public void smoothScrollToPosition(RecyclerView recyclerview, State state, int i)
		{
			Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #995 <String "You must override smoothScrollToPosition to support smooth scrolling">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void startSmoothScroll(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller != null && smoothscroller != mSmoothScroller && mSmoothScroller.isRunning())
		//*   0    0:aload_0         
		//*   1    1:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          32
		//*   3    7:aload_1         
		//*   4    8:aload_0         
		//*   5    9:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   6   12:if_acmpeq       32
		//*   7   15:aload_0         
		//*   8   16:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   9   19:invokevirtual   #184 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//*  10   22:ifeq            32
				mSmoothScroller.stop();
		//   11   25:aload_0         
		//   12   26:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   13   29:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
			mSmoothScroller = smoothscroller;
		//   14   32:aload_0         
		//   15   33:aload_1         
		//   16   34:putfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
			mSmoothScroller.start(mRecyclerView, this);
		//   17   37:aload_0         
		//   18   38:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   19   41:aload_0         
		//   20   42:getfield        #95  <Field RecyclerView mRecyclerView>
		//   21   45:aload_0         
		//   22   46:invokevirtual   #1003 <Method void RecyclerView$SmoothScroller.start(RecyclerView, RecyclerView$LayoutManager)>
		//   23   49:return          
		}

		public void stopIgnoringView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			((ViewHolder) (view)).stopIgnoring();
		//    3    5:aload_1         
		//    4    6:invokevirtual   #1007 <Method void RecyclerView$ViewHolder.stopIgnoring()>
			((ViewHolder) (view)).resetInternal();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #1010 <Method void RecyclerView$ViewHolder.resetInternal()>
			((ViewHolder) (view)).addFlags(4);
		//    7   13:aload_1         
		//    8   14:iconst_4        
		//    9   15:invokevirtual   #674 <Method void RecyclerView$ViewHolder.addFlags(int)>
		//   10   18:return          
		}

		void stopSmoothScroller()
		{
			if(mSmoothScroller != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          14
				mSmoothScroller.stop();
		//    3    7:aload_0         
		//    4    8:getfield        #179 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
		//    6   14:return          
		}

		public boolean supportsPredictiveItemAnimations()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean mAutoMeasure;
		ChildHelper mChildHelper;
		private int mHeight;
		private int mHeightMode;
		ViewBoundsCheck mHorizontalBoundCheck;
		private final ViewBoundsCheck.Callback mHorizontalBoundCheckCallback = new _cls1();
		boolean mIsAttachedToWindow;
		private boolean mItemPrefetchEnabled;
		private boolean mMeasurementCacheEnabled;
		int mPrefetchMaxCountObserved;
		boolean mPrefetchMaxObservedInInitialPrefetch;
		RecyclerView mRecyclerView;
		boolean mRequestedSimpleAnimations;
		SmoothScroller mSmoothScroller;
		ViewBoundsCheck mVerticalBoundCheck;
		private final ViewBoundsCheck.Callback mVerticalBoundCheckCallback = new _cls2();
		private int mWidth;
		private int mWidthMode;


/*
		static void access$1400(LayoutManager layoutmanager, SmoothScroller smoothscroller)
		{
			layoutmanager.onSmoothScrollerStopped(smoothscroller);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #81  <Method void onSmoothScrollerStopped(RecyclerView$SmoothScroller)>
			return;
		//    3    5:return          
		}

*/

		public LayoutManager()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #47  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #9   <Class RecyclerView$LayoutManager$1>
		//    4    8:dup             
		//    5    9:aload_0         
		//    6   10:invokespecial   #50  <Method void RecyclerView$LayoutManager$1(RecyclerView$LayoutManager)>
		//    7   13:putfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//    8   16:aload_0         
		//    9   17:new             #11  <Class RecyclerView$LayoutManager$2>
		//   10   20:dup             
		//   11   21:aload_0         
		//   12   22:invokespecial   #53  <Method void RecyclerView$LayoutManager$2(RecyclerView$LayoutManager)>
		//   13   25:putfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
			mHorizontalBoundCheck = new ViewBoundsCheck(mHorizontalBoundCheckCallback);
		//   14   28:aload_0         
		//   15   29:new             #57  <Class ViewBoundsCheck>
		//   16   32:dup             
		//   17   33:aload_0         
		//   18   34:getfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//   19   37:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   20   40:putfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
			mVerticalBoundCheck = new ViewBoundsCheck(mVerticalBoundCheckCallback);
		//   21   43:aload_0         
		//   22   44:new             #57  <Class ViewBoundsCheck>
		//   23   47:dup             
		//   24   48:aload_0         
		//   25   49:getfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
		//   26   52:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   27   55:putfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
			mRequestedSimpleAnimations = false;
		//   28   58:aload_0         
		//   29   59:iconst_0        
		//   30   60:putfield        #66  <Field boolean mRequestedSimpleAnimations>
			mIsAttachedToWindow = false;
		//   31   63:aload_0         
		//   32   64:iconst_0        
		//   33   65:putfield        #68  <Field boolean mIsAttachedToWindow>
			mAutoMeasure = false;
		//   34   68:aload_0         
		//   35   69:iconst_0        
		//   36   70:putfield        #70  <Field boolean mAutoMeasure>
			mMeasurementCacheEnabled = true;
		//   37   73:aload_0         
		//   38   74:iconst_1        
		//   39   75:putfield        #72  <Field boolean mMeasurementCacheEnabled>
			mItemPrefetchEnabled = true;
		//   40   78:aload_0         
		//   41   79:iconst_1        
		//   42   80:putfield        #74  <Field boolean mItemPrefetchEnabled>
		//   43   83:return          
		}
	}

	public static interface LayoutManager.LayoutPrefetchRegistry
	{

		public abstract void addPosition(int i, int j);
	}

	public static class LayoutManager.Properties
	{

		public int orientation;
		public boolean reverseLayout;
		public int spanCount;
		public boolean stackFromEnd;

		public LayoutManager.Properties()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams
	{

		public int getViewAdapterPosition()
		{
			return mViewHolder.getAdapterPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #49  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//    3    7:ireturn         
		}

		public int getViewLayoutPosition()
		{
			return mViewHolder.getLayoutPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #53  <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//    3    7:ireturn         
		}

		public int getViewPosition()
		{
			return mViewHolder.getPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #58  <Method int RecyclerView$ViewHolder.getPosition()>
		//    3    7:ireturn         
		}

		public boolean isItemChanged()
		{
			return mViewHolder.isUpdated();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #64  <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//    3    7:ireturn         
		}

		public boolean isItemRemoved()
		{
			return mViewHolder.isRemoved();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #68  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//    3    7:ireturn         
		}

		public boolean isViewInvalid()
		{
			return mViewHolder.isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #72  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//    3    7:ireturn         
		}

		public boolean viewNeedsUpdate()
		{
			return mViewHolder.needsUpdate();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #76  <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//    3    7:ireturn         
		}

		final Rect mDecorInsets;
		boolean mInsetsDirty;
		boolean mPendingInvalidate;
		ViewHolder mViewHolder;

		public LayoutParams(int i, int j)
		{
			super(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #18  <Method void android.view.ViewGroup$MarginLayoutParams(int, int)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(Context context, AttributeSet attributeset)
		{
			super(context, attributeset);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #33  <Method void android.view.ViewGroup$MarginLayoutParams(Context, AttributeSet)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(LayoutParams layoutparams)
		{
			super(((android.view.ViewGroup.LayoutParams) (layoutparams)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			super(layoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams)
		{
			super(marginlayoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #40  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}
	}

	public static interface OnChildAttachStateChangeListener
	{

		public abstract void onChildViewAttachedToWindow(View view);

		public abstract void onChildViewDetachedFromWindow(View view);
	}

	public static abstract class OnFlingListener
	{

		public abstract boolean onFling(int i, int j);

		public OnFlingListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface OnItemTouchListener
	{

		public abstract boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);

		public abstract void onRequestDisallowInterceptTouchEvent(boolean flag);

		public abstract void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);
	}

	public static abstract class OnScrollListener
	{

		public void onScrollStateChanged(RecyclerView recyclerview, int i)
		{
		//    0    0:return          
		}

		public void onScrolled(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public OnScrollListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface Orientation
		extends Annotation
	{
	}

	public static class RecycledViewPool
	{

		private ScrapData getScrapDataForType(int i)
		{
			ScrapData scrapdata1 = (ScrapData)mScrap.get(i);
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_3        
			ScrapData scrapdata = scrapdata1;
		//    6   12:aload_3         
		//    7   13:astore_2        
			if(scrapdata1 == null)
		//*   8   14:aload_3         
		//*   9   15:ifnonnull       35
			{
				scrapdata = new ScrapData();
		//   10   18:new             #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   11   21:dup             
		//   12   22:invokespecial   #36  <Method void RecyclerView$RecycledViewPool$ScrapData()>
		//   13   25:astore_2        
				mScrap.put(i, ((Object) (scrapdata)));
		//   14   26:aload_0         
		//   15   27:getfield        #26  <Field SparseArray mScrap>
		//   16   30:iload_1         
		//   17   31:aload_2         
		//   18   32:invokevirtual   #40  <Method void SparseArray.put(int, Object)>
			}
			return scrapdata;
		//   19   35:aload_2         
		//   20   36:areturn         
		}

		void attach(Adapter adapter)
		{
			mAttachCount = mAttachCount + 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:iadd            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		public void clear()
		{
			for(int i = 0; i < mScrap.size(); i++)
		//*   0    0:iconst_0        
		//*   1    1:istore_1        
		//*   2    2:iload_1         
		//*   3    3:aload_0         
		//*   4    4:getfield        #26  <Field SparseArray mScrap>
		//*   5    7:invokevirtual   #47  <Method int SparseArray.size()>
		//*   6   10:icmpge          37
				((ScrapData)mScrap.valueAt(i)).mScrapHeap.clear();
		//    7   13:aload_0         
		//    8   14:getfield        #26  <Field SparseArray mScrap>
		//    9   17:iload_1         
		//   10   18:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   11   21:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   12   24:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   13   27:invokevirtual   #58  <Method void ArrayList.clear()>

		//   14   30:iload_1         
		//   15   31:iconst_1        
		//   16   32:iadd            
		//   17   33:istore_1        
		//*  18   34:goto            2
		//   19   37:return          
		}

		void detach()
		{
			mAttachCount = mAttachCount - 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:isub            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		void factorInBindTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mBindRunningAverageNs = runningAverage(scrapdata.mBindRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//   11   22:return          
		}

		void factorInCreateTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mCreateRunningAverageNs = runningAverage(scrapdata.mCreateRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//   11   22:return          
		}

		public ViewHolder getRecycledView(int i)
		{
			Object obj = ((Object) ((ScrapData)mScrap.get(i)));
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_2        
			if(obj != null && !((ScrapData) (obj)).mScrapHeap.isEmpty())
		//*   6   12:aload_2         
		//*   7   13:ifnull          45
		//*   8   16:aload_2         
		//*   9   17:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//*  10   20:invokevirtual   #82  <Method boolean ArrayList.isEmpty()>
		//*  11   23:ifne            45
			{
				obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//   12   26:aload_2         
		//   13   27:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   14   30:astore_2        
				return (ViewHolder)((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1);
		//   15   31:aload_2         
		//   16   32:aload_2         
		//   17   33:invokevirtual   #83  <Method int ArrayList.size()>
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:invokevirtual   #86  <Method Object ArrayList.remove(int)>
		//   21   41:checkcast       #88  <Class RecyclerView$ViewHolder>
		//   22   44:areturn         
			} else
			{
				return null;
		//   23   45:aconst_null     
		//   24   46:areturn         
			}
		}

		public int getRecycledViewCount(int i)
		{
			return getScrapDataForType(i).mScrapHeap.size();
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    4    8:invokevirtual   #83  <Method int ArrayList.size()>
		//    5   11:ireturn         
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			if(adapter != null)
		//*   0    0:aload_1         
		//*   1    1:ifnull          8
				detach();
		//    2    4:aload_0         
		//    3    5:invokevirtual   #95  <Method void detach()>
			if(!flag && mAttachCount == 0)
		//*   4    8:iload_3         
		//*   5    9:ifne            23
		//*   6   12:aload_0         
		//*   7   13:getfield        #28  <Field int mAttachCount>
		//*   8   16:ifne            23
				clear();
		//    9   19:aload_0         
		//   10   20:invokevirtual   #96  <Method void clear()>
			if(adapter1 != null)
		//*  11   23:aload_2         
		//*  12   24:ifnull          32
				attach(adapter1);
		//   13   27:aload_0         
		//   14   28:aload_2         
		//   15   29:invokevirtual   #98  <Method void attach(RecyclerView$Adapter)>
		//   16   32:return          
		}

		public void putRecycledView(ViewHolder viewholder)
		{
			int i = viewholder.getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #103 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    2    4:istore_2        
			ArrayList arraylist = getScrapDataForType(i).mScrapHeap;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    6   10:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    7   13:astore_3        
			if(((ScrapData)mScrap.get(i)).mMaxScrap <= arraylist.size())
		//*   8   14:aload_0         
		//*   9   15:getfield        #26  <Field SparseArray mScrap>
		//*  10   18:iload_2         
		//*  11   19:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//*  12   22:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//*  13   25:getfield        #106 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
		//*  14   28:aload_3         
		//*  15   29:invokevirtual   #83  <Method int ArrayList.size()>
		//*  16   32:icmpgt          36
			{
				return;
		//   17   35:return          
			} else
			{
				viewholder.resetInternal();
		//   18   36:aload_1         
		//   19   37:invokevirtual   #109 <Method void RecyclerView$ViewHolder.resetInternal()>
				arraylist.add(((Object) (viewholder)));
		//   20   40:aload_3         
		//   21   41:aload_1         
		//   22   42:invokevirtual   #113 <Method boolean ArrayList.add(Object)>
		//   23   45:pop             
				return;
		//   24   46:return          
			}
		}

		long runningAverage(long l, long l1)
		{
			if(l == 0L)
		//*   0    0:lload_1         
		//*   1    1:lconst_0        
		//*   2    2:lcmp            
		//*   3    3:ifne            8
				return l1;
		//    4    6:lload_3         
		//    5    7:lreturn         
			else
				return (l / 4L) * 3L + l1 / 4L;
		//    6    8:lload_1         
		//    7    9:ldc2w           #114 <Long 4L>
		//    8   12:ldiv            
		//    9   13:ldc2w           #116 <Long 3L>
		//   10   16:lmul            
		//   11   17:lload_3         
		//   12   18:ldc2w           #114 <Long 4L>
		//   13   21:ldiv            
		//   14   22:ladd            
		//   15   23:lreturn         
		}

		public void setMaxRecycledViews(int i, int j)
		{
			Object obj = ((Object) (getScrapDataForType(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore_3        
			obj.mMaxScrap = j;
		//    4    6:aload_3         
		//    5    7:iload_2         
		//    6    8:putfield        #106 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
			for(obj = ((Object) (((ScrapData) (obj)).mScrapHeap)); ((ArrayList) (obj)).size() > j; ((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1));
		//    7   11:aload_3         
		//    8   12:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    9   15:astore_3        
		//   10   16:aload_3         
		//   11   17:invokevirtual   #83  <Method int ArrayList.size()>
		//   12   20:iload_2         
		//   13   21:icmple          38
		//   14   24:aload_3         
		//   15   25:aload_3         
		//   16   26:invokevirtual   #83  <Method int ArrayList.size()>
		//   17   29:iconst_1        
		//   18   30:isub            
		//   19   31:invokevirtual   #86  <Method Object ArrayList.remove(int)>
		//   20   34:pop             
		//*  21   35:goto            16
		//   22   38:return          
		}

		int size()
		{
			int i = 0;
		//    0    0:iconst_0        
		//    1    1:istore_1        
			int j;
			int k;
			for(j = 0; i < mScrap.size(); j = k)
		//*   2    2:iconst_0        
		//*   3    3:istore_2        
		//*   4    4:iload_1         
		//*   5    5:aload_0         
		//*   6    6:getfield        #26  <Field SparseArray mScrap>
		//*   7    9:invokevirtual   #47  <Method int SparseArray.size()>
		//*   8   12:icmpge          55
			{
				ArrayList arraylist = ((ScrapData)mScrap.valueAt(i)).mScrapHeap;
		//    9   15:aload_0         
		//   10   16:getfield        #26  <Field SparseArray mScrap>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   13   23:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   14   26:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   15   29:astore          4
				k = j;
		//   16   31:iload_2         
		//   17   32:istore_3        
				if(arraylist != null)
		//*  18   33:aload           4
		//*  19   35:ifnull          46
					k = j + arraylist.size();
		//   20   38:iload_2         
		//   21   39:aload           4
		//   22   41:invokevirtual   #83  <Method int ArrayList.size()>
		//   23   44:iadd            
		//   24   45:istore_3        
				i++;
		//   25   46:iload_1         
		//   26   47:iconst_1        
		//   27   48:iadd            
		//   28   49:istore_1        
			}

		//   29   50:iload_3         
		//   30   51:istore_2        
		//*  31   52:goto            4
			return j;
		//   32   55:iload_2         
		//   33   56:ireturn         
		}

		boolean willBindInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mBindRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            32
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            30
		//   15   27:goto            32
		//   16   30:iconst_0        
		//   17   31:ireturn         
		//   18   32:iconst_1        
		//   19   33:ireturn         
		}

		boolean willCreateInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mCreateRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            32
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            30
		//   15   27:goto            32
		//   16   30:iconst_0        
		//   17   31:ireturn         
		//   18   32:iconst_1        
		//   19   33:ireturn         
		}

		private static final int DEFAULT_MAX_SCRAP = 5;
		private int mAttachCount;
		SparseArray mScrap;

		public RecycledViewPool()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #21  <Method void Object()>
			mScrap = new SparseArray();
		//    2    4:aload_0         
		//    3    5:new             #23  <Class SparseArray>
		//    4    8:dup             
		//    5    9:invokespecial   #24  <Method void SparseArray()>
		//    6   12:putfield        #26  <Field SparseArray mScrap>
			mAttachCount = 0;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #28  <Field int mAttachCount>
		//   10   20:return          
		}
	}

	static class RecycledViewPool.ScrapData
	{

		long mBindRunningAverageNs;
		long mCreateRunningAverageNs;
		int mMaxScrap;
		final ArrayList mScrapHeap = new ArrayList();

		RecycledViewPool.ScrapData()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #22  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #24  <Class ArrayList>
		//    4    8:dup             
		//    5    9:invokespecial   #25  <Method void ArrayList()>
		//    6   12:putfield        #27  <Field ArrayList mScrapHeap>
			mMaxScrap = 5;
		//    7   15:aload_0         
		//    8   16:iconst_5        
		//    9   17:putfield        #29  <Field int mMaxScrap>
			mCreateRunningAverageNs = 0L;
		//   10   20:aload_0         
		//   11   21:lconst_0        
		//   12   22:putfield        #31  <Field long mCreateRunningAverageNs>
			mBindRunningAverageNs = 0L;
		//   13   25:aload_0         
		//   14   26:lconst_0        
		//   15   27:putfield        #33  <Field long mBindRunningAverageNs>
		//   16   30:return          
		}
	}

	public final class Recycler
	{

		private void attachAccessibilityDelegateOnBind(ViewHolder viewholder)
		{
			if(isAccessibilityEnabled())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:invokevirtual   #61  <Method boolean RecyclerView.isAccessibilityEnabled()>
		//*   3    7:ifeq            55
			{
				View view = viewholder.itemView;
		//    4   10:aload_1         
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:astore_2        
				if(ViewCompat.getImportantForAccessibility(view) == 0)
		//*   7   15:aload_2         
		//*   8   16:invokestatic    #73  <Method int ViewCompat.getImportantForAccessibility(View)>
		//*   9   19:ifne            27
					ViewCompat.setImportantForAccessibility(view, 1);
		//   10   22:aload_2         
		//   11   23:iconst_1        
		//   12   24:invokestatic    #77  <Method void ViewCompat.setImportantForAccessibility(View, int)>
				if(!ViewCompat.hasAccessibilityDelegate(view))
		//*  13   27:aload_2         
		//*  14   28:invokestatic    #81  <Method boolean ViewCompat.hasAccessibilityDelegate(View)>
		//*  15   31:ifne            55
				{
					viewholder.addFlags(16384);
		//   16   34:aload_1         
		//   17   35:sipush          16384
		//   18   38:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					ViewCompat.setAccessibilityDelegate(view, mAccessibilityDelegate.getItemDelegate());
		//   19   41:aload_2         
		//   20   42:aload_0         
		//   21   43:getfield        #30  <Field RecyclerView this$0>
		//   22   46:getfield        #89  <Field RecyclerViewAccessibilityDelegate RecyclerView.mAccessibilityDelegate>
		//   23   49:invokevirtual   #95  <Method android.support.v4.view.AccessibilityDelegateCompat RecyclerViewAccessibilityDelegate.getItemDelegate()>
		//   24   52:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
				}
			}
		//   25   55:return          
		}

		private void invalidateDisplayListInt(ViewHolder viewholder)
		{
			if(viewholder.itemView instanceof ViewGroup)
		//*   0    0:aload_1         
		//*   1    1:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*   2    4:instanceof      #102 <Class ViewGroup>
		//*   3    7:ifeq            22
				invalidateDisplayListInt((ViewGroup)viewholder.itemView, false);
		//    4   10:aload_0         
		//    5   11:aload_1         
		//    6   12:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    7   15:checkcast       #102 <Class ViewGroup>
		//    8   18:iconst_0        
		//    9   19:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
		//   10   22:return          
		}

		private void invalidateDisplayListInt(ViewGroup viewgroup, boolean flag)
		{
			for(int i = viewgroup.getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #109 <Method int ViewGroup.getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_3        
		//*   5    7:iload_3         
		//*   6    8:iflt            43
			{
				View view = viewgroup.getChildAt(i);
		//    7   11:aload_1         
		//    8   12:iload_3         
		//    9   13:invokevirtual   #113 <Method View ViewGroup.getChildAt(int)>
		//   10   16:astore          4
				if(view instanceof ViewGroup)
		//*  11   18:aload           4
		//*  12   20:instanceof      #102 <Class ViewGroup>
		//*  13   23:ifeq            36
					invalidateDisplayListInt((ViewGroup)view, true);
		//   14   26:aload_0         
		//   15   27:aload           4
		//   16   29:checkcast       #102 <Class ViewGroup>
		//   17   32:iconst_1        
		//   18   33:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
			}

		//   19   36:iload_3         
		//   20   37:iconst_1        
		//   21   38:isub            
		//   22   39:istore_3        
		//*  23   40:goto            7
			if(!flag)
		//*  24   43:iload_2         
		//*  25   44:ifne            48
				return;
		//   26   47:return          
			if(viewgroup.getVisibility() == 4)
		//*  27   48:aload_1         
		//*  28   49:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//*  29   52:iconst_4        
		//*  30   53:icmpne          67
			{
				viewgroup.setVisibility(0);
		//   31   56:aload_1         
		//   32   57:iconst_0        
		//   33   58:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(4);
		//   34   61:aload_1         
		//   35   62:iconst_4        
		//   36   63:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   37   66:return          
			} else
			{
				int j = viewgroup.getVisibility();
		//   38   67:aload_1         
		//   39   68:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//   40   71:istore_3        
				viewgroup.setVisibility(4);
		//   41   72:aload_1         
		//   42   73:iconst_4        
		//   43   74:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(j);
		//   44   77:aload_1         
		//   45   78:iload_3         
		//   46   79:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   47   82:return          
			}
		}

		private boolean tryBindViewHolderByDeadline(ViewHolder viewholder, int i, int j, long l)
		{
			viewholder.mOwnerRecyclerView = RecyclerView.this;
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #30  <Field RecyclerView this$0>
		//    3    5:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			int k = viewholder.getItemViewType();
		//    4    8:aload_1         
		//    5    9:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    6   12:istore          6
			long l1 = getNanoTime();
		//    7   14:aload_0         
		//    8   15:getfield        #30  <Field RecyclerView this$0>
		//    9   18:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   10   21:lstore          7
			if(l != 0xffffffffL && !mRecyclerPool.willBindInTime(k, l1, l))
		//*  11   23:lload           4
		//*  12   25:ldc2w           #132 <Long 0xffffffffL>
		//*  13   28:lcmp            
		//*  14   29:ifeq            50
		//*  15   32:aload_0         
		//*  16   33:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  17   36:iload           6
		//*  18   38:lload           7
		//*  19   40:lload           4
		//*  20   42:invokevirtual   #141 <Method boolean RecyclerView$RecycledViewPool.willBindInTime(int, long, long)>
		//*  21   45:ifne            50
				return false;
		//   22   48:iconst_0        
		//   23   49:ireturn         
			mAdapter.bindViewHolder(viewholder, i);
		//   24   50:aload_0         
		//   25   51:getfield        #30  <Field RecyclerView this$0>
		//   26   54:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   27   57:aload_1         
		//   28   58:iload_2         
		//   29   59:invokevirtual   #151 <Method void RecyclerView$Adapter.bindViewHolder(RecyclerView$ViewHolder, int)>
			l = getNanoTime();
		//   30   62:aload_0         
		//   31   63:getfield        #30  <Field RecyclerView this$0>
		//   32   66:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   33   69:lstore          4
			mRecyclerPool.factorInBindTime(viewholder.getItemViewType(), l - l1);
		//   34   71:aload_0         
		//   35   72:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   36   75:aload_1         
		//   37   76:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   38   79:lload           4
		//   39   81:lload           7
		//   40   83:lsub            
		//   41   84:invokevirtual   #155 <Method void RecyclerView$RecycledViewPool.factorInBindTime(int, long)>
			attachAccessibilityDelegateOnBind(viewholder);
		//   42   87:aload_0         
		//   43   88:aload_1         
		//   44   89:invokespecial   #157 <Method void attachAccessibilityDelegateOnBind(RecyclerView$ViewHolder)>
			if(mState.isPreLayout())
		//*  45   92:aload_0         
		//*  46   93:getfield        #30  <Field RecyclerView this$0>
		//*  47   96:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  48   99:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  49  102:ifeq            110
				viewholder.mPreLayoutPosition = j;
		//   50  105:aload_1         
		//   51  106:iload_3         
		//   52  107:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			return true;
		//   53  110:iconst_1        
		//   54  111:ireturn         
		}

		void addViewHolderToRecycledViewPool(ViewHolder viewholder, boolean flag)
		{
			RecyclerView.clearNestedRecyclerViewIfNotNested(viewholder);
		//    0    0:aload_1         
		//    1    1:invokestatic    #174 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
			if(viewholder.hasAnyOfTheFlags(16384))
		//*   2    4:aload_1         
		//*   3    5:sipush          16384
		//*   4    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   5   11:ifeq            30
			{
				viewholder.setFlags(0, 16384);
		//    6   14:aload_1         
		//    7   15:iconst_0        
		//    8   16:sipush          16384
		//    9   19:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				ViewCompat.setAccessibilityDelegate(viewholder.itemView, ((android.support.v4.view.AccessibilityDelegateCompat) (null)));
		//   10   22:aload_1         
		//   11   23:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   12   26:aconst_null     
		//   13   27:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			}
			if(flag)
		//*  14   30:iload_2         
		//*  15   31:ifeq            39
				dispatchViewRecycled(viewholder);
		//   16   34:aload_0         
		//   17   35:aload_1         
		//   18   36:invokevirtual   #185 <Method void dispatchViewRecycled(RecyclerView$ViewHolder)>
			viewholder.mOwnerRecyclerView = null;
		//   19   39:aload_1         
		//   20   40:aconst_null     
		//   21   41:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			getRecycledViewPool().putRecycledView(viewholder);
		//   22   44:aload_0         
		//   23   45:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//   24   48:aload_1         
		//   25   49:invokevirtual   #192 <Method void RecyclerView$RecycledViewPool.putRecycledView(RecyclerView$ViewHolder)>
		//   26   52:return          
		}

		public void bindViewToPosition(View view, int i)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          5
			if(viewholder == null)
		//*   3    6:aload           5
		//*   4    8:ifnonnull       50
			{
				view = ((View) (new StringBuilder()));
		//    5   11:new             #199 <Class StringBuilder>
		//    6   14:dup             
		//    7   15:invokespecial   #200 <Method void StringBuilder()>
		//    8   18:astore_1        
				((StringBuilder) (view)).append("The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter");
		//    9   19:aload_1         
		//   10   20:ldc1            #202 <String "The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter">
		//   11   22:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   12   25:pop             
				((StringBuilder) (view)).append(exceptionLabel());
		//   13   26:aload_1         
		//   14   27:aload_0         
		//   15   28:getfield        #30  <Field RecyclerView this$0>
		//   16   31:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   17   34:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   18   37:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
		//   19   38:new             #212 <Class IllegalArgumentException>
		//   20   41:dup             
		//   21   42:aload_1         
		//   22   43:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   23   46:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   24   49:athrow          
			}
			int j = mAdapterHelper.findPositionOffset(i);
		//   25   50:aload_0         
		//   26   51:getfield        #30  <Field RecyclerView this$0>
		//   27   54:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   28   57:iload_2         
		//   29   58:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   30   61:istore_3        
			if(j >= 0 && j < mAdapter.getItemCount())
		//*  31   62:iload_3         
		//*  32   63:iflt            209
		//*  33   66:iload_3         
		//*  34   67:aload_0         
		//*  35   68:getfield        #30  <Field RecyclerView this$0>
		//*  36   71:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  37   74:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  38   77:icmplt          83
		//*  39   80:goto            209
			{
				tryBindViewHolderByDeadline(viewholder, j, i, 0xffffffffL);
		//   40   83:aload_0         
		//   41   84:aload           5
		//   42   86:iload_3         
		//   43   87:iload_2         
		//   44   88:ldc2w           #132 <Long 0xffffffffL>
		//   45   91:invokespecial   #233 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//   46   94:pop             
				view = ((View) (viewholder.itemView.getLayoutParams()));
		//   47   95:aload           5
		//   48   97:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   49  100:invokevirtual   #239 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   50  103:astore_1        
				if(view == null)
		//*  51  104:aload_1         
		//*  52  105:ifnonnull       131
				{
					view = ((View) ((LayoutParams)generateDefaultLayoutParams()));
		//   53  108:aload_0         
		//   54  109:getfield        #30  <Field RecyclerView this$0>
		//   55  112:invokevirtual   #242 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//   56  115:checkcast       #244 <Class RecyclerView$LayoutParams>
		//   57  118:astore_1        
					viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   58  119:aload           5
		//   59  121:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   60  124:aload_1         
		//   61  125:invokevirtual   #248 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//*  62  128:goto            171
				if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (view))))
		//*  63  131:aload_0         
		//*  64  132:getfield        #30  <Field RecyclerView this$0>
		//*  65  135:aload_1         
		//*  66  136:invokevirtual   #252 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//*  67  139:ifne            166
				{
					view = ((View) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (view)))));
		//   68  142:aload_0         
		//   69  143:getfield        #30  <Field RecyclerView this$0>
		//   70  146:aload_1         
		//   71  147:invokevirtual   #256 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//   72  150:checkcast       #244 <Class RecyclerView$LayoutParams>
		//   73  153:astore_1        
					viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   74  154:aload           5
		//   75  156:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   76  159:aload_1         
		//   77  160:invokevirtual   #248 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//*  78  163:goto            171
				{
					view = ((View) ((LayoutParams)view));
		//   79  166:aload_1         
		//   80  167:checkcast       #244 <Class RecyclerView$LayoutParams>
		//   81  170:astore_1        
				}
				boolean flag = true;
		//   82  171:iconst_1        
		//   83  172:istore          4
				view.mInsetsDirty = true;
		//   84  174:aload_1         
		//   85  175:iconst_1        
		//   86  176:putfield        #260 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
				view.mViewHolder = viewholder;
		//   87  179:aload_1         
		//   88  180:aload           5
		//   89  182:putfield        #264 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
				if(viewholder.itemView.getParent() != null)
		//*  90  185:aload           5
		//*  91  187:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  92  190:invokevirtual   #268 <Method ViewParent View.getParent()>
		//*  93  193:ifnonnull       199
		//*  94  196:goto            202
					flag = false;
		//   95  199:iconst_0        
		//   96  200:istore          4
				view.mPendingInvalidate = flag;
		//   97  202:aload_1         
		//   98  203:iload           4
		//   99  205:putfield        #271 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
				return;
		//  100  208:return          
			} else
			{
				view = ((View) (new StringBuilder()));
		//  101  209:new             #199 <Class StringBuilder>
		//  102  212:dup             
		//  103  213:invokespecial   #200 <Method void StringBuilder()>
		//  104  216:astore_1        
				((StringBuilder) (view)).append("Inconsistency detected. Invalid item position ");
		//  105  217:aload_1         
		//  106  218:ldc2            #273 <String "Inconsistency detected. Invalid item position ">
		//  107  221:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  108  224:pop             
				((StringBuilder) (view)).append(i);
		//  109  225:aload_1         
		//  110  226:iload_2         
		//  111  227:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  112  230:pop             
				((StringBuilder) (view)).append("(offset:");
		//  113  231:aload_1         
		//  114  232:ldc2            #278 <String "(offset:">
		//  115  235:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  116  238:pop             
				((StringBuilder) (view)).append(j);
		//  117  239:aload_1         
		//  118  240:iload_3         
		//  119  241:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  120  244:pop             
				((StringBuilder) (view)).append(").");
		//  121  245:aload_1         
		//  122  246:ldc2            #280 <String ").">
		//  123  249:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  124  252:pop             
				((StringBuilder) (view)).append("state:");
		//  125  253:aload_1         
		//  126  254:ldc2            #282 <String "state:">
		//  127  257:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  128  260:pop             
				((StringBuilder) (view)).append(mState.getItemCount());
		//  129  261:aload_1         
		//  130  262:aload_0         
		//  131  263:getfield        #30  <Field RecyclerView this$0>
		//  132  266:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//  133  269:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//  134  272:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  135  275:pop             
				((StringBuilder) (view)).append(exceptionLabel());
		//  136  276:aload_1         
		//  137  277:aload_0         
		//  138  278:getfield        #30  <Field RecyclerView this$0>
		//  139  281:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  140  284:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  141  287:pop             
				throw new IndexOutOfBoundsException(((StringBuilder) (view)).toString());
		//  142  288:new             #285 <Class IndexOutOfBoundsException>
		//  143  291:dup             
		//  144  292:aload_1         
		//  145  293:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  146  296:invokespecial   #286 <Method void IndexOutOfBoundsException(String)>
		//  147  299:athrow          
			}
		}

		public void clear()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			recycleAndClearCachedViews();
		//    3    7:aload_0         
		//    4    8:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
		//    5   11:return          
		}

		void clearOldPositions()
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_3        
			boolean flag = false;
		//    4    8:iconst_0        
		//    5    9:istore_2        
			for(int i = 0; i < l; i++)
		//*   6   10:iconst_0        
		//*   7   11:istore_1        
		//*   8   12:iload_1         
		//*   9   13:iload_3         
		//*  10   14:icmpge          38
				((ViewHolder)mCachedViews.get(i)).clearOldPosition();
		//   11   17:aload_0         
		//   12   18:getfield        #42  <Field ArrayList mCachedViews>
		//   13   21:iload_1         
		//   14   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   15   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   16   28:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   17   31:iload_1         
		//   18   32:iconst_1        
		//   19   33:iadd            
		//   20   34:istore_1        
		//*  21   35:goto            12
			l = mAttachedScrap.size();
		//   22   38:aload_0         
		//   23   39:getfield        #38  <Field ArrayList mAttachedScrap>
		//   24   42:invokevirtual   #296 <Method int ArrayList.size()>
		//   25   45:istore_3        
			for(int j = 0; j < l; j++)
		//*  26   46:iconst_0        
		//*  27   47:istore_1        
		//*  28   48:iload_1         
		//*  29   49:iload_3         
		//*  30   50:icmpge          74
				((ViewHolder)mAttachedScrap.get(j)).clearOldPosition();
		//   31   53:aload_0         
		//   32   54:getfield        #38  <Field ArrayList mAttachedScrap>
		//   33   57:iload_1         
		//   34   58:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   35   61:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   36   64:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   37   67:iload_1         
		//   38   68:iconst_1        
		//   39   69:iadd            
		//   40   70:istore_1        
		//*  41   71:goto            48
			if(mChangedScrap != null)
		//*  42   74:aload_0         
		//*  43   75:getfield        #40  <Field ArrayList mChangedScrap>
		//*  44   78:ifnull          117
			{
				int i1 = mChangedScrap.size();
		//   45   81:aload_0         
		//   46   82:getfield        #40  <Field ArrayList mChangedScrap>
		//   47   85:invokevirtual   #296 <Method int ArrayList.size()>
		//   48   88:istore_3        
				for(int k = ((int) (flag)); k < i1; k++)
		//*  49   89:iload_2         
		//*  50   90:istore_1        
		//*  51   91:iload_1         
		//*  52   92:iload_3         
		//*  53   93:icmpge          117
					((ViewHolder)mChangedScrap.get(k)).clearOldPosition();
		//   54   96:aload_0         
		//   55   97:getfield        #40  <Field ArrayList mChangedScrap>
		//   56  100:iload_1         
		//   57  101:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   58  104:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   59  107:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   60  110:iload_1         
		//   61  111:iconst_1        
		//   62  112:iadd            
		//   63  113:istore_1        
			}
		//*  64  114:goto            91
		//   65  117:return          
		}

		void clearScrap()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			if(mChangedScrap != null)
		//*   3    7:aload_0         
		//*   4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//*   5   11:ifnull          21
				mChangedScrap.clear();
		//    6   14:aload_0         
		//    7   15:getfield        #40  <Field ArrayList mChangedScrap>
		//    8   18:invokevirtual   #289 <Method void ArrayList.clear()>
		//    9   21:return          
		}

		public int convertPreLayoutPositionToPostLayout(int i)
		{
			if(i >= 0 && i < mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            48
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          21
		//*   8   18:goto            48
			{
				if(!mState.isPreLayout())
		//*   9   21:aload_0         
		//*  10   22:getfield        #30  <Field RecyclerView this$0>
		//*  11   25:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  12   28:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  13   31:ifne            36
					return i;
		//   14   34:iload_1         
		//   15   35:ireturn         
				else
					return mAdapterHelper.findPositionOffset(i);
		//   16   36:aload_0         
		//   17   37:getfield        #30  <Field RecyclerView this$0>
		//   18   40:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   19   43:iload_1         
		//   20   44:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   21   47:ireturn         
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   22   48:new             #199 <Class StringBuilder>
		//   23   51:dup             
		//   24   52:invokespecial   #200 <Method void StringBuilder()>
		//   25   55:astore_2        
				stringbuilder.append("invalid position ");
		//   26   56:aload_2         
		//   27   57:ldc2            #307 <String "invalid position ">
		//   28   60:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   29   63:pop             
				stringbuilder.append(i);
		//   30   64:aload_2         
		//   31   65:iload_1         
		//   32   66:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//   33   69:pop             
				stringbuilder.append(". State ");
		//   34   70:aload_2         
		//   35   71:ldc2            #309 <String ". State ">
		//   36   74:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   37   77:pop             
				stringbuilder.append("item count is ");
		//   38   78:aload_2         
		//   39   79:ldc2            #311 <String "item count is ">
		//   40   82:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   41   85:pop             
				stringbuilder.append(mState.getItemCount());
		//   42   86:aload_2         
		//   43   87:aload_0         
		//   44   88:getfield        #30  <Field RecyclerView this$0>
		//   45   91:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   46   94:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//   47   97:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//   48  100:pop             
				stringbuilder.append(exceptionLabel());
		//   49  101:aload_2         
		//   50  102:aload_0         
		//   51  103:getfield        #30  <Field RecyclerView this$0>
		//   52  106:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   53  109:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   54  112:pop             
				throw new IndexOutOfBoundsException(stringbuilder.toString());
		//   55  113:new             #285 <Class IndexOutOfBoundsException>
		//   56  116:dup             
		//   57  117:aload_2         
		//   58  118:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   59  121:invokespecial   #286 <Method void IndexOutOfBoundsException(String)>
		//   60  124:athrow          
			}
		}

		void dispatchViewRecycled(ViewHolder viewholder)
		{
			if(mRecyclerListener != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//*   3    7:ifnull          23
				mRecyclerListener.onViewRecycled(viewholder);
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//    7   17:aload_1         
		//    8   18:invokeinterface #320 <Method void RecyclerView$RecyclerListener.onViewRecycled(RecyclerView$ViewHolder)>
			if(mAdapter != null)
		//*   9   23:aload_0         
		//*  10   24:getfield        #30  <Field RecyclerView this$0>
		//*  11   27:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  12   30:ifnull          44
				mAdapter.onViewRecycled(viewholder);
		//   13   33:aload_0         
		//   14   34:getfield        #30  <Field RecyclerView this$0>
		//   15   37:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   16   40:aload_1         
		//   17   41:invokevirtual   #321 <Method void RecyclerView$Adapter.onViewRecycled(RecyclerView$ViewHolder)>
			if(mState != null)
		//*  18   44:aload_0         
		//*  19   45:getfield        #30  <Field RecyclerView this$0>
		//*  20   48:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  21   51:ifnull          65
				mViewInfoStore.removeViewHolder(viewholder);
		//   22   54:aload_0         
		//   23   55:getfield        #30  <Field RecyclerView this$0>
		//   24   58:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   61:aload_1         
		//   26   62:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//   27   65:return          
		}

		ViewHolder getChangedScrapViewForPosition(int i)
		{
			if(mChangedScrap != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mChangedScrap>
		//*   2    4:ifnull          195
			{
				int k = mChangedScrap.size();
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:invokevirtual   #296 <Method int ArrayList.size()>
		//    6   14:istore          4
				if(k == 0)
		//*   7   16:iload           4
		//*   8   18:ifne            23
					return null;
		//    9   21:aconst_null     
		//   10   22:areturn         
				boolean flag = false;
		//   11   23:iconst_0        
		//   12   24:istore_3        
				for(int j = 0; j < k; j++)
		//*  13   25:iconst_0        
		//*  14   26:istore_2        
		//*  15   27:iload_2         
		//*  16   28:iload           4
		//*  17   30:icmpge          80
				{
					ViewHolder viewholder = (ViewHolder)mChangedScrap.get(j);
		//   18   33:aload_0         
		//   19   34:getfield        #40  <Field ArrayList mChangedScrap>
		//   20   37:iload_2         
		//   21   38:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   22   41:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   23   44:astore          7
					if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i)
		//*  24   46:aload           7
		//*  25   48:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  26   51:ifne            73
		//*  27   54:aload           7
		//*  28   56:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  29   59:iload_1         
		//*  30   60:icmpne          73
					{
						viewholder.addFlags(32);
		//   31   63:aload           7
		//   32   65:bipush          32
		//   33   67:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder;
		//   34   70:aload           7
		//   35   72:areturn         
					}
				}

		//   36   73:iload_2         
		//   37   74:iconst_1        
		//   38   75:iadd            
		//   39   76:istore_2        
		//*  40   77:goto            27
				if(mAdapter.hasStableIds())
		//*  41   80:aload_0         
		//*  42   81:getfield        #30  <Field RecyclerView this$0>
		//*  43   84:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  44   87:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  45   90:ifeq            193
				{
					i = mAdapterHelper.findPositionOffset(i);
		//   46   93:aload_0         
		//   47   94:getfield        #30  <Field RecyclerView this$0>
		//   48   97:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   49  100:iload_1         
		//   50  101:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   51  104:istore_1        
					if(i > 0 && i < mAdapter.getItemCount())
		//*  52  105:iload_1         
		//*  53  106:ifle            193
		//*  54  109:iload_1         
		//*  55  110:aload_0         
		//*  56  111:getfield        #30  <Field RecyclerView this$0>
		//*  57  114:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  58  117:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  59  120:icmpge          193
					{
						long l = mAdapter.getItemId(i);
		//   60  123:aload_0         
		//   61  124:getfield        #30  <Field RecyclerView this$0>
		//   62  127:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   63  130:iload_1         
		//   64  131:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//   65  134:lstore          5
						for(i = ((int) (flag)); i < k; i++)
		//*  66  136:iload_3         
		//*  67  137:istore_1        
		//*  68  138:iload_1         
		//*  69  139:iload           4
		//*  70  141:icmpge          193
						{
							ViewHolder viewholder1 = (ViewHolder)mChangedScrap.get(i);
		//   71  144:aload_0         
		//   72  145:getfield        #40  <Field ArrayList mChangedScrap>
		//   73  148:iload_1         
		//   74  149:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   75  152:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   76  155:astore          7
							if(!viewholder1.wasReturnedFromScrap() && viewholder1.getItemId() == l)
		//*  77  157:aload           7
		//*  78  159:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  79  162:ifne            186
		//*  80  165:aload           7
		//*  81  167:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  82  170:lload           5
		//*  83  172:lcmp            
		//*  84  173:ifne            186
							{
								viewholder1.addFlags(32);
		//   85  176:aload           7
		//   86  178:bipush          32
		//   87  180:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
								return viewholder1;
		//   88  183:aload           7
		//   89  185:areturn         
							}
						}

		//   90  186:iload_1         
		//   91  187:iconst_1        
		//   92  188:iadd            
		//   93  189:istore_1        
					}
				}
		//*  94  190:goto            138
				return null;
		//   95  193:aconst_null     
		//   96  194:areturn         
			} else
			{
				return null;
		//   97  195:aconst_null     
		//   98  196:areturn         
			}
		}

		RecycledViewPool getRecycledViewPool()
		{
			if(mRecyclerPool == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnonnull       18
				mRecyclerPool = new RecycledViewPool();
		//    3    7:aload_0         
		//    4    8:new             #137 <Class RecyclerView$RecycledViewPool>
		//    5   11:dup             
		//    6   12:invokespecial   #348 <Method void RecyclerView$RecycledViewPool()>
		//    7   15:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			return mRecyclerPool;
		//    8   18:aload_0         
		//    9   19:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   10   22:areturn         
		}

		int getScrapCount()
		{
			return mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:ireturn         
		}

		public List getScrapList()
		{
			return mUnmodifiableAttachedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #50  <Field List mUnmodifiableAttachedScrap>
		//    2    4:areturn         
		}

		ViewHolder getScrapOrCachedViewForId(long l, int i, boolean flag)
		{
			for(int j = mAttachedScrap.size() - 1; j >= 0; j--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          5
		//*   6   11:iload           5
		//*   7   13:iflt            142
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//    8   16:aload_0         
		//    9   17:getfield        #38  <Field ArrayList mAttachedScrap>
		//   10   20:iload           5
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          6
				if(viewholder.getItemId() != l || viewholder.wasReturnedFromScrap())
					continue;
		//   14   30:aload           6
		//   15   32:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   16   35:lload_1         
		//   17   36:lcmp            
		//   18   37:ifne            133
		//   19   40:aload           6
		//   20   42:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   21   45:ifne            133
				if(i == viewholder.getItemViewType())
		//*  22   48:iload_3         
		//*  23   49:aload           6
		//*  24   51:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  25   54:icmpne          96
				{
					viewholder.addFlags(32);
		//   26   57:aload           6
		//   27   59:bipush          32
		//   28   61:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					if(viewholder.isRemoved() && !mState.isPreLayout())
		//*  29   64:aload           6
		//*  30   66:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  31   69:ifeq            93
		//*  32   72:aload_0         
		//*  33   73:getfield        #30  <Field RecyclerView this$0>
		//*  34   76:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  35   79:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  36   82:ifne            93
						viewholder.setFlags(2, 14);
		//   37   85:aload           6
		//   38   87:iconst_2        
		//   39   88:bipush          14
		//   40   90:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
					return viewholder;
		//   41   93:aload           6
		//   42   95:areturn         
				}
				if(!flag)
		//*  43   96:iload           4
		//*  44   98:ifne            133
				{
					mAttachedScrap.remove(j);
		//   45  101:aload_0         
		//   46  102:getfield        #38  <Field ArrayList mAttachedScrap>
		//   47  105:iload           5
		//   48  107:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   49  110:pop             
					removeDetachedView(viewholder.itemView, false);
		//   50  111:aload_0         
		//   51  112:getfield        #30  <Field RecyclerView this$0>
		//   52  115:aload           6
		//   53  117:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   54  120:iconst_0        
		//   55  121:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
					quickRecycleScrapView(viewholder.itemView);
		//   56  124:aload_0         
		//   57  125:aload           6
		//   58  127:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   59  130:invokevirtual   #369 <Method void quickRecycleScrapView(View)>
				}
			}

		//   60  133:iload           5
		//   61  135:iconst_1        
		//   62  136:isub            
		//   63  137:istore          5
		//*  64  139:goto            11
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*  65  142:aload_0         
		//*  66  143:getfield        #42  <Field ArrayList mCachedViews>
		//*  67  146:invokevirtual   #296 <Method int ArrayList.size()>
		//*  68  149:iconst_1        
		//*  69  150:isub            
		//*  70  151:istore          5
		//*  71  153:iload           5
		//*  72  155:iflt            231
			{
				ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//   73  158:aload_0         
		//   74  159:getfield        #42  <Field ArrayList mCachedViews>
		//   75  162:iload           5
		//   76  164:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   77  167:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   78  170:astore          6
				if(viewholder1.getItemId() != l)
					continue;
		//   79  172:aload           6
		//   80  174:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   81  177:lload_1         
		//   82  178:lcmp            
		//   83  179:ifne            222
				if(i == viewholder1.getItemViewType())
		//*  84  182:iload_3         
		//*  85  183:aload           6
		//*  86  185:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  87  188:icmpne          209
				{
					if(!flag)
		//*  88  191:iload           4
		//*  89  193:ifne            206
						mCachedViews.remove(k);
		//   90  196:aload_0         
		//   91  197:getfield        #42  <Field ArrayList mCachedViews>
		//   92  200:iload           5
		//   93  202:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   94  205:pop             
					return viewholder1;
		//   95  206:aload           6
		//   96  208:areturn         
				}
				if(!flag)
		//*  97  209:iload           4
		//*  98  211:ifne            222
				{
					recycleCachedViewAt(k);
		//   99  214:aload_0         
		//  100  215:iload           5
		//  101  217:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
					return null;
		//  102  220:aconst_null     
		//  103  221:areturn         
				}
			}

		//  104  222:iload           5
		//  105  224:iconst_1        
		//  106  225:isub            
		//  107  226:istore          5
		//* 108  228:goto            153
			return null;
		//  109  231:aconst_null     
		//  110  232:areturn         
		}

		ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int i, boolean flag)
		{
			int l = mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore          5
			boolean flag1 = false;
		//    4    9:iconst_0        
		//    5   10:istore          4
			for(int j = 0; j < l; j++)
		//*   6   12:iconst_0        
		//*   7   13:istore_3        
		//*   8   14:iload_3         
		//*   9   15:iload           5
		//*  10   17:icmpge          96
			{
				ViewHolder viewholder = (ViewHolder)mAttachedScrap.get(j);
		//   11   20:aload_0         
		//   12   21:getfield        #38  <Field ArrayList mAttachedScrap>
		//   13   24:iload_3         
		//   14   25:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   15   28:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   16   31:astore          6
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i && !viewholder.isInvalid() && (mState.mInPreLayout || !viewholder.isRemoved()))
		//*  17   33:aload           6
		//*  18   35:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   38:ifne            89
		//*  20   41:aload           6
		//*  21   43:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  22   46:iload_1         
		//*  23   47:icmpne          89
		//*  24   50:aload           6
		//*  25   52:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  26   55:ifne            89
		//*  27   58:aload_0         
		//*  28   59:getfield        #30  <Field RecyclerView this$0>
		//*  29   62:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  30   65:getfield        #380 <Field boolean RecyclerView$State.mInPreLayout>
		//*  31   68:ifne            79
		//*  32   71:aload           6
		//*  33   73:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  34   76:ifne            89
				{
					viewholder.addFlags(32);
		//   35   79:aload           6
		//   36   81:bipush          32
		//   37   83:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   38   86:aload           6
		//   39   88:areturn         
				}
			}

		//   40   89:iload_3         
		//   41   90:iconst_1        
		//   42   91:iadd            
		//   43   92:istore_3        
		//*  44   93:goto            14
			if(!flag)
		//*  45   96:iload_2         
		//*  46   97:ifne            235
			{
				Object obj = ((Object) (mChildHelper.findHiddenNonRemovedView(i)));
		//   47  100:aload_0         
		//   48  101:getfield        #30  <Field RecyclerView this$0>
		//   49  104:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   50  107:iload_1         
		//   51  108:invokevirtual   #389 <Method View ChildHelper.findHiddenNonRemovedView(int)>
		//   52  111:astore          7
				if(obj != null)
		//*  53  113:aload           7
		//*  54  115:ifnull          235
				{
					ViewHolder viewholder1 = RecyclerView.getChildViewHolderInt(((View) (obj)));
		//   55  118:aload           7
		//   56  120:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   57  123:astore          6
					mChildHelper.unhide(((View) (obj)));
		//   58  125:aload_0         
		//   59  126:getfield        #30  <Field RecyclerView this$0>
		//   60  129:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   61  132:aload           7
		//   62  134:invokevirtual   #392 <Method void ChildHelper.unhide(View)>
					i = mChildHelper.indexOfChild(((View) (obj)));
		//   63  137:aload_0         
		//   64  138:getfield        #30  <Field RecyclerView this$0>
		//   65  141:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   66  144:aload           7
		//   67  146:invokevirtual   #395 <Method int ChildHelper.indexOfChild(View)>
		//   68  149:istore_1        
					if(i == -1)
		//*  69  150:iload_1         
		//*  70  151:iconst_m1       
		//*  71  152:icmpne          207
					{
						obj = ((Object) (new StringBuilder()));
		//   72  155:new             #199 <Class StringBuilder>
		//   73  158:dup             
		//   74  159:invokespecial   #200 <Method void StringBuilder()>
		//   75  162:astore          7
						((StringBuilder) (obj)).append("layout index should not be -1 after unhiding a view:");
		//   76  164:aload           7
		//   77  166:ldc2            #397 <String "layout index should not be -1 after unhiding a view:">
		//   78  169:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   79  172:pop             
						((StringBuilder) (obj)).append(((Object) (viewholder1)));
		//   80  173:aload           7
		//   81  175:aload           6
		//   82  177:invokevirtual   #400 <Method StringBuilder StringBuilder.append(Object)>
		//   83  180:pop             
						((StringBuilder) (obj)).append(exceptionLabel());
		//   84  181:aload           7
		//   85  183:aload_0         
		//   86  184:getfield        #30  <Field RecyclerView this$0>
		//   87  187:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   88  190:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   89  193:pop             
						throw new IllegalStateException(((StringBuilder) (obj)).toString());
		//   90  194:new             #402 <Class IllegalStateException>
		//   91  197:dup             
		//   92  198:aload           7
		//   93  200:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   94  203:invokespecial   #403 <Method void IllegalStateException(String)>
		//   95  206:athrow          
					} else
					{
						mChildHelper.detachViewFromParent(i);
		//   96  207:aload_0         
		//   97  208:getfield        #30  <Field RecyclerView this$0>
		//   98  211:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   99  214:iload_1         
		//  100  215:invokevirtual   #406 <Method void ChildHelper.detachViewFromParent(int)>
						scrapView(((View) (obj)));
		//  101  218:aload_0         
		//  102  219:aload           7
		//  103  221:invokevirtual   #409 <Method void scrapView(View)>
						viewholder1.addFlags(8224);
		//  104  224:aload           6
		//  105  226:sipush          8224
		//  106  229:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder1;
		//  107  232:aload           6
		//  108  234:areturn         
					}
				}
			}
			l = mCachedViews.size();
		//  109  235:aload_0         
		//  110  236:getfield        #42  <Field ArrayList mCachedViews>
		//  111  239:invokevirtual   #296 <Method int ArrayList.size()>
		//  112  242:istore          5
			for(int k = ((int) (flag1)); k < l; k++)
		//* 113  244:iload           4
		//* 114  246:istore_3        
		//* 115  247:iload_3         
		//* 116  248:iload           5
		//* 117  250:icmpge          306
			{
				ViewHolder viewholder2 = (ViewHolder)mCachedViews.get(k);
		//  118  253:aload_0         
		//  119  254:getfield        #42  <Field ArrayList mCachedViews>
		//  120  257:iload_3         
		//  121  258:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//  122  261:checkcast       #63  <Class RecyclerView$ViewHolder>
		//  123  264:astore          6
				if(!viewholder2.isInvalid() && viewholder2.getLayoutPosition() == i)
		//* 124  266:aload           6
		//* 125  268:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 126  271:ifne            299
		//* 127  274:aload           6
		//* 128  276:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//* 129  279:iload_1         
		//* 130  280:icmpne          299
				{
					if(!flag)
		//* 131  283:iload_2         
		//* 132  284:ifne            296
						mCachedViews.remove(k);
		//  133  287:aload_0         
		//  134  288:getfield        #42  <Field ArrayList mCachedViews>
		//  135  291:iload_3         
		//  136  292:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//  137  295:pop             
					return viewholder2;
		//  138  296:aload           6
		//  139  298:areturn         
				}
			}

		//  140  299:iload_3         
		//  141  300:iconst_1        
		//  142  301:iadd            
		//  143  302:istore_3        
		//* 144  303:goto            247
			return null;
		//  145  306:aconst_null     
		//  146  307:areturn         
		}

		View getScrapViewAt(int i)
		{
			return ((ViewHolder)mAttachedScrap.get(i)).itemView;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    4    8:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:areturn         
		}

		public View getViewForPosition(int i)
		{
			return getViewForPosition(i, false);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #414 <Method View getViewForPosition(int, boolean)>
		//    4    6:areturn         
		}

		View getViewForPosition(int i, boolean flag)
		{
			return tryGetViewHolderForPositionByDeadline(i, flag, 0xffffffffL).itemView;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc2w           #132 <Long 0xffffffffL>
		//    4    6:invokevirtual   #418 <Method RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int, boolean, long)>
		//    5    9:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   12:areturn         
		}

		void markItemDecorInsetsDirty()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          52
			{
				LayoutParams layoutparams = (LayoutParams)((ViewHolder)mCachedViews.get(i)).itemView.getLayoutParams();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   26:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   15   29:invokevirtual   #239 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   32:checkcast       #244 <Class RecyclerView$LayoutParams>
		//   17   35:astore_3        
				if(layoutparams != null)
		//*  18   36:aload_3         
		//*  19   37:ifnull          45
					layoutparams.mInsetsDirty = true;
		//   20   40:aload_3         
		//   21   41:iconst_1        
		//   22   42:putfield        #260 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}

		//   23   45:iload_1         
		//   24   46:iconst_1        
		//   25   47:iadd            
		//   26   48:istore_1        
		//*  27   49:goto            10
		//   28   52:return          
		}

		void markKnownViewsInvalid()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          49
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   26:astore_3        
				if(viewholder != null)
		//*  15   27:aload_3         
		//*  16   28:ifnull          42
				{
					viewholder.addFlags(6);
		//   17   31:aload_3         
		//   18   32:bipush          6
		//   19   34:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					viewholder.addChangePayload(((Object) (null)));
		//   20   37:aload_3         
		//   21   38:aconst_null     
		//   22   39:invokevirtual   #424 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				}
			}

		//   23   42:iload_1         
		//   24   43:iconst_1        
		//   25   44:iadd            
		//   26   45:istore_1        
		//*  27   46:goto            10
			if(mAdapter == null || !mAdapter.hasStableIds())
		//*  28   49:aload_0         
		//*  29   50:getfield        #30  <Field RecyclerView this$0>
		//*  30   53:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  31   56:ifnull          72
		//*  32   59:aload_0         
		//*  33   60:getfield        #30  <Field RecyclerView this$0>
		//*  34   63:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  35   66:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  36   69:ifne            76
				recycleAndClearCachedViews();
		//   37   72:aload_0         
		//   38   73:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
		//   39   76:return          
		}

		void offsetPositionRecordsForInsert(int i, int j)
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int k = 0; k < l; k++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          58
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    9   17:aload_0         
		//   10   18:getfield        #42  <Field ArrayList mCachedViews>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(viewholder != null && viewholder.mPosition >= i)
		//*  15   30:aload           5
		//*  16   32:ifnull          51
		//*  17   35:aload           5
		//*  18   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  19   40:iload_1         
		//*  20   41:icmplt          51
					viewholder.offsetPosition(j, true);
		//   21   44:aload           5
		//   22   46:iload_2         
		//   23   47:iconst_1        
		//   24   48:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   25   51:iload_3         
		//   26   52:iconst_1        
		//   27   53:iadd            
		//   28   54:istore_3        
		//*  29   55:goto            11
		//   30   58:return          
		}

		void offsetPositionRecordsForMove(int i, int j)
		{
			int k;
			int l;
			byte byte0;
			if(i < j)
		//*   0    0:iload_1         
		//*   1    1:iload_2         
		//*   2    2:icmpge          16
			{
				l = j;
		//    3    5:iload_2         
		//    4    6:istore          4
				byte0 = -1;
		//    5    8:iconst_m1       
		//    6    9:istore          5
				k = i;
		//    7   11:iload_1         
		//    8   12:istore_3        
			} else
		//*   9   13:goto            24
			{
				l = i;
		//   10   16:iload_1         
		//   11   17:istore          4
				byte0 = 1;
		//   12   19:iconst_1        
		//   13   20:istore          5
				k = j;
		//   14   22:iload_2         
		//   15   23:istore_3        
			}
			int j1 = mCachedViews.size();
		//   16   24:aload_0         
		//   17   25:getfield        #42  <Field ArrayList mCachedViews>
		//   18   28:invokevirtual   #296 <Method int ArrayList.size()>
		//   19   31:istore          7
			for(int i1 = 0; i1 < j1; i1++)
		//*  20   33:iconst_0        
		//*  21   34:istore          6
		//*  22   36:iload           6
		//*  23   38:iload           7
		//*  24   40:icmpge          122
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i1);
		//   25   43:aload_0         
		//   26   44:getfield        #42  <Field ArrayList mCachedViews>
		//   27   47:iload           6
		//   28   49:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   29   52:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   30   55:astore          8
				if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
		//*  31   57:aload           8
		//*  32   59:ifnull          113
		//*  33   62:aload           8
		//*  34   64:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  35   67:iload_3         
		//*  36   68:icmplt          113
		//*  37   71:aload           8
		//*  38   73:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  39   76:iload           4
		//*  40   78:icmple          84
					continue;
		//   41   81:goto            113
				if(viewholder.mPosition == i)
		//*  42   84:aload           8
		//*  43   86:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  44   89:iload_1         
		//*  45   90:icmpne          105
					viewholder.offsetPosition(j - i, false);
		//   46   93:aload           8
		//   47   95:iload_2         
		//   48   96:iload_1         
		//   49   97:isub            
		//   50   98:iconst_0        
		//   51   99:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				else
		//*  52  102:goto            113
					viewholder.offsetPosition(((int) (byte0)), false);
		//   53  105:aload           8
		//   54  107:iload           5
		//   55  109:iconst_0        
		//   56  110:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   57  113:iload           6
		//   58  115:iconst_1        
		//   59  116:iadd            
		//   60  117:istore          6
		//*  61  119:goto            36
		//   62  122:return          
		}

		void offsetPositionRecordsForRemove(int i, int j, boolean flag)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            88
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload           4
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          5
				if(viewholder == null)
					continue;
		//   14   30:aload           5
		//   15   32:ifnull          79
				if(viewholder.mPosition >= i + j)
		//*  16   35:aload           5
		//*  17   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  18   40:iload_1         
		//*  19   41:iload_2         
		//*  20   42:iadd            
		//*  21   43:icmplt          57
				{
					viewholder.offsetPosition(-j, flag);
		//   22   46:aload           5
		//   23   48:iload_2         
		//   24   49:ineg            
		//   25   50:iload_3         
		//   26   51:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					continue;
		//   27   54:goto            79
				}
				if(viewholder.mPosition >= i)
		//*  28   57:aload           5
		//*  29   59:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  30   62:iload_1         
		//*  31   63:icmplt          79
				{
					viewholder.addFlags(8);
		//   32   66:aload           5
		//   33   68:bipush          8
		//   34   70:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   35   73:aload_0         
		//   36   74:iload           4
		//   37   76:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
				}
			}

		//   38   79:iload           4
		//   39   81:iconst_1        
		//   40   82:isub            
		//   41   83:istore          4
		//*  42   85:goto            11
		//   43   88:return          
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			clear();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method void clear()>
			getRecycledViewPool().onAdapterChanged(adapter, adapter1, flag);
		//    2    4:aload_0         
		//    3    5:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//    4    8:aload_1         
		//    5    9:aload_2         
		//    6   10:iload_3         
		//    7   11:invokevirtual   #440 <Method void RecyclerView$RecycledViewPool.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		//    8   14:return          
		}

		void quickRecycleScrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			view.mScrapContainer = null;
		//    3    5:aload_1         
		//    4    6:aconst_null     
		//    5    7:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//    6   10:pop             
			view.mInChangeScrap = false;
		//    7   11:aload_1         
		//    8   12:iconst_0        
		//    9   13:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//   10   16:pop             
			((ViewHolder) (view)).clearReturnedFromScrapFlag();
		//   11   17:aload_1         
		//   12   18:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(((ViewHolder) (view)));
		//   13   21:aload_0         
		//   14   22:aload_1         
		//   15   23:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   16   26:return          
		}

		void recycleAndClearCachedViews()
		{
			for(int i = mCachedViews.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            26
				recycleCachedViewAt(i);
		//    8   14:aload_0         
		//    9   15:iload_1         
		//   10   16:invokevirtual   #372 <Method void recycleCachedViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            10
			mCachedViews.clear();
		//   16   26:aload_0         
		//   17   27:getfield        #42  <Field ArrayList mCachedViews>
		//   18   30:invokevirtual   #289 <Method void ArrayList.clear()>
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  19   33:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//*  20   36:ifeq            49
				mPrefetchRegistry.clearPrefetchPositions();
		//   21   39:aload_0         
		//   22   40:getfield        #30  <Field RecyclerView this$0>
		//   23   43:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//   24   46:invokevirtual   #466 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//   25   49:return          
		}

		void recycleCachedViewAt(int i)
		{
			addViewHolderToRecycledViewPool((ViewHolder)mCachedViews.get(i), true);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #42  <Field ArrayList mCachedViews>
		//    3    5:iload_1         
		//    4    6:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    5    9:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    6   12:iconst_1        
		//    7   13:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
			mCachedViews.remove(i);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload_1         
		//   11   21:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   12   24:pop             
		//   13   25:return          
		}

		public void recycleView(View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_2        
			if(viewholder.isTmpDetached())
		//*   3    5:aload_2         
		//*   4    6:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*   5    9:ifeq            21
				removeDetachedView(view, false);
		//    6   12:aload_0         
		//    7   13:getfield        #30  <Field RecyclerView this$0>
		//    8   16:aload_1         
		//    9   17:iconst_0        
		//   10   18:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
			if(viewholder.isScrap())
		//*  11   21:aload_2         
		//*  12   22:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  13   25:ifeq            35
				viewholder.unScrap();
		//   14   28:aload_2         
		//   15   29:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
			else
		//*  16   32:goto            46
			if(viewholder.wasReturnedFromScrap())
		//*  17   35:aload_2         
		//*  18   36:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   39:ifeq            46
				viewholder.clearReturnedFromScrapFlag();
		//   20   42:aload_2         
		//   21   43:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(viewholder);
		//   22   46:aload_0         
		//   23   47:aload_2         
		//   24   48:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   25   51:return          
		}

		void recycleViewHolderInternal(ViewHolder viewholder)
		{
			boolean flag5 = viewholder.isScrap();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//    2    4:istore          6
			boolean flag4 = false;
		//    3    6:iconst_0        
		//    4    7:istore          5
			boolean flag3 = false;
		//    5    9:iconst_0        
		//    6   10:istore          4
			if(!flag5 && viewholder.itemView.getParent() == null)
		//*   7   12:iload           6
		//*   8   14:ifne            404
		//*   9   17:aload_1         
		//*  10   18:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  11   21:invokevirtual   #268 <Method ViewParent View.getParent()>
		//*  12   24:ifnull          30
		//*  13   27:goto            404
			{
				if(viewholder.isTmpDetached())
		//*  14   30:aload_1         
		//*  15   31:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  16   34:ifeq            88
				{
					StringBuilder stringbuilder = new StringBuilder();
		//   17   37:new             #199 <Class StringBuilder>
		//   18   40:dup             
		//   19   41:invokespecial   #200 <Method void StringBuilder()>
		//   20   44:astore          7
					stringbuilder.append("Tmp detached view should be removed from RecyclerView before it can be recycled: ");
		//   21   46:aload           7
		//   22   48:ldc2            #480 <String "Tmp detached view should be removed from RecyclerView before it can be recycled: ">
		//   23   51:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   24   54:pop             
					stringbuilder.append(((Object) (viewholder)));
		//   25   55:aload           7
		//   26   57:aload_1         
		//   27   58:invokevirtual   #400 <Method StringBuilder StringBuilder.append(Object)>
		//   28   61:pop             
					stringbuilder.append(exceptionLabel());
		//   29   62:aload           7
		//   30   64:aload_0         
		//   31   65:getfield        #30  <Field RecyclerView this$0>
		//   32   68:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   33   71:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   34   74:pop             
					throw new IllegalArgumentException(stringbuilder.toString());
		//   35   75:new             #212 <Class IllegalArgumentException>
		//   36   78:dup             
		//   37   79:aload           7
		//   38   81:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   39   84:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   40   87:athrow          
				}
				if(viewholder.shouldIgnore())
		//*  41   88:aload_1         
		//*  42   89:invokevirtual   #483 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  43   92:ifeq            135
				{
					viewholder = ((ViewHolder) (new StringBuilder()));
		//   44   95:new             #199 <Class StringBuilder>
		//   45   98:dup             
		//   46   99:invokespecial   #200 <Method void StringBuilder()>
		//   47  102:astore_1        
					((StringBuilder) (viewholder)).append("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.");
		//   48  103:aload_1         
		//   49  104:ldc2            #485 <String "Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.">
		//   50  107:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   51  110:pop             
					((StringBuilder) (viewholder)).append(exceptionLabel());
		//   52  111:aload_1         
		//   53  112:aload_0         
		//   54  113:getfield        #30  <Field RecyclerView this$0>
		//   55  116:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   56  119:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   57  122:pop             
					throw new IllegalArgumentException(((StringBuilder) (viewholder)).toString());
		//   58  123:new             #212 <Class IllegalArgumentException>
		//   59  126:dup             
		//   60  127:aload_1         
		//   61  128:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   62  131:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   63  134:athrow          
				}
				flag4 = viewholder.doesTransientStatePreventRecycling();
		//   64  135:aload_1         
		//   65  136:invokestatic    #489 <Method boolean RecyclerView$ViewHolder.access$900(RecyclerView$ViewHolder)>
		//   66  139:istore          5
				boolean flag;
				if(mAdapter != null && flag4 && mAdapter.onFailedToRecycleView(viewholder))
		//*  67  141:aload_0         
		//*  68  142:getfield        #30  <Field RecyclerView this$0>
		//*  69  145:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  70  148:ifnull          175
		//*  71  151:iload           5
		//*  72  153:ifeq            175
		//*  73  156:aload_0         
		//*  74  157:getfield        #30  <Field RecyclerView this$0>
		//*  75  160:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  76  163:aload_1         
		//*  77  164:invokevirtual   #492 <Method boolean RecyclerView$Adapter.onFailedToRecycleView(RecyclerView$ViewHolder)>
		//*  78  167:ifeq            175
					flag = true;
		//   79  170:iconst_1        
		//   80  171:istore_2        
				else
		//*  81  172:goto            177
					flag = false;
		//   82  175:iconst_0        
		//   83  176:istore_2        
				int j;
				if(!flag && !viewholder.isRecyclable())
		//*  84  177:iload_2         
		//*  85  178:ifne            202
		//*  86  181:aload_1         
		//*  87  182:invokevirtual   #495 <Method boolean RecyclerView$ViewHolder.isRecyclable()>
		//*  88  185:ifeq            191
		//*  89  188:goto            202
				{
					boolean flag1 = false;
		//   90  191:iconst_0        
		//   91  192:istore_2        
					j = ((int) (flag3));
		//   92  193:iload           4
		//   93  195:istore_3        
					flag3 = flag1;
		//   94  196:iload_2         
		//   95  197:istore          4
				} else
		//*  96  199:goto            373
				{
					boolean flag2;
					if(mViewCacheMax > 0 && !viewholder.hasAnyOfTheFlags(526))
		//*  97  202:aload_0         
		//*  98  203:getfield        #54  <Field int mViewCacheMax>
		//*  99  206:ifle            350
		//* 100  209:aload_1         
		//* 101  210:sipush          526
		//* 102  213:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 103  216:ifne            350
					{
						j = mCachedViews.size();
		//  104  219:aload_0         
		//  105  220:getfield        #42  <Field ArrayList mCachedViews>
		//  106  223:invokevirtual   #296 <Method int ArrayList.size()>
		//  107  226:istore_3        
						int i = j;
		//  108  227:iload_3         
		//  109  228:istore_2        
						if(j >= mViewCacheMax)
		//* 110  229:iload_3         
		//* 111  230:aload_0         
		//* 112  231:getfield        #54  <Field int mViewCacheMax>
		//* 113  234:icmplt          252
						{
							i = j;
		//  114  237:iload_3         
		//  115  238:istore_2        
							if(j > 0)
		//* 116  239:iload_3         
		//* 117  240:ifle            252
							{
								recycleCachedViewAt(0);
		//  118  243:aload_0         
		//  119  244:iconst_0        
		//  120  245:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
								i = j - 1;
		//  121  248:iload_3         
		//  122  249:iconst_1        
		//  123  250:isub            
		//  124  251:istore_2        
							}
						}
						j = i;
		//  125  252:iload_2         
		//  126  253:istore_3        
						if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 127  254:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 128  257:ifeq            336
						{
							j = i;
		//  129  260:iload_2         
		//  130  261:istore_3        
							if(i > 0)
		//* 131  262:iload_2         
		//* 132  263:ifle            336
							{
								j = i;
		//  133  266:iload_2         
		//  134  267:istore_3        
								if(!mPrefetchRegistry.lastPrefetchIncludedPosition(viewholder.mPosition))
		//* 135  268:aload_0         
		//* 136  269:getfield        #30  <Field RecyclerView this$0>
		//* 137  272:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 138  275:aload_1         
		//* 139  276:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 140  279:invokevirtual   #498 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 141  282:ifne            336
								{
									i--;
		//  142  285:iload_2         
		//  143  286:iconst_1        
		//  144  287:isub            
		//  145  288:istore_2        
									do
									{
										if(i < 0)
											break;
		//  146  289:iload_2         
		//  147  290:iflt            332
										j = ((ViewHolder)mCachedViews.get(i)).mPosition;
		//  148  293:aload_0         
		//  149  294:getfield        #42  <Field ArrayList mCachedViews>
		//  150  297:iload_2         
		//  151  298:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//  152  301:checkcast       #63  <Class RecyclerView$ViewHolder>
		//  153  304:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//  154  307:istore_3        
										if(!mPrefetchRegistry.lastPrefetchIncludedPosition(j))
		//* 155  308:aload_0         
		//* 156  309:getfield        #30  <Field RecyclerView this$0>
		//* 157  312:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 158  315:iload_3         
		//* 159  316:invokevirtual   #498 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 160  319:ifne            325
											break;
		//  161  322:goto            332
										i--;
		//  162  325:iload_2         
		//  163  326:iconst_1        
		//  164  327:isub            
		//  165  328:istore_2        
									} while(true);
		//  166  329:goto            289
									j = i + 1;
		//  167  332:iload_2         
		//  168  333:iconst_1        
		//  169  334:iadd            
		//  170  335:istore_3        
								}
							}
						}
						mCachedViews.add(j, ((Object) (viewholder)));
		//  171  336:aload_0         
		//  172  337:getfield        #42  <Field ArrayList mCachedViews>
		//  173  340:iload_3         
		//  174  341:aload_1         
		//  175  342:invokevirtual   #502 <Method void ArrayList.add(int, Object)>
						flag2 = true;
		//  176  345:iconst_1        
		//  177  346:istore_2        
					} else
		//* 178  347:goto            352
					{
						flag2 = false;
		//  179  350:iconst_0        
		//  180  351:istore_2        
					}
					j = ((int) (flag3));
		//  181  352:iload           4
		//  182  354:istore_3        
					flag3 = flag2;
		//  183  355:iload_2         
		//  184  356:istore          4
					if(!flag2)
		//* 185  358:iload_2         
		//* 186  359:ifne            373
					{
						addViewHolderToRecycledViewPool(viewholder, true);
		//  187  362:aload_0         
		//  188  363:aload_1         
		//  189  364:iconst_1        
		//  190  365:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
						j = 1;
		//  191  368:iconst_1        
		//  192  369:istore_3        
						flag3 = flag2;
		//  193  370:iload_2         
		//  194  371:istore          4
					}
				}
				mViewInfoStore.removeViewHolder(viewholder);
		//  195  373:aload_0         
		//  196  374:getfield        #30  <Field RecyclerView this$0>
		//  197  377:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//  198  380:aload_1         
		//  199  381:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
				if(!flag3 && j == 0 && flag4)
		//* 200  384:iload           4
		//* 201  386:ifne            403
		//* 202  389:iload_3         
		//* 203  390:ifne            403
		//* 204  393:iload           5
		//* 205  395:ifeq            403
					viewholder.mOwnerRecyclerView = null;
		//  206  398:aload_1         
		//  207  399:aconst_null     
		//  208  400:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
				return;
		//  209  403:return          
			}
			StringBuilder stringbuilder1 = new StringBuilder();
		//  210  404:new             #199 <Class StringBuilder>
		//  211  407:dup             
		//  212  408:invokespecial   #200 <Method void StringBuilder()>
		//  213  411:astore          7
			stringbuilder1.append("Scrapped or attached views may not be recycled. isScrap:");
		//  214  413:aload           7
		//  215  415:ldc2            #504 <String "Scrapped or attached views may not be recycled. isScrap:">
		//  216  418:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  217  421:pop             
			stringbuilder1.append(viewholder.isScrap());
		//  218  422:aload           7
		//  219  424:aload_1         
		//  220  425:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//  221  428:invokevirtual   #507 <Method StringBuilder StringBuilder.append(boolean)>
		//  222  431:pop             
			stringbuilder1.append(" isAttached:");
		//  223  432:aload           7
		//  224  434:ldc2            #509 <String " isAttached:">
		//  225  437:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  226  440:pop             
			if(viewholder.itemView.getParent() != null)
		//* 227  441:aload_1         
		//* 228  442:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 229  445:invokevirtual   #268 <Method ViewParent View.getParent()>
		//* 230  448:ifnull          454
				flag4 = true;
		//  231  451:iconst_1        
		//  232  452:istore          5
			stringbuilder1.append(flag4);
		//  233  454:aload           7
		//  234  456:iload           5
		//  235  458:invokevirtual   #507 <Method StringBuilder StringBuilder.append(boolean)>
		//  236  461:pop             
			stringbuilder1.append(exceptionLabel());
		//  237  462:aload           7
		//  238  464:aload_0         
		//  239  465:getfield        #30  <Field RecyclerView this$0>
		//  240  468:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  241  471:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  242  474:pop             
			throw new IllegalArgumentException(stringbuilder1.toString());
		//  243  475:new             #212 <Class IllegalArgumentException>
		//  244  478:dup             
		//  245  479:aload           7
		//  246  481:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  247  484:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//  248  487:athrow          
		}

		void recycleViewInternal(View view)
		{
			recycleViewHolderInternal(RecyclerView.getChildViewHolderInt(view));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    3    5:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		void scrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			if(!((ViewHolder) (view)).hasAnyOfTheFlags(12) && ((ViewHolder) (view)).isUpdated() && !canReuseUpdatedViewHolder(((ViewHolder) (view))))
		//*   3    5:aload_1         
		//*   4    6:bipush          12
		//*   5    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   6   11:ifne            69
		//*   7   14:aload_1         
		//*   8   15:invokevirtual   #513 <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//*   9   18:ifeq            69
		//*  10   21:aload_0         
		//*  11   22:getfield        #30  <Field RecyclerView this$0>
		//*  12   25:aload_1         
		//*  13   26:invokevirtual   #516 <Method boolean RecyclerView.canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//*  14   29:ifeq            35
		//*  15   32:goto            69
			{
				if(mChangedScrap == null)
		//*  16   35:aload_0         
		//*  17   36:getfield        #40  <Field ArrayList mChangedScrap>
		//*  18   39:ifnonnull       53
					mChangedScrap = new ArrayList();
		//   19   42:aload_0         
		//   20   43:new             #35  <Class ArrayList>
		//   21   46:dup             
		//   22   47:invokespecial   #36  <Method void ArrayList()>
		//   23   50:putfield        #40  <Field ArrayList mChangedScrap>
				((ViewHolder) (view)).setScrapContainer(this, true);
		//   24   53:aload_1         
		//   25   54:aload_0         
		//   26   55:iconst_1        
		//   27   56:invokevirtual   #520 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
				mChangedScrap.add(((Object) (view)));
		//   28   59:aload_0         
		//   29   60:getfield        #40  <Field ArrayList mChangedScrap>
		//   30   63:aload_1         
		//   31   64:invokevirtual   #523 <Method boolean ArrayList.add(Object)>
		//   32   67:pop             
				return;
		//   33   68:return          
			}
			if(((ViewHolder) (view)).isInvalid() && !((ViewHolder) (view)).isRemoved() && !mAdapter.hasStableIds())
		//*  34   69:aload_1         
		//*  35   70:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  36   73:ifeq            136
		//*  37   76:aload_1         
		//*  38   77:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  39   80:ifne            136
		//*  40   83:aload_0         
		//*  41   84:getfield        #30  <Field RecyclerView this$0>
		//*  42   87:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  43   90:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  44   93:ifne            136
			{
				view = ((View) (new StringBuilder()));
		//   45   96:new             #199 <Class StringBuilder>
		//   46   99:dup             
		//   47  100:invokespecial   #200 <Method void StringBuilder()>
		//   48  103:astore_1        
				((StringBuilder) (view)).append("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.");
		//   49  104:aload_1         
		//   50  105:ldc2            #525 <String "Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.">
		//   51  108:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   52  111:pop             
				((StringBuilder) (view)).append(exceptionLabel());
		//   53  112:aload_1         
		//   54  113:aload_0         
		//   55  114:getfield        #30  <Field RecyclerView this$0>
		//   56  117:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   57  120:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   58  123:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
		//   59  124:new             #212 <Class IllegalArgumentException>
		//   60  127:dup             
		//   61  128:aload_1         
		//   62  129:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   63  132:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   64  135:athrow          
			} else
			{
				((ViewHolder) (view)).setScrapContainer(this, false);
		//   65  136:aload_1         
		//   66  137:aload_0         
		//   67  138:iconst_0        
		//   68  139:invokevirtual   #520 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
				mAttachedScrap.add(((Object) (view)));
		//   69  142:aload_0         
		//   70  143:getfield        #38  <Field ArrayList mAttachedScrap>
		//   71  146:aload_1         
		//   72  147:invokevirtual   #523 <Method boolean ArrayList.add(Object)>
		//   73  150:pop             
				return;
		//   74  151:return          
			}
		}

		void setRecycledViewPool(RecycledViewPool recycledviewpool)
		{
			if(mRecyclerPool != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnull          14
				mRecyclerPool.detach();
		//    3    7:aload_0         
		//    4    8:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//    5   11:invokevirtual   #530 <Method void RecyclerView$RecycledViewPool.detach()>
			mRecyclerPool = recycledviewpool;
		//    6   14:aload_0         
		//    7   15:aload_1         
		//    8   16:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			if(recycledviewpool != null)
		//*   9   19:aload_1         
		//*  10   20:ifnull          37
				mRecyclerPool.attach(getAdapter());
		//   11   23:aload_0         
		//   12   24:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   13   27:aload_0         
		//   14   28:getfield        #30  <Field RecyclerView this$0>
		//   15   31:invokevirtual   #534 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//   16   34:invokevirtual   #538 <Method void RecyclerView$RecycledViewPool.attach(RecyclerView$Adapter)>
		//   17   37:return          
		}

		void setViewCacheExtension(ViewCacheExtension viewcacheextension)
		{
			mViewCacheExtension = viewcacheextension;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//    3    5:return          
		}

		public void setViewCacheSize(int i)
		{
			mRequestedCacheMax = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #52  <Field int mRequestedCacheMax>
			updateViewCacheSize();
		//    3    5:aload_0         
		//    4    6:invokevirtual   #546 <Method void updateViewCacheSize()>
		//    5    9:return          
		}

		ViewHolder tryGetViewHolderForPositionByDeadline(int i, boolean flag, long l)
		{
label0:
			{
				int k;
				boolean flag2;
				Object obj2;
label1:
				{
					if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            1073
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          21
						break label0;
		//    8   18:goto            1073
					boolean flag3 = mState.isPreLayout();
		//    9   21:aload_0         
		//   10   22:getfield        #30  <Field RecyclerView this$0>
		//   11   25:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   12   28:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//   13   31:istore          10
					flag2 = true;
		//   14   33:iconst_1        
		//   15   34:istore          9
					ViewHolder viewholder;
					if(flag3)
		//*  16   36:iload           10
		//*  17   38:ifeq            63
					{
						obj2 = ((Object) (getChangedScrapViewForPosition(i)));
		//   18   41:aload_0         
		//   19   42:iload_1         
		//   20   43:invokevirtual   #549 <Method RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
		//   21   46:astore          16
						viewholder = ((ViewHolder) (obj2));
		//   22   48:aload           16
		//   23   50:astore          15
						if(obj2 != null)
		//*  24   52:aload           16
		//*  25   54:ifnull          66
						{
							k = 1;
		//   26   57:iconst_1        
		//   27   58:istore          6
							break label1;
		//   28   60:goto            73
						}
					} else
					{
						viewholder = null;
		//   29   63:aconst_null     
		//   30   64:astore          15
					}
					k = 0;
		//   31   66:iconst_0        
		//   32   67:istore          6
					obj2 = ((Object) (viewholder));
		//   33   69:aload           15
		//   34   71:astore          16
				}
label2:
				{
					Object obj = obj2;
		//   35   73:aload           16
		//   36   75:astore          15
					boolean flag1 = ((boolean) (k));
		//   37   77:iload           6
		//   38   79:istore          5
					if(obj2 == null)
		//*  39   81:aload           16
		//*  40   83:ifnonnull       191
					{
						obj2 = ((Object) (getScrapOrHiddenOrCachedHolderForPosition(i, flag)));
		//   41   86:aload_0         
		//   42   87:iload_1         
		//   43   88:iload_2         
		//   44   89:invokevirtual   #551 <Method RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int, boolean)>
		//   45   92:astore          16
						obj = obj2;
		//   46   94:aload           16
		//   47   96:astore          15
						flag1 = ((boolean) (k));
		//   48   98:iload           6
		//   49  100:istore          5
						if(obj2 != null)
		//*  50  102:aload           16
		//*  51  104:ifnull          191
							if(!validateViewHolderForOffsetPosition(((ViewHolder) (obj2))))
		//*  52  107:aload_0         
		//*  53  108:aload           16
		//*  54  110:invokevirtual   #554 <Method boolean validateViewHolderForOffsetPosition(RecyclerView$ViewHolder)>
		//*  55  113:ifne            184
							{
								if(!flag)
		//*  56  116:iload_2         
		//*  57  117:ifne            174
								{
									((ViewHolder) (obj2)).addFlags(4);
		//   58  120:aload           16
		//   59  122:iconst_4        
		//   60  123:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
									if(((ViewHolder) (obj2)).isScrap())
		//*  61  126:aload           16
		//*  62  128:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  63  131:ifeq            155
									{
										removeDetachedView(((ViewHolder) (obj2)).itemView, false);
		//   64  134:aload_0         
		//   65  135:getfield        #30  <Field RecyclerView this$0>
		//   66  138:aload           16
		//   67  140:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   68  143:iconst_0        
		//   69  144:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
										((ViewHolder) (obj2)).unScrap();
		//   70  147:aload           16
		//   71  149:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
									} else
		//*  72  152:goto            168
									if(((ViewHolder) (obj2)).wasReturnedFromScrap())
		//*  73  155:aload           16
		//*  74  157:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  75  160:ifeq            168
										((ViewHolder) (obj2)).clearReturnedFromScrapFlag();
		//   76  163:aload           16
		//   77  165:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
									recycleViewHolderInternal(((ViewHolder) (obj2)));
		//   78  168:aload_0         
		//   79  169:aload           16
		//   80  171:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
								}
								obj = null;
		//   81  174:aconst_null     
		//   82  175:astore          15
								flag1 = ((boolean) (k));
		//   83  177:iload           6
		//   84  179:istore          5
							} else
		//*  85  181:goto            191
							{
								flag1 = true;
		//   86  184:iconst_1        
		//   87  185:istore          5
								obj = obj2;
		//   88  187:aload           16
		//   89  189:astore          15
							}
					}
					Object obj3 = obj;
		//   90  191:aload           15
		//   91  193:astore          17
					int i1 = ((int) (flag1));
		//   92  195:iload           5
		//   93  197:istore          7
					if(obj == null)
		//*  94  199:aload           15
		//*  95  201:ifnonnull       763
					{
						i1 = mAdapterHelper.findPositionOffset(i);
		//   96  204:aload_0         
		//   97  205:getfield        #30  <Field RecyclerView this$0>
		//   98  208:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   99  211:iload_1         
		//  100  212:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//  101  215:istore          7
						if(i1 >= 0 && i1 < mAdapter.getItemCount())
		//* 102  217:iload           7
		//* 103  219:iflt            661
		//* 104  222:iload           7
		//* 105  224:aload_0         
		//* 106  225:getfield        #30  <Field RecyclerView this$0>
		//* 107  228:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 108  231:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//* 109  234:icmplt          240
		//* 110  237:goto            661
						{
							int j1 = mAdapter.getItemViewType(i1);
		//  111  240:aload_0         
		//  112  241:getfield        #30  <Field RecyclerView this$0>
		//  113  244:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  114  247:iload           7
		//  115  249:invokevirtual   #556 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//  116  252:istore          8
							obj2 = obj;
		//  117  254:aload           15
		//  118  256:astore          16
							k = ((int) (flag1));
		//  119  258:iload           5
		//  120  260:istore          6
							if(mAdapter.hasStableIds())
		//* 121  262:aload_0         
		//* 122  263:getfield        #30  <Field RecyclerView this$0>
		//* 123  266:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 124  269:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//* 125  272:ifeq            323
							{
								obj = ((Object) (getScrapOrCachedViewForId(mAdapter.getItemId(i1), j1, flag)));
		//  126  275:aload_0         
		//  127  276:aload_0         
		//  128  277:getfield        #30  <Field RecyclerView this$0>
		//  129  280:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  130  283:iload           7
		//  131  285:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//  132  288:iload           8
		//  133  290:iload_2         
		//  134  291:invokevirtual   #558 <Method RecyclerView$ViewHolder getScrapOrCachedViewForId(long, int, boolean)>
		//  135  294:astore          15
								obj2 = obj;
		//  136  296:aload           15
		//  137  298:astore          16
								k = ((int) (flag1));
		//  138  300:iload           5
		//  139  302:istore          6
								if(obj != null)
		//* 140  304:aload           15
		//* 141  306:ifnull          323
								{
									obj.mPosition = i1;
		//  142  309:aload           15
		//  143  311:iload           7
		//  144  313:putfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
									k = 1;
		//  145  316:iconst_1        
		//  146  317:istore          6
									obj2 = obj;
		//  147  319:aload           15
		//  148  321:astore          16
								}
							}
							obj = obj2;
		//  149  323:aload           16
		//  150  325:astore          15
							if(obj2 == null)
		//* 151  327:aload           16
		//* 152  329:ifnonnull       481
							{
								obj = obj2;
		//  153  332:aload           16
		//  154  334:astore          15
								if(mViewCacheExtension != null)
		//* 155  336:aload_0         
		//* 156  337:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//* 157  340:ifnull          481
								{
									obj3 = ((Object) (mViewCacheExtension.getViewForPositionAndType(this, i, j1)));
		//  158  343:aload_0         
		//  159  344:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//  160  347:aload_0         
		//  161  348:iload_1         
		//  162  349:iload           8
		//  163  351:invokevirtual   #564 <Method View RecyclerView$ViewCacheExtension.getViewForPositionAndType(RecyclerView$Recycler, int, int)>
		//  164  354:astore          17
									obj = obj2;
		//  165  356:aload           16
		//  166  358:astore          15
									if(obj3 != null)
		//* 167  360:aload           17
		//* 168  362:ifnull          481
									{
										obj2 = ((Object) (getChildViewHolder(((View) (obj3)))));
		//  169  365:aload_0         
		//  170  366:getfield        #30  <Field RecyclerView this$0>
		//  171  369:aload           17
		//  172  371:invokevirtual   #567 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolder(View)>
		//  173  374:astore          16
										if(obj2 == null)
		//* 174  376:aload           16
		//* 175  378:ifnonnull       425
										{
											obj = ((Object) (new StringBuilder()));
		//  176  381:new             #199 <Class StringBuilder>
		//  177  384:dup             
		//  178  385:invokespecial   #200 <Method void StringBuilder()>
		//  179  388:astore          15
											((StringBuilder) (obj)).append("getViewForPositionAndType returned a view which does not have a ViewHolder");
		//  180  390:aload           15
		//  181  392:ldc2            #569 <String "getViewForPositionAndType returned a view which does not have a ViewHolder">
		//  182  395:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  183  398:pop             
											((StringBuilder) (obj)).append(exceptionLabel());
		//  184  399:aload           15
		//  185  401:aload_0         
		//  186  402:getfield        #30  <Field RecyclerView this$0>
		//  187  405:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  188  408:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  189  411:pop             
											throw new IllegalArgumentException(((StringBuilder) (obj)).toString());
		//  190  412:new             #212 <Class IllegalArgumentException>
		//  191  415:dup             
		//  192  416:aload           15
		//  193  418:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  194  421:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//  195  424:athrow          
										}
										obj = obj2;
		//  196  425:aload           16
		//  197  427:astore          15
										if(((ViewHolder) (obj2)).shouldIgnore())
		//* 198  429:aload           16
		//* 199  431:invokevirtual   #483 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//* 200  434:ifeq            481
										{
											obj = ((Object) (new StringBuilder()));
		//  201  437:new             #199 <Class StringBuilder>
		//  202  440:dup             
		//  203  441:invokespecial   #200 <Method void StringBuilder()>
		//  204  444:astore          15
											((StringBuilder) (obj)).append("getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.");
		//  205  446:aload           15
		//  206  448:ldc2            #571 <String "getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.">
		//  207  451:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  208  454:pop             
											((StringBuilder) (obj)).append(exceptionLabel());
		//  209  455:aload           15
		//  210  457:aload_0         
		//  211  458:getfield        #30  <Field RecyclerView this$0>
		//  212  461:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  213  464:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  214  467:pop             
											throw new IllegalArgumentException(((StringBuilder) (obj)).toString());
		//  215  468:new             #212 <Class IllegalArgumentException>
		//  216  471:dup             
		//  217  472:aload           15
		//  218  474:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  219  477:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//  220  480:athrow          
										}
									}
								}
							}
							obj2 = obj;
		//  221  481:aload           15
		//  222  483:astore          16
							if(obj == null)
		//* 223  485:aload           15
		//* 224  487:ifnonnull       535
							{
								ViewHolder viewholder1 = getRecycledViewPool().getRecycledView(j1);
		//  225  490:aload_0         
		//  226  491:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//  227  494:iload           8
		//  228  496:invokevirtual   #574 <Method RecyclerView$ViewHolder RecyclerView$RecycledViewPool.getRecycledView(int)>
		//  229  499:astore          15
								obj2 = ((Object) (viewholder1));
		//  230  501:aload           15
		//  231  503:astore          16
								if(viewholder1 != null)
		//* 232  505:aload           15
		//* 233  507:ifnull          535
								{
									viewholder1.resetInternal();
		//  234  510:aload           15
		//  235  512:invokevirtual   #577 <Method void RecyclerView$ViewHolder.resetInternal()>
									obj2 = ((Object) (viewholder1));
		//  236  515:aload           15
		//  237  517:astore          16
									if(RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST)
		//* 238  519:getstatic       #580 <Field boolean RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST>
		//* 239  522:ifeq            535
									{
										invalidateDisplayListInt(viewholder1);
		//  240  525:aload_0         
		//  241  526:aload           15
		//  242  528:invokespecial   #582 <Method void invalidateDisplayListInt(RecyclerView$ViewHolder)>
										obj2 = ((Object) (viewholder1));
		//  243  531:aload           15
		//  244  533:astore          16
									}
								}
							}
							obj3 = obj2;
		//  245  535:aload           16
		//  246  537:astore          17
							i1 = k;
		//  247  539:iload           6
		//  248  541:istore          7
							if(obj2 == null)
		//* 249  543:aload           16
		//* 250  545:ifnonnull       763
							{
								long l1 = getNanoTime();
		//  251  548:aload_0         
		//  252  549:getfield        #30  <Field RecyclerView this$0>
		//  253  552:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//  254  555:lstore          11
								if(l != 0xffffffffL && !mRecyclerPool.willCreateInTime(j1, l1, l))
		//* 255  557:lload_3         
		//* 256  558:ldc2w           #132 <Long 0xffffffffL>
		//* 257  561:lcmp            
		//* 258  562:ifeq            582
		//* 259  565:aload_0         
		//* 260  566:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 261  569:iload           8
		//* 262  571:lload           11
		//* 263  573:lload_3         
		//* 264  574:invokevirtual   #585 <Method boolean RecyclerView$RecycledViewPool.willCreateInTime(int, long, long)>
		//* 265  577:ifne            582
									return null;
		//  266  580:aconst_null     
		//  267  581:areturn         
								obj2 = ((Object) (mAdapter.createViewHolder(((ViewGroup) (RecyclerView.this)), j1)));
		//  268  582:aload_0         
		//  269  583:getfield        #30  <Field RecyclerView this$0>
		//  270  586:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  271  589:aload_0         
		//  272  590:getfield        #30  <Field RecyclerView this$0>
		//  273  593:iload           8
		//  274  595:invokevirtual   #589 <Method RecyclerView$ViewHolder RecyclerView$Adapter.createViewHolder(ViewGroup, int)>
		//  275  598:astore          16
								if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 276  600:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 277  603:ifeq            635
								{
									RecyclerView recyclerview = RecyclerView.findNestedRecyclerView(((ViewHolder) (obj2)).itemView);
		//  278  606:aload           16
		//  279  608:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  280  611:invokestatic    #593 <Method RecyclerView RecyclerView.findNestedRecyclerView(View)>
		//  281  614:astore          15
									if(recyclerview != null)
		//* 282  616:aload           15
		//* 283  618:ifnull          635
										obj2.mNestedRecyclerView = new WeakReference(((Object) (recyclerview)));
		//  284  621:aload           16
		//  285  623:new             #595 <Class WeakReference>
		//  286  626:dup             
		//  287  627:aload           15
		//  288  629:invokespecial   #597 <Method void WeakReference(Object)>
		//  289  632:putfield        #601 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
								}
								long l2 = getNanoTime();
		//  290  635:aload_0         
		//  291  636:getfield        #30  <Field RecyclerView this$0>
		//  292  639:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//  293  642:lstore          13
								mRecyclerPool.factorInCreateTime(j1, l2 - l1);
		//  294  644:aload_0         
		//  295  645:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//  296  648:iload           8
		//  297  650:lload           13
		//  298  652:lload           11
		//  299  654:lsub            
		//  300  655:invokevirtual   #604 <Method void RecyclerView$RecycledViewPool.factorInCreateTime(int, long)>
								break label2;
		//  301  658:goto            771
							}
						} else
						{
							StringBuilder stringbuilder = new StringBuilder();
		//  302  661:new             #199 <Class StringBuilder>
		//  303  664:dup             
		//  304  665:invokespecial   #200 <Method void StringBuilder()>
		//  305  668:astore          15
							stringbuilder.append("Inconsistency detected. Invalid item position ");
		//  306  670:aload           15
		//  307  672:ldc2            #273 <String "Inconsistency detected. Invalid item position ">
		//  308  675:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  309  678:pop             
							stringbuilder.append(i);
		//  310  679:aload           15
		//  311  681:iload_1         
		//  312  682:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  313  685:pop             
							stringbuilder.append("(offset:");
		//  314  686:aload           15
		//  315  688:ldc2            #278 <String "(offset:">
		//  316  691:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  317  694:pop             
							stringbuilder.append(i1);
		//  318  695:aload           15
		//  319  697:iload           7
		//  320  699:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  321  702:pop             
							stringbuilder.append(").");
		//  322  703:aload           15
		//  323  705:ldc2            #280 <String ").">
		//  324  708:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  325  711:pop             
							stringbuilder.append("state:");
		//  326  712:aload           15
		//  327  714:ldc2            #282 <String "state:">
		//  328  717:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  329  720:pop             
							stringbuilder.append(mState.getItemCount());
		//  330  721:aload           15
		//  331  723:aload_0         
		//  332  724:getfield        #30  <Field RecyclerView this$0>
		//  333  727:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//  334  730:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//  335  733:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  336  736:pop             
							stringbuilder.append(exceptionLabel());
		//  337  737:aload           15
		//  338  739:aload_0         
		//  339  740:getfield        #30  <Field RecyclerView this$0>
		//  340  743:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  341  746:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  342  749:pop             
							throw new IndexOutOfBoundsException(stringbuilder.toString());
		//  343  750:new             #285 <Class IndexOutOfBoundsException>
		//  344  753:dup             
		//  345  754:aload           15
		//  346  756:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  347  759:invokespecial   #286 <Method void IndexOutOfBoundsException(String)>
		//  348  762:athrow          
						}
					}
					obj2 = obj3;
		//  349  763:aload           17
		//  350  765:astore          16
					k = i1;
		//  351  767:iload           7
		//  352  769:istore          6
				}
label3:
				{
label4:
					{
						if(k != 0 && !mState.isPreLayout() && ((ViewHolder) (obj2)).hasAnyOfTheFlags(8192))
		//* 353  771:iload           6
		//* 354  773:ifeq            872
		//* 355  776:aload_0         
		//* 356  777:getfield        #30  <Field RecyclerView this$0>
		//* 357  780:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 358  783:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 359  786:ifne            872
		//* 360  789:aload           16
		//* 361  791:sipush          8192
		//* 362  794:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 363  797:ifeq            872
						{
							((ViewHolder) (obj2)).setFlags(0, 8192);
		//  364  800:aload           16
		//  365  802:iconst_0        
		//  366  803:sipush          8192
		//  367  806:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
							if(mState.mRunSimpleAnimations)
		//* 368  809:aload_0         
		//* 369  810:getfield        #30  <Field RecyclerView this$0>
		//* 370  813:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 371  816:getfield        #607 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		//* 372  819:ifeq            872
							{
								int j = ItemAnimator.buildAdapterChangeFlagsForAnimations(((ViewHolder) (obj2)));
		//  373  822:aload           16
		//  374  824:invokestatic    #613 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
		//  375  827:istore          5
								ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, ((ViewHolder) (obj2)), j | 0x1000, ((ViewHolder) (obj2)).getUnmodifiedPayloads());
		//  376  829:aload_0         
		//  377  830:getfield        #30  <Field RecyclerView this$0>
		//  378  833:getfield        #617 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//  379  836:aload_0         
		//  380  837:getfield        #30  <Field RecyclerView this$0>
		//  381  840:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//  382  843:aload           16
		//  383  845:iload           5
		//  384  847:sipush          4096
		//  385  850:ior             
		//  386  851:aload           16
		//  387  853:invokevirtual   #620 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//  388  856:invokevirtual   #624 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
		//  389  859:astore          15
								recordAnimationInfoIfBouncedHiddenView(((ViewHolder) (obj2)), itemholderinfo);
		//  390  861:aload_0         
		//  391  862:getfield        #30  <Field RecyclerView this$0>
		//  392  865:aload           16
		//  393  867:aload           15
		//  394  869:invokevirtual   #628 <Method void RecyclerView.recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
							}
						}
						if(mState.isPreLayout() && ((ViewHolder) (obj2)).isBound())
		//* 395  872:aload_0         
		//* 396  873:getfield        #30  <Field RecyclerView this$0>
		//* 397  876:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 398  879:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 399  882:ifeq            902
		//* 400  885:aload           16
		//* 401  887:invokevirtual   #631 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 402  890:ifeq            902
							obj2.mPreLayoutPosition = i;
		//  403  893:aload           16
		//  404  895:iload_1         
		//  405  896:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
						else
		//* 406  899:goto            929
						if(!((ViewHolder) (obj2)).isBound() || ((ViewHolder) (obj2)).needsUpdate() || ((ViewHolder) (obj2)).isInvalid())
		//* 407  902:aload           16
		//* 408  904:invokevirtual   #631 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 409  907:ifeq            934
		//* 410  910:aload           16
		//* 411  912:invokevirtual   #634 <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//* 412  915:ifne            934
		//* 413  918:aload           16
		//* 414  920:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 415  923:ifeq            929
							break label4;
		//  416  926:goto            934
						flag = false;
		//  417  929:iconst_0        
		//  418  930:istore_2        
						break label3;
		//  419  931:goto            954
					}
					flag = tryBindViewHolderByDeadline(((ViewHolder) (obj2)), mAdapterHelper.findPositionOffset(i), i, l);
		//  420  934:aload_0         
		//  421  935:aload           16
		//  422  937:aload_0         
		//  423  938:getfield        #30  <Field RecyclerView this$0>
		//  424  941:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//  425  944:iload_1         
		//  426  945:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//  427  948:iload_1         
		//  428  949:lload_3         
		//  429  950:invokespecial   #233 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//  430  953:istore_2        
				}
				Object obj1 = ((Object) (((ViewHolder) (obj2)).itemView.getLayoutParams()));
		//  431  954:aload           16
		//  432  956:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  433  959:invokevirtual   #239 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//  434  962:astore          15
				if(obj1 == null)
		//* 435  964:aload           15
		//* 436  966:ifnonnull       994
				{
					obj1 = ((Object) ((LayoutParams)generateDefaultLayoutParams()));
		//  437  969:aload_0         
		//  438  970:getfield        #30  <Field RecyclerView this$0>
		//  439  973:invokevirtual   #242 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//  440  976:checkcast       #244 <Class RecyclerView$LayoutParams>
		//  441  979:astore          15
					((ViewHolder) (obj2)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj1)));
		//  442  981:aload           16
		//  443  983:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  444  986:aload           15
		//  445  988:invokevirtual   #248 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//* 446  991:goto            1040
				if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj1))))
		//* 447  994:aload_0         
		//* 448  995:getfield        #30  <Field RecyclerView this$0>
		//* 449  998:aload           15
		//* 450 1000:invokevirtual   #252 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 451 1003:ifne            1033
				{
					obj1 = ((Object) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj1)))));
		//  452 1006:aload_0         
		//  453 1007:getfield        #30  <Field RecyclerView this$0>
		//  454 1010:aload           15
		//  455 1012:invokevirtual   #256 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  456 1015:checkcast       #244 <Class RecyclerView$LayoutParams>
		//  457 1018:astore          15
					((ViewHolder) (obj2)).itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj1)));
		//  458 1020:aload           16
		//  459 1022:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  460 1025:aload           15
		//  461 1027:invokevirtual   #248 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
				} else
		//* 462 1030:goto            1040
				{
					obj1 = ((Object) ((LayoutParams)obj1));
		//  463 1033:aload           15
		//  464 1035:checkcast       #244 <Class RecyclerView$LayoutParams>
		//  465 1038:astore          15
				}
				obj1.mViewHolder = ((ViewHolder) (obj2));
		//  466 1040:aload           15
		//  467 1042:aload           16
		//  468 1044:putfield        #264 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
				if(k != 0 && flag)
		//* 469 1047:iload           6
		//* 470 1049:ifeq            1062
		//* 471 1052:iload_2         
		//* 472 1053:ifeq            1062
					flag = flag2;
		//  473 1056:iload           9
		//  474 1058:istore_2        
				else
		//* 475 1059:goto            1064
					flag = false;
		//  476 1062:iconst_0        
		//  477 1063:istore_2        
				obj1.mPendingInvalidate = flag;
		//  478 1064:aload           15
		//  479 1066:iload_2         
		//  480 1067:putfield        #271 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
				return ((ViewHolder) (obj2));
		//  481 1070:aload           16
		//  482 1072:areturn         
			}
			StringBuilder stringbuilder1 = new StringBuilder();
		//  483 1073:new             #199 <Class StringBuilder>
		//  484 1076:dup             
		//  485 1077:invokespecial   #200 <Method void StringBuilder()>
		//  486 1080:astore          15
			stringbuilder1.append("Invalid item position ");
		//  487 1082:aload           15
		//  488 1084:ldc2            #636 <String "Invalid item position ">
		//  489 1087:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  490 1090:pop             
			stringbuilder1.append(i);
		//  491 1091:aload           15
		//  492 1093:iload_1         
		//  493 1094:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  494 1097:pop             
			stringbuilder1.append("(");
		//  495 1098:aload           15
		//  496 1100:ldc2            #638 <String "(">
		//  497 1103:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  498 1106:pop             
			stringbuilder1.append(i);
		//  499 1107:aload           15
		//  500 1109:iload_1         
		//  501 1110:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  502 1113:pop             
			stringbuilder1.append("). Item count:");
		//  503 1114:aload           15
		//  504 1116:ldc2            #640 <String "). Item count:">
		//  505 1119:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  506 1122:pop             
			stringbuilder1.append(mState.getItemCount());
		//  507 1123:aload           15
		//  508 1125:aload_0         
		//  509 1126:getfield        #30  <Field RecyclerView this$0>
		//  510 1129:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//  511 1132:invokevirtual   #283 <Method int RecyclerView$State.getItemCount()>
		//  512 1135:invokevirtual   #276 <Method StringBuilder StringBuilder.append(int)>
		//  513 1138:pop             
			stringbuilder1.append(exceptionLabel());
		//  514 1139:aload           15
		//  515 1141:aload_0         
		//  516 1142:getfield        #30  <Field RecyclerView this$0>
		//  517 1145:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//  518 1148:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//  519 1151:pop             
			throw new IndexOutOfBoundsException(stringbuilder1.toString());
		//  520 1152:new             #285 <Class IndexOutOfBoundsException>
		//  521 1155:dup             
		//  522 1156:aload           15
		//  523 1158:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  524 1161:invokespecial   #286 <Method void IndexOutOfBoundsException(String)>
		//  525 1164:athrow          
		}

		void unscrapView(ViewHolder viewholder)
		{
			if(viewholder.mInChangeScrap)
		//*   0    0:aload_1         
		//*   1    1:invokestatic    #645 <Method boolean RecyclerView$ViewHolder.access$1100(RecyclerView$ViewHolder)>
		//*   2    4:ifeq            19
				mChangedScrap.remove(((Object) (viewholder)));
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//    7   15:pop             
			else
		//*   8   16:goto            28
				mAttachedScrap.remove(((Object) (viewholder)));
		//    9   19:aload_0         
		//   10   20:getfield        #38  <Field ArrayList mAttachedScrap>
		//   11   23:aload_1         
		//   12   24:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//   13   27:pop             
			viewholder.mScrapContainer = null;
		//   14   28:aload_1         
		//   15   29:aconst_null     
		//   16   30:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//   17   33:pop             
			viewholder.mInChangeScrap = false;
		//   18   34:aload_1         
		//   19   35:iconst_0        
		//   20   36:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//   21   39:pop             
			viewholder.clearReturnedFromScrapFlag();
		//   22   40:aload_1         
		//   23   41:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//   24   44:return          
		}

		void updateViewCacheSize()
		{
			int i;
			if(mLayout != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnull          24
				i = mLayout.mPrefetchMaxCountObserved;
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    7   17:getfield        #656 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
		//    8   20:istore_1        
			else
		//*   9   21:goto            26
				i = 0;
		//   10   24:iconst_0        
		//   11   25:istore_1        
			mViewCacheMax = mRequestedCacheMax + i;
		//   12   26:aload_0         
		//   13   27:aload_0         
		//   14   28:getfield        #52  <Field int mRequestedCacheMax>
		//   15   31:iload_1         
		//   16   32:iadd            
		//   17   33:putfield        #54  <Field int mViewCacheMax>
			for(int j = mCachedViews.size() - 1; j >= 0 && mCachedViews.size() > mViewCacheMax; j--)
		//*  18   36:aload_0         
		//*  19   37:getfield        #42  <Field ArrayList mCachedViews>
		//*  20   40:invokevirtual   #296 <Method int ArrayList.size()>
		//*  21   43:iconst_1        
		//*  22   44:isub            
		//*  23   45:istore_1        
		//*  24   46:iload_1         
		//*  25   47:iflt            76
		//*  26   50:aload_0         
		//*  27   51:getfield        #42  <Field ArrayList mCachedViews>
		//*  28   54:invokevirtual   #296 <Method int ArrayList.size()>
		//*  29   57:aload_0         
		//*  30   58:getfield        #54  <Field int mViewCacheMax>
		//*  31   61:icmple          76
				recycleCachedViewAt(j);
		//   32   64:aload_0         
		//   33   65:iload_1         
		//   34   66:invokevirtual   #372 <Method void recycleCachedViewAt(int)>

		//   35   69:iload_1         
		//   36   70:iconst_1        
		//   37   71:isub            
		//   38   72:istore_1        
		//*  39   73:goto            46
		//   40   76:return          
		}

		boolean validateViewHolderForOffsetPosition(ViewHolder viewholder)
		{
			if(viewholder.isRemoved())
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   2    4:ifeq            18
				return mState.isPreLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #30  <Field RecyclerView this$0>
		//    5   11:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//    6   14:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//    7   17:ireturn         
			if(viewholder.mPosition >= 0 && viewholder.mPosition < mAdapter.getItemCount())
		//*   8   18:aload_1         
		//*   9   19:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  10   22:iflt            126
		//*  11   25:aload_1         
		//*  12   26:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  13   29:aload_0         
		//*  14   30:getfield        #30  <Field RecyclerView this$0>
		//*  15   33:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   36:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  17   39:icmplt          45
		//*  18   42:goto            126
			{
				boolean flag1 = mState.isPreLayout();
		//   19   45:aload_0         
		//   20   46:getfield        #30  <Field RecyclerView this$0>
		//   21   49:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   22   52:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//   23   55:istore_3        
				boolean flag = false;
		//   24   56:iconst_0        
		//   25   57:istore_2        
				if(!flag1 && mAdapter.getItemViewType(viewholder.mPosition) != viewholder.getItemViewType())
		//*  26   58:iload_3         
		//*  27   59:ifne            85
		//*  28   62:aload_0         
		//*  29   63:getfield        #30  <Field RecyclerView this$0>
		//*  30   66:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  31   69:aload_1         
		//*  32   70:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  33   73:invokevirtual   #556 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//*  34   76:aload_1         
		//*  35   77:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  36   80:icmpeq          85
					return false;
		//   37   83:iconst_0        
		//   38   84:ireturn         
				if(mAdapter.hasStableIds())
		//*  39   85:aload_0         
		//*  40   86:getfield        #30  <Field RecyclerView this$0>
		//*  41   89:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  42   92:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  43   95:ifeq            124
				{
					if(viewholder.getItemId() == mAdapter.getItemId(viewholder.mPosition))
		//*  44   98:aload_1         
		//*  45   99:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  46  102:aload_0         
		//*  47  103:getfield        #30  <Field RecyclerView this$0>
		//*  48  106:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  49  109:aload_1         
		//*  50  110:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  51  113:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//*  52  116:lcmp            
		//*  53  117:ifne            122
						flag = true;
		//   54  120:iconst_1        
		//   55  121:istore_2        
					return flag;
		//   56  122:iload_2         
		//   57  123:ireturn         
				} else
				{
					return true;
		//   58  124:iconst_1        
		//   59  125:ireturn         
				}
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
		//   60  126:new             #199 <Class StringBuilder>
		//   61  129:dup             
		//   62  130:invokespecial   #200 <Method void StringBuilder()>
		//   63  133:astore          4
				stringbuilder.append("Inconsistency detected. Invalid view holder adapter position");
		//   64  135:aload           4
		//   65  137:ldc2            #658 <String "Inconsistency detected. Invalid view holder adapter position">
		//   66  140:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   67  143:pop             
				stringbuilder.append(((Object) (viewholder)));
		//   68  144:aload           4
		//   69  146:aload_1         
		//   70  147:invokevirtual   #400 <Method StringBuilder StringBuilder.append(Object)>
		//   71  150:pop             
				stringbuilder.append(exceptionLabel());
		//   72  151:aload           4
		//   73  153:aload_0         
		//   74  154:getfield        #30  <Field RecyclerView this$0>
		//   75  157:invokevirtual   #210 <Method String RecyclerView.exceptionLabel()>
		//   76  160:invokevirtual   #206 <Method StringBuilder StringBuilder.append(String)>
		//   77  163:pop             
				throw new IndexOutOfBoundsException(stringbuilder.toString());
		//   78  164:new             #285 <Class IndexOutOfBoundsException>
		//   79  167:dup             
		//   80  168:aload           4
		//   81  170:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   82  173:invokespecial   #286 <Method void IndexOutOfBoundsException(String)>
		//   83  176:athrow          
			}
		}

		void viewRangeUpdate(int i, int j)
		{
			for(int k = mCachedViews.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            74
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   14:aload_0         
		//    9   15:getfield        #42  <Field ArrayList mCachedViews>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   25:astore          5
				if(viewholder == null)
		//*  14   27:aload           5
		//*  15   29:ifnonnull       35
					continue;
		//   16   32:goto            67
				int l = viewholder.mPosition;
		//   17   35:aload           5
		//   18   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//   19   40:istore          4
				if(l >= i && l < j + i)
		//*  20   42:iload           4
		//*  21   44:iload_1         
		//*  22   45:icmplt          67
		//*  23   48:iload           4
		//*  24   50:iload_2         
		//*  25   51:iload_1         
		//*  26   52:iadd            
		//*  27   53:icmpge          67
				{
					viewholder.addFlags(2);
		//   28   56:aload           5
		//   29   58:iconst_2        
		//   30   59:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					recycleCachedViewAt(k);
		//   31   62:aload_0         
		//   32   63:iload_3         
		//   33   64:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
				}
			}

		//   34   67:iload_3         
		//   35   68:iconst_1        
		//   36   69:isub            
		//   37   70:istore_3        
		//*  38   71:goto            10
		//   39   74:return          
		}

		static final int DEFAULT_CACHE_SIZE = 2;
		final ArrayList mAttachedScrap = new ArrayList();
		final ArrayList mCachedViews = new ArrayList();
		ArrayList mChangedScrap;
		RecycledViewPool mRecyclerPool;
		private int mRequestedCacheMax;
		private final List mUnmodifiableAttachedScrap;
		private ViewCacheExtension mViewCacheExtension;
		int mViewCacheMax;
		final RecyclerView this$0;

		public Recycler()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #30  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #33  <Method void Object()>
		//    5    9:aload_0         
		//    6   10:new             #35  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #36  <Method void ArrayList()>
		//    9   17:putfield        #38  <Field ArrayList mAttachedScrap>
			mChangedScrap = null;
		//   10   20:aload_0         
		//   11   21:aconst_null     
		//   12   22:putfield        #40  <Field ArrayList mChangedScrap>
		//   13   25:aload_0         
		//   14   26:new             #35  <Class ArrayList>
		//   15   29:dup             
		//   16   30:invokespecial   #36  <Method void ArrayList()>
		//   17   33:putfield        #42  <Field ArrayList mCachedViews>
			mUnmodifiableAttachedScrap = Collections.unmodifiableList(((List) (mAttachedScrap)));
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   41:invokestatic    #48  <Method List Collections.unmodifiableList(List)>
		//   22   44:putfield        #50  <Field List mUnmodifiableAttachedScrap>
			mRequestedCacheMax = 2;
		//   23   47:aload_0         
		//   24   48:iconst_2        
		//   25   49:putfield        #52  <Field int mRequestedCacheMax>
			mViewCacheMax = 2;
		//   26   52:aload_0         
		//   27   53:iconst_2        
		//   28   54:putfield        #54  <Field int mViewCacheMax>
		//   29   57:return          
		}
	}

	public static interface RecyclerListener
	{

		public abstract void onViewRecycled(ViewHolder viewholder);
	}

	private class RecyclerViewDataObserver extends AdapterDataObserver
	{

		public void onChanged()
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			mState.mStructureChanged = true;
		//    4    8:aload_0         
		//    5    9:getfield        #13  <Field RecyclerView this$0>
		//    6   12:getfield        #26  <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iconst_1        
		//    8   16:putfield        #32  <Field boolean RecyclerView$State.mStructureChanged>
			processDataSetCompletelyChanged(true);
		//    9   19:aload_0         
		//   10   20:getfield        #13  <Field RecyclerView this$0>
		//   11   23:iconst_1        
		//   12   24:invokevirtual   #36  <Method void RecyclerView.processDataSetCompletelyChanged(boolean)>
			if(!mAdapterHelper.hasPendingUpdates())
		//*  13   27:aload_0         
		//*  14   28:getfield        #13  <Field RecyclerView this$0>
		//*  15   31:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*  16   34:invokevirtual   #46  <Method boolean AdapterHelper.hasPendingUpdates()>
		//*  17   37:ifne            47
				requestLayout();
		//   18   40:aload_0         
		//   19   41:getfield        #13  <Field RecyclerView this$0>
		//   20   44:invokevirtual   #49  <Method void RecyclerView.requestLayout()>
		//   21   47:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeChanged(i, j, obj))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:aload_3         
		//*  10   18:invokevirtual   #54  <Method boolean AdapterHelper.onItemRangeChanged(int, int, Object)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeInserted(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #62  <Method boolean AdapterHelper.onItemRangeInserted(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeMoved(i, j, k))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:iload_3         
		//*  10   18:invokevirtual   #67  <Method boolean AdapterHelper.onItemRangeMoved(int, int, int)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeRemoved(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #40  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #70  <Method boolean AdapterHelper.onItemRangeRemoved(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #57  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		void triggerUpdateProcessor()
		{
			if(RecyclerView.POST_UPDATES_ON_ANIMATION && mHasFixedSize && mIsAttached)
		//*   0    0:getstatic       #73  <Field boolean RecyclerView.POST_UPDATES_ON_ANIMATION>
		//*   1    3:ifeq            41
		//*   2    6:aload_0         
		//*   3    7:getfield        #13  <Field RecyclerView this$0>
		//*   4   10:getfield        #76  <Field boolean RecyclerView.mHasFixedSize>
		//*   5   13:ifeq            41
		//*   6   16:aload_0         
		//*   7   17:getfield        #13  <Field RecyclerView this$0>
		//*   8   20:getfield        #79  <Field boolean RecyclerView.mIsAttached>
		//*   9   23:ifeq            41
			{
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), mUpdateChildViewsRunnable);
		//   10   26:aload_0         
		//   11   27:getfield        #13  <Field RecyclerView this$0>
		//   12   30:aload_0         
		//   13   31:getfield        #13  <Field RecyclerView this$0>
		//   14   34:getfield        #83  <Field Runnable RecyclerView.mUpdateChildViewsRunnable>
		//   15   37:invokestatic    #89  <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   40:return          
			} else
			{
				mAdapterUpdateDuringMeasure = true;
		//   17   41:aload_0         
		//   18   42:getfield        #13  <Field RecyclerView this$0>
		//   19   45:iconst_1        
		//   20   46:putfield        #92  <Field boolean RecyclerView.mAdapterUpdateDuringMeasure>
				requestLayout();
		//   21   49:aload_0         
		//   22   50:getfield        #13  <Field RecyclerView this$0>
		//   23   53:invokevirtual   #49  <Method void RecyclerView.requestLayout()>
				return;
		//   24   56:return          
			}
		}

		final RecyclerView this$0;

		RecyclerViewDataObserver()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #13  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #16  <Method void RecyclerView$AdapterDataObserver()>
		//    5    9:return          
		}
	}

	public static class SavedState extends AbsSavedState
	{

		void copyFrom(SavedState savedstate)
		{
			mLayoutState = savedstate.mLayoutState;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:getfield        #45  <Field Parcelable mLayoutState>
		//    3    5:putfield        #45  <Field Parcelable mLayoutState>
		//    4    8:return          
		}

		public void writeToParcel(Parcel parcel, int i)
		{
			super.writeToParcel(parcel, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #54  <Method void AbsSavedState.writeToParcel(Parcel, int)>
			parcel.writeParcelable(mLayoutState, 0);
		//    4    6:aload_1         
		//    5    7:aload_0         
		//    6    8:getfield        #45  <Field Parcelable mLayoutState>
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #58  <Method void Parcel.writeParcelable(Parcelable, int)>
		//    9   15:return          
		}

		public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.ClassLoaderCreator() {

			public SavedState createFromParcel(Parcel parcel)
			{
				return new SavedState(parcel, ((ClassLoader) (null)));
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aconst_null     
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public SavedState createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return new SavedState(parcel, classloader);
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel)
			{
				return ((Object) (createFromParcel(parcel)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #26  <Method RecyclerView$SavedState createFromParcel(Parcel)>
			//    3    5:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return ((Object) (createFromParcel(parcel, classloader)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:aload_2         
			//    3    3:invokevirtual   #29  <Method RecyclerView$SavedState createFromParcel(Parcel, ClassLoader)>
			//    4    6:areturn         
			}

			public SavedState[] newArray(int i)
			{
				return new SavedState[i];
			//    0    0:iload_1         
			//    1    1:anewarray       SavedState[]
			//    2    4:areturn         
			}

			public volatile Object[] newArray(int i)
			{
				return ((Object []) (newArray(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #34  <Method RecyclerView$SavedState[] newArray(int)>
			//    3    5:areturn         
			}

		}
;
		Parcelable mLayoutState;

		static 
		{
		//    0    0:new             #9   <Class RecyclerView$SavedState$1>
		//    1    3:dup             
		//    2    4:invokespecial   #23  <Method void RecyclerView$SavedState$1()>
		//    3    7:putstatic       #25  <Field android.os.Parcelable$Creator CREATOR>
		//*   4   10:return          
		}

		SavedState(Parcel parcel, ClassLoader classloader)
		{
			super(parcel, classloader);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #29  <Method void AbsSavedState(Parcel, ClassLoader)>
			if(classloader == null)
		//*   4    6:aload_2         
		//*   5    7:ifnull          13
		//*   6   10:goto            19
				classloader = ((Class) (android/support/v7/widget/RecyclerView$LayoutManager)).getClassLoader();
		//    7   13:ldc1            #31  <Class RecyclerView$LayoutManager>
		//    8   15:invokevirtual   #37  <Method ClassLoader Class.getClassLoader()>
		//    9   18:astore_2        
			mLayoutState = parcel.readParcelable(classloader);
		//   10   19:aload_0         
		//   11   20:aload_1         
		//   12   21:aload_2         
		//   13   22:invokevirtual   #43  <Method Parcelable Parcel.readParcelable(ClassLoader)>
		//   14   25:putfield        #45  <Field Parcelable mLayoutState>
		//   15   28:return          
		}

		SavedState(Parcelable parcelable)
		{
			super(parcelable);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #48  <Method void AbsSavedState(Parcelable)>
		//    3    5:return          
		}
	}

	public static class SimpleOnItemTouchListener
		implements OnItemTouchListener
	{

		public boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onRequestDisallowInterceptTouchEvent(boolean flag)
		{
		//    0    0:return          
		}

		public void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
		//    0    0:return          
		}

		public SimpleOnItemTouchListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #13  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class SmoothScroller
	{

		private void onAnimation(int i, int j)
		{
			RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:astore          4
			if(!mRunning || mTargetPosition == -1 || recyclerview == null)
		//*   3    6:aload_0         
		//*   4    7:getfield        #47  <Field boolean mRunning>
		//*   5   10:ifeq            26
		//*   6   13:aload_0         
		//*   7   14:getfield        #32  <Field int mTargetPosition>
		//*   8   17:iconst_m1       
		//*   9   18:icmpeq          26
		//*  10   21:aload           4
		//*  11   23:ifnonnull       30
				stop();
		//   12   26:aload_0         
		//   13   27:invokevirtual   #50  <Method void stop()>
			mPendingInitialRun = false;
		//   14   30:aload_0         
		//   15   31:iconst_0        
		//   16   32:putfield        #52  <Field boolean mPendingInitialRun>
			if(mTargetView != null)
		//*  17   35:aload_0         
		//*  18   36:getfield        #54  <Field View mTargetView>
		//*  19   39:ifnull          103
				if(getChildPosition(mTargetView) == mTargetPosition)
		//*  20   42:aload_0         
		//*  21   43:aload_0         
		//*  22   44:getfield        #54  <Field View mTargetView>
		//*  23   47:invokevirtual   #58  <Method int getChildPosition(View)>
		//*  24   50:aload_0         
		//*  25   51:getfield        #32  <Field int mTargetPosition>
		//*  26   54:icmpne          90
				{
					onTargetFound(mTargetView, recyclerview.mState, mRecyclingAction);
		//   27   57:aload_0         
		//   28   58:aload_0         
		//   29   59:getfield        #54  <Field View mTargetView>
		//   30   62:aload           4
		//   31   64:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   32   67:aload_0         
		//   33   68:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   34   71:invokevirtual   #66  <Method void onTargetFound(View, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
					mRecyclingAction.runIfNecessary(recyclerview);
		//   35   74:aload_0         
		//   36   75:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   37   78:aload           4
		//   38   80:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
					stop();
		//   39   83:aload_0         
		//   40   84:invokevirtual   #50  <Method void stop()>
				} else
		//*  41   87:goto            103
				{
					Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
		//   42   90:ldc1            #72  <String "RecyclerView">
		//   43   92:ldc1            #74  <String "Passed over target position while smooth scrolling.">
		//   44   94:invokestatic    #80  <Method int Log.e(String, String)>
		//   45   97:pop             
					mTargetView = null;
		//   46   98:aload_0         
		//   47   99:aconst_null     
		//   48  100:putfield        #54  <Field View mTargetView>
				}
			if(mRunning)
		//*  49  103:aload_0         
		//*  50  104:getfield        #47  <Field boolean mRunning>
		//*  51  107:ifeq            171
			{
				onSeekTargetStep(i, j, recyclerview.mState, mRecyclingAction);
		//   52  110:aload_0         
		//   53  111:iload_1         
		//   54  112:iload_2         
		//   55  113:aload           4
		//   56  115:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   57  118:aload_0         
		//   58  119:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   59  122:invokevirtual   #84  <Method void onSeekTargetStep(int, int, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
				boolean flag = mRecyclingAction.hasJumpTarget();
		//   60  125:aload_0         
		//   61  126:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   62  129:invokevirtual   #88  <Method boolean RecyclerView$SmoothScroller$Action.hasJumpTarget()>
		//   63  132:istore_3        
				mRecyclingAction.runIfNecessary(recyclerview);
		//   64  133:aload_0         
		//   65  134:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   66  137:aload           4
		//   67  139:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
				if(flag)
		//*  68  142:iload_3         
		//*  69  143:ifeq            171
				{
					if(mRunning)
		//*  70  146:aload_0         
		//*  71  147:getfield        #47  <Field boolean mRunning>
		//*  72  150:ifeq            167
					{
						mPendingInitialRun = true;
		//   73  153:aload_0         
		//   74  154:iconst_1        
		//   75  155:putfield        #52  <Field boolean mPendingInitialRun>
						recyclerview.mViewFlinger.postOnAnimation();
		//   76  158:aload           4
		//   77  160:getfield        #92  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   78  163:invokevirtual   #97  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
						return;
		//   79  166:return          
					}
					stop();
		//   80  167:aload_0         
		//   81  168:invokevirtual   #50  <Method void stop()>
				}
			}
		//   82  171:return          
		}

		public View findViewByPosition(int i)
		{
			return mRecyclerView.mLayout.findViewByPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:iload_1         
		//    4    8:invokevirtual   #106 <Method View RecyclerView$LayoutManager.findViewByPosition(int)>
		//    5   11:areturn         
		}

		public int getChildCount()
		{
			return mRecyclerView.mLayout.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:invokevirtual   #110 <Method int RecyclerView$LayoutManager.getChildCount()>
		//    4   10:ireturn         
		}

		public int getChildPosition(View view)
		{
			return mRecyclerView.getChildLayoutPosition(view);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #113 <Method int RecyclerView.getChildLayoutPosition(View)>
		//    4    8:ireturn         
		}

		public LayoutManager getLayoutManager()
		{
			return mLayoutManager;
		//    0    0:aload_0         
		//    1    1:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//    2    4:areturn         
		}

		public int getTargetPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #32  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public void instantScrollToPosition(int i)
		{
			mRecyclerView.scrollToPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #126 <Method void RecyclerView.scrollToPosition(int)>
		//    4    8:return          
		}

		public boolean isPendingInitialRun()
		{
			return mPendingInitialRun;
		//    0    0:aload_0         
		//    1    1:getfield        #52  <Field boolean mPendingInitialRun>
		//    2    4:ireturn         
		}

		public boolean isRunning()
		{
			return mRunning;
		//    0    0:aload_0         
		//    1    1:getfield        #47  <Field boolean mRunning>
		//    2    4:ireturn         
		}

		protected void normalize(PointF pointf)
		{
			float f = (float)Math.sqrt(pointf.x * pointf.x + pointf.y * pointf.y);
		//    0    0:aload_1         
		//    1    1:getfield        #137 <Field float PointF.x>
		//    2    4:aload_1         
		//    3    5:getfield        #137 <Field float PointF.x>
		//    4    8:fmul            
		//    5    9:aload_1         
		//    6   10:getfield        #140 <Field float PointF.y>
		//    7   13:aload_1         
		//    8   14:getfield        #140 <Field float PointF.y>
		//    9   17:fmul            
		//   10   18:fadd            
		//   11   19:f2d             
		//   12   20:invokestatic    #146 <Method double Math.sqrt(double)>
		//   13   23:d2f             
		//   14   24:fstore_2        
			pointf.x = pointf.x / f;
		//   15   25:aload_1         
		//   16   26:aload_1         
		//   17   27:getfield        #137 <Field float PointF.x>
		//   18   30:fload_2         
		//   19   31:fdiv            
		//   20   32:putfield        #137 <Field float PointF.x>
			pointf.y = pointf.y / f;
		//   21   35:aload_1         
		//   22   36:aload_1         
		//   23   37:getfield        #140 <Field float PointF.y>
		//   24   40:fload_2         
		//   25   41:fdiv            
		//   26   42:putfield        #140 <Field float PointF.y>
		//   27   45:return          
		}

		protected void onChildAttachedToWindow(View view)
		{
			if(getChildPosition(view) == getTargetPosition())
		//*   0    0:aload_0         
		//*   1    1:aload_1         
		//*   2    2:invokevirtual   #58  <Method int getChildPosition(View)>
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #150 <Method int getTargetPosition()>
		//*   5    9:icmpne          17
				mTargetView = view;
		//    6   12:aload_0         
		//    7   13:aload_1         
		//    8   14:putfield        #54  <Field View mTargetView>
		//    9   17:return          
		}

		protected abstract void onSeekTargetStep(int i, int j, State state, Action action);

		protected abstract void onStart();

		protected abstract void onStop();

		protected abstract void onTargetFound(View view, State state, Action action);

		public void setTargetPosition(int i)
		{
			mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #32  <Field int mTargetPosition>
		//    3    5:return          
		}

		void start(RecyclerView recyclerview, LayoutManager layoutmanager)
		{
			mRecyclerView = recyclerview;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #45  <Field RecyclerView mRecyclerView>
			mLayoutManager = layoutmanager;
		//    3    5:aload_0         
		//    4    6:aload_2         
		//    5    7:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
			if(mTargetPosition == -1)
		//*   6   10:aload_0         
		//*   7   11:getfield        #32  <Field int mTargetPosition>
		//*   8   14:iconst_m1       
		//*   9   15:icmpne          28
			{
				throw new IllegalArgumentException("Invalid target position");
		//   10   18:new             #157 <Class IllegalArgumentException>
		//   11   21:dup             
		//   12   22:ldc1            #159 <String "Invalid target position">
		//   13   24:invokespecial   #162 <Method void IllegalArgumentException(String)>
		//   14   27:athrow          
			} else
			{
				mRecyclerView.mState.mTargetPosition = mTargetPosition;
		//   15   28:aload_0         
		//   16   29:getfield        #45  <Field RecyclerView mRecyclerView>
		//   17   32:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   18   35:aload_0         
		//   19   36:getfield        #32  <Field int mTargetPosition>
		//   20   39:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   21   42:pop             
				mRunning = true;
		//   22   43:aload_0         
		//   23   44:iconst_1        
		//   24   45:putfield        #47  <Field boolean mRunning>
				mPendingInitialRun = true;
		//   25   48:aload_0         
		//   26   49:iconst_1        
		//   27   50:putfield        #52  <Field boolean mPendingInitialRun>
				mTargetView = findViewByPosition(getTargetPosition());
		//   28   53:aload_0         
		//   29   54:aload_0         
		//   30   55:aload_0         
		//   31   56:invokevirtual   #150 <Method int getTargetPosition()>
		//   32   59:invokevirtual   #169 <Method View findViewByPosition(int)>
		//   33   62:putfield        #54  <Field View mTargetView>
				onStart();
		//   34   65:aload_0         
		//   35   66:invokevirtual   #171 <Method void onStart()>
				mRecyclerView.mViewFlinger.postOnAnimation();
		//   36   69:aload_0         
		//   37   70:getfield        #45  <Field RecyclerView mRecyclerView>
		//   38   73:getfield        #92  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   39   76:invokevirtual   #97  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
				return;
		//   40   79:return          
			}
		}

		protected final void stop()
		{
			if(!mRunning)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field boolean mRunning>
		//*   2    4:ifne            8
			{
				return;
		//    3    7:return          
			} else
			{
				mRunning = false;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #47  <Field boolean mRunning>
				onStop();
		//    7   13:aload_0         
		//    8   14:invokevirtual   #173 <Method void onStop()>
				mRecyclerView.mState.mTargetPosition = -1;
		//    9   17:aload_0         
		//   10   18:getfield        #45  <Field RecyclerView mRecyclerView>
		//   11   21:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   12   24:iconst_m1       
		//   13   25:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   14   28:pop             
				mTargetView = null;
		//   15   29:aload_0         
		//   16   30:aconst_null     
		//   17   31:putfield        #54  <Field View mTargetView>
				mTargetPosition = -1;
		//   18   34:aload_0         
		//   19   35:iconst_m1       
		//   20   36:putfield        #32  <Field int mTargetPosition>
				mPendingInitialRun = false;
		//   21   39:aload_0         
		//   22   40:iconst_0        
		//   23   41:putfield        #52  <Field boolean mPendingInitialRun>
				mLayoutManager.onSmoothScrollerStopped(this);
		//   24   44:aload_0         
		//   25   45:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//   26   48:aload_0         
		//   27   49:invokestatic    #177 <Method void RecyclerView$LayoutManager.access$1400(RecyclerView$LayoutManager, RecyclerView$SmoothScroller)>
				mLayoutManager = null;
		//   28   52:aload_0         
		//   29   53:aconst_null     
		//   30   54:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
				mRecyclerView = null;
		//   31   57:aload_0         
		//   32   58:aconst_null     
		//   33   59:putfield        #45  <Field RecyclerView mRecyclerView>
				return;
		//   34   62:return          
			}
		}

		private LayoutManager mLayoutManager;
		private boolean mPendingInitialRun;
		private RecyclerView mRecyclerView;
		private final Action mRecyclingAction = new Action(0, 0);
		private boolean mRunning;
		private int mTargetPosition;
		private View mTargetView;


/*
		static void access$600(SmoothScroller smoothscroller, int i, int j)
		{
			smoothscroller.onAnimation(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #43  <Method void onAnimation(int, int)>
			return;
		//    4    6:return          
		}

*/

		public SmoothScroller()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #30  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #32  <Field int mTargetPosition>
		//    5    9:aload_0         
		//    6   10:new             #9   <Class RecyclerView$SmoothScroller$Action>
		//    7   13:dup             
		//    8   14:iconst_0        
		//    9   15:iconst_0        
		//   10   16:invokespecial   #35  <Method void RecyclerView$SmoothScroller$Action(int, int)>
		//   11   19:putfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   12   22:return          
		}
	}

	public static class SmoothScroller.Action
	{

		private void validate()
		{
			if(mInterpolator != null && mDuration < 1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #46  <Field Interpolator mInterpolator>
		//*   2    4:ifnull          25
		//*   3    7:aload_0         
		//*   4    8:getfield        #44  <Field int mDuration>
		//*   5   11:iconst_1        
		//*   6   12:icmpge          25
				throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
		//    7   15:new             #49  <Class IllegalStateException>
		//    8   18:dup             
		//    9   19:ldc1            #51  <String "If you provide an interpolator, you must set a positive duration">
		//   10   21:invokespecial   #54  <Method void IllegalStateException(String)>
		//   11   24:athrow          
			if(mDuration < 1)
		//*  12   25:aload_0         
		//*  13   26:getfield        #44  <Field int mDuration>
		//*  14   29:iconst_1        
		//*  15   30:icmpge          43
				throw new IllegalStateException("Scroll duration must be a positive number");
		//   16   33:new             #49  <Class IllegalStateException>
		//   17   36:dup             
		//   18   37:ldc1            #56  <String "Scroll duration must be a positive number">
		//   19   39:invokespecial   #54  <Method void IllegalStateException(String)>
		//   20   42:athrow          
			else
				return;
		//   21   43:return          
		}

		public int getDuration()
		{
			return mDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mDuration>
		//    2    4:ireturn         
		}

		public int getDx()
		{
			return mDx;
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field int mDx>
		//    2    4:ireturn         
		}

		public int getDy()
		{
			return mDy;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field int mDy>
		//    2    4:ireturn         
		}

		public Interpolator getInterpolator()
		{
			return mInterpolator;
		//    0    0:aload_0         
		//    1    1:getfield        #46  <Field Interpolator mInterpolator>
		//    2    4:areturn         
		}

		boolean hasJumpTarget()
		{
			return mJumpToPosition >= 0;
		//    0    0:aload_0         
		//    1    1:getfield        #34  <Field int mJumpToPosition>
		//    2    4:iflt            9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		public void jumpTo(int i)
		{
			mJumpToPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #34  <Field int mJumpToPosition>
		//    3    5:return          
		}

		void runIfNecessary(RecyclerView recyclerview)
		{
			if(mJumpToPosition >= 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #34  <Field int mJumpToPosition>
		//*   2    4:iflt            28
			{
				int i = mJumpToPosition;
		//    3    7:aload_0         
		//    4    8:getfield        #34  <Field int mJumpToPosition>
		//    5   11:istore_2        
				mJumpToPosition = -1;
		//    6   12:aload_0         
		//    7   13:iconst_m1       
		//    8   14:putfield        #34  <Field int mJumpToPosition>
				recyclerview.jumpToPositionForSmoothScroller(i);
		//    9   17:aload_1         
		//   10   18:iload_2         
		//   11   19:invokevirtual   #71  <Method void RecyclerView.jumpToPositionForSmoothScroller(int)>
				mChanged = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #36  <Field boolean mChanged>
				return;
		//   15   27:return          
			}
			if(mChanged)
		//*  16   28:aload_0         
		//*  17   29:getfield        #36  <Field boolean mChanged>
		//*  18   32:ifeq            151
			{
				validate();
		//   19   35:aload_0         
		//   20   36:invokespecial   #73  <Method void validate()>
				if(mInterpolator == null)
		//*  21   39:aload_0         
		//*  22   40:getfield        #46  <Field Interpolator mInterpolator>
		//*  23   43:ifnonnull       95
				{
					if(mDuration == 0x80000000)
		//*  24   46:aload_0         
		//*  25   47:getfield        #44  <Field int mDuration>
		//*  26   50:ldc1            #13  <Int 0x80000000>
		//*  27   52:icmpne          73
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy);
		//   28   55:aload_1         
		//   29   56:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   30   59:aload_0         
		//   31   60:getfield        #40  <Field int mDx>
		//   32   63:aload_0         
		//   33   64:getfield        #42  <Field int mDy>
		//   34   67:invokevirtual   #82  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int)>
					else
		//*  35   70:goto            118
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration);
		//   36   73:aload_1         
		//   37   74:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   38   77:aload_0         
		//   39   78:getfield        #40  <Field int mDx>
		//   40   81:aload_0         
		//   41   82:getfield        #42  <Field int mDy>
		//   42   85:aload_0         
		//   43   86:getfield        #44  <Field int mDuration>
		//   44   89:invokevirtual   #84  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int)>
				} else
		//*  45   92:goto            118
				{
					recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration, mInterpolator);
		//   46   95:aload_1         
		//   47   96:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   48   99:aload_0         
		//   49  100:getfield        #40  <Field int mDx>
		//   50  103:aload_0         
		//   51  104:getfield        #42  <Field int mDy>
		//   52  107:aload_0         
		//   53  108:getfield        #44  <Field int mDuration>
		//   54  111:aload_0         
		//   55  112:getfield        #46  <Field Interpolator mInterpolator>
		//   56  115:invokevirtual   #86  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int, Interpolator)>
				}
				mConsecutiveUpdates = mConsecutiveUpdates + 1;
		//   57  118:aload_0         
		//   58  119:aload_0         
		//   59  120:getfield        #38  <Field int mConsecutiveUpdates>
		//   60  123:iconst_1        
		//   61  124:iadd            
		//   62  125:putfield        #38  <Field int mConsecutiveUpdates>
				if(mConsecutiveUpdates > 10)
		//*  63  128:aload_0         
		//*  64  129:getfield        #38  <Field int mConsecutiveUpdates>
		//*  65  132:bipush          10
		//*  66  134:icmple          145
					Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
		//   67  137:ldc1            #88  <String "RecyclerView">
		//   68  139:ldc1            #90  <String "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary">
		//   69  141:invokestatic    #96  <Method int Log.e(String, String)>
		//   70  144:pop             
				mChanged = false;
		//   71  145:aload_0         
		//   72  146:iconst_0        
		//   73  147:putfield        #36  <Field boolean mChanged>
				return;
		//   74  150:return          
			} else
			{
				mConsecutiveUpdates = 0;
		//   75  151:aload_0         
		//   76  152:iconst_0        
		//   77  153:putfield        #38  <Field int mConsecutiveUpdates>
				return;
		//   78  156:return          
			}
		}

		public void setDuration(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDuration = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #44  <Field int mDuration>
		//    6   10:return          
		}

		public void setDx(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDx = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #40  <Field int mDx>
		//    6   10:return          
		}

		public void setDy(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDy = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #42  <Field int mDy>
		//    6   10:return          
		}

		public void setInterpolator(Interpolator interpolator)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mInterpolator = interpolator;
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:putfield        #46  <Field Interpolator mInterpolator>
		//    6   10:return          
		}

		public void update(int i, int j, int k, Interpolator interpolator)
		{
			mDx = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #40  <Field int mDx>
			mDy = j;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #42  <Field int mDy>
			mDuration = k;
		//    6   10:aload_0         
		//    7   11:iload_3         
		//    8   12:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//    9   15:aload_0         
		//   10   16:aload           4
		//   11   18:putfield        #46  <Field Interpolator mInterpolator>
			mChanged = true;
		//   12   21:aload_0         
		//   13   22:iconst_1        
		//   14   23:putfield        #36  <Field boolean mChanged>
		//   15   26:return          
		}

		public static final int UNDEFINED_DURATION = 0x80000000;
		private boolean mChanged;
		private int mConsecutiveUpdates;
		private int mDuration;
		private int mDx;
		private int mDy;
		private Interpolator mInterpolator;
		private int mJumpToPosition;

		public SmoothScroller.Action(int i, int j)
		{
			this(i, j, 0x80000000, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc1            #13  <Int 0x80000000>
		//    4    5:aconst_null     
		//    5    6:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    9:return          
		}

		public SmoothScroller.Action(int i, int j, int k)
		{
			this(i, j, k, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:aconst_null     
		//    5    5:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    8:return          
		}

		public SmoothScroller.Action(int i, int j, int k, Interpolator interpolator)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #32  <Method void Object()>
			mJumpToPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #34  <Field int mJumpToPosition>
			mChanged = false;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #36  <Field boolean mChanged>
			mConsecutiveUpdates = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #38  <Field int mConsecutiveUpdates>
			mDx = i;
		//   11   19:aload_0         
		//   12   20:iload_1         
		//   13   21:putfield        #40  <Field int mDx>
			mDy = j;
		//   14   24:aload_0         
		//   15   25:iload_2         
		//   16   26:putfield        #42  <Field int mDy>
			mDuration = k;
		//   17   29:aload_0         
		//   18   30:iload_3         
		//   19   31:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//   20   34:aload_0         
		//   21   35:aload           4
		//   22   37:putfield        #46  <Field Interpolator mInterpolator>
		//   23   40:return          
		}
	}

	public static interface SmoothScroller.ScrollVectorProvider
	{

		public abstract PointF computeScrollVectorForPosition(int i);
	}

	public static class State
	{

		void assertLayoutStep(int i)
		{
			if((mLayoutStep & i) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #50  <Field int mLayoutStep>
		//*   2    4:iload_1         
		//*   3    5:iand            
		//*   4    6:ifne            64
			{
				StringBuilder stringbuilder = new StringBuilder();
		//    5    9:new             #71  <Class StringBuilder>
		//    6   12:dup             
		//    7   13:invokespecial   #72  <Method void StringBuilder()>
		//    8   16:astore_2        
				stringbuilder.append("Layout state should be one of ");
		//    9   17:aload_2         
		//   10   18:ldc1            #74  <String "Layout state should be one of ">
		//   11   20:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   12   23:pop             
				stringbuilder.append(Integer.toBinaryString(i));
		//   13   24:aload_2         
		//   14   25:iload_1         
		//   15   26:invokestatic    #84  <Method String Integer.toBinaryString(int)>
		//   16   29:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   17   32:pop             
				stringbuilder.append(" but it is ");
		//   18   33:aload_2         
		//   19   34:ldc1            #86  <String " but it is ">
		//   20   36:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   21   39:pop             
				stringbuilder.append(Integer.toBinaryString(mLayoutStep));
		//   22   40:aload_2         
		//   23   41:aload_0         
		//   24   42:getfield        #50  <Field int mLayoutStep>
		//   25   45:invokestatic    #84  <Method String Integer.toBinaryString(int)>
		//   26   48:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   27   51:pop             
				throw new IllegalStateException(stringbuilder.toString());
		//   28   52:new             #88  <Class IllegalStateException>
		//   29   55:dup             
		//   30   56:aload_2         
		//   31   57:invokevirtual   #92  <Method String StringBuilder.toString()>
		//   32   60:invokespecial   #95  <Method void IllegalStateException(String)>
		//   33   63:athrow          
			} else
			{
				return;
		//   34   64:return          
			}
		}

		public boolean didStructureChange()
		{
			return mStructureChanged;
		//    0    0:aload_0         
		//    1    1:getfield        #54  <Field boolean mStructureChanged>
		//    2    4:ireturn         
		}

		public Object get(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       9
				return ((Object) (null));
		//    3    7:aconst_null     
		//    4    8:areturn         
			else
				return mData.get(i);
		//    5    9:aload_0         
		//    6   10:getfield        #101 <Field SparseArray mData>
		//    7   13:iload_1         
		//    8   14:invokevirtual   #105 <Method Object SparseArray.get(int)>
		//    9   17:areturn         
		}

		public int getItemCount()
		{
			if(mInPreLayout)
		//*   0    0:aload_0         
		//*   1    1:getfield        #56  <Field boolean mInPreLayout>
		//*   2    4:ifeq            17
				return mPreviousLayoutItemCount - mDeletedInvisibleItemCountSincePreviousLayout;
		//    3    7:aload_0         
		//    4    8:getfield        #46  <Field int mPreviousLayoutItemCount>
		//    5   11:aload_0         
		//    6   12:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//    7   15:isub            
		//    8   16:ireturn         
			else
				return mItemCount;
		//    9   17:aload_0         
		//   10   18:getfield        #52  <Field int mItemCount>
		//   11   21:ireturn         
		}

		public int getRemainingScrollHorizontal()
		{
			return mRemainingScrollHorizontal;
		//    0    0:aload_0         
		//    1    1:getfield        #112 <Field int mRemainingScrollHorizontal>
		//    2    4:ireturn         
		}

		public int getRemainingScrollVertical()
		{
			return mRemainingScrollVertical;
		//    0    0:aload_0         
		//    1    1:getfield        #115 <Field int mRemainingScrollVertical>
		//    2    4:ireturn         
		}

		public int getTargetScrollPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean hasTargetScrollPosition()
		{
			return mTargetPosition != -1;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:iconst_m1       
		//    3    5:icmpeq          10
		//    4    8:iconst_1        
		//    5    9:ireturn         
		//    6   10:iconst_0        
		//    7   11:ireturn         
		}

		public boolean isMeasuring()
		{
			return mIsMeasuring;
		//    0    0:aload_0         
		//    1    1:getfield        #60  <Field boolean mIsMeasuring>
		//    2    4:ireturn         
		}

		public boolean isPreLayout()
		{
			return mInPreLayout;
		//    0    0:aload_0         
		//    1    1:getfield        #56  <Field boolean mInPreLayout>
		//    2    4:ireturn         
		}

		void prepareForNestedPrefetch(Adapter adapter)
		{
			mLayoutStep = 1;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #50  <Field int mLayoutStep>
			mItemCount = adapter.getItemCount();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #125 <Method int RecyclerView$Adapter.getItemCount()>
		//    6   10:putfield        #52  <Field int mItemCount>
			mInPreLayout = false;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   10   18:aload_0         
		//   11   19:iconst_0        
		//   12   20:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   13   23:aload_0         
		//   14   24:iconst_0        
		//   15   25:putfield        #60  <Field boolean mIsMeasuring>
		//   16   28:return          
		}

		public void put(int i, Object obj)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       18
				mData = new SparseArray();
		//    3    7:aload_0         
		//    4    8:new             #103 <Class SparseArray>
		//    5   11:dup             
		//    6   12:invokespecial   #128 <Method void SparseArray()>
		//    7   15:putfield        #101 <Field SparseArray mData>
			mData.put(i, obj);
		//    8   18:aload_0         
		//    9   19:getfield        #101 <Field SparseArray mData>
		//   10   22:iload_1         
		//   11   23:aload_2         
		//   12   24:invokevirtual   #130 <Method void SparseArray.put(int, Object)>
		//   13   27:return          
		}

		public void remove(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       8
			{
				return;
		//    3    7:return          
			} else
			{
				mData.remove(i);
		//    4    8:aload_0         
		//    5    9:getfield        #101 <Field SparseArray mData>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #133 <Method void SparseArray.remove(int)>
				return;
		//    8   16:return          
			}
		}

		State reset()
		{
			mTargetPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #44  <Field int mTargetPosition>
			if(mData != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #101 <Field SparseArray mData>
		//*   5    9:ifnull          19
				mData.clear();
		//    6   12:aload_0         
		//    7   13:getfield        #101 <Field SparseArray mData>
		//    8   16:invokevirtual   #138 <Method void SparseArray.clear()>
			mItemCount = 0;
		//    9   19:aload_0         
		//   10   20:iconst_0        
		//   11   21:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   12   24:aload_0         
		//   13   25:iconst_0        
		//   14   26:putfield        #54  <Field boolean mStructureChanged>
			mIsMeasuring = false;
		//   15   29:aload_0         
		//   16   30:iconst_0        
		//   17   31:putfield        #60  <Field boolean mIsMeasuring>
			return this;
		//   18   34:aload_0         
		//   19   35:areturn         
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder();
		//    0    0:new             #71  <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #72  <Method void StringBuilder()>
		//    3    7:astore_1        
			stringbuilder.append("State{mTargetPosition=");
		//    4    8:aload_1         
		//    5    9:ldc1            #140 <String "State{mTargetPosition=">
		//    6   11:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//    7   14:pop             
			stringbuilder.append(mTargetPosition);
		//    8   15:aload_1         
		//    9   16:aload_0         
		//   10   17:getfield        #44  <Field int mTargetPosition>
		//   11   20:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   12   23:pop             
			stringbuilder.append(", mData=");
		//   13   24:aload_1         
		//   14   25:ldc1            #145 <String ", mData=">
		//   15   27:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   16   30:pop             
			stringbuilder.append(((Object) (mData)));
		//   17   31:aload_1         
		//   18   32:aload_0         
		//   19   33:getfield        #101 <Field SparseArray mData>
		//   20   36:invokevirtual   #148 <Method StringBuilder StringBuilder.append(Object)>
		//   21   39:pop             
			stringbuilder.append(", mItemCount=");
		//   22   40:aload_1         
		//   23   41:ldc1            #150 <String ", mItemCount=">
		//   24   43:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   25   46:pop             
			stringbuilder.append(mItemCount);
		//   26   47:aload_1         
		//   27   48:aload_0         
		//   28   49:getfield        #52  <Field int mItemCount>
		//   29   52:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   30   55:pop             
			stringbuilder.append(", mIsMeasuring=");
		//   31   56:aload_1         
		//   32   57:ldc1            #152 <String ", mIsMeasuring=">
		//   33   59:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   34   62:pop             
			stringbuilder.append(mIsMeasuring);
		//   35   63:aload_1         
		//   36   64:aload_0         
		//   37   65:getfield        #60  <Field boolean mIsMeasuring>
		//   38   68:invokevirtual   #155 <Method StringBuilder StringBuilder.append(boolean)>
		//   39   71:pop             
			stringbuilder.append(", mPreviousLayoutItemCount=");
		//   40   72:aload_1         
		//   41   73:ldc1            #157 <String ", mPreviousLayoutItemCount=">
		//   42   75:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   43   78:pop             
			stringbuilder.append(mPreviousLayoutItemCount);
		//   44   79:aload_1         
		//   45   80:aload_0         
		//   46   81:getfield        #46  <Field int mPreviousLayoutItemCount>
		//   47   84:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   48   87:pop             
			stringbuilder.append(", mDeletedInvisibleItemCountSincePreviousLayout=");
		//   49   88:aload_1         
		//   50   89:ldc1            #159 <String ", mDeletedInvisibleItemCountSincePreviousLayout=">
		//   51   91:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   52   94:pop             
			stringbuilder.append(mDeletedInvisibleItemCountSincePreviousLayout);
		//   53   95:aload_1         
		//   54   96:aload_0         
		//   55   97:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//   56  100:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   57  103:pop             
			stringbuilder.append(", mStructureChanged=");
		//   58  104:aload_1         
		//   59  105:ldc1            #161 <String ", mStructureChanged=">
		//   60  107:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   61  110:pop             
			stringbuilder.append(mStructureChanged);
		//   62  111:aload_1         
		//   63  112:aload_0         
		//   64  113:getfield        #54  <Field boolean mStructureChanged>
		//   65  116:invokevirtual   #155 <Method StringBuilder StringBuilder.append(boolean)>
		//   66  119:pop             
			stringbuilder.append(", mInPreLayout=");
		//   67  120:aload_1         
		//   68  121:ldc1            #163 <String ", mInPreLayout=">
		//   69  123:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   70  126:pop             
			stringbuilder.append(mInPreLayout);
		//   71  127:aload_1         
		//   72  128:aload_0         
		//   73  129:getfield        #56  <Field boolean mInPreLayout>
		//   74  132:invokevirtual   #155 <Method StringBuilder StringBuilder.append(boolean)>
		//   75  135:pop             
			stringbuilder.append(", mRunSimpleAnimations=");
		//   76  136:aload_1         
		//   77  137:ldc1            #165 <String ", mRunSimpleAnimations=">
		//   78  139:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   79  142:pop             
			stringbuilder.append(mRunSimpleAnimations);
		//   80  143:aload_1         
		//   81  144:aload_0         
		//   82  145:getfield        #62  <Field boolean mRunSimpleAnimations>
		//   83  148:invokevirtual   #155 <Method StringBuilder StringBuilder.append(boolean)>
		//   84  151:pop             
			stringbuilder.append(", mRunPredictiveAnimations=");
		//   85  152:aload_1         
		//   86  153:ldc1            #167 <String ", mRunPredictiveAnimations=">
		//   87  155:invokevirtual   #78  <Method StringBuilder StringBuilder.append(String)>
		//   88  158:pop             
			stringbuilder.append(mRunPredictiveAnimations);
		//   89  159:aload_1         
		//   90  160:aload_0         
		//   91  161:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//   92  164:invokevirtual   #155 <Method StringBuilder StringBuilder.append(boolean)>
		//   93  167:pop             
			stringbuilder.append('}');
		//   94  168:aload_1         
		//   95  169:bipush          125
		//   96  171:invokevirtual   #170 <Method StringBuilder StringBuilder.append(char)>
		//   97  174:pop             
			return stringbuilder.toString();
		//   98  175:aload_1         
		//   99  176:invokevirtual   #92  <Method String StringBuilder.toString()>
		//  100  179:areturn         
		}

		public boolean willRunPredictiveAnimations()
		{
			return mRunPredictiveAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//    2    4:ireturn         
		}

		public boolean willRunSimpleAnimations()
		{
			return mRunSimpleAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #62  <Field boolean mRunSimpleAnimations>
		//    2    4:ireturn         
		}

		static final int STEP_ANIMATIONS = 4;
		static final int STEP_LAYOUT = 2;
		static final int STEP_START = 1;
		private SparseArray mData;
		int mDeletedInvisibleItemCountSincePreviousLayout;
		long mFocusedItemId;
		int mFocusedItemPosition;
		int mFocusedSubChildId;
		boolean mInPreLayout;
		boolean mIsMeasuring;
		int mItemCount;
		int mLayoutStep;
		int mPreviousLayoutItemCount;
		int mRemainingScrollHorizontal;
		int mRemainingScrollVertical;
		boolean mRunPredictiveAnimations;
		boolean mRunSimpleAnimations;
		boolean mStructureChanged;
		private int mTargetPosition;
		boolean mTrackOldChangeHolders;


/*
		static int access$1302(State state, int i)
		{
			state.mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #44  <Field int mTargetPosition>
			return i;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/

		public State()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #42  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #44  <Field int mTargetPosition>
			mPreviousLayoutItemCount = 0;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #46  <Field int mPreviousLayoutItemCount>
			mDeletedInvisibleItemCountSincePreviousLayout = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
			mLayoutStep = 1;
		//   11   19:aload_0         
		//   12   20:iconst_1        
		//   13   21:putfield        #50  <Field int mLayoutStep>
			mItemCount = 0;
		//   14   24:aload_0         
		//   15   25:iconst_0        
		//   16   26:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   17   29:aload_0         
		//   18   30:iconst_0        
		//   19   31:putfield        #54  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   20   34:aload_0         
		//   21   35:iconst_0        
		//   22   36:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   23   39:aload_0         
		//   24   40:iconst_0        
		//   25   41:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   26   44:aload_0         
		//   27   45:iconst_0        
		//   28   46:putfield        #60  <Field boolean mIsMeasuring>
			mRunSimpleAnimations = false;
		//   29   49:aload_0         
		//   30   50:iconst_0        
		//   31   51:putfield        #62  <Field boolean mRunSimpleAnimations>
			mRunPredictiveAnimations = false;
		//   32   54:aload_0         
		//   33   55:iconst_0        
		//   34   56:putfield        #64  <Field boolean mRunPredictiveAnimations>
		//   35   59:return          
		}
	}

	static interface State.LayoutState
		extends Annotation
	{
	}

	public static abstract class ViewCacheExtension
	{

		public abstract View getViewForPositionAndType(Recycler recycler, int i, int j);

		public ViewCacheExtension()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	class ViewFlinger
		implements Runnable
	{

		private int computeScrollDuration(int i, int j, int k, int l)
		{
			int i1 = Math.abs(i);
		//    0    0:iload_1         
		//    1    1:invokestatic    #59  <Method int Math.abs(int)>
		//    2    4:istore          9
			int j1 = Math.abs(j);
		//    3    6:iload_2         
		//    4    7:invokestatic    #59  <Method int Math.abs(int)>
		//    5   10:istore          10
			boolean flag;
			if(i1 > j1)
		//*   6   12:iload           9
		//*   7   14:iload           10
		//*   8   16:icmple          25
				flag = true;
		//    9   19:iconst_1        
		//   10   20:istore          8
			else
		//*  11   22:goto            28
				flag = false;
		//   12   25:iconst_0        
		//   13   26:istore          8
			k = (int)Math.sqrt(k * k + l * l);
		//   14   28:iload_3         
		//   15   29:iload_3         
		//   16   30:imul            
		//   17   31:iload           4
		//   18   33:iload           4
		//   19   35:imul            
		//   20   36:iadd            
		//   21   37:i2d             
		//   22   38:invokestatic    #63  <Method double Math.sqrt(double)>
		//   23   41:d2i             
		//   24   42:istore_3        
			j = (int)Math.sqrt(i * i + j * j);
		//   25   43:iload_1         
		//   26   44:iload_1         
		//   27   45:imul            
		//   28   46:iload_2         
		//   29   47:iload_2         
		//   30   48:imul            
		//   31   49:iadd            
		//   32   50:i2d             
		//   33   51:invokestatic    #63  <Method double Math.sqrt(double)>
		//   34   54:d2i             
		//   35   55:istore_2        
			if(flag)
		//*  36   56:iload           8
		//*  37   58:ifeq            72
				i = getWidth();
		//   38   61:aload_0         
		//   39   62:getfield        #25  <Field RecyclerView this$0>
		//   40   65:invokevirtual   #67  <Method int RecyclerView.getWidth()>
		//   41   68:istore_1        
			else
		//*  42   69:goto            80
				i = getHeight();
		//   43   72:aload_0         
		//   44   73:getfield        #25  <Field RecyclerView this$0>
		//   45   76:invokevirtual   #70  <Method int RecyclerView.getHeight()>
		//   46   79:istore_1        
			l = i / 2;
		//   47   80:iload_1         
		//   48   81:iconst_2        
		//   49   82:idiv            
		//   50   83:istore          4
			float f1 = j;
		//   51   85:iload_2         
		//   52   86:i2f             
		//   53   87:fstore          6
			float f = i;
		//   54   89:iload_1         
		//   55   90:i2f             
		//   56   91:fstore          5
			float f2 = Math.min(1.0F, (f1 * 1.0F) / f);
		//   57   93:fconst_1        
		//   58   94:fload           6
		//   59   96:fconst_1        
		//   60   97:fmul            
		//   61   98:fload           5
		//   62  100:fdiv            
		//   63  101:invokestatic    #74  <Method float Math.min(float, float)>
		//   64  104:fstore          7
			f1 = l;
		//   65  106:iload           4
		//   66  108:i2f             
		//   67  109:fstore          6
			f2 = distanceInfluenceForSnapDuration(f2);
		//   68  111:aload_0         
		//   69  112:fload           7
		//   70  114:invokespecial   #78  <Method float distanceInfluenceForSnapDuration(float)>
		//   71  117:fstore          7
			if(k > 0)
		//*  72  119:iload_3         
		//*  73  120:ifle            149
			{
				i = 4 * Math.round(1000F * Math.abs((f1 + f2 * f1) / (float)k));
		//   74  123:iconst_4        
		//   75  124:ldc1            #79  <Float 1000F>
		//   76  126:fload           6
		//   77  128:fload           7
		//   78  130:fload           6
		//   79  132:fmul            
		//   80  133:fadd            
		//   81  134:iload_3         
		//   82  135:i2f             
		//   83  136:fdiv            
		//   84  137:invokestatic    #81  <Method float Math.abs(float)>
		//   85  140:fmul            
		//   86  141:invokestatic    #85  <Method int Math.round(float)>
		//   87  144:imul            
		//   88  145:istore_1        
			} else
		//*  89  146:goto            175
			{
				if(flag)
		//*  90  149:iload           8
		//*  91  151:ifeq            160
					i = i1;
		//   92  154:iload           9
		//   93  156:istore_1        
				else
		//*  94  157:goto            163
					i = j1;
		//   95  160:iload           10
		//   96  162:istore_1        
				i = (int)(((float)i / f + 1.0F) * 300F);
		//   97  163:iload_1         
		//   98  164:i2f             
		//   99  165:fload           5
		//  100  167:fdiv            
		//  101  168:fconst_1        
		//  102  169:fadd            
		//  103  170:ldc1            #86  <Float 300F>
		//  104  172:fmul            
		//  105  173:f2i             
		//  106  174:istore_1        
			}
			return Math.min(i, 2000);
		//  107  175:iload_1         
		//  108  176:sipush          2000
		//  109  179:invokestatic    #89  <Method int Math.min(int, int)>
		//  110  182:ireturn         
		}

		private void disableRunOnAnimationRequests()
		{
			mReSchedulePostAnimationCallback = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mEatRunOnAnimationRequest = true;
		//    3    5:aload_0         
		//    4    6:iconst_1        
		//    5    7:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//    6   10:return          
		}

		private float distanceInfluenceForSnapDuration(float f)
		{
			return (float)Math.sin((f - 0.5F) * 0.4712389F);
		//    0    0:fload_1         
		//    1    1:ldc1            #91  <Float 0.5F>
		//    2    3:fsub            
		//    3    4:ldc1            #92  <Float 0.4712389F>
		//    4    6:fmul            
		//    5    7:f2d             
		//    6    8:invokestatic    #95  <Method double Math.sin(double)>
		//    7   11:d2f             
		//    8   12:freturn         
		}

		private void enableRunOnAnimationRequests()
		{
			mEatRunOnAnimationRequest = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			if(mReSchedulePostAnimationCallback)
		//*   3    5:aload_0         
		//*   4    6:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//*   5    9:ifeq            16
				postOnAnimation();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #99  <Method void postOnAnimation()>
		//    8   16:return          
		}

		public void fling(int i, int j)
		{
			setScrollState(2);
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:iconst_2        
		//    3    5:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #109 <Field int mLastFlingX>
			mScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
		//   10   18:aload_0         
		//   11   19:getfield        #48  <Field OverScroller mScroller>
		//   12   22:iconst_0        
		//   13   23:iconst_0        
		//   14   24:iload_1         
		//   15   25:iload_2         
		//   16   26:ldc1            #110 <Int 0x80000000>
		//   17   28:ldc1            #111 <Int 0x7fffffff>
		//   18   30:ldc1            #110 <Int 0x80000000>
		//   19   32:ldc1            #111 <Int 0x7fffffff>
		//   20   34:invokevirtual   #114 <Method void OverScroller.fling(int, int, int, int, int, int, int, int)>
			postOnAnimation();
		//   21   37:aload_0         
		//   22   38:invokevirtual   #99  <Method void postOnAnimation()>
		//   23   41:return          
		}

		void postOnAnimation()
		{
			if(mEatRunOnAnimationRequest)
		//*   0    0:aload_0         
		//*   1    1:getfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//*   2    4:ifeq            13
			{
				mReSchedulePostAnimationCallback = true;
		//    3    7:aload_0         
		//    4    8:iconst_1        
		//    5    9:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
				return;
		//    6   12:return          
			} else
			{
				removeCallbacks(((Runnable) (this)));
		//    7   13:aload_0         
		//    8   14:getfield        #25  <Field RecyclerView this$0>
		//    9   17:aload_0         
		//   10   18:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//   11   21:pop             
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), ((Runnable) (this)));
		//   12   22:aload_0         
		//   13   23:getfield        #25  <Field RecyclerView this$0>
		//   14   26:aload_0         
		//   15   27:invokestatic    #123 <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   30:return          
			}
		}

		public void run()
		{
			SmoothScroller smoothscroller;
label0:
			{
				int i1;
				int j1;
				int k1;
				int i2;
				OverScroller overscroller;
label1:
				{
					int i;
					int j;
					int l1;
					int j2;
					int k2;
					int l2;
label2:
					{
						if(mLayout == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #25  <Field RecyclerView this$0>
		//*   2    4:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnonnull       15
						{
							stop();
		//    4   10:aload_0         
		//    5   11:invokevirtual   #131 <Method void stop()>
							return;
		//    6   14:return          
						}
						disableRunOnAnimationRequests();
		//    7   15:aload_0         
		//    8   16:invokespecial   #133 <Method void disableRunOnAnimationRequests()>
						consumePendingUpdateOperations();
		//    9   19:aload_0         
		//   10   20:getfield        #25  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #136 <Method void RecyclerView.consumePendingUpdateOperations()>
						overscroller = mScroller;
		//   12   26:aload_0         
		//   13   27:getfield        #48  <Field OverScroller mScroller>
		//   14   30:astore          13
						smoothscroller = mLayout.mSmoothScroller;
		//   15   32:aload_0         
		//   16   33:getfield        #25  <Field RecyclerView this$0>
		//   17   36:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   18   39:getfield        #142 <Field RecyclerView$SmoothScroller RecyclerView$LayoutManager.mSmoothScroller>
		//   19   42:astore          14
						if(!overscroller.computeScrollOffset())
							break label0;
		//   20   44:aload           13
		//   21   46:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   22   49:ifeq            916
						int ai[] = mScrollConsumed;
		//   23   52:aload_0         
		//   24   53:getfield        #25  <Field RecyclerView this$0>
		//   25   56:invokestatic    #150 <Method int[] RecyclerView.access$500(RecyclerView)>
		//   26   59:astore          15
						k2 = overscroller.getCurrX();
		//   27   61:aload           13
		//   28   63:invokevirtual   #153 <Method int OverScroller.getCurrX()>
		//   29   66:istore          11
						l2 = overscroller.getCurrY();
		//   30   68:aload           13
		//   31   70:invokevirtual   #156 <Method int OverScroller.getCurrY()>
		//   32   73:istore          12
						j = k2 - mLastFlingX;
		//   33   75:iload           11
		//   34   77:aload_0         
		//   35   78:getfield        #109 <Field int mLastFlingX>
		//   36   81:isub            
		//   37   82:istore_2        
						i = l2 - mLastFlingY;
		//   38   83:iload           12
		//   39   85:aload_0         
		//   40   86:getfield        #107 <Field int mLastFlingY>
		//   41   89:isub            
		//   42   90:istore_1        
						mLastFlingX = k2;
		//   43   91:aload_0         
		//   44   92:iload           11
		//   45   94:putfield        #109 <Field int mLastFlingX>
						mLastFlingY = l2;
		//   46   97:aload_0         
		//   47   98:iload           12
		//   48  100:putfield        #107 <Field int mLastFlingY>
						j1 = j;
		//   49  103:iload_2         
		//   50  104:istore          6
						i1 = i;
		//   51  106:iload_1         
		//   52  107:istore          5
						if(dispatchNestedPreScroll(j, i, ai, ((int []) (null)), 1))
		//*  53  109:aload_0         
		//*  54  110:getfield        #25  <Field RecyclerView this$0>
		//*  55  113:iload_2         
		//*  56  114:iload_1         
		//*  57  115:aload           15
		//*  58  117:aconst_null     
		//*  59  118:iconst_1        
		//*  60  119:invokevirtual   #160 <Method boolean RecyclerView.dispatchNestedPreScroll(int, int, int[], int[], int)>
		//*  61  122:ifeq            141
						{
							j1 = j - ai[0];
		//   62  125:iload_2         
		//   63  126:aload           15
		//   64  128:iconst_0        
		//   65  129:iaload          
		//   66  130:isub            
		//   67  131:istore          6
							i1 = i - ai[1];
		//   68  133:iload_1         
		//   69  134:aload           15
		//   70  136:iconst_1        
		//   71  137:iaload          
		//   72  138:isub            
		//   73  139:istore          5
						}
						if(mAdapter != null)
		//*  74  141:aload_0         
		//*  75  142:getfield        #25  <Field RecyclerView this$0>
		//*  76  145:getfield        #164 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  77  148:ifnull          476
						{
							startInterceptRequestLayout();
		//   78  151:aload_0         
		//   79  152:getfield        #25  <Field RecyclerView this$0>
		//   80  155:invokevirtual   #167 <Method void RecyclerView.startInterceptRequestLayout()>
							onEnterLayoutOrScroll();
		//   81  158:aload_0         
		//   82  159:getfield        #25  <Field RecyclerView this$0>
		//   83  162:invokevirtual   #170 <Method void RecyclerView.onEnterLayoutOrScroll()>
							TraceCompat.beginSection("RV Scroll");
		//   84  165:ldc1            #172 <String "RV Scroll">
		//   85  167:invokestatic    #178 <Method void TraceCompat.beginSection(String)>
							fillRemainingScrollValues(mState);
		//   86  170:aload_0         
		//   87  171:getfield        #25  <Field RecyclerView this$0>
		//   88  174:aload_0         
		//   89  175:getfield        #25  <Field RecyclerView this$0>
		//   90  178:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//   91  181:invokevirtual   #186 <Method void RecyclerView.fillRemainingScrollValues(RecyclerView$State)>
							if(j1 != 0)
		//*  92  184:iload           6
		//*  93  186:ifeq            224
							{
								i = mLayout.scrollHorizontallyBy(j1, mRecycler, mState);
		//   94  189:aload_0         
		//   95  190:getfield        #25  <Field RecyclerView this$0>
		//   96  193:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   97  196:iload           6
		//   98  198:aload_0         
		//   99  199:getfield        #25  <Field RecyclerView this$0>
		//  100  202:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//  101  205:aload_0         
		//  102  206:getfield        #25  <Field RecyclerView this$0>
		//  103  209:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  104  212:invokevirtual   #194 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//  105  215:istore_1        
								j = j1 - i;
		//  106  216:iload           6
		//  107  218:iload_1         
		//  108  219:isub            
		//  109  220:istore_2        
							} else
		//* 110  221:goto            228
							{
								i = 0;
		//  111  224:iconst_0        
		//  112  225:istore_1        
								j = i;
		//  113  226:iload_1         
		//  114  227:istore_2        
							}
							int k;
							int l;
							if(i1 != 0)
		//* 115  228:iload           5
		//* 116  230:ifeq            269
							{
								k = mLayout.scrollVerticallyBy(i1, mRecycler, mState);
		//  117  233:aload_0         
		//  118  234:getfield        #25  <Field RecyclerView this$0>
		//  119  237:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//  120  240:iload           5
		//  121  242:aload_0         
		//  122  243:getfield        #25  <Field RecyclerView this$0>
		//  123  246:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//  124  249:aload_0         
		//  125  250:getfield        #25  <Field RecyclerView this$0>
		//  126  253:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  127  256:invokevirtual   #197 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//  128  259:istore_3        
								l = i1 - k;
		//  129  260:iload           5
		//  130  262:iload_3         
		//  131  263:isub            
		//  132  264:istore          4
							} else
		//* 133  266:goto            274
							{
								k = 0;
		//  134  269:iconst_0        
		//  135  270:istore_3        
								l = k;
		//  136  271:iload_3         
		//  137  272:istore          4
							}
							TraceCompat.endSection();
		//  138  274:invokestatic    #200 <Method void TraceCompat.endSection()>
							repositionShadowingViews();
		//  139  277:aload_0         
		//  140  278:getfield        #25  <Field RecyclerView this$0>
		//  141  281:invokevirtual   #203 <Method void RecyclerView.repositionShadowingViews()>
							onExitLayoutOrScroll();
		//  142  284:aload_0         
		//  143  285:getfield        #25  <Field RecyclerView this$0>
		//  144  288:invokevirtual   #206 <Method void RecyclerView.onExitLayoutOrScroll()>
							stopInterceptRequestLayout(false);
		//  145  291:aload_0         
		//  146  292:getfield        #25  <Field RecyclerView this$0>
		//  147  295:iconst_0        
		//  148  296:invokevirtual   #210 <Method void RecyclerView.stopInterceptRequestLayout(boolean)>
							k1 = i;
		//  149  299:iload_1         
		//  150  300:istore          7
							j2 = j;
		//  151  302:iload_2         
		//  152  303:istore          10
							i2 = k;
		//  153  305:iload_3         
		//  154  306:istore          9
							l1 = l;
		//  155  308:iload           4
		//  156  310:istore          8
							if(smoothscroller != null)
		//* 157  312:aload           14
		//* 158  314:ifnull          493
							{
								k1 = i;
		//  159  317:iload_1         
		//  160  318:istore          7
								j2 = j;
		//  161  320:iload_2         
		//  162  321:istore          10
								i2 = k;
		//  163  323:iload_3         
		//  164  324:istore          9
								l1 = l;
		//  165  326:iload           4
		//  166  328:istore          8
								if(!smoothscroller.isPendingInitialRun())
		//* 167  330:aload           14
		//* 168  332:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 169  335:ifne            493
								{
									k1 = i;
		//  170  338:iload_1         
		//  171  339:istore          7
									j2 = j;
		//  172  341:iload_2         
		//  173  342:istore          10
									i2 = k;
		//  174  344:iload_3         
		//  175  345:istore          9
									l1 = l;
		//  176  347:iload           4
		//  177  349:istore          8
									if(smoothscroller.isRunning())
		//* 178  351:aload           14
		//* 179  353:invokevirtual   #218 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 180  356:ifeq            493
									{
										k1 = mState.getItemCount();
		//  181  359:aload_0         
		//  182  360:getfield        #25  <Field RecyclerView this$0>
		//  183  363:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  184  366:invokevirtual   #223 <Method int RecyclerView$State.getItemCount()>
		//  185  369:istore          7
										if(k1 == 0)
		//* 186  371:iload           7
		//* 187  373:ifne            397
										{
											smoothscroller.stop();
		//  188  376:aload           14
		//  189  378:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
											k1 = i;
		//  190  381:iload_1         
		//  191  382:istore          7
											j2 = j;
		//  192  384:iload_2         
		//  193  385:istore          10
											i2 = k;
		//  194  387:iload_3         
		//  195  388:istore          9
											l1 = l;
		//  196  390:iload           4
		//  197  392:istore          8
										} else
		//* 198  394:goto            493
										if(smoothscroller.getTargetPosition() >= k1)
		//* 199  397:aload           14
		//* 200  399:invokevirtual   #227 <Method int RecyclerView$SmoothScroller.getTargetPosition()>
		//* 201  402:iload           7
		//* 202  404:icmplt          446
										{
											smoothscroller.setTargetPosition(k1 - 1);
		//  203  407:aload           14
		//  204  409:iload           7
		//  205  411:iconst_1        
		//  206  412:isub            
		//  207  413:invokevirtual   #230 <Method void RecyclerView$SmoothScroller.setTargetPosition(int)>
											smoothscroller.onAnimation(j1 - j, i1 - l);
		//  208  416:aload           14
		//  209  418:iload           6
		//  210  420:iload_2         
		//  211  421:isub            
		//  212  422:iload           5
		//  213  424:iload           4
		//  214  426:isub            
		//  215  427:invokestatic    #234 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
											k1 = i;
		//  216  430:iload_1         
		//  217  431:istore          7
											j2 = j;
		//  218  433:iload_2         
		//  219  434:istore          10
											i2 = k;
		//  220  436:iload_3         
		//  221  437:istore          9
											l1 = l;
		//  222  439:iload           4
		//  223  441:istore          8
										} else
		//* 224  443:goto            493
										{
											smoothscroller.onAnimation(j1 - j, i1 - l);
		//  225  446:aload           14
		//  226  448:iload           6
		//  227  450:iload_2         
		//  228  451:isub            
		//  229  452:iload           5
		//  230  454:iload           4
		//  231  456:isub            
		//  232  457:invokestatic    #234 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
											k1 = i;
		//  233  460:iload_1         
		//  234  461:istore          7
											j2 = j;
		//  235  463:iload_2         
		//  236  464:istore          10
											i2 = k;
		//  237  466:iload_3         
		//  238  467:istore          9
											l1 = l;
		//  239  469:iload           4
		//  240  471:istore          8
										}
									}
								}
							}
						} else
		//* 241  473:goto            493
						{
							k1 = 0;
		//  242  476:iconst_0        
		//  243  477:istore          7
							i = k1;
		//  244  479:iload           7
		//  245  481:istore_1        
							j = i;
		//  246  482:iload_1         
		//  247  483:istore_2        
							l1 = j;
		//  248  484:iload_2         
		//  249  485:istore          8
							i2 = j;
		//  250  487:iload_2         
		//  251  488:istore          9
							j2 = i;
		//  252  490:iload_1         
		//  253  491:istore          10
						}
						if(!mItemDecorations.isEmpty())
		//* 254  493:aload_0         
		//* 255  494:getfield        #25  <Field RecyclerView this$0>
		//* 256  497:getfield        #238 <Field ArrayList RecyclerView.mItemDecorations>
		//* 257  500:invokevirtual   #243 <Method boolean ArrayList.isEmpty()>
		//* 258  503:ifne            513
							invalidate();
		//  259  506:aload_0         
		//  260  507:getfield        #25  <Field RecyclerView this$0>
		//  261  510:invokevirtual   #246 <Method void RecyclerView.invalidate()>
						if(getOverScrollMode() != 2)
		//* 262  513:aload_0         
		//* 263  514:getfield        #25  <Field RecyclerView this$0>
		//* 264  517:invokevirtual   #249 <Method int RecyclerView.getOverScrollMode()>
		//* 265  520:iconst_2        
		//* 266  521:icmpeq          535
							considerReleasingGlowsOnScroll(j1, i1);
		//  267  524:aload_0         
		//  268  525:getfield        #25  <Field RecyclerView this$0>
		//  269  528:iload           6
		//  270  530:iload           5
		//  271  532:invokevirtual   #252 <Method void RecyclerView.considerReleasingGlowsOnScroll(int, int)>
						if(dispatchNestedScroll(k1, i2, j2, l1, ((int []) (null)), 1) || j2 == 0 && l1 == 0)
							break label1;
		//  272  535:aload_0         
		//  273  536:getfield        #25  <Field RecyclerView this$0>
		//  274  539:iload           7
		//  275  541:iload           9
		//  276  543:iload           10
		//  277  545:iload           8
		//  278  547:aconst_null     
		//  279  548:iconst_1        
		//  280  549:invokevirtual   #256 <Method boolean RecyclerView.dispatchNestedScroll(int, int, int, int, int[], int)>
		//  281  552:ifne            693
		//  282  555:iload           10
		//  283  557:ifne            565
		//  284  560:iload           8
		//  285  562:ifeq            693
						j = (int)overscroller.getCurrVelocity();
		//  286  565:aload           13
		//  287  567:invokevirtual   #260 <Method float OverScroller.getCurrVelocity()>
		//  288  570:f2i             
		//  289  571:istore_2        
						if(j2 != k2)
		//* 290  572:iload           10
		//* 291  574:iload           11
		//* 292  576:icmpeq          600
						{
							if(j2 < 0)
		//* 293  579:iload           10
		//* 294  581:ifge            590
							{
								i = -j;
		//  295  584:iload_2         
		//  296  585:ineg            
		//  297  586:istore_1        
								break label2;
		//  298  587:goto            602
							}
							if(j2 > 0)
		//* 299  590:iload           10
		//* 300  592:ifle            600
							{
								i = j;
		//  301  595:iload_2         
		//  302  596:istore_1        
								break label2;
		//  303  597:goto            602
							}
						}
						i = 0;
		//  304  600:iconst_0        
		//  305  601:istore_1        
					}
label3:
					{
						if(l1 != l2)
		//* 306  602:iload           8
		//* 307  604:iload           12
		//* 308  606:icmpeq          628
						{
							if(l1 < 0)
		//* 309  609:iload           8
		//* 310  611:ifge            620
							{
								j = -j;
		//  311  614:iload_2         
		//  312  615:ineg            
		//  313  616:istore_2        
								break label3;
		//  314  617:goto            630
							}
							if(l1 > 0)
		//* 315  620:iload           8
		//* 316  622:ifle            628
								break label3;
		//  317  625:goto            630
						}
						j = 0;
		//  318  628:iconst_0        
		//  319  629:istore_2        
					}
					if(getOverScrollMode() != 2)
		//* 320  630:aload_0         
		//* 321  631:getfield        #25  <Field RecyclerView this$0>
		//* 322  634:invokevirtual   #249 <Method int RecyclerView.getOverScrollMode()>
		//* 323  637:iconst_2        
		//* 324  638:icmpeq          650
						absorbGlows(i, j);
		//  325  641:aload_0         
		//  326  642:getfield        #25  <Field RecyclerView this$0>
		//  327  645:iload_1         
		//  328  646:iload_2         
		//  329  647:invokevirtual   #263 <Method void RecyclerView.absorbGlows(int, int)>
					if((i != 0 || j2 == k2 || overscroller.getFinalX() == 0) && (j != 0 || l1 == l2 || overscroller.getFinalY() == 0))
		//* 330  650:iload_1         
		//* 331  651:ifne            669
		//* 332  654:iload           10
		//* 333  656:iload           11
		//* 334  658:icmpeq          669
		//* 335  661:aload           13
		//* 336  663:invokevirtual   #266 <Method int OverScroller.getFinalX()>
		//* 337  666:ifne            693
		//* 338  669:iload_2         
		//* 339  670:ifne            688
		//* 340  673:iload           8
		//* 341  675:iload           12
		//* 342  677:icmpeq          688
		//* 343  680:aload           13
		//* 344  682:invokevirtual   #269 <Method int OverScroller.getFinalY()>
		//* 345  685:ifne            693
						overscroller.abortAnimation();
		//  346  688:aload           13
		//  347  690:invokevirtual   #272 <Method void OverScroller.abortAnimation()>
				}
				if(k1 != 0 || i2 != 0)
		//* 348  693:iload           7
		//* 349  695:ifne            703
		//* 350  698:iload           9
		//* 351  700:ifeq            714
					dispatchOnScrolled(k1, i2);
		//  352  703:aload_0         
		//  353  704:getfield        #25  <Field RecyclerView this$0>
		//  354  707:iload           7
		//  355  709:iload           9
		//  356  711:invokevirtual   #275 <Method void RecyclerView.dispatchOnScrolled(int, int)>
				if(!awakenScrollBars())
		//* 357  714:aload_0         
		//* 358  715:getfield        #25  <Field RecyclerView this$0>
		//* 359  718:invokestatic    #279 <Method boolean RecyclerView.access$700(RecyclerView)>
		//* 360  721:ifne            731
					invalidate();
		//  361  724:aload_0         
		//  362  725:getfield        #25  <Field RecyclerView this$0>
		//  363  728:invokevirtual   #246 <Method void RecyclerView.invalidate()>
				boolean flag;
				if(i1 != 0 && mLayout.canScrollVertically() && i2 == i1)
		//* 364  731:iload           5
		//* 365  733:ifeq            761
		//* 366  736:aload_0         
		//* 367  737:getfield        #25  <Field RecyclerView this$0>
		//* 368  740:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 369  743:invokevirtual   #282 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
		//* 370  746:ifeq            761
		//* 371  749:iload           9
		//* 372  751:iload           5
		//* 373  753:icmpne          761
					flag = true;
		//  374  756:iconst_1        
		//  375  757:istore_1        
				else
		//* 376  758:goto            763
					flag = false;
		//  377  761:iconst_0        
		//  378  762:istore_1        
				boolean flag1;
				if(j1 != 0 && mLayout.canScrollHorizontally() && k1 == j1)
		//* 379  763:iload           6
		//* 380  765:ifeq            793
		//* 381  768:aload_0         
		//* 382  769:getfield        #25  <Field RecyclerView this$0>
		//* 383  772:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 384  775:invokevirtual   #285 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
		//* 385  778:ifeq            793
		//* 386  781:iload           7
		//* 387  783:iload           6
		//* 388  785:icmpne          793
					flag1 = true;
		//  389  788:iconst_1        
		//  390  789:istore_2        
				else
		//* 391  790:goto            795
					flag1 = false;
		//  392  793:iconst_0        
		//  393  794:istore_2        
				if((j1 != 0 || i1 != 0) && !flag1 && !flag)
		//* 394  795:iload           6
		//* 395  797:ifne            805
		//* 396  800:iload           5
		//* 397  802:ifeq            821
		//* 398  805:iload_2         
		//* 399  806:ifne            821
		//* 400  809:iload_1         
		//* 401  810:ifeq            816
		//* 402  813:goto            821
					flag = false;
		//  403  816:iconst_0        
		//  404  817:istore_1        
				else
		//* 405  818:goto            823
					flag = true;
		//  406  821:iconst_1        
		//  407  822:istore_1        
				if(!overscroller.isFinished() && (flag || hasNestedScrollingParent(1)))
		//* 408  823:aload           13
		//* 409  825:invokevirtual   #288 <Method boolean OverScroller.isFinished()>
		//* 410  828:ifne            884
		//* 411  831:iload_1         
		//* 412  832:ifne            849
		//* 413  835:aload_0         
		//* 414  836:getfield        #25  <Field RecyclerView this$0>
		//* 415  839:iconst_1        
		//* 416  840:invokevirtual   #292 <Method boolean RecyclerView.hasNestedScrollingParent(int)>
		//* 417  843:ifne            849
		//* 418  846:goto            884
				{
					postOnAnimation();
		//  419  849:aload_0         
		//  420  850:invokevirtual   #99  <Method void postOnAnimation()>
					if(mGapWorker != null)
		//* 421  853:aload_0         
		//* 422  854:getfield        #25  <Field RecyclerView this$0>
		//* 423  857:getfield        #296 <Field GapWorker RecyclerView.mGapWorker>
		//* 424  860:ifnull          916
						mGapWorker.postFromTraversal(RecyclerView.this, j1, i1);
		//  425  863:aload_0         
		//  426  864:getfield        #25  <Field RecyclerView this$0>
		//  427  867:getfield        #296 <Field GapWorker RecyclerView.mGapWorker>
		//  428  870:aload_0         
		//  429  871:getfield        #25  <Field RecyclerView this$0>
		//  430  874:iload           6
		//  431  876:iload           5
		//  432  878:invokevirtual   #302 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
				} else
		//* 433  881:goto            916
				{
					setScrollState(0);
		//  434  884:aload_0         
		//  435  885:getfield        #25  <Field RecyclerView this$0>
		//  436  888:iconst_0        
		//  437  889:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
					if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 438  892:invokestatic    #305 <Method boolean RecyclerView.access$800()>
		//* 439  895:ifeq            908
						mPrefetchRegistry.clearPrefetchPositions();
		//  440  898:aload_0         
		//  441  899:getfield        #25  <Field RecyclerView this$0>
		//  442  902:getfield        #309 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//  443  905:invokevirtual   #314 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
					stopNestedScroll(1);
		//  444  908:aload_0         
		//  445  909:getfield        #25  <Field RecyclerView this$0>
		//  446  912:iconst_1        
		//  447  913:invokevirtual   #317 <Method void RecyclerView.stopNestedScroll(int)>
				}
			}
			if(smoothscroller != null)
		//* 448  916:aload           14
		//* 449  918:ifnull          948
			{
				if(smoothscroller.isPendingInitialRun())
		//* 450  921:aload           14
		//* 451  923:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 452  926:ifeq            936
					smoothscroller.onAnimation(0, 0);
		//  453  929:aload           14
		//  454  931:iconst_0        
		//  455  932:iconst_0        
		//  456  933:invokestatic    #234 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
				if(!mReSchedulePostAnimationCallback)
		//* 457  936:aload_0         
		//* 458  937:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//* 459  940:ifne            948
					smoothscroller.stop();
		//  460  943:aload           14
		//  461  945:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
			}
			enableRunOnAnimationRequests();
		//  462  948:aload_0         
		//  463  949:invokespecial   #319 <Method void enableRunOnAnimationRequests()>
		//  464  952:return          
		}

		public void smoothScrollBy(int i, int j)
		{
			smoothScrollBy(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #323 <Method void smoothScrollBy(int, int, int, int)>
		//    6    8:return          
		}

		public void smoothScrollBy(int i, int j, int k)
		{
			smoothScrollBy(i, j, k, RecyclerView.sQuinticInterpolator);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    5    7:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//    6   10:return          
		}

		public void smoothScrollBy(int i, int j, int k, int l)
		{
			smoothScrollBy(i, j, computeScrollDuration(i, j, k, l));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:iload_2         
		//    6    6:iload_3         
		//    7    7:iload           4
		//    8    9:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    9   12:invokevirtual   #331 <Method void smoothScrollBy(int, int, int)>
		//   10   15:return          
		}

		public void smoothScrollBy(int i, int j, int k, Interpolator interpolator)
		{
			if(mInterpolator != interpolator)
		//*   0    0:aload_0         
		//*   1    1:getfield        #33  <Field Interpolator mInterpolator>
		//*   2    4:aload           4
		//*   3    6:if_acmpeq       35
			{
				mInterpolator = interpolator;
		//    4    9:aload_0         
		//    5   10:aload           4
		//    6   12:putfield        #33  <Field Interpolator mInterpolator>
				mScroller = new OverScroller(getContext(), interpolator);
		//    7   15:aload_0         
		//    8   16:new             #39  <Class OverScroller>
		//    9   19:dup             
		//   10   20:aload_0         
		//   11   21:getfield        #25  <Field RecyclerView this$0>
		//   12   24:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   13   27:aload           4
		//   14   29:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   15   32:putfield        #48  <Field OverScroller mScroller>
			}
			setScrollState(2);
		//   16   35:aload_0         
		//   17   36:getfield        #25  <Field RecyclerView this$0>
		//   18   39:iconst_2        
		//   19   40:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//   20   43:aload_0         
		//   21   44:iconst_0        
		//   22   45:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//   23   48:aload_0         
		//   24   49:iconst_0        
		//   25   50:putfield        #109 <Field int mLastFlingX>
			mScroller.startScroll(0, 0, i, j, k);
		//   26   53:aload_0         
		//   27   54:getfield        #48  <Field OverScroller mScroller>
		//   28   57:iconst_0        
		//   29   58:iconst_0        
		//   30   59:iload_1         
		//   31   60:iload_2         
		//   32   61:iload_3         
		//   33   62:invokevirtual   #335 <Method void OverScroller.startScroll(int, int, int, int, int)>
			if(android.os.Build.VERSION.SDK_INT < 23)
		//*  34   65:getstatic       #340 <Field int android.os.Build$VERSION.SDK_INT>
		//*  35   68:bipush          23
		//*  36   70:icmpge          81
				mScroller.computeScrollOffset();
		//   37   73:aload_0         
		//   38   74:getfield        #48  <Field OverScroller mScroller>
		//   39   77:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   40   80:pop             
			postOnAnimation();
		//   41   81:aload_0         
		//   42   82:invokevirtual   #99  <Method void postOnAnimation()>
		//   43   85:return          
		}

		public void smoothScrollBy(int i, int j, Interpolator interpolator)
		{
			int k = computeScrollDuration(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    6    8:istore          4
			Interpolator interpolator1 = interpolator;
		//    7   10:aload_3         
		//    8   11:astore          5
			if(interpolator == null)
		//*   9   13:aload_3         
		//*  10   14:ifnonnull       22
				interpolator1 = RecyclerView.sQuinticInterpolator;
		//   11   17:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   12   20:astore          5
			smoothScrollBy(i, j, k, interpolator1);
		//   13   22:aload_0         
		//   14   23:iload_1         
		//   15   24:iload_2         
		//   16   25:iload           4
		//   17   27:aload           5
		//   18   29:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//   19   32:return          
		}

		public void stop()
		{
			removeCallbacks(((Runnable) (this)));
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    4    8:pop             
			mScroller.abortAnimation();
		//    5    9:aload_0         
		//    6   10:getfield        #48  <Field OverScroller mScroller>
		//    7   13:invokevirtual   #272 <Method void OverScroller.abortAnimation()>
		//    8   16:return          
		}

		private boolean mEatRunOnAnimationRequest;
		Interpolator mInterpolator;
		private int mLastFlingX;
		private int mLastFlingY;
		private boolean mReSchedulePostAnimationCallback;
		private OverScroller mScroller;
		final RecyclerView this$0;


/*
		static OverScroller access$400(ViewFlinger viewflinger)
		{
			return viewflinger.mScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #48  <Field OverScroller mScroller>
		//    2    4:areturn         
		}

*/

		ViewFlinger()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #25  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #28  <Method void Object()>
			mInterpolator = RecyclerView.sQuinticInterpolator;
		//    5    9:aload_0         
		//    6   10:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    7   13:putfield        #33  <Field Interpolator mInterpolator>
			mEatRunOnAnimationRequest = false;
		//    8   16:aload_0         
		//    9   17:iconst_0        
		//   10   18:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			mReSchedulePostAnimationCallback = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mScroller = new OverScroller(getContext(), RecyclerView.sQuinticInterpolator);
		//   14   26:aload_0         
		//   15   27:new             #39  <Class OverScroller>
		//   16   30:dup             
		//   17   31:aload_1         
		//   18   32:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   19   35:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   20   38:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   21   41:putfield        #48  <Field OverScroller mScroller>
		//   22   44:return          
		}
	}

	public static abstract class ViewHolder
	{

		private void createPayloadsIfNeeded()
		{
			if(mPayloads == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnonnull       29
			{
				mPayloads = ((List) (new ArrayList()));
		//    3    7:aload_0         
		//    4    8:new             #153 <Class ArrayList>
		//    5   11:dup             
		//    6   12:invokespecial   #154 <Method void ArrayList()>
		//    7   15:putfield        #100 <Field List mPayloads>
				mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
		//    8   18:aload_0         
		//    9   19:aload_0         
		//   10   20:getfield        #100 <Field List mPayloads>
		//   11   23:invokestatic    #158 <Method List Collections.unmodifiableList(List)>
		//   12   26:putfield        #102 <Field List mUnmodifiedPayloads>
			}
		//   13   29:return          
		}

		private boolean doesTransientStatePreventRecycling()
		{
			return (mFlags & 0x10) == 0 && ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifeq            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		private void onEnteredHiddenState(RecyclerView recyclerview)
		{
			if(mPendingAccessibilityState != -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #112 <Field int mPendingAccessibilityState>
		//*   2    4:iconst_m1       
		//*   3    5:icmpeq          19
				mWasImportantForAccessibilityBeforeHidden = mPendingAccessibilityState;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #112 <Field int mPendingAccessibilityState>
		//    7   13:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			else
		//*   8   16:goto            30
				mWasImportantForAccessibilityBeforeHidden = ViewCompat.getImportantForAccessibility(itemView);
		//    9   19:aload_0         
		//   10   20:aload_0         
		//   11   21:getfield        #121 <Field View itemView>
		//   12   24:invokestatic    #168 <Method int ViewCompat.getImportantForAccessibility(View)>
		//   13   27:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			recyclerview.setChildImportantForAccessibilityInternal(this, 4);
		//   14   30:aload_1         
		//   15   31:aload_0         
		//   16   32:iconst_4        
		//   17   33:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//   18   36:pop             
		//   19   37:return          
		}

		private void onLeftHiddenState(RecyclerView recyclerview)
		{
			recyclerview.setChildImportantForAccessibilityInternal(this, mWasImportantForAccessibilityBeforeHidden);
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:aload_0         
		//    3    3:getfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    4    6:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    5    9:pop             
			mWasImportantForAccessibilityBeforeHidden = 0;
		//    6   10:aload_0         
		//    7   11:iconst_0        
		//    8   12:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    9   15:return          
		}

		private boolean shouldBeKeptAsChild()
		{
			return (mFlags & 0x10) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		void addChangePayload(Object obj)
		{
			if(obj == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       12
			{
				addFlags(1024);
		//    2    4:aload_0         
		//    3    5:sipush          1024
		//    4    8:invokevirtual   #178 <Method void addFlags(int)>
				return;
		//    5   11:return          
			}
			if((0x400 & mFlags) == 0)
		//*   6   12:sipush          1024
		//*   7   15:aload_0         
		//*   8   16:getfield        #136 <Field int mFlags>
		//*   9   19:iand            
		//*  10   20:ifne            38
			{
				createPayloadsIfNeeded();
		//   11   23:aload_0         
		//   12   24:invokespecial   #180 <Method void createPayloadsIfNeeded()>
				mPayloads.add(obj);
		//   13   27:aload_0         
		//   14   28:getfield        #100 <Field List mPayloads>
		//   15   31:aload_1         
		//   16   32:invokeinterface #186 <Method boolean List.add(Object)>
		//   17   37:pop             
			}
		//   18   38:return          
		}

		void addFlags(int i)
		{
			mFlags = i | mFlags;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:getfield        #136 <Field int mFlags>
		//    4    6:ior             
		//    5    7:putfield        #136 <Field int mFlags>
		//    6   10:return          
		}

		void clearOldPosition()
		{
			mOldPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #86  <Field int mOldPosition>
			mPreLayoutPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #94  <Field int mPreLayoutPosition>
		//    6   10:return          
		}

		void clearPayload()
		{
			if(mPayloads != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnull          16
				mPayloads.clear();
		//    3    7:aload_0         
		//    4    8:getfield        #100 <Field List mPayloads>
		//    5   11:invokeinterface #191 <Method void List.clear()>
			mFlags = mFlags & 0xfffffbff;
		//    6   16:aload_0         
		//    7   17:aload_0         
		//    8   18:getfield        #136 <Field int mFlags>
		//    9   21:sipush          -1025
		//   10   24:iand            
		//   11   25:putfield        #136 <Field int mFlags>
		//   12   28:return          
		}

		void clearReturnedFromScrapFlag()
		{
			mFlags = mFlags & 0xffffffdf;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:bipush          -33
		//    4    7:iand            
		//    5    8:putfield        #136 <Field int mFlags>
		//    6   11:return          
		}

		void clearTmpDetachFlag()
		{
			mFlags = mFlags & 0xfffffeff;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -257
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		void flagRemovedAndOffsetPosition(int i, int j, boolean flag)
		{
			addFlags(8);
		//    0    0:aload_0         
		//    1    1:bipush          8
		//    2    3:invokevirtual   #178 <Method void addFlags(int)>
			offsetPosition(j, flag);
		//    3    6:aload_0         
		//    4    7:iload_2         
		//    5    8:iload_3         
		//    6    9:invokevirtual   #199 <Method void offsetPosition(int, boolean)>
			mPosition = i;
		//    7   12:aload_0         
		//    8   13:iload_1         
		//    9   14:putfield        #84  <Field int mPosition>
		//   10   17:return          
		}

		public final int getAdapterPosition()
		{
			if(mOwnerRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//*   2    4:ifnonnull       9
				return -1;
		//    3    7:iconst_m1       
		//    4    8:ireturn         
			else
				return mOwnerRecyclerView.getAdapterPositionFor(this);
		//    5    9:aload_0         
		//    6   10:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//    7   13:aload_0         
		//    8   14:invokevirtual   #206 <Method int RecyclerView.getAdapterPositionFor(RecyclerView$ViewHolder)>
		//    9   17:ireturn         
		}

		public final long getItemId()
		{
			return mItemId;
		//    0    0:aload_0         
		//    1    1:getfield        #90  <Field long mItemId>
		//    2    4:lreturn         
		}

		public final int getItemViewType()
		{
			return mItemViewType;
		//    0    0:aload_0         
		//    1    1:getfield        #92  <Field int mItemViewType>
		//    2    4:ireturn         
		}

		public final int getLayoutPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		public final int getOldPosition()
		{
			return mOldPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #86  <Field int mOldPosition>
		//    2    4:ireturn         
		}

		public final int getPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		List getUnmodifiedPayloads()
		{
			if((mFlags & 0x400) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #136 <Field int mFlags>
		//*   2    4:sipush          1024
		//*   3    7:iand            
		//*   4    8:ifne            42
			{
				if(mPayloads != null && mPayloads.size() != 0)
		//*   5   11:aload_0         
		//*   6   12:getfield        #100 <Field List mPayloads>
		//*   7   15:ifnull          38
		//*   8   18:aload_0         
		//*   9   19:getfield        #100 <Field List mPayloads>
		//*  10   22:invokeinterface #219 <Method int List.size()>
		//*  11   27:ifne            33
		//*  12   30:goto            38
					return mUnmodifiedPayloads;
		//   13   33:aload_0         
		//   14   34:getfield        #102 <Field List mUnmodifiedPayloads>
		//   15   37:areturn         
				else
					return FULLUPDATE_PAYLOADS;
		//   16   38:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   17   41:areturn         
			} else
			{
				return FULLUPDATE_PAYLOADS;
		//   18   42:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   19   45:areturn         
			}
		}

		boolean hasAnyOfTheFlags(int i)
		{
			return (i & mFlags) != 0;
		//    0    0:iload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isAdapterPositionUnknown()
		{
			return (mFlags & 0x200) != 0 || isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          512
		//    3    7:iand            
		//    4    8:ifne            23
		//    5   11:aload_0         
		//    6   12:invokevirtual   #227 <Method boolean isInvalid()>
		//    7   15:ifeq            21
		//    8   18:goto            23
		//    9   21:iconst_0        
		//   10   22:ireturn         
		//   11   23:iconst_1        
		//   12   24:ireturn         
		}

		boolean isBound()
		{
			return (mFlags & 1) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_1        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isInvalid()
		{
			return (mFlags & 4) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_4        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		public final boolean isRecyclable()
		{
			return (mFlags & 0x10) == 0 && !ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifne            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		boolean isRemoved()
		{
			return (mFlags & 8) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          8
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean isScrap()
		{
			return mScrapContainer != null;
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:ifnull          9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		boolean isTmpDetached()
		{
			return (mFlags & 0x100) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          256
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		boolean isUpdated()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean needsUpdate()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		void offsetPosition(int i, boolean flag)
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
			if(mPreLayoutPosition == -1)
		//*   8   16:aload_0         
		//*   9   17:getfield        #94  <Field int mPreLayoutPosition>
		//*  10   20:iconst_m1       
		//*  11   21:icmpne          32
				mPreLayoutPosition = mPosition;
		//   12   24:aload_0         
		//   13   25:aload_0         
		//   14   26:getfield        #84  <Field int mPosition>
		//   15   29:putfield        #94  <Field int mPreLayoutPosition>
			if(flag)
		//*  16   32:iload_2         
		//*  17   33:ifeq            46
				mPreLayoutPosition = mPreLayoutPosition + i;
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #94  <Field int mPreLayoutPosition>
		//   21   41:iload_1         
		//   22   42:iadd            
		//   23   43:putfield        #94  <Field int mPreLayoutPosition>
			mPosition = mPosition + i;
		//   24   46:aload_0         
		//   25   47:aload_0         
		//   26   48:getfield        #84  <Field int mPosition>
		//   27   51:iload_1         
		//   28   52:iadd            
		//   29   53:putfield        #84  <Field int mPosition>
			if(itemView.getLayoutParams() != null)
		//*  30   56:aload_0         
		//*  31   57:getfield        #121 <Field View itemView>
		//*  32   60:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  33   63:ifnull          80
				((LayoutParams)itemView.getLayoutParams()).mInsetsDirty = true;
		//   34   66:aload_0         
		//   35   67:getfield        #121 <Field View itemView>
		//   36   70:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   37   73:checkcast       #242 <Class RecyclerView$LayoutParams>
		//   38   76:iconst_1        
		//   39   77:putfield        #245 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//   40   80:return          
		}

		void resetInternal()
		{
			mFlags = 0;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #136 <Field int mFlags>
			mPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    6   10:aload_0         
		//    7   11:iconst_m1       
		//    8   12:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    9   15:aload_0         
		//   10   16:ldc2w           #87  <Long -1L>
		//   11   19:putfield        #90  <Field long mItemId>
			mPreLayoutPosition = -1;
		//   12   22:aload_0         
		//   13   23:iconst_m1       
		//   14   24:putfield        #94  <Field int mPreLayoutPosition>
			mIsRecyclableCount = 0;
		//   15   27:aload_0         
		//   16   28:iconst_0        
		//   17   29:putfield        #104 <Field int mIsRecyclableCount>
			mShadowedHolder = null;
		//   18   32:aload_0         
		//   19   33:aconst_null     
		//   20   34:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   21   37:aload_0         
		//   22   38:aconst_null     
		//   23   39:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			clearPayload();
		//   24   42:aload_0         
		//   25   43:invokevirtual   #248 <Method void clearPayload()>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   26   46:aload_0         
		//   27   47:iconst_0        
		//   28   48:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   29   51:aload_0         
		//   30   52:iconst_m1       
		//   31   53:putfield        #112 <Field int mPendingAccessibilityState>
			RecyclerView.clearNestedRecyclerViewIfNotNested(this);
		//   32   56:aload_0         
		//   33   57:invokestatic    #252 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
		//   34   60:return          
		}

		void saveOldPosition()
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
		//    8   16:return          
		}

		void setFlags(int i, int j)
		{
			mFlags = i & j | mFlags & ~j;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iand            
		//    4    4:aload_0         
		//    5    5:getfield        #136 <Field int mFlags>
		//    6    8:iload_2         
		//    7    9:iconst_m1       
		//    8   10:ixor            
		//    9   11:iand            
		//   10   12:ior             
		//   11   13:putfield        #136 <Field int mFlags>
		//   12   16:return          
		}

		public final void setIsRecyclable(boolean flag)
		{
			int i;
			if(flag)
		//*   0    0:iload_1         
		//*   1    1:ifeq            14
				i = mIsRecyclableCount - 1;
		//    2    4:aload_0         
		//    3    5:getfield        #104 <Field int mIsRecyclableCount>
		//    4    8:iconst_1        
		//    5    9:isub            
		//    6   10:istore_2        
			else
		//*   7   11:goto            21
				i = mIsRecyclableCount + 1;
		//    8   14:aload_0         
		//    9   15:getfield        #104 <Field int mIsRecyclableCount>
		//   10   18:iconst_1        
		//   11   19:iadd            
		//   12   20:istore_2        
			mIsRecyclableCount = i;
		//   13   21:aload_0         
		//   14   22:iload_2         
		//   15   23:putfield        #104 <Field int mIsRecyclableCount>
			if(mIsRecyclableCount < 0)
		//*  16   26:aload_0         
		//*  17   27:getfield        #104 <Field int mIsRecyclableCount>
		//*  18   30:ifge            72
			{
				mIsRecyclableCount = 0;
		//   19   33:aload_0         
		//   20   34:iconst_0        
		//   21   35:putfield        #104 <Field int mIsRecyclableCount>
				StringBuilder stringbuilder = new StringBuilder();
		//   22   38:new             #259 <Class StringBuilder>
		//   23   41:dup             
		//   24   42:invokespecial   #260 <Method void StringBuilder()>
		//   25   45:astore_3        
				stringbuilder.append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ");
		//   26   46:aload_3         
		//   27   47:ldc2            #262 <String "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ">
		//   28   50:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   29   53:pop             
				stringbuilder.append(((Object) (this)));
		//   30   54:aload_3         
		//   31   55:aload_0         
		//   32   56:invokevirtual   #269 <Method StringBuilder StringBuilder.append(Object)>
		//   33   59:pop             
				Log.e("View", stringbuilder.toString());
		//   34   60:ldc2            #271 <String "View">
		//   35   63:aload_3         
		//   36   64:invokevirtual   #275 <Method String StringBuilder.toString()>
		//   37   67:invokestatic    #281 <Method int Log.e(String, String)>
		//   38   70:pop             
				return;
		//   39   71:return          
			}
			if(!flag && mIsRecyclableCount == 1)
		//*  40   72:iload_1         
		//*  41   73:ifne            96
		//*  42   76:aload_0         
		//*  43   77:getfield        #104 <Field int mIsRecyclableCount>
		//*  44   80:iconst_1        
		//*  45   81:icmpne          96
			{
				mFlags = mFlags | 0x10;
		//   46   84:aload_0         
		//   47   85:aload_0         
		//   48   86:getfield        #136 <Field int mFlags>
		//   49   89:bipush          16
		//   50   91:ior             
		//   51   92:putfield        #136 <Field int mFlags>
				return;
		//   52   95:return          
			}
			if(flag && mIsRecyclableCount == 0)
		//*  53   96:iload_1         
		//*  54   97:ifeq            118
		//*  55  100:aload_0         
		//*  56  101:getfield        #104 <Field int mIsRecyclableCount>
		//*  57  104:ifne            118
				mFlags = mFlags & 0xffffffef;
		//   58  107:aload_0         
		//   59  108:aload_0         
		//   60  109:getfield        #136 <Field int mFlags>
		//   61  112:bipush          -17
		//   62  114:iand            
		//   63  115:putfield        #136 <Field int mFlags>
		//   64  118:return          
		}

		void setScrapContainer(Recycler recycler, boolean flag)
		{
			mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = flag;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #108 <Field boolean mInChangeScrap>
		//    6   10:return          
		}

		boolean shouldIgnore()
		{
			return (mFlags & 0x80) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          128
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		void stopIgnoring()
		{
			mFlags = mFlags & 0xffffff7f;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -129
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder();
		//    0    0:new             #259 <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #260 <Method void StringBuilder()>
		//    3    7:astore_1        
			stringbuilder.append("ViewHolder{");
		//    4    8:aload_1         
		//    5    9:ldc2            #287 <String "ViewHolder{">
		//    6   12:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//    7   15:pop             
			stringbuilder.append(Integer.toHexString(((Object)this).hashCode()));
		//    8   16:aload_1         
		//    9   17:aload_0         
		//   10   18:invokevirtual   #290 <Method int Object.hashCode()>
		//   11   21:invokestatic    #296 <Method String Integer.toHexString(int)>
		//   12   24:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   13   27:pop             
			stringbuilder.append(" position=");
		//   14   28:aload_1         
		//   15   29:ldc2            #298 <String " position=">
		//   16   32:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   17   35:pop             
			stringbuilder.append(mPosition);
		//   18   36:aload_1         
		//   19   37:aload_0         
		//   20   38:getfield        #84  <Field int mPosition>
		//   21   41:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   22   44:pop             
			stringbuilder.append(" id=");
		//   23   45:aload_1         
		//   24   46:ldc2            #303 <String " id=">
		//   25   49:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   26   52:pop             
			stringbuilder.append(mItemId);
		//   27   53:aload_1         
		//   28   54:aload_0         
		//   29   55:getfield        #90  <Field long mItemId>
		//   30   58:invokevirtual   #306 <Method StringBuilder StringBuilder.append(long)>
		//   31   61:pop             
			stringbuilder.append(", oldPos=");
		//   32   62:aload_1         
		//   33   63:ldc2            #308 <String ", oldPos=">
		//   34   66:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   35   69:pop             
			stringbuilder.append(mOldPosition);
		//   36   70:aload_1         
		//   37   71:aload_0         
		//   38   72:getfield        #86  <Field int mOldPosition>
		//   39   75:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   40   78:pop             
			stringbuilder.append(", pLpos:");
		//   41   79:aload_1         
		//   42   80:ldc2            #310 <String ", pLpos:">
		//   43   83:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   44   86:pop             
			stringbuilder.append(mPreLayoutPosition);
		//   45   87:aload_1         
		//   46   88:aload_0         
		//   47   89:getfield        #94  <Field int mPreLayoutPosition>
		//   48   92:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   49   95:pop             
			StringBuilder stringbuilder2 = new StringBuilder(stringbuilder.toString());
		//   50   96:new             #259 <Class StringBuilder>
		//   51   99:dup             
		//   52  100:aload_1         
		//   53  101:invokevirtual   #275 <Method String StringBuilder.toString()>
		//   54  104:invokespecial   #311 <Method void StringBuilder(String)>
		//   55  107:astore_2        
			if(isScrap())
		//*  56  108:aload_0         
		//*  57  109:invokevirtual   #313 <Method boolean isScrap()>
		//*  58  112:ifeq            147
			{
				stringbuilder2.append(" scrap ");
		//   59  115:aload_2         
		//   60  116:ldc2            #315 <String " scrap ">
		//   61  119:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   62  122:pop             
				String s;
				if(mInChangeScrap)
		//*  63  123:aload_0         
		//*  64  124:getfield        #108 <Field boolean mInChangeScrap>
		//*  65  127:ifeq            137
					s = "[changeScrap]";
		//   66  130:ldc2            #317 <String "[changeScrap]">
		//   67  133:astore_1        
				else
		//*  68  134:goto            141
					s = "[attachedScrap]";
		//   69  137:ldc2            #319 <String "[attachedScrap]">
		//   70  140:astore_1        
				stringbuilder2.append(s);
		//   71  141:aload_2         
		//   72  142:aload_1         
		//   73  143:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   74  146:pop             
			}
			if(isInvalid())
		//*  75  147:aload_0         
		//*  76  148:invokevirtual   #227 <Method boolean isInvalid()>
		//*  77  151:ifeq            162
				stringbuilder2.append(" invalid");
		//   78  154:aload_2         
		//   79  155:ldc2            #321 <String " invalid">
		//   80  158:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   81  161:pop             
			if(!isBound())
		//*  82  162:aload_0         
		//*  83  163:invokevirtual   #323 <Method boolean isBound()>
		//*  84  166:ifne            177
				stringbuilder2.append(" unbound");
		//   85  169:aload_2         
		//   86  170:ldc2            #325 <String " unbound">
		//   87  173:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   88  176:pop             
			if(needsUpdate())
		//*  89  177:aload_0         
		//*  90  178:invokevirtual   #327 <Method boolean needsUpdate()>
		//*  91  181:ifeq            192
				stringbuilder2.append(" update");
		//   92  184:aload_2         
		//   93  185:ldc2            #329 <String " update">
		//   94  188:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//   95  191:pop             
			if(isRemoved())
		//*  96  192:aload_0         
		//*  97  193:invokevirtual   #331 <Method boolean isRemoved()>
		//*  98  196:ifeq            207
				stringbuilder2.append(" removed");
		//   99  199:aload_2         
		//  100  200:ldc2            #333 <String " removed">
		//  101  203:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  102  206:pop             
			if(shouldIgnore())
		//* 103  207:aload_0         
		//* 104  208:invokevirtual   #335 <Method boolean shouldIgnore()>
		//* 105  211:ifeq            222
				stringbuilder2.append(" ignored");
		//  106  214:aload_2         
		//  107  215:ldc2            #337 <String " ignored">
		//  108  218:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  109  221:pop             
			if(isTmpDetached())
		//* 110  222:aload_0         
		//* 111  223:invokevirtual   #339 <Method boolean isTmpDetached()>
		//* 112  226:ifeq            237
				stringbuilder2.append(" tmpDetached");
		//  113  229:aload_2         
		//  114  230:ldc2            #341 <String " tmpDetached">
		//  115  233:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  116  236:pop             
			if(!isRecyclable())
		//* 117  237:aload_0         
		//* 118  238:invokevirtual   #343 <Method boolean isRecyclable()>
		//* 119  241:ifne            286
			{
				StringBuilder stringbuilder1 = new StringBuilder();
		//  120  244:new             #259 <Class StringBuilder>
		//  121  247:dup             
		//  122  248:invokespecial   #260 <Method void StringBuilder()>
		//  123  251:astore_1        
				stringbuilder1.append(" not recyclable(");
		//  124  252:aload_1         
		//  125  253:ldc2            #345 <String " not recyclable(">
		//  126  256:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  127  259:pop             
				stringbuilder1.append(mIsRecyclableCount);
		//  128  260:aload_1         
		//  129  261:aload_0         
		//  130  262:getfield        #104 <Field int mIsRecyclableCount>
		//  131  265:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//  132  268:pop             
				stringbuilder1.append(")");
		//  133  269:aload_1         
		//  134  270:ldc2            #347 <String ")">
		//  135  273:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  136  276:pop             
				stringbuilder2.append(stringbuilder1.toString());
		//  137  277:aload_2         
		//  138  278:aload_1         
		//  139  279:invokevirtual   #275 <Method String StringBuilder.toString()>
		//  140  282:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  141  285:pop             
			}
			if(isAdapterPositionUnknown())
		//* 142  286:aload_0         
		//* 143  287:invokevirtual   #349 <Method boolean isAdapterPositionUnknown()>
		//* 144  290:ifeq            301
				stringbuilder2.append(" undefined adapter position");
		//  145  293:aload_2         
		//  146  294:ldc2            #351 <String " undefined adapter position">
		//  147  297:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  148  300:pop             
			if(itemView.getParent() == null)
		//* 149  301:aload_0         
		//* 150  302:getfield        #121 <Field View itemView>
		//* 151  305:invokevirtual   #355 <Method ViewParent View.getParent()>
		//* 152  308:ifnonnull       319
				stringbuilder2.append(" no parent");
		//  153  311:aload_2         
		//  154  312:ldc2            #357 <String " no parent">
		//  155  315:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  156  318:pop             
			stringbuilder2.append("}");
		//  157  319:aload_2         
		//  158  320:ldc2            #359 <String "}">
		//  159  323:invokevirtual   #266 <Method StringBuilder StringBuilder.append(String)>
		//  160  326:pop             
			return stringbuilder2.toString();
		//  161  327:aload_2         
		//  162  328:invokevirtual   #275 <Method String StringBuilder.toString()>
		//  163  331:areturn         
		}

		void unScrap()
		{
			mScrapContainer.unscrapView(this);
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #365 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		boolean wasReturnedFromScrap()
		{
			return (mFlags & 0x20) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          32
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		static final int FLAG_ADAPTER_FULLUPDATE = 1024;
		static final int FLAG_ADAPTER_POSITION_UNKNOWN = 512;
		static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 8192;
		static final int FLAG_BOUND = 1;
		static final int FLAG_IGNORE = 128;
		static final int FLAG_INVALID = 4;
		static final int FLAG_MOVED = 2048;
		static final int FLAG_NOT_RECYCLABLE = 16;
		static final int FLAG_REMOVED = 8;
		static final int FLAG_RETURNED_FROM_SCRAP = 32;
		static final int FLAG_SET_A11Y_ITEM_DELEGATE = 16384;
		static final int FLAG_TMP_DETACHED = 256;
		static final int FLAG_UPDATE = 2;
		private static final List FULLUPDATE_PAYLOADS;
		static final int PENDING_ACCESSIBILITY_STATE_NOT_SET = -1;
		public final View itemView;
		private int mFlags;
		private boolean mInChangeScrap;
		private int mIsRecyclableCount;
		long mItemId;
		int mItemViewType;
		WeakReference mNestedRecyclerView;
		int mOldPosition;
		RecyclerView mOwnerRecyclerView;
		List mPayloads;
		int mPendingAccessibilityState;
		int mPosition;
		int mPreLayoutPosition;
		private Recycler mScrapContainer;
		ViewHolder mShadowedHolder;
		ViewHolder mShadowingHolder;
		List mUnmodifiedPayloads;
		private int mWasImportantForAccessibilityBeforeHidden;

		static 
		{
			FULLUPDATE_PAYLOADS = Collections.EMPTY_LIST;
		//    0    0:getstatic       #75  <Field List Collections.EMPTY_LIST>
		//    1    3:putstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//*   2    6:return          
		}


/*
		static Recycler access$1002(ViewHolder viewholder, Recycler recycler)
		{
			viewholder.mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			return recycler;
		//    3    5:aload_1         
		//    4    6:areturn         
		}

*/


/*
		static boolean access$1100(ViewHolder viewholder)
		{
			return viewholder.mInChangeScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #108 <Field boolean mInChangeScrap>
		//    2    4:ireturn         
		}

*/


/*
		static boolean access$1102(ViewHolder viewholder, boolean flag)
		{
			viewholder.mInChangeScrap = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #108 <Field boolean mInChangeScrap>
			return flag;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/


/*
		static boolean access$1500(ViewHolder viewholder)
		{
			return viewholder.shouldBeKeptAsChild();
		//    0    0:aload_0         
		//    1    1:invokespecial   #132 <Method boolean shouldBeKeptAsChild()>
		//    2    4:ireturn         
		}

*/


/*
		static int access$1600(ViewHolder viewholder)
		{
			return viewholder.mFlags;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:ireturn         
		}

*/


/*
		static void access$200(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onEnteredHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #142 <Method void onEnteredHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static void access$300(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onLeftHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #146 <Method void onLeftHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static boolean access$900(ViewHolder viewholder)
		{
			return viewholder.doesTransientStatePreventRecycling();
		//    0    0:aload_0         
		//    1    1:invokespecial   #150 <Method boolean doesTransientStatePreventRecycling()>
		//    2    4:ireturn         
		}

*/

		public ViewHolder(View view)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #82  <Method void Object()>
			mPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    8   14:aload_0         
		//    9   15:ldc2w           #87  <Long -1L>
		//   10   18:putfield        #90  <Field long mItemId>
			mItemViewType = -1;
		//   11   21:aload_0         
		//   12   22:iconst_m1       
		//   13   23:putfield        #92  <Field int mItemViewType>
			mPreLayoutPosition = -1;
		//   14   26:aload_0         
		//   15   27:iconst_m1       
		//   16   28:putfield        #94  <Field int mPreLayoutPosition>
			mShadowedHolder = null;
		//   17   31:aload_0         
		//   18   32:aconst_null     
		//   19   33:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   20   36:aload_0         
		//   21   37:aconst_null     
		//   22   38:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			mPayloads = null;
		//   23   41:aload_0         
		//   24   42:aconst_null     
		//   25   43:putfield        #100 <Field List mPayloads>
			mUnmodifiedPayloads = null;
		//   26   46:aload_0         
		//   27   47:aconst_null     
		//   28   48:putfield        #102 <Field List mUnmodifiedPayloads>
			mIsRecyclableCount = 0;
		//   29   51:aload_0         
		//   30   52:iconst_0        
		//   31   53:putfield        #104 <Field int mIsRecyclableCount>
			mScrapContainer = null;
		//   32   56:aload_0         
		//   33   57:aconst_null     
		//   34   58:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = false;
		//   35   61:aload_0         
		//   36   62:iconst_0        
		//   37   63:putfield        #108 <Field boolean mInChangeScrap>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   38   66:aload_0         
		//   39   67:iconst_0        
		//   40   68:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   41   71:aload_0         
		//   42   72:iconst_m1       
		//   43   73:putfield        #112 <Field int mPendingAccessibilityState>
			if(view == null)
		//*  44   76:aload_1         
		//*  45   77:ifnonnull       90
			{
				throw new IllegalArgumentException("itemView may not be null");
		//   46   80:new             #114 <Class IllegalArgumentException>
		//   47   83:dup             
		//   48   84:ldc1            #116 <String "itemView may not be null">
		//   49   86:invokespecial   #119 <Method void IllegalArgumentException(String)>
		//   50   89:athrow          
			} else
			{
				itemView = view;
		//   51   90:aload_0         
		//   52   91:aload_1         
		//   53   92:putfield        #121 <Field View itemView>
				return;
		//   54   95:return          
			}
		}
	}


	public RecyclerView(Context context)
	{
		this(context, ((AttributeSet) (null)));
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aconst_null     
	//    3    3:invokespecial   #369 <Method void RecyclerView(Context, AttributeSet)>
	//    4    6:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset)
	{
		this(context, attributeset, 0);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iconst_0        
	//    4    4:invokespecial   #373 <Method void RecyclerView(Context, AttributeSet, int)>
	//    5    7:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset, int i)
	{
		super(context, attributeset, i);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iload_3         
	//    4    4:invokespecial   #375 <Method void ViewGroup(Context, AttributeSet, int)>
		mObserver = new RecyclerViewDataObserver();
	//    5    7:aload_0         
	//    6    8:new             #104 <Class RecyclerView$RecyclerViewDataObserver>
	//    7   11:dup             
	//    8   12:aload_0         
	//    9   13:invokespecial   #378 <Method void RecyclerView$RecyclerViewDataObserver(RecyclerView)>
	//   10   16:putfield        #380 <Field RecyclerView$RecyclerViewDataObserver mObserver>
		mRecycler = new Recycler();
	//   11   19:aload_0         
	//   12   20:new             #98  <Class RecyclerView$Recycler>
	//   13   23:dup             
	//   14   24:aload_0         
	//   15   25:invokespecial   #381 <Method void RecyclerView$Recycler(RecyclerView)>
	//   16   28:putfield        #383 <Field RecyclerView$Recycler mRecycler>
		mViewInfoStore = new ViewInfoStore();
	//   17   31:aload_0         
	//   18   32:new             #385 <Class ViewInfoStore>
	//   19   35:dup             
	//   20   36:invokespecial   #386 <Method void ViewInfoStore()>
	//   21   39:putfield        #388 <Field ViewInfoStore mViewInfoStore>
		mUpdateChildViewsRunnable = new Runnable() {

			public void run()
			{
				if(mFirstLayoutComplete)
			//*   0    0:aload_0         
			//*   1    1:getfield        #14  <Field RecyclerView this$0>
			//*   2    4:getfield        #23  <Field boolean RecyclerView.mFirstLayoutComplete>
			//*   3    7:ifeq            66
				{
					if(isLayoutRequested())
			//*   4   10:aload_0         
			//*   5   11:getfield        #14  <Field RecyclerView this$0>
			//*   6   14:invokevirtual   #27  <Method boolean RecyclerView.isLayoutRequested()>
			//*   7   17:ifeq            21
						return;
			//    8   20:return          
					if(!mIsAttached)
			//*   9   21:aload_0         
			//*  10   22:getfield        #14  <Field RecyclerView this$0>
			//*  11   25:getfield        #30  <Field boolean RecyclerView.mIsAttached>
			//*  12   28:ifne            39
					{
						requestLayout();
			//   13   31:aload_0         
			//   14   32:getfield        #14  <Field RecyclerView this$0>
			//   15   35:invokevirtual   #33  <Method void RecyclerView.requestLayout()>
						return;
			//   16   38:return          
					}
					if(mLayoutFrozen)
			//*  17   39:aload_0         
			//*  18   40:getfield        #14  <Field RecyclerView this$0>
			//*  19   43:getfield        #36  <Field boolean RecyclerView.mLayoutFrozen>
			//*  20   46:ifeq            58
					{
						mLayoutWasDefered = true;
			//   21   49:aload_0         
			//   22   50:getfield        #14  <Field RecyclerView this$0>
			//   23   53:iconst_1        
			//   24   54:putfield        #39  <Field boolean RecyclerView.mLayoutWasDefered>
						return;
			//   25   57:return          
					} else
					{
						consumePendingUpdateOperations();
			//   26   58:aload_0         
			//   27   59:getfield        #14  <Field RecyclerView this$0>
			//   28   62:invokevirtual   #42  <Method void RecyclerView.consumePendingUpdateOperations()>
						return;
			//   29   65:return          
					}
				} else
				{
					return;
			//   30   66:return          
				}
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//   22   42:aload_0         
	//   23   43:new             #10  <Class RecyclerView$1>
	//   24   46:dup             
	//   25   47:aload_0         
	//   26   48:invokespecial   #389 <Method void RecyclerView$1(RecyclerView)>
	//   27   51:putfield        #391 <Field Runnable mUpdateChildViewsRunnable>
		mTempRect = new Rect();
	//   28   54:aload_0         
	//   29   55:new             #393 <Class Rect>
	//   30   58:dup             
	//   31   59:invokespecial   #394 <Method void Rect()>
	//   32   62:putfield        #396 <Field Rect mTempRect>
		mTempRect2 = new Rect();
	//   33   65:aload_0         
	//   34   66:new             #393 <Class Rect>
	//   35   69:dup             
	//   36   70:invokespecial   #394 <Method void Rect()>
	//   37   73:putfield        #398 <Field Rect mTempRect2>
		mTempRectF = new RectF();
	//   38   76:aload_0         
	//   39   77:new             #400 <Class RectF>
	//   40   80:dup             
	//   41   81:invokespecial   #401 <Method void RectF()>
	//   42   84:putfield        #403 <Field RectF mTempRectF>
		mItemDecorations = new ArrayList();
	//   43   87:aload_0         
	//   44   88:new             #405 <Class ArrayList>
	//   45   91:dup             
	//   46   92:invokespecial   #406 <Method void ArrayList()>
	//   47   95:putfield        #408 <Field ArrayList mItemDecorations>
		mOnItemTouchListeners = new ArrayList();
	//   48   98:aload_0         
	//   49   99:new             #405 <Class ArrayList>
	//   50  102:dup             
	//   51  103:invokespecial   #406 <Method void ArrayList()>
	//   52  106:putfield        #410 <Field ArrayList mOnItemTouchListeners>
		mInterceptRequestLayoutDepth = 0;
	//   53  109:aload_0         
	//   54  110:iconst_0        
	//   55  111:putfield        #412 <Field int mInterceptRequestLayoutDepth>
		mDataSetHasChangedAfterLayout = false;
	//   56  114:aload_0         
	//   57  115:iconst_0        
	//   58  116:putfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
		mDispatchItemsChangedEvent = false;
	//   59  119:aload_0         
	//   60  120:iconst_0        
	//   61  121:putfield        #416 <Field boolean mDispatchItemsChangedEvent>
		mLayoutOrScrollCounter = 0;
	//   62  124:aload_0         
	//   63  125:iconst_0        
	//   64  126:putfield        #418 <Field int mLayoutOrScrollCounter>
		mDispatchScrollCounter = 0;
	//   65  129:aload_0         
	//   66  130:iconst_0        
	//   67  131:putfield        #420 <Field int mDispatchScrollCounter>
		mEdgeEffectFactory = new EdgeEffectFactory();
	//   68  134:aload_0         
	//   69  135:new             #34  <Class RecyclerView$EdgeEffectFactory>
	//   70  138:dup             
	//   71  139:invokespecial   #421 <Method void RecyclerView$EdgeEffectFactory()>
	//   72  142:putfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
		mItemAnimator = ((ItemAnimator) (new DefaultItemAnimator()));
	//   73  145:aload_0         
	//   74  146:new             #425 <Class DefaultItemAnimator>
	//   75  149:dup             
	//   76  150:invokespecial   #426 <Method void DefaultItemAnimator()>
	//   77  153:putfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
		mScrollState = 0;
	//   78  156:aload_0         
	//   79  157:iconst_0        
	//   80  158:putfield        #430 <Field int mScrollState>
		mScrollPointerId = -1;
	//   81  161:aload_0         
	//   82  162:iconst_m1       
	//   83  163:putfield        #432 <Field int mScrollPointerId>
		mScaledHorizontalScrollFactor = 1.401298E-45F;
	//   84  166:aload_0         
	//   85  167:ldc2            #433 <Float 1.401298E-45F>
	//   86  170:putfield        #435 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = 1.401298E-45F;
	//   87  173:aload_0         
	//   88  174:ldc2            #433 <Float 1.401298E-45F>
	//   89  177:putfield        #437 <Field float mScaledVerticalScrollFactor>
		boolean flag1 = true;
	//   90  180:iconst_1        
	//   91  181:istore          5
		mPreserveFocusAfterLayout = true;
	//   92  183:aload_0         
	//   93  184:iconst_1        
	//   94  185:putfield        #439 <Field boolean mPreserveFocusAfterLayout>
		mViewFlinger = new ViewFlinger();
	//   95  188:aload_0         
	//   96  189:new             #133 <Class RecyclerView$ViewFlinger>
	//   97  192:dup             
	//   98  193:aload_0         
	//   99  194:invokespecial   #440 <Method void RecyclerView$ViewFlinger(RecyclerView)>
	//  100  197:putfield        #442 <Field RecyclerView$ViewFlinger mViewFlinger>
		Object obj;
		if(ALLOW_THREAD_GAP_WORK)
	//* 101  200:getstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
	//* 102  203:ifeq            218
			obj = ((Object) (new GapWorker.LayoutPrefetchRegistryImpl()));
	//  103  206:new             #444 <Class GapWorker$LayoutPrefetchRegistryImpl>
	//  104  209:dup             
	//  105  210:invokespecial   #445 <Method void GapWorker$LayoutPrefetchRegistryImpl()>
	//  106  213:astore          6
		else
	//* 107  215:goto            221
			obj = null;
	//  108  218:aconst_null     
	//  109  219:astore          6
		mPrefetchRegistry = ((GapWorker.LayoutPrefetchRegistryImpl) (obj));
	//  110  221:aload_0         
	//  111  222:aload           6
	//  112  224:putfield        #447 <Field GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry>
		mState = new State();
	//  113  227:aload_0         
	//  114  228:new             #124 <Class RecyclerView$State>
	//  115  231:dup             
	//  116  232:invokespecial   #448 <Method void RecyclerView$State()>
	//  117  235:putfield        #450 <Field RecyclerView$State mState>
		mItemsAddedOrRemoved = false;
	//  118  238:aload_0         
	//  119  239:iconst_0        
	//  120  240:putfield        #452 <Field boolean mItemsAddedOrRemoved>
		mItemsChanged = false;
	//  121  243:aload_0         
	//  122  244:iconst_0        
	//  123  245:putfield        #454 <Field boolean mItemsChanged>
		mItemAnimatorListener = ((ItemAnimator.ItemAnimatorListener) (new ItemAnimatorRestoreListener()));
	//  124  248:aload_0         
	//  125  249:new             #55  <Class RecyclerView$ItemAnimatorRestoreListener>
	//  126  252:dup             
	//  127  253:aload_0         
	//  128  254:invokespecial   #455 <Method void RecyclerView$ItemAnimatorRestoreListener(RecyclerView)>
	//  129  257:putfield        #457 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
		mPostedAnimatorRunner = false;
	//  130  260:aload_0         
	//  131  261:iconst_0        
	//  132  262:putfield        #459 <Field boolean mPostedAnimatorRunner>
		mMinMaxLayoutPositions = new int[2];
	//  133  265:aload_0         
	//  134  266:iconst_2        
	//  135  267:newarray        int[]
	//  136  269:putfield        #461 <Field int[] mMinMaxLayoutPositions>
		mScrollOffset = new int[2];
	//  137  272:aload_0         
	//  138  273:iconst_2        
	//  139  274:newarray        int[]
	//  140  276:putfield        #463 <Field int[] mScrollOffset>
		mScrollConsumed = new int[2];
	//  141  279:aload_0         
	//  142  280:iconst_2        
	//  143  281:newarray        int[]
	//  144  283:putfield        #465 <Field int[] mScrollConsumed>
		mNestedOffsets = new int[2];
	//  145  286:aload_0         
	//  146  287:iconst_2        
	//  147  288:newarray        int[]
	//  148  290:putfield        #467 <Field int[] mNestedOffsets>
		mPendingAccessibilityImportanceChange = ((List) (new ArrayList()));
	//  149  293:aload_0         
	//  150  294:new             #405 <Class ArrayList>
	//  151  297:dup             
	//  152  298:invokespecial   #406 <Method void ArrayList()>
	//  153  301:putfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//  154  304:aload_0         
	//  155  305:new             #12  <Class RecyclerView$2>
	//  156  308:dup             
	//  157  309:aload_0         
	//  158  310:invokespecial   #470 <Method void RecyclerView$2(RecyclerView)>
	//  159  313:putfield        #472 <Field Runnable mItemAnimatorRunner>
		mViewInfoProcessCallback = new ViewInfoStore.ProcessCallback() {

			public void processAppeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				animateAppearance(viewholder, itemholderinfo, itemholderinfo1);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #23  <Method void RecyclerView.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//    6   10:return          
			}

			public void processDisappeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				mRecycler.unscrapView(viewholder);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    3    7:aload_1         
			//    4    8:invokevirtual   #36  <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
				animateDisappearance(viewholder, itemholderinfo, itemholderinfo1);
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:aload_1         
			//    8   16:aload_2         
			//    9   17:aload_3         
			//   10   18:invokevirtual   #39  <Method void RecyclerView.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//   11   21:return          
			}

			public void processPersistent(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				viewholder.setIsRecyclable(false);
			//    0    0:aload_1         
			//    1    1:iconst_0        
			//    2    2:invokevirtual   #47  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(mDataSetHasChangedAfterLayout)
			//*   3    5:aload_0         
			//*   4    6:getfield        #14  <Field RecyclerView this$0>
			//*   5    9:getfield        #51  <Field boolean RecyclerView.mDataSetHasChangedAfterLayout>
			//*   6   12:ifeq            40
				{
					if(mItemAnimator.animateChange(viewholder, viewholder, itemholderinfo, itemholderinfo1))
			//*   7   15:aload_0         
			//*   8   16:getfield        #14  <Field RecyclerView this$0>
			//*   9   19:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  10   22:aload_1         
			//*  11   23:aload_1         
			//*  12   24:aload_2         
			//*  13   25:aload_3         
			//*  14   26:invokevirtual   #61  <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  15   29:ifeq            63
					{
						postAnimationRunner();
			//   16   32:aload_0         
			//   17   33:getfield        #14  <Field RecyclerView this$0>
			//   18   36:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
						return;
			//   19   39:return          
					}
				} else
				if(mItemAnimator.animatePersistence(viewholder, itemholderinfo, itemholderinfo1))
			//*  20   40:aload_0         
			//*  21   41:getfield        #14  <Field RecyclerView this$0>
			//*  22   44:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  23   47:aload_1         
			//*  24   48:aload_2         
			//*  25   49:aload_3         
			//*  26   50:invokevirtual   #68  <Method boolean RecyclerView$ItemAnimator.animatePersistence(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  27   53:ifeq            63
					postAnimationRunner();
			//   28   56:aload_0         
			//   29   57:getfield        #14  <Field RecyclerView this$0>
			//   30   60:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
			//   31   63:return          
			}

			public void unused(ViewHolder viewholder)
			{
				mLayout.removeAndRecycleView(viewholder.itemView, mRecycler);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #73  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    3    7:aload_1         
			//    4    8:getfield        #77  <Field View RecyclerView$ViewHolder.itemView>
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    8   18:invokevirtual   #83  <Method void RecyclerView$LayoutManager.removeAndRecycleView(View, RecyclerView$Recycler)>
			//    9   21:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//  160  316:aload_0         
	//  161  317:new             #16  <Class RecyclerView$4>
	//  162  320:dup             
	//  163  321:aload_0         
	//  164  322:invokespecial   #473 <Method void RecyclerView$4(RecyclerView)>
	//  165  325:putfield        #475 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
		if(attributeset != null)
	//* 166  328:aload_2         
	//* 167  329:ifnull          363
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, CLIP_TO_PADDING_ATTR, i, 0)));
	//  168  332:aload_1         
	//  169  333:aload_2         
	//  170  334:getstatic       #328 <Field int[] CLIP_TO_PADDING_ATTR>
	//  171  337:iload_3         
	//  172  338:iconst_0        
	//  173  339:invokevirtual   #479 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  174  342:astore          6
			mClipToPadding = ((TypedArray) (obj)).getBoolean(0, true);
	//  175  344:aload_0         
	//  176  345:aload           6
	//  177  347:iconst_0        
	//  178  348:iconst_1        
	//  179  349:invokevirtual   #485 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  180  352:putfield        #487 <Field boolean mClipToPadding>
			((TypedArray) (obj)).recycle();
	//  181  355:aload           6
	//  182  357:invokevirtual   #490 <Method void TypedArray.recycle()>
		} else
	//* 183  360:goto            368
		{
			mClipToPadding = true;
	//  184  363:aload_0         
	//  185  364:iconst_1        
	//  186  365:putfield        #487 <Field boolean mClipToPadding>
		}
		setScrollContainer(true);
	//  187  368:aload_0         
	//  188  369:iconst_1        
	//  189  370:invokevirtual   #494 <Method void setScrollContainer(boolean)>
		setFocusableInTouchMode(true);
	//  190  373:aload_0         
	//  191  374:iconst_1        
	//  192  375:invokevirtual   #497 <Method void setFocusableInTouchMode(boolean)>
		obj = ((Object) (ViewConfiguration.get(context)));
	//  193  378:aload_1         
	//  194  379:invokestatic    #503 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//  195  382:astore          6
		mTouchSlop = ((ViewConfiguration) (obj)).getScaledTouchSlop();
	//  196  384:aload_0         
	//  197  385:aload           6
	//  198  387:invokevirtual   #507 <Method int ViewConfiguration.getScaledTouchSlop()>
	//  199  390:putfield        #509 <Field int mTouchSlop>
		mScaledHorizontalScrollFactor = ViewConfigurationCompat.getScaledHorizontalScrollFactor(((ViewConfiguration) (obj)), context);
	//  200  393:aload_0         
	//  201  394:aload           6
	//  202  396:aload_1         
	//  203  397:invokestatic    #515 <Method float ViewConfigurationCompat.getScaledHorizontalScrollFactor(ViewConfiguration, Context)>
	//  204  400:putfield        #435 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = ViewConfigurationCompat.getScaledVerticalScrollFactor(((ViewConfiguration) (obj)), context);
	//  205  403:aload_0         
	//  206  404:aload           6
	//  207  406:aload_1         
	//  208  407:invokestatic    #518 <Method float ViewConfigurationCompat.getScaledVerticalScrollFactor(ViewConfiguration, Context)>
	//  209  410:putfield        #437 <Field float mScaledVerticalScrollFactor>
		mMinFlingVelocity = ((ViewConfiguration) (obj)).getScaledMinimumFlingVelocity();
	//  210  413:aload_0         
	//  211  414:aload           6
	//  212  416:invokevirtual   #521 <Method int ViewConfiguration.getScaledMinimumFlingVelocity()>
	//  213  419:putfield        #523 <Field int mMinFlingVelocity>
		mMaxFlingVelocity = ((ViewConfiguration) (obj)).getScaledMaximumFlingVelocity();
	//  214  422:aload_0         
	//  215  423:aload           6
	//  216  425:invokevirtual   #526 <Method int ViewConfiguration.getScaledMaximumFlingVelocity()>
	//  217  428:putfield        #528 <Field int mMaxFlingVelocity>
		boolean flag;
		if(getOverScrollMode() == 2)
	//* 218  431:aload_0         
	//* 219  432:invokevirtual   #531 <Method int getOverScrollMode()>
	//* 220  435:iconst_2        
	//* 221  436:icmpne          445
			flag = true;
	//  222  439:iconst_1        
	//  223  440:istore          4
		else
	//* 224  442:goto            448
			flag = false;
	//  225  445:iconst_0        
	//  226  446:istore          4
		setWillNotDraw(flag);
	//  227  448:aload_0         
	//  228  449:iload           4
	//  229  451:invokevirtual   #534 <Method void setWillNotDraw(boolean)>
		mItemAnimator.setListener(mItemAnimatorListener);
	//  230  454:aload_0         
	//  231  455:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  232  458:aload_0         
	//  233  459:getfield        #457 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//  234  462:invokevirtual   #538 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		initAdapterManager();
	//  235  465:aload_0         
	//  236  466:invokevirtual   #541 <Method void initAdapterManager()>
		initChildrenHelper();
	//  237  469:aload_0         
	//  238  470:invokespecial   #544 <Method void initChildrenHelper()>
		if(ViewCompat.getImportantForAccessibility(((View) (this))) == 0)
	//* 239  473:aload_0         
	//* 240  474:invokestatic    #550 <Method int ViewCompat.getImportantForAccessibility(View)>
	//* 241  477:ifne            485
			ViewCompat.setImportantForAccessibility(((View) (this)), 1);
	//  242  480:aload_0         
	//  243  481:iconst_1        
	//  244  482:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
		mAccessibilityManager = (AccessibilityManager)getContext().getSystemService("accessibility");
	//  245  485:aload_0         
	//  246  486:aload_0         
	//  247  487:invokevirtual   #558 <Method Context getContext()>
	//  248  490:ldc2            #560 <String "accessibility">
	//  249  493:invokevirtual   #564 <Method Object Context.getSystemService(String)>
	//  250  496:checkcast       #566 <Class AccessibilityManager>
	//  251  499:putfield        #568 <Field AccessibilityManager mAccessibilityManager>
		setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
	//  252  502:aload_0         
	//  253  503:new             #570 <Class RecyclerViewAccessibilityDelegate>
	//  254  506:dup             
	//  255  507:aload_0         
	//  256  508:invokespecial   #571 <Method void RecyclerViewAccessibilityDelegate(RecyclerView)>
	//  257  511:invokevirtual   #575 <Method void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)>
		if(attributeset != null)
	//* 258  514:aload_2         
	//* 259  515:ifnull          675
		{
			TypedArray typedarray = context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, 0);
	//  260  518:aload_1         
	//  261  519:aload_2         
	//  262  520:getstatic       #579 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
	//  263  523:iload_3         
	//  264  524:iconst_0        
	//  265  525:invokevirtual   #479 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  266  528:astore          6
			String s = typedarray.getString(android.support.v7.recyclerview.R.styleable.RecyclerView_layoutManager);
	//  267  530:aload           6
	//  268  532:getstatic       #582 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_layoutManager>
	//  269  535:invokevirtual   #586 <Method String TypedArray.getString(int)>
	//  270  538:astore          7
			if(typedarray.getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_descendantFocusability, -1) == -1)
	//* 271  540:aload           6
	//* 272  542:getstatic       #589 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_descendantFocusability>
	//* 273  545:iconst_m1       
	//* 274  546:invokevirtual   #593 <Method int TypedArray.getInt(int, int)>
	//* 275  549:iconst_m1       
	//* 276  550:icmpne          560
				setDescendantFocusability(0x40000);
	//  277  553:aload_0         
	//  278  554:ldc2            #594 <Int 0x40000>
	//  279  557:invokevirtual   #598 <Method void setDescendantFocusability(int)>
			mEnableFastScroller = typedarray.getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollEnabled, false);
	//  280  560:aload_0         
	//  281  561:aload           6
	//  282  563:getstatic       #601 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollEnabled>
	//  283  566:iconst_0        
	//  284  567:invokevirtual   #485 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  285  570:putfield        #603 <Field boolean mEnableFastScroller>
			if(mEnableFastScroller)
	//* 286  573:aload_0         
	//* 287  574:getfield        #603 <Field boolean mEnableFastScroller>
	//* 288  577:ifeq            622
				initFastScroller((StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalTrackDrawable), (StateListDrawable)typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalThumbDrawable), typedarray.getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalTrackDrawable));
	//  289  580:aload_0         
	//  290  581:aload           6
	//  291  583:getstatic       #606 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalThumbDrawable>
	//  292  586:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  293  589:checkcast       #612 <Class StateListDrawable>
	//  294  592:aload           6
	//  295  594:getstatic       #615 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalTrackDrawable>
	//  296  597:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  297  600:aload           6
	//  298  602:getstatic       #618 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalThumbDrawable>
	//  299  605:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  300  608:checkcast       #612 <Class StateListDrawable>
	//  301  611:aload           6
	//  302  613:getstatic       #621 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalTrackDrawable>
	//  303  616:invokevirtual   #610 <Method Drawable TypedArray.getDrawable(int)>
	//  304  619:invokevirtual   #625 <Method void initFastScroller(StateListDrawable, Drawable, StateListDrawable, Drawable)>
			typedarray.recycle();
	//  305  622:aload           6
	//  306  624:invokevirtual   #490 <Method void TypedArray.recycle()>
			createLayoutManager(context, s, attributeset, i, 0);
	//  307  627:aload_0         
	//  308  628:aload_1         
	//  309  629:aload           7
	//  310  631:aload_2         
	//  311  632:iload_3         
	//  312  633:iconst_0        
	//  313  634:invokespecial   #629 <Method void createLayoutManager(Context, String, AttributeSet, int, int)>
			flag = flag1;
	//  314  637:iload           5
	//  315  639:istore          4
			if(android.os.Build.VERSION.SDK_INT >= 21)
	//* 316  641:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//* 317  644:bipush          21
	//* 318  646:icmplt          686
			{
				context = ((Context) (context.obtainStyledAttributes(attributeset, NESTED_SCROLLING_ATTRS, i, 0)));
	//  319  649:aload_1         
	//  320  650:aload_2         
	//  321  651:getstatic       #325 <Field int[] NESTED_SCROLLING_ATTRS>
	//  322  654:iload_3         
	//  323  655:iconst_0        
	//  324  656:invokevirtual   #479 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//  325  659:astore_1        
				flag = ((TypedArray) (context)).getBoolean(0, true);
	//  326  660:aload_1         
	//  327  661:iconst_0        
	//  328  662:iconst_1        
	//  329  663:invokevirtual   #485 <Method boolean TypedArray.getBoolean(int, boolean)>
	//  330  666:istore          4
				((TypedArray) (context)).recycle();
	//  331  668:aload_1         
	//  332  669:invokevirtual   #490 <Method void TypedArray.recycle()>
			}
		} else
	//* 333  672:goto            686
		{
			setDescendantFocusability(0x40000);
	//  334  675:aload_0         
	//  335  676:ldc2            #594 <Int 0x40000>
	//  336  679:invokevirtual   #598 <Method void setDescendantFocusability(int)>
			flag = flag1;
	//  337  682:iload           5
	//  338  684:istore          4
		}
		setNestedScrollingEnabled(flag);
	//  339  686:aload_0         
	//  340  687:iload           4
	//  341  689:invokevirtual   #632 <Method void setNestedScrollingEnabled(boolean)>
	//  342  692:return          
	}

	private void addAnimatingView(ViewHolder viewholder)
	{
		View view = viewholder.itemView;
	//    0    0:aload_1         
	//    1    1:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//    2    4:astore_3        
		boolean flag;
		if(view.getParent() == this)
	//*   3    5:aload_3         
	//*   4    6:invokevirtual   #670 <Method ViewParent View.getParent()>
	//*   5    9:aload_0         
	//*   6   10:if_acmpne       18
			flag = true;
	//    7   13:iconst_1        
	//    8   14:istore_2        
		else
	//*   9   15:goto            20
			flag = false;
	//   10   18:iconst_0        
	//   11   19:istore_2        
		mRecycler.unscrapView(getChildViewHolder(view));
	//   12   20:aload_0         
	//   13   21:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   14   24:aload_0         
	//   15   25:aload_3         
	//   16   26:invokevirtual   #674 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   29:invokevirtual   #677 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		if(viewholder.isTmpDetached())
	//*  18   32:aload_1         
	//*  19   33:invokevirtual   #680 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*  20   36:ifeq            54
		{
			mChildHelper.attachViewToParent(view, -1, view.getLayoutParams(), true);
	//   21   39:aload_0         
	//   22   40:getfield        #682 <Field ChildHelper mChildHelper>
	//   23   43:aload_3         
	//   24   44:iconst_m1       
	//   25   45:aload_3         
	//   26   46:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   27   49:iconst_1        
	//   28   50:invokevirtual   #691 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
			return;
	//   29   53:return          
		}
		if(!flag)
	//*  30   54:iload_2         
	//*  31   55:ifne            68
		{
			mChildHelper.addView(view, true);
	//   32   58:aload_0         
	//   33   59:getfield        #682 <Field ChildHelper mChildHelper>
	//   34   62:aload_3         
	//   35   63:iconst_1        
	//   36   64:invokevirtual   #695 <Method void ChildHelper.addView(View, boolean)>
			return;
	//   37   67:return          
		} else
		{
			mChildHelper.hide(view);
	//   38   68:aload_0         
	//   39   69:getfield        #682 <Field ChildHelper mChildHelper>
	//   40   72:aload_3         
	//   41   73:invokevirtual   #699 <Method void ChildHelper.hide(View)>
			return;
	//   42   76:return          
		}
	}

	private void animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1, boolean flag, boolean flag1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #704 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(flag)
	//*   3    5:iload           5
	//*   4    7:ifeq            15
			addAnimatingView(viewholder);
	//    5   10:aload_0         
	//    6   11:aload_1         
	//    7   12:invokespecial   #706 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		if(viewholder != viewholder1)
	//*   8   15:aload_1         
	//*   9   16:aload_2         
	//*  10   17:if_acmpeq       58
		{
			if(flag1)
	//*  11   20:iload           6
	//*  12   22:ifeq            30
				addAnimatingView(viewholder1);
	//   13   25:aload_0         
	//   14   26:aload_2         
	//   15   27:invokespecial   #706 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			viewholder.mShadowedHolder = viewholder1;
	//   16   30:aload_1         
	//   17   31:aload_2         
	//   18   32:putfield        #710 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			addAnimatingView(viewholder);
	//   19   35:aload_0         
	//   20   36:aload_1         
	//   21   37:invokespecial   #706 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			mRecycler.unscrapView(viewholder);
	//   22   40:aload_0         
	//   23   41:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   24   44:aload_1         
	//   25   45:invokevirtual   #677 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			viewholder1.setIsRecyclable(false);
	//   26   48:aload_2         
	//   27   49:iconst_0        
	//   28   50:invokevirtual   #704 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			viewholder1.mShadowingHolder = viewholder;
	//   29   53:aload_2         
	//   30   54:aload_1         
	//   31   55:putfield        #713 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		}
		if(mItemAnimator.animateChange(viewholder, viewholder1, itemholderinfo, itemholderinfo1))
	//*  32   58:aload_0         
	//*  33   59:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   62:aload_1         
	//*  35   63:aload_2         
	//*  36   64:aload_3         
	//*  37   65:aload           4
	//*  38   67:invokevirtual   #716 <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  39   70:ifeq            77
			postAnimationRunner();
	//   40   73:aload_0         
	//   41   74:invokevirtual   #719 <Method void postAnimationRunner()>
	//   42   77:return          
	}

	private void cancelTouch()
	{
		resetTouch();
	//    0    0:aload_0         
	//    1    1:invokespecial   #723 <Method void resetTouch()>
		setScrollState(0);
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:invokevirtual   #726 <Method void setScrollState(int)>
	//    5    9:return          
	}

	static void clearNestedRecyclerViewIfNotNested(ViewHolder viewholder)
	{
		if(viewholder.mNestedRecyclerView != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #731 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   2    4:ifnull          61
		{
			for(Object obj = ((Object) ((View)viewholder.mNestedRecyclerView.get())); obj != null;)
	//*   3    7:aload_0         
	//*   4    8:getfield        #731 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//*   5   11:invokevirtual   #736 <Method Object WeakReference.get()>
	//*   6   14:checkcast       #666 <Class View>
	//*   7   17:astore_1        
	//*   8   18:aload_1         
	//*   9   19:ifnull          56
			{
				if(obj == viewholder.itemView)
	//*  10   22:aload_1         
	//*  11   23:aload_0         
	//*  12   24:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  13   27:if_acmpne       31
					return;
	//   14   30:return          
				obj = ((Object) (((View) (obj)).getParent()));
	//   15   31:aload_1         
	//   16   32:invokevirtual   #670 <Method ViewParent View.getParent()>
	//   17   35:astore_1        
				if(obj instanceof View)
	//*  18   36:aload_1         
	//*  19   37:instanceof      #666 <Class View>
	//*  20   40:ifeq            51
					obj = ((Object) ((View)obj));
	//   21   43:aload_1         
	//   22   44:checkcast       #666 <Class View>
	//   23   47:astore_1        
				else
	//*  24   48:goto            18
					obj = null;
	//   25   51:aconst_null     
	//   26   52:astore_1        
			}

	//*  27   53:goto            18
			viewholder.mNestedRecyclerView = null;
	//   28   56:aload_0         
	//   29   57:aconst_null     
	//   30   58:putfield        #731 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		}
	//   31   61:return          
	}

	private void createLayoutManager(Context context, String s, AttributeSet attributeset, int i, int j)
	{
		String s1;
		if(s == null)
			break MISSING_BLOCK_LABEL_430;
	//    0    0:aload_2         
	//    1    1:ifnull          430
		s = s.trim();
	//    2    4:aload_2         
	//    3    5:invokevirtual   #754 <Method String String.trim()>
	//    4    8:astore_2        
		if(s.isEmpty())
			break MISSING_BLOCK_LABEL_430;
	//    5    9:aload_2         
	//    6   10:invokevirtual   #757 <Method boolean String.isEmpty()>
	//    7   13:ifne            430
		s1 = getFullClassName(context, s);
	//    8   16:aload_0         
	//    9   17:aload_1         
	//   10   18:aload_2         
	//   11   19:invokespecial   #761 <Method String getFullClassName(Context, String)>
	//   12   22:astore          7
		if(isInEditMode())
	//*  13   24:aload_0         
	//*  14   25:invokevirtual   #764 <Method boolean isInEditMode()>
	//*  15   28:ifeq            42
		{
			s = ((String) (((Object)this).getClass().getClassLoader()));
	//   16   31:aload_0         
	//   17   32:invokevirtual   #770 <Method Class Object.getClass()>
	//   18   35:invokevirtual   #774 <Method ClassLoader Class.getClassLoader()>
	//   19   38:astore_2        
			break MISSING_BLOCK_LABEL_47;
	//   20   39:goto            47
		}
		s = ((String) (context.getClassLoader()));
	//   21   42:aload_1         
	//   22   43:invokevirtual   #775 <Method ClassLoader Context.getClassLoader()>
	//   23   46:astore_2        
		Class class1 = ((ClassLoader) (s)).loadClass(s1).asSubclass(android/support/v7/widget/RecyclerView$LayoutManager);
	//   24   47:aload_2         
	//   25   48:aload           7
	//   26   50:invokevirtual   #781 <Method Class ClassLoader.loadClass(String)>
	//   27   53:ldc1            #61  <Class RecyclerView$LayoutManager>
	//   28   55:invokevirtual   #785 <Method Class Class.asSubclass(Class)>
	//   29   58:astore          8
		Object obj = null;
	//   30   60:aconst_null     
	//   31   61:astore          6
		s = ((String) (class1.getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE)));
	//   32   63:aload           8
	//   33   65:getstatic       #359 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   34   68:invokevirtual   #789 <Method Constructor Class.getConstructor(Class[])>
	//   35   71:astore_2        
		context = ((Context) (new Object[] {
			context, attributeset, Integer.valueOf(i), Integer.valueOf(j)
		}));
	//   36   72:iconst_4        
	//   37   73:anewarray       Object[]
	//   38   76:dup             
	//   39   77:iconst_0        
	//   40   78:aload_1         
	//   41   79:aastore         
	//   42   80:dup             
	//   43   81:iconst_1        
	//   44   82:aload_3         
	//   45   83:aastore         
	//   46   84:dup             
	//   47   85:iconst_2        
	//   48   86:iload           4
	//   49   88:invokestatic    #793 <Method Integer Integer.valueOf(int)>
	//   50   91:aastore         
	//   51   92:dup             
	//   52   93:iconst_3        
	//   53   94:iload           5
	//   54   96:invokestatic    #793 <Method Integer Integer.valueOf(int)>
	//   55   99:aastore         
	//   56  100:astore_1        
		break MISSING_BLOCK_LABEL_118;
	//   57  101:goto            118
		context;
	//   58  104:astore_1        
		s = ((String) (class1.getConstructor(new Class[0])));
	//   59  105:aload           8
	//   60  107:iconst_0        
	//   61  108:anewarray       Class[]
	//   62  111:invokevirtual   #789 <Method Constructor Class.getConstructor(Class[])>
	//   63  114:astore_2        
		context = ((Context) (obj));
	//   64  115:aload           6
	//   65  117:astore_1        
		try
		{
			((Constructor) (s)).setAccessible(true);
	//   66  118:aload_2         
	//   67  119:iconst_1        
	//   68  120:invokevirtual   #798 <Method void Constructor.setAccessible(boolean)>
			setLayoutManager((LayoutManager)((Constructor) (s)).newInstance(((Object []) (context))));
	//   69  123:aload_0         
	//   70  124:aload_2         
	//   71  125:aload_1         
	//   72  126:invokevirtual   #802 <Method Object Constructor.newInstance(Object[])>
	//   73  129:checkcast       #61  <Class RecyclerView$LayoutManager>
	//   74  132:invokevirtual   #806 <Method void setLayoutManager(RecyclerView$LayoutManager)>
			return;
	//   75  135:return          
		}
	//*  76  136:astore_2        
	//*  77  137:aload_2         
	//*  78  138:aload_1         
	//*  79  139:invokevirtual   #810 <Method Throwable NoSuchMethodException.initCause(Throwable)>
	//*  80  142:pop             
	//*  81  143:new             #812 <Class StringBuilder>
	//*  82  146:dup             
	//*  83  147:invokespecial   #813 <Method void StringBuilder()>
	//*  84  150:astore_1        
	//*  85  151:aload_1         
	//*  86  152:aload_3         
	//*  87  153:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//*  88  158:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//*  89  161:pop             
	//*  90  162:aload_1         
	//*  91  163:ldc2            #822 <String ": Error creating LayoutManager ">
	//*  92  166:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//*  93  169:pop             
	//*  94  170:aload_1         
	//*  95  171:aload           7
	//*  96  173:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//*  97  176:pop             
	//*  98  177:new             #824 <Class IllegalStateException>
	//*  99  180:dup             
	//* 100  181:aload_1         
	//* 101  182:invokevirtual   #827 <Method String StringBuilder.toString()>
	//* 102  185:aload_2         
	//* 103  186:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//* 104  189:athrow          
	//* 105  190:astore_1        
	//* 106  191:new             #812 <Class StringBuilder>
	//* 107  194:dup             
	//* 108  195:invokespecial   #813 <Method void StringBuilder()>
	//* 109  198:astore_2        
	//* 110  199:aload_2         
	//* 111  200:aload_3         
	//* 112  201:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//* 113  206:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 114  209:pop             
	//* 115  210:aload_2         
	//* 116  211:ldc2            #832 <String ": Class is not a LayoutManager ">
	//* 117  214:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 118  217:pop             
	//* 119  218:aload_2         
	//* 120  219:aload           7
	//* 121  221:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 122  224:pop             
	//* 123  225:new             #824 <Class IllegalStateException>
	//* 124  228:dup             
	//* 125  229:aload_2         
	//* 126  230:invokevirtual   #827 <Method String StringBuilder.toString()>
	//* 127  233:aload_1         
	//* 128  234:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//* 129  237:athrow          
	//* 130  238:astore_1        
	//* 131  239:new             #812 <Class StringBuilder>
	//* 132  242:dup             
	//* 133  243:invokespecial   #813 <Method void StringBuilder()>
	//* 134  246:astore_2        
	//* 135  247:aload_2         
	//* 136  248:aload_3         
	//* 137  249:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//* 138  254:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 139  257:pop             
	//* 140  258:aload_2         
	//* 141  259:ldc2            #834 <String ": Cannot access non-public constructor ">
	//* 142  262:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 143  265:pop             
	//* 144  266:aload_2         
	//* 145  267:aload           7
	//* 146  269:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 147  272:pop             
	//* 148  273:new             #824 <Class IllegalStateException>
	//* 149  276:dup             
	//* 150  277:aload_2         
	//* 151  278:invokevirtual   #827 <Method String StringBuilder.toString()>
	//* 152  281:aload_1         
	//* 153  282:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//* 154  285:athrow          
	//* 155  286:astore_1        
	//* 156  287:new             #812 <Class StringBuilder>
	//* 157  290:dup             
	//* 158  291:invokespecial   #813 <Method void StringBuilder()>
	//* 159  294:astore_2        
	//* 160  295:aload_2         
	//* 161  296:aload_3         
	//* 162  297:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//* 163  302:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 164  305:pop             
	//* 165  306:aload_2         
	//* 166  307:ldc2            #836 <String ": Could not instantiate the LayoutManager: ">
	//* 167  310:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 168  313:pop             
	//* 169  314:aload_2         
	//* 170  315:aload           7
	//* 171  317:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 172  320:pop             
	//* 173  321:new             #824 <Class IllegalStateException>
	//* 174  324:dup             
	//* 175  325:aload_2         
	//* 176  326:invokevirtual   #827 <Method String StringBuilder.toString()>
	//* 177  329:aload_1         
	//* 178  330:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//* 179  333:athrow          
	//* 180  334:astore_1        
	//* 181  335:new             #812 <Class StringBuilder>
	//* 182  338:dup             
	//* 183  339:invokespecial   #813 <Method void StringBuilder()>
	//* 184  342:astore_2        
	//* 185  343:aload_2         
	//* 186  344:aload_3         
	//* 187  345:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//* 188  350:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 189  353:pop             
	//* 190  354:aload_2         
	//* 191  355:ldc2            #836 <String ": Could not instantiate the LayoutManager: ">
	//* 192  358:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 193  361:pop             
	//* 194  362:aload_2         
	//* 195  363:aload           7
	//* 196  365:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//* 197  368:pop             
	//* 198  369:new             #824 <Class IllegalStateException>
	//* 199  372:dup             
	//* 200  373:aload_2         
	//* 201  374:invokevirtual   #827 <Method String StringBuilder.toString()>
	//* 202  377:aload_1         
	//* 203  378:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//* 204  381:athrow          
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 205  382:astore_1        
		{
			s = ((String) (new StringBuilder()));
	//  206  383:new             #812 <Class StringBuilder>
	//  207  386:dup             
	//  208  387:invokespecial   #813 <Method void StringBuilder()>
	//  209  390:astore_2        
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Could not instantiate the LayoutManager: ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Could not instantiate the LayoutManager: ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Cannot access non-public constructor ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
		{
			s = ((String) (new StringBuilder()));
			((StringBuilder) (s)).append(attributeset.getPositionDescription());
			((StringBuilder) (s)).append(": Class is not a LayoutManager ");
			((StringBuilder) (s)).append(s1);
			throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
		}
		break MISSING_BLOCK_LABEL_391;
		s;
		((NoSuchMethodException) (s)).initCause(((Throwable) (context)));
		context = ((Context) (new StringBuilder()));
		((StringBuilder) (context)).append(attributeset.getPositionDescription());
		((StringBuilder) (context)).append(": Error creating LayoutManager ");
		((StringBuilder) (context)).append(s1);
		throw new IllegalStateException(((StringBuilder) (context)).toString(), ((Throwable) (s)));
		((StringBuilder) (s)).append(attributeset.getPositionDescription());
	//  210  391:aload_2         
	//  211  392:aload_3         
	//  212  393:invokeinterface #816 <Method String AttributeSet.getPositionDescription()>
	//  213  398:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  214  401:pop             
		((StringBuilder) (s)).append(": Unable to find LayoutManager ");
	//  215  402:aload_2         
	//  216  403:ldc2            #838 <String ": Unable to find LayoutManager ">
	//  217  406:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  218  409:pop             
		((StringBuilder) (s)).append(s1);
	//  219  410:aload_2         
	//  220  411:aload           7
	//  221  413:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  222  416:pop             
		throw new IllegalStateException(((StringBuilder) (s)).toString(), ((Throwable) (context)));
	//  223  417:new             #824 <Class IllegalStateException>
	//  224  420:dup             
	//  225  421:aload_2         
	//  226  422:invokevirtual   #827 <Method String StringBuilder.toString()>
	//  227  425:aload_1         
	//  228  426:invokespecial   #830 <Method void IllegalStateException(String, Throwable)>
	//  229  429:athrow          
	//  230  430:return          
	}

	private boolean didChildRangeChange(int i, int j)
	{
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//    3    5:invokespecial   #844 <Method void findMinMaxChildLayoutPositions(int[])>
		int ai[] = mMinMaxLayoutPositions;
	//    4    8:aload_0         
	//    5    9:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//    6   12:astore          4
		boolean flag = false;
	//    7   14:iconst_0        
	//    8   15:istore_3        
		if(ai[0] != i || mMinMaxLayoutPositions[1] != j)
	//*   9   16:aload           4
	//*  10   18:iconst_0        
	//*  11   19:iaload          
	//*  12   20:iload_1         
	//*  13   21:icmpne          34
	//*  14   24:aload_0         
	//*  15   25:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//*  16   28:iconst_1        
	//*  17   29:iaload          
	//*  18   30:iload_2         
	//*  19   31:icmpeq          36
			flag = true;
	//   20   34:iconst_1        
	//   21   35:istore_3        
		return flag;
	//   22   36:iload_3         
	//   23   37:ireturn         
	}

	private void dispatchContentChangedIfNecessary()
	{
		int i = mEatenAccessibilityChangeFlags;
	//    0    0:aload_0         
	//    1    1:getfield        #847 <Field int mEatenAccessibilityChangeFlags>
	//    2    4:istore_1        
		mEatenAccessibilityChangeFlags = 0;
	//    3    5:aload_0         
	//    4    6:iconst_0        
	//    5    7:putfield        #847 <Field int mEatenAccessibilityChangeFlags>
		if(i != 0 && isAccessibilityEnabled())
	//*   6   10:iload_1         
	//*   7   11:ifeq            42
	//*   8   14:aload_0         
	//*   9   15:invokevirtual   #850 <Method boolean isAccessibilityEnabled()>
	//*  10   18:ifeq            42
		{
			AccessibilityEvent accessibilityevent = AccessibilityEvent.obtain();
	//   11   21:invokestatic    #856 <Method AccessibilityEvent AccessibilityEvent.obtain()>
	//   12   24:astore_2        
			accessibilityevent.setEventType(2048);
	//   13   25:aload_2         
	//   14   26:sipush          2048
	//   15   29:invokevirtual   #859 <Method void AccessibilityEvent.setEventType(int)>
			AccessibilityEventCompat.setContentChangeTypes(accessibilityevent, i);
	//   16   32:aload_2         
	//   17   33:iload_1         
	//   18   34:invokestatic    #865 <Method void AccessibilityEventCompat.setContentChangeTypes(AccessibilityEvent, int)>
			sendAccessibilityEventUnchecked(accessibilityevent);
	//   19   37:aload_0         
	//   20   38:aload_2         
	//   21   39:invokevirtual   #869 <Method void sendAccessibilityEventUnchecked(AccessibilityEvent)>
		}
	//   22   42:return          
	}

	private void dispatchLayoutStep1()
	{
		State state = mState;
	//    0    0:aload_0         
	//    1    1:getfield        #450 <Field RecyclerView$State mState>
	//    2    4:astore          7
		boolean flag = true;
	//    3    6:iconst_1        
	//    4    7:istore          4
		state.assertLayoutStep(1);
	//    5    9:aload           7
	//    6   11:iconst_1        
	//    7   12:invokevirtual   #873 <Method void RecyclerView$State.assertLayoutStep(int)>
		fillRemainingScrollValues(mState);
	//    8   15:aload_0         
	//    9   16:aload_0         
	//   10   17:getfield        #450 <Field RecyclerView$State mState>
	//   11   20:invokevirtual   #877 <Method void fillRemainingScrollValues(RecyclerView$State)>
		mState.mIsMeasuring = false;
	//   12   23:aload_0         
	//   13   24:getfield        #450 <Field RecyclerView$State mState>
	//   14   27:iconst_0        
	//   15   28:putfield        #880 <Field boolean RecyclerView$State.mIsMeasuring>
		startInterceptRequestLayout();
	//   16   31:aload_0         
	//   17   32:invokevirtual   #883 <Method void startInterceptRequestLayout()>
		mViewInfoStore.clear();
	//   18   35:aload_0         
	//   19   36:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   20   39:invokevirtual   #886 <Method void ViewInfoStore.clear()>
		onEnterLayoutOrScroll();
	//   21   42:aload_0         
	//   22   43:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
		processAdapterUpdatesAndSetAnimationFlags();
	//   23   46:aload_0         
	//   24   47:invokespecial   #892 <Method void processAdapterUpdatesAndSetAnimationFlags()>
		saveFocusInfo();
	//   25   50:aload_0         
	//   26   51:invokespecial   #895 <Method void saveFocusInfo()>
		state = mState;
	//   27   54:aload_0         
	//   28   55:getfield        #450 <Field RecyclerView$State mState>
	//   29   58:astore          7
		if(!mState.mRunSimpleAnimations || !mItemsChanged)
	//*  30   60:aload_0         
	//*  31   61:getfield        #450 <Field RecyclerView$State mState>
	//*  32   64:getfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  33   67:ifeq            80
	//*  34   70:aload_0         
	//*  35   71:getfield        #454 <Field boolean mItemsChanged>
	//*  36   74:ifeq            80
	//*  37   77:goto            83
			flag = false;
	//   38   80:iconst_0        
	//   39   81:istore          4
		state.mTrackOldChangeHolders = flag;
	//   40   83:aload           7
	//   41   85:iload           4
	//   42   87:putfield        #901 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
		mItemsChanged = false;
	//   43   90:aload_0         
	//   44   91:iconst_0        
	//   45   92:putfield        #454 <Field boolean mItemsChanged>
		mItemsAddedOrRemoved = false;
	//   46   95:aload_0         
	//   47   96:iconst_0        
	//   48   97:putfield        #452 <Field boolean mItemsAddedOrRemoved>
		mState.mInPreLayout = mState.mRunPredictiveAnimations;
	//   49  100:aload_0         
	//   50  101:getfield        #450 <Field RecyclerView$State mState>
	//   51  104:aload_0         
	//   52  105:getfield        #450 <Field RecyclerView$State mState>
	//   53  108:getfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   54  111:putfield        #907 <Field boolean RecyclerView$State.mInPreLayout>
		mState.mItemCount = mAdapter.getItemCount();
	//   55  114:aload_0         
	//   56  115:getfield        #450 <Field RecyclerView$State mState>
	//   57  118:aload_0         
	//   58  119:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   59  122:invokevirtual   #912 <Method int RecyclerView$Adapter.getItemCount()>
	//   60  125:putfield        #915 <Field int RecyclerView$State.mItemCount>
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//   61  128:aload_0         
	//   62  129:aload_0         
	//   63  130:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//   64  133:invokespecial   #844 <Method void findMinMaxChildLayoutPositions(int[])>
		if(mState.mRunSimpleAnimations)
	//*  65  136:aload_0         
	//*  66  137:getfield        #450 <Field RecyclerView$State mState>
	//*  67  140:getfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  68  143:ifeq            307
		{
			int k = mChildHelper.getChildCount();
	//   69  146:aload_0         
	//   70  147:getfield        #682 <Field ChildHelper mChildHelper>
	//   71  150:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//   72  153:istore_2        
			for(int i = 0; i < k; i++)
	//*  73  154:iconst_0        
	//*  74  155:istore_1        
	//*  75  156:iload_1         
	//*  76  157:iload_2         
	//*  77  158:icmpge          307
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   78  161:aload_0         
	//   79  162:getfield        #682 <Field ChildHelper mChildHelper>
	//   80  165:iload_1         
	//   81  166:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   82  169:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   83  172:astore          7
				if(viewholder.shouldIgnore() || viewholder.isInvalid() && !mAdapter.hasStableIds())
	//*  84  174:aload           7
	//*  85  176:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  86  179:ifne            300
	//*  87  182:aload           7
	//*  88  184:invokevirtual   #931 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//*  89  187:ifeq            203
	//*  90  190:aload_0         
	//*  91  191:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  92  194:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  93  197:ifne            203
					continue;
	//   94  200:goto            300
				ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, viewholder, ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder), viewholder.getUnmodifiedPayloads());
	//   95  203:aload_0         
	//   96  204:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   97  207:aload_0         
	//   98  208:getfield        #450 <Field RecyclerView$State mState>
	//   99  211:aload           7
	//  100  213:aload           7
	//  101  215:invokestatic    #938 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  102  218:aload           7
	//  103  220:invokevirtual   #942 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  104  223:invokevirtual   #946 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  105  226:astore          8
				mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//  106  228:aload_0         
	//  107  229:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  108  232:aload           7
	//  109  234:aload           8
	//  110  236:invokevirtual   #950 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore() && !viewholder.isInvalid())
	//* 111  239:aload_0         
	//* 112  240:getfield        #450 <Field RecyclerView$State mState>
	//* 113  243:getfield        #901 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//* 114  246:ifeq            300
	//* 115  249:aload           7
	//* 116  251:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//* 117  254:ifeq            300
	//* 118  257:aload           7
	//* 119  259:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//* 120  262:ifne            300
	//* 121  265:aload           7
	//* 122  267:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 123  270:ifne            300
	//* 124  273:aload           7
	//* 125  275:invokevirtual   #931 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//* 126  278:ifne            300
				{
					long l1 = getChangedHolderKey(viewholder);
	//  127  281:aload_0         
	//  128  282:aload           7
	//  129  284:invokevirtual   #960 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//  130  287:lstore          5
					mViewInfoStore.addToOldChangeHolders(l1, viewholder);
	//  131  289:aload_0         
	//  132  290:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  133  293:lload           5
	//  134  295:aload           7
	//  135  297:invokevirtual   #964 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
				}
			}

	//  136  300:iload_1         
	//  137  301:iconst_1        
	//  138  302:iadd            
	//  139  303:istore_1        
		}
	//* 140  304:goto            156
		if(mState.mRunPredictiveAnimations)
	//* 141  307:aload_0         
	//* 142  308:getfield        #450 <Field RecyclerView$State mState>
	//* 143  311:getfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 144  314:ifeq            502
		{
			saveOldPositions();
	//  145  317:aload_0         
	//  146  318:invokevirtual   #967 <Method void saveOldPositions()>
			boolean flag1 = mState.mStructureChanged;
	//  147  321:aload_0         
	//  148  322:getfield        #450 <Field RecyclerView$State mState>
	//  149  325:getfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
	//  150  328:istore          4
			mState.mStructureChanged = false;
	//  151  330:aload_0         
	//  152  331:getfield        #450 <Field RecyclerView$State mState>
	//  153  334:iconst_0        
	//  154  335:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
			mLayout.onLayoutChildren(mRecycler, mState);
	//  155  338:aload_0         
	//  156  339:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  157  342:aload_0         
	//  158  343:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  159  346:aload_0         
	//  160  347:getfield        #450 <Field RecyclerView$State mState>
	//  161  350:invokevirtual   #976 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
			mState.mStructureChanged = flag1;
	//  162  353:aload_0         
	//  163  354:getfield        #450 <Field RecyclerView$State mState>
	//  164  357:iload           4
	//  165  359:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
			for(int j = 0; j < mChildHelper.getChildCount(); j++)
	//* 166  362:iconst_0        
	//* 167  363:istore_1        
	//* 168  364:iload_1         
	//* 169  365:aload_0         
	//* 170  366:getfield        #682 <Field ChildHelper mChildHelper>
	//* 171  369:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//* 172  372:icmpge          495
			{
				ViewHolder viewholder1 = getChildViewHolderInt(mChildHelper.getChildAt(j));
	//  173  375:aload_0         
	//  174  376:getfield        #682 <Field ChildHelper mChildHelper>
	//  175  379:iload_1         
	//  176  380:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//  177  383:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//  178  386:astore          7
				if(viewholder1.shouldIgnore() || mViewInfoStore.isInPreLayout(viewholder1))
					continue;
	//  179  388:aload           7
	//  180  390:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//  181  393:ifeq            399
	//  182  396:goto            488
	//  183  399:aload_0         
	//  184  400:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  185  403:aload           7
	//  186  405:invokevirtual   #980 <Method boolean ViewInfoStore.isInPreLayout(RecyclerView$ViewHolder)>
	//  187  408:ifne            488
				int i1 = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder1);
	//  188  411:aload           7
	//  189  413:invokestatic    #938 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  190  416:istore_3        
				boolean flag2 = viewholder1.hasAnyOfTheFlags(8192);
	//  191  417:aload           7
	//  192  419:sipush          8192
	//  193  422:invokevirtual   #984 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//  194  425:istore          4
				int l = i1;
	//  195  427:iload_3         
	//  196  428:istore_2        
				if(!flag2)
	//* 197  429:iload           4
	//* 198  431:ifne            440
					l = i1 | 0x1000;
	//  199  434:iload_3         
	//  200  435:sipush          4096
	//  201  438:ior             
	//  202  439:istore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPreLayoutInformation(mState, viewholder1, l, viewholder1.getUnmodifiedPayloads());
	//  203  440:aload_0         
	//  204  441:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  205  444:aload_0         
	//  206  445:getfield        #450 <Field RecyclerView$State mState>
	//  207  448:aload           7
	//  208  450:iload_2         
	//  209  451:aload           7
	//  210  453:invokevirtual   #942 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  211  456:invokevirtual   #946 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  212  459:astore          8
				if(flag2)
	//* 213  461:iload           4
	//* 214  463:ifeq            477
					recordAnimationInfoIfBouncedHiddenView(viewholder1, itemholderinfo1);
	//  215  466:aload_0         
	//  216  467:aload           7
	//  217  469:aload           8
	//  218  471:invokevirtual   #987 <Method void recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				else
	//* 219  474:goto            488
					mViewInfoStore.addToAppearedInPreLayoutHolders(viewholder1, itemholderinfo1);
	//  220  477:aload_0         
	//  221  478:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  222  481:aload           7
	//  223  483:aload           8
	//  224  485:invokevirtual   #990 <Method void ViewInfoStore.addToAppearedInPreLayoutHolders(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
			}

	//  225  488:iload_1         
	//  226  489:iconst_1        
	//  227  490:iadd            
	//  228  491:istore_1        
	//* 229  492:goto            364
			clearOldPositions();
	//  230  495:aload_0         
	//  231  496:invokevirtual   #993 <Method void clearOldPositions()>
		} else
	//* 232  499:goto            506
		{
			clearOldPositions();
	//  233  502:aload_0         
	//  234  503:invokevirtual   #993 <Method void clearOldPositions()>
		}
		onExitLayoutOrScroll();
	//  235  506:aload_0         
	//  236  507:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//  237  510:aload_0         
	//  238  511:iconst_0        
	//  239  512:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
		mState.mLayoutStep = 2;
	//  240  515:aload_0         
	//  241  516:getfield        #450 <Field RecyclerView$State mState>
	//  242  519:iconst_2        
	//  243  520:putfield        #1002 <Field int RecyclerView$State.mLayoutStep>
	//  244  523:return          
	}

	private void dispatchLayoutStep2()
	{
		startInterceptRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #883 <Method void startInterceptRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
		mState.assertLayoutStep(6);
	//    4    8:aload_0         
	//    5    9:getfield        #450 <Field RecyclerView$State mState>
	//    6   12:bipush          6
	//    7   14:invokevirtual   #873 <Method void RecyclerView$State.assertLayoutStep(int)>
		mAdapterHelper.consumeUpdatesInOnePass();
	//    8   17:aload_0         
	//    9   18:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   10   21:invokevirtual   #1010 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		mState.mItemCount = mAdapter.getItemCount();
	//   11   24:aload_0         
	//   12   25:getfield        #450 <Field RecyclerView$State mState>
	//   13   28:aload_0         
	//   14   29:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   15   32:invokevirtual   #912 <Method int RecyclerView$Adapter.getItemCount()>
	//   16   35:putfield        #915 <Field int RecyclerView$State.mItemCount>
		mState.mDeletedInvisibleItemCountSincePreviousLayout = 0;
	//   17   38:aload_0         
	//   18   39:getfield        #450 <Field RecyclerView$State mState>
	//   19   42:iconst_0        
	//   20   43:putfield        #1013 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
		mState.mInPreLayout = false;
	//   21   46:aload_0         
	//   22   47:getfield        #450 <Field RecyclerView$State mState>
	//   23   50:iconst_0        
	//   24   51:putfield        #907 <Field boolean RecyclerView$State.mInPreLayout>
		mLayout.onLayoutChildren(mRecycler, mState);
	//   25   54:aload_0         
	//   26   55:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   27   58:aload_0         
	//   28   59:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   29   62:aload_0         
	//   30   63:getfield        #450 <Field RecyclerView$State mState>
	//   31   66:invokevirtual   #976 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = false;
	//   32   69:aload_0         
	//   33   70:getfield        #450 <Field RecyclerView$State mState>
	//   34   73:iconst_0        
	//   35   74:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
		mPendingSavedState = null;
	//   36   77:aload_0         
	//   37   78:aconst_null     
	//   38   79:putfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
		State state = mState;
	//   39   82:aload_0         
	//   40   83:getfield        #450 <Field RecyclerView$State mState>
	//   41   86:astore_2        
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemAnimator != null)
	//*  42   87:aload_0         
	//*  43   88:getfield        #450 <Field RecyclerView$State mState>
	//*  44   91:getfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  45   94:ifeq            109
	//*  46   97:aload_0         
	//*  47   98:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  48  101:ifnull          109
			flag = true;
	//   49  104:iconst_1        
	//   50  105:istore_1        
		else
	//*  51  106:goto            111
			flag = false;
	//   52  109:iconst_0        
	//   53  110:istore_1        
		state.mRunSimpleAnimations = flag;
	//   54  111:aload_2         
	//   55  112:iload_1         
	//   56  113:putfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mLayoutStep = 4;
	//   57  116:aload_0         
	//   58  117:getfield        #450 <Field RecyclerView$State mState>
	//   59  120:iconst_4        
	//   60  121:putfield        #1002 <Field int RecyclerView$State.mLayoutStep>
		onExitLayoutOrScroll();
	//   61  124:aload_0         
	//   62  125:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//   63  128:aload_0         
	//   64  129:iconst_0        
	//   65  130:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
	//   66  133:return          
	}

	private void dispatchLayoutStep3()
	{
		mState.assertLayoutStep(4);
	//    0    0:aload_0         
	//    1    1:getfield        #450 <Field RecyclerView$State mState>
	//    2    4:iconst_4        
	//    3    5:invokevirtual   #873 <Method void RecyclerView$State.assertLayoutStep(int)>
		startInterceptRequestLayout();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #883 <Method void startInterceptRequestLayout()>
		onEnterLayoutOrScroll();
	//    6   12:aload_0         
	//    7   13:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
		mState.mLayoutStep = 1;
	//    8   16:aload_0         
	//    9   17:getfield        #450 <Field RecyclerView$State mState>
	//   10   20:iconst_1        
	//   11   21:putfield        #1002 <Field int RecyclerView$State.mLayoutStep>
		if(mState.mRunSimpleAnimations)
	//*  12   24:aload_0         
	//*  13   25:getfield        #450 <Field RecyclerView$State mState>
	//*  14   28:getfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  15   31:ifeq            263
		{
			for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*  16   34:aload_0         
	//*  17   35:getfield        #682 <Field ChildHelper mChildHelper>
	//*  18   38:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//*  19   41:iconst_1        
	//*  20   42:isub            
	//*  21   43:istore_1        
	//*  22   44:iload_1         
	//*  23   45:iflt            252
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   24   48:aload_0         
	//   25   49:getfield        #682 <Field ChildHelper mChildHelper>
	//   26   52:iload_1         
	//   27   53:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   28   56:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   59:astore          6
				if(viewholder.shouldIgnore())
	//*  30   61:aload           6
	//*  31   63:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   66:ifeq            72
					continue;
	//   33   69:goto            245
				long l = getChangedHolderKey(viewholder);
	//   34   72:aload_0         
	//   35   73:aload           6
	//   36   75:invokevirtual   #960 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   37   78:lstore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPostLayoutInformation(mState, viewholder);
	//   38   79:aload_0         
	//   39   80:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   40   83:aload_0         
	//   41   84:getfield        #450 <Field RecyclerView$State mState>
	//   42   87:aload           6
	//   43   89:invokevirtual   #1020 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPostLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder)>
	//   44   92:astore          9
				ViewHolder viewholder1 = mViewInfoStore.getFromOldChangeHolders(l);
	//   45   94:aload_0         
	//   46   95:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   47   98:lload_2         
	//   48   99:invokevirtual   #1024 <Method RecyclerView$ViewHolder ViewInfoStore.getFromOldChangeHolders(long)>
	//   49  102:astore          7
				if(viewholder1 != null && !viewholder1.shouldIgnore())
	//*  50  104:aload           7
	//*  51  106:ifnull          234
	//*  52  109:aload           7
	//*  53  111:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  54  114:ifne            234
				{
					boolean flag = mViewInfoStore.isDisappearing(viewholder1);
	//   55  117:aload_0         
	//   56  118:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   57  121:aload           7
	//   58  123:invokevirtual   #1027 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   59  126:istore          4
					boolean flag1 = mViewInfoStore.isDisappearing(viewholder);
	//   60  128:aload_0         
	//   61  129:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   62  132:aload           6
	//   63  134:invokevirtual   #1027 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   64  137:istore          5
					if(flag && viewholder1 == viewholder)
	//*  65  139:iload           4
	//*  66  141:ifeq            165
	//*  67  144:aload           7
	//*  68  146:aload           6
	//*  69  148:if_acmpne       165
					{
						mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   70  151:aload_0         
	//   71  152:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   72  155:aload           6
	//   73  157:aload           9
	//   74  159:invokevirtual   #1030 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
						continue;
	//   75  162:goto            245
					}
					ItemAnimator.ItemHolderInfo itemholderinfo = mViewInfoStore.popFromPreLayout(viewholder1);
	//   76  165:aload_0         
	//   77  166:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   78  169:aload           7
	//   79  171:invokevirtual   #1034 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPreLayout(RecyclerView$ViewHolder)>
	//   80  174:astore          8
					mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   81  176:aload_0         
	//   82  177:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   83  180:aload           6
	//   84  182:aload           9
	//   85  184:invokevirtual   #1030 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					itemholderinfo1 = mViewInfoStore.popFromPostLayout(viewholder);
	//   86  187:aload_0         
	//   87  188:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   88  191:aload           6
	//   89  193:invokevirtual   #1037 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPostLayout(RecyclerView$ViewHolder)>
	//   90  196:astore          9
					if(itemholderinfo == null)
	//*  91  198:aload           8
	//*  92  200:ifnonnull       215
						handleMissingPreInfoForChangeError(l, viewholder, viewholder1);
	//   93  203:aload_0         
	//   94  204:lload_2         
	//   95  205:aload           6
	//   96  207:aload           7
	//   97  209:invokespecial   #1041 <Method void handleMissingPreInfoForChangeError(long, RecyclerView$ViewHolder, RecyclerView$ViewHolder)>
					else
	//*  98  212:goto            245
						animateChange(viewholder1, viewholder, itemholderinfo, itemholderinfo1, flag, flag1);
	//   99  215:aload_0         
	//  100  216:aload           7
	//  101  218:aload           6
	//  102  220:aload           8
	//  103  222:aload           9
	//  104  224:iload           4
	//  105  226:iload           5
	//  106  228:invokespecial   #1043 <Method void animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo, boolean, boolean)>
				} else
	//* 107  231:goto            245
				{
					mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//  108  234:aload_0         
	//  109  235:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  110  238:aload           6
	//  111  240:aload           9
	//  112  242:invokevirtual   #1030 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				}
			}

	//  113  245:iload_1         
	//  114  246:iconst_1        
	//  115  247:isub            
	//  116  248:istore_1        
	//* 117  249:goto            44
			mViewInfoStore.process(mViewInfoProcessCallback);
	//  118  252:aload_0         
	//  119  253:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  120  256:aload_0         
	//  121  257:getfield        #475 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//  122  260:invokevirtual   #1047 <Method void ViewInfoStore.process(ViewInfoStore$ProcessCallback)>
		}
		mLayout.removeAndRecycleScrapInt(mRecycler);
	//  123  263:aload_0         
	//  124  264:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  125  267:aload_0         
	//  126  268:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  127  271:invokevirtual   #1051 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		mState.mPreviousLayoutItemCount = mState.mItemCount;
	//  128  274:aload_0         
	//  129  275:getfield        #450 <Field RecyclerView$State mState>
	//  130  278:aload_0         
	//  131  279:getfield        #450 <Field RecyclerView$State mState>
	//  132  282:getfield        #915 <Field int RecyclerView$State.mItemCount>
	//  133  285:putfield        #1054 <Field int RecyclerView$State.mPreviousLayoutItemCount>
		mDataSetHasChangedAfterLayout = false;
	//  134  288:aload_0         
	//  135  289:iconst_0        
	//  136  290:putfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
		mDispatchItemsChangedEvent = false;
	//  137  293:aload_0         
	//  138  294:iconst_0        
	//  139  295:putfield        #416 <Field boolean mDispatchItemsChangedEvent>
		mState.mRunSimpleAnimations = false;
	//  140  298:aload_0         
	//  141  299:getfield        #450 <Field RecyclerView$State mState>
	//  142  302:iconst_0        
	//  143  303:putfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mRunPredictiveAnimations = false;
	//  144  306:aload_0         
	//  145  307:getfield        #450 <Field RecyclerView$State mState>
	//  146  310:iconst_0        
	//  147  311:putfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
		mLayout.mRequestedSimpleAnimations = false;
	//  148  314:aload_0         
	//  149  315:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  150  318:iconst_0        
	//  151  319:putfield        #1057 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
		if(mRecycler.mChangedScrap != null)
	//* 152  322:aload_0         
	//* 153  323:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//* 154  326:getfield        #1060 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//* 155  329:ifnull          342
			mRecycler.mChangedScrap.clear();
	//  156  332:aload_0         
	//  157  333:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  158  336:getfield        #1060 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//  159  339:invokevirtual   #1061 <Method void ArrayList.clear()>
		if(mLayout.mPrefetchMaxObservedInInitialPrefetch)
	//* 160  342:aload_0         
	//* 161  343:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//* 162  346:getfield        #1064 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
	//* 163  349:ifeq            375
		{
			mLayout.mPrefetchMaxCountObserved = 0;
	//  164  352:aload_0         
	//  165  353:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  166  356:iconst_0        
	//  167  357:putfield        #1067 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
			mLayout.mPrefetchMaxObservedInInitialPrefetch = false;
	//  168  360:aload_0         
	//  169  361:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  170  364:iconst_0        
	//  171  365:putfield        #1064 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
			mRecycler.updateViewCacheSize();
	//  172  368:aload_0         
	//  173  369:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  174  372:invokevirtual   #1070 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		}
		mLayout.onLayoutCompleted(mState);
	//  175  375:aload_0         
	//  176  376:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  177  379:aload_0         
	//  178  380:getfield        #450 <Field RecyclerView$State mState>
	//  179  383:invokevirtual   #1073 <Method void RecyclerView$LayoutManager.onLayoutCompleted(RecyclerView$State)>
		onExitLayoutOrScroll();
	//  180  386:aload_0         
	//  181  387:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
		stopInterceptRequestLayout(false);
	//  182  390:aload_0         
	//  183  391:iconst_0        
	//  184  392:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
		mViewInfoStore.clear();
	//  185  395:aload_0         
	//  186  396:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//  187  399:invokevirtual   #886 <Method void ViewInfoStore.clear()>
		if(didChildRangeChange(mMinMaxLayoutPositions[0], mMinMaxLayoutPositions[1]))
	//* 188  402:aload_0         
	//* 189  403:aload_0         
	//* 190  404:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//* 191  407:iconst_0        
	//* 192  408:iaload          
	//* 193  409:aload_0         
	//* 194  410:getfield        #461 <Field int[] mMinMaxLayoutPositions>
	//* 195  413:iconst_1        
	//* 196  414:iaload          
	//* 197  415:invokespecial   #1075 <Method boolean didChildRangeChange(int, int)>
	//* 198  418:ifeq            427
			dispatchOnScrolled(0, 0);
	//  199  421:aload_0         
	//  200  422:iconst_0        
	//  201  423:iconst_0        
	//  202  424:invokevirtual   #1078 <Method void dispatchOnScrolled(int, int)>
		recoverFocusFromState();
	//  203  427:aload_0         
	//  204  428:invokespecial   #1081 <Method void recoverFocusFromState()>
		resetFocusInfo();
	//  205  431:aload_0         
	//  206  432:invokespecial   #1084 <Method void resetFocusInfo()>
	//  207  435:return          
	}

	private boolean dispatchOnItemTouch(MotionEvent motionevent)
	{
		int i = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1091 <Method int MotionEvent.getAction()>
	//    2    4:istore_2        
		if(mActiveOnItemTouchListener != null)
	//*   3    5:aload_0         
	//*   4    6:getfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   5    9:ifnull          52
			if(i == 0)
	//*   6   12:iload_2         
	//*   7   13:ifne            24
			{
				mActiveOnItemTouchListener = null;
	//    8   16:aload_0         
	//    9   17:aconst_null     
	//   10   18:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
			} else
	//*  11   21:goto            52
			{
				mActiveOnItemTouchListener.onTouchEvent(this, motionevent);
	//   12   24:aload_0         
	//   13   25:getfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   14   28:aload_0         
	//   15   29:aload_1         
	//   16   30:invokeinterface #1097 <Method void RecyclerView$OnItemTouchListener.onTouchEvent(RecyclerView, MotionEvent)>
				if(i == 3 || i == 1)
	//*  17   35:iload_2         
	//*  18   36:iconst_3        
	//*  19   37:icmpeq          45
	//*  20   40:iload_2         
	//*  21   41:iconst_1        
	//*  22   42:icmpne          50
					mActiveOnItemTouchListener = null;
	//   23   45:aload_0         
	//   24   46:aconst_null     
	//   25   47:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   26   50:iconst_1        
	//   27   51:ireturn         
			}
		if(i != 0)
	//*  28   52:iload_2         
	//*  29   53:ifeq            111
		{
			int k = mOnItemTouchListeners.size();
	//   30   56:aload_0         
	//   31   57:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//   32   60:invokevirtual   #1100 <Method int ArrayList.size()>
	//   33   63:istore_3        
			for(int j = 0; j < k; j++)
	//*  34   64:iconst_0        
	//*  35   65:istore_2        
	//*  36   66:iload_2         
	//*  37   67:iload_3         
	//*  38   68:icmpge          111
			{
				OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(j);
	//   39   71:aload_0         
	//   40   72:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//   41   75:iload_2         
	//   42   76:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   43   79:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   44   82:astore          4
				if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent))
	//*  45   84:aload           4
	//*  46   86:aload_0         
	//*  47   87:aload_1         
	//*  48   88:invokeinterface #1107 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  49   93:ifeq            104
				{
					mActiveOnItemTouchListener = onitemtouchlistener;
	//   50   96:aload_0         
	//   51   97:aload           4
	//   52   99:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
					return true;
	//   53  102:iconst_1        
	//   54  103:ireturn         
				}
			}

	//   55  104:iload_2         
	//   56  105:iconst_1        
	//   57  106:iadd            
	//   58  107:istore_2        
		}
	//*  59  108:goto            66
		return false;
	//   60  111:iconst_0        
	//   61  112:ireturn         
	}

	private boolean dispatchOnItemTouchIntercept(MotionEvent motionevent)
	{
		int j = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1091 <Method int MotionEvent.getAction()>
	//    2    4:istore_3        
		if(j == 3 || j == 0)
	//*   3    5:iload_3         
	//*   4    6:iconst_3        
	//*   5    7:icmpeq          14
	//*   6   10:iload_3         
	//*   7   11:ifne            19
			mActiveOnItemTouchListener = null;
	//    8   14:aload_0         
	//    9   15:aconst_null     
	//   10   16:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		int k = mOnItemTouchListeners.size();
	//   11   19:aload_0         
	//   12   20:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//   13   23:invokevirtual   #1100 <Method int ArrayList.size()>
	//   14   26:istore          4
		for(int i = 0; i < k; i++)
	//*  15   28:iconst_0        
	//*  16   29:istore_2        
	//*  17   30:iload_2         
	//*  18   31:iload           4
	//*  19   33:icmpge          81
		{
			OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   20   36:aload_0         
	//   21   37:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   24   44:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   25   47:astore          5
			if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent) && j != 3)
	//*  26   49:aload           5
	//*  27   51:aload_0         
	//*  28   52:aload_1         
	//*  29   53:invokeinterface #1107 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  30   58:ifeq            74
	//*  31   61:iload_3         
	//*  32   62:iconst_3        
	//*  33   63:icmpeq          74
			{
				mActiveOnItemTouchListener = onitemtouchlistener;
	//   34   66:aload_0         
	//   35   67:aload           5
	//   36   69:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   37   72:iconst_1        
	//   38   73:ireturn         
			}
		}

	//   39   74:iload_2         
	//   40   75:iconst_1        
	//   41   76:iadd            
	//   42   77:istore_2        
	//*  43   78:goto            30
		return false;
	//   44   81:iconst_0        
	//   45   82:ireturn         
	}

	private void findMinMaxChildLayoutPositions(int ai[])
	{
		int k1 = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          8
		if(k1 == 0)
	//*   4    9:iload           8
	//*   5   11:ifne            23
		{
			ai[0] = -1;
	//    6   14:aload_1         
	//    7   15:iconst_0        
	//    8   16:iconst_m1       
	//    9   17:iastore         
			ai[1] = -1;
	//   10   18:aload_1         
	//   11   19:iconst_1        
	//   12   20:iconst_m1       
	//   13   21:iastore         
			return;
	//   14   22:return          
		}
		int k = 0x80000000;
	//   15   23:ldc2            #1109 <Int 0x80000000>
	//   16   26:istore          4
		int j = 0x7fffffff;
	//   17   28:ldc2            #1110 <Int 0x7fffffff>
	//   18   31:istore_3        
		for(int l = 0; l < k1;)
	//*  19   32:iconst_0        
	//*  20   33:istore          5
	//*  21   35:iload           5
	//*  22   37:iload           8
	//*  23   39:icmpge          121
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(l));
	//   24   42:aload_0         
	//   25   43:getfield        #682 <Field ChildHelper mChildHelper>
	//   26   46:iload           5
	//   27   48:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   28   51:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   54:astore          9
			int j1;
			if(viewholder.shouldIgnore())
	//*  30   56:aload           9
	//*  31   58:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   61:ifeq            71
			{
				j1 = k;
	//   33   64:iload           4
	//   34   66:istore          7
			} else
	//*  35   68:goto            108
			{
				int i1 = viewholder.getLayoutPosition();
	//   36   71:aload           9
	//   37   73:invokevirtual   #1113 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   38   76:istore          6
				int i = j;
	//   39   78:iload_3         
	//   40   79:istore_2        
				if(i1 < j)
	//*  41   80:iload           6
	//*  42   82:iload_3         
	//*  43   83:icmpge          89
					i = i1;
	//   44   86:iload           6
	//   45   88:istore_2        
				j = i;
	//   46   89:iload_2         
	//   47   90:istore_3        
				j1 = k;
	//   48   91:iload           4
	//   49   93:istore          7
				if(i1 > k)
	//*  50   95:iload           6
	//*  51   97:iload           4
	//*  52   99:icmple          108
				{
					j1 = i1;
	//   53  102:iload           6
	//   54  104:istore          7
					j = i;
	//   55  106:iload_2         
	//   56  107:istore_3        
				}
			}
			l++;
	//   57  108:iload           5
	//   58  110:iconst_1        
	//   59  111:iadd            
	//   60  112:istore          5
			k = j1;
	//   61  114:iload           7
	//   62  116:istore          4
		}

	//*  63  118:goto            35
		ai[0] = j;
	//   64  121:aload_1         
	//   65  122:iconst_0        
	//   66  123:iload_3         
	//   67  124:iastore         
		ai[1] = k;
	//   68  125:aload_1         
	//   69  126:iconst_1        
	//   70  127:iload           4
	//   71  129:iastore         
	//   72  130:return          
	}

	static RecyclerView findNestedRecyclerView(View view)
	{
		if(!(view instanceof ViewGroup))
	//*   0    0:aload_0         
	//*   1    1:instanceof      #4   <Class ViewGroup>
	//*   2    4:ifne            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		if(view instanceof RecyclerView)
	//*   5    9:aload_0         
	//*   6   10:instanceof      #2   <Class RecyclerView>
	//*   7   13:ifeq            21
			return (RecyclerView)view;
	//    8   16:aload_0         
	//    9   17:checkcast       #2   <Class RecyclerView>
	//   10   20:areturn         
		view = ((View) ((ViewGroup)view));
	//   11   21:aload_0         
	//   12   22:checkcast       #4   <Class ViewGroup>
	//   13   25:astore_0        
		int j = ((ViewGroup) (view)).getChildCount();
	//   14   26:aload_0         
	//   15   27:invokevirtual   #1116 <Method int ViewGroup.getChildCount()>
	//   16   30:istore_2        
		for(int i = 0; i < j; i++)
	//*  17   31:iconst_0        
	//*  18   32:istore_1        
	//*  19   33:iload_1         
	//*  20   34:iload_2         
	//*  21   35:icmpge          60
		{
			RecyclerView recyclerview = findNestedRecyclerView(((ViewGroup) (view)).getChildAt(i));
	//   22   38:aload_0         
	//   23   39:iload_1         
	//   24   40:invokevirtual   #1117 <Method View ViewGroup.getChildAt(int)>
	//   25   43:invokestatic    #1119 <Method RecyclerView findNestedRecyclerView(View)>
	//   26   46:astore_3        
			if(recyclerview != null)
	//*  27   47:aload_3         
	//*  28   48:ifnull          53
				return recyclerview;
	//   29   51:aload_3         
	//   30   52:areturn         
		}

	//   31   53:iload_1         
	//   32   54:iconst_1        
	//   33   55:iadd            
	//   34   56:istore_1        
	//*  35   57:goto            33
		return null;
	//   36   60:aconst_null     
	//   37   61:areturn         
	}

	private View findNextViewToFocus()
	{
		int i;
		if(mState.mFocusedItemPosition != -1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #450 <Field RecyclerView$State mState>
	//*   2    4:getfield        #1125 <Field int RecyclerView$State.mFocusedItemPosition>
	//*   3    7:iconst_m1       
	//*   4    8:icmpeq          22
			i = mState.mFocusedItemPosition;
	//    5   11:aload_0         
	//    6   12:getfield        #450 <Field RecyclerView$State mState>
	//    7   15:getfield        #1125 <Field int RecyclerView$State.mFocusedItemPosition>
	//    8   18:istore_1        
		else
	//*   9   19:goto            24
			i = 0;
	//   10   22:iconst_0        
	//   11   23:istore_1        
		int k = mState.getItemCount();
	//   12   24:aload_0         
	//   13   25:getfield        #450 <Field RecyclerView$State mState>
	//   14   28:invokevirtual   #1126 <Method int RecyclerView$State.getItemCount()>
	//   15   31:istore_3        
		int j = i;
	//   16   32:iload_1         
	//   17   33:istore_2        
		do
		{
			if(j >= k)
				break;
	//   18   34:iload_2         
	//   19   35:iload_3         
	//   20   36:icmpge          78
			ViewHolder viewholder = findViewHolderForAdapterPosition(j);
	//   21   39:aload_0         
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1130 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   24   44:astore          4
			if(viewholder == null)
	//*  25   46:aload           4
	//*  26   48:ifnonnull       54
				break;
	//   27   51:goto            78
			if(viewholder.itemView.hasFocusable())
	//*  28   54:aload           4
	//*  29   56:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  30   59:invokevirtual   #1133 <Method boolean View.hasFocusable()>
	//*  31   62:ifeq            71
				return viewholder.itemView;
	//   32   65:aload           4
	//   33   67:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   34   70:areturn         
			j++;
	//   35   71:iload_2         
	//   36   72:iconst_1        
	//   37   73:iadd            
	//   38   74:istore_2        
		} while(true);
	//   39   75:goto            34
		for(i = Math.min(k, i) - 1; i >= 0; i--)
	//*  40   78:iload_3         
	//*  41   79:iload_1         
	//*  42   80:invokestatic    #1138 <Method int Math.min(int, int)>
	//*  43   83:iconst_1        
	//*  44   84:isub            
	//*  45   85:istore_1        
	//*  46   86:iload_1         
	//*  47   87:iflt            128
		{
			ViewHolder viewholder1 = findViewHolderForAdapterPosition(i);
	//   48   90:aload_0         
	//   49   91:iload_1         
	//   50   92:invokevirtual   #1130 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//   51   95:astore          4
			if(viewholder1 == null)
	//*  52   97:aload           4
	//*  53   99:ifnonnull       104
				return null;
	//   54  102:aconst_null     
	//   55  103:areturn         
			if(viewholder1.itemView.hasFocusable())
	//*  56  104:aload           4
	//*  57  106:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  58  109:invokevirtual   #1133 <Method boolean View.hasFocusable()>
	//*  59  112:ifeq            121
				return viewholder1.itemView;
	//   60  115:aload           4
	//   61  117:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   62  120:areturn         
		}

	//   63  121:iload_1         
	//   64  122:iconst_1        
	//   65  123:isub            
	//   66  124:istore_1        
	//*  67  125:goto            86
		return null;
	//   68  128:aconst_null     
	//   69  129:areturn         
	}

	static ViewHolder getChildViewHolderInt(View view)
	{
		if(view == null)
	//*   0    0:aload_0         
	//*   1    1:ifnonnull       6
			return null;
	//    2    4:aconst_null     
	//    3    5:areturn         
		else
			return ((LayoutParams)view.getLayoutParams()).mViewHolder;
	//    4    6:aload_0         
	//    5    7:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    6   10:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    7   13:getfield        #1141 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
	//    8   16:areturn         
	}

	static void getDecoratedBoundsWithMarginsInt(View view, Rect rect)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    3    7:astore_2        
		Rect rect1 = layoutparams.mDecorInsets;
	//    4    8:aload_2         
	//    5    9:getfield        #1146 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    6   12:astore_3        
		rect.set(view.getLeft() - rect1.left - layoutparams.leftMargin, view.getTop() - rect1.top - layoutparams.topMargin, view.getRight() + rect1.right + layoutparams.rightMargin, view.getBottom() + rect1.bottom + layoutparams.bottomMargin);
	//    7   13:aload_1         
	//    8   14:aload_0         
	//    9   15:invokevirtual   #1149 <Method int View.getLeft()>
	//   10   18:aload_3         
	//   11   19:getfield        #1152 <Field int Rect.left>
	//   12   22:isub            
	//   13   23:aload_2         
	//   14   24:getfield        #1155 <Field int RecyclerView$LayoutParams.leftMargin>
	//   15   27:isub            
	//   16   28:aload_0         
	//   17   29:invokevirtual   #1158 <Method int View.getTop()>
	//   18   32:aload_3         
	//   19   33:getfield        #1161 <Field int Rect.top>
	//   20   36:isub            
	//   21   37:aload_2         
	//   22   38:getfield        #1164 <Field int RecyclerView$LayoutParams.topMargin>
	//   23   41:isub            
	//   24   42:aload_0         
	//   25   43:invokevirtual   #1167 <Method int View.getRight()>
	//   26   46:aload_3         
	//   27   47:getfield        #1170 <Field int Rect.right>
	//   28   50:iadd            
	//   29   51:aload_2         
	//   30   52:getfield        #1173 <Field int RecyclerView$LayoutParams.rightMargin>
	//   31   55:iadd            
	//   32   56:aload_0         
	//   33   57:invokevirtual   #1176 <Method int View.getBottom()>
	//   34   60:aload_3         
	//   35   61:getfield        #1179 <Field int Rect.bottom>
	//   36   64:iadd            
	//   37   65:aload_2         
	//   38   66:getfield        #1182 <Field int RecyclerView$LayoutParams.bottomMargin>
	//   39   69:iadd            
	//   40   70:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
	//   41   73:return          
	}

	private int getDeepestFocusedViewWithId(View view)
	{
		int i = view.getId();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1190 <Method int View.getId()>
	//    2    4:istore_2        
		do
		{
			if(view.isFocused() || !(view instanceof ViewGroup) || !view.hasFocus())
				break;
	//    3    5:aload_1         
	//    4    6:invokevirtual   #1193 <Method boolean View.isFocused()>
	//    5    9:ifne            54
	//    6   12:aload_1         
	//    7   13:instanceof      #4   <Class ViewGroup>
	//    8   16:ifeq            54
	//    9   19:aload_1         
	//   10   20:invokevirtual   #1196 <Method boolean View.hasFocus()>
	//   11   23:ifeq            54
			View view1 = ((ViewGroup)view).getFocusedChild();
	//   12   26:aload_1         
	//   13   27:checkcast       #4   <Class ViewGroup>
	//   14   30:invokevirtual   #1199 <Method View ViewGroup.getFocusedChild()>
	//   15   33:astore_3        
			view = view1;
	//   16   34:aload_3         
	//   17   35:astore_1        
			if(view1.getId() != -1)
	//*  18   36:aload_3         
	//*  19   37:invokevirtual   #1190 <Method int View.getId()>
	//*  20   40:iconst_m1       
	//*  21   41:icmpeq          5
			{
				i = view1.getId();
	//   22   44:aload_3         
	//   23   45:invokevirtual   #1190 <Method int View.getId()>
	//   24   48:istore_2        
				view = view1;
	//   25   49:aload_3         
	//   26   50:astore_1        
			}
		} while(true);
	//   27   51:goto            5
		return i;
	//   28   54:iload_2         
	//   29   55:ireturn         
	}

	private String getFullClassName(Context context, String s)
	{
		if(s.charAt(0) == '.')
	//*   0    0:aload_2         
	//*   1    1:iconst_0        
	//*   2    2:invokevirtual   #1203 <Method char String.charAt(int)>
	//*   3    5:bipush          46
	//*   4    7:icmpne          38
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    5   10:new             #812 <Class StringBuilder>
	//    6   13:dup             
	//    7   14:invokespecial   #813 <Method void StringBuilder()>
	//    8   17:astore_3        
			stringbuilder.append(context.getPackageName());
	//    9   18:aload_3         
	//   10   19:aload_1         
	//   11   20:invokevirtual   #1206 <Method String Context.getPackageName()>
	//   12   23:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   13   26:pop             
			stringbuilder.append(s);
	//   14   27:aload_3         
	//   15   28:aload_2         
	//   16   29:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   17   32:pop             
			return stringbuilder.toString();
	//   18   33:aload_3         
	//   19   34:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   20   37:areturn         
		}
		if(s.contains("."))
	//*  21   38:aload_2         
	//*  22   39:ldc2            #1208 <String ".">
	//*  23   42:invokevirtual   #1212 <Method boolean String.contains(CharSequence)>
	//*  24   45:ifeq            50
		{
			return s;
	//   25   48:aload_2         
	//   26   49:areturn         
		} else
		{
			context = ((Context) (new StringBuilder()));
	//   27   50:new             #812 <Class StringBuilder>
	//   28   53:dup             
	//   29   54:invokespecial   #813 <Method void StringBuilder()>
	//   30   57:astore_1        
			((StringBuilder) (context)).append(((Class) (android/support/v7/widget/RecyclerView)).getPackage().getName());
	//   31   58:aload_1         
	//   32   59:ldc1            #2   <Class RecyclerView>
	//   33   61:invokevirtual   #1216 <Method Package Class.getPackage()>
	//   34   64:invokevirtual   #1221 <Method String Package.getName()>
	//   35   67:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   36   70:pop             
			((StringBuilder) (context)).append('.');
	//   37   71:aload_1         
	//   38   72:bipush          46
	//   39   74:invokevirtual   #1224 <Method StringBuilder StringBuilder.append(char)>
	//   40   77:pop             
			((StringBuilder) (context)).append(s);
	//   41   78:aload_1         
	//   42   79:aload_2         
	//   43   80:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   44   83:pop             
			return ((StringBuilder) (context)).toString();
	//   45   84:aload_1         
	//   46   85:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   47   88:areturn         
		}
	}

	private NestedScrollingChildHelper getScrollingChildHelper()
	{
		if(mScrollingChildHelper == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1228 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//*   2    4:ifnonnull       19
			mScrollingChildHelper = new NestedScrollingChildHelper(((View) (this)));
	//    3    7:aload_0         
	//    4    8:new             #1230 <Class NestedScrollingChildHelper>
	//    5   11:dup             
	//    6   12:aload_0         
	//    7   13:invokespecial   #1232 <Method void NestedScrollingChildHelper(View)>
	//    8   16:putfield        #1228 <Field NestedScrollingChildHelper mScrollingChildHelper>
		return mScrollingChildHelper;
	//    9   19:aload_0         
	//   10   20:getfield        #1228 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//   11   23:areturn         
	}

	private void handleMissingPreInfoForChangeError(long l, ViewHolder viewholder, ViewHolder viewholder1)
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          6
		for(int i = 0; i < j; i++)
	//*   4    9:iconst_0        
	//*   5   10:istore          5
	//*   6   12:iload           5
	//*   7   14:iload           6
	//*   8   16:icmpge          209
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   19:aload_0         
	//   10   20:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   23:iload           5
	//   12   25:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   13   28:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          7
			if(viewholder2 != viewholder && getChangedHolderKey(viewholder2) == l)
	//*  15   33:aload           7
	//*  16   35:aload_3         
	//*  17   36:if_acmpne       42
	//*  18   39:goto            200
	//*  19   42:aload_0         
	//*  20   43:aload           7
	//*  21   45:invokevirtual   #960 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//*  22   48:lload_1         
	//*  23   49:lcmp            
	//*  24   50:ifne            200
				if(mAdapter != null && mAdapter.hasStableIds())
	//*  25   53:aload_0         
	//*  26   54:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  27   57:ifnull          135
	//*  28   60:aload_0         
	//*  29   61:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  30   64:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  31   67:ifeq            135
				{
					viewholder1 = ((ViewHolder) (new StringBuilder()));
	//   32   70:new             #812 <Class StringBuilder>
	//   33   73:dup             
	//   34   74:invokespecial   #813 <Method void StringBuilder()>
	//   35   77:astore          4
					((StringBuilder) (viewholder1)).append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:");
	//   36   79:aload           4
	//   37   81:ldc2            #1234 <String "Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:">
	//   38   84:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   39   87:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder2)));
	//   40   88:aload           4
	//   41   90:aload           7
	//   42   92:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   43   95:pop             
					((StringBuilder) (viewholder1)).append(" \n View Holder 2:");
	//   44   96:aload           4
	//   45   98:ldc2            #1239 <String " \n View Holder 2:">
	//   46  101:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   47  104:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder)));
	//   48  105:aload           4
	//   49  107:aload_3         
	//   50  108:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   51  111:pop             
					((StringBuilder) (viewholder1)).append(exceptionLabel());
	//   52  112:aload           4
	//   53  114:aload_0         
	//   54  115:invokevirtual   #1242 <Method String exceptionLabel()>
	//   55  118:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   56  121:pop             
					throw new IllegalStateException(((StringBuilder) (viewholder1)).toString());
	//   57  122:new             #824 <Class IllegalStateException>
	//   58  125:dup             
	//   59  126:aload           4
	//   60  128:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   61  131:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   62  134:athrow          
				} else
				{
					viewholder1 = ((ViewHolder) (new StringBuilder()));
	//   63  135:new             #812 <Class StringBuilder>
	//   64  138:dup             
	//   65  139:invokespecial   #813 <Method void StringBuilder()>
	//   66  142:astore          4
					((StringBuilder) (viewholder1)).append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:");
	//   67  144:aload           4
	//   68  146:ldc2            #1247 <String "Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:">
	//   69  149:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   70  152:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder2)));
	//   71  153:aload           4
	//   72  155:aload           7
	//   73  157:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   74  160:pop             
					((StringBuilder) (viewholder1)).append(" \n View Holder 2:");
	//   75  161:aload           4
	//   76  163:ldc2            #1239 <String " \n View Holder 2:">
	//   77  166:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   78  169:pop             
					((StringBuilder) (viewholder1)).append(((Object) (viewholder)));
	//   79  170:aload           4
	//   80  172:aload_3         
	//   81  173:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   82  176:pop             
					((StringBuilder) (viewholder1)).append(exceptionLabel());
	//   83  177:aload           4
	//   84  179:aload_0         
	//   85  180:invokevirtual   #1242 <Method String exceptionLabel()>
	//   86  183:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   87  186:pop             
					throw new IllegalStateException(((StringBuilder) (viewholder1)).toString());
	//   88  187:new             #824 <Class IllegalStateException>
	//   89  190:dup             
	//   90  191:aload           4
	//   91  193:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   92  196:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   93  199:athrow          
				}
		}

	//   94  200:iload           5
	//   95  202:iconst_1        
	//   96  203:iadd            
	//   97  204:istore          5
	//*  98  206:goto            12
		StringBuilder stringbuilder = new StringBuilder();
	//   99  209:new             #812 <Class StringBuilder>
	//  100  212:dup             
	//  101  213:invokespecial   #813 <Method void StringBuilder()>
	//  102  216:astore          7
		stringbuilder.append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ");
	//  103  218:aload           7
	//  104  220:ldc2            #1249 <String "Problem while matching changed view holders with the newones. The pre-layout information for the change holder ">
	//  105  223:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  106  226:pop             
		stringbuilder.append(((Object) (viewholder1)));
	//  107  227:aload           7
	//  108  229:aload           4
	//  109  231:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//  110  234:pop             
		stringbuilder.append(" cannot be found but it is necessary for ");
	//  111  235:aload           7
	//  112  237:ldc2            #1251 <String " cannot be found but it is necessary for ">
	//  113  240:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  114  243:pop             
		stringbuilder.append(((Object) (viewholder)));
	//  115  244:aload           7
	//  116  246:aload_3         
	//  117  247:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//  118  250:pop             
		stringbuilder.append(exceptionLabel());
	//  119  251:aload           7
	//  120  253:aload_0         
	//  121  254:invokevirtual   #1242 <Method String exceptionLabel()>
	//  122  257:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  123  260:pop             
		Log.e("RecyclerView", stringbuilder.toString());
	//  124  261:ldc1            #178 <String "RecyclerView">
	//  125  263:aload           7
	//  126  265:invokevirtual   #827 <Method String StringBuilder.toString()>
	//  127  268:invokestatic    #1257 <Method int Log.e(String, String)>
	//  128  271:pop             
	//  129  272:return          
	}

	private boolean hasUpdatedView()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          57
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   13   23:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.isUpdated())
	//*  15   27:aload_3         
	//*  16   28:ifnull          50
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifeq            41
	//*  20   38:goto            50
	//*  21   41:aload_3         
	//*  22   42:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  23   45:ifeq            50
				return true;
	//   24   48:iconst_1        
	//   25   49:ireturn         
		}

	//   26   50:iload_1         
	//   27   51:iconst_1        
	//   28   52:iadd            
	//   29   53:istore_1        
	//*  30   54:goto            10
		return false;
	//   31   57:iconst_0        
	//   32   58:ireturn         
	}

	private void initChildrenHelper()
	{
		mChildHelper = new ChildHelper(new ChildHelper.Callback() {

			public void addView(View view, int i)
			{
				RecyclerView.this.addView(view, i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #24  <Method void RecyclerView.addView(View, int)>
				dispatchChildAttached(view);
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:aload_1         
			//    8   14:invokevirtual   #28  <Method void RecyclerView.dispatchChildAttached(View)>
			//    9   17:return          
			}

			public void attachViewToParent(View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
			{
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore          4
				if(viewholder != null)
			//*   3    6:aload           4
			//*   4    8:ifnull          78
				{
					if(!viewholder.isTmpDetached() && !viewholder.shouldIgnore())
			//*   5   11:aload           4
			//*   6   13:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*   7   16:ifne            73
			//*   8   19:aload           4
			//*   9   21:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  10   24:ifne            73
					{
						view = ((View) (new StringBuilder()));
			//   11   27:new             #45  <Class StringBuilder>
			//   12   30:dup             
			//   13   31:invokespecial   #46  <Method void StringBuilder()>
			//   14   34:astore_1        
						((StringBuilder) (view)).append("Called attach on a child which is not detached: ");
			//   15   35:aload_1         
			//   16   36:ldc1            #48  <String "Called attach on a child which is not detached: ">
			//   17   38:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   18   41:pop             
						((StringBuilder) (view)).append(((Object) (viewholder)));
			//   19   42:aload_1         
			//   20   43:aload           4
			//   21   45:invokevirtual   #55  <Method StringBuilder StringBuilder.append(Object)>
			//   22   48:pop             
						((StringBuilder) (view)).append(exceptionLabel());
			//   23   49:aload_1         
			//   24   50:aload_0         
			//   25   51:getfield        #17  <Field RecyclerView this$0>
			//   26   54:invokevirtual   #59  <Method String RecyclerView.exceptionLabel()>
			//   27   57:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   28   60:pop             
						throw new IllegalArgumentException(((StringBuilder) (view)).toString());
			//   29   61:new             #61  <Class IllegalArgumentException>
			//   30   64:dup             
			//   31   65:aload_1         
			//   32   66:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   33   69:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   34   72:athrow          
					}
					viewholder.clearTmpDetachFlag();
			//   35   73:aload           4
			//   36   75:invokevirtual   #70  <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
				}
				RecyclerView.this.attachViewToParent(view, i, layoutparams);
			//   37   78:aload_0         
			//   38   79:getfield        #17  <Field RecyclerView this$0>
			//   39   82:aload_1         
			//   40   83:iload_2         
			//   41   84:aload_3         
			//   42   85:invokestatic    #74  <Method void RecyclerView.access$000(RecyclerView, View, int, android.view.ViewGroup$LayoutParams)>
			//   43   88:return          
			}

			public void detachViewFromParent(int i)
			{
				Object obj = ((Object) (getChildAt(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #80  <Method View getChildAt(int)>
			//    3    5:astore_2        
				if(obj != null)
			//*   4    6:aload_2         
			//*   5    7:ifnull          85
				{
					obj = ((Object) (RecyclerView.getChildViewHolderInt(((View) (obj)))));
			//    6   10:aload_2         
			//    7   11:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    8   14:astore_2        
					if(obj != null)
			//*   9   15:aload_2         
			//*  10   16:ifnull          85
					{
						if(((ViewHolder) (obj)).isTmpDetached() && !((ViewHolder) (obj)).shouldIgnore())
			//*  11   19:aload_2         
			//*  12   20:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*  13   23:ifeq            78
			//*  14   26:aload_2         
			//*  15   27:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  16   30:ifne            78
						{
							StringBuilder stringbuilder = new StringBuilder();
			//   17   33:new             #45  <Class StringBuilder>
			//   18   36:dup             
			//   19   37:invokespecial   #46  <Method void StringBuilder()>
			//   20   40:astore_3        
							stringbuilder.append("called detach on an already detached child ");
			//   21   41:aload_3         
			//   22   42:ldc1            #82  <String "called detach on an already detached child ">
			//   23   44:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   24   47:pop             
							stringbuilder.append(obj);
			//   25   48:aload_3         
			//   26   49:aload_2         
			//   27   50:invokevirtual   #55  <Method StringBuilder StringBuilder.append(Object)>
			//   28   53:pop             
							stringbuilder.append(exceptionLabel());
			//   29   54:aload_3         
			//   30   55:aload_0         
			//   31   56:getfield        #17  <Field RecyclerView this$0>
			//   32   59:invokevirtual   #59  <Method String RecyclerView.exceptionLabel()>
			//   33   62:invokevirtual   #52  <Method StringBuilder StringBuilder.append(String)>
			//   34   65:pop             
							throw new IllegalArgumentException(stringbuilder.toString());
			//   35   66:new             #61  <Class IllegalArgumentException>
			//   36   69:dup             
			//   37   70:aload_3         
			//   38   71:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   39   74:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   40   77:athrow          
						}
						((ViewHolder) (obj)).addFlags(256);
			//   41   78:aload_2         
			//   42   79:sipush          256
			//   43   82:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					}
				}
				RecyclerView.this.detachViewFromParent(i);
			//   44   85:aload_0         
			//   45   86:getfield        #17  <Field RecyclerView this$0>
			//   46   89:iload_1         
			//   47   90:invokestatic    #89  <Method void RecyclerView.access$100(RecyclerView, int)>
			//   48   93:return          
			}

			public View getChildAt(int i)
			{
				return RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:areturn         
			}

			public int getChildCount()
			{
				return RecyclerView.this.getChildCount();
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:invokevirtual   #94  <Method int RecyclerView.getChildCount()>
			//    3    7:ireturn         
			}

			public ViewHolder getChildViewHolder(View view)
			{
				return RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:areturn         
			}

			public int indexOfChild(View view)
			{
				return RecyclerView.this.indexOfChild(view);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:invokevirtual   #99  <Method int RecyclerView.indexOfChild(View)>
			//    4    8:ireturn         
			}

			public void onEnteredHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onEnteredHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #104 <Method void RecyclerView$ViewHolder.access$200(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void onLeftHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onLeftHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #108 <Method void RecyclerView$ViewHolder.access$300(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void removeAllViews()
			{
				int j = getChildCount();
			//    0    0:aload_0         
			//    1    1:invokevirtual   #110 <Method int getChildCount()>
			//    2    4:istore_2        
				for(int i = 0; i < j; i++)
			//*   3    5:iconst_0        
			//*   4    6:istore_1        
			//*   5    7:iload_1         
			//*   6    8:iload_2         
			//*   7    9:icmpge          37
				{
					View view = getChildAt(i);
			//    8   12:aload_0         
			//    9   13:iload_1         
			//   10   14:invokevirtual   #80  <Method View getChildAt(int)>
			//   11   17:astore_3        
					dispatchChildDetached(view);
			//   12   18:aload_0         
			//   13   19:getfield        #17  <Field RecyclerView this$0>
			//   14   22:aload_3         
			//   15   23:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   16   26:aload_3         
			//   17   27:invokevirtual   #118 <Method void View.clearAnimation()>
				}

			//   18   30:iload_1         
			//   19   31:iconst_1        
			//   20   32:iadd            
			//   21   33:istore_1        
			//*  22   34:goto            7
				RecyclerView.this.removeAllViews();
			//   23   37:aload_0         
			//   24   38:getfield        #17  <Field RecyclerView this$0>
			//   25   41:invokevirtual   #120 <Method void RecyclerView.removeAllViews()>
			//   26   44:return          
			}

			public void removeViewAt(int i)
			{
				View view = RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:astore_2        
				if(view != null)
			//*   5    9:aload_2         
			//*   6   10:ifnull          25
				{
					dispatchChildDetached(view);
			//    7   13:aload_0         
			//    8   14:getfield        #17  <Field RecyclerView this$0>
			//    9   17:aload_2         
			//   10   18:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   11   21:aload_2         
			//   12   22:invokevirtual   #118 <Method void View.clearAnimation()>
				}
				RecyclerView.this.removeViewAt(i);
			//   13   25:aload_0         
			//   14   26:getfield        #17  <Field RecyclerView this$0>
			//   15   29:iload_1         
			//   16   30:invokevirtual   #123 <Method void RecyclerView.removeViewAt(int)>
			//   17   33:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #688 <Class ChildHelper>
	//    2    4:dup             
	//    3    5:new             #18  <Class RecyclerView$5>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1259 <Method void RecyclerView$5(RecyclerView)>
	//    7   13:invokespecial   #1262 <Method void ChildHelper(ChildHelper$Callback)>
	//    8   16:putfield        #682 <Field ChildHelper mChildHelper>
	//    9   19:return          
	}

	private boolean isPreferredNextFocus(View view, View view1, int i)
	{
		boolean flag5 = false;
	//    0    0:iconst_0        
	//    1    1:istore          9
		boolean flag = false;
	//    2    3:iconst_0        
	//    3    4:istore          7
		boolean flag6 = false;
	//    4    6:iconst_0        
	//    5    7:istore          10
		boolean flag7 = false;
	//    6    9:iconst_0        
	//    7   10:istore          11
		boolean flag8 = false;
	//    8   12:iconst_0        
	//    9   13:istore          12
		boolean flag4 = false;
	//   10   15:iconst_0        
	//   11   16:istore          8
		if(view1 != null)
	//*  12   18:aload_2         
	//*  13   19:ifnull          575
		{
			if(view1 == this)
	//*  14   22:aload_2         
	//*  15   23:aload_0         
	//*  16   24:if_acmpne       29
				return false;
	//   17   27:iconst_0        
	//   18   28:ireturn         
			if(findContainingItemView(view1) == null)
	//*  19   29:aload_0         
	//*  20   30:aload_2         
	//*  21   31:invokevirtual   #1268 <Method View findContainingItemView(View)>
	//*  22   34:ifnonnull       39
				return false;
	//   23   37:iconst_0        
	//   24   38:ireturn         
			if(view == null)
	//*  25   39:aload_1         
	//*  26   40:ifnonnull       45
				return true;
	//   27   43:iconst_1        
	//   28   44:ireturn         
			if(findContainingItemView(view) == null)
	//*  29   45:aload_0         
	//*  30   46:aload_1         
	//*  31   47:invokevirtual   #1268 <Method View findContainingItemView(View)>
	//*  32   50:ifnonnull       55
				return true;
	//   33   53:iconst_1        
	//   34   54:ireturn         
			mTempRect.set(0, 0, view.getWidth(), view.getHeight());
	//   35   55:aload_0         
	//   36   56:getfield        #396 <Field Rect mTempRect>
	//   37   59:iconst_0        
	//   38   60:iconst_0        
	//   39   61:aload_1         
	//   40   62:invokevirtual   #1271 <Method int View.getWidth()>
	//   41   65:aload_1         
	//   42   66:invokevirtual   #1274 <Method int View.getHeight()>
	//   43   69:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
			mTempRect2.set(0, 0, view1.getWidth(), view1.getHeight());
	//   44   72:aload_0         
	//   45   73:getfield        #398 <Field Rect mTempRect2>
	//   46   76:iconst_0        
	//   47   77:iconst_0        
	//   48   78:aload_2         
	//   49   79:invokevirtual   #1271 <Method int View.getWidth()>
	//   50   82:aload_2         
	//   51   83:invokevirtual   #1274 <Method int View.getHeight()>
	//   52   86:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
			offsetDescendantRectToMyCoords(view, mTempRect);
	//   53   89:aload_0         
	//   54   90:aload_1         
	//   55   91:aload_0         
	//   56   92:getfield        #396 <Field Rect mTempRect>
	//   57   95:invokevirtual   #1277 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			offsetDescendantRectToMyCoords(view1, mTempRect2);
	//   58   98:aload_0         
	//   59   99:aload_2         
	//   60  100:aload_0         
	//   61  101:getfield        #398 <Field Rect mTempRect2>
	//   62  104:invokevirtual   #1277 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			int j = mLayout.getLayoutDirection();
	//   63  107:aload_0         
	//   64  108:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   65  111:invokevirtual   #1280 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//   66  114:istore          4
			byte byte0 = -1;
	//   67  116:iconst_m1       
	//   68  117:istore          5
			byte byte1;
			if(j == 1)
	//*  69  119:iload           4
	//*  70  121:iconst_1        
	//*  71  122:icmpne          131
				byte1 = -1;
	//   72  125:iconst_m1       
	//   73  126:istore          6
			else
	//*  74  128:goto            134
				byte1 = 1;
	//   75  131:iconst_1        
	//   76  132:istore          6
			if((mTempRect.left < mTempRect2.left || mTempRect.right <= mTempRect2.left) && mTempRect.right < mTempRect2.right)
	//*  77  134:aload_0         
	//*  78  135:getfield        #396 <Field Rect mTempRect>
	//*  79  138:getfield        #1152 <Field int Rect.left>
	//*  80  141:aload_0         
	//*  81  142:getfield        #398 <Field Rect mTempRect2>
	//*  82  145:getfield        #1152 <Field int Rect.left>
	//*  83  148:icmplt          168
	//*  84  151:aload_0         
	//*  85  152:getfield        #396 <Field Rect mTempRect>
	//*  86  155:getfield        #1170 <Field int Rect.right>
	//*  87  158:aload_0         
	//*  88  159:getfield        #398 <Field Rect mTempRect2>
	//*  89  162:getfield        #1152 <Field int Rect.left>
	//*  90  165:icmpgt          191
	//*  91  168:aload_0         
	//*  92  169:getfield        #396 <Field Rect mTempRect>
	//*  93  172:getfield        #1170 <Field int Rect.right>
	//*  94  175:aload_0         
	//*  95  176:getfield        #398 <Field Rect mTempRect2>
	//*  96  179:getfield        #1170 <Field int Rect.right>
	//*  97  182:icmpge          191
				j = 1;
	//   98  185:iconst_1        
	//   99  186:istore          4
			else
	//* 100  188:goto            251
			if((mTempRect.right > mTempRect2.right || mTempRect.left >= mTempRect2.right) && mTempRect.left > mTempRect2.left)
	//* 101  191:aload_0         
	//* 102  192:getfield        #396 <Field Rect mTempRect>
	//* 103  195:getfield        #1170 <Field int Rect.right>
	//* 104  198:aload_0         
	//* 105  199:getfield        #398 <Field Rect mTempRect2>
	//* 106  202:getfield        #1170 <Field int Rect.right>
	//* 107  205:icmpgt          225
	//* 108  208:aload_0         
	//* 109  209:getfield        #396 <Field Rect mTempRect>
	//* 110  212:getfield        #1152 <Field int Rect.left>
	//* 111  215:aload_0         
	//* 112  216:getfield        #398 <Field Rect mTempRect2>
	//* 113  219:getfield        #1170 <Field int Rect.right>
	//* 114  222:icmplt          248
	//* 115  225:aload_0         
	//* 116  226:getfield        #396 <Field Rect mTempRect>
	//* 117  229:getfield        #1152 <Field int Rect.left>
	//* 118  232:aload_0         
	//* 119  233:getfield        #398 <Field Rect mTempRect2>
	//* 120  236:getfield        #1152 <Field int Rect.left>
	//* 121  239:icmple          248
				j = -1;
	//  122  242:iconst_m1       
	//  123  243:istore          4
			else
	//* 124  245:goto            251
				j = 0;
	//  125  248:iconst_0        
	//  126  249:istore          4
			if((mTempRect.top < mTempRect2.top || mTempRect.bottom <= mTempRect2.top) && mTempRect.bottom < mTempRect2.bottom)
	//* 127  251:aload_0         
	//* 128  252:getfield        #396 <Field Rect mTempRect>
	//* 129  255:getfield        #1161 <Field int Rect.top>
	//* 130  258:aload_0         
	//* 131  259:getfield        #398 <Field Rect mTempRect2>
	//* 132  262:getfield        #1161 <Field int Rect.top>
	//* 133  265:icmplt          285
	//* 134  268:aload_0         
	//* 135  269:getfield        #396 <Field Rect mTempRect>
	//* 136  272:getfield        #1179 <Field int Rect.bottom>
	//* 137  275:aload_0         
	//* 138  276:getfield        #398 <Field Rect mTempRect2>
	//* 139  279:getfield        #1161 <Field int Rect.top>
	//* 140  282:icmpgt          308
	//* 141  285:aload_0         
	//* 142  286:getfield        #396 <Field Rect mTempRect>
	//* 143  289:getfield        #1179 <Field int Rect.bottom>
	//* 144  292:aload_0         
	//* 145  293:getfield        #398 <Field Rect mTempRect2>
	//* 146  296:getfield        #1179 <Field int Rect.bottom>
	//* 147  299:icmpge          308
				byte0 = 1;
	//  148  302:iconst_1        
	//  149  303:istore          5
			else
	//* 150  305:goto            365
			if(mTempRect.bottom <= mTempRect2.bottom && mTempRect.top < mTempRect2.bottom || mTempRect.top <= mTempRect2.top)
	//* 151  308:aload_0         
	//* 152  309:getfield        #396 <Field Rect mTempRect>
	//* 153  312:getfield        #1179 <Field int Rect.bottom>
	//* 154  315:aload_0         
	//* 155  316:getfield        #398 <Field Rect mTempRect2>
	//* 156  319:getfield        #1179 <Field int Rect.bottom>
	//* 157  322:icmpgt          342
	//* 158  325:aload_0         
	//* 159  326:getfield        #396 <Field Rect mTempRect>
	//* 160  329:getfield        #1161 <Field int Rect.top>
	//* 161  332:aload_0         
	//* 162  333:getfield        #398 <Field Rect mTempRect2>
	//* 163  336:getfield        #1179 <Field int Rect.bottom>
	//* 164  339:icmplt          362
	//* 165  342:aload_0         
	//* 166  343:getfield        #396 <Field Rect mTempRect>
	//* 167  346:getfield        #1161 <Field int Rect.top>
	//* 168  349:aload_0         
	//* 169  350:getfield        #398 <Field Rect mTempRect2>
	//* 170  353:getfield        #1161 <Field int Rect.top>
	//* 171  356:icmple          362
	//* 172  359:goto            365
				byte0 = 0;
	//  173  362:iconst_0        
	//  174  363:istore          5
			if(i != 17)
	//* 175  365:iload_3         
	//* 176  366:bipush          17
	//* 177  368:icmpeq          560
			{
				if(i != 33)
	//* 178  371:iload_3         
	//* 179  372:bipush          33
	//* 180  374:icmpeq          545
				{
					if(i != 66)
	//* 181  377:iload_3         
	//* 182  378:bipush          66
	//* 183  380:icmpeq          530
					{
						if(i != 130)
	//* 184  383:iload_3         
	//* 185  384:sipush          130
	//* 186  387:icmpeq          519
						{
							switch(i)
	//* 187  390:iload_3         
							{
	//* 188  391:tableswitch     1 2: default 412
	//	               1 487
	//	               2 455
							default:
								view = ((View) (new StringBuilder()));
	//  189  412:new             #812 <Class StringBuilder>
	//  190  415:dup             
	//  191  416:invokespecial   #813 <Method void StringBuilder()>
	//  192  419:astore_1        
								((StringBuilder) (view)).append("Invalid direction: ");
	//  193  420:aload_1         
	//  194  421:ldc2            #1282 <String "Invalid direction: ">
	//  195  424:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  196  427:pop             
								((StringBuilder) (view)).append(i);
	//  197  428:aload_1         
	//  198  429:iload_3         
	//  199  430:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//  200  433:pop             
								((StringBuilder) (view)).append(exceptionLabel());
	//  201  434:aload_1         
	//  202  435:aload_0         
	//  203  436:invokevirtual   #1242 <Method String exceptionLabel()>
	//  204  439:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  205  442:pop             
								throw new IllegalArgumentException(((StringBuilder) (view)).toString());
	//  206  443:new             #1287 <Class IllegalArgumentException>
	//  207  446:dup             
	//  208  447:aload_1         
	//  209  448:invokevirtual   #827 <Method String StringBuilder.toString()>
	//  210  451:invokespecial   #1288 <Method void IllegalArgumentException(String)>
	//  211  454:athrow          

							case 2: // '\002'
label0:
								{
									if(byte0 <= 0)
	//* 212  455:iload           5
	//* 213  457:ifgt            481
									{
										flag = flag4;
	//  214  460:iload           8
	//  215  462:istore          7
										if(byte0 != 0)
											break label0;
	//  216  464:iload           5
	//  217  466:ifne            484
										flag = flag4;
	//  218  469:iload           8
	//  219  471:istore          7
										if(j * byte1 < 0)
											break label0;
	//  220  473:iload           4
	//  221  475:iload           6
	//  222  477:imul            
	//  223  478:iflt            484
									}
									flag = true;
	//  224  481:iconst_1        
	//  225  482:istore          7
								}
								return flag;
	//  226  484:iload           7
	//  227  486:ireturn         

							case 1: // '\001'
label1:
								{
									if(byte0 >= 0)
	//* 228  487:iload           5
	//* 229  489:iflt            513
									{
										flag = flag5;
	//  230  492:iload           9
	//  231  494:istore          7
										if(byte0 != 0)
											break label1;
	//  232  496:iload           5
	//  233  498:ifne            516
										flag = flag5;
	//  234  501:iload           9
	//  235  503:istore          7
										if(j * byte1 > 0)
											break label1;
	//  236  505:iload           4
	//  237  507:iload           6
	//  238  509:imul            
	//  239  510:ifgt            516
									}
									flag = true;
	//  240  513:iconst_1        
	//  241  514:istore          7
								}
								return flag;
	//  242  516:iload           7
	//  243  518:ireturn         
							}
						} else
						{
							if(byte0 > 0)
	//* 244  519:iload           5
	//* 245  521:ifle            527
								flag = true;
	//  246  524:iconst_1        
	//  247  525:istore          7
							return flag;
	//  248  527:iload           7
	//  249  529:ireturn         
						}
					} else
					{
						boolean flag1 = flag6;
	//  250  530:iload           10
	//  251  532:istore          7
						if(j > 0)
	//* 252  534:iload           4
	//* 253  536:ifle            542
							flag1 = true;
	//  254  539:iconst_1        
	//  255  540:istore          7
						return flag1;
	//  256  542:iload           7
	//  257  544:ireturn         
					}
				} else
				{
					boolean flag2 = flag7;
	//  258  545:iload           11
	//  259  547:istore          7
					if(byte0 < 0)
	//* 260  549:iload           5
	//* 261  551:ifge            557
						flag2 = true;
	//  262  554:iconst_1        
	//  263  555:istore          7
					return flag2;
	//  264  557:iload           7
	//  265  559:ireturn         
				}
			} else
			{
				boolean flag3 = flag8;
	//  266  560:iload           12
	//  267  562:istore          7
				if(j < 0)
	//* 268  564:iload           4
	//* 269  566:ifge            572
					flag3 = true;
	//  270  569:iconst_1        
	//  271  570:istore          7
				return flag3;
	//  272  572:iload           7
	//  273  574:ireturn         
			}
		} else
		{
			return false;
	//  274  575:iconst_0        
	//  275  576:ireturn         
		}
	}

	private void onPointerUp(MotionEvent motionevent)
	{
		int i = motionevent.getActionIndex();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1293 <Method int MotionEvent.getActionIndex()>
	//    2    4:istore_2        
		if(motionevent.getPointerId(i) == mScrollPointerId)
	//*   3    5:aload_1         
	//*   4    6:iload_2         
	//*   5    7:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//*   6   10:aload_0         
	//*   7   11:getfield        #432 <Field int mScrollPointerId>
	//*   8   14:icmpne          79
		{
			if(i == 0)
	//*   9   17:iload_2         
	//*  10   18:ifne            26
				i = 1;
	//   11   21:iconst_1        
	//   12   22:istore_2        
			else
	//*  13   23:goto            28
				i = 0;
	//   14   26:iconst_0        
	//   15   27:istore_2        
			mScrollPointerId = motionevent.getPointerId(i);
	//   16   28:aload_0         
	//   17   29:aload_1         
	//   18   30:iload_2         
	//   19   31:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//   20   34:putfield        #432 <Field int mScrollPointerId>
			int j = (int)(motionevent.getX(i) + 0.5F);
	//   21   37:aload_1         
	//   22   38:iload_2         
	//   23   39:invokevirtual   #1301 <Method float MotionEvent.getX(int)>
	//   24   42:ldc2            #1302 <Float 0.5F>
	//   25   45:fadd            
	//   26   46:f2i             
	//   27   47:istore_3        
			mLastTouchX = j;
	//   28   48:aload_0         
	//   29   49:iload_3         
	//   30   50:putfield        #1304 <Field int mLastTouchX>
			mInitialTouchX = j;
	//   31   53:aload_0         
	//   32   54:iload_3         
	//   33   55:putfield        #1306 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//   34   58:aload_1         
	//   35   59:iload_2         
	//   36   60:invokevirtual   #1309 <Method float MotionEvent.getY(int)>
	//   37   63:ldc2            #1302 <Float 0.5F>
	//   38   66:fadd            
	//   39   67:f2i             
	//   40   68:istore_2        
			mLastTouchY = i;
	//   41   69:aload_0         
	//   42   70:iload_2         
	//   43   71:putfield        #1311 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   44   74:aload_0         
	//   45   75:iload_2         
	//   46   76:putfield        #1313 <Field int mInitialTouchY>
		}
	//   47   79:return          
	}

	private boolean predictiveItemAnimationsEnabled()
	{
		return mItemAnimator != null && mLayout.supportsPredictiveItemAnimations();
	//    0    0:aload_0         
	//    1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1317 <Method boolean RecyclerView$LayoutManager.supportsPredictiveItemAnimations()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	private void processAdapterUpdatesAndSetAnimationFlags()
	{
		if(mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*   2    4:ifeq            29
		{
			mAdapterHelper.reset();
	//    3    7:aload_0         
	//    4    8:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//    5   11:invokevirtual   #1320 <Method void AdapterHelper.reset()>
			if(mDispatchItemsChangedEvent)
	//*   6   14:aload_0         
	//*   7   15:getfield        #416 <Field boolean mDispatchItemsChangedEvent>
	//*   8   18:ifeq            29
				mLayout.onItemsChanged(this);
	//    9   21:aload_0         
	//   10   22:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:invokevirtual   #1323 <Method void RecyclerView$LayoutManager.onItemsChanged(RecyclerView)>
		}
		if(predictiveItemAnimationsEnabled())
	//*  13   29:aload_0         
	//*  14   30:invokespecial   #1325 <Method boolean predictiveItemAnimationsEnabled()>
	//*  15   33:ifeq            46
			mAdapterHelper.preProcess();
	//   16   36:aload_0         
	//   17   37:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   18   40:invokevirtual   #1328 <Method void AdapterHelper.preProcess()>
		else
	//*  19   43:goto            53
			mAdapterHelper.consumeUpdatesInOnePass();
	//   20   46:aload_0         
	//   21   47:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   22   50:invokevirtual   #1010 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		boolean flag1 = mItemsAddedOrRemoved;
	//   23   53:aload_0         
	//   24   54:getfield        #452 <Field boolean mItemsAddedOrRemoved>
	//   25   57:istore_2        
		boolean flag2 = true;
	//   26   58:iconst_1        
	//   27   59:istore_3        
		boolean flag;
		if(!flag1 && !mItemsChanged)
	//*  28   60:iload_2         
	//*  29   61:ifne            79
	//*  30   64:aload_0         
	//*  31   65:getfield        #454 <Field boolean mItemsChanged>
	//*  32   68:ifeq            74
	//*  33   71:goto            79
			flag = false;
	//   34   74:iconst_0        
	//   35   75:istore_1        
		else
	//*  36   76:goto            81
			flag = true;
	//   37   79:iconst_1        
	//   38   80:istore_1        
		State state = mState;
	//   39   81:aload_0         
	//   40   82:getfield        #450 <Field RecyclerView$State mState>
	//   41   85:astore          4
		if(mFirstLayoutComplete && mItemAnimator != null && (mDataSetHasChangedAfterLayout || flag || mLayout.mRequestedSimpleAnimations) && (!mDataSetHasChangedAfterLayout || mAdapter.hasStableIds()))
	//*  42   87:aload_0         
	//*  43   88:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//*  44   91:ifeq            144
	//*  45   94:aload_0         
	//*  46   95:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  47   98:ifnull          144
	//*  48  101:aload_0         
	//*  49  102:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*  50  105:ifne            122
	//*  51  108:iload_1         
	//*  52  109:ifne            122
	//*  53  112:aload_0         
	//*  54  113:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  55  116:getfield        #1057 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
	//*  56  119:ifeq            144
	//*  57  122:aload_0         
	//*  58  123:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*  59  126:ifeq            139
	//*  60  129:aload_0         
	//*  61  130:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  62  133:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  63  136:ifeq            144
			flag1 = true;
	//   64  139:iconst_1        
	//   65  140:istore_2        
		else
	//*  66  141:goto            146
			flag1 = false;
	//   67  144:iconst_0        
	//   68  145:istore_2        
		state.mRunSimpleAnimations = flag1;
	//   69  146:aload           4
	//   70  148:iload_2         
	//   71  149:putfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		state = mState;
	//   72  152:aload_0         
	//   73  153:getfield        #450 <Field RecyclerView$State mState>
	//   74  156:astore          4
		if(mState.mRunSimpleAnimations && flag && !mDataSetHasChangedAfterLayout && predictiveItemAnimationsEnabled())
	//*  75  158:aload_0         
	//*  76  159:getfield        #450 <Field RecyclerView$State mState>
	//*  77  162:getfield        #898 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  78  165:ifeq            191
	//*  79  168:iload_1         
	//*  80  169:ifeq            191
	//*  81  172:aload_0         
	//*  82  173:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*  83  176:ifne            191
	//*  84  179:aload_0         
	//*  85  180:invokespecial   #1325 <Method boolean predictiveItemAnimationsEnabled()>
	//*  86  183:ifeq            191
			flag1 = flag2;
	//   87  186:iload_3         
	//   88  187:istore_2        
		else
	//*  89  188:goto            193
			flag1 = false;
	//   90  191:iconst_0        
	//   91  192:istore_2        
		state.mRunPredictiveAnimations = flag1;
	//   92  193:aload           4
	//   93  195:iload_2         
	//   94  196:putfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//   95  199:return          
	}

	private void pullGlows(float f, float f1, float f2, float f3)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          6
		if(f1 >= 0.0F) goto _L2; else goto _L1
	//    2    3:fload_2         
	//    3    4:fconst_0        
	//    4    5:fcmpg           
	//    5    6:ifge            43
_L1:
		ensureLeftGlow();
	//    6    9:aload_0         
	//    7   10:invokevirtual   #1335 <Method void ensureLeftGlow()>
		EdgeEffectCompat.onPull(mLeftGlow, -f1 / (float)getWidth(), 1.0F - f2 / (float)getHeight());
	//    8   13:aload_0         
	//    9   14:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//   10   17:fload_2         
	//   11   18:fneg            
	//   12   19:aload_0         
	//   13   20:invokevirtual   #1338 <Method int getWidth()>
	//   14   23:i2f             
	//   15   24:fdiv            
	//   16   25:fconst_1        
	//   17   26:fload_3         
	//   18   27:aload_0         
	//   19   28:invokevirtual   #1339 <Method int getHeight()>
	//   20   31:i2f             
	//   21   32:fdiv            
	//   22   33:fsub            
	//   23   34:invokestatic    #1345 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
_L4:
		boolean flag;
		flag = true;
	//   24   37:iconst_1        
	//   25   38:istore          5
		break MISSING_BLOCK_LABEL_80;
	//   26   40:goto            80
_L2:
		if(f1 <= 0.0F)
			break; /* Loop/switch isn't completed */
	//   27   43:fload_2         
	//   28   44:fconst_0        
	//   29   45:fcmpl           
	//   30   46:ifle            77
		ensureRightGlow();
	//   31   49:aload_0         
	//   32   50:invokevirtual   #1348 <Method void ensureRightGlow()>
		EdgeEffectCompat.onPull(mRightGlow, f1 / (float)getWidth(), f2 / (float)getHeight());
	//   33   53:aload_0         
	//   34   54:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   35   57:fload_2         
	//   36   58:aload_0         
	//   37   59:invokevirtual   #1338 <Method int getWidth()>
	//   38   62:i2f             
	//   39   63:fdiv            
	//   40   64:fload_3         
	//   41   65:aload_0         
	//   42   66:invokevirtual   #1339 <Method int getHeight()>
	//   43   69:i2f             
	//   44   70:fdiv            
	//   45   71:invokestatic    #1345 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
		if(true) goto _L4; else goto _L3
	//   46   74:goto            37
_L3:
		flag = false;
	//   47   77:iconst_0        
	//   48   78:istore          5
		if(f3 < 0.0F)
	//*  49   80:fload           4
	//*  50   82:fconst_0        
	//*  51   83:fcmpg           
	//*  52   84:ifge            121
		{
			ensureTopGlow();
	//   53   87:aload_0         
	//   54   88:invokevirtual   #1353 <Method void ensureTopGlow()>
			EdgeEffectCompat.onPull(mTopGlow, -f3 / (float)getHeight(), f / (float)getWidth());
	//   55   91:aload_0         
	//   56   92:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   57   95:fload           4
	//   58   97:fneg            
	//   59   98:aload_0         
	//   60   99:invokevirtual   #1339 <Method int getHeight()>
	//   61  102:i2f             
	//   62  103:fdiv            
	//   63  104:fload_1         
	//   64  105:aload_0         
	//   65  106:invokevirtual   #1338 <Method int getWidth()>
	//   66  109:i2f             
	//   67  110:fdiv            
	//   68  111:invokestatic    #1345 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = flag1;
	//   69  114:iload           6
	//   70  116:istore          5
		} else
	//*  71  118:goto            163
		if(f3 > 0.0F)
	//*  72  121:fload           4
	//*  73  123:fconst_0        
	//*  74  124:fcmpl           
	//*  75  125:ifle            163
		{
			ensureBottomGlow();
	//   76  128:aload_0         
	//   77  129:invokevirtual   #1358 <Method void ensureBottomGlow()>
			EdgeEffectCompat.onPull(mBottomGlow, f3 / (float)getHeight(), 1.0F - f / (float)getWidth());
	//   78  132:aload_0         
	//   79  133:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   80  136:fload           4
	//   81  138:aload_0         
	//   82  139:invokevirtual   #1339 <Method int getHeight()>
	//   83  142:i2f             
	//   84  143:fdiv            
	//   85  144:fconst_1        
	//   86  145:fload_1         
	//   87  146:aload_0         
	//   88  147:invokevirtual   #1338 <Method int getWidth()>
	//   89  150:i2f             
	//   90  151:fdiv            
	//   91  152:fsub            
	//   92  153:invokestatic    #1345 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = flag1;
	//   93  156:iload           6
	//   94  158:istore          5
		}
	//*  95  160:goto            163
		if(flag || f1 != 0.0F || f3 != 0.0F)
	//*  96  163:iload           5
	//*  97  165:ifne            181
	//*  98  168:fload_2         
	//*  99  169:fconst_0        
	//* 100  170:fcmpl           
	//* 101  171:ifne            181
	//* 102  174:fload           4
	//* 103  176:fconst_0        
	//* 104  177:fcmpl           
	//* 105  178:ifeq            185
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  106  181:aload_0         
	//  107  182:invokestatic    #1363 <Method void ViewCompat.postInvalidateOnAnimation(View)>
		return;
	//  108  185:return          
	}

	private void recoverFocusFromState()
	{
		if(mPreserveFocusAfterLayout && mAdapter != null && hasFocus() && getDescendantFocusability() != 0x60000)
	//*   0    0:aload_0         
	//*   1    1:getfield        #439 <Field boolean mPreserveFocusAfterLayout>
	//*   2    4:ifeq            277
	//*   3    7:aload_0         
	//*   4    8:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:ifnull          277
	//*   6   14:aload_0         
	//*   7   15:invokevirtual   #1364 <Method boolean hasFocus()>
	//*   8   18:ifeq            277
	//*   9   21:aload_0         
	//*  10   22:invokevirtual   #1367 <Method int getDescendantFocusability()>
	//*  11   25:ldc2            #1368 <Int 0x60000>
	//*  12   28:icmpeq          277
		{
			if(getDescendantFocusability() == 0x20000 && isFocused())
	//*  13   31:aload_0         
	//*  14   32:invokevirtual   #1367 <Method int getDescendantFocusability()>
	//*  15   35:ldc2            #1369 <Int 0x20000>
	//*  16   38:icmpne          49
	//*  17   41:aload_0         
	//*  18   42:invokevirtual   #1370 <Method boolean isFocused()>
	//*  19   45:ifeq            49
				return;
	//   20   48:return          
			if(!isFocused())
	//*  21   49:aload_0         
	//*  22   50:invokevirtual   #1370 <Method boolean isFocused()>
	//*  23   53:ifne            109
			{
				View view = getFocusedChild();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #1371 <Method View getFocusedChild()>
	//   26   60:astore_3        
				if(IGNORE_DETACHED_FOCUSED_CHILD && (view.getParent() == null || !view.hasFocus()))
	//*  27   61:getstatic       #345 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//*  28   64:ifeq            97
	//*  29   67:aload_3         
	//*  30   68:invokevirtual   #670 <Method ViewParent View.getParent()>
	//*  31   71:ifnull          81
	//*  32   74:aload_3         
	//*  33   75:invokevirtual   #1196 <Method boolean View.hasFocus()>
	//*  34   78:ifne            97
				{
					if(mChildHelper.getChildCount() == 0)
	//*  35   81:aload_0         
	//*  36   82:getfield        #682 <Field ChildHelper mChildHelper>
	//*  37   85:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//*  38   88:ifne            109
					{
						requestFocus();
	//   39   91:aload_0         
	//   40   92:invokevirtual   #1374 <Method boolean requestFocus()>
	//   41   95:pop             
						return;
	//   42   96:return          
					}
				} else
				if(!mChildHelper.isHidden(view))
	//*  43   97:aload_0         
	//*  44   98:getfield        #682 <Field ChildHelper mChildHelper>
	//*  45  101:aload_3         
	//*  46  102:invokevirtual   #1378 <Method boolean ChildHelper.isHidden(View)>
	//*  47  105:ifne            109
					return;
	//   48  108:return          
			}
			long l = mState.mFocusedItemId;
	//   49  109:aload_0         
	//   50  110:getfield        #450 <Field RecyclerView$State mState>
	//   51  113:getfield        #1381 <Field long RecyclerView$State.mFocusedItemId>
	//   52  116:lstore_1        
			Object obj1 = null;
	//   53  117:aconst_null     
	//   54  118:astore          4
			Object obj;
			if(l != -1L && mAdapter.hasStableIds())
	//*  55  120:lload_1         
	//*  56  121:ldc2w           #167 <Long -1L>
	//*  57  124:lcmp            
	//*  58  125:ifeq            153
	//*  59  128:aload_0         
	//*  60  129:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  61  132:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  62  135:ifeq            153
				obj = ((Object) (findViewHolderForItemId(mState.mFocusedItemId)));
	//   63  138:aload_0         
	//   64  139:aload_0         
	//   65  140:getfield        #450 <Field RecyclerView$State mState>
	//   66  143:getfield        #1381 <Field long RecyclerView$State.mFocusedItemId>
	//   67  146:invokevirtual   #1384 <Method RecyclerView$ViewHolder findViewHolderForItemId(long)>
	//   68  149:astore_3        
			else
	//*  69  150:goto            155
				obj = null;
	//   70  153:aconst_null     
	//   71  154:astore_3        
			if(obj != null && !mChildHelper.isHidden(((ViewHolder) (obj)).itemView) && ((ViewHolder) (obj)).itemView.hasFocusable())
	//*  72  155:aload_3         
	//*  73  156:ifnull          194
	//*  74  159:aload_0         
	//*  75  160:getfield        #682 <Field ChildHelper mChildHelper>
	//*  76  163:aload_3         
	//*  77  164:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  78  167:invokevirtual   #1378 <Method boolean ChildHelper.isHidden(View)>
	//*  79  170:ifne            194
	//*  80  173:aload_3         
	//*  81  174:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  82  177:invokevirtual   #1133 <Method boolean View.hasFocusable()>
	//*  83  180:ifne            186
	//*  84  183:goto            194
			{
				obj = ((Object) (((ViewHolder) (obj)).itemView));
	//   85  186:aload_3         
	//   86  187:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   87  190:astore_3        
			} else
	//*  88  191:goto            212
			{
				obj = ((Object) (obj1));
	//   89  194:aload           4
	//   90  196:astore_3        
				if(mChildHelper.getChildCount() > 0)
	//*  91  197:aload_0         
	//*  92  198:getfield        #682 <Field ChildHelper mChildHelper>
	//*  93  201:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//*  94  204:ifle            212
					obj = ((Object) (findNextViewToFocus()));
	//   95  207:aload_0         
	//   96  208:invokespecial   #1386 <Method View findNextViewToFocus()>
	//   97  211:astore_3        
			}
			if(obj != null)
	//*  98  212:aload_3         
	//*  99  213:ifnull          276
			{
				View view1 = ((View) (obj));
	//  100  216:aload_3         
	//  101  217:astore          4
				if((long)mState.mFocusedSubChildId != -1L)
	//* 102  219:aload_0         
	//* 103  220:getfield        #450 <Field RecyclerView$State mState>
	//* 104  223:getfield        #1389 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 105  226:i2l             
	//* 106  227:ldc2w           #167 <Long -1L>
	//* 107  230:lcmp            
	//* 108  231:ifeq            270
				{
					View view2 = ((View) (obj)).findViewById(mState.mFocusedSubChildId);
	//  109  234:aload_3         
	//  110  235:aload_0         
	//  111  236:getfield        #450 <Field RecyclerView$State mState>
	//  112  239:getfield        #1389 <Field int RecyclerView$State.mFocusedSubChildId>
	//  113  242:invokevirtual   #1392 <Method View View.findViewById(int)>
	//  114  245:astore          5
					view1 = ((View) (obj));
	//  115  247:aload_3         
	//  116  248:astore          4
					if(view2 != null)
	//* 117  250:aload           5
	//* 118  252:ifnull          270
					{
						view1 = ((View) (obj));
	//  119  255:aload_3         
	//  120  256:astore          4
						if(view2.isFocusable())
	//* 121  258:aload           5
	//* 122  260:invokevirtual   #1395 <Method boolean View.isFocusable()>
	//* 123  263:ifeq            270
							view1 = view2;
	//  124  266:aload           5
	//  125  268:astore          4
					}
				}
				view1.requestFocus();
	//  126  270:aload           4
	//  127  272:invokevirtual   #1396 <Method boolean View.requestFocus()>
	//  128  275:pop             
			}
			return;
	//  129  276:return          
		} else
		{
			return;
	//  130  277:return          
		}
	}

	private void releaseGlows()
	{
		boolean flag1;
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          25
		{
			mLeftGlow.onRelease();
	//    3    7:aload_0         
	//    4    8:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//    5   11:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//    6   14:aload_0         
	//    7   15:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//    8   18:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//    9   21:istore_2        
		} else
	//*  10   22:goto            27
		{
			flag1 = false;
	//   11   25:iconst_0        
	//   12   26:istore_2        
		}
		boolean flag = flag1;
	//   13   27:iload_2         
	//   14   28:istore_1        
		if(mTopGlow != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*  17   33:ifnull          53
		{
			mTopGlow.onRelease();
	//   18   36:aload_0         
	//   19   37:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   20   40:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mTopGlow.isFinished();
	//   21   43:iload_2         
	//   22   44:aload_0         
	//   23   45:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   24   48:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   25   51:ior             
	//   26   52:istore_1        
		}
		flag1 = flag;
	//   27   53:iload_1         
	//   28   54:istore_2        
		if(mRightGlow != null)
	//*  29   55:aload_0         
	//*  30   56:getfield        #1350 <Field EdgeEffect mRightGlow>
	//*  31   59:ifnull          79
		{
			mRightGlow.onRelease();
	//   32   62:aload_0         
	//   33   63:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   34   66:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
			flag1 = flag | mRightGlow.isFinished();
	//   35   69:iload_1         
	//   36   70:aload_0         
	//   37   71:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   38   74:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   39   77:ior             
	//   40   78:istore_2        
		}
		flag = flag1;
	//   41   79:iload_2         
	//   42   80:istore_1        
		if(mBottomGlow != null)
	//*  43   81:aload_0         
	//*  44   82:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//*  45   85:ifnull          105
		{
			mBottomGlow.onRelease();
	//   46   88:aload_0         
	//   47   89:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   48   92:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mBottomGlow.isFinished();
	//   49   95:iload_2         
	//   50   96:aload_0         
	//   51   97:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   52  100:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   53  103:ior             
	//   54  104:istore_1        
		}
		if(flag)
	//*  55  105:iload_1         
	//*  56  106:ifeq            113
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   57  109:aload_0         
	//   58  110:invokestatic    #1363 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   59  113:return          
	}

	private void requestChildOnScreen(View view, View view1)
	{
		Object obj;
		if(view1 != null)
	//*   0    0:aload_2         
	//*   1    1:ifnull          10
			obj = ((Object) (view1));
	//    2    4:aload_2         
	//    3    5:astore          5
		else
	//*   4    7:goto            13
			obj = ((Object) (view));
	//    5   10:aload_1         
	//    6   11:astore          5
		mTempRect.set(0, 0, ((View) (obj)).getWidth(), ((View) (obj)).getHeight());
	//    7   13:aload_0         
	//    8   14:getfield        #396 <Field Rect mTempRect>
	//    9   17:iconst_0        
	//   10   18:iconst_0        
	//   11   19:aload           5
	//   12   21:invokevirtual   #1271 <Method int View.getWidth()>
	//   13   24:aload           5
	//   14   26:invokevirtual   #1274 <Method int View.getHeight()>
	//   15   29:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
		obj = ((Object) (((View) (obj)).getLayoutParams()));
	//   16   32:aload           5
	//   17   34:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   18   37:astore          5
		if(obj instanceof LayoutParams)
	//*  19   39:aload           5
	//*  20   41:instanceof      #74  <Class RecyclerView$LayoutParams>
	//*  21   44:ifeq            157
		{
			obj = ((Object) ((LayoutParams)obj));
	//   22   47:aload           5
	//   23   49:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   24   52:astore          5
			if(!((LayoutParams) (obj)).mInsetsDirty)
	//*  25   54:aload           5
	//*  26   56:getfield        #1410 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*  27   59:ifne            157
			{
				obj = ((Object) (((LayoutParams) (obj)).mDecorInsets));
	//   28   62:aload           5
	//   29   64:getfield        #1146 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   30   67:astore          5
				Rect rect = mTempRect;
	//   31   69:aload_0         
	//   32   70:getfield        #396 <Field Rect mTempRect>
	//   33   73:astore          6
				rect.left = rect.left - ((Rect) (obj)).left;
	//   34   75:aload           6
	//   35   77:aload           6
	//   36   79:getfield        #1152 <Field int Rect.left>
	//   37   82:aload           5
	//   38   84:getfield        #1152 <Field int Rect.left>
	//   39   87:isub            
	//   40   88:putfield        #1152 <Field int Rect.left>
				rect = mTempRect;
	//   41   91:aload_0         
	//   42   92:getfield        #396 <Field Rect mTempRect>
	//   43   95:astore          6
				rect.right = rect.right + ((Rect) (obj)).right;
	//   44   97:aload           6
	//   45   99:aload           6
	//   46  101:getfield        #1170 <Field int Rect.right>
	//   47  104:aload           5
	//   48  106:getfield        #1170 <Field int Rect.right>
	//   49  109:iadd            
	//   50  110:putfield        #1170 <Field int Rect.right>
				rect = mTempRect;
	//   51  113:aload_0         
	//   52  114:getfield        #396 <Field Rect mTempRect>
	//   53  117:astore          6
				rect.top = rect.top - ((Rect) (obj)).top;
	//   54  119:aload           6
	//   55  121:aload           6
	//   56  123:getfield        #1161 <Field int Rect.top>
	//   57  126:aload           5
	//   58  128:getfield        #1161 <Field int Rect.top>
	//   59  131:isub            
	//   60  132:putfield        #1161 <Field int Rect.top>
				rect = mTempRect;
	//   61  135:aload_0         
	//   62  136:getfield        #396 <Field Rect mTempRect>
	//   63  139:astore          6
				rect.bottom = rect.bottom + ((Rect) (obj)).bottom;
	//   64  141:aload           6
	//   65  143:aload           6
	//   66  145:getfield        #1179 <Field int Rect.bottom>
	//   67  148:aload           5
	//   68  150:getfield        #1179 <Field int Rect.bottom>
	//   69  153:iadd            
	//   70  154:putfield        #1179 <Field int Rect.bottom>
			}
		}
		if(view1 != null)
	//*  71  157:aload_2         
	//*  72  158:ifnull          179
		{
			offsetDescendantRectToMyCoords(view1, mTempRect);
	//   73  161:aload_0         
	//   74  162:aload_2         
	//   75  163:aload_0         
	//   76  164:getfield        #396 <Field Rect mTempRect>
	//   77  167:invokevirtual   #1277 <Method void offsetDescendantRectToMyCoords(View, Rect)>
			offsetRectIntoDescendantCoords(view, mTempRect);
	//   78  170:aload_0         
	//   79  171:aload_1         
	//   80  172:aload_0         
	//   81  173:getfield        #396 <Field Rect mTempRect>
	//   82  176:invokevirtual   #1413 <Method void offsetRectIntoDescendantCoords(View, Rect)>
		}
		obj = ((Object) (mLayout));
	//   83  179:aload_0         
	//   84  180:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   85  183:astore          5
		Rect rect1 = mTempRect;
	//   86  185:aload_0         
	//   87  186:getfield        #396 <Field Rect mTempRect>
	//   88  189:astore          6
		boolean flag1 = mFirstLayoutComplete;
	//   89  191:aload_0         
	//   90  192:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//   91  195:istore          4
		boolean flag;
		if(view1 == null)
	//*  92  197:aload_2         
	//*  93  198:ifnonnull       206
			flag = true;
	//   94  201:iconst_1        
	//   95  202:istore_3        
		else
	//*  96  203:goto            208
			flag = false;
	//   97  206:iconst_0        
	//   98  207:istore_3        
		((LayoutManager) (obj)).requestChildRectangleOnScreen(this, view, rect1, flag1 ^ true, flag);
	//   99  208:aload           5
	//  100  210:aload_0         
	//  101  211:aload_1         
	//  102  212:aload           6
	//  103  214:iload           4
	//  104  216:iconst_1        
	//  105  217:ixor            
	//  106  218:iload_3         
	//  107  219:invokevirtual   #1417 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
	//  108  222:pop             
	//  109  223:return          
	}

	private void resetFocusInfo()
	{
		mState.mFocusedItemId = -1L;
	//    0    0:aload_0         
	//    1    1:getfield        #450 <Field RecyclerView$State mState>
	//    2    4:ldc2w           #167 <Long -1L>
	//    3    7:putfield        #1381 <Field long RecyclerView$State.mFocusedItemId>
		mState.mFocusedItemPosition = -1;
	//    4   10:aload_0         
	//    5   11:getfield        #450 <Field RecyclerView$State mState>
	//    6   14:iconst_m1       
	//    7   15:putfield        #1125 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = -1;
	//    8   18:aload_0         
	//    9   19:getfield        #450 <Field RecyclerView$State mState>
	//   10   22:iconst_m1       
	//   11   23:putfield        #1389 <Field int RecyclerView$State.mFocusedSubChildId>
	//   12   26:return          
	}

	private void resetTouch()
	{
		if(mVelocityTracker != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//*   2    4:ifnull          14
			mVelocityTracker.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//    5   11:invokevirtual   #1422 <Method void VelocityTracker.clear()>
		stopNestedScroll(0);
	//    6   14:aload_0         
	//    7   15:iconst_0        
	//    8   16:invokevirtual   #1425 <Method void stopNestedScroll(int)>
		releaseGlows();
	//    9   19:aload_0         
	//   10   20:invokespecial   #1427 <Method void releaseGlows()>
	//   11   23:return          
	}

	private void saveFocusInfo()
	{
		boolean flag = mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #439 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:istore_2        
		State state = null;
	//    3    5:aconst_null     
	//    4    6:astore          6
		Object obj;
		if(flag && hasFocus() && mAdapter != null)
	//*   5    8:iload_2         
	//*   6    9:ifeq            35
	//*   7   12:aload_0         
	//*   8   13:invokevirtual   #1364 <Method boolean hasFocus()>
	//*   9   16:ifeq            35
	//*  10   19:aload_0         
	//*  11   20:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          35
			obj = ((Object) (getFocusedChild()));
	//   13   26:aload_0         
	//   14   27:invokevirtual   #1371 <Method View getFocusedChild()>
	//   15   30:astore          5
		else
	//*  16   32:goto            38
			obj = null;
	//   17   35:aconst_null     
	//   18   36:astore          5
		if(obj == null)
	//*  19   38:aload           5
	//*  20   40:ifnonnull       50
			obj = ((Object) (state));
	//   21   43:aload           6
	//   22   45:astore          5
		else
	//*  23   47:goto            58
			obj = ((Object) (findContainingViewHolder(((View) (obj)))));
	//   24   50:aload_0         
	//   25   51:aload           5
	//   26   53:invokevirtual   #1430 <Method RecyclerView$ViewHolder findContainingViewHolder(View)>
	//   27   56:astore          5
		if(obj == null)
	//*  28   58:aload           5
	//*  29   60:ifnonnull       68
		{
			resetFocusInfo();
	//   30   63:aload_0         
	//   31   64:invokespecial   #1084 <Method void resetFocusInfo()>
			return;
	//   32   67:return          
		}
		state = mState;
	//   33   68:aload_0         
	//   34   69:getfield        #450 <Field RecyclerView$State mState>
	//   35   72:astore          6
		long l;
		if(mAdapter.hasStableIds())
	//*  36   74:aload_0         
	//*  37   75:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  38   78:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  39   81:ifeq            93
			l = ((ViewHolder) (obj)).getItemId();
	//   40   84:aload           5
	//   41   86:invokevirtual   #1434 <Method long RecyclerView$ViewHolder.getItemId()>
	//   42   89:lstore_3        
		else
	//*  43   90:goto            97
			l = -1L;
	//   44   93:ldc2w           #167 <Long -1L>
	//   45   96:lstore_3        
		state.mFocusedItemId = l;
	//   46   97:aload           6
	//   47   99:lload_3         
	//   48  100:putfield        #1381 <Field long RecyclerView$State.mFocusedItemId>
		state = mState;
	//   49  103:aload_0         
	//   50  104:getfield        #450 <Field RecyclerView$State mState>
	//   51  107:astore          6
		int i;
		if(mDataSetHasChangedAfterLayout)
	//*  52  109:aload_0         
	//*  53  110:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*  54  113:ifeq            121
			i = -1;
	//   55  116:iconst_m1       
	//   56  117:istore_1        
		else
	//*  57  118:goto            144
		if(((ViewHolder) (obj)).isRemoved())
	//*  58  121:aload           5
	//*  59  123:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  60  126:ifeq            138
			i = ((ViewHolder) (obj)).mOldPosition;
	//   61  129:aload           5
	//   62  131:getfield        #1437 <Field int RecyclerView$ViewHolder.mOldPosition>
	//   63  134:istore_1        
		else
	//*  64  135:goto            144
			i = ((ViewHolder) (obj)).getAdapterPosition();
	//   65  138:aload           5
	//   66  140:invokevirtual   #1440 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//   67  143:istore_1        
		state.mFocusedItemPosition = i;
	//   68  144:aload           6
	//   69  146:iload_1         
	//   70  147:putfield        #1125 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = getDeepestFocusedViewWithId(((ViewHolder) (obj)).itemView);
	//   71  150:aload_0         
	//   72  151:getfield        #450 <Field RecyclerView$State mState>
	//   73  154:aload_0         
	//   74  155:aload           5
	//   75  157:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   76  160:invokespecial   #1442 <Method int getDeepestFocusedViewWithId(View)>
	//   77  163:putfield        #1389 <Field int RecyclerView$State.mFocusedSubChildId>
	//   78  166:return          
	}

	private void setAdapterInternal(Adapter adapter, boolean flag, boolean flag1)
	{
		if(mAdapter != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          26
		{
			mAdapter.unregisterAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//    3    7:aload_0         
	//    4    8:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//    5   11:aload_0         
	//    6   12:getfield        #380 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//    7   15:invokevirtual   #1448 <Method void RecyclerView$Adapter.unregisterAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			mAdapter.onDetachedFromRecyclerView(this);
	//    8   18:aload_0         
	//    9   19:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   10   22:aload_0         
	//   11   23:invokevirtual   #1451 <Method void RecyclerView$Adapter.onDetachedFromRecyclerView(RecyclerView)>
		}
		if(!flag || flag1)
	//*  12   26:iload_2         
	//*  13   27:ifeq            34
	//*  14   30:iload_3         
	//*  15   31:ifeq            38
			removeAndRecycleViews();
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1454 <Method void removeAndRecycleViews()>
		mAdapterHelper.reset();
	//   18   38:aload_0         
	//   19   39:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   20   42:invokevirtual   #1320 <Method void AdapterHelper.reset()>
		Adapter adapter1 = mAdapter;
	//   21   45:aload_0         
	//   22   46:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   23   49:astore          4
		mAdapter = adapter;
	//   24   51:aload_0         
	//   25   52:aload_1         
	//   26   53:putfield        #909 <Field RecyclerView$Adapter mAdapter>
		if(adapter != null)
	//*  27   56:aload_1         
	//*  28   57:ifnull          73
		{
			adapter.registerAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//   29   60:aload_1         
	//   30   61:aload_0         
	//   31   62:getfield        #380 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//   32   65:invokevirtual   #1457 <Method void RecyclerView$Adapter.registerAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			adapter.onAttachedToRecyclerView(this);
	//   33   68:aload_1         
	//   34   69:aload_0         
	//   35   70:invokevirtual   #1460 <Method void RecyclerView$Adapter.onAttachedToRecyclerView(RecyclerView)>
		}
		if(mLayout != null)
	//*  36   73:aload_0         
	//*  37   74:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  38   77:ifnull          93
			mLayout.onAdapterChanged(adapter1, mAdapter);
	//   39   80:aload_0         
	//   40   81:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   41   84:aload           4
	//   42   86:aload_0         
	//   43   87:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   44   90:invokevirtual   #1464 <Method void RecyclerView$LayoutManager.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter)>
		mRecycler.onAdapterChanged(adapter1, mAdapter, flag);
	//   45   93:aload_0         
	//   46   94:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   47   97:aload           4
	//   48   99:aload_0         
	//   49  100:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   50  103:iload_2         
	//   51  104:invokevirtual   #1467 <Method void RecyclerView$Recycler.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		mState.mStructureChanged = true;
	//   52  107:aload_0         
	//   53  108:getfield        #450 <Field RecyclerView$State mState>
	//   54  111:iconst_1        
	//   55  112:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
	//   56  115:return          
	}

	private void stopScrollersInternal()
	{
		mViewFlinger.stop();
	//    0    0:aload_0         
	//    1    1:getfield        #442 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    2    4:invokevirtual   #1471 <Method void RecyclerView$ViewFlinger.stop()>
		if(mLayout != null)
	//*   3    7:aload_0         
	//*   4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:ifnull          21
			mLayout.stopSmoothScroller();
	//    6   14:aload_0         
	//    7   15:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    8   18:invokevirtual   #1474 <Method void RecyclerView$LayoutManager.stopSmoothScroller()>
	//    9   21:return          
	}

	void absorbGlows(int i, int j)
	{
		if(i < 0)
	//*   0    0:iload_1         
	//*   1    1:ifge            20
		{
			ensureLeftGlow();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #1335 <Method void ensureLeftGlow()>
			mLeftGlow.onAbsorb(-i);
	//    4    8:aload_0         
	//    5    9:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//    6   12:iload_1         
	//    7   13:ineg            
	//    8   14:invokevirtual   #1478 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*   9   17:goto            36
		if(i > 0)
	//*  10   20:iload_1         
	//*  11   21:ifle            36
		{
			ensureRightGlow();
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1348 <Method void ensureRightGlow()>
			mRightGlow.onAbsorb(i);
	//   14   28:aload_0         
	//   15   29:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1478 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(j < 0)
	//*  18   36:iload_2         
	//*  19   37:ifge            56
		{
			ensureTopGlow();
	//   20   40:aload_0         
	//   21   41:invokevirtual   #1353 <Method void ensureTopGlow()>
			mTopGlow.onAbsorb(-j);
	//   22   44:aload_0         
	//   23   45:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   24   48:iload_2         
	//   25   49:ineg            
	//   26   50:invokevirtual   #1478 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*  27   53:goto            72
		if(j > 0)
	//*  28   56:iload_2         
	//*  29   57:ifle            72
		{
			ensureBottomGlow();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1358 <Method void ensureBottomGlow()>
			mBottomGlow.onAbsorb(j);
	//   32   64:aload_0         
	//   33   65:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   34   68:iload_2         
	//   35   69:invokevirtual   #1478 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(i != 0 || j != 0)
	//*  36   72:iload_1         
	//*  37   73:ifne            80
	//*  38   76:iload_2         
	//*  39   77:ifeq            84
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   40   80:aload_0         
	//   41   81:invokestatic    #1363 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   42   84:return          
	}

	public void addFocusables(ArrayList arraylist, int i, int j)
	{
		if(mLayout == null || !mLayout.onAddFocusables(this, arraylist, i, j))
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          21
	//*   3    7:aload_0         
	//*   4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:aload_0         
	//*   6   12:aload_1         
	//*   7   13:iload_2         
	//*   8   14:iload_3         
	//*   9   15:invokevirtual   #1484 <Method boolean RecyclerView$LayoutManager.onAddFocusables(RecyclerView, ArrayList, int, int)>
	//*  10   18:ifne            28
			super.addFocusables(arraylist, i, j);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:iload_2         
	//   14   24:iload_3         
	//   15   25:invokespecial   #1486 <Method void ViewGroup.addFocusables(ArrayList, int, int)>
	//   16   28:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration)
	{
		addItemDecoration(itemdecoration, -1);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iconst_m1       
	//    3    3:invokevirtual   #1493 <Method void addItemDecoration(RecyclerView$ItemDecoration, int)>
	//    4    6:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration, int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #1495 <String "Cannot add item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1498 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		if(mItemDecorations.isEmpty())
	//*   7   17:aload_0         
	//*   8   18:getfield        #408 <Field ArrayList mItemDecorations>
	//*   9   21:invokevirtual   #1499 <Method boolean ArrayList.isEmpty()>
	//*  10   24:ifeq            32
			setWillNotDraw(false);
	//   11   27:aload_0         
	//   12   28:iconst_0        
	//   13   29:invokevirtual   #534 <Method void setWillNotDraw(boolean)>
		if(i < 0)
	//*  14   32:iload_2         
	//*  15   33:ifge            48
			mItemDecorations.add(((Object) (itemdecoration)));
	//   16   36:aload_0         
	//   17   37:getfield        #408 <Field ArrayList mItemDecorations>
	//   18   40:aload_1         
	//   19   41:invokevirtual   #1503 <Method boolean ArrayList.add(Object)>
	//   20   44:pop             
		else
	//*  21   45:goto            57
			mItemDecorations.add(i, ((Object) (itemdecoration)));
	//   22   48:aload_0         
	//   23   49:getfield        #408 <Field ArrayList mItemDecorations>
	//   24   52:iload_2         
	//   25   53:aload_1         
	//   26   54:invokevirtual   #1506 <Method void ArrayList.add(int, Object)>
		markItemDecorInsetsDirty();
	//   27   57:aload_0         
	//   28   58:invokevirtual   #1509 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1512 <Method void requestLayout()>
	//   31   65:return          
	}

	public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       18
			mOnChildAttachStateListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #405 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #406 <Method void ArrayList()>
	//    7   15:putfield        #1516 <Field List mOnChildAttachStateListeners>
		mOnChildAttachStateListeners.add(((Object) (onchildattachstatechangelistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1519 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	public void addOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.add(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #1503 <Method boolean ArrayList.add(Object)>
	//    4    8:pop             
	//    5    9:return          
	}

	public void addOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1525 <Field List mScrollListeners>
	//*   2    4:ifnonnull       18
			mScrollListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #405 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #406 <Method void ArrayList()>
	//    7   15:putfield        #1525 <Field List mScrollListeners>
		mScrollListeners.add(((Object) (onscrolllistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1525 <Field List mScrollListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1519 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	void animateAppearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #704 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateAppearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   3    5:aload_0         
	//*   4    6:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:aload_3         
	//*   8   12:invokevirtual   #1530 <Method boolean RecyclerView$ItemAnimator.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*   9   15:ifeq            22
			postAnimationRunner();
	//   10   18:aload_0         
	//   11   19:invokevirtual   #719 <Method void postAnimationRunner()>
	//   12   22:return          
	}

	void animateDisappearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		addAnimatingView(viewholder);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #706 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		viewholder.setIsRecyclable(false);
	//    3    5:aload_1         
	//    4    6:iconst_0        
	//    5    7:invokevirtual   #704 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateDisappearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   6   10:aload_0         
	//*   7   11:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   8   14:aload_1         
	//*   9   15:aload_2         
	//*  10   16:aload_3         
	//*  11   17:invokevirtual   #1533 <Method boolean RecyclerView$ItemAnimator.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  12   20:ifeq            27
			postAnimationRunner();
	//   13   23:aload_0         
	//   14   24:invokevirtual   #719 <Method void postAnimationRunner()>
	//   15   27:return          
	}

	void assertInLayoutOrScroll(String s)
	{
		if(!isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*   2    4:ifne            83
		{
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       48
			{
				s = ((String) (new StringBuilder()));
	//    5   11:new             #812 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #813 <Method void StringBuilder()>
	//    8   18:astore_1        
				((StringBuilder) (s)).append("Cannot call this method unless RecyclerView is computing a layout or scrolling");
	//    9   19:aload_1         
	//   10   20:ldc2            #1539 <String "Cannot call this method unless RecyclerView is computing a layout or scrolling">
	//   11   23:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   12   26:pop             
				((StringBuilder) (s)).append(exceptionLabel());
	//   13   27:aload_1         
	//   14   28:aload_0         
	//   15   29:invokevirtual   #1242 <Method String exceptionLabel()>
	//   16   32:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   17   35:pop             
				throw new IllegalStateException(((StringBuilder) (s)).toString());
	//   18   36:new             #824 <Class IllegalStateException>
	//   19   39:dup             
	//   20   40:aload_1         
	//   21   41:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   22   44:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   23   47:athrow          
			} else
			{
				StringBuilder stringbuilder = new StringBuilder();
	//   24   48:new             #812 <Class StringBuilder>
	//   25   51:dup             
	//   26   52:invokespecial   #813 <Method void StringBuilder()>
	//   27   55:astore_2        
				stringbuilder.append(s);
	//   28   56:aload_2         
	//   29   57:aload_1         
	//   30   58:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   31   61:pop             
				stringbuilder.append(exceptionLabel());
	//   32   62:aload_2         
	//   33   63:aload_0         
	//   34   64:invokevirtual   #1242 <Method String exceptionLabel()>
	//   35   67:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   36   70:pop             
				throw new IllegalStateException(stringbuilder.toString());
	//   37   71:new             #824 <Class IllegalStateException>
	//   38   74:dup             
	//   39   75:aload_2         
	//   40   76:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   41   79:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   42   82:athrow          
			}
		} else
		{
			return;
	//   43   83:return          
		}
	}

	void assertNotInLayoutOrScroll(String s)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            57
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       48
			{
				s = ((String) (new StringBuilder()));
	//    5   11:new             #812 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #813 <Method void StringBuilder()>
	//    8   18:astore_1        
				((StringBuilder) (s)).append("Cannot call this method while RecyclerView is computing a layout or scrolling");
	//    9   19:aload_1         
	//   10   20:ldc2            #1541 <String "Cannot call this method while RecyclerView is computing a layout or scrolling">
	//   11   23:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   12   26:pop             
				((StringBuilder) (s)).append(exceptionLabel());
	//   13   27:aload_1         
	//   14   28:aload_0         
	//   15   29:invokevirtual   #1242 <Method String exceptionLabel()>
	//   16   32:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   17   35:pop             
				throw new IllegalStateException(((StringBuilder) (s)).toString());
	//   18   36:new             #824 <Class IllegalStateException>
	//   19   39:dup             
	//   20   40:aload_1         
	//   21   41:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   22   44:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   23   47:athrow          
			} else
			{
				throw new IllegalStateException(s);
	//   24   48:new             #824 <Class IllegalStateException>
	//   25   51:dup             
	//   26   52:aload_1         
	//   27   53:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   28   56:athrow          
			}
		if(mDispatchScrollCounter > 0)
	//*  29   57:aload_0         
	//*  30   58:getfield        #420 <Field int mDispatchScrollCounter>
	//*  31   61:ifle            109
		{
			s = ((String) (new StringBuilder()));
	//   32   64:new             #812 <Class StringBuilder>
	//   33   67:dup             
	//   34   68:invokespecial   #813 <Method void StringBuilder()>
	//   35   71:astore_1        
			((StringBuilder) (s)).append("");
	//   36   72:aload_1         
	//   37   73:ldc2            #1543 <String "">
	//   38   76:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   39   79:pop             
			((StringBuilder) (s)).append(exceptionLabel());
	//   40   80:aload_1         
	//   41   81:aload_0         
	//   42   82:invokevirtual   #1242 <Method String exceptionLabel()>
	//   43   85:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   44   88:pop             
			Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", ((Throwable) (new IllegalStateException(((StringBuilder) (s)).toString()))));
	//   45   89:ldc1            #178 <String "RecyclerView">
	//   46   91:ldc2            #1545 <String "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.">
	//   47   94:new             #824 <Class IllegalStateException>
	//   48   97:dup             
	//   49   98:aload_1         
	//   50   99:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   51  102:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   52  105:invokestatic    #1549 <Method int Log.w(String, String, Throwable)>
	//   53  108:pop             
		}
	//   54  109:return          
	}

	boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
	{
		return mItemAnimator == null || mItemAnimator.canReuseUpdatedViewHolder(viewholder, viewholder.getUnmodifiedPayloads());
	//    0    0:aload_0         
	//    1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          27
	//    3    7:aload_0         
	//    4    8:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:aload_1         
	//    6   12:aload_1         
	//    7   13:invokevirtual   #942 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//    8   16:invokevirtual   #1553 <Method boolean RecyclerView$ItemAnimator.canReuseUpdatedViewHolder(RecyclerView$ViewHolder, List)>
	//    9   19:ifeq            25
	//   10   22:goto            27
	//   11   25:iconst_0        
	//   12   26:ireturn         
	//   13   27:iconst_1        
	//   14   28:ireturn         
	}

	protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		return (layoutparams instanceof LayoutParams) && mLayout.checkLayoutParams((LayoutParams)layoutparams);
	//    0    0:aload_1         
	//    1    1:instanceof      #74  <Class RecyclerView$LayoutParams>
	//    2    4:ifeq            23
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:aload_1         
	//    6   12:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    7   15:invokevirtual   #1558 <Method boolean RecyclerView$LayoutManager.checkLayoutParams(RecyclerView$LayoutParams)>
	//    8   18:ifeq            23
	//    9   21:iconst_1        
	//   10   22:ireturn         
	//   11   23:iconst_0        
	//   12   24:ireturn         
	}

	void clearOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.clearOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #1567 <Method void RecyclerView$ViewHolder.clearOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
		mRecycler.clearOldPositions();
	//   25   45:aload_0         
	//   26   46:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   27   49:invokevirtual   #1568 <Method void RecyclerView$Recycler.clearOldPositions()>
	//   28   52:return          
	}

	public void clearOnChildAttachStateChangeListeners()
	{
		if(mOnChildAttachStateListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnull          16
			mOnChildAttachStateListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//    5   11:invokeinterface #1570 <Method void List.clear()>
	//    6   16:return          
	}

	public void clearOnScrollListeners()
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1525 <Field List mScrollListeners>
	//*   2    4:ifnull          16
			mScrollListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1525 <Field List mScrollListeners>
	//    5   11:invokeinterface #1570 <Method void List.clear()>
	//    6   16:return          
	}

	public int computeHorizontalScrollExtent()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  12   20:ifeq            35
			i = mLayout.computeHorizontalScrollExtent(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1578 <Method int RecyclerView$LayoutManager.computeHorizontalScrollExtent(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	public int computeHorizontalScrollOffset()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  12   20:ifeq            35
			i = mLayout.computeHorizontalScrollOffset(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1581 <Method int RecyclerView$LayoutManager.computeHorizontalScrollOffset(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	public int computeHorizontalScrollRange()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollHorizontally())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  12   20:ifeq            35
			i = mLayout.computeHorizontalScrollRange(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1584 <Method int RecyclerView$LayoutManager.computeHorizontalScrollRange(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	public int computeVerticalScrollExtent()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollVertically())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  12   20:ifeq            35
			i = mLayout.computeVerticalScrollExtent(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1590 <Method int RecyclerView$LayoutManager.computeVerticalScrollExtent(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	public int computeVerticalScrollOffset()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollVertically())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  12   20:ifeq            35
			i = mLayout.computeVerticalScrollOffset(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1593 <Method int RecyclerView$LayoutManager.computeVerticalScrollOffset(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	public int computeVerticalScrollRange()
	{
		LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore_2        
		int i = 0;
	//    3    5:iconst_0        
	//    4    6:istore_1        
		if(layoutmanager == null)
	//*   5    7:aload_2         
	//*   6    8:ifnonnull       13
			return 0;
	//    7   11:iconst_0        
	//    8   12:ireturn         
		if(mLayout.canScrollVertically())
	//*   9   13:aload_0         
	//*  10   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  11   17:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  12   20:ifeq            35
			i = mLayout.computeVerticalScrollRange(mState);
	//   13   23:aload_0         
	//   14   24:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   15   27:aload_0         
	//   16   28:getfield        #450 <Field RecyclerView$State mState>
	//   17   31:invokevirtual   #1596 <Method int RecyclerView$LayoutManager.computeVerticalScrollRange(RecyclerView$State)>
	//   18   34:istore_1        
		return i;
	//   19   35:iload_1         
	//   20   36:ireturn         
	}

	void considerReleasingGlowsOnScroll(int i, int j)
	{
		boolean flag1;
		if(mLeftGlow != null && !mLeftGlow.isFinished() && i > 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          40
	//*   3    7:aload_0         
	//*   4    8:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*   5   11:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*   6   14:ifne            40
	//*   7   17:iload_1         
	//*   8   18:ifle            40
		{
			mLeftGlow.onRelease();
	//    9   21:aload_0         
	//   10   22:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//   11   25:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//   12   28:aload_0         
	//   13   29:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//   14   32:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   15   35:istore          4
		} else
	//*  16   37:goto            43
		{
			flag1 = false;
	//   17   40:iconst_0        
	//   18   41:istore          4
		}
		boolean flag = flag1;
	//   19   43:iload           4
	//   20   45:istore_3        
		if(mRightGlow != null)
	//*  21   46:aload_0         
	//*  22   47:getfield        #1350 <Field EdgeEffect mRightGlow>
	//*  23   50:ifnull          91
		{
			flag = flag1;
	//   24   53:iload           4
	//   25   55:istore_3        
			if(!mRightGlow.isFinished())
	//*  26   56:aload_0         
	//*  27   57:getfield        #1350 <Field EdgeEffect mRightGlow>
	//*  28   60:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*  29   63:ifne            91
			{
				flag = flag1;
	//   30   66:iload           4
	//   31   68:istore_3        
				if(i < 0)
	//*  32   69:iload_1         
	//*  33   70:ifge            91
				{
					mRightGlow.onRelease();
	//   34   73:aload_0         
	//   35   74:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   36   77:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mRightGlow.isFinished();
	//   37   80:iload           4
	//   38   82:aload_0         
	//   39   83:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   40   86:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   41   89:ior             
	//   42   90:istore_3        
				}
			}
		}
		flag1 = flag;
	//   43   91:iload_3         
	//   44   92:istore          4
		if(mTopGlow != null)
	//*  45   94:aload_0         
	//*  46   95:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*  47   98:ifnull          139
		{
			flag1 = flag;
	//   48  101:iload_3         
	//   49  102:istore          4
			if(!mTopGlow.isFinished())
	//*  50  104:aload_0         
	//*  51  105:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*  52  108:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*  53  111:ifne            139
			{
				flag1 = flag;
	//   54  114:iload_3         
	//   55  115:istore          4
				if(j > 0)
	//*  56  117:iload_2         
	//*  57  118:ifle            139
				{
					mTopGlow.onRelease();
	//   58  121:aload_0         
	//   59  122:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   60  125:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mTopGlow.isFinished();
	//   61  128:iload_3         
	//   62  129:aload_0         
	//   63  130:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   64  133:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   65  136:ior             
	//   66  137:istore          4
				}
			}
		}
		flag = flag1;
	//   67  139:iload           4
	//   68  141:istore_3        
		if(mBottomGlow != null)
	//*  69  142:aload_0         
	//*  70  143:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//*  71  146:ifnull          187
		{
			flag = flag1;
	//   72  149:iload           4
	//   73  151:istore_3        
			if(!mBottomGlow.isFinished())
	//*  74  152:aload_0         
	//*  75  153:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//*  76  156:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*  77  159:ifne            187
			{
				flag = flag1;
	//   78  162:iload           4
	//   79  164:istore_3        
				if(j < 0)
	//*  80  165:iload_2         
	//*  81  166:ifge            187
				{
					mBottomGlow.onRelease();
	//   82  169:aload_0         
	//   83  170:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   84  173:invokevirtual   #1402 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mBottomGlow.isFinished();
	//   85  176:iload           4
	//   86  178:aload_0         
	//   87  179:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   88  182:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//   89  185:ior             
	//   90  186:istore_3        
				}
			}
		}
		if(flag)
	//*  91  187:iload_3         
	//*  92  188:ifeq            195
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   93  191:aload_0         
	//   94  192:invokestatic    #1363 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   95  195:return          
	}

	void consumePendingUpdateOperations()
	{
		if(mFirstLayoutComplete && !mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//*   2    4:ifeq            135
	//*   3    7:aload_0         
	//*   4    8:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//*   5   11:ifeq            17
	//*   6   14:goto            135
		{
			if(!mAdapterHelper.hasPendingUpdates())
	//*   7   17:aload_0         
	//*   8   18:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//*   9   21:invokevirtual   #1601 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  10   24:ifne            28
				return;
	//   11   27:return          
			if(mAdapterHelper.hasAnyUpdateTypes(4) && !mAdapterHelper.hasAnyUpdateTypes(11))
	//*  12   28:aload_0         
	//*  13   29:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//*  14   32:iconst_4        
	//*  15   33:invokevirtual   #1604 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  16   36:ifeq            112
	//*  17   39:aload_0         
	//*  18   40:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//*  19   43:bipush          11
	//*  20   45:invokevirtual   #1604 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  21   48:ifne            112
			{
				TraceCompat.beginSection("RV PartialInvalidate");
	//   22   51:ldc1            #189 <String "RV PartialInvalidate">
	//   23   53:invokestatic    #1609 <Method void TraceCompat.beginSection(String)>
				startInterceptRequestLayout();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #883 <Method void startInterceptRequestLayout()>
				onEnterLayoutOrScroll();
	//   26   60:aload_0         
	//   27   61:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
				mAdapterHelper.preProcess();
	//   28   64:aload_0         
	//   29   65:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   30   68:invokevirtual   #1328 <Method void AdapterHelper.preProcess()>
				if(!mLayoutWasDefered)
	//*  31   71:aload_0         
	//*  32   72:getfield        #1611 <Field boolean mLayoutWasDefered>
	//*  33   75:ifne            99
					if(hasUpdatedView())
	//*  34   78:aload_0         
	//*  35   79:invokespecial   #1613 <Method boolean hasUpdatedView()>
	//*  36   82:ifeq            92
						dispatchLayout();
	//   37   85:aload_0         
	//   38   86:invokevirtual   #1616 <Method void dispatchLayout()>
					else
	//*  39   89:goto            99
						mAdapterHelper.consumePostponedUpdates();
	//   40   92:aload_0         
	//   41   93:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   42   96:invokevirtual   #1619 <Method void AdapterHelper.consumePostponedUpdates()>
				stopInterceptRequestLayout(true);
	//   43   99:aload_0         
	//   44  100:iconst_1        
	//   45  101:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
				onExitLayoutOrScroll();
	//   46  104:aload_0         
	//   47  105:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
				TraceCompat.endSection();
	//   48  108:invokestatic    #1622 <Method void TraceCompat.endSection()>
				return;
	//   49  111:return          
			}
			if(mAdapterHelper.hasPendingUpdates())
	//*  50  112:aload_0         
	//*  51  113:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//*  52  116:invokevirtual   #1601 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  53  119:ifeq            134
			{
				TraceCompat.beginSection("RV FullInvalidate");
	//   54  122:ldc1            #195 <String "RV FullInvalidate">
	//   55  124:invokestatic    #1609 <Method void TraceCompat.beginSection(String)>
				dispatchLayout();
	//   56  127:aload_0         
	//   57  128:invokevirtual   #1616 <Method void dispatchLayout()>
				TraceCompat.endSection();
	//   58  131:invokestatic    #1622 <Method void TraceCompat.endSection()>
			}
			return;
	//   59  134:return          
		} else
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//   60  135:ldc1            #195 <String "RV FullInvalidate">
	//   61  137:invokestatic    #1609 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//   62  140:aload_0         
	//   63  141:invokevirtual   #1616 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   64  144:invokestatic    #1622 <Method void TraceCompat.endSection()>
			return;
	//   65  147:return          
		}
	}

	void defaultOnMeasure(int i, int j)
	{
		setMeasuredDimension(LayoutManager.chooseSize(i, getPaddingLeft() + getPaddingRight(), ViewCompat.getMinimumWidth(((View) (this)))), LayoutManager.chooseSize(j, getPaddingTop() + getPaddingBottom(), ViewCompat.getMinimumHeight(((View) (this)))));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:invokevirtual   #1626 <Method int getPaddingLeft()>
	//    4    6:aload_0         
	//    5    7:invokevirtual   #1629 <Method int getPaddingRight()>
	//    6   10:iadd            
	//    7   11:aload_0         
	//    8   12:invokestatic    #1632 <Method int ViewCompat.getMinimumWidth(View)>
	//    9   15:invokestatic    #1636 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   10   18:iload_2         
	//   11   19:aload_0         
	//   12   20:invokevirtual   #1639 <Method int getPaddingTop()>
	//   13   23:aload_0         
	//   14   24:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   15   27:iadd            
	//   16   28:aload_0         
	//   17   29:invokestatic    #1645 <Method int ViewCompat.getMinimumHeight(View)>
	//   18   32:invokestatic    #1636 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   19   35:invokevirtual   #649 <Method void setMeasuredDimension(int, int)>
	//   20   38:return          
	}

	void dispatchChildAttached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildAttachedToWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1649 <Method void onChildAttachedToWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewAttachedToWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1652 <Method void RecyclerView$Adapter.onViewAttachedToWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1653 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewAttachedToWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1654 <Method Object List.get(int)>
	//   30   62:checkcast       #77  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1657 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewAttachedToWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchChildDetached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildDetachedFromWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1661 <Method void onChildDetachedFromWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewDetachedFromWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1664 <Method void RecyclerView$Adapter.onViewDetachedFromWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1653 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewDetachedFromWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1654 <Method Object List.get(int)>
	//   30   62:checkcast       #77  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1667 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewDetachedFromWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchLayout()
	{
		if(mAdapter == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "No adapter attached; skipping layout");
	//    3    7:ldc1            #178 <String "RecyclerView">
	//    4    9:ldc2            #1669 <String "No adapter attached; skipping layout">
	//    5   12:invokestatic    #1257 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayout == null)
	//*   8   17:aload_0         
	//*   9   18:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  10   21:ifnonnull       34
		{
			Log.e("RecyclerView", "No layout manager attached; skipping layout");
	//   11   24:ldc1            #178 <String "RecyclerView">
	//   12   26:ldc2            #1671 <String "No layout manager attached; skipping layout">
	//   13   29:invokestatic    #1257 <Method int Log.e(String, String)>
	//   14   32:pop             
			return;
	//   15   33:return          
		}
		mState.mIsMeasuring = false;
	//   16   34:aload_0         
	//   17   35:getfield        #450 <Field RecyclerView$State mState>
	//   18   38:iconst_0        
	//   19   39:putfield        #880 <Field boolean RecyclerView$State.mIsMeasuring>
		if(mState.mLayoutStep == 1)
	//*  20   42:aload_0         
	//*  21   43:getfield        #450 <Field RecyclerView$State mState>
	//*  22   46:getfield        #1002 <Field int RecyclerView$State.mLayoutStep>
	//*  23   49:iconst_1        
	//*  24   50:icmpne          72
		{
			dispatchLayoutStep1();
	//   25   53:aload_0         
	//   26   54:invokespecial   #1673 <Method void dispatchLayoutStep1()>
			mLayout.setExactMeasureSpecsFrom(this);
	//   27   57:aload_0         
	//   28   58:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1676 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   31   65:aload_0         
	//   32   66:invokespecial   #1678 <Method void dispatchLayoutStep2()>
		} else
	//*  33   69:goto            136
		if(!mAdapterHelper.hasUpdates() && mLayout.getWidth() == getWidth() && mLayout.getHeight() == getHeight())
	//*  34   72:aload_0         
	//*  35   73:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//*  36   76:invokevirtual   #1681 <Method boolean AdapterHelper.hasUpdates()>
	//*  37   79:ifne            124
	//*  38   82:aload_0         
	//*  39   83:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  40   86:invokevirtual   #1682 <Method int RecyclerView$LayoutManager.getWidth()>
	//*  41   89:aload_0         
	//*  42   90:invokevirtual   #1338 <Method int getWidth()>
	//*  43   93:icmpne          124
	//*  44   96:aload_0         
	//*  45   97:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  46  100:invokevirtual   #1683 <Method int RecyclerView$LayoutManager.getHeight()>
	//*  47  103:aload_0         
	//*  48  104:invokevirtual   #1339 <Method int getHeight()>
	//*  49  107:icmpeq          113
	//*  50  110:goto            124
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   51  113:aload_0         
	//   52  114:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   53  117:aload_0         
	//   54  118:invokevirtual   #1676 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
		} else
	//*  55  121:goto            136
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   56  124:aload_0         
	//   57  125:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   58  128:aload_0         
	//   59  129:invokevirtual   #1676 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   60  132:aload_0         
	//   61  133:invokespecial   #1678 <Method void dispatchLayoutStep2()>
		}
		dispatchLayoutStep3();
	//   62  136:aload_0         
	//   63  137:invokespecial   #1685 <Method void dispatchLayoutStep3()>
	//   64  140:return          
	}

	public boolean dispatchNestedFling(float f, float f1, boolean flag)
	{
		return getScrollingChildHelper().dispatchNestedFling(f, f1, flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:iload_3         
	//    5    7:invokevirtual   #1691 <Method boolean NestedScrollingChildHelper.dispatchNestedFling(float, float, boolean)>
	//    6   10:ireturn         
	}

	public boolean dispatchNestedPreFling(float f, float f1)
	{
		return getScrollingChildHelper().dispatchNestedPreFling(f, f1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:invokevirtual   #1695 <Method boolean NestedScrollingChildHelper.dispatchNestedPreFling(float, float)>
	//    5    9:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[])
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:invokevirtual   #1699 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[])>
	//    7   12:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[], int k)
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1, k);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:iload           5
	//    7   11:invokevirtual   #1702 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[], int)>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[])
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:invokevirtual   #1706 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[])>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[], int i1)
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai, i1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:iload           6
	//    8   13:invokevirtual   #1709 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[], int)>
	//    9   16:ireturn         
	}

	void dispatchOnScrollStateChanged(int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			mLayout.onScrollStateChanged(i);
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:iload_1         
	//    6   12:invokevirtual   #1713 <Method void RecyclerView$LayoutManager.onScrollStateChanged(int)>
		onScrollStateChanged(i);
	//    7   15:aload_0         
	//    8   16:iload_1         
	//    9   17:invokevirtual   #1714 <Method void onScrollStateChanged(int)>
		if(mScrollListener != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #1716 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  12   24:ifnull          36
			mScrollListener.onScrollStateChanged(this, i);
	//   13   27:aload_0         
	//   14   28:getfield        #1716 <Field RecyclerView$OnScrollListener mScrollListener>
	//   15   31:aload_0         
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1718 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>
		if(mScrollListeners != null)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1525 <Field List mScrollListeners>
	//*  20   40:ifnull          84
		{
			for(int j = mScrollListeners.size() - 1; j >= 0; j--)
	//*  21   43:aload_0         
	//*  22   44:getfield        #1525 <Field List mScrollListeners>
	//*  23   47:invokeinterface #1653 <Method int List.size()>
	//*  24   52:iconst_1        
	//*  25   53:isub            
	//*  26   54:istore_2        
	//*  27   55:iload_2         
	//*  28   56:iflt            84
				((OnScrollListener)mScrollListeners.get(j)).onScrollStateChanged(this, i);
	//   29   59:aload_0         
	//   30   60:getfield        #1525 <Field List mScrollListeners>
	//   31   63:iload_2         
	//   32   64:invokeinterface #1654 <Method Object List.get(int)>
	//   33   69:checkcast       #86  <Class RecyclerView$OnScrollListener>
	//   34   72:aload_0         
	//   35   73:iload_1         
	//   36   74:invokevirtual   #1718 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>

	//   37   77:iload_2         
	//   38   78:iconst_1        
	//   39   79:isub            
	//   40   80:istore_2        
		}
	//*  41   81:goto            55
	//   42   84:return          
	}

	void dispatchOnScrolled(int i, int j)
	{
		mDispatchScrollCounter = mDispatchScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #420 <Field int mDispatchScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #420 <Field int mDispatchScrollCounter>
		int k = getScrollX();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #1721 <Method int getScrollX()>
	//    8   14:istore_3        
		int i1 = getScrollY();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #1724 <Method int getScrollY()>
	//   11   19:istore          4
		onScrollChanged(k, i1, k, i1);
	//   12   21:aload_0         
	//   13   22:iload_3         
	//   14   23:iload           4
	//   15   25:iload_3         
	//   16   26:iload           4
	//   17   28:invokevirtual   #1727 <Method void onScrollChanged(int, int, int, int)>
		onScrolled(i, j);
	//   18   31:aload_0         
	//   19   32:iload_1         
	//   20   33:iload_2         
	//   21   34:invokevirtual   #1730 <Method void onScrolled(int, int)>
		if(mScrollListener != null)
	//*  22   37:aload_0         
	//*  23   38:getfield        #1716 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  24   41:ifnull          54
			mScrollListener.onScrolled(this, i, j);
	//   25   44:aload_0         
	//   26   45:getfield        #1716 <Field RecyclerView$OnScrollListener mScrollListener>
	//   27   48:aload_0         
	//   28   49:iload_1         
	//   29   50:iload_2         
	//   30   51:invokevirtual   #1732 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>
		if(mScrollListeners != null)
	//*  31   54:aload_0         
	//*  32   55:getfield        #1525 <Field List mScrollListeners>
	//*  33   58:ifnull          103
		{
			for(int l = mScrollListeners.size() - 1; l >= 0; l--)
	//*  34   61:aload_0         
	//*  35   62:getfield        #1525 <Field List mScrollListeners>
	//*  36   65:invokeinterface #1653 <Method int List.size()>
	//*  37   70:iconst_1        
	//*  38   71:isub            
	//*  39   72:istore_3        
	//*  40   73:iload_3         
	//*  41   74:iflt            103
				((OnScrollListener)mScrollListeners.get(l)).onScrolled(this, i, j);
	//   42   77:aload_0         
	//   43   78:getfield        #1525 <Field List mScrollListeners>
	//   44   81:iload_3         
	//   45   82:invokeinterface #1654 <Method Object List.get(int)>
	//   46   87:checkcast       #86  <Class RecyclerView$OnScrollListener>
	//   47   90:aload_0         
	//   48   91:iload_1         
	//   49   92:iload_2         
	//   50   93:invokevirtual   #1732 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>

	//   51   96:iload_3         
	//   52   97:iconst_1        
	//   53   98:isub            
	//   54   99:istore_3        
		}
	//*  55  100:goto            73
		mDispatchScrollCounter = mDispatchScrollCounter - 1;
	//   56  103:aload_0         
	//   57  104:aload_0         
	//   58  105:getfield        #420 <Field int mDispatchScrollCounter>
	//   59  108:iconst_1        
	//   60  109:isub            
	//   61  110:putfield        #420 <Field int mDispatchScrollCounter>
	//   62  113:return          
	}

	void dispatchPendingImportantForAccessibilityChanges()
	{
		for(int i = mPendingAccessibilityImportanceChange.size() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//*   2    4:invokeinterface #1653 <Method int List.size()>
	//*   3    9:iconst_1        
	//*   4   10:isub            
	//*   5   11:istore_1        
	//*   6   12:iload_1         
	//*   7   13:iflt            81
		{
			ViewHolder viewholder = (ViewHolder)mPendingAccessibilityImportanceChange.get(i);
	//    8   16:aload_0         
	//    9   17:getfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//   10   20:iload_1         
	//   11   21:invokeinterface #1654 <Method Object List.get(int)>
	//   12   26:checkcast       #136 <Class RecyclerView$ViewHolder>
	//   13   29:astore_3        
			if(viewholder.itemView.getParent() != this || viewholder.shouldIgnore())
	//*  14   30:aload_3         
	//*  15   31:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  16   34:invokevirtual   #670 <Method ViewParent View.getParent()>
	//*  17   37:aload_0         
	//*  18   38:if_acmpne       74
	//*  19   41:aload_3         
	//*  20   42:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   45:ifeq            51
				continue;
	//   22   48:goto            74
			int j = viewholder.mPendingAccessibilityState;
	//   23   51:aload_3         
	//   24   52:getfield        #1736 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
	//   25   55:istore_2        
			if(j != -1)
	//*  26   56:iload_2         
	//*  27   57:iconst_m1       
	//*  28   58:icmpeq          74
			{
				ViewCompat.setImportantForAccessibility(viewholder.itemView, j);
	//   29   61:aload_3         
	//   30   62:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   31   65:iload_2         
	//   32   66:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
				viewholder.mPendingAccessibilityState = -1;
	//   33   69:aload_3         
	//   34   70:iconst_m1       
	//   35   71:putfield        #1736 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			}
		}

	//   36   74:iload_1         
	//   37   75:iconst_1        
	//   38   76:isub            
	//   39   77:istore_1        
	//*  40   78:goto            12
		mPendingAccessibilityImportanceChange.clear();
	//   41   81:aload_0         
	//   42   82:getfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//   43   85:invokeinterface #1570 <Method void List.clear()>
	//   44   90:return          
	}

	protected void dispatchRestoreInstanceState(SparseArray sparsearray)
	{
		dispatchThawSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1741 <Method void dispatchThawSelfOnly(SparseArray)>
	//    3    5:return          
	}

	protected void dispatchSaveInstanceState(SparseArray sparsearray)
	{
		dispatchFreezeSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1746 <Method void dispatchFreezeSelfOnly(SparseArray)>
	//    3    5:return          
	}

	public void draw(Canvas canvas)
	{
		super.draw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #1750 <Method void ViewGroup.draw(Canvas)>
		int l = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #408 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1100 <Method int ArrayList.size()>
	//    6   12:istore_3        
		boolean flag = false;
	//    7   13:iconst_0        
	//    8   14:istore          4
		for(int i = 0; i < l; i++)
	//*   9   16:iconst_0        
	//*  10   17:istore_2        
	//*  11   18:iload_2         
	//*  12   19:iload_3         
	//*  13   20:icmpge          50
			((ItemDecoration)mItemDecorations.get(i)).onDrawOver(canvas, this, mState);
	//   14   23:aload_0         
	//   15   24:getfield        #408 <Field ArrayList mItemDecorations>
	//   16   27:iload_2         
	//   17   28:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   18   31:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   19   34:aload_1         
	//   20   35:aload_0         
	//   21   36:aload_0         
	//   22   37:getfield        #450 <Field RecyclerView$State mState>
	//   23   40:invokevirtual   #1754 <Method void RecyclerView$ItemDecoration.onDrawOver(Canvas, RecyclerView, RecyclerView$State)>

	//   24   43:iload_2         
	//   25   44:iconst_1        
	//   26   45:iadd            
	//   27   46:istore_2        
	//*  28   47:goto            18
		if(mLeftGlow != null && !mLeftGlow.isFinished())
	//*  29   50:aload_0         
	//*  30   51:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*  31   54:ifnull          144
	//*  32   57:aload_0         
	//*  33   58:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*  34   61:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*  35   64:ifne            144
		{
			int i1 = canvas.save();
	//   36   67:aload_1         
	//   37   68:invokevirtual   #1759 <Method int Canvas.save()>
	//   38   71:istore          5
			int j;
			if(mClipToPadding)
	//*  39   73:aload_0         
	//*  40   74:getfield        #487 <Field boolean mClipToPadding>
	//*  41   77:ifeq            88
				j = getPaddingBottom();
	//   42   80:aload_0         
	//   43   81:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   44   84:istore_2        
			else
	//*  45   85:goto            90
				j = 0;
	//   46   88:iconst_0        
	//   47   89:istore_2        
			canvas.rotate(270F);
	//   48   90:aload_1         
	//   49   91:ldc2            #1760 <Float 270F>
	//   50   94:invokevirtual   #1764 <Method void Canvas.rotate(float)>
			canvas.translate(-getHeight() + j, 0.0F);
	//   51   97:aload_1         
	//   52   98:aload_0         
	//   53   99:invokevirtual   #1339 <Method int getHeight()>
	//   54  102:ineg            
	//   55  103:iload_2         
	//   56  104:iadd            
	//   57  105:i2f             
	//   58  106:fconst_0        
	//   59  107:invokevirtual   #1768 <Method void Canvas.translate(float, float)>
			if(mLeftGlow != null && mLeftGlow.draw(canvas))
	//*  60  110:aload_0         
	//*  61  111:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*  62  114:ifnull          133
	//*  63  117:aload_0         
	//*  64  118:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*  65  121:aload_1         
	//*  66  122:invokevirtual   #1771 <Method boolean EdgeEffect.draw(Canvas)>
	//*  67  125:ifeq            133
				l = 1;
	//   68  128:iconst_1        
	//   69  129:istore_3        
			else
	//*  70  130:goto            135
				l = 0;
	//   71  133:iconst_0        
	//   72  134:istore_3        
			canvas.restoreToCount(i1);
	//   73  135:aload_1         
	//   74  136:iload           5
	//   75  138:invokevirtual   #1774 <Method void Canvas.restoreToCount(int)>
		} else
	//*  76  141:goto            146
		{
			l = 0;
	//   77  144:iconst_0        
	//   78  145:istore_3        
		}
		int k = l;
	//   79  146:iload_3         
	//   80  147:istore_2        
		if(mTopGlow != null)
	//*  81  148:aload_0         
	//*  82  149:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*  83  152:ifnull          229
		{
			k = l;
	//   84  155:iload_3         
	//   85  156:istore_2        
			if(!mTopGlow.isFinished())
	//*  86  157:aload_0         
	//*  87  158:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*  88  161:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//*  89  164:ifne            229
			{
				int j1 = canvas.save();
	//   90  167:aload_1         
	//   91  168:invokevirtual   #1759 <Method int Canvas.save()>
	//   92  171:istore          5
				if(mClipToPadding)
	//*  93  173:aload_0         
	//*  94  174:getfield        #487 <Field boolean mClipToPadding>
	//*  95  177:ifeq            194
					canvas.translate(getPaddingLeft(), getPaddingTop());
	//   96  180:aload_1         
	//   97  181:aload_0         
	//   98  182:invokevirtual   #1626 <Method int getPaddingLeft()>
	//   99  185:i2f             
	//  100  186:aload_0         
	//  101  187:invokevirtual   #1639 <Method int getPaddingTop()>
	//  102  190:i2f             
	//  103  191:invokevirtual   #1768 <Method void Canvas.translate(float, float)>
				if(mTopGlow != null && mTopGlow.draw(canvas))
	//* 104  194:aload_0         
	//* 105  195:getfield        #1355 <Field EdgeEffect mTopGlow>
	//* 106  198:ifnull          217
	//* 107  201:aload_0         
	//* 108  202:getfield        #1355 <Field EdgeEffect mTopGlow>
	//* 109  205:aload_1         
	//* 110  206:invokevirtual   #1771 <Method boolean EdgeEffect.draw(Canvas)>
	//* 111  209:ifeq            217
					k = 1;
	//  112  212:iconst_1        
	//  113  213:istore_2        
				else
	//* 114  214:goto            219
					k = 0;
	//  115  217:iconst_0        
	//  116  218:istore_2        
				k = ((int) (l | k));
	//  117  219:iload_3         
	//  118  220:iload_2         
	//  119  221:ior             
	//  120  222:istore_2        
				canvas.restoreToCount(j1);
	//  121  223:aload_1         
	//  122  224:iload           5
	//  123  226:invokevirtual   #1774 <Method void Canvas.restoreToCount(int)>
			}
		}
		l = k;
	//  124  229:iload_2         
	//  125  230:istore_3        
		if(mRightGlow != null)
	//* 126  231:aload_0         
	//* 127  232:getfield        #1350 <Field EdgeEffect mRightGlow>
	//* 128  235:ifnull          332
		{
			l = k;
	//  129  238:iload_2         
	//  130  239:istore_3        
			if(!mRightGlow.isFinished())
	//* 131  240:aload_0         
	//* 132  241:getfield        #1350 <Field EdgeEffect mRightGlow>
	//* 133  244:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//* 134  247:ifne            332
			{
				int k1 = canvas.save();
	//  135  250:aload_1         
	//  136  251:invokevirtual   #1759 <Method int Canvas.save()>
	//  137  254:istore          5
				int i2 = getWidth();
	//  138  256:aload_0         
	//  139  257:invokevirtual   #1338 <Method int getWidth()>
	//  140  260:istore          6
				if(mClipToPadding)
	//* 141  262:aload_0         
	//* 142  263:getfield        #487 <Field boolean mClipToPadding>
	//* 143  266:ifeq            277
					l = getPaddingTop();
	//  144  269:aload_0         
	//  145  270:invokevirtual   #1639 <Method int getPaddingTop()>
	//  146  273:istore_3        
				else
	//* 147  274:goto            279
					l = 0;
	//  148  277:iconst_0        
	//  149  278:istore_3        
				canvas.rotate(90F);
	//  150  279:aload_1         
	//  151  280:ldc2            #1775 <Float 90F>
	//  152  283:invokevirtual   #1764 <Method void Canvas.rotate(float)>
				canvas.translate(-l, -i2);
	//  153  286:aload_1         
	//  154  287:iload_3         
	//  155  288:ineg            
	//  156  289:i2f             
	//  157  290:iload           6
	//  158  292:ineg            
	//  159  293:i2f             
	//  160  294:invokevirtual   #1768 <Method void Canvas.translate(float, float)>
				if(mRightGlow != null && mRightGlow.draw(canvas))
	//* 161  297:aload_0         
	//* 162  298:getfield        #1350 <Field EdgeEffect mRightGlow>
	//* 163  301:ifnull          320
	//* 164  304:aload_0         
	//* 165  305:getfield        #1350 <Field EdgeEffect mRightGlow>
	//* 166  308:aload_1         
	//* 167  309:invokevirtual   #1771 <Method boolean EdgeEffect.draw(Canvas)>
	//* 168  312:ifeq            320
					l = 1;
	//  169  315:iconst_1        
	//  170  316:istore_3        
				else
	//* 171  317:goto            322
					l = 0;
	//  172  320:iconst_0        
	//  173  321:istore_3        
				l = k | l;
	//  174  322:iload_2         
	//  175  323:iload_3         
	//  176  324:ior             
	//  177  325:istore_3        
				canvas.restoreToCount(k1);
	//  178  326:aload_1         
	//  179  327:iload           5
	//  180  329:invokevirtual   #1774 <Method void Canvas.restoreToCount(int)>
			}
		}
		if(mBottomGlow != null && !mBottomGlow.isFinished())
	//* 181  332:aload_0         
	//* 182  333:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//* 183  336:ifnull          453
	//* 184  339:aload_0         
	//* 185  340:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//* 186  343:invokevirtual   #1405 <Method boolean EdgeEffect.isFinished()>
	//* 187  346:ifne            453
		{
			int l1 = canvas.save();
	//  188  349:aload_1         
	//  189  350:invokevirtual   #1759 <Method int Canvas.save()>
	//  190  353:istore          5
			canvas.rotate(180F);
	//  191  355:aload_1         
	//  192  356:ldc2            #1776 <Float 180F>
	//  193  359:invokevirtual   #1764 <Method void Canvas.rotate(float)>
			if(mClipToPadding)
	//* 194  362:aload_0         
	//* 195  363:getfield        #487 <Field boolean mClipToPadding>
	//* 196  366:ifeq            398
				canvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
	//  197  369:aload_1         
	//  198  370:aload_0         
	//  199  371:invokevirtual   #1338 <Method int getWidth()>
	//  200  374:ineg            
	//  201  375:aload_0         
	//  202  376:invokevirtual   #1629 <Method int getPaddingRight()>
	//  203  379:iadd            
	//  204  380:i2f             
	//  205  381:aload_0         
	//  206  382:invokevirtual   #1339 <Method int getHeight()>
	//  207  385:ineg            
	//  208  386:aload_0         
	//  209  387:invokevirtual   #1642 <Method int getPaddingBottom()>
	//  210  390:iadd            
	//  211  391:i2f             
	//  212  392:invokevirtual   #1768 <Method void Canvas.translate(float, float)>
			else
	//* 213  395:goto            414
				canvas.translate(-getWidth(), -getHeight());
	//  214  398:aload_1         
	//  215  399:aload_0         
	//  216  400:invokevirtual   #1338 <Method int getWidth()>
	//  217  403:ineg            
	//  218  404:i2f             
	//  219  405:aload_0         
	//  220  406:invokevirtual   #1339 <Method int getHeight()>
	//  221  409:ineg            
	//  222  410:i2f             
	//  223  411:invokevirtual   #1768 <Method void Canvas.translate(float, float)>
			k = ((int) (flag));
	//  224  414:iload           4
	//  225  416:istore_2        
			if(mBottomGlow != null)
	//* 226  417:aload_0         
	//* 227  418:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//* 228  421:ifnull          440
			{
				k = ((int) (flag));
	//  229  424:iload           4
	//  230  426:istore_2        
				if(mBottomGlow.draw(canvas))
	//* 231  427:aload_0         
	//* 232  428:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//* 233  431:aload_1         
	//* 234  432:invokevirtual   #1771 <Method boolean EdgeEffect.draw(Canvas)>
	//* 235  435:ifeq            440
					k = 1;
	//  236  438:iconst_1        
	//  237  439:istore_2        
			}
			k |= l;
	//  238  440:iload_2         
	//  239  441:iload_3         
	//  240  442:ior             
	//  241  443:istore_2        
			canvas.restoreToCount(l1);
	//  242  444:aload_1         
	//  243  445:iload           5
	//  244  447:invokevirtual   #1774 <Method void Canvas.restoreToCount(int)>
		} else
	//* 245  450:goto            455
		{
			k = l;
	//  246  453:iload_3         
	//  247  454:istore_2        
		}
		l = k;
	//  248  455:iload_2         
	//  249  456:istore_3        
		if(k == 0)
	//* 250  457:iload_2         
	//* 251  458:ifne            496
		{
			l = k;
	//  252  461:iload_2         
	//  253  462:istore_3        
			if(mItemAnimator != null)
	//* 254  463:aload_0         
	//* 255  464:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 256  467:ifnull          496
			{
				l = k;
	//  257  470:iload_2         
	//  258  471:istore_3        
				if(mItemDecorations.size() > 0)
	//* 259  472:aload_0         
	//* 260  473:getfield        #408 <Field ArrayList mItemDecorations>
	//* 261  476:invokevirtual   #1100 <Method int ArrayList.size()>
	//* 262  479:ifle            496
				{
					l = k;
	//  263  482:iload_2         
	//  264  483:istore_3        
					if(mItemAnimator.isRunning())
	//* 265  484:aload_0         
	//* 266  485:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 267  488:invokevirtual   #1779 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//* 268  491:ifeq            496
						l = 1;
	//  269  494:iconst_1        
	//  270  495:istore_3        
				}
			}
		}
		if(l != 0)
	//* 271  496:iload_3         
	//* 272  497:ifeq            504
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//  273  500:aload_0         
	//  274  501:invokestatic    #1363 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  275  504:return          
	}

	public boolean drawChild(Canvas canvas, View view, long l)
	{
		return super.drawChild(canvas, view, l);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:lload_3         
	//    4    4:invokespecial   #1783 <Method boolean ViewGroup.drawChild(Canvas, View, long)>
	//    5    7:ireturn         
	}

	void ensureBottomGlow()
	{
		if(mBottomGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mBottomGlow = mEdgeEffectFactory.createEdgeEffect(this, 3);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_3        
	//    9   15:invokevirtual   #1787 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1360 <Field EdgeEffect mBottomGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #487 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mBottomGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   28:aload_0         
	//   15   29:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1626 <Method int getPaddingLeft()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1629 <Method int getPaddingRight()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1639 <Method int getPaddingTop()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mBottomGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   64:aload_0         
	//   35   65:getfield        #1360 <Field EdgeEffect mBottomGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   40   76:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureLeftGlow()
	{
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mLeftGlow = mEdgeEffectFactory.createEdgeEffect(this, 0);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_0        
	//    9   15:invokevirtual   #1787 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1337 <Field EdgeEffect mLeftGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #487 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mLeftGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   28:aload_0         
	//   15   29:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1639 <Method int getPaddingTop()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1626 <Method int getPaddingLeft()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1629 <Method int getPaddingRight()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mLeftGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   64:aload_0         
	//   35   65:getfield        #1337 <Field EdgeEffect mLeftGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   40   76:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureRightGlow()
	{
		if(mRightGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1350 <Field EdgeEffect mRightGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mRightGlow = mEdgeEffectFactory.createEdgeEffect(this, 2);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_2        
	//    9   15:invokevirtual   #1787 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1350 <Field EdgeEffect mRightGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #487 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mRightGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   28:aload_0         
	//   15   29:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1639 <Method int getPaddingTop()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1626 <Method int getPaddingLeft()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1629 <Method int getPaddingRight()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mRightGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   64:aload_0         
	//   35   65:getfield        #1350 <Field EdgeEffect mRightGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   40   76:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	void ensureTopGlow()
	{
		if(mTopGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1355 <Field EdgeEffect mTopGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mTopGlow = mEdgeEffectFactory.createEdgeEffect(this, 1);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    7   13:aload_0         
	//    8   14:iconst_1        
	//    9   15:invokevirtual   #1787 <Method EdgeEffect RecyclerView$EdgeEffectFactory.createEdgeEffect(RecyclerView, int)>
	//   10   18:putfield        #1355 <Field EdgeEffect mTopGlow>
		if(mClipToPadding)
	//*  11   21:aload_0         
	//*  12   22:getfield        #487 <Field boolean mClipToPadding>
	//*  13   25:ifeq            64
		{
			mTopGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   28:aload_0         
	//   15   29:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   16   32:aload_0         
	//   17   33:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   18   36:aload_0         
	//   19   37:invokevirtual   #1626 <Method int getPaddingLeft()>
	//   20   40:isub            
	//   21   41:aload_0         
	//   22   42:invokevirtual   #1629 <Method int getPaddingRight()>
	//   23   45:isub            
	//   24   46:aload_0         
	//   25   47:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   26   50:aload_0         
	//   27   51:invokevirtual   #1639 <Method int getPaddingTop()>
	//   28   54:isub            
	//   29   55:aload_0         
	//   30   56:invokevirtual   #1642 <Method int getPaddingBottom()>
	//   31   59:isub            
	//   32   60:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   63:return          
		} else
		{
			mTopGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   64:aload_0         
	//   35   65:getfield        #1355 <Field EdgeEffect mTopGlow>
	//   36   68:aload_0         
	//   37   69:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   38   72:aload_0         
	//   39   73:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   40   76:invokevirtual   #1796 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   79:return          
		}
	}

	String exceptionLabel()
	{
		StringBuilder stringbuilder = new StringBuilder();
	//    0    0:new             #812 <Class StringBuilder>
	//    1    3:dup             
	//    2    4:invokespecial   #813 <Method void StringBuilder()>
	//    3    7:astore_1        
		stringbuilder.append(" ");
	//    4    8:aload_1         
	//    5    9:ldc2            #1798 <String " ">
	//    6   12:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//    7   15:pop             
		stringbuilder.append(super.toString());
	//    8   16:aload_1         
	//    9   17:aload_0         
	//   10   18:invokespecial   #1799 <Method String ViewGroup.toString()>
	//   11   21:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   12   24:pop             
		stringbuilder.append(", adapter:");
	//   13   25:aload_1         
	//   14   26:ldc2            #1801 <String ", adapter:">
	//   15   29:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   16   32:pop             
		stringbuilder.append(((Object) (mAdapter)));
	//   17   33:aload_1         
	//   18   34:aload_0         
	//   19   35:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//   20   38:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   21   41:pop             
		stringbuilder.append(", layout:");
	//   22   42:aload_1         
	//   23   43:ldc2            #1803 <String ", layout:">
	//   24   46:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   25   49:pop             
		stringbuilder.append(((Object) (mLayout)));
	//   26   50:aload_1         
	//   27   51:aload_0         
	//   28   52:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   29   55:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   30   58:pop             
		stringbuilder.append(", context:");
	//   31   59:aload_1         
	//   32   60:ldc2            #1805 <String ", context:">
	//   33   63:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   34   66:pop             
		stringbuilder.append(((Object) (getContext())));
	//   35   67:aload_1         
	//   36   68:aload_0         
	//   37   69:invokevirtual   #558 <Method Context getContext()>
	//   38   72:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   39   75:pop             
		return stringbuilder.toString();
	//   40   76:aload_1         
	//   41   77:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   42   80:areturn         
	}

	final void fillRemainingScrollValues(State state)
	{
		if(getScrollState() == 2)
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1808 <Method int getScrollState()>
	//*   2    4:iconst_2        
	//*   3    5:icmpne          43
		{
			OverScroller overscroller = mViewFlinger.mScroller;
	//    4    8:aload_0         
	//    5    9:getfield        #442 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    6   12:invokestatic    #1812 <Method OverScroller RecyclerView$ViewFlinger.access$400(RecyclerView$ViewFlinger)>
	//    7   15:astore_2        
			state.mRemainingScrollHorizontal = overscroller.getFinalX() - overscroller.getCurrX();
	//    8   16:aload_1         
	//    9   17:aload_2         
	//   10   18:invokevirtual   #1817 <Method int OverScroller.getFinalX()>
	//   11   21:aload_2         
	//   12   22:invokevirtual   #1820 <Method int OverScroller.getCurrX()>
	//   13   25:isub            
	//   14   26:putfield        #1823 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = overscroller.getFinalY() - overscroller.getCurrY();
	//   15   29:aload_1         
	//   16   30:aload_2         
	//   17   31:invokevirtual   #1826 <Method int OverScroller.getFinalY()>
	//   18   34:aload_2         
	//   19   35:invokevirtual   #1829 <Method int OverScroller.getCurrY()>
	//   20   38:isub            
	//   21   39:putfield        #1832 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   22   42:return          
		} else
		{
			state.mRemainingScrollHorizontal = 0;
	//   23   43:aload_1         
	//   24   44:iconst_0        
	//   25   45:putfield        #1823 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = 0;
	//   26   48:aload_1         
	//   27   49:iconst_0        
	//   28   50:putfield        #1832 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   29   53:return          
		}
	}

	public View findChildViewUnder(float f, float f1)
	{
		for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//*   2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//*   3    7:iconst_1        
	//*   4    8:isub            
	//*   5    9:istore          5
	//*   6   11:iload           5
	//*   7   13:iflt            106
		{
			View view = mChildHelper.getChildAt(i);
	//    8   16:aload_0         
	//    9   17:getfield        #682 <Field ChildHelper mChildHelper>
	//   10   20:iload           5
	//   11   22:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   12   25:astore          6
			float f2 = view.getTranslationX();
	//   13   27:aload           6
	//   14   29:invokevirtual   #1838 <Method float View.getTranslationX()>
	//   15   32:fstore_3        
			float f3 = view.getTranslationY();
	//   16   33:aload           6
	//   17   35:invokevirtual   #1841 <Method float View.getTranslationY()>
	//   18   38:fstore          4
			if(f >= (float)view.getLeft() + f2 && f <= (float)view.getRight() + f2 && f1 >= (float)view.getTop() + f3 && f1 <= (float)view.getBottom() + f3)
	//*  19   40:fload_1         
	//*  20   41:aload           6
	//*  21   43:invokevirtual   #1149 <Method int View.getLeft()>
	//*  22   46:i2f             
	//*  23   47:fload_3         
	//*  24   48:fadd            
	//*  25   49:fcmpl           
	//*  26   50:iflt            97
	//*  27   53:fload_1         
	//*  28   54:aload           6
	//*  29   56:invokevirtual   #1167 <Method int View.getRight()>
	//*  30   59:i2f             
	//*  31   60:fload_3         
	//*  32   61:fadd            
	//*  33   62:fcmpg           
	//*  34   63:ifgt            97
	//*  35   66:fload_2         
	//*  36   67:aload           6
	//*  37   69:invokevirtual   #1158 <Method int View.getTop()>
	//*  38   72:i2f             
	//*  39   73:fload           4
	//*  40   75:fadd            
	//*  41   76:fcmpl           
	//*  42   77:iflt            97
	//*  43   80:fload_2         
	//*  44   81:aload           6
	//*  45   83:invokevirtual   #1176 <Method int View.getBottom()>
	//*  46   86:i2f             
	//*  47   87:fload           4
	//*  48   89:fadd            
	//*  49   90:fcmpg           
	//*  50   91:ifgt            97
				return view;
	//   51   94:aload           6
	//   52   96:areturn         
		}

	//   53   97:iload           5
	//   54   99:iconst_1        
	//   55  100:isub            
	//   56  101:istore          5
	//*  57  103:goto            11
		return null;
	//   58  106:aconst_null     
	//   59  107:areturn         
	}

	public View findContainingItemView(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #670 <Method ViewParent View.getParent()>
	//    2    4:astore_3        
		View view1 = view;
	//    3    5:aload_1         
	//    4    6:astore_2        
		for(view = ((View) (viewparent)); view != null && view != this && (view instanceof View); view = ((View) (view1.getParent())))
	//*   5    7:aload_3         
	//*   6    8:astore_1        
	//*   7    9:aload_1         
	//*   8   10:ifnull          38
	//*   9   13:aload_1         
	//*  10   14:aload_0         
	//*  11   15:if_acmpeq       38
	//*  12   18:aload_1         
	//*  13   19:instanceof      #666 <Class View>
	//*  14   22:ifeq            38
			view1 = (View)view;
	//   15   25:aload_1         
	//   16   26:checkcast       #666 <Class View>
	//   17   29:astore_2        

	//   18   30:aload_2         
	//   19   31:invokevirtual   #670 <Method ViewParent View.getParent()>
	//   20   34:astore_1        
	//*  21   35:goto            9
		if(view == this)
	//*  22   38:aload_1         
	//*  23   39:aload_0         
	//*  24   40:if_acmpne       45
			return view1;
	//   25   43:aload_2         
	//   26   44:areturn         
		else
			return null;
	//   27   45:aconst_null     
	//   28   46:areturn         
	}

	public ViewHolder findContainingViewHolder(View view)
	{
		view = findContainingItemView(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1268 <Method View findContainingItemView(View)>
	//    3    5:astore_1        
		if(view == null)
	//*   4    6:aload_1         
	//*   5    7:ifnonnull       12
			return null;
	//    6   10:aconst_null     
	//    7   11:areturn         
		else
			return getChildViewHolder(view);
	//    8   12:aload_0         
	//    9   13:aload_1         
	//   10   14:invokevirtual   #674 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   11   17:areturn         
	}

	public ViewHolder findViewHolderForAdapterPosition(int i)
	{
		boolean flag = mDataSetHasChangedAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//    2    4:istore          4
		ViewHolder viewholder = null;
	//    3    6:aconst_null     
	//    4    7:astore          5
		if(flag)
	//*   5    9:iload           4
	//*   6   11:ifeq            16
			return null;
	//    7   14:aconst_null     
	//    8   15:areturn         
		int k = mChildHelper.getUnfilteredChildCount();
	//    9   16:aload_0         
	//   10   17:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   20:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//   12   23:istore_3        
		for(int j = 0; j < k;)
	//*  13   24:iconst_0        
	//*  14   25:istore_2        
	//*  15   26:iload_2         
	//*  16   27:iload_3         
	//*  17   28:icmpge          115
		{
			ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   18   31:aload_0         
	//   19   32:getfield        #682 <Field ChildHelper mChildHelper>
	//   20   35:iload_2         
	//   21   36:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   22   39:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   23   42:astore          7
			ViewHolder viewholder1 = viewholder;
	//   24   44:aload           5
	//   25   46:astore          6
			if(viewholder2 != null)
	//*  26   48:aload           7
	//*  27   50:ifnull          104
			{
				viewholder1 = viewholder;
	//   28   53:aload           5
	//   29   55:astore          6
				if(!viewholder2.isRemoved())
	//*  30   57:aload           7
	//*  31   59:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  32   62:ifne            104
				{
					viewholder1 = viewholder;
	//   33   65:aload           5
	//   34   67:astore          6
					if(getAdapterPositionFor(viewholder2) == i)
	//*  35   69:aload_0         
	//*  36   70:aload           7
	//*  37   72:invokevirtual   #1844 <Method int getAdapterPositionFor(RecyclerView$ViewHolder)>
	//*  38   75:iload_1         
	//*  39   76:icmpne          104
						if(mChildHelper.isHidden(viewholder2.itemView))
	//*  40   79:aload_0         
	//*  41   80:getfield        #682 <Field ChildHelper mChildHelper>
	//*  42   83:aload           7
	//*  43   85:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  44   88:invokevirtual   #1378 <Method boolean ChildHelper.isHidden(View)>
	//*  45   91:ifeq            101
							viewholder1 = viewholder2;
	//   46   94:aload           7
	//   47   96:astore          6
						else
	//*  48   98:goto            104
							return viewholder2;
	//   49  101:aload           7
	//   50  103:areturn         
				}
			}
			j++;
	//   51  104:iload_2         
	//   52  105:iconst_1        
	//   53  106:iadd            
	//   54  107:istore_2        
			viewholder = viewholder1;
	//   55  108:aload           6
	//   56  110:astore          5
		}

	//*  57  112:goto            26
		return viewholder;
	//   58  115:aload           5
	//   59  117:areturn         
	}

	public ViewHolder findViewHolderForItemId(long l)
	{
		Adapter adapter = mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//    2    4:astore          6
		ViewHolder viewholder = null;
	//    3    6:aconst_null     
	//    4    7:astore          5
		if(adapter != null)
	//*   5    9:aload           6
	//*   6   11:ifnull          130
		{
			if(!mAdapter.hasStableIds())
	//*   7   14:aload_0         
	//*   8   15:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   9   18:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  10   21:ifne            26
				return null;
	//   11   24:aconst_null     
	//   12   25:areturn         
			int j = mChildHelper.getUnfilteredChildCount();
	//   13   26:aload_0         
	//   14   27:getfield        #682 <Field ChildHelper mChildHelper>
	//   15   30:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//   16   33:istore          4
			for(int i = 0; i < j;)
	//*  17   35:iconst_0        
	//*  18   36:istore_3        
	//*  19   37:iload_3         
	//*  20   38:iload           4
	//*  21   40:icmpge          127
			{
				ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   22   43:aload_0         
	//   23   44:getfield        #682 <Field ChildHelper mChildHelper>
	//   24   47:iload_3         
	//   25   48:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   26   51:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   27   54:astore          7
				ViewHolder viewholder1 = viewholder;
	//   28   56:aload           5
	//   29   58:astore          6
				if(viewholder2 != null)
	//*  30   60:aload           7
	//*  31   62:ifnull          116
				{
					viewholder1 = viewholder;
	//   32   65:aload           5
	//   33   67:astore          6
					if(!viewholder2.isRemoved())
	//*  34   69:aload           7
	//*  35   71:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  36   74:ifne            116
					{
						viewholder1 = viewholder;
	//   37   77:aload           5
	//   38   79:astore          6
						if(viewholder2.getItemId() == l)
	//*  39   81:aload           7
	//*  40   83:invokevirtual   #1434 <Method long RecyclerView$ViewHolder.getItemId()>
	//*  41   86:lload_1         
	//*  42   87:lcmp            
	//*  43   88:ifne            116
							if(mChildHelper.isHidden(viewholder2.itemView))
	//*  44   91:aload_0         
	//*  45   92:getfield        #682 <Field ChildHelper mChildHelper>
	//*  46   95:aload           7
	//*  47   97:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  48  100:invokevirtual   #1378 <Method boolean ChildHelper.isHidden(View)>
	//*  49  103:ifeq            113
								viewholder1 = viewholder2;
	//   50  106:aload           7
	//   51  108:astore          6
							else
	//*  52  110:goto            116
								return viewholder2;
	//   53  113:aload           7
	//   54  115:areturn         
					}
				}
				i++;
	//   55  116:iload_3         
	//   56  117:iconst_1        
	//   57  118:iadd            
	//   58  119:istore_3        
				viewholder = viewholder1;
	//   59  120:aload           6
	//   60  122:astore          5
			}

	//*  61  124:goto            37
			return viewholder;
	//   62  127:aload           5
	//   63  129:areturn         
		} else
		{
			return null;
	//   64  130:aconst_null     
	//   65  131:areturn         
		}
	}

	public ViewHolder findViewHolderForLayoutPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1849 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	public ViewHolder findViewHolderForPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1849 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	ViewHolder findViewHolderForPosition(int i, boolean flag)
	{
		int k = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		ViewHolder viewholder = null;
	//    4    9:aconst_null     
	//    5   10:astore          5
		for(int j = 0; j < k;)
	//*   6   12:iconst_0        
	//*   7   13:istore_3        
	//*   8   14:iload_3         
	//*   9   15:iload           4
	//*  10   17:icmpge          126
		{
			ViewHolder viewholder1;
label0:
			{
				ViewHolder viewholder2 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   11   20:aload_0         
	//   12   21:getfield        #682 <Field ChildHelper mChildHelper>
	//   13   24:iload_3         
	//   14   25:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   15   28:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   31:astore          7
				viewholder1 = viewholder;
	//   17   33:aload           5
	//   18   35:astore          6
				if(viewholder2 == null)
					break label0;
	//   19   37:aload           7
	//   20   39:ifnull          115
				viewholder1 = viewholder;
	//   21   42:aload           5
	//   22   44:astore          6
				if(viewholder2.isRemoved())
					break label0;
	//   23   46:aload           7
	//   24   48:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   25   51:ifne            115
				if(flag)
	//*  26   54:iload_2         
	//*  27   55:ifeq            74
				{
					if(viewholder2.mPosition != i)
	//*  28   58:aload           7
	//*  29   60:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  30   63:iload_1         
	//*  31   64:icmpeq          90
					{
						viewholder1 = viewholder;
	//   32   67:aload           5
	//   33   69:astore          6
						break label0;
	//   34   71:goto            115
					}
				} else
				if(viewholder2.getLayoutPosition() != i)
	//*  35   74:aload           7
	//*  36   76:invokevirtual   #1113 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//*  37   79:iload_1         
	//*  38   80:icmpeq          90
				{
					viewholder1 = viewholder;
	//   39   83:aload           5
	//   40   85:astore          6
					break label0;
	//   41   87:goto            115
				}
				if(mChildHelper.isHidden(viewholder2.itemView))
	//*  42   90:aload_0         
	//*  43   91:getfield        #682 <Field ChildHelper mChildHelper>
	//*  44   94:aload           7
	//*  45   96:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//*  46   99:invokevirtual   #1378 <Method boolean ChildHelper.isHidden(View)>
	//*  47  102:ifeq            112
					viewholder1 = viewholder2;
	//   48  105:aload           7
	//   49  107:astore          6
				else
	//*  50  109:goto            115
					return viewholder2;
	//   51  112:aload           7
	//   52  114:areturn         
			}
			j++;
	//   53  115:iload_3         
	//   54  116:iconst_1        
	//   55  117:iadd            
	//   56  118:istore_3        
			viewholder = viewholder1;
	//   57  119:aload           6
	//   58  121:astore          5
		}

	//*  59  123:goto            14
		return viewholder;
	//   60  126:aload           5
	//   61  128:areturn         
	}

	public boolean fling(int i, int j)
	{
		int k;
		boolean flag;
		boolean flag2;
		boolean flag3;
label0:
		{
			LayoutManager layoutmanager = mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:astore          11
			flag = false;
	//    3    6:iconst_0        
	//    4    7:istore          7
			if(layoutmanager == null)
	//*   5    9:aload           11
	//*   6   11:ifnonnull       25
			{
				Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   14:ldc1            #178 <String "RecyclerView">
	//    8   16:ldc2            #1857 <String "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   19:invokestatic    #1257 <Method int Log.e(String, String)>
	//   10   22:pop             
				return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
			}
			if(mLayoutFrozen)
	//*  13   25:aload_0         
	//*  14   26:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  15   29:ifeq            34
				return false;
	//   16   32:iconst_0        
	//   17   33:ireturn         
			flag2 = mLayout.canScrollHorizontally();
	//   18   34:aload_0         
	//   19   35:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   20   38:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   21   41:istore          9
			flag3 = mLayout.canScrollVertically();
	//   22   43:aload_0         
	//   23   44:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   47:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   25   50:istore          10
			if(flag2)
	//*  26   52:iload           9
	//*  27   54:ifeq            71
			{
				k = i;
	//   28   57:iload_1         
	//   29   58:istore          5
				if(Math.abs(i) >= mMinFlingVelocity)
					break label0;
	//   30   60:iload_1         
	//   31   61:invokestatic    #1862 <Method int Math.abs(int)>
	//   32   64:aload_0         
	//   33   65:getfield        #523 <Field int mMinFlingVelocity>
	//   34   68:icmpge          74
			}
			k = 0;
	//   35   71:iconst_0        
	//   36   72:istore          5
		}
		int l;
label1:
		{
			if(flag3)
	//*  37   74:iload           10
	//*  38   76:ifeq            93
			{
				l = j;
	//   39   79:iload_2         
	//   40   80:istore          6
				if(Math.abs(j) >= mMinFlingVelocity)
					break label1;
	//   41   82:iload_2         
	//   42   83:invokestatic    #1862 <Method int Math.abs(int)>
	//   43   86:aload_0         
	//   44   87:getfield        #523 <Field int mMinFlingVelocity>
	//   45   90:icmpge          96
			}
			l = 0;
	//   46   93:iconst_0        
	//   47   94:istore          6
		}
		if(k == 0 && l == 0)
	//*  48   96:iload           5
	//*  49   98:ifne            108
	//*  50  101:iload           6
	//*  51  103:ifne            108
			return false;
	//   52  106:iconst_0        
	//   53  107:ireturn         
		float f = k;
	//   54  108:iload           5
	//   55  110:i2f             
	//   56  111:fstore_3        
		float f1 = l;
	//   57  112:iload           6
	//   58  114:i2f             
	//   59  115:fstore          4
		if(!dispatchNestedPreFling(f, f1))
	//*  60  117:aload_0         
	//*  61  118:fload_3         
	//*  62  119:fload           4
	//*  63  121:invokevirtual   #1863 <Method boolean dispatchNestedPreFling(float, float)>
	//*  64  124:ifne            262
		{
			boolean flag1;
			if(!flag2 && !flag3)
	//*  65  127:iload           9
	//*  66  129:ifne            146
	//*  67  132:iload           10
	//*  68  134:ifeq            140
	//*  69  137:goto            146
				flag1 = false;
	//   70  140:iconst_0        
	//   71  141:istore          8
			else
	//*  72  143:goto            149
				flag1 = true;
	//   73  146:iconst_1        
	//   74  147:istore          8
			dispatchNestedFling(f, f1, flag1);
	//   75  149:aload_0         
	//   76  150:fload_3         
	//   77  151:fload           4
	//   78  153:iload           8
	//   79  155:invokevirtual   #1864 <Method boolean dispatchNestedFling(float, float, boolean)>
	//   80  158:pop             
			if(mOnFlingListener != null && mOnFlingListener.onFling(k, l))
	//*  81  159:aload_0         
	//*  82  160:getfield        #1866 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  83  163:ifnull          182
	//*  84  166:aload_0         
	//*  85  167:getfield        #1866 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  86  170:iload           5
	//*  87  172:iload           6
	//*  88  174:invokevirtual   #1869 <Method boolean RecyclerView$OnFlingListener.onFling(int, int)>
	//*  89  177:ifeq            182
				return true;
	//   90  180:iconst_1        
	//   91  181:ireturn         
			if(flag1)
	//*  92  182:iload           8
	//*  93  184:ifeq            262
			{
				i = ((int) (flag));
	//   94  187:iload           7
	//   95  189:istore_1        
				if(flag2)
	//*  96  190:iload           9
	//*  97  192:ifeq            197
					i = 1;
	//   98  195:iconst_1        
	//   99  196:istore_1        
				j = i;
	//  100  197:iload_1         
	//  101  198:istore_2        
				if(flag3)
	//* 102  199:iload           10
	//* 103  201:ifeq            208
					j = i | 2;
	//  104  204:iload_1         
	//  105  205:iconst_2        
	//  106  206:ior             
	//  107  207:istore_2        
				startNestedScroll(j, 1);
	//  108  208:aload_0         
	//  109  209:iload_2         
	//  110  210:iconst_1        
	//  111  211:invokevirtual   #1872 <Method boolean startNestedScroll(int, int)>
	//  112  214:pop             
				i = Math.max(-mMaxFlingVelocity, Math.min(k, mMaxFlingVelocity));
	//  113  215:aload_0         
	//  114  216:getfield        #528 <Field int mMaxFlingVelocity>
	//  115  219:ineg            
	//  116  220:iload           5
	//  117  222:aload_0         
	//  118  223:getfield        #528 <Field int mMaxFlingVelocity>
	//  119  226:invokestatic    #1138 <Method int Math.min(int, int)>
	//  120  229:invokestatic    #1875 <Method int Math.max(int, int)>
	//  121  232:istore_1        
				j = Math.max(-mMaxFlingVelocity, Math.min(l, mMaxFlingVelocity));
	//  122  233:aload_0         
	//  123  234:getfield        #528 <Field int mMaxFlingVelocity>
	//  124  237:ineg            
	//  125  238:iload           6
	//  126  240:aload_0         
	//  127  241:getfield        #528 <Field int mMaxFlingVelocity>
	//  128  244:invokestatic    #1138 <Method int Math.min(int, int)>
	//  129  247:invokestatic    #1875 <Method int Math.max(int, int)>
	//  130  250:istore_2        
				mViewFlinger.fling(i, j);
	//  131  251:aload_0         
	//  132  252:getfield        #442 <Field RecyclerView$ViewFlinger mViewFlinger>
	//  133  255:iload_1         
	//  134  256:iload_2         
	//  135  257:invokevirtual   #1877 <Method void RecyclerView$ViewFlinger.fling(int, int)>
				return true;
	//  136  260:iconst_1        
	//  137  261:ireturn         
			}
		}
		return false;
	//  138  262:iconst_0        
	//  139  263:ireturn         
	}

	public View focusSearch(View view, int i)
	{
		Object obj = ((Object) (mLayout.onInterceptFocusSearch(view, i)));
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #1882 <Method View RecyclerView$LayoutManager.onInterceptFocusSearch(View, int)>
	//    5    9:astore          7
		if(obj != null)
	//*   6   11:aload           7
	//*   7   13:ifnull          19
			return ((View) (obj));
	//    8   16:aload           7
	//    9   18:areturn         
		byte byte0;
		if(mAdapter != null && mLayout != null && !isComputingLayout() && !mLayoutFrozen)
	//*  10   19:aload_0         
	//*  11   20:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          52
	//*  13   26:aload_0         
	//*  14   27:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  15   30:ifnull          52
	//*  16   33:aload_0         
	//*  17   34:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*  18   37:ifne            52
	//*  19   40:aload_0         
	//*  20   41:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  21   44:ifne            52
			byte0 = 1;
	//   22   47:iconst_1        
	//   23   48:istore_3        
		else
	//*  24   49:goto            54
			byte0 = 0;
	//   25   52:iconst_0        
	//   26   53:istore_3        
		obj = ((Object) (FocusFinder.getInstance()));
	//   27   54:invokestatic    #1888 <Method FocusFinder FocusFinder.getInstance()>
	//   28   57:astore          7
		if(byte0 != 0 && (i == 2 || i == 1))
	//*  29   59:iload_3         
	//*  30   60:ifeq            319
	//*  31   63:iload_2         
	//*  32   64:iconst_2        
	//*  33   65:icmpeq          73
	//*  34   68:iload_2         
	//*  35   69:iconst_1        
	//*  36   70:icmpne          319
		{
			if(mLayout.canScrollVertically())
	//*  37   73:aload_0         
	//*  38   74:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  39   77:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  40   80:ifeq            139
			{
				char c;
				if(i == 2)
	//*  41   83:iload_2         
	//*  42   84:iconst_2        
	//*  43   85:icmpne          96
					c = '\202';
	//   44   88:sipush          130
	//   45   91:istore          4
				else
	//*  46   93:goto            100
					c = '!';
	//   47   96:bipush          33
	//   48   98:istore          4
				boolean flag1;
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (c))) == null)
	//*  49  100:aload           7
	//*  50  102:aload_0         
	//*  51  103:aload_1         
	//*  52  104:iload           4
	//*  53  106:invokevirtual   #1892 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  54  109:ifnonnull       118
					flag1 = true;
	//   55  112:iconst_1        
	//   56  113:istore          5
				else
	//*  57  115:goto            121
					flag1 = false;
	//   58  118:iconst_0        
	//   59  119:istore          5
				byte0 = ((byte) (flag1));
	//   60  121:iload           5
	//   61  123:istore_3        
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//*  62  124:getstatic       #343 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  63  127:ifeq            141
				{
					i = ((int) (c));
	//   64  130:iload           4
	//   65  132:istore_2        
					byte0 = ((byte) (flag1));
	//   66  133:iload           5
	//   67  135:istore_3        
				}
			} else
	//*  68  136:goto            141
			{
				byte0 = 0;
	//   69  139:iconst_0        
	//   70  140:istore_3        
			}
			byte byte1 = byte0;
	//   71  141:iload_3         
	//   72  142:istore          6
			int j = i;
	//   73  144:iload_2         
	//   74  145:istore          5
			if(byte0 == 0)
	//*  75  147:iload_3         
	//*  76  148:ifne            255
			{
				byte1 = byte0;
	//   77  151:iload_3         
	//   78  152:istore          6
				j = i;
	//   79  154:iload_2         
	//   80  155:istore          5
				if(mLayout.canScrollHorizontally())
	//*  81  157:aload_0         
	//*  82  158:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  83  161:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  84  164:ifeq            255
				{
					if(mLayout.getLayoutDirection() == 1)
	//*  85  167:aload_0         
	//*  86  168:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  87  171:invokevirtual   #1280 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  88  174:iconst_1        
	//*  89  175:icmpne          183
						byte0 = 1;
	//   90  178:iconst_1        
	//   91  179:istore_3        
					else
	//*  92  180:goto            185
						byte0 = 0;
	//   93  183:iconst_0        
	//   94  184:istore_3        
					boolean flag;
					if(i == 2)
	//*  95  185:iload_2         
	//*  96  186:iconst_2        
	//*  97  187:icmpne          196
						flag = true;
	//   98  190:iconst_1        
	//   99  191:istore          4
					else
	//* 100  193:goto            199
						flag = false;
	//  101  196:iconst_0        
	//  102  197:istore          4
					if((byte0 ^ flag) != 0)
	//* 103  199:iload_3         
	//* 104  200:iload           4
	//* 105  202:ixor            
	//* 106  203:ifeq            212
						byte0 = 66;
	//  107  206:bipush          66
	//  108  208:istore_3        
					else
	//* 109  209:goto            215
						byte0 = 17;
	//  110  212:bipush          17
	//  111  214:istore_3        
					if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (byte0))) == null)
	//* 112  215:aload           7
	//* 113  217:aload_0         
	//* 114  218:aload_1         
	//* 115  219:iload_3         
	//* 116  220:invokevirtual   #1892 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 117  223:ifnonnull       232
						flag = true;
	//  118  226:iconst_1        
	//  119  227:istore          4
					else
	//* 120  229:goto            235
						flag = false;
	//  121  232:iconst_0        
	//  122  233:istore          4
					byte1 = ((byte) (flag));
	//  123  235:iload           4
	//  124  237:istore          6
					j = i;
	//  125  239:iload_2         
	//  126  240:istore          5
					if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
	//* 127  242:getstatic       #343 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//* 128  245:ifeq            255
					{
						j = ((int) (byte0));
	//  129  248:iload_3         
	//  130  249:istore          5
						byte1 = ((byte) (flag));
	//  131  251:iload           4
	//  132  253:istore          6
					}
				}
			}
			if(byte1 != 0)
	//* 133  255:iload           6
	//* 134  257:ifeq            302
			{
				consumePendingUpdateOperations();
	//  135  260:aload_0         
	//  136  261:invokevirtual   #1894 <Method void consumePendingUpdateOperations()>
				if(findContainingItemView(view) == null)
	//* 137  264:aload_0         
	//* 138  265:aload_1         
	//* 139  266:invokevirtual   #1268 <Method View findContainingItemView(View)>
	//* 140  269:ifnonnull       274
					return null;
	//  141  272:aconst_null     
	//  142  273:areturn         
				startInterceptRequestLayout();
	//  143  274:aload_0         
	//  144  275:invokevirtual   #883 <Method void startInterceptRequestLayout()>
				mLayout.onFocusSearchFailed(view, j, mRecycler, mState);
	//  145  278:aload_0         
	//  146  279:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  147  282:aload_1         
	//  148  283:iload           5
	//  149  285:aload_0         
	//  150  286:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  151  289:aload_0         
	//  152  290:getfield        #450 <Field RecyclerView$State mState>
	//  153  293:invokevirtual   #1898 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  154  296:pop             
				stopInterceptRequestLayout(false);
	//  155  297:aload_0         
	//  156  298:iconst_0        
	//  157  299:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
			}
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, j)));
	//  158  302:aload           7
	//  159  304:aload_0         
	//  160  305:aload_1         
	//  161  306:iload           5
	//  162  308:invokevirtual   #1892 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  163  311:astore          7
			i = j;
	//  164  313:iload           5
	//  165  315:istore_2        
		} else
	//* 166  316:goto            383
		{
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i)));
	//  167  319:aload           7
	//  168  321:aload_0         
	//  169  322:aload_1         
	//  170  323:iload_2         
	//  171  324:invokevirtual   #1892 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  172  327:astore          7
			if(obj == null && byte0 != 0)
	//* 173  329:aload           7
	//* 174  331:ifnonnull       383
	//* 175  334:iload_3         
	//* 176  335:ifeq            383
			{
				consumePendingUpdateOperations();
	//  177  338:aload_0         
	//  178  339:invokevirtual   #1894 <Method void consumePendingUpdateOperations()>
				if(findContainingItemView(view) == null)
	//* 179  342:aload_0         
	//* 180  343:aload_1         
	//* 181  344:invokevirtual   #1268 <Method View findContainingItemView(View)>
	//* 182  347:ifnonnull       352
					return null;
	//  183  350:aconst_null     
	//  184  351:areturn         
				startInterceptRequestLayout();
	//  185  352:aload_0         
	//  186  353:invokevirtual   #883 <Method void startInterceptRequestLayout()>
				obj = ((Object) (mLayout.onFocusSearchFailed(view, i, mRecycler, mState)));
	//  187  356:aload_0         
	//  188  357:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  189  360:aload_1         
	//  190  361:iload_2         
	//  191  362:aload_0         
	//  192  363:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  193  366:aload_0         
	//  194  367:getfield        #450 <Field RecyclerView$State mState>
	//  195  370:invokevirtual   #1898 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  196  373:astore          7
				stopInterceptRequestLayout(false);
	//  197  375:aload_0         
	//  198  376:iconst_0        
	//  199  377:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
			}
		}
	//* 200  380:goto            383
		if(obj != null && !((View) (obj)).hasFocusable())
	//* 201  383:aload           7
	//* 202  385:ifnull          419
	//* 203  388:aload           7
	//* 204  390:invokevirtual   #1133 <Method boolean View.hasFocusable()>
	//* 205  393:ifne            419
			if(getFocusedChild() == null)
	//* 206  396:aload_0         
	//* 207  397:invokevirtual   #1371 <Method View getFocusedChild()>
	//* 208  400:ifnonnull       410
			{
				return super.focusSearch(view, i);
	//  209  403:aload_0         
	//  210  404:aload_1         
	//  211  405:iload_2         
	//  212  406:invokespecial   #1900 <Method View ViewGroup.focusSearch(View, int)>
	//  213  409:areturn         
			} else
			{
				requestChildOnScreen(((View) (obj)), ((View) (null)));
	//  214  410:aload_0         
	//  215  411:aload           7
	//  216  413:aconst_null     
	//  217  414:invokespecial   #1902 <Method void requestChildOnScreen(View, View)>
				return view;
	//  218  417:aload_1         
	//  219  418:areturn         
			}
		if(isPreferredNextFocus(view, ((View) (obj)), i))
	//* 220  419:aload_0         
	//* 221  420:aload_1         
	//* 222  421:aload           7
	//* 223  423:iload_2         
	//* 224  424:invokespecial   #1904 <Method boolean isPreferredNextFocus(View, View, int)>
	//* 225  427:ifeq            433
			return ((View) (obj));
	//  226  430:aload           7
	//  227  432:areturn         
		else
			return super.focusSearch(view, i);
	//  228  433:aload_0         
	//  229  434:aload_1         
	//  230  435:iload_2         
	//  231  436:invokespecial   #1900 <Method View ViewGroup.focusSearch(View, int)>
	//  232  439:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       44
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    3    7:new             #812 <Class StringBuilder>
	//    4   10:dup             
	//    5   11:invokespecial   #813 <Method void StringBuilder()>
	//    6   14:astore_1        
			stringbuilder.append("RecyclerView has no LayoutManager");
	//    7   15:aload_1         
	//    8   16:ldc2            #1907 <String "RecyclerView has no LayoutManager">
	//    9   19:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   10   22:pop             
			stringbuilder.append(exceptionLabel());
	//   11   23:aload_1         
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1242 <Method String exceptionLabel()>
	//   14   28:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:pop             
			throw new IllegalStateException(stringbuilder.toString());
	//   16   32:new             #824 <Class IllegalStateException>
	//   17   35:dup             
	//   18   36:aload_1         
	//   19   37:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   20   40:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   21   43:athrow          
		} else
		{
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateDefaultLayoutParams()));
	//   22   44:aload_0         
	//   23   45:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   48:invokevirtual   #1910 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateDefaultLayoutParams()>
	//   25   51:areturn         
		}
	}

	public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       44
		{
			attributeset = ((AttributeSet) (new StringBuilder()));
	//    3    7:new             #812 <Class StringBuilder>
	//    4   10:dup             
	//    5   11:invokespecial   #813 <Method void StringBuilder()>
	//    6   14:astore_1        
			((StringBuilder) (attributeset)).append("RecyclerView has no LayoutManager");
	//    7   15:aload_1         
	//    8   16:ldc2            #1907 <String "RecyclerView has no LayoutManager">
	//    9   19:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   10   22:pop             
			((StringBuilder) (attributeset)).append(exceptionLabel());
	//   11   23:aload_1         
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1242 <Method String exceptionLabel()>
	//   14   28:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:pop             
			throw new IllegalStateException(((StringBuilder) (attributeset)).toString());
	//   16   32:new             #824 <Class IllegalStateException>
	//   17   35:dup             
	//   18   36:aload_1         
	//   19   37:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   20   40:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   21   43:athrow          
		} else
		{
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(getContext(), attributeset)));
	//   22   44:aload_0         
	//   23   45:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   48:aload_0         
	//   25   49:invokevirtual   #558 <Method Context getContext()>
	//   26   52:aload_1         
	//   27   53:invokevirtual   #1915 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(Context, AttributeSet)>
	//   28   56:areturn         
		}
	}

	protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       44
		{
			layoutparams = ((android.view.ViewGroup.LayoutParams) (new StringBuilder()));
	//    3    7:new             #812 <Class StringBuilder>
	//    4   10:dup             
	//    5   11:invokespecial   #813 <Method void StringBuilder()>
	//    6   14:astore_1        
			((StringBuilder) (layoutparams)).append("RecyclerView has no LayoutManager");
	//    7   15:aload_1         
	//    8   16:ldc2            #1907 <String "RecyclerView has no LayoutManager">
	//    9   19:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   10   22:pop             
			((StringBuilder) (layoutparams)).append(exceptionLabel());
	//   11   23:aload_1         
	//   12   24:aload_0         
	//   13   25:invokevirtual   #1242 <Method String exceptionLabel()>
	//   14   28:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:pop             
			throw new IllegalStateException(((StringBuilder) (layoutparams)).toString());
	//   16   32:new             #824 <Class IllegalStateException>
	//   17   35:dup             
	//   18   36:aload_1         
	//   19   37:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   20   40:invokespecial   #1245 <Method void IllegalStateException(String)>
	//   21   43:athrow          
		} else
		{
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(layoutparams)));
	//   22   44:aload_0         
	//   23   45:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   48:aload_1         
	//   25   49:invokevirtual   #1919 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
	//   26   52:areturn         
		}
	}

	public Adapter getAdapter()
	{
		return mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//    2    4:areturn         
	}

	int getAdapterPositionFor(ViewHolder viewholder)
	{
		if(!viewholder.hasAnyOfTheFlags(524) && viewholder.isBound())
	//*   0    0:aload_1         
	//*   1    1:sipush          524
	//*   2    4:invokevirtual   #984 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//*   3    7:ifne            32
	//*   4   10:aload_1         
	//*   5   11:invokevirtual   #1924 <Method boolean RecyclerView$ViewHolder.isBound()>
	//*   6   14:ifne            20
	//*   7   17:goto            32
			return mAdapterHelper.applyPendingUpdatesToPosition(viewholder.mPosition);
	//    8   20:aload_0         
	//    9   21:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//   10   24:aload_1         
	//   11   25:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//   12   28:invokevirtual   #1927 <Method int AdapterHelper.applyPendingUpdatesToPosition(int)>
	//   13   31:ireturn         
		else
			return -1;
	//   14   32:iconst_m1       
	//   15   33:ireturn         
	}

	public int getBaseline()
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			return mLayout.getBaseline();
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1930 <Method int RecyclerView$LayoutManager.getBaseline()>
	//    6   14:ireturn         
		else
			return super.getBaseline();
	//    7   15:aload_0         
	//    8   16:invokespecial   #1931 <Method int ViewGroup.getBaseline()>
	//    9   19:ireturn         
	}

	long getChangedHolderKey(ViewHolder viewholder)
	{
		if(mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   3    7:ifeq            15
			return viewholder.getItemId();
	//    4   10:aload_1         
	//    5   11:invokevirtual   #1434 <Method long RecyclerView$ViewHolder.getItemId()>
	//    6   14:lreturn         
		else
			return (long)viewholder.mPosition;
	//    7   15:aload_1         
	//    8   16:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//    9   19:i2l             
	//   10   20:lreturn         
	}

	public int getChildAdapterPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getAdapterPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1440 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	protected int getChildDrawingOrder(int i, int j)
	{
		if(mChildDrawingOrderCallback == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1935 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   2    4:ifnonnull       14
			return super.getChildDrawingOrder(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokespecial   #1937 <Method int ViewGroup.getChildDrawingOrder(int, int)>
	//    7   13:ireturn         
		else
			return mChildDrawingOrderCallback.onGetChildDrawingOrder(i, j);
	//    8   14:aload_0         
	//    9   15:getfield        #1935 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//   10   18:iload_1         
	//   11   19:iload_2         
	//   12   20:invokeinterface #1940 <Method int RecyclerView$ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int)>
	//   13   25:ireturn         
	}

	public long getChildItemId(View view)
	{
		Adapter adapter = mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//    2    4:astore          4
		long l = -1L;
	//    3    6:ldc2w           #167 <Long -1L>
	//    4    9:lstore_2        
		if(adapter != null)
	//*   5   10:aload           4
	//*   6   12:ifnull          45
		{
			if(!mAdapter.hasStableIds())
	//*   7   15:aload_0         
	//*   8   16:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*   9   19:invokevirtual   #934 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  10   22:ifne            29
				return -1L;
	//   11   25:ldc2w           #167 <Long -1L>
	//   12   28:lreturn         
			view = ((View) (getChildViewHolderInt(view)));
	//   13   29:aload_1         
	//   14   30:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   15   33:astore_1        
			if(view != null)
	//*  16   34:aload_1         
	//*  17   35:ifnull          43
				l = ((ViewHolder) (view)).getItemId();
	//   18   38:aload_1         
	//   19   39:invokevirtual   #1434 <Method long RecyclerView$ViewHolder.getItemId()>
	//   20   42:lstore_2        
			return l;
	//   21   43:lload_2         
	//   22   44:lreturn         
		} else
		{
			return -1L;
	//   23   45:ldc2w           #167 <Long -1L>
	//   24   48:lreturn         
		}
	}

	public int getChildLayoutPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getLayoutPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1113 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	public int getChildPosition(View view)
	{
		return getChildAdapterPosition(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1946 <Method int getChildAdapterPosition(View)>
	//    3    5:ireturn         
	}

	public ViewHolder getChildViewHolder(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #670 <Method ViewParent View.getParent()>
	//    2    4:astore_2        
		if(viewparent != null && viewparent != this)
	//*   3    5:aload_2         
	//*   4    6:ifnull          62
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpeq       62
		{
			StringBuilder stringbuilder = new StringBuilder();
	//    8   14:new             #812 <Class StringBuilder>
	//    9   17:dup             
	//   10   18:invokespecial   #813 <Method void StringBuilder()>
	//   11   21:astore_2        
			stringbuilder.append("View ");
	//   12   22:aload_2         
	//   13   23:ldc2            #1948 <String "View ">
	//   14   26:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   15   29:pop             
			stringbuilder.append(((Object) (view)));
	//   16   30:aload_2         
	//   17   31:aload_1         
	//   18   32:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   19   35:pop             
			stringbuilder.append(" is not a direct child of ");
	//   20   36:aload_2         
	//   21   37:ldc2            #1950 <String " is not a direct child of ">
	//   22   40:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   23   43:pop             
			stringbuilder.append(((Object) (this)));
	//   24   44:aload_2         
	//   25   45:aload_0         
	//   26   46:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   27   49:pop             
			throw new IllegalArgumentException(stringbuilder.toString());
	//   28   50:new             #1287 <Class IllegalArgumentException>
	//   29   53:dup             
	//   30   54:aload_2         
	//   31   55:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   32   58:invokespecial   #1288 <Method void IllegalArgumentException(String)>
	//   33   61:athrow          
		} else
		{
			return getChildViewHolderInt(view);
	//   34   62:aload_1         
	//   35   63:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   36   66:areturn         
		}
	}

	public boolean getClipToPadding()
	{
		return mClipToPadding;
	//    0    0:aload_0         
	//    1    1:getfield        #487 <Field boolean mClipToPadding>
	//    2    4:ireturn         
	}

	public RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
	{
		return mAccessibilityDelegate;
	//    0    0:aload_0         
	//    1    1:getfield        #1955 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    2    4:areturn         
	}

	public void getDecoratedBoundsWithMargins(View view, Rect rect)
	{
		getDecoratedBoundsWithMarginsInt(view, rect);
	//    0    0:aload_1         
	//    1    1:aload_2         
	//    2    2:invokestatic    #1958 <Method void getDecoratedBoundsWithMarginsInt(View, Rect)>
	//    3    5:return          
	}

	public EdgeEffectFactory getEdgeEffectFactory()
	{
		return mEdgeEffectFactory;
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
	//    2    4:areturn         
	}

	public ItemAnimator getItemAnimator()
	{
		return mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:areturn         
	}

	Rect getItemDecorInsetsForChild(View view)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #74  <Class RecyclerView$LayoutParams>
	//    3    7:astore          4
		if(!layoutparams.mInsetsDirty)
	//*   4    9:aload           4
	//*   5   11:getfield        #1410 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*   6   14:ifne            23
			return layoutparams.mDecorInsets;
	//    7   17:aload           4
	//    8   19:getfield        #1146 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    9   22:areturn         
		if(mState.isPreLayout() && (layoutparams.isItemChanged() || layoutparams.isViewInvalid()))
	//*  10   23:aload_0         
	//*  11   24:getfield        #450 <Field RecyclerView$State mState>
	//*  12   27:invokevirtual   #1967 <Method boolean RecyclerView$State.isPreLayout()>
	//*  13   30:ifeq            55
	//*  14   33:aload           4
	//*  15   35:invokevirtual   #1970 <Method boolean RecyclerView$LayoutParams.isItemChanged()>
	//*  16   38:ifne            49
	//*  17   41:aload           4
	//*  18   43:invokevirtual   #1973 <Method boolean RecyclerView$LayoutParams.isViewInvalid()>
	//*  19   46:ifeq            55
			return layoutparams.mDecorInsets;
	//   20   49:aload           4
	//   21   51:getfield        #1146 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   22   54:areturn         
		Rect rect = layoutparams.mDecorInsets;
	//   23   55:aload           4
	//   24   57:getfield        #1146 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   25   60:astore          5
		rect.set(0, 0, 0, 0);
	//   26   62:aload           5
	//   27   64:iconst_0        
	//   28   65:iconst_0        
	//   29   66:iconst_0        
	//   30   67:iconst_0        
	//   31   68:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
		int j = mItemDecorations.size();
	//   32   71:aload_0         
	//   33   72:getfield        #408 <Field ArrayList mItemDecorations>
	//   34   75:invokevirtual   #1100 <Method int ArrayList.size()>
	//   35   78:istore_3        
		for(int i = 0; i < j; i++)
	//*  36   79:iconst_0        
	//*  37   80:istore_2        
	//*  38   81:iload_2         
	//*  39   82:iload_3         
	//*  40   83:icmpge          200
		{
			mTempRect.set(0, 0, 0, 0);
	//   41   86:aload_0         
	//   42   87:getfield        #396 <Field Rect mTempRect>
	//   43   90:iconst_0        
	//   44   91:iconst_0        
	//   45   92:iconst_0        
	//   46   93:iconst_0        
	//   47   94:invokevirtual   #1186 <Method void Rect.set(int, int, int, int)>
			((ItemDecoration)mItemDecorations.get(i)).getItemOffsets(mTempRect, view, this, mState);
	//   48   97:aload_0         
	//   49   98:getfield        #408 <Field ArrayList mItemDecorations>
	//   50  101:iload_2         
	//   51  102:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   52  105:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   53  108:aload_0         
	//   54  109:getfield        #396 <Field Rect mTempRect>
	//   55  112:aload_1         
	//   56  113:aload_0         
	//   57  114:aload_0         
	//   58  115:getfield        #450 <Field RecyclerView$State mState>
	//   59  118:invokevirtual   #1977 <Method void RecyclerView$ItemDecoration.getItemOffsets(Rect, View, RecyclerView, RecyclerView$State)>
			rect.left = rect.left + mTempRect.left;
	//   60  121:aload           5
	//   61  123:aload           5
	//   62  125:getfield        #1152 <Field int Rect.left>
	//   63  128:aload_0         
	//   64  129:getfield        #396 <Field Rect mTempRect>
	//   65  132:getfield        #1152 <Field int Rect.left>
	//   66  135:iadd            
	//   67  136:putfield        #1152 <Field int Rect.left>
			rect.top = rect.top + mTempRect.top;
	//   68  139:aload           5
	//   69  141:aload           5
	//   70  143:getfield        #1161 <Field int Rect.top>
	//   71  146:aload_0         
	//   72  147:getfield        #396 <Field Rect mTempRect>
	//   73  150:getfield        #1161 <Field int Rect.top>
	//   74  153:iadd            
	//   75  154:putfield        #1161 <Field int Rect.top>
			rect.right = rect.right + mTempRect.right;
	//   76  157:aload           5
	//   77  159:aload           5
	//   78  161:getfield        #1170 <Field int Rect.right>
	//   79  164:aload_0         
	//   80  165:getfield        #396 <Field Rect mTempRect>
	//   81  168:getfield        #1170 <Field int Rect.right>
	//   82  171:iadd            
	//   83  172:putfield        #1170 <Field int Rect.right>
			rect.bottom = rect.bottom + mTempRect.bottom;
	//   84  175:aload           5
	//   85  177:aload           5
	//   86  179:getfield        #1179 <Field int Rect.bottom>
	//   87  182:aload_0         
	//   88  183:getfield        #396 <Field Rect mTempRect>
	//   89  186:getfield        #1179 <Field int Rect.bottom>
	//   90  189:iadd            
	//   91  190:putfield        #1179 <Field int Rect.bottom>
		}

	//   92  193:iload_2         
	//   93  194:iconst_1        
	//   94  195:iadd            
	//   95  196:istore_2        
	//*  96  197:goto            81
		layoutparams.mInsetsDirty = false;
	//   97  200:aload           4
	//   98  202:iconst_0        
	//   99  203:putfield        #1410 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		return rect;
	//  100  206:aload           5
	//  101  208:areturn         
	}

	public ItemDecoration getItemDecorationAt(int i)
	{
		int j = getItemDecorationCount();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1982 <Method int getItemDecorationCount()>
	//    2    4:istore_2        
		if(i >= 0 && i < j)
	//*   3    5:iload_1         
	//*   4    6:iflt            29
	//*   5    9:iload_1         
	//*   6   10:iload_2         
	//*   7   11:icmplt          17
	//*   8   14:goto            29
		{
			return (ItemDecoration)mItemDecorations.get(i);
	//    9   17:aload_0         
	//   10   18:getfield        #408 <Field ArrayList mItemDecorations>
	//   11   21:iload_1         
	//   12   22:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   13   25:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   14   28:areturn         
		} else
		{
			StringBuilder stringbuilder = new StringBuilder();
	//   15   29:new             #812 <Class StringBuilder>
	//   16   32:dup             
	//   17   33:invokespecial   #813 <Method void StringBuilder()>
	//   18   36:astore_3        
			stringbuilder.append(i);
	//   19   37:aload_3         
	//   20   38:iload_1         
	//   21   39:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//   22   42:pop             
			stringbuilder.append(" is an invalid index for size ");
	//   23   43:aload_3         
	//   24   44:ldc2            #1984 <String " is an invalid index for size ">
	//   25   47:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   26   50:pop             
			stringbuilder.append(j);
	//   27   51:aload_3         
	//   28   52:iload_2         
	//   29   53:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//   30   56:pop             
			throw new IndexOutOfBoundsException(stringbuilder.toString());
	//   31   57:new             #1986 <Class IndexOutOfBoundsException>
	//   32   60:dup             
	//   33   61:aload_3         
	//   34   62:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   35   65:invokespecial   #1987 <Method void IndexOutOfBoundsException(String)>
	//   36   68:athrow          
		}
	}

	public int getItemDecorationCount()
	{
		return mItemDecorations.size();
	//    0    0:aload_0         
	//    1    1:getfield        #408 <Field ArrayList mItemDecorations>
	//    2    4:invokevirtual   #1100 <Method int ArrayList.size()>
	//    3    7:ireturn         
	}

	public LayoutManager getLayoutManager()
	{
		return mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:areturn         
	}

	public int getMaxFlingVelocity()
	{
		return mMaxFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #528 <Field int mMaxFlingVelocity>
	//    2    4:ireturn         
	}

	public int getMinFlingVelocity()
	{
		return mMinFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #523 <Field int mMinFlingVelocity>
	//    2    4:ireturn         
	}

	long getNanoTime()
	{
		if(ALLOW_THREAD_GAP_WORK)
	//*   0    0:getstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*   1    3:ifeq            10
			return System.nanoTime();
	//    2    6:invokestatic    #1997 <Method long System.nanoTime()>
	//    3    9:lreturn         
		else
			return 0L;
	//    4   10:lconst_0        
	//    5   11:lreturn         
	}

	public OnFlingListener getOnFlingListener()
	{
		return mOnFlingListener;
	//    0    0:aload_0         
	//    1    1:getfield        #1866 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    2    4:areturn         
	}

	public boolean getPreserveFocusAfterLayout()
	{
		return mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #439 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ireturn         
	}

	public RecycledViewPool getRecycledViewPool()
	{
		return mRecycler.getRecycledViewPool();
	//    0    0:aload_0         
	//    1    1:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//    2    4:invokevirtual   #2004 <Method RecyclerView$RecycledViewPool RecyclerView$Recycler.getRecycledViewPool()>
	//    3    7:areturn         
	}

	public int getScrollState()
	{
		return mScrollState;
	//    0    0:aload_0         
	//    1    1:getfield        #430 <Field int mScrollState>
	//    2    4:ireturn         
	}

	public boolean hasFixedSize()
	{
		return mHasFixedSize;
	//    0    0:aload_0         
	//    1    1:getfield        #2007 <Field boolean mHasFixedSize>
	//    2    4:ireturn         
	}

	public boolean hasNestedScrollingParent()
	{
		return getScrollingChildHelper().hasNestedScrollingParent();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2010 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent()>
	//    3    7:ireturn         
	}

	public boolean hasNestedScrollingParent(int i)
	{
		return getScrollingChildHelper().hasNestedScrollingParent(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2012 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent(int)>
	//    4    8:ireturn         
	}

	public boolean hasPendingAdapterUpdates()
	{
		return !mFirstLayoutComplete || mDataSetHasChangedAfterLayout || mAdapterHelper.hasPendingUpdates();
	//    0    0:aload_0         
	//    1    1:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//    2    4:ifeq            29
	//    3    7:aload_0         
	//    4    8:getfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
	//    5   11:ifne            29
	//    6   14:aload_0         
	//    7   15:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//    8   18:invokevirtual   #1601 <Method boolean AdapterHelper.hasPendingUpdates()>
	//    9   21:ifeq            27
	//   10   24:goto            29
	//   11   27:iconst_0        
	//   12   28:ireturn         
	//   13   29:iconst_1        
	//   14   30:ireturn         
	}

	void initAdapterManager()
	{
		mAdapterHelper = new AdapterHelper(new AdapterHelper.Callback() {

			void dispatchUpdate(AdapterHelper.UpdateOp updateop)
			{
				int i = updateop.cmd;
			//    0    0:aload_1         
			//    1    1:getfield        #28  <Field int AdapterHelper$UpdateOp.cmd>
			//    2    4:istore_2        
				if(i != 4)
			//*   3    5:iload_2         
			//*   4    6:iconst_4        
			//*   5    7:icmpeq          111
				{
					if(i != 8)
			//*   6   10:iload_2         
			//*   7   11:bipush          8
			//*   8   13:icmpeq          87
					{
						switch(i)
			//*   9   16:iload_2         
						{
			//*  10   17:tableswitch     1 2: default 40
			//			               1 64
			//			               2 41
						default:
							return;
			//   11   40:return          

						case 2: // '\002'
							mLayout.onItemsRemoved(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   12   41:aload_0         
			//   13   42:getfield        #17  <Field RecyclerView this$0>
			//   14   45:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   15   48:aload_0         
			//   16   49:getfield        #17  <Field RecyclerView this$0>
			//   17   52:aload_1         
			//   18   53:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   19   56:aload_1         
			//   20   57:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   21   60:invokevirtual   #44  <Method void RecyclerView$LayoutManager.onItemsRemoved(RecyclerView, int, int)>
							return;
			//   22   63:return          

						case 1: // '\001'
							mLayout.onItemsAdded(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   23   64:aload_0         
			//   24   65:getfield        #17  <Field RecyclerView this$0>
			//   25   68:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   26   71:aload_0         
			//   27   72:getfield        #17  <Field RecyclerView this$0>
			//   28   75:aload_1         
			//   29   76:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   30   79:aload_1         
			//   31   80:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   32   83:invokevirtual   #47  <Method void RecyclerView$LayoutManager.onItemsAdded(RecyclerView, int, int)>
							return;
			//   33   86:return          
						}
					} else
					{
						mLayout.onItemsMoved(RecyclerView.this, updateop.positionStart, updateop.itemCount, 1);
			//   34   87:aload_0         
			//   35   88:getfield        #17  <Field RecyclerView this$0>
			//   36   91:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   37   94:aload_0         
			//   38   95:getfield        #17  <Field RecyclerView this$0>
			//   39   98:aload_1         
			//   40   99:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   41  102:aload_1         
			//   42  103:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   43  106:iconst_1        
			//   44  107:invokevirtual   #51  <Method void RecyclerView$LayoutManager.onItemsMoved(RecyclerView, int, int, int)>
						return;
			//   45  110:return          
					}
				} else
				{
					mLayout.onItemsUpdated(RecyclerView.this, updateop.positionStart, updateop.itemCount, updateop.payload);
			//   46  111:aload_0         
			//   47  112:getfield        #17  <Field RecyclerView this$0>
			//   48  115:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   49  118:aload_0         
			//   50  119:getfield        #17  <Field RecyclerView this$0>
			//   51  122:aload_1         
			//   52  123:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   53  126:aload_1         
			//   54  127:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   55  130:aload_1         
			//   56  131:getfield        #55  <Field Object AdapterHelper$UpdateOp.payload>
			//   57  134:invokevirtual   #59  <Method void RecyclerView$LayoutManager.onItemsUpdated(RecyclerView, int, int, Object)>
					return;
			//   58  137:return          
				}
			}

			public ViewHolder findViewHolder(int i)
			{
				ViewHolder viewholder = findViewHolderForPosition(i, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iconst_1        
			//    4    6:invokevirtual   #65  <Method RecyclerView$ViewHolder RecyclerView.findViewHolderForPosition(int, boolean)>
			//    5    9:astore_2        
				if(viewholder == null)
			//*   6   10:aload_2         
			//*   7   11:ifnonnull       16
					return null;
			//    8   14:aconst_null     
			//    9   15:areturn         
				if(mChildHelper.isHidden(viewholder.itemView))
			//*  10   16:aload_0         
			//*  11   17:getfield        #17  <Field RecyclerView this$0>
			//*  12   20:getfield        #69  <Field ChildHelper RecyclerView.mChildHelper>
			//*  13   23:aload_2         
			//*  14   24:getfield        #75  <Field View RecyclerView$ViewHolder.itemView>
			//*  15   27:invokevirtual   #81  <Method boolean ChildHelper.isHidden(View)>
			//*  16   30:ifeq            35
					return null;
			//   17   33:aconst_null     
			//   18   34:areturn         
				else
					return viewholder;
			//   19   35:aload_2         
			//   20   36:areturn         
			}

			public void markViewHoldersUpdated(int i, int j, Object obj)
			{
				viewRangeUpdate(i, j, obj);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #86  <Method void RecyclerView.viewRangeUpdate(int, int, Object)>
				mItemsChanged = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #90  <Field boolean RecyclerView.mItemsChanged>
			//   10   18:return          
			}

			public void offsetPositionsForAdd(int i, int j)
			{
				offsetPositionRecordsForInsert(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #95  <Method void RecyclerView.offsetPositionRecordsForInsert(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForMove(int i, int j)
			{
				offsetPositionRecordsForMove(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #102 <Method void RecyclerView.offsetPositionRecordsForMove(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForRemovingInvisible(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_1        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
				State state = mState;
			//   10   18:aload_0         
			//   11   19:getfield        #17  <Field RecyclerView this$0>
			//   12   22:getfield        #111 <Field RecyclerView$State RecyclerView.mState>
			//   13   25:astore_3        
				state.mDeletedInvisibleItemCountSincePreviousLayout = state.mDeletedInvisibleItemCountSincePreviousLayout + j;
			//   14   26:aload_3         
			//   15   27:aload_3         
			//   16   28:getfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   17   31:iload_2         
			//   18   32:iadd            
			//   19   33:putfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   20   36:return          
			}

			public void offsetPositionsForRemovingLaidOutOrNewView(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, false);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_0        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//   10   18:return          
			}

			public void onDispatchFirstPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			public void onDispatchSecondPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #1007 <Class AdapterHelper>
	//    2    4:dup             
	//    3    5:new             #20  <Class RecyclerView$6>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #2014 <Method void RecyclerView$6(RecyclerView)>
	//    7   13:invokespecial   #2017 <Method void AdapterHelper(AdapterHelper$Callback)>
	//    8   16:putfield        #1005 <Field AdapterHelper mAdapterHelper>
	//    9   19:return          
	}

	void initFastScroller(StateListDrawable statelistdrawable, Drawable drawable, StateListDrawable statelistdrawable1, Drawable drawable1)
	{
		if(statelistdrawable != null && drawable != null && statelistdrawable1 != null && drawable1 != null)
	//*   0    0:aload_1         
	//*   1    1:ifnull          68
	//*   2    4:aload_2         
	//*   3    5:ifnull          68
	//*   4    8:aload_3         
	//*   5    9:ifnull          68
	//*   6   12:aload           4
	//*   7   14:ifnonnull       20
	//*   8   17:goto            68
		{
			Resources resources = getContext().getResources();
	//    9   20:aload_0         
	//   10   21:invokevirtual   #558 <Method Context getContext()>
	//   11   24:invokevirtual   #2021 <Method Resources Context.getResources()>
	//   12   27:astore          5
			new FastScroller(this, statelistdrawable, drawable, statelistdrawable1, drawable1, resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_default_thickness), resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_minimum_range), resources.getDimensionPixelOffset(android.support.v7.recyclerview.R.dimen.fastscroll_margin));
	//   13   29:new             #2023 <Class FastScroller>
	//   14   32:dup             
	//   15   33:aload_0         
	//   16   34:aload_1         
	//   17   35:aload_2         
	//   18   36:aload_3         
	//   19   37:aload           4
	//   20   39:aload           5
	//   21   41:getstatic       #2028 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_default_thickness>
	//   22   44:invokevirtual   #2033 <Method int Resources.getDimensionPixelSize(int)>
	//   23   47:aload           5
	//   24   49:getstatic       #2036 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_minimum_range>
	//   25   52:invokevirtual   #2033 <Method int Resources.getDimensionPixelSize(int)>
	//   26   55:aload           5
	//   27   57:getstatic       #2039 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_margin>
	//   28   60:invokevirtual   #2042 <Method int Resources.getDimensionPixelOffset(int)>
	//   29   63:invokespecial   #2045 <Method void FastScroller(RecyclerView, StateListDrawable, Drawable, StateListDrawable, Drawable, int, int, int)>
	//   30   66:pop             
			return;
	//   31   67:return          
		} else
		{
			statelistdrawable = ((StateListDrawable) (new StringBuilder()));
	//   32   68:new             #812 <Class StringBuilder>
	//   33   71:dup             
	//   34   72:invokespecial   #813 <Method void StringBuilder()>
	//   35   75:astore_1        
			((StringBuilder) (statelistdrawable)).append("Trying to set fast scroller without both required drawables.");
	//   36   76:aload_1         
	//   37   77:ldc2            #2047 <String "Trying to set fast scroller without both required drawables.">
	//   38   80:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   39   83:pop             
			((StringBuilder) (statelistdrawable)).append(exceptionLabel());
	//   40   84:aload_1         
	//   41   85:aload_0         
	//   42   86:invokevirtual   #1242 <Method String exceptionLabel()>
	//   43   89:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   44   92:pop             
			throw new IllegalArgumentException(((StringBuilder) (statelistdrawable)).toString());
	//   45   93:new             #1287 <Class IllegalArgumentException>
	//   46   96:dup             
	//   47   97:aload_1         
	//   48   98:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   49  101:invokespecial   #1288 <Method void IllegalArgumentException(String)>
	//   50  104:athrow          
		}
	}

	void invalidateGlows()
	{
		mBottomGlow = null;
	//    0    0:aload_0         
	//    1    1:aconst_null     
	//    2    2:putfield        #1360 <Field EdgeEffect mBottomGlow>
		mTopGlow = null;
	//    3    5:aload_0         
	//    4    6:aconst_null     
	//    5    7:putfield        #1355 <Field EdgeEffect mTopGlow>
		mRightGlow = null;
	//    6   10:aload_0         
	//    7   11:aconst_null     
	//    8   12:putfield        #1350 <Field EdgeEffect mRightGlow>
		mLeftGlow = null;
	//    9   15:aload_0         
	//   10   16:aconst_null     
	//   11   17:putfield        #1337 <Field EdgeEffect mLeftGlow>
	//   12   20:return          
	}

	public void invalidateItemDecorations()
	{
		if(mItemDecorations.size() == 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #408 <Field ArrayList mItemDecorations>
	//*   2    4:invokevirtual   #1100 <Method int ArrayList.size()>
	//*   3    7:ifne            11
			return;
	//    4   10:return          
		if(mLayout != null)
	//*   5   11:aload_0         
	//*   6   12:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   7   15:ifnull          28
			mLayout.assertNotInLayoutOrScroll("Cannot invalidate item decorations during a scroll or layout");
	//    8   18:aload_0         
	//    9   19:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:ldc2            #2051 <String "Cannot invalidate item decorations during a scroll or layout">
	//   11   25:invokevirtual   #1498 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		markItemDecorInsetsDirty();
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1509 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   14   32:aload_0         
	//   15   33:invokevirtual   #1512 <Method void requestLayout()>
	//   16   36:return          
	}

	boolean isAccessibilityEnabled()
	{
		return mAccessibilityManager != null && mAccessibilityManager.isEnabled();
	//    0    0:aload_0         
	//    1    1:getfield        #568 <Field AccessibilityManager mAccessibilityManager>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #568 <Field AccessibilityManager mAccessibilityManager>
	//    5   11:invokevirtual   #2054 <Method boolean AccessibilityManager.isEnabled()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAnimating()
	{
		return mItemAnimator != null && mItemAnimator.isRunning();
	//    0    0:aload_0         
	//    1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #1779 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAttachedToWindow()
	{
		return mIsAttached;
	//    0    0:aload_0         
	//    1    1:getfield        #2058 <Field boolean mIsAttached>
	//    2    4:ireturn         
	}

	public boolean isComputingLayout()
	{
		return mLayoutOrScrollCounter > 0;
	//    0    0:aload_0         
	//    1    1:getfield        #418 <Field int mLayoutOrScrollCounter>
	//    2    4:ifle            9
	//    3    7:iconst_1        
	//    4    8:ireturn         
	//    5    9:iconst_0        
	//    6   10:ireturn         
	}

	public boolean isLayoutFrozen()
	{
		return mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1859 <Field boolean mLayoutFrozen>
	//    2    4:ireturn         
	}

	public boolean isNestedScrollingEnabled()
	{
		return getScrollingChildHelper().isNestedScrollingEnabled();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2062 <Method boolean NestedScrollingChildHelper.isNestedScrollingEnabled()>
	//    3    7:ireturn         
	}

	void jumpToPositionForSmoothScroller(int i)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//    4    8:aload_0         
	//    5    9:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    6   12:iload_1         
	//    7   13:invokevirtual   #2066 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//    8   16:aload_0         
	//    9   17:invokevirtual   #657 <Method boolean awakenScrollBars()>
	//   10   20:pop             
			return;
	//   11   21:return          
		}
	}

	void markItemDecorInsetsDirty()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          40
			((LayoutParams)mChildHelper.getUnfilteredChildAt(i).getLayoutParams()).mInsetsDirty = true;
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   14   26:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   15   29:iconst_1        
	//   16   30:putfield        #1410 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>

	//   17   33:iload_1         
	//   18   34:iconst_1        
	//   19   35:iadd            
	//   20   36:istore_1        
	//*  21   37:goto            10
		mRecycler.markItemDecorInsetsDirty();
	//   22   40:aload_0         
	//   23   41:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   24   44:invokevirtual   #2067 <Method void RecyclerView$Recycler.markItemDecorInsetsDirty()>
	//   25   47:return          
	}

	void markKnownViewsInvalid()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          51
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:ifnull          44
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifne            44
				viewholder.addFlags(6);
	//   20   38:aload_3         
	//   21   39:bipush          6
	//   22   41:invokevirtual   #2071 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   23   44:iload_1         
	//   24   45:iconst_1        
	//   25   46:iadd            
	//   26   47:istore_1        
	//*  27   48:goto            10
		markItemDecorInsetsDirty();
	//   28   51:aload_0         
	//   29   52:invokevirtual   #1509 <Method void markItemDecorInsetsDirty()>
		mRecycler.markKnownViewsInvalid();
	//   30   55:aload_0         
	//   31   56:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   32   59:invokevirtual   #2073 <Method void RecyclerView$Recycler.markKnownViewsInvalid()>
	//   33   62:return          
	}

	public void offsetChildrenHorizontal(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetLeftAndRight(i);
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2077 <Method void View.offsetLeftAndRight(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	public void offsetChildrenVertical(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetTopAndBottom(i);
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2081 <Method void View.offsetTopAndBottom(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	void offsetPositionRecordsForInsert(int i, int j)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore_3        
	//*   6   11:iload_3         
	//*   7   12:iload           4
	//*   8   14:icmpge          74
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   17:aload_0         
	//   10   18:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   21:iload_3         
	//   12   22:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   25:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   28:astore          5
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i)
	//*  15   30:aload           5
	//*  16   32:ifnull          67
	//*  17   35:aload           5
	//*  18   37:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   40:ifne            67
	//*  20   43:aload           5
	//*  21   45:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   48:iload_1         
	//*  23   49:icmplt          67
			{
				viewholder.offsetPosition(j, false);
	//   24   52:aload           5
	//   25   54:iload_2         
	//   26   55:iconst_0        
	//   27   56:invokevirtual   #2086 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   28   59:aload_0         
	//   29   60:getfield        #450 <Field RecyclerView$State mState>
	//   30   63:iconst_1        
	//   31   64:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   32   67:iload_3         
	//   33   68:iconst_1        
	//   34   69:iadd            
	//   35   70:istore_3        
	//*  36   71:goto            11
		mRecycler.offsetPositionRecordsForInsert(i, j);
	//   37   74:aload_0         
	//   38   75:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   39   78:iload_1         
	//   40   79:iload_2         
	//   41   80:invokevirtual   #2088 <Method void RecyclerView$Recycler.offsetPositionRecordsForInsert(int, int)>
		requestLayout();
	//   42   83:aload_0         
	//   43   84:invokevirtual   #1512 <Method void requestLayout()>
	//   44   87:return          
	}

	void offsetPositionRecordsForMove(int i, int j)
	{
		int j1 = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          7
		int k;
		int l;
		byte byte0;
		if(i < j)
	//*   4    9:iload_1         
	//*   5   10:iload_2         
	//*   6   11:icmpge          25
		{
			l = j;
	//    7   14:iload_2         
	//    8   15:istore          4
			byte0 = -1;
	//    9   17:iconst_m1       
	//   10   18:istore          5
			k = i;
	//   11   20:iload_1         
	//   12   21:istore_3        
		} else
	//*  13   22:goto            33
		{
			l = i;
	//   14   25:iload_1         
	//   15   26:istore          4
			k = j;
	//   16   28:iload_2         
	//   17   29:istore_3        
			byte0 = 1;
	//   18   30:iconst_1        
	//   19   31:istore          5
		}
		for(int i1 = 0; i1 < j1; i1++)
	//*  20   33:iconst_0        
	//*  21   34:istore          6
	//*  22   36:iload           6
	//*  23   38:iload           7
	//*  24   40:icmpge          130
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i1));
	//   25   43:aload_0         
	//   26   44:getfield        #682 <Field ChildHelper mChildHelper>
	//   27   47:iload           6
	//   28   49:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   29   52:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   30   55:astore          8
			if(viewholder == null || viewholder.mPosition < k || viewholder.mPosition > l)
	//*  31   57:aload           8
	//*  32   59:ifnull          121
	//*  33   62:aload           8
	//*  34   64:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  35   67:iload_3         
	//*  36   68:icmplt          121
	//*  37   71:aload           8
	//*  38   73:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  39   76:iload           4
	//*  40   78:icmple          84
				continue;
	//   41   81:goto            121
			if(viewholder.mPosition == i)
	//*  42   84:aload           8
	//*  43   86:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  44   89:iload_1         
	//*  45   90:icmpne          105
				viewholder.offsetPosition(j - i, false);
	//   46   93:aload           8
	//   47   95:iload_2         
	//   48   96:iload_1         
	//   49   97:isub            
	//   50   98:iconst_0        
	//   51   99:invokevirtual   #2086 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			else
	//*  52  102:goto            113
				viewholder.offsetPosition(((int) (byte0)), false);
	//   53  105:aload           8
	//   54  107:iload           5
	//   55  109:iconst_0        
	//   56  110:invokevirtual   #2086 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			mState.mStructureChanged = true;
	//   57  113:aload_0         
	//   58  114:getfield        #450 <Field RecyclerView$State mState>
	//   59  117:iconst_1        
	//   60  118:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
		}

	//   61  121:iload           6
	//   62  123:iconst_1        
	//   63  124:iadd            
	//   64  125:istore          6
	//*  65  127:goto            36
		mRecycler.offsetPositionRecordsForMove(i, j);
	//   66  130:aload_0         
	//   67  131:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   68  134:iload_1         
	//   69  135:iload_2         
	//   70  136:invokevirtual   #2091 <Method void RecyclerView$Recycler.offsetPositionRecordsForMove(int, int)>
		requestLayout();
	//   71  139:aload_0         
	//   72  140:invokevirtual   #1512 <Method void requestLayout()>
	//   73  143:return          
	}

	void offsetPositionRecordsForRemove(int i, int j, boolean flag)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   19:aload_0         
	//   10   20:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          6
			if(viewholder == null || viewholder.shouldIgnore())
				continue;
	//   15   33:aload           6
	//   16   35:ifnull          104
	//   17   38:aload           6
	//   18   40:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//   19   43:ifne            104
			if(viewholder.mPosition >= i + j)
	//*  20   46:aload           6
	//*  21   48:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   51:iload_1         
	//*  23   52:iload_2         
	//*  24   53:iadd            
	//*  25   54:icmplt          76
			{
				viewholder.offsetPosition(-j, flag);
	//   26   57:aload           6
	//   27   59:iload_2         
	//   28   60:ineg            
	//   29   61:iload_3         
	//   30   62:invokevirtual   #2086 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   31   65:aload_0         
	//   32   66:getfield        #450 <Field RecyclerView$State mState>
	//   33   69:iconst_1        
	//   34   70:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
				continue;
	//   35   73:goto            104
			}
			if(viewholder.mPosition >= i)
	//*  36   76:aload           6
	//*  37   78:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  38   81:iload_1         
	//*  39   82:icmplt          104
			{
				viewholder.flagRemovedAndOffsetPosition(i - 1, -j, flag);
	//   40   85:aload           6
	//   41   87:iload_1         
	//   42   88:iconst_1        
	//   43   89:isub            
	//   44   90:iload_2         
	//   45   91:ineg            
	//   46   92:iload_3         
	//   47   93:invokevirtual   #2096 <Method void RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int, int, boolean)>
				mState.mStructureChanged = true;
	//   48   96:aload_0         
	//   49   97:getfield        #450 <Field RecyclerView$State mState>
	//   50  100:iconst_1        
	//   51  101:putfield        #970 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   52  104:iload           4
	//   53  106:iconst_1        
	//   54  107:iadd            
	//   55  108:istore          4
	//*  56  110:goto            12
		mRecycler.offsetPositionRecordsForRemove(i, j, flag);
	//   57  113:aload_0         
	//   58  114:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:iload_3         
	//   62  120:invokevirtual   #2098 <Method void RecyclerView$Recycler.offsetPositionRecordsForRemove(int, int, boolean)>
		requestLayout();
	//   63  123:aload_0         
	//   64  124:invokevirtual   #1512 <Method void requestLayout()>
	//   65  127:return          
	}

	protected void onAttachedToWindow()
	{
label0:
		{
label1:
			{
				float f;
label2:
				{
					super.onAttachedToWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2101 <Method void ViewGroup.onAttachedToWindow()>
					mLayoutOrScrollCounter = 0;
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:putfield        #418 <Field int mLayoutOrScrollCounter>
					boolean flag = true;
	//    5    9:iconst_1        
	//    6   10:istore_2        
					mIsAttached = true;
	//    7   11:aload_0         
	//    8   12:iconst_1        
	//    9   13:putfield        #2058 <Field boolean mIsAttached>
					if(!mFirstLayoutComplete || isLayoutRequested())
	//*  10   16:aload_0         
	//*  11   17:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//*  12   20:ifeq            33
	//*  13   23:aload_0         
	//*  14   24:invokevirtual   #2104 <Method boolean isLayoutRequested()>
	//*  15   27:ifne            33
	//*  16   30:goto            35
						flag = false;
	//   17   33:iconst_0        
	//   18   34:istore_2        
					mFirstLayoutComplete = flag;
	//   19   35:aload_0         
	//   20   36:iload_2         
	//   21   37:putfield        #1330 <Field boolean mFirstLayoutComplete>
					if(mLayout != null)
	//*  22   40:aload_0         
	//*  23   41:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  24   44:ifnull          55
						mLayout.dispatchAttachedToWindow(this);
	//   25   47:aload_0         
	//   26   48:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   27   51:aload_0         
	//   28   52:invokevirtual   #2107 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
					mPostedAnimatorRunner = false;
	//   29   55:aload_0         
	//   30   56:iconst_0        
	//   31   57:putfield        #459 <Field boolean mPostedAnimatorRunner>
					if(!ALLOW_THREAD_GAP_WORK)
						break label0;
	//   32   60:getstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
	//   33   63:ifeq            164
					mGapWorker = (GapWorker)GapWorker.sGapWorker.get();
	//   34   66:aload_0         
	//   35   67:getstatic       #2113 <Field ThreadLocal GapWorker.sGapWorker>
	//   36   70:invokevirtual   #2116 <Method Object ThreadLocal.get()>
	//   37   73:checkcast       #2109 <Class GapWorker>
	//   38   76:putfield        #2118 <Field GapWorker mGapWorker>
					if(mGapWorker != null)
						break label1;
	//   39   79:aload_0         
	//   40   80:getfield        #2118 <Field GapWorker mGapWorker>
	//   41   83:ifnonnull       156
					mGapWorker = new GapWorker();
	//   42   86:aload_0         
	//   43   87:new             #2109 <Class GapWorker>
	//   44   90:dup             
	//   45   91:invokespecial   #2119 <Method void GapWorker()>
	//   46   94:putfield        #2118 <Field GapWorker mGapWorker>
					Display display = ViewCompat.getDisplay(((View) (this)));
	//   47   97:aload_0         
	//   48   98:invokestatic    #2123 <Method Display ViewCompat.getDisplay(View)>
	//   49  101:astore_3        
					if(!isInEditMode() && display != null)
	//*  50  102:aload_0         
	//*  51  103:invokevirtual   #764 <Method boolean isInEditMode()>
	//*  52  106:ifne            129
	//*  53  109:aload_3         
	//*  54  110:ifnull          129
					{
						f = display.getRefreshRate();
	//   55  113:aload_3         
	//   56  114:invokevirtual   #2128 <Method float Display.getRefreshRate()>
	//   57  117:fstore_1        
						if(f >= 30F)
	//*  58  118:fload_1         
	//*  59  119:ldc2            #2129 <Float 30F>
	//*  60  122:fcmpl           
	//*  61  123:iflt            129
							break label2;
	//   62  126:goto            133
					}
					f = 60F;
	//   63  129:ldc2            #2130 <Float 60F>
	//   64  132:fstore_1        
				}
				mGapWorker.mFrameIntervalNs = (long)(1E+09F / f);
	//   65  133:aload_0         
	//   66  134:getfield        #2118 <Field GapWorker mGapWorker>
	//   67  137:ldc2            #2131 <Float 1E+09F>
	//   68  140:fload_1         
	//   69  141:fdiv            
	//   70  142:f2l             
	//   71  143:putfield        #2134 <Field long GapWorker.mFrameIntervalNs>
				GapWorker.sGapWorker.set(((Object) (mGapWorker)));
	//   72  146:getstatic       #2113 <Field ThreadLocal GapWorker.sGapWorker>
	//   73  149:aload_0         
	//   74  150:getfield        #2118 <Field GapWorker mGapWorker>
	//   75  153:invokevirtual   #2137 <Method void ThreadLocal.set(Object)>
			}
			mGapWorker.add(this);
	//   76  156:aload_0         
	//   77  157:getfield        #2118 <Field GapWorker mGapWorker>
	//   78  160:aload_0         
	//   79  161:invokevirtual   #2139 <Method void GapWorker.add(RecyclerView)>
		}
	//   80  164:return          
	}

	public void onChildAttachedToWindow(View view)
	{
	//    0    0:return          
	}

	public void onChildDetachedFromWindow(View view)
	{
	//    0    0:return          
	}

	protected void onDetachedFromWindow()
	{
		super.onDetachedFromWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2142 <Method void ViewGroup.onDetachedFromWindow()>
		if(mItemAnimator != null)
	//*   2    4:aload_0         
	//*   3    5:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   4    8:ifnull          18
			mItemAnimator.endAnimations();
	//    5   11:aload_0         
	//    6   12:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    7   15:invokevirtual   #2145 <Method void RecyclerView$ItemAnimator.endAnimations()>
		stopScroll();
	//    8   18:aload_0         
	//    9   19:invokevirtual   #2148 <Method void stopScroll()>
		mIsAttached = false;
	//   10   22:aload_0         
	//   11   23:iconst_0        
	//   12   24:putfield        #2058 <Field boolean mIsAttached>
		if(mLayout != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  15   31:ifnull          46
			mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:aload_0         
	//   20   40:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   21   43:invokevirtual   #2152 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		mPendingAccessibilityImportanceChange.clear();
	//   22   46:aload_0         
	//   23   47:getfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//   24   50:invokeinterface #1570 <Method void List.clear()>
		removeCallbacks(mItemAnimatorRunner);
	//   25   55:aload_0         
	//   26   56:aload_0         
	//   27   57:getfield        #472 <Field Runnable mItemAnimatorRunner>
	//   28   60:invokevirtual   #2156 <Method boolean removeCallbacks(Runnable)>
	//   29   63:pop             
		mViewInfoStore.onDetach();
	//   30   64:aload_0         
	//   31   65:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   32   68:invokevirtual   #2159 <Method void ViewInfoStore.onDetach()>
		if(ALLOW_THREAD_GAP_WORK && mGapWorker != null)
	//*  33   71:getstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  34   74:ifeq            97
	//*  35   77:aload_0         
	//*  36   78:getfield        #2118 <Field GapWorker mGapWorker>
	//*  37   81:ifnull          97
		{
			mGapWorker.remove(this);
	//   38   84:aload_0         
	//   39   85:getfield        #2118 <Field GapWorker mGapWorker>
	//   40   88:aload_0         
	//   41   89:invokevirtual   #2162 <Method void GapWorker.remove(RecyclerView)>
			mGapWorker = null;
	//   42   92:aload_0         
	//   43   93:aconst_null     
	//   44   94:putfield        #2118 <Field GapWorker mGapWorker>
		}
	//   45   97:return          
	}

	public void onDraw(Canvas canvas)
	{
		super.onDraw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #2165 <Method void ViewGroup.onDraw(Canvas)>
		int j = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #408 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1100 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < j; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDraw(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #408 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #58  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #450 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #2167 <Method void RecyclerView$ItemDecoration.onDraw(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
	//   27   47:return          
	}

	void onEnterLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #418 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #418 <Field int mLayoutOrScrollCounter>
	//    6   10:return          
	}

	void onExitLayoutOrScroll()
	{
		onExitLayoutOrScroll(true);
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:invokevirtual   #2169 <Method void onExitLayoutOrScroll(boolean)>
	//    3    5:return          
	}

	void onExitLayoutOrScroll(boolean flag)
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter - 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #418 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:isub            
	//    5    7:putfield        #418 <Field int mLayoutOrScrollCounter>
		if(mLayoutOrScrollCounter < 1)
	//*   6   10:aload_0         
	//*   7   11:getfield        #418 <Field int mLayoutOrScrollCounter>
	//*   8   14:iconst_1        
	//*   9   15:icmpge          35
		{
			mLayoutOrScrollCounter = 0;
	//   10   18:aload_0         
	//   11   19:iconst_0        
	//   12   20:putfield        #418 <Field int mLayoutOrScrollCounter>
			if(flag)
	//*  13   23:iload_1         
	//*  14   24:ifeq            35
			{
				dispatchContentChangedIfNecessary();
	//   15   27:aload_0         
	//   16   28:invokespecial   #2171 <Method void dispatchContentChangedIfNecessary()>
				dispatchPendingImportantForAccessibilityChanges();
	//   17   31:aload_0         
	//   18   32:invokevirtual   #2173 <Method void dispatchPendingImportantForAccessibilityChanges()>
			}
		}
	//   19   35:return          
	}

	public boolean onGenericMotionEvent(MotionEvent motionevent)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(mLayoutFrozen)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1859 <Field boolean mLayoutFrozen>
	//*   7   13:ifeq            18
			return false;
	//    8   16:iconst_0        
	//    9   17:ireturn         
		if(motionevent.getAction() != 8)
			break MISSING_BLOCK_LABEL_177;
	//   10   18:aload_1         
	//   11   19:invokevirtual   #1091 <Method int MotionEvent.getAction()>
	//   12   22:bipush          8
	//   13   24:icmpne          177
		if((motionevent.getSource() & 2) == 0) goto _L2; else goto _L1
	//   14   27:aload_1         
	//   15   28:invokevirtual   #2177 <Method int MotionEvent.getSource()>
	//   16   31:iconst_2        
	//   17   32:iand            
	//   18   33:ifeq            92
_L1:
		float f;
		float f1;
		if(mLayout.canScrollVertically())
	//*  19   36:aload_0         
	//*  20   37:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  21   40:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  22   43:ifeq            57
			f = -motionevent.getAxisValue(9);
	//   23   46:aload_1         
	//   24   47:bipush          9
	//   25   49:invokevirtual   #2180 <Method float MotionEvent.getAxisValue(int)>
	//   26   52:fneg            
	//   27   53:fstore_2        
		else
	//*  28   54:goto            59
			f = 0.0F;
	//   29   57:fconst_0        
	//   30   58:fstore_2        
		f1 = f;
	//   31   59:fload_2         
	//   32   60:fstore_3        
		if(mLayout.canScrollHorizontally())
	//*  33   61:aload_0         
	//*  34   62:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  35   65:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  36   68:ifeq            81
		{
			f1 = motionevent.getAxisValue(10);
	//   37   71:aload_1         
	//   38   72:bipush          10
	//   39   74:invokevirtual   #2180 <Method float MotionEvent.getAxisValue(int)>
	//   40   77:fstore_3        
			break MISSING_BLOCK_LABEL_145;
	//   41   78:goto            145
		}
_L4:
		float f2 = 0.0F;
	//   42   81:fconst_0        
	//   43   82:fstore          4
		f = f1;
	//   44   84:fload_3         
	//   45   85:fstore_2        
		f1 = f2;
	//   46   86:fload           4
	//   47   88:fstore_3        
		break MISSING_BLOCK_LABEL_145;
	//   48   89:goto            145
_L2:
		if((motionevent.getSource() & 0x400000) == 0)
			break MISSING_BLOCK_LABEL_141;
	//   49   92:aload_1         
	//   50   93:invokevirtual   #2177 <Method int MotionEvent.getSource()>
	//   51   96:ldc2            #2181 <Int 0x400000>
	//   52   99:iand            
	//   53  100:ifeq            141
		f1 = motionevent.getAxisValue(26);
	//   54  103:aload_1         
	//   55  104:bipush          26
	//   56  106:invokevirtual   #2180 <Method float MotionEvent.getAxisValue(int)>
	//   57  109:fstore_3        
		if(!mLayout.canScrollVertically())
			break; /* Loop/switch isn't completed */
	//   58  110:aload_0         
	//   59  111:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   60  114:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   61  117:ifeq            126
		f1 = -f1;
	//   62  120:fload_3         
	//   63  121:fneg            
	//   64  122:fstore_3        
		if(true) goto _L4; else goto _L3
	//   65  123:goto            81
_L3:
		if(mLayout.canScrollHorizontally())
	//*  66  126:aload_0         
	//*  67  127:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  68  130:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  69  133:ifeq            141
		{
			f = 0.0F;
	//   70  136:fconst_0        
	//   71  137:fstore_2        
			break MISSING_BLOCK_LABEL_145;
	//   72  138:goto            145
		}
		f = 0.0F;
	//   73  141:fconst_0        
	//   74  142:fstore_2        
		f1 = f;
	//   75  143:fload_2         
	//   76  144:fstore_3        
		if(f != 0.0F || f1 != 0.0F)
	//*  77  145:fload_2         
	//*  78  146:fconst_0        
	//*  79  147:fcmpl           
	//*  80  148:ifne            157
	//*  81  151:fload_3         
	//*  82  152:fconst_0        
	//*  83  153:fcmpl           
	//*  84  154:ifeq            177
			scrollByInternal((int)(f1 * mScaledHorizontalScrollFactor), (int)(f * mScaledVerticalScrollFactor), motionevent);
	//   85  157:aload_0         
	//   86  158:fload_3         
	//   87  159:aload_0         
	//   88  160:getfield        #435 <Field float mScaledHorizontalScrollFactor>
	//   89  163:fmul            
	//   90  164:f2i             
	//   91  165:fload_2         
	//   92  166:aload_0         
	//   93  167:getfield        #437 <Field float mScaledVerticalScrollFactor>
	//   94  170:fmul            
	//   95  171:f2i             
	//   96  172:aload_1         
	//   97  173:invokevirtual   #2185 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   98  176:pop             
		return false;
	//   99  177:iconst_0        
	//  100  178:ireturn         
	}

	public boolean onInterceptTouchEvent(MotionEvent motionevent)
	{
		boolean flag2 = mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1859 <Field boolean mLayoutFrozen>
	//    2    4:istore          7
		boolean flag1 = false;
	//    3    6:iconst_0        
	//    4    7:istore          6
		if(flag2)
	//*   5    9:iload           7
	//*   6   11:ifeq            16
			return false;
	//    7   14:iconst_0        
	//    8   15:ireturn         
		if(dispatchOnItemTouchIntercept(motionevent))
	//*   9   16:aload_0         
	//*  10   17:aload_1         
	//*  11   18:invokespecial   #2187 <Method boolean dispatchOnItemTouchIntercept(MotionEvent)>
	//*  12   21:ifeq            30
		{
			cancelTouch();
	//   13   24:aload_0         
	//   14   25:invokespecial   #2189 <Method void cancelTouch()>
			return true;
	//   15   28:iconst_1        
	//   16   29:ireturn         
		}
		if(mLayout == null)
	//*  17   30:aload_0         
	//*  18   31:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  19   34:ifnonnull       39
			return false;
	//   20   37:iconst_0        
	//   21   38:ireturn         
		flag2 = mLayout.canScrollHorizontally();
	//   22   39:aload_0         
	//   23   40:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   43:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   25   46:istore          7
		boolean flag3 = mLayout.canScrollVertically();
	//   26   48:aload_0         
	//   27   49:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   28   52:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   29   55:istore          8
		if(mVelocityTracker == null)
	//*  30   57:aload_0         
	//*  31   58:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//*  32   61:ifnonnull       71
			mVelocityTracker = VelocityTracker.obtain();
	//   33   64:aload_0         
	//   34   65:invokestatic    #2192 <Method VelocityTracker VelocityTracker.obtain()>
	//   35   68:putfield        #1419 <Field VelocityTracker mVelocityTracker>
		mVelocityTracker.addMovement(motionevent);
	//   36   71:aload_0         
	//   37   72:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//   38   75:aload_1         
	//   39   76:invokevirtual   #2195 <Method void VelocityTracker.addMovement(MotionEvent)>
		int l = motionevent.getActionMasked();
	//   40   79:aload_1         
	//   41   80:invokevirtual   #2198 <Method int MotionEvent.getActionMasked()>
	//   42   83:istore_3        
		int i = motionevent.getActionIndex();
	//   43   84:aload_1         
	//   44   85:invokevirtual   #1293 <Method int MotionEvent.getActionIndex()>
	//   45   88:istore_2        
		switch(l)
	//*  46   89:iload_3         
		{
	//*  47   90:tableswitch     0 6: default 132
	//	               0 393
	//	               1 378
	//	               2 204
	//	               3 197
	//	               4 132
	//	               5 143
	//	               6 135
	//*  48  132:goto            523
		case 6: // '\006'
			onPointerUp(motionevent);
	//   49  135:aload_0         
	//   50  136:aload_1         
	//   51  137:invokespecial   #2200 <Method void onPointerUp(MotionEvent)>
			break;

	//*  52  140:goto            523
		case 5: // '\005'
			mScrollPointerId = motionevent.getPointerId(i);
	//   53  143:aload_0         
	//   54  144:aload_1         
	//   55  145:iload_2         
	//   56  146:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//   57  149:putfield        #432 <Field int mScrollPointerId>
			int i1 = (int)(motionevent.getX(i) + 0.5F);
	//   58  152:aload_1         
	//   59  153:iload_2         
	//   60  154:invokevirtual   #1301 <Method float MotionEvent.getX(int)>
	//   61  157:ldc2            #1302 <Float 0.5F>
	//   62  160:fadd            
	//   63  161:f2i             
	//   64  162:istore_3        
			mLastTouchX = i1;
	//   65  163:aload_0         
	//   66  164:iload_3         
	//   67  165:putfield        #1304 <Field int mLastTouchX>
			mInitialTouchX = i1;
	//   68  168:aload_0         
	//   69  169:iload_3         
	//   70  170:putfield        #1306 <Field int mInitialTouchX>
			i = (int)(motionevent.getY(i) + 0.5F);
	//   71  173:aload_1         
	//   72  174:iload_2         
	//   73  175:invokevirtual   #1309 <Method float MotionEvent.getY(int)>
	//   74  178:ldc2            #1302 <Float 0.5F>
	//   75  181:fadd            
	//   76  182:f2i             
	//   77  183:istore_2        
			mLastTouchY = i;
	//   78  184:aload_0         
	//   79  185:iload_2         
	//   80  186:putfield        #1311 <Field int mLastTouchY>
			mInitialTouchY = i;
	//   81  189:aload_0         
	//   82  190:iload_2         
	//   83  191:putfield        #1313 <Field int mInitialTouchY>
			break;

	//*  84  194:goto            523
		case 3: // '\003'
			cancelTouch();
	//   85  197:aload_0         
	//   86  198:invokespecial   #2189 <Method void cancelTouch()>
			break;

	//*  87  201:goto            523
		case 2: // '\002'
			int j1 = motionevent.findPointerIndex(mScrollPointerId);
	//   88  204:aload_1         
	//   89  205:aload_0         
	//   90  206:getfield        #432 <Field int mScrollPointerId>
	//   91  209:invokevirtual   #2203 <Method int MotionEvent.findPointerIndex(int)>
	//   92  212:istore_3        
			if(j1 < 0)
	//*  93  213:iload_3         
	//*  94  214:ifge            262
			{
				motionevent = ((MotionEvent) (new StringBuilder()));
	//   95  217:new             #812 <Class StringBuilder>
	//   96  220:dup             
	//   97  221:invokespecial   #813 <Method void StringBuilder()>
	//   98  224:astore_1        
				((StringBuilder) (motionevent)).append("Error processing scroll; pointer index for id ");
	//   99  225:aload_1         
	//  100  226:ldc2            #2205 <String "Error processing scroll; pointer index for id ">
	//  101  229:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  102  232:pop             
				((StringBuilder) (motionevent)).append(mScrollPointerId);
	//  103  233:aload_1         
	//  104  234:aload_0         
	//  105  235:getfield        #432 <Field int mScrollPointerId>
	//  106  238:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//  107  241:pop             
				((StringBuilder) (motionevent)).append(" not found. Did any MotionEvents get skipped?");
	//  108  242:aload_1         
	//  109  243:ldc2            #2207 <String " not found. Did any MotionEvents get skipped?">
	//  110  246:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  111  249:pop             
				Log.e("RecyclerView", ((StringBuilder) (motionevent)).toString());
	//  112  250:ldc1            #178 <String "RecyclerView">
	//  113  252:aload_1         
	//  114  253:invokevirtual   #827 <Method String StringBuilder.toString()>
	//  115  256:invokestatic    #1257 <Method int Log.e(String, String)>
	//  116  259:pop             
				return false;
	//  117  260:iconst_0        
	//  118  261:ireturn         
			}
			int j = (int)(motionevent.getX(j1) + 0.5F);
	//  119  262:aload_1         
	//  120  263:iload_3         
	//  121  264:invokevirtual   #1301 <Method float MotionEvent.getX(int)>
	//  122  267:ldc2            #1302 <Float 0.5F>
	//  123  270:fadd            
	//  124  271:f2i             
	//  125  272:istore_2        
			int i2 = (int)(motionevent.getY(j1) + 0.5F);
	//  126  273:aload_1         
	//  127  274:iload_3         
	//  128  275:invokevirtual   #1309 <Method float MotionEvent.getY(int)>
	//  129  278:ldc2            #1302 <Float 0.5F>
	//  130  281:fadd            
	//  131  282:f2i             
	//  132  283:istore          4
			if(mScrollState != 1)
	//* 133  285:aload_0         
	//* 134  286:getfield        #430 <Field int mScrollState>
	//* 135  289:iconst_1        
	//* 136  290:icmpeq          523
			{
				int k1 = mInitialTouchX;
	//  137  293:aload_0         
	//  138  294:getfield        #1306 <Field int mInitialTouchX>
	//  139  297:istore_3        
				int j2 = mInitialTouchY;
	//  140  298:aload_0         
	//  141  299:getfield        #1313 <Field int mInitialTouchY>
	//  142  302:istore          5
				if(flag2 && Math.abs(j - k1) > mTouchSlop)
	//* 143  304:iload           7
	//* 144  306:ifeq            332
	//* 145  309:iload_2         
	//* 146  310:iload_3         
	//* 147  311:isub            
	//* 148  312:invokestatic    #1862 <Method int Math.abs(int)>
	//* 149  315:aload_0         
	//* 150  316:getfield        #509 <Field int mTouchSlop>
	//* 151  319:icmple          332
				{
					mLastTouchX = j;
	//  152  322:aload_0         
	//  153  323:iload_2         
	//  154  324:putfield        #1304 <Field int mLastTouchX>
					j = 1;
	//  155  327:iconst_1        
	//  156  328:istore_2        
				} else
	//* 157  329:goto            334
				{
					j = 0;
	//  158  332:iconst_0        
	//  159  333:istore_2        
				}
				boolean flag = ((boolean) (j));
	//  160  334:iload_2         
	//  161  335:istore_3        
				if(flag3)
	//* 162  336:iload           8
	//* 163  338:ifeq            366
				{
					flag = ((boolean) (j));
	//  164  341:iload_2         
	//  165  342:istore_3        
					if(Math.abs(i2 - j2) > mTouchSlop)
	//* 166  343:iload           4
	//* 167  345:iload           5
	//* 168  347:isub            
	//* 169  348:invokestatic    #1862 <Method int Math.abs(int)>
	//* 170  351:aload_0         
	//* 171  352:getfield        #509 <Field int mTouchSlop>
	//* 172  355:icmple          366
					{
						mLastTouchY = i2;
	//  173  358:aload_0         
	//  174  359:iload           4
	//  175  361:putfield        #1311 <Field int mLastTouchY>
						flag = true;
	//  176  364:iconst_1        
	//  177  365:istore_3        
					}
				}
				if(flag)
	//* 178  366:iload_3         
	//* 179  367:ifeq            523
					setScrollState(1);
	//  180  370:aload_0         
	//  181  371:iconst_1        
	//  182  372:invokevirtual   #726 <Method void setScrollState(int)>
			}
			break;

	//* 183  375:goto            523
		case 1: // '\001'
			mVelocityTracker.clear();
	//  184  378:aload_0         
	//  185  379:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  186  382:invokevirtual   #1422 <Method void VelocityTracker.clear()>
			stopNestedScroll(0);
	//  187  385:aload_0         
	//  188  386:iconst_0        
	//  189  387:invokevirtual   #1425 <Method void stopNestedScroll(int)>
			break;

	//* 190  390:goto            523
		case 0: // '\0'
			if(mIgnoreMotionEventTillDown)
	//* 191  393:aload_0         
	//* 192  394:getfield        #2209 <Field boolean mIgnoreMotionEventTillDown>
	//* 193  397:ifeq            405
				mIgnoreMotionEventTillDown = false;
	//  194  400:aload_0         
	//  195  401:iconst_0        
	//  196  402:putfield        #2209 <Field boolean mIgnoreMotionEventTillDown>
			mScrollPointerId = motionevent.getPointerId(0);
	//  197  405:aload_0         
	//  198  406:aload_1         
	//  199  407:iconst_0        
	//  200  408:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//  201  411:putfield        #432 <Field int mScrollPointerId>
			int k = (int)(motionevent.getX() + 0.5F);
	//  202  414:aload_1         
	//  203  415:invokevirtual   #2211 <Method float MotionEvent.getX()>
	//  204  418:ldc2            #1302 <Float 0.5F>
	//  205  421:fadd            
	//  206  422:f2i             
	//  207  423:istore_2        
			mLastTouchX = k;
	//  208  424:aload_0         
	//  209  425:iload_2         
	//  210  426:putfield        #1304 <Field int mLastTouchX>
			mInitialTouchX = k;
	//  211  429:aload_0         
	//  212  430:iload_2         
	//  213  431:putfield        #1306 <Field int mInitialTouchX>
			k = (int)(motionevent.getY() + 0.5F);
	//  214  434:aload_1         
	//  215  435:invokevirtual   #2213 <Method float MotionEvent.getY()>
	//  216  438:ldc2            #1302 <Float 0.5F>
	//  217  441:fadd            
	//  218  442:f2i             
	//  219  443:istore_2        
			mLastTouchY = k;
	//  220  444:aload_0         
	//  221  445:iload_2         
	//  222  446:putfield        #1311 <Field int mLastTouchY>
			mInitialTouchY = k;
	//  223  449:aload_0         
	//  224  450:iload_2         
	//  225  451:putfield        #1313 <Field int mInitialTouchY>
			if(mScrollState == 2)
	//* 226  454:aload_0         
	//* 227  455:getfield        #430 <Field int mScrollState>
	//* 228  458:iconst_2        
	//* 229  459:icmpne          477
			{
				getParent().requestDisallowInterceptTouchEvent(true);
	//  230  462:aload_0         
	//  231  463:invokevirtual   #2214 <Method ViewParent getParent()>
	//  232  466:iconst_1        
	//  233  467:invokeinterface #2219 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
				setScrollState(1);
	//  234  472:aload_0         
	//  235  473:iconst_1        
	//  236  474:invokevirtual   #726 <Method void setScrollState(int)>
			}
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  237  477:aload_0         
	//  238  478:getfield        #467 <Field int[] mNestedOffsets>
	//  239  481:astore_1        
			mNestedOffsets[1] = 0;
	//  240  482:aload_0         
	//  241  483:getfield        #467 <Field int[] mNestedOffsets>
	//  242  486:iconst_1        
	//  243  487:iconst_0        
	//  244  488:iastore         
			motionevent[0] = 0;
	//  245  489:aload_1         
	//  246  490:iconst_0        
	//  247  491:iconst_0        
	//  248  492:iastore         
			if(flag2)
	//* 249  493:iload           7
	//* 250  495:ifeq            503
				k = 1;
	//  251  498:iconst_1        
	//  252  499:istore_2        
			else
	//* 253  500:goto            505
				k = 0;
	//  254  503:iconst_0        
	//  255  504:istore_2        
			int l1 = k;
	//  256  505:iload_2         
	//  257  506:istore_3        
			if(flag3)
	//* 258  507:iload           8
	//* 259  509:ifeq            516
				l1 = k | 2;
	//  260  512:iload_2         
	//  261  513:iconst_2        
	//  262  514:ior             
	//  263  515:istore_3        
			startNestedScroll(l1, 0);
	//  264  516:aload_0         
	//  265  517:iload_3         
	//  266  518:iconst_0        
	//  267  519:invokevirtual   #1872 <Method boolean startNestedScroll(int, int)>
	//  268  522:pop             
			break;
		}
		if(mScrollState == 1)
	//* 269  523:aload_0         
	//* 270  524:getfield        #430 <Field int mScrollState>
	//* 271  527:iconst_1        
	//* 272  528:icmpne          534
			flag1 = true;
	//  273  531:iconst_1        
	//  274  532:istore          6
		return flag1;
	//  275  534:iload           6
	//  276  536:ireturn         
	}

	protected void onLayout(boolean flag, int i, int j, int k, int l)
	{
		TraceCompat.beginSection("RV OnLayout");
	//    0    0:ldc1            #198 <String "RV OnLayout">
	//    1    2:invokestatic    #1609 <Method void TraceCompat.beginSection(String)>
		dispatchLayout();
	//    2    5:aload_0         
	//    3    6:invokevirtual   #1616 <Method void dispatchLayout()>
		TraceCompat.endSection();
	//    4    9:invokestatic    #1622 <Method void TraceCompat.endSection()>
		mFirstLayoutComplete = true;
	//    5   12:aload_0         
	//    6   13:iconst_1        
	//    7   14:putfield        #1330 <Field boolean mFirstLayoutComplete>
	//    8   17:return          
	}

	protected void onMeasure(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       14
		{
			defaultOnMeasure(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokevirtual   #2224 <Method void defaultOnMeasure(int, int)>
			return;
	//    7   13:return          
		}
		boolean flag2 = mLayout.isAutoMeasureEnabled();
	//    8   14:aload_0         
	//    9   15:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   10   18:invokevirtual   #2227 <Method boolean RecyclerView$LayoutManager.isAutoMeasureEnabled()>
	//   11   21:istore          7
		boolean flag1 = false;
	//   12   23:iconst_0        
	//   13   24:istore          4
		if(flag2)
	//*  14   26:iload           7
	//*  15   28:ifeq            201
		{
			int k = android.view.View.MeasureSpec.getMode(i);
	//   16   31:iload_1         
	//   17   32:invokestatic    #2232 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   18   35:istore          5
			int l = android.view.View.MeasureSpec.getMode(j);
	//   19   37:iload_2         
	//   20   38:invokestatic    #2232 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   21   41:istore          6
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   22   43:aload_0         
	//   23   44:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   24   47:aload_0         
	//   25   48:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   26   51:aload_0         
	//   27   52:getfield        #450 <Field RecyclerView$State mState>
	//   28   55:iload_1         
	//   29   56:iload_2         
	//   30   57:invokevirtual   #2235 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			boolean flag = flag1;
	//   31   60:iload           4
	//   32   62:istore_3        
			if(k == 0x40000000)
	//*  33   63:iload           5
	//*  34   65:ldc2            #2236 <Int 0x40000000>
	//*  35   68:icmpne          84
			{
				flag = flag1;
	//   36   71:iload           4
	//   37   73:istore_3        
				if(l == 0x40000000)
	//*  38   74:iload           6
	//*  39   76:ldc2            #2236 <Int 0x40000000>
	//*  40   79:icmpne          84
					flag = true;
	//   41   82:iconst_1        
	//   42   83:istore_3        
			}
			if(!flag)
	//*  43   84:iload_3         
	//*  44   85:ifne            200
			{
				if(mAdapter == null)
	//*  45   88:aload_0         
	//*  46   89:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  47   92:ifnonnull       96
					return;
	//   48   95:return          
				if(mState.mLayoutStep == 1)
	//*  49   96:aload_0         
	//*  50   97:getfield        #450 <Field RecyclerView$State mState>
	//*  51  100:getfield        #1002 <Field int RecyclerView$State.mLayoutStep>
	//*  52  103:iconst_1        
	//*  53  104:icmpne          111
					dispatchLayoutStep1();
	//   54  107:aload_0         
	//   55  108:invokespecial   #1673 <Method void dispatchLayoutStep1()>
				mLayout.setMeasureSpecs(i, j);
	//   56  111:aload_0         
	//   57  112:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   58  115:iload_1         
	//   59  116:iload_2         
	//   60  117:invokevirtual   #2239 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
				mState.mIsMeasuring = true;
	//   61  120:aload_0         
	//   62  121:getfield        #450 <Field RecyclerView$State mState>
	//   63  124:iconst_1        
	//   64  125:putfield        #880 <Field boolean RecyclerView$State.mIsMeasuring>
				dispatchLayoutStep2();
	//   65  128:aload_0         
	//   66  129:invokespecial   #1678 <Method void dispatchLayoutStep2()>
				mLayout.setMeasuredDimensionFromChildren(i, j);
	//   67  132:aload_0         
	//   68  133:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   69  136:iload_1         
	//   70  137:iload_2         
	//   71  138:invokevirtual   #2242 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
				if(mLayout.shouldMeasureTwice())
	//*  72  141:aload_0         
	//*  73  142:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  74  145:invokevirtual   #2245 <Method boolean RecyclerView$LayoutManager.shouldMeasureTwice()>
	//*  75  148:ifeq            387
				{
					mLayout.setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000));
	//   76  151:aload_0         
	//   77  152:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   78  155:aload_0         
	//   79  156:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//   80  159:ldc2            #2236 <Int 0x40000000>
	//   81  162:invokestatic    #2248 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   82  165:aload_0         
	//   83  166:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//   84  169:ldc2            #2236 <Int 0x40000000>
	//   85  172:invokestatic    #2248 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   86  175:invokevirtual   #2239 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
					mState.mIsMeasuring = true;
	//   87  178:aload_0         
	//   88  179:getfield        #450 <Field RecyclerView$State mState>
	//   89  182:iconst_1        
	//   90  183:putfield        #880 <Field boolean RecyclerView$State.mIsMeasuring>
					dispatchLayoutStep2();
	//   91  186:aload_0         
	//   92  187:invokespecial   #1678 <Method void dispatchLayoutStep2()>
					mLayout.setMeasuredDimensionFromChildren(i, j);
	//   93  190:aload_0         
	//   94  191:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   95  194:iload_1         
	//   96  195:iload_2         
	//   97  196:invokevirtual   #2242 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
					return;
	//   98  199:return          
				}
			} else
			{
				return;
	//   99  200:return          
			}
		} else
		{
			if(mHasFixedSize)
	//* 100  201:aload_0         
	//* 101  202:getfield        #2007 <Field boolean mHasFixedSize>
	//* 102  205:ifeq            226
			{
				mLayout.onMeasure(mRecycler, mState, i, j);
	//  103  208:aload_0         
	//  104  209:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  105  212:aload_0         
	//  106  213:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  107  216:aload_0         
	//  108  217:getfield        #450 <Field RecyclerView$State mState>
	//  109  220:iload_1         
	//  110  221:iload_2         
	//  111  222:invokevirtual   #2235 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
				return;
	//  112  225:return          
			}
			if(mAdapterUpdateDuringMeasure)
	//* 113  226:aload_0         
	//* 114  227:getfield        #2250 <Field boolean mAdapterUpdateDuringMeasure>
	//* 115  230:ifeq            298
			{
				startInterceptRequestLayout();
	//  116  233:aload_0         
	//  117  234:invokevirtual   #883 <Method void startInterceptRequestLayout()>
				onEnterLayoutOrScroll();
	//  118  237:aload_0         
	//  119  238:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
				processAdapterUpdatesAndSetAnimationFlags();
	//  120  241:aload_0         
	//  121  242:invokespecial   #892 <Method void processAdapterUpdatesAndSetAnimationFlags()>
				onExitLayoutOrScroll();
	//  122  245:aload_0         
	//  123  246:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
				if(mState.mRunPredictiveAnimations)
	//* 124  249:aload_0         
	//* 125  250:getfield        #450 <Field RecyclerView$State mState>
	//* 126  253:getfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 127  256:ifeq            270
				{
					mState.mInPreLayout = true;
	//  128  259:aload_0         
	//  129  260:getfield        #450 <Field RecyclerView$State mState>
	//  130  263:iconst_1        
	//  131  264:putfield        #907 <Field boolean RecyclerView$State.mInPreLayout>
				} else
	//* 132  267:goto            285
				{
					mAdapterHelper.consumeUpdatesInOnePass();
	//  133  270:aload_0         
	//  134  271:getfield        #1005 <Field AdapterHelper mAdapterHelper>
	//  135  274:invokevirtual   #1010 <Method void AdapterHelper.consumeUpdatesInOnePass()>
					mState.mInPreLayout = false;
	//  136  277:aload_0         
	//  137  278:getfield        #450 <Field RecyclerView$State mState>
	//  138  281:iconst_0        
	//  139  282:putfield        #907 <Field boolean RecyclerView$State.mInPreLayout>
				}
				mAdapterUpdateDuringMeasure = false;
	//  140  285:aload_0         
	//  141  286:iconst_0        
	//  142  287:putfield        #2250 <Field boolean mAdapterUpdateDuringMeasure>
				stopInterceptRequestLayout(false);
	//  143  290:aload_0         
	//  144  291:iconst_0        
	//  145  292:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
			} else
	//* 146  295:goto            321
			if(mState.mRunPredictiveAnimations)
	//* 147  298:aload_0         
	//* 148  299:getfield        #450 <Field RecyclerView$State mState>
	//* 149  302:getfield        #904 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 150  305:ifeq            321
			{
				setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());
	//  151  308:aload_0         
	//  152  309:aload_0         
	//  153  310:invokevirtual   #1790 <Method int getMeasuredWidth()>
	//  154  313:aload_0         
	//  155  314:invokevirtual   #1793 <Method int getMeasuredHeight()>
	//  156  317:invokevirtual   #649 <Method void setMeasuredDimension(int, int)>
				return;
	//  157  320:return          
			}
			if(mAdapter != null)
	//* 158  321:aload_0         
	//* 159  322:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//* 160  325:ifnull          345
				mState.mItemCount = mAdapter.getItemCount();
	//  161  328:aload_0         
	//  162  329:getfield        #450 <Field RecyclerView$State mState>
	//  163  332:aload_0         
	//  164  333:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//  165  336:invokevirtual   #912 <Method int RecyclerView$Adapter.getItemCount()>
	//  166  339:putfield        #915 <Field int RecyclerView$State.mItemCount>
			else
	//* 167  342:goto            353
				mState.mItemCount = 0;
	//  168  345:aload_0         
	//  169  346:getfield        #450 <Field RecyclerView$State mState>
	//  170  349:iconst_0        
	//  171  350:putfield        #915 <Field int RecyclerView$State.mItemCount>
			startInterceptRequestLayout();
	//  172  353:aload_0         
	//  173  354:invokevirtual   #883 <Method void startInterceptRequestLayout()>
			mLayout.onMeasure(mRecycler, mState, i, j);
	//  174  357:aload_0         
	//  175  358:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//  176  361:aload_0         
	//  177  362:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  178  365:aload_0         
	//  179  366:getfield        #450 <Field RecyclerView$State mState>
	//  180  369:iload_1         
	//  181  370:iload_2         
	//  182  371:invokevirtual   #2235 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			stopInterceptRequestLayout(false);
	//  183  374:aload_0         
	//  184  375:iconst_0        
	//  185  376:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
			mState.mInPreLayout = false;
	//  186  379:aload_0         
	//  187  380:getfield        #450 <Field RecyclerView$State mState>
	//  188  383:iconst_0        
	//  189  384:putfield        #907 <Field boolean RecyclerView$State.mInPreLayout>
		}
	//  190  387:return          
	}

	protected boolean onRequestFocusInDescendants(int i, Rect rect)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		else
			return super.onRequestFocusInDescendants(i, rect);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:aload_2         
	//    8   12:invokespecial   #2254 <Method boolean ViewGroup.onRequestFocusInDescendants(int, Rect)>
	//    9   15:ireturn         
	}

	protected void onRestoreInstanceState(Parcelable parcelable)
	{
		if(!(parcelable instanceof SavedState))
	//*   0    0:aload_1         
	//*   1    1:instanceof      #107 <Class RecyclerView$SavedState>
	//*   2    4:ifne            13
		{
			super.onRestoreInstanceState(parcelable);
	//    3    7:aload_0         
	//    4    8:aload_1         
	//    5    9:invokespecial   #2258 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
			return;
	//    6   12:return          
		}
		mPendingSavedState = (SavedState)parcelable;
	//    7   13:aload_0         
	//    8   14:aload_1         
	//    9   15:checkcast       #107 <Class RecyclerView$SavedState>
	//   10   18:putfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
		super.onRestoreInstanceState(mPendingSavedState.getSuperState());
	//   11   21:aload_0         
	//   12   22:aload_0         
	//   13   23:getfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
	//   14   26:invokevirtual   #2262 <Method Parcelable RecyclerView$SavedState.getSuperState()>
	//   15   29:invokespecial   #2258 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
		if(mLayout != null && mPendingSavedState.mLayoutState != null)
	//*  16   32:aload_0         
	//*  17   33:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  18   36:ifnull          63
	//*  19   39:aload_0         
	//*  20   40:getfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
	//*  21   43:getfield        #2266 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//*  22   46:ifnull          63
			mLayout.onRestoreInstanceState(mPendingSavedState.mLayoutState);
	//   23   49:aload_0         
	//   24   50:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   25   53:aload_0         
	//   26   54:getfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
	//   27   57:getfield        #2266 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//   28   60:invokevirtual   #2267 <Method void RecyclerView$LayoutManager.onRestoreInstanceState(Parcelable)>
	//   29   63:return          
	}

	protected Parcelable onSaveInstanceState()
	{
		SavedState savedstate = new SavedState(super.onSaveInstanceState());
	//    0    0:new             #107 <Class RecyclerView$SavedState>
	//    1    3:dup             
	//    2    4:aload_0         
	//    3    5:invokespecial   #2270 <Method Parcelable ViewGroup.onSaveInstanceState()>
	//    4    8:invokespecial   #2272 <Method void RecyclerView$SavedState(Parcelable)>
	//    5   11:astore_1        
		if(mPendingSavedState != null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
	//*   8   16:ifnull          29
		{
			savedstate.copyFrom(mPendingSavedState);
	//    9   19:aload_1         
	//   10   20:aload_0         
	//   11   21:getfield        #1015 <Field RecyclerView$SavedState mPendingSavedState>
	//   12   24:invokevirtual   #2276 <Method void RecyclerView$SavedState.copyFrom(RecyclerView$SavedState)>
			return ((Parcelable) (savedstate));
	//   13   27:aload_1         
	//   14   28:areturn         
		}
		if(mLayout != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  17   33:ifnull          49
		{
			savedstate.mLayoutState = mLayout.onSaveInstanceState();
	//   18   36:aload_1         
	//   19   37:aload_0         
	//   20   38:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   21   41:invokevirtual   #2277 <Method Parcelable RecyclerView$LayoutManager.onSaveInstanceState()>
	//   22   44:putfield        #2266 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   23   47:aload_1         
	//   24   48:areturn         
		} else
		{
			savedstate.mLayoutState = null;
	//   25   49:aload_1         
	//   26   50:aconst_null     
	//   27   51:putfield        #2266 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   28   54:aload_1         
	//   29   55:areturn         
		}
	}

	public void onScrollStateChanged(int i)
	{
	//    0    0:return          
	}

	public void onScrolled(int i, int j)
	{
	//    0    0:return          
	}

	protected void onSizeChanged(int i, int j, int k, int l)
	{
		super.onSizeChanged(i, j, k, l);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:iload_3         
	//    4    4:iload           4
	//    5    6:invokespecial   #2280 <Method void ViewGroup.onSizeChanged(int, int, int, int)>
		if(i != k || j != l)
	//*   6    9:iload_1         
	//*   7   10:iload_3         
	//*   8   11:icmpne          20
	//*   9   14:iload_2         
	//*  10   15:iload           4
	//*  11   17:icmpeq          24
			invalidateGlows();
	//   12   20:aload_0         
	//   13   21:invokevirtual   #2282 <Method void invalidateGlows()>
	//   14   24:return          
	}

	public boolean onTouchEvent(MotionEvent motionevent)
	{
		boolean flag1 = mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1859 <Field boolean mLayoutFrozen>
	//    2    4:istore          13
		boolean flag = false;
	//    3    6:iconst_0        
	//    4    7:istore          10
		if(!flag1)
	//*   5    9:iload           13
	//*   6   11:ifne            1006
		{
			if(mIgnoreMotionEventTillDown)
	//*   7   14:aload_0         
	//*   8   15:getfield        #2209 <Field boolean mIgnoreMotionEventTillDown>
	//*   9   18:ifeq            23
				return false;
	//   10   21:iconst_0        
	//   11   22:ireturn         
			if(dispatchOnItemTouch(motionevent))
	//*  12   23:aload_0         
	//*  13   24:aload_1         
	//*  14   25:invokespecial   #2284 <Method boolean dispatchOnItemTouch(MotionEvent)>
	//*  15   28:ifeq            37
			{
				cancelTouch();
	//   16   31:aload_0         
	//   17   32:invokespecial   #2189 <Method void cancelTouch()>
				return true;
	//   18   35:iconst_1        
	//   19   36:ireturn         
			}
			if(mLayout == null)
	//*  20   37:aload_0         
	//*  21   38:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  22   41:ifnonnull       46
				return false;
	//   23   44:iconst_0        
	//   24   45:ireturn         
			boolean flag2 = mLayout.canScrollHorizontally();
	//   25   46:aload_0         
	//   26   47:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   27   50:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   28   53:istore          13
			boolean flag3 = mLayout.canScrollVertically();
	//   29   55:aload_0         
	//   30   56:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   31   59:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   32   62:istore          14
			if(mVelocityTracker == null)
	//*  33   64:aload_0         
	//*  34   65:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//*  35   68:ifnonnull       78
				mVelocityTracker = VelocityTracker.obtain();
	//   36   71:aload_0         
	//   37   72:invokestatic    #2192 <Method VelocityTracker VelocityTracker.obtain()>
	//   38   75:putfield        #1419 <Field VelocityTracker mVelocityTracker>
			MotionEvent motionevent1 = MotionEvent.obtain(motionevent);
	//   39   78:aload_1         
	//   40   79:invokestatic    #2287 <Method MotionEvent MotionEvent.obtain(MotionEvent)>
	//   41   82:astore          15
			int j = motionevent.getActionMasked();
	//   42   84:aload_1         
	//   43   85:invokevirtual   #2198 <Method int MotionEvent.getActionMasked()>
	//   44   88:istore          5
			int i = motionevent.getActionIndex();
	//   45   90:aload_1         
	//   46   91:invokevirtual   #1293 <Method int MotionEvent.getActionIndex()>
	//   47   94:istore          4
			if(j == 0)
	//*  48   96:iload           5
	//*  49   98:ifne            119
			{
				int ai[] = mNestedOffsets;
	//   50  101:aload_0         
	//   51  102:getfield        #467 <Field int[] mNestedOffsets>
	//   52  105:astore          16
				mNestedOffsets[1] = 0;
	//   53  107:aload_0         
	//   54  108:getfield        #467 <Field int[] mNestedOffsets>
	//   55  111:iconst_1        
	//   56  112:iconst_0        
	//   57  113:iastore         
				ai[0] = 0;
	//   58  114:aload           16
	//   59  116:iconst_0        
	//   60  117:iconst_0        
	//   61  118:iastore         
			}
			motionevent1.offsetLocation(mNestedOffsets[0], mNestedOffsets[1]);
	//   62  119:aload           15
	//   63  121:aload_0         
	//   64  122:getfield        #467 <Field int[] mNestedOffsets>
	//   65  125:iconst_0        
	//   66  126:iaload          
	//   67  127:i2f             
	//   68  128:aload_0         
	//   69  129:getfield        #467 <Field int[] mNestedOffsets>
	//   70  132:iconst_1        
	//   71  133:iaload          
	//   72  134:i2f             
	//   73  135:invokevirtual   #2290 <Method void MotionEvent.offsetLocation(float, float)>
			switch(j)
	//*  74  138:iload           5
			{
	//*  75  140:tableswitch     0 6: default 184
	//	               0 889
	//	               1 781
	//	               2 281
	//	               3 270
	//	               4 184
	//	               5 203
	//	               6 191
			case 4: // '\004'
			default:
				i = ((int) (flag));
	//   76  184:iload           10
	//   77  186:istore          4
				break;
	//   78  188:goto            985

			case 6: // '\006'
				onPointerUp(motionevent);
	//   79  191:aload_0         
	//   80  192:aload_1         
	//   81  193:invokespecial   #2200 <Method void onPointerUp(MotionEvent)>
				i = ((int) (flag));
	//   82  196:iload           10
	//   83  198:istore          4
				break;
	//   84  200:goto            985

			case 5: // '\005'
				mScrollPointerId = motionevent.getPointerId(i);
	//   85  203:aload_0         
	//   86  204:aload_1         
	//   87  205:iload           4
	//   88  207:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//   89  210:putfield        #432 <Field int mScrollPointerId>
				int k = (int)(motionevent.getX(i) + 0.5F);
	//   90  213:aload_1         
	//   91  214:iload           4
	//   92  216:invokevirtual   #1301 <Method float MotionEvent.getX(int)>
	//   93  219:ldc2            #1302 <Float 0.5F>
	//   94  222:fadd            
	//   95  223:f2i             
	//   96  224:istore          5
				mLastTouchX = k;
	//   97  226:aload_0         
	//   98  227:iload           5
	//   99  229:putfield        #1304 <Field int mLastTouchX>
				mInitialTouchX = k;
	//  100  232:aload_0         
	//  101  233:iload           5
	//  102  235:putfield        #1306 <Field int mInitialTouchX>
				i = (int)(motionevent.getY(i) + 0.5F);
	//  103  238:aload_1         
	//  104  239:iload           4
	//  105  241:invokevirtual   #1309 <Method float MotionEvent.getY(int)>
	//  106  244:ldc2            #1302 <Float 0.5F>
	//  107  247:fadd            
	//  108  248:f2i             
	//  109  249:istore          4
				mLastTouchY = i;
	//  110  251:aload_0         
	//  111  252:iload           4
	//  112  254:putfield        #1311 <Field int mLastTouchY>
				mInitialTouchY = i;
	//  113  257:aload_0         
	//  114  258:iload           4
	//  115  260:putfield        #1313 <Field int mInitialTouchY>
				i = ((int) (flag));
	//  116  263:iload           10
	//  117  265:istore          4
				break;
	//  118  267:goto            985

			case 3: // '\003'
				cancelTouch();
	//  119  270:aload_0         
	//  120  271:invokespecial   #2189 <Method void cancelTouch()>
				i = ((int) (flag));
	//  121  274:iload           10
	//  122  276:istore          4
				break;
	//  123  278:goto            985

			case 2: // '\002'
				i = motionevent.findPointerIndex(mScrollPointerId);
	//  124  281:aload_1         
	//  125  282:aload_0         
	//  126  283:getfield        #432 <Field int mScrollPointerId>
	//  127  286:invokevirtual   #2203 <Method int MotionEvent.findPointerIndex(int)>
	//  128  289:istore          4
				if(i < 0)
	//* 129  291:iload           4
	//* 130  293:ifge            341
				{
					motionevent = ((MotionEvent) (new StringBuilder()));
	//  131  296:new             #812 <Class StringBuilder>
	//  132  299:dup             
	//  133  300:invokespecial   #813 <Method void StringBuilder()>
	//  134  303:astore_1        
					((StringBuilder) (motionevent)).append("Error processing scroll; pointer index for id ");
	//  135  304:aload_1         
	//  136  305:ldc2            #2205 <String "Error processing scroll; pointer index for id ">
	//  137  308:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  138  311:pop             
					((StringBuilder) (motionevent)).append(mScrollPointerId);
	//  139  312:aload_1         
	//  140  313:aload_0         
	//  141  314:getfield        #432 <Field int mScrollPointerId>
	//  142  317:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//  143  320:pop             
					((StringBuilder) (motionevent)).append(" not found. Did any MotionEvents get skipped?");
	//  144  321:aload_1         
	//  145  322:ldc2            #2207 <String " not found. Did any MotionEvents get skipped?">
	//  146  325:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//  147  328:pop             
					Log.e("RecyclerView", ((StringBuilder) (motionevent)).toString());
	//  148  329:ldc1            #178 <String "RecyclerView">
	//  149  331:aload_1         
	//  150  332:invokevirtual   #827 <Method String StringBuilder.toString()>
	//  151  335:invokestatic    #1257 <Method int Log.e(String, String)>
	//  152  338:pop             
					return false;
	//  153  339:iconst_0        
	//  154  340:ireturn         
				}
				int j2 = (int)(motionevent.getX(i) + 0.5F);
	//  155  341:aload_1         
	//  156  342:iload           4
	//  157  344:invokevirtual   #1301 <Method float MotionEvent.getX(int)>
	//  158  347:ldc2            #1302 <Float 0.5F>
	//  159  350:fadd            
	//  160  351:f2i             
	//  161  352:istore          11
				int k2 = (int)(motionevent.getY(i) + 0.5F);
	//  162  354:aload_1         
	//  163  355:iload           4
	//  164  357:invokevirtual   #1309 <Method float MotionEvent.getY(int)>
	//  165  360:ldc2            #1302 <Float 0.5F>
	//  166  363:fadd            
	//  167  364:f2i             
	//  168  365:istore          12
				int k1 = mLastTouchX - j2;
	//  169  367:aload_0         
	//  170  368:getfield        #1304 <Field int mLastTouchX>
	//  171  371:iload           11
	//  172  373:isub            
	//  173  374:istore          7
				int j1 = mLastTouchY - k2;
	//  174  376:aload_0         
	//  175  377:getfield        #1311 <Field int mLastTouchY>
	//  176  380:iload           12
	//  177  382:isub            
	//  178  383:istore          6
				int l = k1;
	//  179  385:iload           7
	//  180  387:istore          5
				i = j1;
	//  181  389:iload           6
	//  182  391:istore          4
				if(dispatchNestedPreScroll(k1, j1, mScrollConsumed, mScrollOffset, 0))
	//* 183  393:aload_0         
	//* 184  394:iload           7
	//* 185  396:iload           6
	//* 186  398:aload_0         
	//* 187  399:getfield        #465 <Field int[] mScrollConsumed>
	//* 188  402:aload_0         
	//* 189  403:getfield        #463 <Field int[] mScrollOffset>
	//* 190  406:iconst_0        
	//* 191  407:invokevirtual   #2291 <Method boolean dispatchNestedPreScroll(int, int, int[], int[], int)>
	//* 192  410:ifeq            490
				{
					l = k1 - mScrollConsumed[0];
	//  193  413:iload           7
	//  194  415:aload_0         
	//  195  416:getfield        #465 <Field int[] mScrollConsumed>
	//  196  419:iconst_0        
	//  197  420:iaload          
	//  198  421:isub            
	//  199  422:istore          5
					i = j1 - mScrollConsumed[1];
	//  200  424:iload           6
	//  201  426:aload_0         
	//  202  427:getfield        #465 <Field int[] mScrollConsumed>
	//  203  430:iconst_1        
	//  204  431:iaload          
	//  205  432:isub            
	//  206  433:istore          4
					motionevent1.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  207  435:aload           15
	//  208  437:aload_0         
	//  209  438:getfield        #463 <Field int[] mScrollOffset>
	//  210  441:iconst_0        
	//  211  442:iaload          
	//  212  443:i2f             
	//  213  444:aload_0         
	//  214  445:getfield        #463 <Field int[] mScrollOffset>
	//  215  448:iconst_1        
	//  216  449:iaload          
	//  217  450:i2f             
	//  218  451:invokevirtual   #2290 <Method void MotionEvent.offsetLocation(float, float)>
					motionevent = ((MotionEvent) (mNestedOffsets));
	//  219  454:aload_0         
	//  220  455:getfield        #467 <Field int[] mNestedOffsets>
	//  221  458:astore_1        
					motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  222  459:aload_1         
	//  223  460:iconst_0        
	//  224  461:aload_1         
	//  225  462:iconst_0        
	//  226  463:iaload          
	//  227  464:aload_0         
	//  228  465:getfield        #463 <Field int[] mScrollOffset>
	//  229  468:iconst_0        
	//  230  469:iaload          
	//  231  470:iadd            
	//  232  471:iastore         
					motionevent = ((MotionEvent) (mNestedOffsets));
	//  233  472:aload_0         
	//  234  473:getfield        #467 <Field int[] mNestedOffsets>
	//  235  476:astore_1        
					motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  236  477:aload_1         
	//  237  478:iconst_1        
	//  238  479:aload_1         
	//  239  480:iconst_1        
	//  240  481:iaload          
	//  241  482:aload_0         
	//  242  483:getfield        #463 <Field int[] mScrollOffset>
	//  243  486:iconst_1        
	//  244  487:iaload          
	//  245  488:iadd            
	//  246  489:iastore         
				}
				j1 = l;
	//  247  490:iload           5
	//  248  492:istore          6
				k1 = i;
	//  249  494:iload           4
	//  250  496:istore          7
				if(mScrollState != 1)
	//* 251  498:aload_0         
	//* 252  499:getfield        #430 <Field int mScrollState>
	//* 253  502:iconst_1        
	//* 254  503:icmpeq          646
				{
					if(flag2 && Math.abs(l) > mTouchSlop)
	//* 255  506:iload           13
	//* 256  508:ifeq            555
	//* 257  511:iload           5
	//* 258  513:invokestatic    #1862 <Method int Math.abs(int)>
	//* 259  516:aload_0         
	//* 260  517:getfield        #509 <Field int mTouchSlop>
	//* 261  520:icmple          555
					{
						if(l > 0)
	//* 262  523:iload           5
	//* 263  525:ifle            540
							l -= mTouchSlop;
	//  264  528:iload           5
	//  265  530:aload_0         
	//  266  531:getfield        #509 <Field int mTouchSlop>
	//  267  534:isub            
	//  268  535:istore          5
						else
	//* 269  537:goto            549
							l += mTouchSlop;
	//  270  540:iload           5
	//  271  542:aload_0         
	//  272  543:getfield        #509 <Field int mTouchSlop>
	//  273  546:iadd            
	//  274  547:istore          5
						j1 = 1;
	//  275  549:iconst_1        
	//  276  550:istore          6
					} else
	//* 277  552:goto            558
					{
						j1 = 0;
	//  278  555:iconst_0        
	//  279  556:istore          6
					}
					int i2 = j1;
	//  280  558:iload           6
	//  281  560:istore          9
					int l1 = i;
	//  282  562:iload           4
	//  283  564:istore          8
					if(flag3)
	//* 284  566:iload           14
	//* 285  568:ifeq            620
					{
						i2 = j1;
	//  286  571:iload           6
	//  287  573:istore          9
						l1 = i;
	//  288  575:iload           4
	//  289  577:istore          8
						if(Math.abs(i) > mTouchSlop)
	//* 290  579:iload           4
	//* 291  581:invokestatic    #1862 <Method int Math.abs(int)>
	//* 292  584:aload_0         
	//* 293  585:getfield        #509 <Field int mTouchSlop>
	//* 294  588:icmple          620
						{
							if(i > 0)
	//* 295  591:iload           4
	//* 296  593:ifle            608
								l1 = i - mTouchSlop;
	//  297  596:iload           4
	//  298  598:aload_0         
	//  299  599:getfield        #509 <Field int mTouchSlop>
	//  300  602:isub            
	//  301  603:istore          8
							else
	//* 302  605:goto            617
								l1 = i + mTouchSlop;
	//  303  608:iload           4
	//  304  610:aload_0         
	//  305  611:getfield        #509 <Field int mTouchSlop>
	//  306  614:iadd            
	//  307  615:istore          8
							i2 = 1;
	//  308  617:iconst_1        
	//  309  618:istore          9
						}
					}
					j1 = l;
	//  310  620:iload           5
	//  311  622:istore          6
					k1 = l1;
	//  312  624:iload           8
	//  313  626:istore          7
					if(i2 != 0)
	//* 314  628:iload           9
	//* 315  630:ifeq            646
					{
						setScrollState(1);
	//  316  633:aload_0         
	//  317  634:iconst_1        
	//  318  635:invokevirtual   #726 <Method void setScrollState(int)>
						k1 = l1;
	//  319  638:iload           8
	//  320  640:istore          7
						j1 = l;
	//  321  642:iload           5
	//  322  644:istore          6
					}
				}
				i = ((int) (flag));
	//  323  646:iload           10
	//  324  648:istore          4
				if(mScrollState != 1)
					break;
	//  325  650:aload_0         
	//  326  651:getfield        #430 <Field int mScrollState>
	//  327  654:iconst_1        
	//  328  655:icmpne          985
				mLastTouchX = j2 - mScrollOffset[0];
	//  329  658:aload_0         
	//  330  659:iload           11
	//  331  661:aload_0         
	//  332  662:getfield        #463 <Field int[] mScrollOffset>
	//  333  665:iconst_0        
	//  334  666:iaload          
	//  335  667:isub            
	//  336  668:putfield        #1304 <Field int mLastTouchX>
				mLastTouchY = k2 - mScrollOffset[1];
	//  337  671:aload_0         
	//  338  672:iload           12
	//  339  674:aload_0         
	//  340  675:getfield        #463 <Field int[] mScrollOffset>
	//  341  678:iconst_1        
	//  342  679:iaload          
	//  343  680:isub            
	//  344  681:putfield        #1311 <Field int mLastTouchY>
				if(flag2)
	//* 345  684:iload           13
	//* 346  686:ifeq            696
					i = j1;
	//  347  689:iload           6
	//  348  691:istore          4
				else
	//* 349  693:goto            699
					i = 0;
	//  350  696:iconst_0        
	//  351  697:istore          4
				if(flag3)
	//* 352  699:iload           14
	//* 353  701:ifeq            711
					l = k1;
	//  354  704:iload           7
	//  355  706:istore          5
				else
	//* 356  708:goto            714
					l = 0;
	//  357  711:iconst_0        
	//  358  712:istore          5
				if(scrollByInternal(i, l, motionevent1))
	//* 359  714:aload_0         
	//* 360  715:iload           4
	//* 361  717:iload           5
	//* 362  719:aload           15
	//* 363  721:invokevirtual   #2185 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//* 364  724:ifeq            737
					getParent().requestDisallowInterceptTouchEvent(true);
	//  365  727:aload_0         
	//  366  728:invokevirtual   #2214 <Method ViewParent getParent()>
	//  367  731:iconst_1        
	//  368  732:invokeinterface #2219 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
				i = ((int) (flag));
	//  369  737:iload           10
	//  370  739:istore          4
				if(mGapWorker == null)
					break;
	//  371  741:aload_0         
	//  372  742:getfield        #2118 <Field GapWorker mGapWorker>
	//  373  745:ifnull          985
				if(j1 == 0)
	//* 374  748:iload           6
	//* 375  750:ifne            762
				{
					i = ((int) (flag));
	//  376  753:iload           10
	//  377  755:istore          4
					if(k1 == 0)
						break;
	//  378  757:iload           7
	//  379  759:ifeq            985
				}
				mGapWorker.postFromTraversal(this, j1, k1);
	//  380  762:aload_0         
	//  381  763:getfield        #2118 <Field GapWorker mGapWorker>
	//  382  766:aload_0         
	//  383  767:iload           6
	//  384  769:iload           7
	//  385  771:invokevirtual   #2294 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
				i = ((int) (flag));
	//  386  774:iload           10
	//  387  776:istore          4
				break;

	//* 388  778:goto            985
			case 1: // '\001'
				mVelocityTracker.addMovement(motionevent1);
	//  389  781:aload_0         
	//  390  782:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  391  785:aload           15
	//  392  787:invokevirtual   #2195 <Method void VelocityTracker.addMovement(MotionEvent)>
				mVelocityTracker.computeCurrentVelocity(1000, mMaxFlingVelocity);
	//  393  790:aload_0         
	//  394  791:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  395  794:sipush          1000
	//  396  797:aload_0         
	//  397  798:getfield        #528 <Field int mMaxFlingVelocity>
	//  398  801:i2f             
	//  399  802:invokevirtual   #2298 <Method void VelocityTracker.computeCurrentVelocity(int, float)>
				float f;
				if(flag2)
	//* 400  805:iload           13
	//* 401  807:ifeq            826
					f = -mVelocityTracker.getXVelocity(mScrollPointerId);
	//  402  810:aload_0         
	//  403  811:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  404  814:aload_0         
	//  405  815:getfield        #432 <Field int mScrollPointerId>
	//  406  818:invokevirtual   #2301 <Method float VelocityTracker.getXVelocity(int)>
	//  407  821:fneg            
	//  408  822:fstore_2        
				else
	//* 409  823:goto            828
					f = 0.0F;
	//  410  826:fconst_0        
	//  411  827:fstore_2        
				float f1;
				if(flag3)
	//* 412  828:iload           14
	//* 413  830:ifeq            849
					f1 = -mVelocityTracker.getYVelocity(mScrollPointerId);
	//  414  833:aload_0         
	//  415  834:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  416  837:aload_0         
	//  417  838:getfield        #432 <Field int mScrollPointerId>
	//  418  841:invokevirtual   #2304 <Method float VelocityTracker.getYVelocity(int)>
	//  419  844:fneg            
	//  420  845:fstore_3        
				else
	//* 421  846:goto            851
					f1 = 0.0F;
	//  422  849:fconst_0        
	//  423  850:fstore_3        
				if(f == 0.0F && f1 == 0.0F || !fling((int)f, (int)f1))
	//* 424  851:fload_2         
	//* 425  852:fconst_0        
	//* 426  853:fcmpl           
	//* 427  854:ifne            863
	//* 428  857:fload_3         
	//* 429  858:fconst_0        
	//* 430  859:fcmpl           
	//* 431  860:ifeq            874
	//* 432  863:aload_0         
	//* 433  864:fload_2         
	//* 434  865:f2i             
	//* 435  866:fload_3         
	//* 436  867:f2i             
	//* 437  868:invokevirtual   #2306 <Method boolean fling(int, int)>
	//* 438  871:ifne            879
					setScrollState(0);
	//  439  874:aload_0         
	//  440  875:iconst_0        
	//  441  876:invokevirtual   #726 <Method void setScrollState(int)>
				resetTouch();
	//  442  879:aload_0         
	//  443  880:invokespecial   #723 <Method void resetTouch()>
				i = 1;
	//  444  883:iconst_1        
	//  445  884:istore          4
				break;

	//* 446  886:goto            985
			case 0: // '\0'
				mScrollPointerId = motionevent.getPointerId(0);
	//  447  889:aload_0         
	//  448  890:aload_1         
	//  449  891:iconst_0        
	//  450  892:invokevirtual   #1297 <Method int MotionEvent.getPointerId(int)>
	//  451  895:putfield        #432 <Field int mScrollPointerId>
				i = (int)(motionevent.getX() + 0.5F);
	//  452  898:aload_1         
	//  453  899:invokevirtual   #2211 <Method float MotionEvent.getX()>
	//  454  902:ldc2            #1302 <Float 0.5F>
	//  455  905:fadd            
	//  456  906:f2i             
	//  457  907:istore          4
				mLastTouchX = i;
	//  458  909:aload_0         
	//  459  910:iload           4
	//  460  912:putfield        #1304 <Field int mLastTouchX>
				mInitialTouchX = i;
	//  461  915:aload_0         
	//  462  916:iload           4
	//  463  918:putfield        #1306 <Field int mInitialTouchX>
				i = (int)(motionevent.getY() + 0.5F);
	//  464  921:aload_1         
	//  465  922:invokevirtual   #2213 <Method float MotionEvent.getY()>
	//  466  925:ldc2            #1302 <Float 0.5F>
	//  467  928:fadd            
	//  468  929:f2i             
	//  469  930:istore          4
				mLastTouchY = i;
	//  470  932:aload_0         
	//  471  933:iload           4
	//  472  935:putfield        #1311 <Field int mLastTouchY>
				mInitialTouchY = i;
	//  473  938:aload_0         
	//  474  939:iload           4
	//  475  941:putfield        #1313 <Field int mInitialTouchY>
				if(flag2)
	//* 476  944:iload           13
	//* 477  946:ifeq            955
					i = 1;
	//  478  949:iconst_1        
	//  479  950:istore          4
				else
	//* 480  952:goto            958
					i = 0;
	//  481  955:iconst_0        
	//  482  956:istore          4
				int i1 = i;
	//  483  958:iload           4
	//  484  960:istore          5
				if(flag3)
	//* 485  962:iload           14
	//* 486  964:ifeq            973
					i1 = i | 2;
	//  487  967:iload           4
	//  488  969:iconst_2        
	//  489  970:ior             
	//  490  971:istore          5
				startNestedScroll(i1, 0);
	//  491  973:aload_0         
	//  492  974:iload           5
	//  493  976:iconst_0        
	//  494  977:invokevirtual   #1872 <Method boolean startNestedScroll(int, int)>
	//  495  980:pop             
				i = ((int) (flag));
	//  496  981:iload           10
	//  497  983:istore          4
				break;
			}
			if(i == 0)
	//* 498  985:iload           4
	//* 499  987:ifne            999
				mVelocityTracker.addMovement(motionevent1);
	//  500  990:aload_0         
	//  501  991:getfield        #1419 <Field VelocityTracker mVelocityTracker>
	//  502  994:aload           15
	//  503  996:invokevirtual   #2195 <Method void VelocityTracker.addMovement(MotionEvent)>
			motionevent1.recycle();
	//  504  999:aload           15
	//  505 1001:invokevirtual   #2307 <Method void MotionEvent.recycle()>
			return true;
	//  506 1004:iconst_1        
	//  507 1005:ireturn         
		} else
		{
			return false;
	//  508 1006:iconst_0        
	//  509 1007:ireturn         
		}
	}

	void postAnimationRunner()
	{
		if(!mPostedAnimatorRunner && mIsAttached)
	//*   0    0:aload_0         
	//*   1    1:getfield        #459 <Field boolean mPostedAnimatorRunner>
	//*   2    4:ifne            27
	//*   3    7:aload_0         
	//*   4    8:getfield        #2058 <Field boolean mIsAttached>
	//*   5   11:ifeq            27
		{
			ViewCompat.postOnAnimation(((View) (this)), mItemAnimatorRunner);
	//    6   14:aload_0         
	//    7   15:aload_0         
	//    8   16:getfield        #472 <Field Runnable mItemAnimatorRunner>
	//    9   19:invokestatic    #2311 <Method void ViewCompat.postOnAnimation(View, Runnable)>
			mPostedAnimatorRunner = true;
	//   10   22:aload_0         
	//   11   23:iconst_1        
	//   12   24:putfield        #459 <Field boolean mPostedAnimatorRunner>
		}
	//   13   27:return          
	}

	void processDataSetCompletelyChanged(boolean flag)
	{
		mDispatchItemsChangedEvent = flag | mDispatchItemsChangedEvent;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:getfield        #416 <Field boolean mDispatchItemsChangedEvent>
	//    4    6:ior             
	//    5    7:putfield        #416 <Field boolean mDispatchItemsChangedEvent>
		mDataSetHasChangedAfterLayout = true;
	//    6   10:aload_0         
	//    7   11:iconst_1        
	//    8   12:putfield        #414 <Field boolean mDataSetHasChangedAfterLayout>
		markKnownViewsInvalid();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #2313 <Method void markKnownViewsInvalid()>
	//   11   19:return          
	}

	void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo)
	{
		viewholder.setFlags(0, 8192);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:sipush          8192
	//    3    5:invokevirtual   #2316 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore())
	//*   4    8:aload_0         
	//*   5    9:getfield        #450 <Field RecyclerView$State mState>
	//*   6   12:getfield        #901 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*   7   15:ifeq            54
	//*   8   18:aload_1         
	//*   9   19:invokevirtual   #953 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  10   22:ifeq            54
	//*  11   25:aload_1         
	//*  12   26:invokevirtual   #956 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  13   29:ifne            54
	//*  14   32:aload_1         
	//*  15   33:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  16   36:ifne            54
		{
			long l = getChangedHolderKey(viewholder);
	//   17   39:aload_0         
	//   18   40:aload_1         
	//   19   41:invokevirtual   #960 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   20   44:lstore_3        
			mViewInfoStore.addToOldChangeHolders(l, viewholder);
	//   21   45:aload_0         
	//   22   46:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   23   49:lload_3         
	//   24   50:aload_1         
	//   25   51:invokevirtual   #964 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
		}
		mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//   26   54:aload_0         
	//   27   55:getfield        #388 <Field ViewInfoStore mViewInfoStore>
	//   28   58:aload_1         
	//   29   59:aload_2         
	//   30   60:invokevirtual   #950 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//   31   63:return          
	}

	void removeAndRecycleViews()
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          14
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2145 <Method void RecyclerView$ItemAnimator.endAnimations()>
		if(mLayout != null)
	//*   6   14:aload_0         
	//*   7   15:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   8   18:ifnull          43
		{
			mLayout.removeAndRecycleAllViews(mRecycler);
	//    9   21:aload_0         
	//   10   22:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   13   29:invokevirtual   #2319 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   14   32:aload_0         
	//   15   33:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   16   36:aload_0         
	//   17   37:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   18   40:invokevirtual   #1051 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		}
		mRecycler.clear();
	//   19   43:aload_0         
	//   20   44:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   21   47:invokevirtual   #2320 <Method void RecyclerView$Recycler.clear()>
	//   22   50:return          
	}

	boolean removeAnimatingView(View view)
	{
		startInterceptRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #883 <Method void startInterceptRequestLayout()>
		boolean flag = mChildHelper.removeViewIfHidden(view);
	//    2    4:aload_0         
	//    3    5:getfield        #682 <Field ChildHelper mChildHelper>
	//    4    8:aload_1         
	//    5    9:invokevirtual   #2324 <Method boolean ChildHelper.removeViewIfHidden(View)>
	//    6   12:istore_2        
		if(flag)
	//*   7   13:iload_2         
	//*   8   14:ifeq            38
		{
			view = ((View) (getChildViewHolderInt(view)));
	//    9   17:aload_1         
	//   10   18:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   21:astore_1        
			mRecycler.unscrapView(((ViewHolder) (view)));
	//   12   22:aload_0         
	//   13   23:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   14   26:aload_1         
	//   15   27:invokevirtual   #677 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			mRecycler.recycleViewHolderInternal(((ViewHolder) (view)));
	//   16   30:aload_0         
	//   17   31:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   18   34:aload_1         
	//   19   35:invokevirtual   #2327 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
		}
		stopInterceptRequestLayout(flag ^ true);
	//   20   38:aload_0         
	//   21   39:iload_2         
	//   22   40:iconst_1        
	//   23   41:ixor            
	//   24   42:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
		return flag;
	//   25   45:iload_2         
	//   26   46:ireturn         
	}

	protected void removeDetachedView(View view, boolean flag)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		if(viewholder != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          73
			if(viewholder.isTmpDetached())
	//*   5    9:aload_3         
	//*   6   10:invokevirtual   #680 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*   7   13:ifeq            23
				viewholder.clearTmpDetachFlag();
	//    8   16:aload_3         
	//    9   17:invokevirtual   #2331 <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
			else
	//*  10   20:goto            73
			if(!viewholder.shouldIgnore())
	//*  11   23:aload_3         
	//*  12   24:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  13   27:ifne            73
			{
				view = ((View) (new StringBuilder()));
	//   14   30:new             #812 <Class StringBuilder>
	//   15   33:dup             
	//   16   34:invokespecial   #813 <Method void StringBuilder()>
	//   17   37:astore_1        
				((StringBuilder) (view)).append("Called removeDetachedView with a view which is not flagged as tmp detached.");
	//   18   38:aload_1         
	//   19   39:ldc2            #2333 <String "Called removeDetachedView with a view which is not flagged as tmp detached.">
	//   20   42:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   21   45:pop             
				((StringBuilder) (view)).append(((Object) (viewholder)));
	//   22   46:aload_1         
	//   23   47:aload_3         
	//   24   48:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   25   51:pop             
				((StringBuilder) (view)).append(exceptionLabel());
	//   26   52:aload_1         
	//   27   53:aload_0         
	//   28   54:invokevirtual   #1242 <Method String exceptionLabel()>
	//   29   57:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   30   60:pop             
				throw new IllegalArgumentException(((StringBuilder) (view)).toString());
	//   31   61:new             #1287 <Class IllegalArgumentException>
	//   32   64:dup             
	//   33   65:aload_1         
	//   34   66:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   35   69:invokespecial   #1288 <Method void IllegalArgumentException(String)>
	//   36   72:athrow          
			}
		view.clearAnimation();
	//   37   73:aload_1         
	//   38   74:invokevirtual   #2336 <Method void View.clearAnimation()>
		dispatchChildDetached(view);
	//   39   77:aload_0         
	//   40   78:aload_1         
	//   41   79:invokevirtual   #2338 <Method void dispatchChildDetached(View)>
		super.removeDetachedView(view, flag);
	//   42   82:aload_0         
	//   43   83:aload_1         
	//   44   84:iload_2         
	//   45   85:invokespecial   #2340 <Method void ViewGroup.removeDetachedView(View, boolean)>
	//   46   88:return          
	}

	public void removeItemDecoration(ItemDecoration itemdecoration)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #2343 <String "Cannot remove item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1498 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		mItemDecorations.remove(((Object) (itemdecoration)));
	//    7   17:aload_0         
	//    8   18:getfield        #408 <Field ArrayList mItemDecorations>
	//    9   21:aload_1         
	//   10   22:invokevirtual   #2345 <Method boolean ArrayList.remove(Object)>
	//   11   25:pop             
		if(mItemDecorations.isEmpty())
	//*  12   26:aload_0         
	//*  13   27:getfield        #408 <Field ArrayList mItemDecorations>
	//*  14   30:invokevirtual   #1499 <Method boolean ArrayList.isEmpty()>
	//*  15   33:ifeq            56
		{
			boolean flag;
			if(getOverScrollMode() == 2)
	//*  16   36:aload_0         
	//*  17   37:invokevirtual   #531 <Method int getOverScrollMode()>
	//*  18   40:iconst_2        
	//*  19   41:icmpne          49
				flag = true;
	//   20   44:iconst_1        
	//   21   45:istore_2        
			else
	//*  22   46:goto            51
				flag = false;
	//   23   49:iconst_0        
	//   24   50:istore_2        
			setWillNotDraw(flag);
	//   25   51:aload_0         
	//   26   52:iload_2         
	//   27   53:invokevirtual   #534 <Method void setWillNotDraw(boolean)>
		}
		markItemDecorInsetsDirty();
	//   28   56:aload_0         
	//   29   57:invokevirtual   #1509 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   30   60:aload_0         
	//   31   61:invokevirtual   #1512 <Method void requestLayout()>
	//   32   64:return          
	}

	public void removeItemDecorationAt(int i)
	{
		int j = getItemDecorationCount();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1982 <Method int getItemDecorationCount()>
	//    2    4:istore_2        
		if(i >= 0 && i < j)
	//*   3    5:iload_1         
	//*   4    6:iflt            27
	//*   5    9:iload_1         
	//*   6   10:iload_2         
	//*   7   11:icmplt          17
	//*   8   14:goto            27
		{
			removeItemDecoration(getItemDecorationAt(i));
	//    9   17:aload_0         
	//   10   18:aload_0         
	//   11   19:iload_1         
	//   12   20:invokevirtual   #2348 <Method RecyclerView$ItemDecoration getItemDecorationAt(int)>
	//   13   23:invokevirtual   #2350 <Method void removeItemDecoration(RecyclerView$ItemDecoration)>
			return;
	//   14   26:return          
		} else
		{
			StringBuilder stringbuilder = new StringBuilder();
	//   15   27:new             #812 <Class StringBuilder>
	//   16   30:dup             
	//   17   31:invokespecial   #813 <Method void StringBuilder()>
	//   18   34:astore_3        
			stringbuilder.append(i);
	//   19   35:aload_3         
	//   20   36:iload_1         
	//   21   37:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//   22   40:pop             
			stringbuilder.append(" is an invalid index for size ");
	//   23   41:aload_3         
	//   24   42:ldc2            #1984 <String " is an invalid index for size ">
	//   25   45:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   26   48:pop             
			stringbuilder.append(j);
	//   27   49:aload_3         
	//   28   50:iload_2         
	//   29   51:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//   30   54:pop             
			throw new IndexOutOfBoundsException(stringbuilder.toString());
	//   31   55:new             #1986 <Class IndexOutOfBoundsException>
	//   32   58:dup             
	//   33   59:aload_3         
	//   34   60:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   35   63:invokespecial   #1987 <Method void IndexOutOfBoundsException(String)>
	//   36   66:athrow          
		}
	}

	public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mOnChildAttachStateListeners.remove(((Object) (onchildattachstatechangelistener)));
	//    4    8:aload_0         
	//    5    9:getfield        #1516 <Field List mOnChildAttachStateListeners>
	//    6   12:aload_1         
	//    7   13:invokeinterface #2352 <Method boolean List.remove(Object)>
	//    8   18:pop             
			return;
	//    9   19:return          
		}
	}

	public void removeOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.remove(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2345 <Method boolean ArrayList.remove(Object)>
	//    4    8:pop             
		if(mActiveOnItemTouchListener == onitemtouchlistener)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   7   13:aload_1         
	//*   8   14:if_acmpne       22
			mActiveOnItemTouchListener = null;
	//    9   17:aload_0         
	//   10   18:aconst_null     
	//   11   19:putfield        #1093 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   12   22:return          
	}

	public void removeOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1525 <Field List mScrollListeners>
	//*   2    4:ifnull          18
			mScrollListeners.remove(((Object) (onscrolllistener)));
	//    3    7:aload_0         
	//    4    8:getfield        #1525 <Field List mScrollListeners>
	//    5   11:aload_1         
	//    6   12:invokeinterface #2352 <Method boolean List.remove(Object)>
	//    7   17:pop             
	//    8   18:return          
	}

	void repositionShadowingViews()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #918 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          118
		{
			View view = mChildHelper.getChildAt(i);
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #922 <Method View ChildHelper.getChildAt(int)>
	//   13   23:astore          5
			Object obj = ((Object) (getChildViewHolder(view)));
	//   14   25:aload_0         
	//   15   26:aload           5
	//   16   28:invokevirtual   #674 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   31:astore          6
			if(obj == null || ((ViewHolder) (obj)).mShadowingHolder == null)
				continue;
	//   18   33:aload           6
	//   19   35:ifnull          111
	//   20   38:aload           6
	//   21   40:getfield        #713 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   22   43:ifnull          111
			obj = ((Object) (((ViewHolder) (obj)).mShadowingHolder.itemView));
	//   23   46:aload           6
	//   24   48:getfield        #713 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   25   51:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   26   54:astore          6
			int k = view.getLeft();
	//   27   56:aload           5
	//   28   58:invokevirtual   #1149 <Method int View.getLeft()>
	//   29   61:istore_3        
			int l = view.getTop();
	//   30   62:aload           5
	//   31   64:invokevirtual   #1158 <Method int View.getTop()>
	//   32   67:istore          4
			if(k != ((View) (obj)).getLeft() || l != ((View) (obj)).getTop())
	//*  33   69:iload_3         
	//*  34   70:aload           6
	//*  35   72:invokevirtual   #1149 <Method int View.getLeft()>
	//*  36   75:icmpne          88
	//*  37   78:iload           4
	//*  38   80:aload           6
	//*  39   82:invokevirtual   #1158 <Method int View.getTop()>
	//*  40   85:icmpeq          111
				((View) (obj)).layout(k, l, ((View) (obj)).getWidth() + k, ((View) (obj)).getHeight() + l);
	//   41   88:aload           6
	//   42   90:iload_3         
	//   43   91:iload           4
	//   44   93:aload           6
	//   45   95:invokevirtual   #1271 <Method int View.getWidth()>
	//   46   98:iload_3         
	//   47   99:iadd            
	//   48  100:aload           6
	//   49  102:invokevirtual   #1274 <Method int View.getHeight()>
	//   50  105:iload           4
	//   51  107:iadd            
	//   52  108:invokevirtual   #2358 <Method void View.layout(int, int, int, int)>
		}

	//   53  111:iload_1         
	//   54  112:iconst_1        
	//   55  113:iadd            
	//   56  114:istore_1        
	//*  57  115:goto            10
	//   58  118:return          
	}

	public void requestChildFocus(View view, View view1)
	{
		if(!mLayout.onRequestChildFocus(this, mState, view, view1) && view1 != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:aload_0         
	//*   3    5:aload_0         
	//*   4    6:getfield        #450 <Field RecyclerView$State mState>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:invokevirtual   #2363 <Method boolean RecyclerView$LayoutManager.onRequestChildFocus(RecyclerView, RecyclerView$State, View, View)>
	//*   8   14:ifne            27
	//*   9   17:aload_2         
	//*  10   18:ifnull          27
			requestChildOnScreen(view, view1);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:aload_2         
	//   14   24:invokespecial   #1902 <Method void requestChildOnScreen(View, View)>
		super.requestChildFocus(view, view1);
	//   15   27:aload_0         
	//   16   28:aload_1         
	//   17   29:aload_2         
	//   18   30:invokespecial   #2365 <Method void ViewGroup.requestChildFocus(View, View)>
	//   19   33:return          
	}

	public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean flag)
	{
		return mLayout.requestChildRectangleOnScreen(this, view, rect, flag);
	//    0    0:aload_0         
	//    1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_0         
	//    3    5:aload_1         
	//    4    6:aload_2         
	//    5    7:iload_3         
	//    6    8:invokevirtual   #2369 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean)>
	//    7   11:ireturn         
	}

	public void requestDisallowInterceptTouchEvent(boolean flag)
	{
		int j = mOnItemTouchListeners.size();
	//    0    0:aload_0         
	//    1    1:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//    2    4:invokevirtual   #1100 <Method int ArrayList.size()>
	//    3    7:istore_3        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          39
			((OnItemTouchListener)mOnItemTouchListeners.get(i)).onRequestDisallowInterceptTouchEvent(flag);
	//    9   15:aload_0         
	//   10   16:getfield        #410 <Field ArrayList mOnItemTouchListeners>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #1103 <Method Object ArrayList.get(int)>
	//   13   23:checkcast       #83  <Class RecyclerView$OnItemTouchListener>
	//   14   26:iload_1         
	//   15   27:invokeinterface #2372 <Method void RecyclerView$OnItemTouchListener.onRequestDisallowInterceptTouchEvent(boolean)>

	//   16   32:iload_2         
	//   17   33:iconst_1        
	//   18   34:iadd            
	//   19   35:istore_2        
	//*  20   36:goto            10
		super.requestDisallowInterceptTouchEvent(flag);
	//   21   39:aload_0         
	//   22   40:iload_1         
	//   23   41:invokespecial   #2373 <Method void ViewGroup.requestDisallowInterceptTouchEvent(boolean)>
	//   24   44:return          
	}

	public void requestLayout()
	{
		if(mInterceptRequestLayoutDepth == 0 && !mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//*   2    4:ifne            19
	//*   3    7:aload_0         
	//*   4    8:getfield        #1859 <Field boolean mLayoutFrozen>
	//*   5   11:ifne            19
		{
			super.requestLayout();
	//    6   14:aload_0         
	//    7   15:invokespecial   #2374 <Method void ViewGroup.requestLayout()>
			return;
	//    8   18:return          
		} else
		{
			mLayoutWasDefered = true;
	//    9   19:aload_0         
	//   10   20:iconst_1        
	//   11   21:putfield        #1611 <Field boolean mLayoutWasDefered>
			return;
	//   12   24:return          
		}
	}

	void saveOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.saveOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #2377 <Method void RecyclerView$ViewHolder.saveOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
	//   25   45:return          
	}

	public void scrollBy(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #178 <String "RecyclerView">
	//    4    9:ldc2            #2380 <String "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1257 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  10   21:ifeq            25
			return;
	//   11   24:return          
		boolean flag = mLayout.canScrollHorizontally();
	//   12   25:aload_0         
	//   13   26:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   15   32:istore_3        
		boolean flag1 = mLayout.canScrollVertically();
	//   16   33:aload_0         
	//   17   34:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   18   37:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   19   40:istore          4
		if(flag || flag1)
	//*  20   42:iload_3         
	//*  21   43:ifne            51
	//*  22   46:iload           4
	//*  23   48:ifeq            78
		{
			if(!flag)
	//*  24   51:iload_3         
	//*  25   52:ifeq            58
	//*  26   55:goto            60
				i = 0;
	//   27   58:iconst_0        
	//   28   59:istore_1        
			if(!flag1)
	//*  29   60:iload           4
	//*  30   62:ifeq            68
	//*  31   65:goto            70
				j = 0;
	//   32   68:iconst_0        
	//   33   69:istore_2        
			scrollByInternal(i, j, ((MotionEvent) (null)));
	//   34   70:aload_0         
	//   35   71:iload_1         
	//   36   72:iload_2         
	//   37   73:aconst_null     
	//   38   74:invokevirtual   #2185 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//   39   77:pop             
		}
	//   40   78:return          
	}

	boolean scrollByInternal(int i, int j, MotionEvent motionevent)
	{
		consumePendingUpdateOperations();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #1894 <Method void consumePendingUpdateOperations()>
		Adapter adapter = mAdapter;
	//    2    4:aload_0         
	//    3    5:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//    4    8:astore          10
		boolean flag1 = false;
	//    5   10:iconst_0        
	//    6   11:istore          9
		int k;
		int l;
		int j1;
		int k1;
		if(adapter != null)
	//*   7   13:aload           10
	//*   8   15:ifnull          138
		{
			startInterceptRequestLayout();
	//    9   18:aload_0         
	//   10   19:invokevirtual   #883 <Method void startInterceptRequestLayout()>
			onEnterLayoutOrScroll();
	//   11   22:aload_0         
	//   12   23:invokevirtual   #889 <Method void onEnterLayoutOrScroll()>
			TraceCompat.beginSection("RV Scroll");
	//   13   26:ldc1            #204 <String "RV Scroll">
	//   14   28:invokestatic    #1609 <Method void TraceCompat.beginSection(String)>
			fillRemainingScrollValues(mState);
	//   15   31:aload_0         
	//   16   32:aload_0         
	//   17   33:getfield        #450 <Field RecyclerView$State mState>
	//   18   36:invokevirtual   #877 <Method void fillRemainingScrollValues(RecyclerView$State)>
			if(i != 0)
	//*  19   39:iload_1         
	//*  20   40:ifeq            70
			{
				l = mLayout.scrollHorizontallyBy(i, mRecycler, mState);
	//   21   43:aload_0         
	//   22   44:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   23   47:iload_1         
	//   24   48:aload_0         
	//   25   49:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   26   52:aload_0         
	//   27   53:getfield        #450 <Field RecyclerView$State mState>
	//   28   56:invokevirtual   #2384 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   29   59:istore          5
				k = i - l;
	//   30   61:iload_1         
	//   31   62:iload           5
	//   32   64:isub            
	//   33   65:istore          4
			} else
	//*  34   67:goto            77
			{
				l = 0;
	//   35   70:iconst_0        
	//   36   71:istore          5
				k = l;
	//   37   73:iload           5
	//   38   75:istore          4
			}
			int i1;
			if(j != 0)
	//*  39   77:iload_2         
	//*  40   78:ifeq            108
			{
				j1 = mLayout.scrollVerticallyBy(j, mRecycler, mState);
	//   41   81:aload_0         
	//   42   82:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   43   85:iload_2         
	//   44   86:aload_0         
	//   45   87:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   46   90:aload_0         
	//   47   91:getfield        #450 <Field RecyclerView$State mState>
	//   48   94:invokevirtual   #2387 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   49   97:istore          7
				i1 = j - j1;
	//   50   99:iload_2         
	//   51  100:iload           7
	//   52  102:isub            
	//   53  103:istore          6
			} else
	//*  54  105:goto            115
			{
				j1 = 0;
	//   55  108:iconst_0        
	//   56  109:istore          7
				i1 = j1;
	//   57  111:iload           7
	//   58  113:istore          6
			}
			TraceCompat.endSection();
	//   59  115:invokestatic    #1622 <Method void TraceCompat.endSection()>
			repositionShadowingViews();
	//   60  118:aload_0         
	//   61  119:invokevirtual   #2389 <Method void repositionShadowingViews()>
			onExitLayoutOrScroll();
	//   62  122:aload_0         
	//   63  123:invokevirtual   #996 <Method void onExitLayoutOrScroll()>
			stopInterceptRequestLayout(false);
	//   64  126:aload_0         
	//   65  127:iconst_0        
	//   66  128:invokevirtual   #999 <Method void stopInterceptRequestLayout(boolean)>
			k1 = i1;
	//   67  131:iload           6
	//   68  133:istore          8
		} else
	//*  69  135:goto            161
		{
			boolean flag = false;
	//   70  138:iconst_0        
	//   71  139:istore          6
			k = ((int) (flag));
	//   72  141:iload           6
	//   73  143:istore          4
			l = k;
	//   74  145:iload           4
	//   75  147:istore          5
			k1 = l;
	//   76  149:iload           5
	//   77  151:istore          8
			j1 = l;
	//   78  153:iload           5
	//   79  155:istore          7
			l = ((int) (flag));
	//   80  157:iload           6
	//   81  159:istore          5
		}
		if(!mItemDecorations.isEmpty())
	//*  82  161:aload_0         
	//*  83  162:getfield        #408 <Field ArrayList mItemDecorations>
	//*  84  165:invokevirtual   #1499 <Method boolean ArrayList.isEmpty()>
	//*  85  168:ifne            175
			invalidate();
	//   86  171:aload_0         
	//   87  172:invokevirtual   #2392 <Method void invalidate()>
		if(dispatchNestedScroll(l, j1, k, k1, mScrollOffset, 0))
	//*  88  175:aload_0         
	//*  89  176:iload           5
	//*  90  178:iload           7
	//*  91  180:iload           4
	//*  92  182:iload           8
	//*  93  184:aload_0         
	//*  94  185:getfield        #463 <Field int[] mScrollOffset>
	//*  95  188:iconst_0        
	//*  96  189:invokevirtual   #2393 <Method boolean dispatchNestedScroll(int, int, int, int, int[], int)>
	//*  97  192:ifeq            286
		{
			mLastTouchX = mLastTouchX - mScrollOffset[0];
	//   98  195:aload_0         
	//   99  196:aload_0         
	//  100  197:getfield        #1304 <Field int mLastTouchX>
	//  101  200:aload_0         
	//  102  201:getfield        #463 <Field int[] mScrollOffset>
	//  103  204:iconst_0        
	//  104  205:iaload          
	//  105  206:isub            
	//  106  207:putfield        #1304 <Field int mLastTouchX>
			mLastTouchY = mLastTouchY - mScrollOffset[1];
	//  107  210:aload_0         
	//  108  211:aload_0         
	//  109  212:getfield        #1311 <Field int mLastTouchY>
	//  110  215:aload_0         
	//  111  216:getfield        #463 <Field int[] mScrollOffset>
	//  112  219:iconst_1        
	//  113  220:iaload          
	//  114  221:isub            
	//  115  222:putfield        #1311 <Field int mLastTouchY>
			if(motionevent != null)
	//* 116  225:aload_3         
	//* 117  226:ifnull          247
				motionevent.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  118  229:aload_3         
	//  119  230:aload_0         
	//  120  231:getfield        #463 <Field int[] mScrollOffset>
	//  121  234:iconst_0        
	//  122  235:iaload          
	//  123  236:i2f             
	//  124  237:aload_0         
	//  125  238:getfield        #463 <Field int[] mScrollOffset>
	//  126  241:iconst_1        
	//  127  242:iaload          
	//  128  243:i2f             
	//  129  244:invokevirtual   #2290 <Method void MotionEvent.offsetLocation(float, float)>
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  130  247:aload_0         
	//  131  248:getfield        #467 <Field int[] mNestedOffsets>
	//  132  251:astore_3        
			motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  133  252:aload_3         
	//  134  253:iconst_0        
	//  135  254:aload_3         
	//  136  255:iconst_0        
	//  137  256:iaload          
	//  138  257:aload_0         
	//  139  258:getfield        #463 <Field int[] mScrollOffset>
	//  140  261:iconst_0        
	//  141  262:iaload          
	//  142  263:iadd            
	//  143  264:iastore         
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  144  265:aload_0         
	//  145  266:getfield        #467 <Field int[] mNestedOffsets>
	//  146  269:astore_3        
			motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  147  270:aload_3         
	//  148  271:iconst_1        
	//  149  272:aload_3         
	//  150  273:iconst_1        
	//  151  274:iaload          
	//  152  275:aload_0         
	//  153  276:getfield        #463 <Field int[] mScrollOffset>
	//  154  279:iconst_1        
	//  155  280:iaload          
	//  156  281:iadd            
	//  157  282:iastore         
		} else
	//* 158  283:goto            332
		if(getOverScrollMode() != 2)
	//* 159  286:aload_0         
	//* 160  287:invokevirtual   #531 <Method int getOverScrollMode()>
	//* 161  290:iconst_2        
	//* 162  291:icmpeq          332
		{
			if(motionevent != null && !MotionEventCompat.isFromSource(motionevent, 8194))
	//* 163  294:aload_3         
	//* 164  295:ifnull          326
	//* 165  298:aload_3         
	//* 166  299:sipush          8194
	//* 167  302:invokestatic    #2399 <Method boolean MotionEventCompat.isFromSource(MotionEvent, int)>
	//* 168  305:ifne            326
				pullGlows(motionevent.getX(), k, motionevent.getY(), k1);
	//  169  308:aload_0         
	//  170  309:aload_3         
	//  171  310:invokevirtual   #2211 <Method float MotionEvent.getX()>
	//  172  313:iload           4
	//  173  315:i2f             
	//  174  316:aload_3         
	//  175  317:invokevirtual   #2213 <Method float MotionEvent.getY()>
	//  176  320:iload           8
	//  177  322:i2f             
	//  178  323:invokespecial   #2401 <Method void pullGlows(float, float, float, float)>
			considerReleasingGlowsOnScroll(i, j);
	//  179  326:aload_0         
	//  180  327:iload_1         
	//  181  328:iload_2         
	//  182  329:invokevirtual   #2403 <Method void considerReleasingGlowsOnScroll(int, int)>
		}
		if(l != 0 || j1 != 0)
	//* 183  332:iload           5
	//* 184  334:ifne            342
	//* 185  337:iload           7
	//* 186  339:ifeq            350
			dispatchOnScrolled(l, j1);
	//  187  342:aload_0         
	//  188  343:iload           5
	//  189  345:iload           7
	//  190  347:invokevirtual   #1078 <Method void dispatchOnScrolled(int, int)>
		if(!awakenScrollBars())
	//* 191  350:aload_0         
	//* 192  351:invokevirtual   #657 <Method boolean awakenScrollBars()>
	//* 193  354:ifne            361
			invalidate();
	//  194  357:aload_0         
	//  195  358:invokevirtual   #2392 <Method void invalidate()>
		if(l != 0 || j1 != 0)
	//* 196  361:iload           5
	//* 197  363:ifne            371
	//* 198  366:iload           7
	//* 199  368:ifeq            374
			flag1 = true;
	//  200  371:iconst_1        
	//  201  372:istore          9
		return flag1;
	//  202  374:iload           9
	//  203  376:ireturn         
	}

	public void scrollTo(int i, int j)
	{
		Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
	//    0    0:ldc1            #178 <String "RecyclerView">
	//    1    2:ldc2            #2406 <String "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead">
	//    2    5:invokestatic    #2408 <Method int Log.w(String, String)>
	//    3    8:pop             
	//    4    9:return          
	}

	public void scrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1859 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		stopScroll();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2148 <Method void stopScroll()>
		if(mLayout == null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   8   16:ifnonnull       29
		{
			Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    9   19:ldc1            #178 <String "RecyclerView">
	//   10   21:ldc2            #2410 <String "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   11   24:invokestatic    #1257 <Method int Log.e(String, String)>
	//   12   27:pop             
			return;
	//   13   28:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//   14   29:aload_0         
	//   15   30:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   16   33:iload_1         
	//   17   34:invokevirtual   #2066 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//   18   37:aload_0         
	//   19   38:invokevirtual   #657 <Method boolean awakenScrollBars()>
	//   20   41:pop             
			return;
	//   21   42:return          
		}
	}

	public void sendAccessibilityEventUnchecked(AccessibilityEvent accessibilityevent)
	{
		if(shouldDeferAccessibilityEvent(accessibilityevent))
	//*   0    0:aload_0         
	//*   1    1:aload_1         
	//*   2    2:invokevirtual   #2414 <Method boolean shouldDeferAccessibilityEvent(AccessibilityEvent)>
	//*   3    5:ifeq            9
		{
			return;
	//    4    8:return          
		} else
		{
			super.sendAccessibilityEventUnchecked(accessibilityevent);
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:invokespecial   #2415 <Method void ViewGroup.sendAccessibilityEventUnchecked(AccessibilityEvent)>
			return;
	//    8   14:return          
		}
	}

	public void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate recyclerviewaccessibilitydelegate)
	{
		mAccessibilityDelegate = recyclerviewaccessibilitydelegate;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1955 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
		ViewCompat.setAccessibilityDelegate(((View) (this)), ((android.support.v4.view.AccessibilityDelegateCompat) (mAccessibilityDelegate)));
	//    3    5:aload_0         
	//    4    6:aload_0         
	//    5    7:getfield        #1955 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    6   10:invokestatic    #2419 <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
	//    7   13:return          
	}

	public void setAdapter(Adapter adapter)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2424 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, false, true);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_0        
	//    6    8:iconst_1        
	//    7    9:invokespecial   #2426 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		processDataSetCompletelyChanged(false);
	//    8   12:aload_0         
	//    9   13:iconst_0        
	//   10   14:invokevirtual   #2428 <Method void processDataSetCompletelyChanged(boolean)>
		requestLayout();
	//   11   17:aload_0         
	//   12   18:invokevirtual   #1512 <Method void requestLayout()>
	//   13   21:return          
	}

	public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childdrawingordercallback)
	{
		if(childdrawingordercallback == mChildDrawingOrderCallback)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1935 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		mChildDrawingOrderCallback = childdrawingordercallback;
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:putfield        #1935 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
		boolean flag;
		if(mChildDrawingOrderCallback != null)
	//*   8   14:aload_0         
	//*   9   15:getfield        #1935 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*  10   18:ifnull          26
			flag = true;
	//   11   21:iconst_1        
	//   12   22:istore_2        
		else
	//*  13   23:goto            28
			flag = false;
	//   14   26:iconst_0        
	//   15   27:istore_2        
		setChildrenDrawingOrderEnabled(flag);
	//   16   28:aload_0         
	//   17   29:iload_2         
	//   18   30:invokevirtual   #2433 <Method void setChildrenDrawingOrderEnabled(boolean)>
	//   19   33:return          
	}

	boolean setChildImportantForAccessibilityInternal(ViewHolder viewholder, int i)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            25
		{
			viewholder.mPendingAccessibilityState = i;
	//    3    7:aload_1         
	//    4    8:iload_2         
	//    5    9:putfield        #1736 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			mPendingAccessibilityImportanceChange.add(((Object) (viewholder)));
	//    6   12:aload_0         
	//    7   13:getfield        #469 <Field List mPendingAccessibilityImportanceChange>
	//    8   16:aload_1         
	//    9   17:invokeinterface #1519 <Method boolean List.add(Object)>
	//   10   22:pop             
			return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
		} else
		{
			ViewCompat.setImportantForAccessibility(viewholder.itemView, i);
	//   13   25:aload_1         
	//   14   26:getfield        #664 <Field View RecyclerView$ViewHolder.itemView>
	//   15   29:iload_2         
	//   16   30:invokestatic    #554 <Method void ViewCompat.setImportantForAccessibility(View, int)>
			return true;
	//   17   33:iconst_1        
	//   18   34:ireturn         
		}
	}

	public void setClipToPadding(boolean flag)
	{
		if(flag != mClipToPadding)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #487 <Field boolean mClipToPadding>
	//*   3    5:icmpeq          12
			invalidateGlows();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2282 <Method void invalidateGlows()>
		mClipToPadding = flag;
	//    6   12:aload_0         
	//    7   13:iload_1         
	//    8   14:putfield        #487 <Field boolean mClipToPadding>
		super.setClipToPadding(flag);
	//    9   17:aload_0         
	//   10   18:iload_1         
	//   11   19:invokespecial   #2438 <Method void ViewGroup.setClipToPadding(boolean)>
		if(mFirstLayoutComplete)
	//*  12   22:aload_0         
	//*  13   23:getfield        #1330 <Field boolean mFirstLayoutComplete>
	//*  14   26:ifeq            33
			requestLayout();
	//   15   29:aload_0         
	//   16   30:invokevirtual   #1512 <Method void requestLayout()>
	//   17   33:return          
	}

	public void setEdgeEffectFactory(EdgeEffectFactory edgeeffectfactory)
	{
		Preconditions.checkNotNull(((Object) (edgeeffectfactory)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #2446 <Method Object Preconditions.checkNotNull(Object)>
	//    2    4:pop             
		mEdgeEffectFactory = edgeeffectfactory;
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:putfield        #423 <Field RecyclerView$EdgeEffectFactory mEdgeEffectFactory>
		invalidateGlows();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #2282 <Method void invalidateGlows()>
	//    8   14:return          
	}

	public void setHasFixedSize(boolean flag)
	{
		mHasFixedSize = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #2007 <Field boolean mHasFixedSize>
	//    3    5:return          
	}

	public void setItemAnimator(ItemAnimator itemanimator)
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          22
		{
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2145 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mItemAnimator.setListener(((ItemAnimator.ItemAnimatorListener) (null)));
	//    6   14:aload_0         
	//    7   15:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    8   18:aconst_null     
	//    9   19:invokevirtual   #538 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		}
		mItemAnimator = itemanimator;
	//   10   22:aload_0         
	//   11   23:aload_1         
	//   12   24:putfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
		if(mItemAnimator != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  15   31:ifnull          45
			mItemAnimator.setListener(mItemAnimatorListener);
	//   16   34:aload_0         
	//   17   35:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   18   38:aload_0         
	//   19   39:getfield        #457 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//   20   42:invokevirtual   #538 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//   21   45:return          
	}

	public void setItemViewCacheSize(int i)
	{
		mRecycler.setViewCacheSize(i);
	//    0    0:aload_0         
	//    1    1:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2453 <Method void RecyclerView$Recycler.setViewCacheSize(int)>
	//    4    8:return          
	}

	public void setLayoutFrozen(boolean flag)
	{
		if(flag != mLayoutFrozen)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1859 <Field boolean mLayoutFrozen>
	//*   3    5:icmpeq          87
		{
			assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
	//    4    8:aload_0         
	//    5    9:ldc2            #2455 <String "Do not setLayoutFrozen in layout or scroll">
	//    6   12:invokevirtual   #2456 <Method void assertNotInLayoutOrScroll(String)>
			if(!flag)
	//*   7   15:iload_1         
	//*   8   16:ifne            55
			{
				mLayoutFrozen = false;
	//    9   19:aload_0         
	//   10   20:iconst_0        
	//   11   21:putfield        #1859 <Field boolean mLayoutFrozen>
				if(mLayoutWasDefered && mLayout != null && mAdapter != null)
	//*  12   24:aload_0         
	//*  13   25:getfield        #1611 <Field boolean mLayoutWasDefered>
	//*  14   28:ifeq            49
	//*  15   31:aload_0         
	//*  16   32:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  17   35:ifnull          49
	//*  18   38:aload_0         
	//*  19   39:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  20   42:ifnull          49
					requestLayout();
	//   21   45:aload_0         
	//   22   46:invokevirtual   #1512 <Method void requestLayout()>
				mLayoutWasDefered = false;
	//   23   49:aload_0         
	//   24   50:iconst_0        
	//   25   51:putfield        #1611 <Field boolean mLayoutWasDefered>
				return;
	//   26   54:return          
			}
			long l = SystemClock.uptimeMillis();
	//   27   55:invokestatic    #2461 <Method long SystemClock.uptimeMillis()>
	//   28   58:lstore_2        
			onTouchEvent(MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0));
	//   29   59:aload_0         
	//   30   60:lload_2         
	//   31   61:lload_2         
	//   32   62:iconst_3        
	//   33   63:fconst_0        
	//   34   64:fconst_0        
	//   35   65:iconst_0        
	//   36   66:invokestatic    #2464 <Method MotionEvent MotionEvent.obtain(long, long, int, float, float, int)>
	//   37   69:invokevirtual   #2466 <Method boolean onTouchEvent(MotionEvent)>
	//   38   72:pop             
			mLayoutFrozen = true;
	//   39   73:aload_0         
	//   40   74:iconst_1        
	//   41   75:putfield        #1859 <Field boolean mLayoutFrozen>
			mIgnoreMotionEventTillDown = true;
	//   42   78:aload_0         
	//   43   79:iconst_1        
	//   44   80:putfield        #2209 <Field boolean mIgnoreMotionEventTillDown>
			stopScroll();
	//   45   83:aload_0         
	//   46   84:invokevirtual   #2148 <Method void stopScroll()>
		}
	//   47   87:return          
	}

	public void setLayoutManager(LayoutManager layoutmanager)
	{
		if(layoutmanager == mLayout)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		stopScroll();
	//    5    9:aload_0         
	//    6   10:invokevirtual   #2148 <Method void stopScroll()>
		if(mLayout != null)
	//*   7   13:aload_0         
	//*   8   14:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   9   17:ifnull          98
		{
			if(mItemAnimator != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  12   24:ifnull          34
				mItemAnimator.endAnimations();
	//   13   27:aload_0         
	//   14   28:getfield        #428 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   15   31:invokevirtual   #2145 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mLayout.removeAndRecycleAllViews(mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   20   42:invokevirtual   #2319 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   21   45:aload_0         
	//   22   46:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   23   49:aload_0         
	//   24   50:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   25   53:invokevirtual   #1051 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
			mRecycler.clear();
	//   26   56:aload_0         
	//   27   57:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   28   60:invokevirtual   #2320 <Method void RecyclerView$Recycler.clear()>
			if(mIsAttached)
	//*  29   63:aload_0         
	//*  30   64:getfield        #2058 <Field boolean mIsAttached>
	//*  31   67:ifeq            82
				mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   32   70:aload_0         
	//   33   71:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   34   74:aload_0         
	//   35   75:aload_0         
	//   36   76:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   37   79:invokevirtual   #2152 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
			mLayout.setRecyclerView(((RecyclerView) (null)));
	//   38   82:aload_0         
	//   39   83:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   40   86:aconst_null     
	//   41   87:invokevirtual   #2469 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			mLayout = null;
	//   42   90:aload_0         
	//   43   91:aconst_null     
	//   44   92:putfield        #972 <Field RecyclerView$LayoutManager mLayout>
		} else
	//*  45   95:goto            105
		{
			mRecycler.clear();
	//   46   98:aload_0         
	//   47   99:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   48  102:invokevirtual   #2320 <Method void RecyclerView$Recycler.clear()>
		}
		mChildHelper.removeAllViewsUnfiltered();
	//   49  105:aload_0         
	//   50  106:getfield        #682 <Field ChildHelper mChildHelper>
	//   51  109:invokevirtual   #2472 <Method void ChildHelper.removeAllViewsUnfiltered()>
		mLayout = layoutmanager;
	//   52  112:aload_0         
	//   53  113:aload_1         
	//   54  114:putfield        #972 <Field RecyclerView$LayoutManager mLayout>
		if(layoutmanager != null)
	//*  55  117:aload_1         
	//*  56  118:ifnull          205
		{
			if(layoutmanager.mRecyclerView != null)
	//*  57  121:aload_1         
	//*  58  122:getfield        #2476 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  59  125:ifnull          182
			{
				StringBuilder stringbuilder = new StringBuilder();
	//   60  128:new             #812 <Class StringBuilder>
	//   61  131:dup             
	//   62  132:invokespecial   #813 <Method void StringBuilder()>
	//   63  135:astore_2        
				stringbuilder.append("LayoutManager ");
	//   64  136:aload_2         
	//   65  137:ldc2            #2478 <String "LayoutManager ">
	//   66  140:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   67  143:pop             
				stringbuilder.append(((Object) (layoutmanager)));
	//   68  144:aload_2         
	//   69  145:aload_1         
	//   70  146:invokevirtual   #1237 <Method StringBuilder StringBuilder.append(Object)>
	//   71  149:pop             
				stringbuilder.append(" is already attached to a RecyclerView:");
	//   72  150:aload_2         
	//   73  151:ldc2            #2480 <String " is already attached to a RecyclerView:">
	//   74  154:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   75  157:pop             
				stringbuilder.append(layoutmanager.mRecyclerView.exceptionLabel());
	//   76  158:aload_2         
	//   77  159:aload_1         
	//   78  160:getfield        #2476 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//   79  163:invokevirtual   #1242 <Method String exceptionLabel()>
	//   80  166:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//   81  169:pop             
				throw new IllegalArgumentException(stringbuilder.toString());
	//   82  170:new             #1287 <Class IllegalArgumentException>
	//   83  173:dup             
	//   84  174:aload_2         
	//   85  175:invokevirtual   #827 <Method String StringBuilder.toString()>
	//   86  178:invokespecial   #1288 <Method void IllegalArgumentException(String)>
	//   87  181:athrow          
			}
			mLayout.setRecyclerView(this);
	//   88  182:aload_0         
	//   89  183:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   90  186:aload_0         
	//   91  187:invokevirtual   #2469 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			if(mIsAttached)
	//*  92  190:aload_0         
	//*  93  191:getfield        #2058 <Field boolean mIsAttached>
	//*  94  194:ifeq            205
				mLayout.dispatchAttachedToWindow(this);
	//   95  197:aload_0         
	//   96  198:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   97  201:aload_0         
	//   98  202:invokevirtual   #2107 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
		}
		mRecycler.updateViewCacheSize();
	//   99  205:aload_0         
	//  100  206:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//  101  209:invokevirtual   #1070 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		requestLayout();
	//  102  212:aload_0         
	//  103  213:invokevirtual   #1512 <Method void requestLayout()>
	//  104  216:return          
	}

	public void setNestedScrollingEnabled(boolean flag)
	{
		getScrollingChildHelper().setNestedScrollingEnabled(flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2481 <Method void NestedScrollingChildHelper.setNestedScrollingEnabled(boolean)>
	//    4    8:return          
	}

	public void setOnFlingListener(OnFlingListener onflinglistener)
	{
		mOnFlingListener = onflinglistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1866 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    3    5:return          
	}

	public void setOnScrollListener(OnScrollListener onscrolllistener)
	{
		mScrollListener = onscrolllistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1716 <Field RecyclerView$OnScrollListener mScrollListener>
	//    3    5:return          
	}

	public void setPreserveFocusAfterLayout(boolean flag)
	{
		mPreserveFocusAfterLayout = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #439 <Field boolean mPreserveFocusAfterLayout>
	//    3    5:return          
	}

	public void setRecycledViewPool(RecycledViewPool recycledviewpool)
	{
		mRecycler.setRecycledViewPool(recycledviewpool);
	//    0    0:aload_0         
	//    1    1:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2489 <Method void RecyclerView$Recycler.setRecycledViewPool(RecyclerView$RecycledViewPool)>
	//    4    8:return          
	}

	public void setRecyclerListener(RecyclerListener recyclerlistener)
	{
		mRecyclerListener = recyclerlistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #2493 <Field RecyclerView$RecyclerListener mRecyclerListener>
	//    3    5:return          
	}

	void setScrollState(int i)
	{
		if(i == mScrollState)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #430 <Field int mScrollState>
	//*   3    5:icmpne          9
			return;
	//    4    8:return          
		mScrollState = i;
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:putfield        #430 <Field int mScrollState>
		if(i != 2)
	//*   8   14:iload_1         
	//*   9   15:iconst_2        
	//*  10   16:icmpeq          23
			stopScrollersInternal();
	//   11   19:aload_0         
	//   12   20:invokespecial   #2495 <Method void stopScrollersInternal()>
		dispatchOnScrollStateChanged(i);
	//   13   23:aload_0         
	//   14   24:iload_1         
	//   15   25:invokevirtual   #2497 <Method void dispatchOnScrollStateChanged(int)>
	//   16   28:return          
	}

	public void setScrollingTouchSlop(int i)
	{
		ViewConfiguration viewconfiguration = ViewConfiguration.get(getContext());
	//    0    0:aload_0         
	//    1    1:invokevirtual   #558 <Method Context getContext()>
	//    2    4:invokestatic    #503 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//    3    7:astore_2        
		switch(i)
	//*   4    8:iload_1         
		{
	//*   5    9:tableswitch     0 1: default 32
	//	               0 84
	//	               1 75
	//*   6   32:new             #812 <Class StringBuilder>
	//*   7   35:dup             
	//*   8   36:invokespecial   #813 <Method void StringBuilder()>
	//*   9   39:astore_3        
	//*  10   40:aload_3         
	//*  11   41:ldc2            #2500 <String "setScrollingTouchSlop(): bad argument constant ">
	//*  12   44:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//*  13   47:pop             
	//*  14   48:aload_3         
	//*  15   49:iload_1         
	//*  16   50:invokevirtual   #1285 <Method StringBuilder StringBuilder.append(int)>
	//*  17   53:pop             
	//*  18   54:aload_3         
	//*  19   55:ldc2            #2502 <String "; using default value">
	//*  20   58:invokevirtual   #820 <Method StringBuilder StringBuilder.append(String)>
	//*  21   61:pop             
	//*  22   62:ldc1            #178 <String "RecyclerView">
	//*  23   64:aload_3         
	//*  24   65:invokevirtual   #827 <Method String StringBuilder.toString()>
	//*  25   68:invokestatic    #2408 <Method int Log.w(String, String)>
	//*  26   71:pop             
	//*  27   72:goto            84
		case 1: // '\001'
			mTouchSlop = viewconfiguration.getScaledPagingTouchSlop();
	//   28   75:aload_0         
	//   29   76:aload_2         
	//   30   77:invokevirtual   #2505 <Method int ViewConfiguration.getScaledPagingTouchSlop()>
	//   31   80:putfield        #509 <Field int mTouchSlop>
			return;
	//   32   83:return          

		default:
			StringBuilder stringbuilder = new StringBuilder();
			stringbuilder.append("setScrollingTouchSlop(): bad argument constant ");
			stringbuilder.append(i);
			stringbuilder.append("; using default value");
			Log.w("RecyclerView", stringbuilder.toString());
			// fall through

		case 0: // '\0'
			mTouchSlop = viewconfiguration.getScaledTouchSlop();
	//   33   84:aload_0         
	//   34   85:aload_2         
	//   35   86:invokevirtual   #507 <Method int ViewConfiguration.getScaledTouchSlop()>
	//   36   89:putfield        #509 <Field int mTouchSlop>
			return;
	//   37   92:return          
		}
	}

	public void setViewCacheExtension(ViewCacheExtension viewcacheextension)
	{
		mRecycler.setViewCacheExtension(viewcacheextension);
	//    0    0:aload_0         
	//    1    1:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2509 <Method void RecyclerView$Recycler.setViewCacheExtension(RecyclerView$ViewCacheExtension)>
	//    4    8:return          
	}

	boolean shouldDeferAccessibilityEvent(AccessibilityEvent accessibilityevent)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1537 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            41
		{
			int i;
			if(accessibilityevent != null)
	//*   3    7:aload_1         
	//*   4    8:ifnull          19
				i = AccessibilityEventCompat.getContentChangeTypes(accessibilityevent);
	//    5   11:aload_1         
	//    6   12:invokestatic    #2513 <Method int AccessibilityEventCompat.getContentChangeTypes(AccessibilityEvent)>
	//    7   15:istore_2        
			else
	//*   8   16:goto            21
				i = 0;
	//    9   19:iconst_0        
	//   10   20:istore_2        
			int j = i;
	//   11   21:iload_2         
	//   12   22:istore_3        
			if(i == 0)
	//*  13   23:iload_2         
	//*  14   24:ifne            29
				j = 0;
	//   15   27:iconst_0        
	//   16   28:istore_3        
			mEatenAccessibilityChangeFlags = j | mEatenAccessibilityChangeFlags;
	//   17   29:aload_0         
	//   18   30:iload_3         
	//   19   31:aload_0         
	//   20   32:getfield        #847 <Field int mEatenAccessibilityChangeFlags>
	//   21   35:ior             
	//   22   36:putfield        #847 <Field int mEatenAccessibilityChangeFlags>
			return true;
	//   23   39:iconst_1        
	//   24   40:ireturn         
		} else
		{
			return false;
	//   25   41:iconst_0        
	//   26   42:ireturn         
		}
	}

	public void smoothScrollBy(int i, int j)
	{
		smoothScrollBy(i, j, ((Interpolator) (null)));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:aconst_null     
	//    4    4:invokevirtual   #2517 <Method void smoothScrollBy(int, int, Interpolator)>
	//    5    7:return          
	}

	public void smoothScrollBy(int i, int j, Interpolator interpolator)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #178 <String "RecyclerView">
	//    4    9:ldc2            #2519 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1257 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  10   21:ifeq            25
			return;
	//   11   24:return          
		if(!mLayout.canScrollHorizontally())
	//*  12   25:aload_0         
	//*  13   26:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  14   29:invokevirtual   #1575 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  15   32:ifne            37
			i = 0;
	//   16   35:iconst_0        
	//   17   36:istore_1        
		if(!mLayout.canScrollVertically())
	//*  18   37:aload_0         
	//*  19   38:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  20   41:invokevirtual   #1588 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  21   44:ifne            49
			j = 0;
	//   22   47:iconst_0        
	//   23   48:istore_2        
		if(i != 0 || j != 0)
	//*  24   49:iload_1         
	//*  25   50:ifne            57
	//*  26   53:iload_2         
	//*  27   54:ifeq            67
			mViewFlinger.smoothScrollBy(i, j, interpolator);
	//   28   57:aload_0         
	//   29   58:getfield        #442 <Field RecyclerView$ViewFlinger mViewFlinger>
	//   30   61:iload_1         
	//   31   62:iload_2         
	//   32   63:aload_3         
	//   33   64:invokevirtual   #2520 <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, Interpolator)>
	//   34   67:return          
	}

	public void smoothScrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1859 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		if(mLayout == null)
	//*   4    8:aload_0         
	//*   5    9:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*   6   12:ifnonnull       25
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   15:ldc1            #178 <String "RecyclerView">
	//    8   17:ldc2            #2519 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   20:invokestatic    #1257 <Method int Log.e(String, String)>
	//   10   23:pop             
			return;
	//   11   24:return          
		} else
		{
			mLayout.smoothScrollToPosition(this, mState, i);
	//   12   25:aload_0         
	//   13   26:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:aload_0         
	//   15   30:aload_0         
	//   16   31:getfield        #450 <Field RecyclerView$State mState>
	//   17   34:iload_1         
	//   18   35:invokevirtual   #2524 <Method void RecyclerView$LayoutManager.smoothScrollToPosition(RecyclerView, RecyclerView$State, int)>
			return;
	//   19   38:return          
		}
	}

	void startInterceptRequestLayout()
	{
		mInterceptRequestLayoutDepth = mInterceptRequestLayoutDepth + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #412 <Field int mInterceptRequestLayoutDepth>
		if(mInterceptRequestLayoutDepth == 1 && !mLayoutFrozen)
	//*   6   10:aload_0         
	//*   7   11:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//*   8   14:iconst_1        
	//*   9   15:icmpne          30
	//*  10   18:aload_0         
	//*  11   19:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  12   22:ifne            30
			mLayoutWasDefered = false;
	//   13   25:aload_0         
	//   14   26:iconst_0        
	//   15   27:putfield        #1611 <Field boolean mLayoutWasDefered>
	//   16   30:return          
	}

	public boolean startNestedScroll(int i)
	{
		return getScrollingChildHelper().startNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2526 <Method boolean NestedScrollingChildHelper.startNestedScroll(int)>
	//    4    8:ireturn         
	}

	public boolean startNestedScroll(int i, int j)
	{
		return getScrollingChildHelper().startNestedScroll(i, j);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #2527 <Method boolean NestedScrollingChildHelper.startNestedScroll(int, int)>
	//    5    9:ireturn         
	}

	void stopInterceptRequestLayout(boolean flag)
	{
		if(mInterceptRequestLayoutDepth < 1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//*   2    4:iconst_1        
	//*   3    5:icmpge          13
			mInterceptRequestLayoutDepth = 1;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #412 <Field int mInterceptRequestLayoutDepth>
		if(!flag && !mLayoutFrozen)
	//*   7   13:iload_1         
	//*   8   14:ifne            29
	//*   9   17:aload_0         
	//*  10   18:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  11   21:ifne            29
			mLayoutWasDefered = false;
	//   12   24:aload_0         
	//   13   25:iconst_0        
	//   14   26:putfield        #1611 <Field boolean mLayoutWasDefered>
		if(mInterceptRequestLayoutDepth == 1)
	//*  15   29:aload_0         
	//*  16   30:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//*  17   33:iconst_1        
	//*  18   34:icmpne          85
		{
			if(flag && mLayoutWasDefered && !mLayoutFrozen && mLayout != null && mAdapter != null)
	//*  19   37:iload_1         
	//*  20   38:ifeq            73
	//*  21   41:aload_0         
	//*  22   42:getfield        #1611 <Field boolean mLayoutWasDefered>
	//*  23   45:ifeq            73
	//*  24   48:aload_0         
	//*  25   49:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  26   52:ifne            73
	//*  27   55:aload_0         
	//*  28   56:getfield        #972 <Field RecyclerView$LayoutManager mLayout>
	//*  29   59:ifnull          73
	//*  30   62:aload_0         
	//*  31   63:getfield        #909 <Field RecyclerView$Adapter mAdapter>
	//*  32   66:ifnull          73
				dispatchLayout();
	//   33   69:aload_0         
	//   34   70:invokevirtual   #1616 <Method void dispatchLayout()>
			if(!mLayoutFrozen)
	//*  35   73:aload_0         
	//*  36   74:getfield        #1859 <Field boolean mLayoutFrozen>
	//*  37   77:ifne            85
				mLayoutWasDefered = false;
	//   38   80:aload_0         
	//   39   81:iconst_0        
	//   40   82:putfield        #1611 <Field boolean mLayoutWasDefered>
		}
		mInterceptRequestLayoutDepth = mInterceptRequestLayoutDepth - 1;
	//   41   85:aload_0         
	//   42   86:aload_0         
	//   43   87:getfield        #412 <Field int mInterceptRequestLayoutDepth>
	//   44   90:iconst_1        
	//   45   91:isub            
	//   46   92:putfield        #412 <Field int mInterceptRequestLayoutDepth>
	//   47   95:return          
	}

	public void stopNestedScroll()
	{
		getScrollingChildHelper().stopNestedScroll();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2529 <Method void NestedScrollingChildHelper.stopNestedScroll()>
	//    3    7:return          
	}

	public void stopNestedScroll(int i)
	{
		getScrollingChildHelper().stopNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1689 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2530 <Method void NestedScrollingChildHelper.stopNestedScroll(int)>
	//    4    8:return          
	}

	public void stopScroll()
	{
		setScrollState(0);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #726 <Method void setScrollState(int)>
		stopScrollersInternal();
	//    3    5:aload_0         
	//    4    6:invokespecial   #2495 <Method void stopScrollersInternal()>
	//    5    9:return          
	}

	public void swapAdapter(Adapter adapter, boolean flag)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2424 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, true, flag);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_1        
	//    6    8:iload_2         
	//    7    9:invokespecial   #2426 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		processDataSetCompletelyChanged(true);
	//    8   12:aload_0         
	//    9   13:iconst_1        
	//   10   14:invokevirtual   #2428 <Method void processDataSetCompletelyChanged(boolean)>
		requestLayout();
	//   11   17:aload_0         
	//   12   18:invokevirtual   #1512 <Method void requestLayout()>
	//   13   21:return          
	}

	void viewRangeUpdate(int i, int j, Object obj)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #682 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1561 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore          4
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          106
		{
			View view = mChildHelper.getUnfilteredChildAt(k);
	//    9   19:aload_0         
	//   10   20:getfield        #682 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1564 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:astore          6
			ViewHolder viewholder = getChildViewHolderInt(view);
	//   14   30:aload           6
	//   15   32:invokestatic    #925 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   35:astore          7
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i && viewholder.mPosition < i + j)
	//*  17   37:aload           7
	//*  18   39:ifnull          97
	//*  19   42:aload           7
	//*  20   44:invokevirtual   #928 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   47:ifeq            53
	//*  22   50:goto            97
	//*  23   53:aload           7
	//*  24   55:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  25   58:iload_1         
	//*  26   59:icmplt          97
	//*  27   62:aload           7
	//*  28   64:getfield        #1854 <Field int RecyclerView$ViewHolder.mPosition>
	//*  29   67:iload_1         
	//*  30   68:iload_2         
	//*  31   69:iadd            
	//*  32   70:icmpge          97
			{
				viewholder.addFlags(2);
	//   33   73:aload           7
	//   34   75:iconst_2        
	//   35   76:invokevirtual   #2071 <Method void RecyclerView$ViewHolder.addFlags(int)>
				viewholder.addChangePayload(obj);
	//   36   79:aload           7
	//   37   81:aload_3         
	//   38   82:invokevirtual   #2537 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				((LayoutParams)view.getLayoutParams()).mInsetsDirty = true;
	//   39   85:aload           6
	//   40   87:invokevirtual   #686 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   41   90:checkcast       #74  <Class RecyclerView$LayoutParams>
	//   42   93:iconst_1        
	//   43   94:putfield        #1410 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}
		}

	//   44   97:iload           4
	//   45   99:iconst_1        
	//   46  100:iadd            
	//   47  101:istore          4
	//*  48  103:goto            12
		mRecycler.viewRangeUpdate(i, j);
	//   49  106:aload_0         
	//   50  107:getfield        #383 <Field RecyclerView$Recycler mRecycler>
	//   51  110:iload_1         
	//   52  111:iload_2         
	//   53  112:invokevirtual   #2539 <Method void RecyclerView$Recycler.viewRangeUpdate(int, int)>
	//   54  115:return          
	}

	static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC;
	private static final boolean ALLOW_THREAD_GAP_WORK;
	private static final int CLIP_TO_PADDING_ATTR[] = {
		0x10100eb
	};
	static final boolean DEBUG = false;
	static final int DEFAULT_ORIENTATION = 1;
	static final boolean DISPATCH_TEMP_DETACH = false;
	private static final boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION;
	static final boolean FORCE_INVALIDATE_DISPLAY_LIST;
	static final long FOREVER_NS = 0xffffffffL;
	public static final int HORIZONTAL = 0;
	private static final boolean IGNORE_DETACHED_FOCUSED_CHILD;
	private static final int INVALID_POINTER = -1;
	public static final int INVALID_TYPE = -1;
	private static final Class LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE[];
	static final int MAX_SCROLL_DURATION = 2000;
	private static final int NESTED_SCROLLING_ATTRS[] = {
		0x1010436
	};
	public static final long NO_ID = -1L;
	public static final int NO_POSITION = -1;
	static final boolean POST_UPDATES_ON_ANIMATION;
	public static final int SCROLL_STATE_DRAGGING = 1;
	public static final int SCROLL_STATE_IDLE = 0;
	public static final int SCROLL_STATE_SETTLING = 2;
	static final String TAG = "RecyclerView";
	public static final int TOUCH_SLOP_DEFAULT = 0;
	public static final int TOUCH_SLOP_PAGING = 1;
	static final String TRACE_BIND_VIEW_TAG = "RV OnBindView";
	static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
	private static final String TRACE_HANDLE_ADAPTER_UPDATES_TAG = "RV PartialInvalidate";
	static final String TRACE_NESTED_PREFETCH_TAG = "RV Nested Prefetch";
	private static final String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = "RV FullInvalidate";
	private static final String TRACE_ON_LAYOUT_TAG = "RV OnLayout";
	static final String TRACE_PREFETCH_TAG = "RV Prefetch";
	static final String TRACE_SCROLL_TAG = "RV Scroll";
	static final boolean VERBOSE_TRACING = false;
	public static final int VERTICAL = 1;
	static final Interpolator sQuinticInterpolator = new Interpolator() {

		public float getInterpolation(float f)
		{
			f--;
		//    0    0:fload_1         
		//    1    1:fconst_1        
		//    2    2:fsub            
		//    3    3:fstore_1        
			return f * f * f * f * f + 1.0F;
		//    4    4:fload_1         
		//    5    5:fload_1         
		//    6    6:fmul            
		//    7    7:fload_1         
		//    8    8:fmul            
		//    9    9:fload_1         
		//   10   10:fmul            
		//   11   11:fload_1         
		//   12   12:fmul            
		//   13   13:fconst_1        
		//   14   14:fadd            
		//   15   15:freturn         
		}

	}
;
	RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
	private final AccessibilityManager mAccessibilityManager;
	private OnItemTouchListener mActiveOnItemTouchListener;
	Adapter mAdapter;
	AdapterHelper mAdapterHelper;
	boolean mAdapterUpdateDuringMeasure;
	private EdgeEffect mBottomGlow;
	private ChildDrawingOrderCallback mChildDrawingOrderCallback;
	ChildHelper mChildHelper;
	boolean mClipToPadding;
	boolean mDataSetHasChangedAfterLayout;
	boolean mDispatchItemsChangedEvent;
	private int mDispatchScrollCounter;
	private int mEatenAccessibilityChangeFlags;
	private EdgeEffectFactory mEdgeEffectFactory;
	boolean mEnableFastScroller;
	boolean mFirstLayoutComplete;
	GapWorker mGapWorker;
	boolean mHasFixedSize;
	private boolean mIgnoreMotionEventTillDown;
	private int mInitialTouchX;
	private int mInitialTouchY;
	private int mInterceptRequestLayoutDepth;
	boolean mIsAttached;
	ItemAnimator mItemAnimator;
	private ItemAnimator.ItemAnimatorListener mItemAnimatorListener;
	private Runnable mItemAnimatorRunner = new Runnable() {

		public void run()
		{
			if(mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #14  <Field RecyclerView this$0>
		//*   2    4:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          20
				mItemAnimator.runPendingAnimations();
		//    4   10:aload_0         
		//    5   11:getfield        #14  <Field RecyclerView this$0>
		//    6   14:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:invokevirtual   #28  <Method void RecyclerView$ItemAnimator.runPendingAnimations()>
			mPostedAnimatorRunner = false;
		//    8   20:aload_0         
		//    9   21:getfield        #14  <Field RecyclerView this$0>
		//   10   24:iconst_0        
		//   11   25:putfield        #32  <Field boolean RecyclerView.mPostedAnimatorRunner>
		//   12   28:return          
		}

		final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
	}
;
	final ArrayList mItemDecorations;
	boolean mItemsAddedOrRemoved;
	boolean mItemsChanged;
	private int mLastTouchX;
	private int mLastTouchY;
	LayoutManager mLayout;
	boolean mLayoutFrozen;
	private int mLayoutOrScrollCounter;
	boolean mLayoutWasDefered;
	private EdgeEffect mLeftGlow;
	private final int mMaxFlingVelocity;
	private final int mMinFlingVelocity;
	private final int mMinMaxLayoutPositions[];
	private final int mNestedOffsets[];
	private final RecyclerViewDataObserver mObserver;
	private List mOnChildAttachStateListeners;
	private OnFlingListener mOnFlingListener;
	private final ArrayList mOnItemTouchListeners;
	final List mPendingAccessibilityImportanceChange;
	private SavedState mPendingSavedState;
	boolean mPostedAnimatorRunner;
	GapWorker.LayoutPrefetchRegistryImpl mPrefetchRegistry;
	private boolean mPreserveFocusAfterLayout;
	final Recycler mRecycler;
	RecyclerListener mRecyclerListener;
	private EdgeEffect mRightGlow;
	private float mScaledHorizontalScrollFactor;
	private float mScaledVerticalScrollFactor;
	private final int mScrollConsumed[];
	private OnScrollListener mScrollListener;
	private List mScrollListeners;
	private final int mScrollOffset[];
	private int mScrollPointerId;
	private int mScrollState;
	private NestedScrollingChildHelper mScrollingChildHelper;
	final State mState;
	final Rect mTempRect;
	private final Rect mTempRect2;
	final RectF mTempRectF;
	private EdgeEffect mTopGlow;
	private int mTouchSlop;
	final Runnable mUpdateChildViewsRunnable;
	private VelocityTracker mVelocityTracker;
	final ViewFlinger mViewFlinger;
	private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback;
	final ViewInfoStore mViewInfoStore;

	static 
	{
	//    0    0:iconst_1        
	//    1    1:newarray        int[]
	//    2    3:dup             
	//    3    4:iconst_0        
	//    4    5:ldc2            #323 <Int 0x1010436>
	//    5    8:iastore         
	//    6    9:putstatic       #325 <Field int[] NESTED_SCROLLING_ATTRS>
	//    7   12:iconst_1        
	//    8   13:newarray        int[]
	//    9   15:dup             
	//   10   16:iconst_0        
	//   11   17:ldc2            #326 <Int 0x10100eb>
	//   12   20:iastore         
	//   13   21:putstatic       #328 <Field int[] CLIP_TO_PADDING_ATTR>
		boolean flag;
		if(android.os.Build.VERSION.SDK_INT != 18 && android.os.Build.VERSION.SDK_INT != 19 && android.os.Build.VERSION.SDK_INT != 20)
	//*  14   24:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  15   27:bipush          18
	//*  16   29:icmpeq          56
	//*  17   32:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  18   35:bipush          19
	//*  19   37:icmpeq          56
	//*  20   40:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  21   43:bipush          20
	//*  22   45:icmpne          51
	//*  23   48:goto            56
			flag = false;
	//   24   51:iconst_0        
	//   25   52:istore_0        
		else
	//*  26   53:goto            58
			flag = true;
	//   27   56:iconst_1        
	//   28   57:istore_0        
		FORCE_INVALIDATE_DISPLAY_LIST = flag;
	//   29   58:iload_0         
	//   30   59:putstatic       #335 <Field boolean FORCE_INVALIDATE_DISPLAY_LIST>
		if(android.os.Build.VERSION.SDK_INT >= 23)
	//*  31   62:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  32   65:bipush          23
	//*  33   67:icmplt          75
			flag = true;
	//   34   70:iconst_1        
	//   35   71:istore_0        
		else
	//*  36   72:goto            77
			flag = false;
	//   37   75:iconst_0        
	//   38   76:istore_0        
		ALLOW_SIZE_IN_UNSPECIFIED_SPEC = flag;
	//   39   77:iload_0         
	//   40   78:putstatic       #337 <Field boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		if(android.os.Build.VERSION.SDK_INT >= 16)
	//*  41   81:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  42   84:bipush          16
	//*  43   86:icmplt          94
			flag = true;
	//   44   89:iconst_1        
	//   45   90:istore_0        
		else
	//*  46   91:goto            96
			flag = false;
	//   47   94:iconst_0        
	//   48   95:istore_0        
		POST_UPDATES_ON_ANIMATION = flag;
	//   49   96:iload_0         
	//   50   97:putstatic       #339 <Field boolean POST_UPDATES_ON_ANIMATION>
		if(android.os.Build.VERSION.SDK_INT >= 21)
	//*  51  100:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  52  103:bipush          21
	//*  53  105:icmplt          113
			flag = true;
	//   54  108:iconst_1        
	//   55  109:istore_0        
		else
	//*  56  110:goto            115
			flag = false;
	//   57  113:iconst_0        
	//   58  114:istore_0        
		ALLOW_THREAD_GAP_WORK = flag;
	//   59  115:iload_0         
	//   60  116:putstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  61  119:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  62  122:bipush          15
	//*  63  124:icmpgt          132
			flag = true;
	//   64  127:iconst_1        
	//   65  128:istore_0        
		else
	//*  66  129:goto            134
			flag = false;
	//   67  132:iconst_0        
	//   68  133:istore_0        
		FORCE_ABS_FOCUS_SEARCH_DIRECTION = flag;
	//   69  134:iload_0         
	//   70  135:putstatic       #343 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
		if(android.os.Build.VERSION.SDK_INT <= 15)
	//*  71  138:getstatic       #333 <Field int android.os.Build$VERSION.SDK_INT>
	//*  72  141:bipush          15
	//*  73  143:icmpgt          151
			flag = true;
	//   74  146:iconst_1        
	//   75  147:istore_0        
		else
	//*  76  148:goto            153
			flag = false;
	//   77  151:iconst_0        
	//   78  152:istore_0        
		IGNORE_DETACHED_FOCUSED_CHILD = flag;
	//   79  153:iload_0         
	//   80  154:putstatic       #345 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
		LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE = (new Class[] {
			android/content/Context, android/util/AttributeSet, Integer.TYPE, Integer.TYPE
		});
	//   81  157:iconst_4        
	//   82  158:anewarray       Class[]
	//   83  161:dup             
	//   84  162:iconst_0        
	//   85  163:ldc2            #349 <Class Context>
	//   86  166:aastore         
	//   87  167:dup             
	//   88  168:iconst_1        
	//   89  169:ldc2            #351 <Class AttributeSet>
	//   90  172:aastore         
	//   91  173:dup             
	//   92  174:iconst_2        
	//   93  175:getstatic       #357 <Field Class Integer.TYPE>
	//   94  178:aastore         
	//   95  179:dup             
	//   96  180:iconst_3        
	//   97  181:getstatic       #357 <Field Class Integer.TYPE>
	//   98  184:aastore         
	//   99  185:putstatic       #359 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//  100  188:new             #14  <Class RecyclerView$3>
	//  101  191:dup             
	//  102  192:invokespecial   #362 <Method void RecyclerView$3()>
	//  103  195:putstatic       #364 <Field Interpolator sQuinticInterpolator>
	//* 104  198:return          
	}


/*
	static void access$000(RecyclerView recyclerview, View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
	{
		recyclerview.attachViewToParent(view, i, layoutparams);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iload_2         
	//    3    3:aload_3         
	//    4    4:invokevirtual   #638 <Method void attachViewToParent(View, int, android.view.ViewGroup$LayoutParams)>
		return;
	//    5    7:return          
	}

*/


/*
	static void access$100(RecyclerView recyclerview, int i)
	{
		recyclerview.detachViewFromParent(i);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:invokevirtual   #643 <Method void detachViewFromParent(int)>
		return;
	//    3    5:return          
	}

*/


/*
	static void access$1200(RecyclerView recyclerview, int i, int j)
	{
		recyclerview.setMeasuredDimension(i, j);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:invokevirtual   #649 <Method void setMeasuredDimension(int, int)>
		return;
	//    4    6:return          
	}

*/


/*
	static int[] access$500(RecyclerView recyclerview)
	{
		return recyclerview.mScrollConsumed;
	//    0    0:aload_0         
	//    1    1:getfield        #465 <Field int[] mScrollConsumed>
	//    2    4:areturn         
	}

*/


/*
	static boolean access$700(RecyclerView recyclerview)
	{
		return recyclerview.awakenScrollBars();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #657 <Method boolean awakenScrollBars()>
	//    2    4:ireturn         
	}

*/


/*
	static boolean access$800()
	{
		return ALLOW_THREAD_GAP_WORK;
	//    0    0:getstatic       #341 <Field boolean ALLOW_THREAD_GAP_WORK>
	//    1    3:ireturn         
	}

*/

	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$1

/* anonymous class */
	class LayoutManager._cls1
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedRight(view) + layoutparams.rightMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedRight(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.rightMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedLeft(view) - layoutparams.leftMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedLeft(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.leftMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getWidth() - getPaddingRight();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getWidth()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingRight()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingLeft()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}


	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$2

/* anonymous class */
	class LayoutManager._cls2
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedBottom(view) + layoutparams.bottomMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedBottom(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.bottomMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedTop(view) - layoutparams.topMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedTop(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.topMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getHeight() - getPaddingBottom();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getHeight()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingBottom()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingTop();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingTop()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}

}
