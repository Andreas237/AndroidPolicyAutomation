// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate safe 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.*;
import android.support.v4.os.TraceCompat;
import android.support.v4.view.*;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.*;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import java.lang.annotation.Annotation;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package android.support.v7.widget:
//			ViewInfoStore, DefaultItemAnimator, RecyclerViewAccessibilityDelegate, ChildHelper, 
//			AdapterHelper, FastScroller, GapWorker, ViewBoundsCheck

public class RecyclerView extends ViewGroup
	implements ScrollingView, NestedScrollingChild2
{
	public static abstract class Adapter
	{

		public final void bindViewHolder(ViewHolder viewholder, int i)
		{
			viewholder.mPosition = i;
		//    0    0:aload_1         
		//    1    1:iload_2         
		//    2    2:putfield        #32  <Field int RecyclerView$ViewHolder.mPosition>
			if(hasStableIds())
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #36  <Method boolean hasStableIds()>
		//*   5    9:ifeq            21
				viewholder.mItemId = getItemId(i);
		//    6   12:aload_1         
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:invokevirtual   #40  <Method long getItemId(int)>
		//   10   18:putfield        #44  <Field long RecyclerView$ViewHolder.mItemId>
			viewholder.setFlags(1, 519);
		//   11   21:aload_1         
		//   12   22:iconst_1        
		//   13   23:sipush          519
		//   14   26:invokevirtual   #48  <Method void RecyclerView$ViewHolder.setFlags(int, int)>
			TraceCompat.beginSection("RV OnBindView");
		//   15   29:ldc1            #50  <String "RV OnBindView">
		//   16   31:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			onBindViewHolder(viewholder, i, viewholder.getUnmodifiedPayloads());
		//   17   34:aload_0         
		//   18   35:aload_1         
		//   19   36:iload_2         
		//   20   37:aload_1         
		//   21   38:invokevirtual   #60  <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//   22   41:invokevirtual   #64  <Method void onBindViewHolder(RecyclerView$ViewHolder, int, List)>
			viewholder.clearPayload();
		//   23   44:aload_1         
		//   24   45:invokevirtual   #67  <Method void RecyclerView$ViewHolder.clearPayload()>
			viewholder = ((ViewHolder) (viewholder.itemView.getLayoutParams()));
		//   25   48:aload_1         
		//   26   49:getfield        #71  <Field View RecyclerView$ViewHolder.itemView>
		//   27   52:invokevirtual   #77  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   28   55:astore_1        
			if(viewholder instanceof LayoutParams)
		//*  29   56:aload_1         
		//*  30   57:instanceof      #79  <Class RecyclerView$LayoutParams>
		//*  31   60:ifeq            71
				((LayoutParams)viewholder).mInsetsDirty = true;
		//   32   63:aload_1         
		//   33   64:checkcast       #79  <Class RecyclerView$LayoutParams>
		//   34   67:iconst_1        
		//   35   68:putfield        #82  <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			TraceCompat.endSection();
		//   36   71:invokestatic    #85  <Method void TraceCompat.endSection()>
		//   37   74:return          
		}

		public final ViewHolder createViewHolder(ViewGroup viewgroup, int i)
		{
			TraceCompat.beginSection("RV CreateView");
		//    0    0:ldc1            #91  <String "RV CreateView">
		//    1    2:invokestatic    #56  <Method void TraceCompat.beginSection(String)>
			viewgroup = ((ViewGroup) (onCreateViewHolder(viewgroup, i)));
		//    2    5:aload_0         
		//    3    6:aload_1         
		//    4    7:iload_2         
		//    5    8:invokevirtual   #94  <Method RecyclerView$ViewHolder onCreateViewHolder(ViewGroup, int)>
		//    6   11:astore_1        
			viewgroup.mItemViewType = i;
		//    7   12:aload_1         
		//    8   13:iload_2         
		//    9   14:putfield        #97  <Field int RecyclerView$ViewHolder.mItemViewType>
			TraceCompat.endSection();
		//   10   17:invokestatic    #85  <Method void TraceCompat.endSection()>
			return ((ViewHolder) (viewgroup));
		//   11   20:aload_1         
		//   12   21:areturn         
		}

		public abstract int getItemCount();

		public long getItemId(int i)
		{
			return -1L;
		//    0    0:ldc2w           #101 <Long -1L>
		//    1    3:lreturn         
		}

		public int getItemViewType(int i)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public final boolean hasObservers()
		{
			return mObservable.hasObservers();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #107 <Method boolean RecyclerView$AdapterDataObservable.hasObservers()>
		//    3    7:ireturn         
		}

		public final boolean hasStableIds()
		{
			return mHasStableIds;
		//    0    0:aload_0         
		//    1    1:getfield        #23  <Field boolean mHasStableIds>
		//    2    4:ireturn         
		}

		public final void notifyDataSetChanged()
		{
			mObservable.notifyChanged();
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:invokevirtual   #111 <Method void RecyclerView$AdapterDataObservable.notifyChanged()>
		//    3    7:return          
		}

		public final void notifyItemChanged(int i)
		{
			mObservable.notifyItemRangeChanged(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemChanged(int i, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, 1, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:aload_2         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemInserted(int i)
		{
			mObservable.notifyItemRangeInserted(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemMoved(int i, int j)
		{
			mObservable.notifyItemMoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #127 <Method void RecyclerView$AdapterDataObservable.notifyItemMoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j)
		{
			mObservable.notifyItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #116 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeChanged(int i, int j, Object obj)
		{
			mObservable.notifyItemRangeChanged(i, j, obj);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:aload_3         
		//    5    7:invokevirtual   #120 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int, int, Object)>
		//    6   10:return          
		}

		public final void notifyItemRangeInserted(int i, int j)
		{
			mObservable.notifyItemRangeInserted(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #124 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeInserted(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRangeRemoved(int i, int j)
		{
			mObservable.notifyItemRangeRemoved(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public final void notifyItemRemoved(int i)
		{
			mObservable.notifyItemRangeRemoved(i, 1);
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:iload_1         
		//    3    5:iconst_1        
		//    4    6:invokevirtual   #130 <Method void RecyclerView$AdapterDataObservable.notifyItemRangeRemoved(int, int)>
		//    5    9:return          
		}

		public void onAttachedToRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public abstract void onBindViewHolder(ViewHolder viewholder, int i);

		public void onBindViewHolder(ViewHolder viewholder, int i, List list)
		{
			onBindViewHolder(viewholder, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #135 <Method void onBindViewHolder(RecyclerView$ViewHolder, int)>
		//    4    6:return          
		}

		public abstract ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i);

		public void onDetachedFromRecyclerView(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public boolean onFailedToRecycleView(ViewHolder viewholder)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onViewAttachedToWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewDetachedFromWindow(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onViewRecycled(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void registerAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.registerObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #151 <Method void RecyclerView$AdapterDataObservable.registerObserver(Object)>
		//    4    8:return          
		}

		public void setHasStableIds(boolean flag)
		{
			if(hasObservers())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #154 <Method boolean hasObservers()>
		//*   2    4:ifeq            17
			{
				throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
		//    3    7:new             #156 <Class IllegalStateException>
		//    4   10:dup             
		//    5   11:ldc1            #158 <String "Cannot change whether this adapter has stable IDs while the adapter has registered observers.">
		//    6   13:invokespecial   #160 <Method void IllegalStateException(String)>
		//    7   16:athrow          
			} else
			{
				mHasStableIds = flag;
		//    8   17:aload_0         
		//    9   18:iload_1         
		//   10   19:putfield        #23  <Field boolean mHasStableIds>
				return;
		//   11   22:return          
			}
		}

		public void unregisterAdapterDataObserver(AdapterDataObserver adapterdataobserver)
		{
			mObservable.unregisterObserver(((Object) (adapterdataobserver)));
		//    0    0:aload_0         
		//    1    1:getfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #164 <Method void RecyclerView$AdapterDataObservable.unregisterObserver(Object)>
		//    4    8:return          
		}

		private boolean mHasStableIds;
		private final AdapterDataObservable mObservable = new AdapterDataObservable();

		public Adapter()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #16  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #18  <Class RecyclerView$AdapterDataObservable>
		//    4    8:dup             
		//    5    9:invokespecial   #19  <Method void RecyclerView$AdapterDataObservable()>
		//    6   12:putfield        #21  <Field RecyclerView$AdapterDataObservable mObservable>
			mHasStableIds = false;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #23  <Field boolean mHasStableIds>
		//   10   20:return          
		}
	}

	static class AdapterDataObservable extends Observable
	{

		public boolean hasObservers()
		{
			return !mObservers.isEmpty();
		//    0    0:aload_0         
		//    1    1:getfield        #19  <Field ArrayList mObservers>
		//    2    4:invokevirtual   #24  <Method boolean ArrayList.isEmpty()>
		//    3    7:ifne            12
		//    4   10:iconst_1        
		//    5   11:ireturn         
		//    6   12:iconst_0        
		//    7   13:ireturn         
		}

		public void notifyChanged()
		{
			for(int i = mObservers.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            35
				((AdapterDataObserver)mObservers.get(i)).onChanged();
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_1         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:invokevirtual   #38  <Method void RecyclerView$AdapterDataObserver.onChanged()>

		//   14   28:iload_1         
		//   15   29:iconst_1        
		//   16   30:isub            
		//   17   31:istore_1        
		//*  18   32:goto            10
		//   19   35:return          
		}

		public void notifyItemMoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            38
				((AdapterDataObserver)mObservers.get(k)).onItemRangeMoved(i, j, 1);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:iconst_1        
		//   16   28:invokevirtual   #44  <Method void RecyclerView$AdapterDataObserver.onItemRangeMoved(int, int, int)>

		//   17   31:iload_3         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_3        
		//*  21   35:goto            10
		//   22   38:return          
		}

		public void notifyItemRangeChanged(int i, int j)
		{
			notifyItemRangeChanged(i, j, ((Object) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aconst_null     
		//    4    4:invokevirtual   #48  <Method void notifyItemRangeChanged(int, int, Object)>
		//    5    7:return          
		}

		public void notifyItemRangeChanged(int i, int j, Object obj)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore          4
		//*   6   11:iload           4
		//*   7   13:iflt            43
				((AdapterDataObserver)mObservers.get(k)).onItemRangeChanged(i, j, obj);
		//    8   16:aload_0         
		//    9   17:getfield        #19  <Field ArrayList mObservers>
		//   10   20:iload           4
		//   11   22:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   28:iload_1         
		//   14   29:iload_2         
		//   15   30:aload_3         
		//   16   31:invokevirtual   #51  <Method void RecyclerView$AdapterDataObserver.onItemRangeChanged(int, int, Object)>

		//   17   34:iload           4
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:istore          4
		//*  21   40:goto            11
		//   22   43:return          
		}

		public void notifyItemRangeInserted(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeInserted(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #55  <Method void RecyclerView$AdapterDataObserver.onItemRangeInserted(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		public void notifyItemRangeRemoved(int i, int j)
		{
			for(int k = mObservers.size() - 1; k >= 0; k--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #19  <Field ArrayList mObservers>
		//*   2    4:invokevirtual   #29  <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_3        
		//*   6   10:iload_3         
		//*   7   11:iflt            37
				((AdapterDataObserver)mObservers.get(k)).onItemRangeRemoved(i, j);
		//    8   14:aload_0         
		//    9   15:getfield        #19  <Field ArrayList mObservers>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #33  <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #35  <Class RecyclerView$AdapterDataObserver>
		//   13   25:iload_1         
		//   14   26:iload_2         
		//   15   27:invokevirtual   #59  <Method void RecyclerView$AdapterDataObserver.onItemRangeRemoved(int, int)>

		//   16   30:iload_3         
		//   17   31:iconst_1        
		//   18   32:isub            
		//   19   33:istore_3        
		//*  20   34:goto            10
		//   21   37:return          
		}

		AdapterDataObservable()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #12  <Method void Observable()>
		//    2    4:return          
		}
	}

	public static abstract class AdapterDataObserver
	{

		public void onChanged()
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			onItemRangeChanged(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokevirtual   #18  <Method void onItemRangeChanged(int, int)>
		//    4    6:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
		//    0    0:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
		//    0    0:return          
		}

		public AdapterDataObserver()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface ChildDrawingOrderCallback
	{

		public abstract int onGetChildDrawingOrder(int i, int j);
	}

	public static abstract class ItemAnimator
	{

		static int buildAdapterChangeFlagsForAnimations(ViewHolder viewholder)
		{
			int j = viewholder.mFlags & 0xe;
		//    0    0:aload_0         
		//    1    1:invokestatic    #71  <Method int RecyclerView$ViewHolder.access$1600(RecyclerView$ViewHolder)>
		//    2    4:bipush          14
		//    3    6:iand            
		//    4    7:istore_2        
			if(viewholder.isInvalid())
		//*   5    8:aload_0         
		//*   6    9:invokevirtual   #75  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   7   12:ifeq            17
				return 4;
		//    8   15:iconst_4        
		//    9   16:ireturn         
			int i = j;
		//   10   17:iload_2         
		//   11   18:istore_1        
			if((j & 4) == 0)
		//*  12   19:iload_2         
		//*  13   20:iconst_4        
		//*  14   21:iand            
		//*  15   22:ifne            65
			{
				int k = viewholder.getOldPosition();
		//   16   25:aload_0         
		//   17   26:invokevirtual   #79  <Method int RecyclerView$ViewHolder.getOldPosition()>
		//   18   29:istore_3        
				int l = viewholder.getAdapterPosition();
		//   19   30:aload_0         
		//   20   31:invokevirtual   #82  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//   21   34:istore          4
				i = j;
		//   22   36:iload_2         
		//   23   37:istore_1        
				if(k != -1)
		//*  24   38:iload_3         
		//*  25   39:iconst_m1       
		//*  26   40:icmpeq          65
				{
					i = j;
		//   27   43:iload_2         
		//   28   44:istore_1        
					if(l != -1)
		//*  29   45:iload           4
		//*  30   47:iconst_m1       
		//*  31   48:icmpeq          65
					{
						i = j;
		//   32   51:iload_2         
		//   33   52:istore_1        
						if(k != l)
		//*  34   53:iload_3         
		//*  35   54:iload           4
		//*  36   56:icmpeq          65
							i = j | 0x800;
		//   37   59:iload_2         
		//   38   60:sipush          2048
		//   39   63:ior             
		//   40   64:istore_1        
					}
				}
			}
			return i;
		//   41   65:iload_1         
		//   42   66:ireturn         
		}

		public abstract boolean animateAppearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animateDisappearance(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public abstract boolean animatePersistence(ViewHolder viewholder, ItemHolderInfo itemholderinfo, ItemHolderInfo itemholderinfo1);

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
		{
			return true;
		//    0    0:iconst_1        
		//    1    1:ireturn         
		}

		public boolean canReuseUpdatedViewHolder(ViewHolder viewholder, List list)
		{
			return canReuseUpdatedViewHolder(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #96  <Method boolean canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//    3    5:ireturn         
		}

		public final void dispatchAnimationFinished(ViewHolder viewholder)
		{
			onAnimationFinished(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #103 <Method void onAnimationFinished(RecyclerView$ViewHolder)>
			if(mListener != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//*   5    9:ifnull          22
				mListener.onAnimationFinished(viewholder);
		//    6   12:aload_0         
		//    7   13:getfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    8   16:aload_1         
		//    9   17:invokeinterface #104 <Method void RecyclerView$ItemAnimator$ItemAnimatorListener.onAnimationFinished(RecyclerView$ViewHolder)>
		//   10   22:return          
		}

		public final void dispatchAnimationStarted(ViewHolder viewholder)
		{
			onAnimationStarted(viewholder);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #108 <Method void onAnimationStarted(RecyclerView$ViewHolder)>
		//    3    5:return          
		}

		public final void dispatchAnimationsFinished()
		{
			int j = mFinishedListeners.size();
		//    0    0:aload_0         
		//    1    1:getfield        #51  <Field ArrayList mFinishedListeners>
		//    2    4:invokevirtual   #112 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          38
				((ItemAnimatorFinishedListener)mFinishedListeners.get(i)).onAnimationsFinished();
		//    9   15:aload_0         
		//   10   16:getfield        #51  <Field ArrayList mFinishedListeners>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #116 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #12  <Class RecyclerView$ItemAnimator$ItemAnimatorFinishedListener>
		//   14   26:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>

		//   15   31:iload_1         
		//   16   32:iconst_1        
		//   17   33:iadd            
		//   18   34:istore_1        
		//*  19   35:goto            10
			mFinishedListeners.clear();
		//   20   38:aload_0         
		//   21   39:getfield        #51  <Field ArrayList mFinishedListeners>
		//   22   42:invokevirtual   #122 <Method void ArrayList.clear()>
		//   23   45:return          
		}

		public abstract void endAnimation(ViewHolder viewholder);

		public abstract void endAnimations();

		public long getAddDuration()
		{
			return mAddDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #55  <Field long mAddDuration>
		//    2    4:lreturn         
		}

		public long getChangeDuration()
		{
			return mChangeDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #63  <Field long mChangeDuration>
		//    2    4:lreturn         
		}

		public long getMoveDuration()
		{
			return mMoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #61  <Field long mMoveDuration>
		//    2    4:lreturn         
		}

		public long getRemoveDuration()
		{
			return mRemoveDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #57  <Field long mRemoveDuration>
		//    2    4:lreturn         
		}

		public abstract boolean isRunning();

		public final boolean isRunning(ItemAnimatorFinishedListener itemanimatorfinishedlistener)
		{
			boolean flag;
label0:
			{
				flag = isRunning();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #133 <Method boolean isRunning()>
		//    2    4:istore_2        
				if(itemanimatorfinishedlistener != null)
		//*   3    5:aload_1         
		//*   4    6:ifnull          19
				{
					if(flag)
						break label0;
		//    5    9:iload_2         
		//    6   10:ifne            21
					itemanimatorfinishedlistener.onAnimationsFinished();
		//    7   13:aload_1         
		//    8   14:invokeinterface #119 <Method void RecyclerView$ItemAnimator$ItemAnimatorFinishedListener.onAnimationsFinished()>
				}
				return flag;
		//    9   19:iload_2         
		//   10   20:ireturn         
			}
			mFinishedListeners.add(((Object) (itemanimatorfinishedlistener)));
		//   11   21:aload_0         
		//   12   22:getfield        #51  <Field ArrayList mFinishedListeners>
		//   13   25:aload_1         
		//   14   26:invokevirtual   #137 <Method boolean ArrayList.add(Object)>
		//   15   29:pop             
			return flag;
		//   16   30:iload_2         
		//   17   31:ireturn         
		}

		public ItemHolderInfo obtainHolderInfo()
		{
			return new ItemHolderInfo();
		//    0    0:new             #18  <Class RecyclerView$ItemAnimator$ItemHolderInfo>
		//    1    3:dup             
		//    2    4:invokespecial   #140 <Method void RecyclerView$ItemAnimator$ItemHolderInfo()>
		//    3    7:areturn         
		}

		public void onAnimationFinished(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public void onAnimationStarted(ViewHolder viewholder)
		{
		//    0    0:return          
		}

		public ItemHolderInfo recordPostLayoutInformation(State state, ViewHolder viewholder)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public ItemHolderInfo recordPreLayoutInformation(State state, ViewHolder viewholder, int i, List list)
		{
			return obtainHolderInfo().setFrom(viewholder);
		//    0    0:aload_0         
		//    1    1:invokevirtual   #144 <Method RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
		//    2    4:aload_2         
		//    3    5:invokevirtual   #148 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator$ItemHolderInfo.setFrom(RecyclerView$ViewHolder)>
		//    4    8:areturn         
		}

		public abstract void runPendingAnimations();

		public void setAddDuration(long l)
		{
			mAddDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #55  <Field long mAddDuration>
		//    3    5:return          
		}

		public void setChangeDuration(long l)
		{
			mChangeDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #63  <Field long mChangeDuration>
		//    3    5:return          
		}

		void setListener(ItemAnimatorListener itemanimatorlistener)
		{
			mListener = itemanimatorlistener;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
		//    3    5:return          
		}

		public void setMoveDuration(long l)
		{
			mMoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #61  <Field long mMoveDuration>
		//    3    5:return          
		}

		public void setRemoveDuration(long l)
		{
			mRemoveDuration = l;
		//    0    0:aload_0         
		//    1    1:lload_1         
		//    2    2:putfield        #57  <Field long mRemoveDuration>
		//    3    5:return          
		}

		public static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		public static final int FLAG_CHANGED = 2;
		public static final int FLAG_INVALIDATED = 4;
		public static final int FLAG_MOVED = 2048;
		public static final int FLAG_REMOVED = 8;
		private long mAddDuration;
		private long mChangeDuration;
		private ArrayList mFinishedListeners;
		private ItemAnimatorListener mListener;
		private long mMoveDuration;
		private long mRemoveDuration;

		public ItemAnimator()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #44  <Method void Object()>
			mListener = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #46  <Field RecyclerView$ItemAnimator$ItemAnimatorListener mListener>
			mFinishedListeners = new ArrayList();
		//    5    9:aload_0         
		//    6   10:new             #48  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #49  <Method void ArrayList()>
		//    9   17:putfield        #51  <Field ArrayList mFinishedListeners>
			mAddDuration = 120L;
		//   10   20:aload_0         
		//   11   21:ldc2w           #52  <Long 120L>
		//   12   24:putfield        #55  <Field long mAddDuration>
			mRemoveDuration = 120L;
		//   13   27:aload_0         
		//   14   28:ldc2w           #52  <Long 120L>
		//   15   31:putfield        #57  <Field long mRemoveDuration>
			mMoveDuration = 250L;
		//   16   34:aload_0         
		//   17   35:ldc2w           #58  <Long 250L>
		//   18   38:putfield        #61  <Field long mMoveDuration>
			mChangeDuration = 250L;
		//   19   41:aload_0         
		//   20   42:ldc2w           #58  <Long 250L>
		//   21   45:putfield        #63  <Field long mChangeDuration>
		//   22   48:return          
		}
	}

	public static interface ItemAnimator.AdapterChanges
		extends Annotation
	{
	}

	public static interface ItemAnimator.ItemAnimatorFinishedListener
	{

		public abstract void onAnimationsFinished();
	}

	static interface ItemAnimator.ItemAnimatorListener
	{

		public abstract void onAnimationFinished(ViewHolder viewholder);
	}

	public static class ItemAnimator.ItemHolderInfo
	{

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder)
		{
			return setFrom(viewholder, 0);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #26  <Method RecyclerView$ItemAnimator$ItemHolderInfo setFrom(RecyclerView$ViewHolder, int)>
		//    4    6:areturn         
		}

		public ItemAnimator.ItemHolderInfo setFrom(ViewHolder viewholder, int i)
		{
			viewholder = ((ViewHolder) (viewholder.itemView));
		//    0    0:aload_1         
		//    1    1:getfield        #32  <Field View RecyclerView$ViewHolder.itemView>
		//    2    4:astore_1        
			left = ((View) (viewholder)).getLeft();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #38  <Method int View.getLeft()>
		//    6   10:putfield        #40  <Field int left>
			top = ((View) (viewholder)).getTop();
		//    7   13:aload_0         
		//    8   14:aload_1         
		//    9   15:invokevirtual   #43  <Method int View.getTop()>
		//   10   18:putfield        #45  <Field int top>
			right = ((View) (viewholder)).getRight();
		//   11   21:aload_0         
		//   12   22:aload_1         
		//   13   23:invokevirtual   #48  <Method int View.getRight()>
		//   14   26:putfield        #50  <Field int right>
			bottom = ((View) (viewholder)).getBottom();
		//   15   29:aload_0         
		//   16   30:aload_1         
		//   17   31:invokevirtual   #53  <Method int View.getBottom()>
		//   18   34:putfield        #55  <Field int bottom>
			return this;
		//   19   37:aload_0         
		//   20   38:areturn         
		}

		public int bottom;
		public int changeFlags;
		public int left;
		public int right;
		public int top;

		public ItemAnimator.ItemHolderInfo()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	private class ItemAnimatorRestoreListener
		implements ItemAnimator.ItemAnimatorListener
	{

		public void onAnimationFinished(ViewHolder viewholder)
		{
			viewholder.setIsRecyclable(true);
		//    0    0:aload_1         
		//    1    1:iconst_1        
		//    2    2:invokevirtual   #27  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			if(viewholder.mShadowedHolder != null && viewholder.mShadowingHolder == null)
		//*   3    5:aload_1         
		//*   4    6:getfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
		//*   5    9:ifnull          24
		//*   6   12:aload_1         
		//*   7   13:getfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		//*   8   16:ifnonnull       24
				viewholder.mShadowedHolder = null;
		//    9   19:aload_1         
		//   10   20:aconst_null     
		//   11   21:putfield        #31  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			viewholder.mShadowingHolder = null;
		//   12   24:aload_1         
		//   13   25:aconst_null     
		//   14   26:putfield        #34  <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
			if(!viewholder.shouldBeKeptAsChild() && !removeAnimatingView(viewholder.itemView) && viewholder.isTmpDetached())
		//*  15   29:aload_1         
		//*  16   30:invokestatic    #38  <Method boolean RecyclerView$ViewHolder.access$1500(RecyclerView$ViewHolder)>
		//*  17   33:ifne            69
		//*  18   36:aload_0         
		//*  19   37:getfield        #15  <Field RecyclerView this$0>
		//*  20   40:aload_1         
		//*  21   41:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   44:invokevirtual   #46  <Method boolean RecyclerView.removeAnimatingView(View)>
		//*  23   47:ifne            69
		//*  24   50:aload_1         
		//*  25   51:invokevirtual   #50  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  26   54:ifeq            69
				removeDetachedView(viewholder.itemView, false);
		//   27   57:aload_0         
		//   28   58:getfield        #15  <Field RecyclerView this$0>
		//   29   61:aload_1         
		//   30   62:getfield        #42  <Field View RecyclerView$ViewHolder.itemView>
		//   31   65:iconst_0        
		//   32   66:invokevirtual   #54  <Method void RecyclerView.removeDetachedView(View, boolean)>
		//   33   69:return          
		}

		final RecyclerView this$0;

		ItemAnimatorRestoreListener()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #15  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #18  <Method void Object()>
		//    5    9:return          
		}
	}

	public static abstract class ItemDecoration
	{

		public void getItemOffsets(Rect rect, int i, RecyclerView recyclerview)
		{
			rect.set(0, 0, 0, 0);
		//    0    0:aload_1         
		//    1    1:iconst_0        
		//    2    2:iconst_0        
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #21  <Method void Rect.set(int, int, int, int)>
		//    6    8:return          
		}

		public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, State state)
		{
			getItemOffsets(rect, ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition(), recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #29  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    6:checkcast       #31  <Class RecyclerView$LayoutParams>
		//    5    9:invokevirtual   #35  <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    6   12:aload_3         
		//    7   13:invokevirtual   #37  <Method void getItemOffsets(Rect, int, RecyclerView)>
		//    8   16:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDraw(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDraw(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #42  <Method void onDraw(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDrawOver(Canvas canvas, RecyclerView recyclerview, State state)
		{
			onDrawOver(canvas, recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokevirtual   #45  <Method void onDrawOver(Canvas, RecyclerView)>
		//    4    6:return          
		}

		public ItemDecoration()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class LayoutManager
	{

		private void addViewInt(View view, int i, boolean flag)
		{
			ViewHolder viewholder;
			LayoutParams layoutparams;
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          6
			if(flag || viewholder.isRemoved())
		//*   3    6:iload_3         
		//*   4    7:ifne            18
		//*   5   10:aload           6
		//*   6   12:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   15:ifeq            105
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    8   18:aload_0         
		//    9   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//   10   22:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   11   25:aload           6
		//   12   27:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  13   30:aload_1         
		//*  14   31:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  15   34:checkcast       #113 <Class RecyclerView$LayoutParams>
		//*  16   37:astore          7
		//*  17   39:aload           6
		//*  18   41:invokevirtual   #116 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  19   44:ifne            55
		//*  20   47:aload           6
		//*  21   49:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  22   52:ifeq            128
		//*  23   55:aload           6
		//*  24   57:invokevirtual   #119 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  25   60:ifeq            120
		//*  26   63:aload           6
		//*  27   65:invokevirtual   #122 <Method void RecyclerView$ViewHolder.unScrap()>
		//*  28   68:aload_0         
		//*  29   69:getfield        #124 <Field ChildHelper mChildHelper>
		//*  30   72:aload_1         
		//*  31   73:iload_2         
		//*  32   74:aload_1         
		//*  33   75:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  34   78:iconst_0        
		//*  35   79:invokevirtual   #130 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//*  36   82:aload           7
		//*  37   84:getfield        #133 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  38   87:ifeq            104
		//*  39   90:aload           6
		//*  40   92:getfield        #137 <Field View RecyclerView$ViewHolder.itemView>
		//*  41   95:invokevirtual   #140 <Method void View.invalidate()>
		//*  42   98:aload           7
		//*  43  100:iconst_0        
		//*  44  101:putfield        #133 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  45  104:return          
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   46  105:aload_0         
		//   47  106:getfield        #95  <Field RecyclerView mRecyclerView>
		//   48  109:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   49  112:aload           6
		//   50  114:invokevirtual   #143 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			layoutparams = (LayoutParams)view.getLayoutParams();
			if(!viewholder.wasReturnedFromScrap() && !viewholder.isScrap()) goto _L2; else goto _L1
_L1:
			if(viewholder.isScrap())
				viewholder.unScrap();
			else
		//*  51  117:goto            30
				viewholder.clearReturnedFromScrapFlag();
		//   52  120:aload           6
		//   53  122:invokevirtual   #146 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			mChildHelper.attachViewToParent(view, i, view.getLayoutParams(), false);
_L4:
			if(layoutparams.mPendingInvalidate)
			{
				viewholder.itemView.invalidate();
				layoutparams.mPendingInvalidate = false;
			}
			return;
		//*  54  125:goto            68
_L2:
			if(view.getParent() == mRecyclerView)
		//*  55  128:aload_1         
		//*  56  129:invokevirtual   #150 <Method ViewParent View.getParent()>
		//*  57  132:aload_0         
		//*  58  133:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  59  136:if_acmpne       240
			{
				int k = mChildHelper.indexOfChild(view);
		//   60  139:aload_0         
		//   61  140:getfield        #124 <Field ChildHelper mChildHelper>
		//   62  143:aload_1         
		//   63  144:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//   64  147:istore          5
				int j = i;
		//   65  149:iload_2         
		//   66  150:istore          4
				if(i == -1)
		//*  67  152:iload_2         
		//*  68  153:iconst_m1       
		//*  69  154:icmpne          166
					j = mChildHelper.getChildCount();
		//   70  157:aload_0         
		//   71  158:getfield        #124 <Field ChildHelper mChildHelper>
		//   72  161:invokevirtual   #158 <Method int ChildHelper.getChildCount()>
		//   73  164:istore          4
				if(k == -1)
		//*  74  166:iload           5
		//*  75  168:iconst_m1       
		//*  76  169:icmpne          216
					throw new IllegalStateException((new StringBuilder()).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:").append(mRecyclerView.indexOfChild(view)).append(mRecyclerView.exceptionLabel()).toString());
		//   77  172:new             #160 <Class IllegalStateException>
		//   78  175:dup             
		//   79  176:new             #162 <Class StringBuilder>
		//   80  179:dup             
		//   81  180:invokespecial   #163 <Method void StringBuilder()>
		//   82  183:ldc1            #165 <String "Added View has RecyclerView as parent but view is not a real child. Unfiltered index:">
		//   83  185:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   84  188:aload_0         
		//   85  189:getfield        #95  <Field RecyclerView mRecyclerView>
		//   86  192:aload_1         
		//   87  193:invokevirtual   #170 <Method int RecyclerView.indexOfChild(View)>
		//   88  196:invokevirtual   #173 <Method StringBuilder StringBuilder.append(int)>
		//   89  199:aload_0         
		//   90  200:getfield        #95  <Field RecyclerView mRecyclerView>
		//   91  203:invokevirtual   #177 <Method String RecyclerView.exceptionLabel()>
		//   92  206:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   93  209:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   94  212:invokespecial   #183 <Method void IllegalStateException(String)>
		//   95  215:athrow          
				if(k != j)
		//*  96  216:iload           5
		//*  97  218:iload           4
		//*  98  220:icmpeq          82
					mRecyclerView.mLayout.moveView(k, j);
		//   99  223:aload_0         
		//  100  224:getfield        #95  <Field RecyclerView mRecyclerView>
		//  101  227:getfield        #187 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//  102  230:iload           5
		//  103  232:iload           4
		//  104  234:invokevirtual   #191 <Method void moveView(int, int)>
			} else
		//* 105  237:goto            82
			{
				mChildHelper.addView(view, i, false);
		//  106  240:aload_0         
		//  107  241:getfield        #124 <Field ChildHelper mChildHelper>
		//  108  244:aload_1         
		//  109  245:iload_2         
		//  110  246:iconst_0        
		//  111  247:invokevirtual   #194 <Method void ChildHelper.addView(View, int, boolean)>
				layoutparams.mInsetsDirty = true;
		//  112  250:aload           7
		//  113  252:iconst_1        
		//  114  253:putfield        #197 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
				if(mSmoothScroller != null && mSmoothScroller.isRunning())
		//* 115  256:aload_0         
		//* 116  257:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 117  260:ifnull          82
		//* 118  263:aload_0         
		//* 119  264:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//* 120  267:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 121  270:ifeq            82
					mSmoothScroller.onChildAttachedToWindow(view);
		//  122  273:aload_0         
		//  123  274:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//  124  277:aload_1         
		//  125  278:invokevirtual   #208 <Method void RecyclerView$SmoothScroller.onChildAttachedToWindow(View)>
			}
			if(true) goto _L4; else goto _L3
		//  126  281:goto            82
_L3:
		}

		public static int chooseSize(int i, int j, int k)
		{
			int i1 = android.view.View.MeasureSpec.getMode(i);
		//    0    0:iload_0         
		//    1    1:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    2    4:istore          4
			int l = android.view.View.MeasureSpec.getSize(i);
		//    3    6:iload_0         
		//    4    7:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    5   10:istore_3        
			i = l;
		//    6   11:iload_3         
		//    7   12:istore_0        
			switch(i1)
		//*   8   13:iload           4
			{
		//*   9   15:lookupswitch    2: default 40
		//		               -2147483648: 48
		//		               1073741824: 46
			default:
				i = Math.max(j, k);
		//   10   40:iload_1         
		//   11   41:iload_2         
		//   12   42:invokestatic    #225 <Method int Math.max(int, int)>
		//   13   45:istore_0        
				// fall through

			case 1073741824: 
				return i;
		//   14   46:iload_0         
		//   15   47:ireturn         

			case -2147483648: 
				return Math.min(l, Math.max(j, k));
		//   16   48:iload_3         
		//   17   49:iload_1         
		//   18   50:iload_2         
		//   19   51:invokestatic    #225 <Method int Math.max(int, int)>
		//   20   54:invokestatic    #228 <Method int Math.min(int, int)>
		//   21   57:ireturn         
			}
		}

		private void detachViewInternal(int i, View view)
		{
			mChildHelper.detachViewFromParent(i);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #234 <Method void ChildHelper.detachViewFromParent(int)>
		//    4    8:return          
		}

		public static int getChildMeasureSpec(int i, int j, int k, int l, boolean flag)
		{
			int i1;
			i1 = Math.max(0, i - k);
		//    0    0:iconst_0        
		//    1    1:iload_0         
		//    2    2:iload_2         
		//    3    3:isub            
		//    4    4:invokestatic    #225 <Method int Math.max(int, int)>
		//    5    7:istore          5
			k = 0;
		//    6    9:iconst_0        
		//    7   10:istore_2        
			i = 0;
		//    8   11:iconst_0        
		//    9   12:istore_0        
			if(!flag) goto _L2; else goto _L1
		//   10   13:iload           4
		//   11   15:ifeq            103
_L1:
			if(l < 0) goto _L4; else goto _L3
		//   12   18:iload_3         
		//   13   19:iflt            33
_L3:
			k = l;
		//   14   22:iload_3         
		//   15   23:istore_2        
			i = 0x40000000;
		//   16   24:ldc1            #237 <Int 0x40000000>
		//   17   26:istore_0        
_L6:
			return android.view.View.MeasureSpec.makeMeasureSpec(k, i);
		//   18   27:iload_2         
		//   19   28:iload_0         
		//   20   29:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//   21   32:ireturn         
_L4:
			if(l == -1)
		//*  22   33:iload_3         
		//*  23   34:iconst_m1       
		//*  24   35:icmpne          90
				switch(j)
		//*  25   38:iload_1         
				{
		//*  26   39:lookupswitch    3: default 72
		//		               -2147483648: 75
		//		               0: 83
		//		               1073741824: 75
		//*  27   72:goto            27
				case -2147483648: 
				case 1073741824: 
					k = i1;
		//   28   75:iload           5
		//   29   77:istore_2        
					i = j;
		//   30   78:iload_1         
		//   31   79:istore_0        
					break;

		//*  32   80:goto            27
				case 0: // '\0'
					k = 0;
		//   33   83:iconst_0        
		//   34   84:istore_2        
					i = 0;
		//   35   85:iconst_0        
		//   36   86:istore_0        
					break;
				}
			else
		//*  37   87:goto            27
			if(l == -2)
		//*  38   90:iload_3         
		//*  39   91:bipush          -2
		//*  40   93:icmpne          27
			{
				k = 0;
		//   41   96:iconst_0        
		//   42   97:istore_2        
				i = 0;
		//   43   98:iconst_0        
		//   44   99:istore_0        
			}
			continue; /* Loop/switch isn't completed */
		//   45  100:goto            27
_L2:
			if(l >= 0)
		//*  46  103:iload_3         
		//*  47  104:iflt            115
			{
				k = l;
		//   48  107:iload_3         
		//   49  108:istore_2        
				i = 0x40000000;
		//   50  109:ldc1            #237 <Int 0x40000000>
		//   51  111:istore_0        
			} else
		//*  52  112:goto            27
			if(l == -1)
		//*  53  115:iload_3         
		//*  54  116:iconst_m1       
		//*  55  117:icmpne          128
			{
				k = i1;
		//   56  120:iload           5
		//   57  122:istore_2        
				i = j;
		//   58  123:iload_1         
		//   59  124:istore_0        
			} else
		//*  60  125:goto            27
			if(l == -2)
		//*  61  128:iload_3         
		//*  62  129:bipush          -2
		//*  63  131:icmpne          27
			{
				k = i1;
		//   64  134:iload           5
		//   65  136:istore_2        
				if(j == 0x80000000 || j == 0x40000000)
		//*  66  137:iload_1         
		//*  67  138:ldc1            #241 <Int 0x80000000>
		//*  68  140:icmpeq          149
		//*  69  143:iload_1         
		//*  70  144:ldc1            #237 <Int 0x40000000>
		//*  71  146:icmpne          155
					i = 0x80000000;
		//   72  149:ldc1            #241 <Int 0x80000000>
		//   73  151:istore_0        
				else
		//*  74  152:goto            27
					i = 0;
		//   75  155:iconst_0        
		//   76  156:istore_0        
			}
			if(true) goto _L6; else goto _L5
_L5:
		//*  77  157:goto            27
		}

		public static int getChildMeasureSpec(int i, int j, int k, boolean flag)
		{
			int l;
			l = Math.max(0, i - j);
		//    0    0:iconst_0        
		//    1    1:iload_0         
		//    2    2:iload_1         
		//    3    3:isub            
		//    4    4:invokestatic    #225 <Method int Math.max(int, int)>
		//    5    7:istore          4
			j = 0;
		//    6    9:iconst_0        
		//    7   10:istore_1        
			i = 0;
		//    8   11:iconst_0        
		//    9   12:istore_0        
			if(!flag) goto _L2; else goto _L1
		//   10   13:iload_3         
		//   11   14:ifeq            39
_L1:
			if(k >= 0)
		//*  12   17:iload_2         
		//*  13   18:iflt            32
			{
				j = k;
		//   14   21:iload_2         
		//   15   22:istore_1        
				i = 0x40000000;
		//   16   23:ldc1            #237 <Int 0x40000000>
		//   17   25:istore_0        
			} else
		//*  18   26:iload_1         
		//*  19   27:iload_0         
		//*  20   28:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//*  21   31:ireturn         
			{
				j = 0;
		//   22   32:iconst_0        
		//   23   33:istore_1        
				i = 0;
		//   24   34:iconst_0        
		//   25   35:istore_0        
			}
_L4:
			return android.view.View.MeasureSpec.makeMeasureSpec(j, i);
		//*  26   36:goto            26
_L2:
			if(k >= 0)
		//*  27   39:iload_2         
		//*  28   40:iflt            51
			{
				j = k;
		//   29   43:iload_2         
		//   30   44:istore_1        
				i = 0x40000000;
		//   31   45:ldc1            #237 <Int 0x40000000>
		//   32   47:istore_0        
			} else
		//*  33   48:goto            26
			if(k == -1)
		//*  34   51:iload_2         
		//*  35   52:iconst_m1       
		//*  36   53:icmpne          65
			{
				j = l;
		//   37   56:iload           4
		//   38   58:istore_1        
				i = 0x40000000;
		//   39   59:ldc1            #237 <Int 0x40000000>
		//   40   61:istore_0        
			} else
		//*  41   62:goto            26
			if(k == -2)
		//*  42   65:iload_2         
		//*  43   66:bipush          -2
		//*  44   68:icmpne          26
			{
				j = l;
		//   45   71:iload           4
		//   46   73:istore_1        
				i = 0x80000000;
		//   47   74:ldc1            #241 <Int 0x80000000>
		//   48   76:istore_0        
			}
			if(true) goto _L4; else goto _L3
		//   49   77:goto            26
_L3:
		}

		private int[] getChildRectangleOnScreenScrollAmount(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			int k1 = getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #249 <Method int getPaddingLeft()>
		//    2    4:istore          11
			int l = getPaddingTop();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #252 <Method int getPaddingTop()>
		//    5   10:istore          8
			int l1 = getWidth() - getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #255 <Method int getWidth()>
		//    8   16:aload_0         
		//    9   17:invokevirtual   #258 <Method int getPaddingRight()>
		//   10   20:isub            
		//   11   21:istore          12
			int j1 = getHeight();
		//   12   23:aload_0         
		//   13   24:invokevirtual   #261 <Method int getHeight()>
		//   14   27:istore          10
			int k2 = getPaddingBottom();
		//   15   29:aload_0         
		//   16   30:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   33:istore          15
			int i2 = (view.getLeft() + rect.left) - view.getScrollX();
		//   18   35:aload_2         
		//   19   36:invokevirtual   #267 <Method int View.getLeft()>
		//   20   39:aload_3         
		//   21   40:getfield        #272 <Field int Rect.left>
		//   22   43:iadd            
		//   23   44:aload_2         
		//   24   45:invokevirtual   #275 <Method int View.getScrollX()>
		//   25   48:isub            
		//   26   49:istore          13
			int i1 = (view.getTop() + rect.top) - view.getScrollY();
		//   27   51:aload_2         
		//   28   52:invokevirtual   #278 <Method int View.getTop()>
		//   29   55:aload_3         
		//   30   56:getfield        #281 <Field int Rect.top>
		//   31   59:iadd            
		//   32   60:aload_2         
		//   33   61:invokevirtual   #284 <Method int View.getScrollY()>
		//   34   64:isub            
		//   35   65:istore          9
			int j2 = i2 + rect.width();
		//   36   67:iload           13
		//   37   69:aload_3         
		//   38   70:invokevirtual   #287 <Method int Rect.width()>
		//   39   73:iadd            
		//   40   74:istore          14
			int l2 = rect.height();
		//   41   76:aload_3         
		//   42   77:invokevirtual   #290 <Method int Rect.height()>
		//   43   80:istore          16
			int i = Math.min(0, i2 - k1);
		//   44   82:iconst_0        
		//   45   83:iload           13
		//   46   85:iload           11
		//   47   87:isub            
		//   48   88:invokestatic    #228 <Method int Math.min(int, int)>
		//   49   91:istore          5
			int j = Math.min(0, i1 - l);
		//   50   93:iconst_0        
		//   51   94:iload           9
		//   52   96:iload           8
		//   53   98:isub            
		//   54   99:invokestatic    #228 <Method int Math.min(int, int)>
		//   55  102:istore          6
			int k = Math.max(0, j2 - l1);
		//   56  104:iconst_0        
		//   57  105:iload           14
		//   58  107:iload           12
		//   59  109:isub            
		//   60  110:invokestatic    #225 <Method int Math.max(int, int)>
		//   61  113:istore          7
			j1 = Math.max(0, (i1 + l2) - (j1 - k2));
		//   62  115:iconst_0        
		//   63  116:iload           9
		//   64  118:iload           16
		//   65  120:iadd            
		//   66  121:iload           10
		//   67  123:iload           15
		//   68  125:isub            
		//   69  126:isub            
		//   70  127:invokestatic    #225 <Method int Math.max(int, int)>
		//   71  130:istore          10
			if(getLayoutDirection() == 1)
		//*  72  132:aload_0         
		//*  73  133:invokevirtual   #293 <Method int getLayoutDirection()>
		//*  74  136:iconst_1        
		//*  75  137:icmpne          183
			{
				if(k != 0)
		//*  76  140:iload           7
		//*  77  142:ifeq            168
					i = k;
		//   78  145:iload           7
		//   79  147:istore          5
				else
		//*  80  149:iload           6
		//*  81  151:ifeq            206
		//*  82  154:iconst_2        
		//*  83  155:newarray        int[]
		//*  84  157:dup             
		//*  85  158:iconst_0        
		//*  86  159:iload           5
		//*  87  161:iastore         
		//*  88  162:dup             
		//*  89  163:iconst_1        
		//*  90  164:iload           6
		//*  91  166:iastore         
		//*  92  167:areturn         
					i = Math.max(i, j2 - l1);
		//   93  168:iload           5
		//   94  170:iload           14
		//   95  172:iload           12
		//   96  174:isub            
		//   97  175:invokestatic    #225 <Method int Math.max(int, int)>
		//   98  178:istore          5
			} else
		//*  99  180:goto            149
			if(i == 0)
		//* 100  183:iload           5
		//* 101  185:ifeq            191
		//* 102  188:goto            149
				i = Math.min(i2 - k1, k);
		//  103  191:iload           13
		//  104  193:iload           11
		//  105  195:isub            
		//  106  196:iload           7
		//  107  198:invokestatic    #228 <Method int Math.min(int, int)>
		//  108  201:istore          5
			if(j == 0)
		//* 109  203:goto            188
				j = Math.min(i1 - l, j1);
		//  110  206:iload           9
		//  111  208:iload           8
		//  112  210:isub            
		//  113  211:iload           10
		//  114  213:invokestatic    #228 <Method int Math.min(int, int)>
		//  115  216:istore          6
			return (new int[] {
				i, j
			});
		//* 116  218:goto            154
		}

		public static Properties getProperties(Context context, AttributeSet attributeset, int i, int j)
		{
			Properties properties = new Properties();
		//    0    0:new             #16  <Class RecyclerView$LayoutManager$Properties>
		//    1    3:dup             
		//    2    4:invokespecial   #296 <Method void RecyclerView$LayoutManager$Properties()>
		//    3    7:astore          4
			context = ((Context) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, j)));
		//    4    9:aload_0         
		//    5   10:aload_1         
		//    6   11:getstatic       #302 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
		//    7   14:iload_2         
		//    8   15:iload_3         
		//    9   16:invokevirtual   #308 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
		//   10   19:astore_0        
			properties.orientation = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_orientation, 1);
		//   11   20:aload           4
		//   12   22:aload_0         
		//   13   23:getstatic       #311 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_orientation>
		//   14   26:iconst_1        
		//   15   27:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   16   30:putfield        #319 <Field int RecyclerView$LayoutManager$Properties.orientation>
			properties.spanCount = ((TypedArray) (context)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_spanCount, 1);
		//   17   33:aload           4
		//   18   35:aload_0         
		//   19   36:getstatic       #322 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_spanCount>
		//   20   39:iconst_1        
		//   21   40:invokevirtual   #316 <Method int TypedArray.getInt(int, int)>
		//   22   43:putfield        #325 <Field int RecyclerView$LayoutManager$Properties.spanCount>
			properties.reverseLayout = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_reverseLayout, false);
		//   23   46:aload           4
		//   24   48:aload_0         
		//   25   49:getstatic       #328 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_reverseLayout>
		//   26   52:iconst_0        
		//   27   53:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   28   56:putfield        #335 <Field boolean RecyclerView$LayoutManager$Properties.reverseLayout>
			properties.stackFromEnd = ((TypedArray) (context)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_stackFromEnd, false);
		//   29   59:aload           4
		//   30   61:aload_0         
		//   31   62:getstatic       #338 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_stackFromEnd>
		//   32   65:iconst_0        
		//   33   66:invokevirtual   #332 <Method boolean TypedArray.getBoolean(int, boolean)>
		//   34   69:putfield        #341 <Field boolean RecyclerView$LayoutManager$Properties.stackFromEnd>
			((TypedArray) (context)).recycle();
		//   35   72:aload_0         
		//   36   73:invokevirtual   #344 <Method void TypedArray.recycle()>
			return properties;
		//   37   76:aload           4
		//   38   78:areturn         
		}

		private boolean isFocusedChildVisibleAfterScrolling(RecyclerView recyclerview, int i, int j)
		{
			recyclerview = ((RecyclerView) (recyclerview.getFocusedChild()));
		//    0    0:aload_1         
		//    1    1:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//    2    4:astore_1        
			if(recyclerview != null)
		//*   3    5:aload_1         
		//*   4    6:ifnonnull       11
		//*   5    9:iconst_0        
		//*   6   10:ireturn         
			{
				int k = getPaddingLeft();
		//    7   11:aload_0         
		//    8   12:invokevirtual   #249 <Method int getPaddingLeft()>
		//    9   15:istore          4
				int l = getPaddingTop();
		//   10   17:aload_0         
		//   11   18:invokevirtual   #252 <Method int getPaddingTop()>
		//   12   21:istore          5
				int i1 = getWidth();
		//   13   23:aload_0         
		//   14   24:invokevirtual   #255 <Method int getWidth()>
		//   15   27:istore          6
				int j1 = getPaddingRight();
		//   16   29:aload_0         
		//   17   30:invokevirtual   #258 <Method int getPaddingRight()>
		//   18   33:istore          7
				int k1 = getHeight();
		//   19   35:aload_0         
		//   20   36:invokevirtual   #261 <Method int getHeight()>
		//   21   39:istore          8
				int l1 = getPaddingBottom();
		//   22   41:aload_0         
		//   23   42:invokevirtual   #264 <Method int getPaddingBottom()>
		//   24   45:istore          9
				Rect rect = mRecyclerView.mTempRect;
		//   25   47:aload_0         
		//   26   48:getfield        #95  <Field RecyclerView mRecyclerView>
		//   27   51:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   28   54:astore          10
				getDecoratedBoundsWithMargins(((View) (recyclerview)), rect);
		//   29   56:aload_0         
		//   30   57:aload_1         
		//   31   58:aload           10
		//   32   60:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				if(rect.left - i < i1 - j1 && rect.right - i > k && rect.top - j < k1 - l1 && rect.bottom - j > l)
		//*  33   63:aload           10
		//*  34   65:getfield        #272 <Field int Rect.left>
		//*  35   68:iload_2         
		//*  36   69:isub            
		//*  37   70:iload           6
		//*  38   72:iload           7
		//*  39   74:isub            
		//*  40   75:icmpge          9
		//*  41   78:aload           10
		//*  42   80:getfield        #361 <Field int Rect.right>
		//*  43   83:iload_2         
		//*  44   84:isub            
		//*  45   85:iload           4
		//*  46   87:icmple          9
		//*  47   90:aload           10
		//*  48   92:getfield        #281 <Field int Rect.top>
		//*  49   95:iload_3         
		//*  50   96:isub            
		//*  51   97:iload           8
		//*  52   99:iload           9
		//*  53  101:isub            
		//*  54  102:icmpge          9
		//*  55  105:aload           10
		//*  56  107:getfield        #364 <Field int Rect.bottom>
		//*  57  110:iload_3         
		//*  58  111:isub            
		//*  59  112:iload           5
		//*  60  114:icmple          9
					return true;
		//   61  117:iconst_1        
		//   62  118:ireturn         
			}
			return false;
		}

		private static boolean isMeasurementUpToDate(int i, int j, int k)
		{
			int l;
			boolean flag1;
			flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore          5
			l = android.view.View.MeasureSpec.getMode(j);
		//    2    3:iload_1         
		//    3    4:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    4    7:istore_3        
			j = android.view.View.MeasureSpec.getSize(j);
		//    5    8:iload_1         
		//    6    9:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    7   12:istore_1        
			if(k <= 0 || i == k) goto _L2; else goto _L1
		//    8   13:iload_2         
		//    9   14:ifle            28
		//   10   17:iload_0         
		//   11   18:iload_2         
		//   12   19:icmpeq          28
_L1:
			boolean flag = false;
		//   13   22:iconst_0        
		//   14   23:istore          4
_L4:
			return flag;
		//   15   25:iload           4
		//   16   27:ireturn         
_L2:
			flag = flag1;
		//   17   28:iload           5
		//   18   30:istore          4
			switch(l)
		//*  19   32:iload_3         
			{
		//*  20   33:lookupswitch    3: default 68
		//		               -2147483648: 70
		//		               0: 25
		//		               1073741824: 81
			default:
				return false;
		//   21   68:iconst_0        
		//   22   69:ireturn         

			case 0: // '\0'
				break;

			case -2147483648: 
				flag = flag1;
		//   23   70:iload           5
		//   24   72:istore          4
				if(j < i)
		//*  25   74:iload_1         
		//*  26   75:iload_0         
		//*  27   76:icmpge          25
					return false;
		//   28   79:iconst_0        
		//   29   80:ireturn         
				break;

			case 1073741824: 
				flag = flag1;
		//   30   81:iload           5
		//   31   83:istore          4
				continue; /* Loop/switch isn't completed */
			}
			if(true) goto _L4; else goto _L3
_L3:
			if(j == i) goto _L4; else goto _L5
		//   32   85:iload_1         
		//   33   86:iload_0         
		//   34   87:icmpeq          25
_L5:
			return false;
		//   35   90:iconst_0        
		//   36   91:ireturn         
		}

		private void onSmoothScrollerStopped(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller == smoothscroller)
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:aload_1         
		//*   3    5:if_acmpne       13
				mSmoothScroller = null;
		//    4    8:aload_0         
		//    5    9:aconst_null     
		//    6   10:putfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    7   13:return          
		}

		private void scrapOrRecycleView(Recycler recycler, int i, View view)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_3         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.shouldIgnore())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*   5   11:ifeq            15
				return;
		//    6   14:return          
			if(viewholder.isInvalid() && !viewholder.isRemoved() && !mRecyclerView.mAdapter.hasStableIds())
		//*   7   15:aload           4
		//*   8   17:invokevirtual   #374 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*   9   20:ifeq            56
		//*  10   23:aload           4
		//*  11   25:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  12   28:ifne            56
		//*  13   31:aload_0         
		//*  14   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  15   35:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  16   38:invokevirtual   #383 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  17   41:ifne            56
			{
				removeViewAt(i);
		//   18   44:aload_0         
		//   19   45:iload_2         
		//   20   46:invokevirtual   #386 <Method void removeViewAt(int)>
				recycler.recycleViewHolderInternal(viewholder);
		//   21   49:aload_1         
		//   22   50:aload           4
		//   23   52:invokevirtual   #391 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
				return;
		//   24   55:return          
			} else
			{
				detachViewAt(i);
		//   25   56:aload_0         
		//   26   57:iload_2         
		//   27   58:invokevirtual   #394 <Method void detachViewAt(int)>
				recycler.scrapView(view);
		//   28   61:aload_1         
		//   29   62:aload_3         
		//   30   63:invokevirtual   #397 <Method void RecyclerView$Recycler.scrapView(View)>
				mRecyclerView.mViewInfoStore.onViewDetached(viewholder);
		//   31   66:aload_0         
		//   32   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   70:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   73:aload           4
		//   35   75:invokevirtual   #400 <Method void ViewInfoStore.onViewDetached(RecyclerView$ViewHolder)>
				return;
		//   36   78:return          
			}
		}

		public void addDisappearingView(View view)
		{
			addDisappearingView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #404 <Method void addDisappearingView(View, int)>
		//    4    6:return          
		}

		public void addDisappearingView(View view, int i)
		{
			addViewInt(view, i, true);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_1        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void addView(View view)
		{
			addView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #408 <Method void addView(View, int)>
		//    4    6:return          
		}

		public void addView(View view, int i)
		{
			addViewInt(view, i, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:invokespecial   #406 <Method void addViewInt(View, int, boolean)>
		//    5    7:return          
		}

		public void assertInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #411 <Method void RecyclerView.assertInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void assertNotInLayoutOrScroll(String s)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.assertNotInLayoutOrScroll(s);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #414 <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
		//    7   15:return          
		}

		public void attachView(View view)
		{
			attachView(view, -1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iconst_m1       
		//    3    3:invokevirtual   #417 <Method void attachView(View, int)>
		//    4    6:return          
		}

		public void attachView(View view, int i)
		{
			attachView(view, i, (LayoutParams)view.getLayoutParams());
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:aload_1         
		//    4    4:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    5    7:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    6   10:invokevirtual   #420 <Method void attachView(View, int, RecyclerView$LayoutParams)>
		//    7   13:return          
		}

		public void attachView(View view, int i, LayoutParams layoutparams)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          4
			if(viewholder.isRemoved())
		//*   3    6:aload           4
		//*   4    8:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   5   11:ifeq            42
				mRecyclerView.mViewInfoStore.addToDisappearedInLayout(viewholder);
		//    6   14:aload_0         
		//    7   15:getfield        #95  <Field RecyclerView mRecyclerView>
		//    8   18:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//    9   21:aload           4
		//   10   23:invokevirtual   #105 <Method void ViewInfoStore.addToDisappearedInLayout(RecyclerView$ViewHolder)>
			else
		//*  11   26:aload_0         
		//*  12   27:getfield        #124 <Field ChildHelper mChildHelper>
		//*  13   30:aload_1         
		//*  14   31:iload_2         
		//*  15   32:aload_3         
		//*  16   33:aload           4
		//*  17   35:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  18   38:invokevirtual   #130 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
		//*  19   41:return          
				mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(viewholder);
		//   20   42:aload_0         
		//   21   43:getfield        #95  <Field RecyclerView mRecyclerView>
		//   22   46:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   23   49:aload           4
		//   24   51:invokevirtual   #143 <Method void ViewInfoStore.removeFromDisappearedInLayout(RecyclerView$ViewHolder)>
			mChildHelper.attachViewToParent(view, i, ((android.view.ViewGroup.LayoutParams) (layoutparams)), viewholder.isRemoved());
		//*  25   54:goto            26
		}

		public void calculateItemDecorationsForChild(View view, Rect rect)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       16
			{
				rect.set(0, 0, 0, 0);
		//    3    7:aload_2         
		//    4    8:iconst_0        
		//    5    9:iconst_0        
		//    6   10:iconst_0        
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
				return;
		//    9   15:return          
			} else
			{
				rect.set(mRecyclerView.getItemDecorInsetsForChild(view));
		//   10   16:aload_2         
		//   11   17:aload_0         
		//   12   18:getfield        #95  <Field RecyclerView mRecyclerView>
		//   13   21:aload_1         
		//   14   22:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//   15   25:invokevirtual   #432 <Method void Rect.set(Rect)>
				return;
		//   16   28:return          
			}
		}

		public boolean canScrollHorizontally()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean canScrollVertically()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean checkLayoutParams(LayoutParams layoutparams)
		{
			return layoutparams != null;
		//    0    0:aload_1         
		//    1    1:ifnull          6
		//    2    4:iconst_1        
		//    3    5:ireturn         
		//    4    6:iconst_0        
		//    5    7:ireturn         
		}

		public void collectAdjacentPrefetchPositions(int i, int j, State state, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public void collectInitialPrefetchPositions(int i, LayoutPrefetchRegistry layoutprefetchregistry)
		{
		//    0    0:return          
		}

		public int computeHorizontalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeHorizontalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollExtent(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollOffset(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int computeVerticalScrollRange(State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void detachAndScrapAttachedViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            29
				scrapOrRecycleView(recycler, i, getChildAt(i));
		//    7   11:aload_0         
		//    8   12:aload_1         
		//    9   13:iload_2         
		//   10   14:aload_0         
		//   11   15:iload_2         
		//   12   16:invokevirtual   #454 <Method View getChildAt(int)>
		//   13   19:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>

		//   14   22:iload_2         
		//   15   23:iconst_1        
		//   16   24:isub            
		//   17   25:istore_2        
		//*  18   26:goto            7
		//   19   29:return          
		}

		public void detachAndScrapView(View view, Recycler recycler)
		{
			scrapOrRecycleView(recycler, mChildHelper.indexOfChild(view), view);
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:aload_0         
		//    3    3:getfield        #124 <Field ChildHelper mChildHelper>
		//    4    6:aload_1         
		//    5    7:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//    6   10:aload_1         
		//    7   11:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    8   14:return          
		}

		public void detachAndScrapViewAt(int i, Recycler recycler)
		{
			scrapOrRecycleView(recycler, i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:aload_2         
		//    2    2:iload_1         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:invokevirtual   #454 <Method View getChildAt(int)>
		//    6    8:invokespecial   #456 <Method void scrapOrRecycleView(RecyclerView$Recycler, int, View)>
		//    7   11:return          
		}

		public void detachView(View view)
		{
			int i = mChildHelper.indexOfChild(view);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #154 <Method int ChildHelper.indexOfChild(View)>
		//    4    8:istore_2        
			if(i >= 0)
		//*   5    9:iload_2         
		//*   6   10:iflt            19
				detachViewInternal(i, view);
		//    7   13:aload_0         
		//    8   14:iload_2         
		//    9   15:aload_1         
		//   10   16:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//   11   19:return          
		}

		public void detachViewAt(int i)
		{
			detachViewInternal(i, getChildAt(i));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:aload_0         
		//    3    3:iload_1         
		//    4    4:invokevirtual   #454 <Method View getChildAt(int)>
		//    5    7:invokespecial   #463 <Method void detachViewInternal(int, View)>
		//    6   10:return          
		}

		void dispatchAttachedToWindow(RecyclerView recyclerview)
		{
			mIsAttachedToWindow = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onAttachedToWindow(recyclerview);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #468 <Method void onAttachedToWindow(RecyclerView)>
		//    6   10:return          
		}

		void dispatchDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			mIsAttachedToWindow = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #68  <Field boolean mIsAttachedToWindow>
			onDetachedFromWindow(recyclerview, recycler);
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:aload_2         
		//    6    8:invokevirtual   #473 <Method void onDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		//    7   11:return          
		}

		public void endAnimation(View view)
		{
			if(mRecyclerView.mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          24
				mRecyclerView.mItemAnimator.endAnimation(RecyclerView.getChildViewHolderInt(view));
		//    4   10:aload_0         
		//    5   11:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   14:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:aload_1         
		//    8   18:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    9   21:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
		//   10   24:return          
		}

		public View findContainingItemView(View view)
		{
			if(mRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnonnull       11
			{
				view = null;
		//    3    7:aconst_null     
		//    4    8:astore_1        
			} else
		//*   5    9:aload_1         
		//*   6   10:areturn         
			{
				View view1 = mRecyclerView.findContainingItemView(view);
		//    7   11:aload_0         
		//    8   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//    9   15:aload_1         
		//   10   16:invokevirtual   #486 <Method View RecyclerView.findContainingItemView(View)>
		//   11   19:astore_2        
				if(view1 == null)
		//*  12   20:aload_2         
		//*  13   21:ifnonnull       26
					return null;
		//   14   24:aconst_null     
		//   15   25:areturn         
				view = view1;
		//   16   26:aload_2         
		//   17   27:astore_1        
				if(mChildHelper.isHidden(view1))
		//*  18   28:aload_0         
		//*  19   29:getfield        #124 <Field ChildHelper mChildHelper>
		//*  20   32:aload_2         
		//*  21   33:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  22   36:ifeq            9
					return null;
		//   23   39:aconst_null     
		//   24   40:areturn         
			}
			return view;
		}

		public View findViewByPosition(int i)
		{
			int j;
			int k;
			k = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore_3        
			j = 0;
		//    3    5:iconst_0        
		//    4    6:istore_2        
_L3:
			View view;
			ViewHolder viewholder;
			if(j >= k)
				break; /* Loop/switch isn't completed */
		//    5    7:iload_2         
		//    6    8:iload_3         
		//    7    9:icmpge          79
			view = getChildAt(j);
		//    8   12:aload_0         
		//    9   13:iload_2         
		//   10   14:invokevirtual   #454 <Method View getChildAt(int)>
		//   11   17:astore          4
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//   12   19:aload           4
		//   13   21:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   14   24:astore          5
			  goto _L1
		//*  15   26:aload           5
		//*  16   28:ifnonnull       38
_L5:
			j++;
		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:iadd            
		//   20   34:istore_2        
			if(true) goto _L3; else goto _L2
		//   21   35:goto            7
_L1:
			if(viewholder == null || viewholder.getLayoutPosition() != i || viewholder.shouldIgnore() || !mRecyclerView.mState.isPreLayout() && viewholder.isRemoved()) goto _L5; else goto _L4
		//   22   38:aload           5
		//   23   40:invokevirtual   #495 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//   24   43:iload_1         
		//   25   44:icmpne          31
		//   26   47:aload           5
		//   27   49:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//   28   52:ifne            31
		//   29   55:aload_0         
		//   30   56:getfield        #95  <Field RecyclerView mRecyclerView>
		//   31   59:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//   32   62:invokevirtual   #504 <Method boolean RecyclerView$State.isPreLayout()>
		//   33   65:ifne            76
		//   34   68:aload           5
		//   35   70:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   36   73:ifne            31
_L4:
			return view;
		//   37   76:aload           4
		//   38   78:areturn         
_L2:
			return null;
		//   39   79:aconst_null     
		//   40   80:areturn         
		}

		public abstract LayoutParams generateDefaultLayoutParams();

		public LayoutParams generateLayoutParams(Context context, AttributeSet attributeset)
		{
			return new LayoutParams(context, attributeset);
		//    0    0:new             #113 <Class RecyclerView$LayoutParams>
		//    1    3:dup             
		//    2    4:aload_1         
		//    3    5:aload_2         
		//    4    6:invokespecial   #511 <Method void RecyclerView$LayoutParams(Context, AttributeSet)>
		//    5    9:areturn         
		}

		public LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			if(layoutparams instanceof LayoutParams)
		//*   0    0:aload_1         
		//*   1    1:instanceof      #113 <Class RecyclerView$LayoutParams>
		//*   2    4:ifeq            19
				return new LayoutParams((LayoutParams)layoutparams);
		//    3    7:new             #113 <Class RecyclerView$LayoutParams>
		//    4   10:dup             
		//    5   11:aload_1         
		//    6   12:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    7   15:invokespecial   #515 <Method void RecyclerView$LayoutParams(RecyclerView$LayoutParams)>
		//    8   18:areturn         
			if(layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
		//*   9   19:aload_1         
		//*  10   20:instanceof      #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//*  11   23:ifeq            38
				return new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
		//   12   26:new             #113 <Class RecyclerView$LayoutParams>
		//   13   29:dup             
		//   14   30:aload_1         
		//   15   31:checkcast       #517 <Class android.view.ViewGroup$MarginLayoutParams>
		//   16   34:invokespecial   #520 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$MarginLayoutParams)>
		//   17   37:areturn         
			else
				return new LayoutParams(layoutparams);
		//   18   38:new             #113 <Class RecyclerView$LayoutParams>
		//   19   41:dup             
		//   20   42:aload_1         
		//   21   43:invokespecial   #523 <Method void RecyclerView$LayoutParams(android.view.ViewGroup$LayoutParams)>
		//   22   46:areturn         
		}

		public int getBaseline()
		{
			return -1;
		//    0    0:iconst_m1       
		//    1    1:ireturn         
		}

		public int getBottomDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.bottom;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #364 <Field int Rect.bottom>
		//    5   13:ireturn         
		}

		public View getChildAt(int i)
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          16
				return mChildHelper.getChildAt(i);
		//    3    7:aload_0         
		//    4    8:getfield        #124 <Field ChildHelper mChildHelper>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #529 <Method View ChildHelper.getChildAt(int)>
		//    7   15:areturn         
			else
				return null;
		//    8   16:aconst_null     
		//    9   17:areturn         
		}

		public int getChildCount()
		{
			if(mChildHelper != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//*   2    4:ifnull          15
				return mChildHelper.getChildCount();
		//    3    7:aload_0         
		//    4    8:getfield        #124 <Field ChildHelper mChildHelper>
		//    5   11:invokevirtual   #158 <Method int ChildHelper.getChildCount()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public boolean getClipToPadding()
		{
			return mRecyclerView != null && mRecyclerView.mClipToPadding;
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:getfield        #533 <Field boolean RecyclerView.mClipToPadding>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public int getColumnCountForAccessibility(Recycler recycler, State state)
		{
			while(mRecyclerView == null || mRecyclerView.mAdapter == null || !canScrollHorizontally()) 
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:aload_0         
		//   10   20:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   11   23:ifeq            17
			return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
		}

		public int getDecoratedBottom(View view)
		{
			return view.getBottom() + getBottomDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #544 <Method int View.getBottom()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #546 <Method int getBottomDecorationHeight(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public void getDecoratedBoundsWithMargins(View view, Rect rect)
		{
			RecyclerView.getDecoratedBoundsWithMarginsInt(view, rect);
		//    0    0:aload_1         
		//    1    1:aload_2         
		//    2    2:invokestatic    #549 <Method void RecyclerView.getDecoratedBoundsWithMarginsInt(View, Rect)>
		//    3    5:return          
		}

		public int getDecoratedLeft(View view)
		{
			return view.getLeft() - getLeftDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #267 <Method int View.getLeft()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #553 <Method int getLeftDecorationWidth(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public int getDecoratedMeasuredHeight(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredHeight() + rect.top + rect.bottom;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//    7   15:aload_2         
		//    8   16:getfield        #281 <Field int Rect.top>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #364 <Field int Rect.bottom>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedMeasuredWidth(View view)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore_2        
			return view.getMeasuredWidth() + rect.left + rect.right;
		//    5   11:aload_1         
		//    6   12:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    7   15:aload_2         
		//    8   16:getfield        #272 <Field int Rect.left>
		//    9   19:iadd            
		//   10   20:aload_2         
		//   11   21:getfield        #361 <Field int Rect.right>
		//   12   24:iadd            
		//   13   25:ireturn         
		}

		public int getDecoratedRight(View view)
		{
			return view.getRight() + getRightDecorationWidth(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #565 <Method int View.getRight()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #568 <Method int getRightDecorationWidth(View)>
		//    5    9:iadd            
		//    6   10:ireturn         
		}

		public int getDecoratedTop(View view)
		{
			return view.getTop() - getTopDecorationHeight(view);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #278 <Method int View.getTop()>
		//    2    4:aload_0         
		//    3    5:aload_1         
		//    4    6:invokevirtual   #572 <Method int getTopDecorationHeight(View)>
		//    5    9:isub            
		//    6   10:ireturn         
		}

		public View getFocusedChild()
		{
			if(mRecyclerView != null) goto _L2; else goto _L1
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnonnull       11
_L1:
			View view = null;
		//    3    7:aconst_null     
		//    4    8:astore_1        
_L4:
			return view;
		//    5    9:aload_1         
		//    6   10:areturn         
_L2:
			View view1;
			view1 = mRecyclerView.getFocusedChild();
		//    7   11:aload_0         
		//    8   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//    9   15:invokevirtual   #350 <Method View RecyclerView.getFocusedChild()>
		//   10   18:astore_2        
			if(view1 == null)
				break; /* Loop/switch isn't completed */
		//   11   19:aload_2         
		//   12   20:ifnull          36
			view = view1;
		//   13   23:aload_2         
		//   14   24:astore_1        
			if(!mChildHelper.isHidden(view1)) goto _L4; else goto _L3
		//   15   25:aload_0         
		//   16   26:getfield        #124 <Field ChildHelper mChildHelper>
		//   17   29:aload_2         
		//   18   30:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//   19   33:ifeq            9
_L3:
			return null;
		//   20   36:aconst_null     
		//   21   37:areturn         
		}

		public int getHeight()
		{
			return mHeight;
		//    0    0:aload_0         
		//    1    1:getfield        #574 <Field int mHeight>
		//    2    4:ireturn         
		}

		public int getHeightMode()
		{
			return mHeightMode;
		//    0    0:aload_0         
		//    1    1:getfield        #577 <Field int mHeightMode>
		//    2    4:ireturn         
		}

		public int getItemCount()
		{
			Adapter adapter;
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          24
				adapter = mRecyclerView.getAdapter();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #581 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//    6   14:astore_1        
			else
		//*   7   15:aload_1         
		//*   8   16:ifnull          29
		//*   9   19:aload_1         
		//*  10   20:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//*  11   23:ireturn         
				adapter = null;
		//   12   24:aconst_null     
		//   13   25:astore_1        
			if(adapter != null)
				return adapter.getItemCount();
			else
		//*  14   26:goto            15
				return 0;
		//   15   29:iconst_0        
		//   16   30:ireturn         
		}

		public int getItemViewType(View view)
		{
			return RecyclerView.getChildViewHolderInt(view).getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:invokevirtual   #584 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    3    7:ireturn         
		}

		public int getLayoutDirection()
		{
			return ViewCompat.getLayoutDirection(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #588 <Method int ViewCompat.getLayoutDirection(View)>
		//    3    7:ireturn         
		}

		public int getLeftDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.left;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #272 <Field int Rect.left>
		//    5   13:ireturn         
		}

		public int getMinimumHeight()
		{
			return ViewCompat.getMinimumHeight(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #591 <Method int ViewCompat.getMinimumHeight(View)>
		//    3    7:ireturn         
		}

		public int getMinimumWidth()
		{
			return ViewCompat.getMinimumWidth(((View) (mRecyclerView)));
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:invokestatic    #594 <Method int ViewCompat.getMinimumWidth(View)>
		//    3    7:ireturn         
		}

		public int getPaddingBottom()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingBottom();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #595 <Method int RecyclerView.getPaddingBottom()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingEnd()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingEnd(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #598 <Method int ViewCompat.getPaddingEnd(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingLeft()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingLeft();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #599 <Method int RecyclerView.getPaddingLeft()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingRight()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingRight();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #600 <Method int RecyclerView.getPaddingRight()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingStart()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return ViewCompat.getPaddingStart(((View) (mRecyclerView)));
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokestatic    #603 <Method int ViewCompat.getPaddingStart(View)>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPaddingTop()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				return mRecyclerView.getPaddingTop();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #604 <Method int RecyclerView.getPaddingTop()>
		//    6   14:ireturn         
			else
				return 0;
		//    7   15:iconst_0        
		//    8   16:ireturn         
		}

		public int getPosition(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).getViewLayoutPosition();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:invokevirtual   #608 <Method int RecyclerView$LayoutParams.getViewLayoutPosition()>
		//    4   10:ireturn         
		}

		public int getRightDecorationWidth(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.right;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #361 <Field int Rect.right>
		//    5   13:ireturn         
		}

		public int getRowCountForAccessibility(Recycler recycler, State state)
		{
			while(mRecyclerView == null || mRecyclerView.mAdapter == null || !canScrollVertically()) 
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          17
		//*   3    7:aload_0         
		//*   4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   5   11:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   6   14:ifnonnull       19
				return 1;
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:aload_0         
		//   10   20:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   11   23:ifeq            17
			return mRecyclerView.mAdapter.getItemCount();
		//   12   26:aload_0         
		//   13   27:getfield        #95  <Field RecyclerView mRecyclerView>
		//   14   30:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   15   33:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//   16   36:ireturn         
		}

		public int getSelectionModeForAccessibility(Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public int getTopDecorationHeight(View view)
		{
			return ((LayoutParams)view.getLayoutParams()).mDecorInsets.top;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:getfield        #281 <Field int Rect.top>
		//    5   13:ireturn         
		}

		public void getTransformedBoundingBox(View view, boolean flag, Rect rect)
		{
			if(flag)
		//*   0    0:iload_2         
		//*   1    1:ifeq            158
			{
				Rect rect1 = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    2    4:aload_1         
		//    3    5:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    4    8:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          4
				rect.set(-rect1.left, -rect1.top, view.getWidth() + rect1.right, view.getHeight() + rect1.bottom);
		//    7   16:aload_3         
		//    8   17:aload           4
		//    9   19:getfield        #272 <Field int Rect.left>
		//   10   22:ineg            
		//   11   23:aload           4
		//   12   25:getfield        #281 <Field int Rect.top>
		//   13   28:ineg            
		//   14   29:aload_1         
		//   15   30:invokevirtual   #615 <Method int View.getWidth()>
		//   16   33:aload           4
		//   17   35:getfield        #361 <Field int Rect.right>
		//   18   38:iadd            
		//   19   39:aload_1         
		//   20   40:invokevirtual   #616 <Method int View.getHeight()>
		//   21   43:aload           4
		//   22   45:getfield        #364 <Field int Rect.bottom>
		//   23   48:iadd            
		//   24   49:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			} else
		//*  25   52:aload_0         
		//*  26   53:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  27   56:ifnull          145
		//*  28   59:aload_1         
		//*  29   60:invokevirtual   #620 <Method Matrix View.getMatrix()>
		//*  30   63:astore          4
		//*  31   65:aload           4
		//*  32   67:ifnull          145
		//*  33   70:aload           4
		//*  34   72:invokevirtual   #625 <Method boolean Matrix.isIdentity()>
		//*  35   75:ifne            145
		//*  36   78:aload_0         
		//*  37   79:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  38   82:getfield        #629 <Field RectF RecyclerView.mTempRectF>
		//*  39   85:astore          5
		//*  40   87:aload           5
		//*  41   89:aload_3         
		//*  42   90:invokevirtual   #632 <Method void RectF.set(Rect)>
		//*  43   93:aload           4
		//*  44   95:aload           5
		//*  45   97:invokevirtual   #636 <Method boolean Matrix.mapRect(RectF)>
		//*  46  100:pop             
		//*  47  101:aload_3         
		//*  48  102:aload           5
		//*  49  104:getfield        #639 <Field float RectF.left>
		//*  50  107:f2d             
		//*  51  108:invokestatic    #643 <Method double Math.floor(double)>
		//*  52  111:d2i             
		//*  53  112:aload           5
		//*  54  114:getfield        #645 <Field float RectF.top>
		//*  55  117:f2d             
		//*  56  118:invokestatic    #643 <Method double Math.floor(double)>
		//*  57  121:d2i             
		//*  58  122:aload           5
		//*  59  124:getfield        #647 <Field float RectF.right>
		//*  60  127:f2d             
		//*  61  128:invokestatic    #650 <Method double Math.ceil(double)>
		//*  62  131:d2i             
		//*  63  132:aload           5
		//*  64  134:getfield        #652 <Field float RectF.bottom>
		//*  65  137:f2d             
		//*  66  138:invokestatic    #650 <Method double Math.ceil(double)>
		//*  67  141:d2i             
		//*  68  142:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
		//*  69  145:aload_3         
		//*  70  146:aload_1         
		//*  71  147:invokevirtual   #267 <Method int View.getLeft()>
		//*  72  150:aload_1         
		//*  73  151:invokevirtual   #278 <Method int View.getTop()>
		//*  74  154:invokevirtual   #655 <Method void Rect.offset(int, int)>
		//*  75  157:return          
			{
				rect.set(0, 0, view.getWidth(), view.getHeight());
		//   76  158:aload_3         
		//   77  159:iconst_0        
		//   78  160:iconst_0        
		//   79  161:aload_1         
		//   80  162:invokevirtual   #615 <Method int View.getWidth()>
		//   81  165:aload_1         
		//   82  166:invokevirtual   #616 <Method int View.getHeight()>
		//   83  169:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			}
			if(mRecyclerView != null)
			{
				Matrix matrix = view.getMatrix();
				if(matrix != null && !matrix.isIdentity())
				{
					RectF rectf = mRecyclerView.mTempRectF;
					rectf.set(rect);
					matrix.mapRect(rectf);
					rect.set((int)Math.floor(rectf.left), (int)Math.floor(rectf.top), (int)Math.ceil(rectf.right), (int)Math.ceil(rectf.bottom));
				}
			}
			rect.offset(view.getLeft(), view.getTop());
		//*  84  172:goto            52
		}

		public int getWidth()
		{
			return mWidth;
		//    0    0:aload_0         
		//    1    1:getfield        #657 <Field int mWidth>
		//    2    4:ireturn         
		}

		public int getWidthMode()
		{
			return mWidthMode;
		//    0    0:aload_0         
		//    1    1:getfield        #660 <Field int mWidthMode>
		//    2    4:ireturn         
		}

		boolean hasFlexibleChildInBothOrientations()
		{
			int j = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore_2        
			for(int i = 0; i < j; i++)
		//*   3    5:iconst_0        
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iload_2         
		//*   7    9:icmpge          44
			{
				android.view.ViewGroup.LayoutParams layoutparams = getChildAt(i).getLayoutParams();
		//    8   12:aload_0         
		//    9   13:iload_1         
		//   10   14:invokevirtual   #454 <Method View getChildAt(int)>
		//   11   17:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   12   20:astore_3        
				if(layoutparams.width < 0 && layoutparams.height < 0)
		//*  13   21:aload_3         
		//*  14   22:getfield        #665 <Field int android.view.ViewGroup$LayoutParams.width>
		//*  15   25:ifge            37
		//*  16   28:aload_3         
		//*  17   29:getfield        #667 <Field int android.view.ViewGroup$LayoutParams.height>
		//*  18   32:ifge            37
					return true;
		//   19   35:iconst_1        
		//   20   36:ireturn         
			}

		//   21   37:iload_1         
		//   22   38:iconst_1        
		//   23   39:iadd            
		//   24   40:istore_1        
		//*  25   41:goto            7
			return false;
		//   26   44:iconst_0        
		//   27   45:ireturn         
		}

		public boolean hasFocus()
		{
			return mRecyclerView != null && mRecyclerView.hasFocus();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #670 <Method boolean RecyclerView.hasFocus()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public void ignoreView(View view)
		{
			if(view.getParent() != mRecyclerView || mRecyclerView.indexOfChild(view) == -1)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #150 <Method ViewParent View.getParent()>
		//*   2    4:aload_0         
		//*   3    5:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    8:if_acmpne       23
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:aload_1         
		//*   8   16:invokevirtual   #170 <Method int RecyclerView.indexOfChild(View)>
		//*   9   19:iconst_m1       
		//*  10   20:icmpne          57
			{
				throw new IllegalArgumentException((new StringBuilder()).append("View should be fully attached to be ignored").append(mRecyclerView.exceptionLabel()).toString());
		//   11   23:new             #673 <Class IllegalArgumentException>
		//   12   26:dup             
		//   13   27:new             #162 <Class StringBuilder>
		//   14   30:dup             
		//   15   31:invokespecial   #163 <Method void StringBuilder()>
		//   16   34:ldc2            #675 <String "View should be fully attached to be ignored">
		//   17   37:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   18   40:aload_0         
		//   19   41:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   44:invokevirtual   #177 <Method String RecyclerView.exceptionLabel()>
		//   21   47:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   22   50:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   23   53:invokespecial   #676 <Method void IllegalArgumentException(String)>
		//   24   56:athrow          
			} else
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//   25   57:aload_1         
		//   26   58:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   27   61:astore_1        
				((ViewHolder) (view)).addFlags(128);
		//   28   62:aload_1         
		//   29   63:sipush          128
		//   30   66:invokevirtual   #679 <Method void RecyclerView$ViewHolder.addFlags(int)>
				mRecyclerView.mViewInfoStore.removeViewHolder(((ViewHolder) (view)));
		//   31   69:aload_0         
		//   32   70:getfield        #95  <Field RecyclerView mRecyclerView>
		//   33   73:getfield        #99  <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   34   76:aload_1         
		//   35   77:invokevirtual   #682 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
				return;
		//   36   80:return          
			}
		}

		public boolean isAttachedToWindow()
		{
			return mIsAttachedToWindow;
		//    0    0:aload_0         
		//    1    1:getfield        #68  <Field boolean mIsAttachedToWindow>
		//    2    4:ireturn         
		}

		public boolean isAutoMeasureEnabled()
		{
			return mAutoMeasure;
		//    0    0:aload_0         
		//    1    1:getfield        #70  <Field boolean mAutoMeasure>
		//    2    4:ireturn         
		}

		public boolean isFocused()
		{
			return mRecyclerView != null && mRecyclerView.isFocused();
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #687 <Method boolean RecyclerView.isFocused()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public final boolean isItemPrefetchEnabled()
		{
			return mItemPrefetchEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//    2    4:ireturn         
		}

		public boolean isLayoutHierarchical(Recycler recycler, State state)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public boolean isMeasurementCacheEnabled()
		{
			return mMeasurementCacheEnabled;
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ireturn         
		}

		public boolean isSmoothScrolling()
		{
			return mSmoothScroller != null && mSmoothScroller.isRunning();
		//    0    0:aload_0         
		//    1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    2    4:ifnull          19
		//    3    7:aload_0         
		//    4    8:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//    6   14:ifeq            19
		//    7   17:iconst_1        
		//    8   18:ireturn         
		//    9   19:iconst_0        
		//   10   20:ireturn         
		}

		public boolean isViewPartiallyVisible(View view, boolean flag, boolean flag1)
		{
			boolean flag2 = true;
		//    0    0:iconst_1        
		//    1    1:istore          4
			if(mHorizontalBoundCheck.isViewWithinBoundFlags(view, 24579) && mVerticalBoundCheck.isViewWithinBoundFlags(view, 24579))
		//*   2    3:aload_0         
		//*   3    4:getfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
		//*   4    7:aload_1         
		//*   5    8:sipush          24579
		//*   6   11:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*   7   14:ifeq            39
		//*   8   17:aload_0         
		//*   9   18:getfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
		//*  10   21:aload_1         
		//*  11   22:sipush          24579
		//*  12   25:invokevirtual   #699 <Method boolean ViewBoundsCheck.isViewWithinBoundFlags(View, int)>
		//*  13   28:ifeq            39
				flag1 = true;
		//   14   31:iconst_1        
		//   15   32:istore_3        
			else
		//*  16   33:iload_2         
		//*  17   34:ifeq            44
		//*  18   37:iload_3         
		//*  19   38:ireturn         
				flag1 = false;
		//   20   39:iconst_0        
		//   21   40:istore_3        
			if(flag)
				return flag1;
		//*  22   41:goto            33
			if(!flag1)
		//*  23   44:iload_3         
		//*  24   45:ifne            53
				flag = flag2;
		//   25   48:iload           4
		//   26   50:istore_2        
			else
		//*  27   51:iload_2         
		//*  28   52:ireturn         
				flag = false;
		//   29   53:iconst_0        
		//   30   54:istore_2        
			return flag;
		//*  31   55:goto            51
		}

		public void layoutDecorated(View view, int i, int j, int k, int l)
		{
			Rect rect = ((LayoutParams)view.getLayoutParams()).mDecorInsets;
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    4   10:astore          6
			view.layout(rect.left + i, rect.top + j, k - rect.right, l - rect.bottom);
		//    5   12:aload_1         
		//    6   13:aload           6
		//    7   15:getfield        #272 <Field int Rect.left>
		//    8   18:iload_2         
		//    9   19:iadd            
		//   10   20:aload           6
		//   11   22:getfield        #281 <Field int Rect.top>
		//   12   25:iload_3         
		//   13   26:iadd            
		//   14   27:iload           4
		//   15   29:aload           6
		//   16   31:getfield        #361 <Field int Rect.right>
		//   17   34:isub            
		//   18   35:iload           5
		//   19   37:aload           6
		//   20   39:getfield        #364 <Field int Rect.bottom>
		//   21   42:isub            
		//   22   43:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   23   46:return          
		}

		public void layoutDecoratedWithMargins(View view, int i, int j, int k, int l)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          6
			Rect rect = layoutparams.mDecorInsets;
		//    4    9:aload           6
		//    5   11:getfield        #528 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
		//    6   14:astore          7
			view.layout(rect.left + i + layoutparams.leftMargin, rect.top + j + layoutparams.topMargin, k - rect.right - layoutparams.rightMargin, l - rect.bottom - layoutparams.bottomMargin);
		//    7   16:aload_1         
		//    8   17:aload           7
		//    9   19:getfield        #272 <Field int Rect.left>
		//   10   22:iload_2         
		//   11   23:iadd            
		//   12   24:aload           6
		//   13   26:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   14   29:iadd            
		//   15   30:aload           7
		//   16   32:getfield        #281 <Field int Rect.top>
		//   17   35:iload_3         
		//   18   36:iadd            
		//   19   37:aload           6
		//   20   39:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   21   42:iadd            
		//   22   43:iload           4
		//   23   45:aload           7
		//   24   47:getfield        #361 <Field int Rect.right>
		//   25   50:isub            
		//   26   51:aload           6
		//   27   53:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   28   56:isub            
		//   29   57:iload           5
		//   30   59:aload           7
		//   31   61:getfield        #364 <Field int Rect.bottom>
		//   32   64:isub            
		//   33   65:aload           6
		//   34   67:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   35   70:isub            
		//   36   71:invokevirtual   #705 <Method void View.layout(int, int, int, int)>
		//   37   74:return          
		}

		public void measureChild(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #249 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #258 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:iload_2         
		//   31   65:iload           6
		//   32   67:iload           7
		//   33   69:iadd            
		//   34   70:iadd            
		//   35   71:iadd            
		//   36   72:aload           8
		//   37   74:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   38   77:aload_0         
		//   39   78:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   40   81:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   41   84:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   42   85:aload_0         
		//   43   86:invokevirtual   #261 <Method int getHeight()>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #727 <Method int getHeightMode()>
		//   46   93:aload_0         
		//   47   94:invokevirtual   #252 <Method int getPaddingTop()>
		//   48   97:aload_0         
		//   49   98:invokevirtual   #264 <Method int getPaddingBottom()>
		//   50  101:iadd            
		//   51  102:iload_3         
		//   52  103:iload           4
		//   53  105:iload           5
		//   54  107:iadd            
		//   55  108:iadd            
		//   56  109:iadd            
		//   57  110:aload           8
		//   58  112:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   59  115:aload_0         
		//   60  116:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   61  119:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   62  122:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  63  123:aload_0         
		//*  64  124:aload_1         
		//*  65  125:iload_2         
		//*  66  126:iload_3         
		//*  67  127:aload           8
		//*  68  129:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  69  132:ifeq            141
				view.measure(i, j);
		//   70  135:aload_1         
		//   71  136:iload_2         
		//   72  137:iload_3         
		//   73  138:invokevirtual   #735 <Method void View.measure(int, int)>
		//   74  141:return          
		}

		public void measureChildWithMargins(View view, int i, int j)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #111 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #113 <Class RecyclerView$LayoutParams>
		//    3    7:astore          8
			Rect rect = mRecyclerView.getItemDecorInsetsForChild(view);
		//    4    9:aload_0         
		//    5   10:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   13:aload_1         
		//    7   14:invokevirtual   #429 <Method Rect RecyclerView.getItemDecorInsetsForChild(View)>
		//    8   17:astore          9
			int i1 = rect.left;
		//    9   19:aload           9
		//   10   21:getfield        #272 <Field int Rect.left>
		//   11   24:istore          6
			int j1 = rect.right;
		//   12   26:aload           9
		//   13   28:getfield        #361 <Field int Rect.right>
		//   14   31:istore          7
			int k = rect.top;
		//   15   33:aload           9
		//   16   35:getfield        #281 <Field int Rect.top>
		//   17   38:istore          4
			int l = rect.bottom;
		//   18   40:aload           9
		//   19   42:getfield        #364 <Field int Rect.bottom>
		//   20   45:istore          5
			i = getChildMeasureSpec(getWidth(), getWidthMode(), getPaddingLeft() + getPaddingRight() + layoutparams.leftMargin + layoutparams.rightMargin + (i + (i1 + j1)), layoutparams.width, canScrollHorizontally());
		//   21   47:aload_0         
		//   22   48:invokevirtual   #255 <Method int getWidth()>
		//   23   51:aload_0         
		//   24   52:invokevirtual   #722 <Method int getWidthMode()>
		//   25   55:aload_0         
		//   26   56:invokevirtual   #249 <Method int getPaddingLeft()>
		//   27   59:aload_0         
		//   28   60:invokevirtual   #258 <Method int getPaddingRight()>
		//   29   63:iadd            
		//   30   64:aload           8
		//   31   66:getfield        #709 <Field int RecyclerView$LayoutParams.leftMargin>
		//   32   69:iadd            
		//   33   70:aload           8
		//   34   72:getfield        #715 <Field int RecyclerView$LayoutParams.rightMargin>
		//   35   75:iadd            
		//   36   76:iload_2         
		//   37   77:iload           6
		//   38   79:iload           7
		//   39   81:iadd            
		//   40   82:iadd            
		//   41   83:iadd            
		//   42   84:aload           8
		//   43   86:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   44   89:aload_0         
		//   45   90:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//   46   93:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   47   96:istore_2        
			j = getChildMeasureSpec(getHeight(), getHeightMode(), getPaddingTop() + getPaddingBottom() + layoutparams.topMargin + layoutparams.bottomMargin + (j + (k + l)), layoutparams.height, canScrollVertically());
		//   48   97:aload_0         
		//   49   98:invokevirtual   #261 <Method int getHeight()>
		//   50  101:aload_0         
		//   51  102:invokevirtual   #727 <Method int getHeightMode()>
		//   52  105:aload_0         
		//   53  106:invokevirtual   #252 <Method int getPaddingTop()>
		//   54  109:aload_0         
		//   55  110:invokevirtual   #264 <Method int getPaddingBottom()>
		//   56  113:iadd            
		//   57  114:aload           8
		//   58  116:getfield        #712 <Field int RecyclerView$LayoutParams.topMargin>
		//   59  119:iadd            
		//   60  120:aload           8
		//   61  122:getfield        #718 <Field int RecyclerView$LayoutParams.bottomMargin>
		//   62  125:iadd            
		//   63  126:iload_3         
		//   64  127:iload           4
		//   65  129:iload           5
		//   66  131:iadd            
		//   67  132:iadd            
		//   68  133:iadd            
		//   69  134:aload           8
		//   70  136:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   71  139:aload_0         
		//   72  140:invokevirtual   #611 <Method boolean canScrollVertically()>
		//   73  143:invokestatic    #725 <Method int getChildMeasureSpec(int, int, int, int, boolean)>
		//   74  146:istore_3        
			if(shouldMeasureChild(view, i, j, layoutparams))
		//*  75  147:aload_0         
		//*  76  148:aload_1         
		//*  77  149:iload_2         
		//*  78  150:iload_3         
		//*  79  151:aload           8
		//*  80  153:invokevirtual   #732 <Method boolean shouldMeasureChild(View, int, int, RecyclerView$LayoutParams)>
		//*  81  156:ifeq            165
				view.measure(i, j);
		//   82  159:aload_1         
		//   83  160:iload_2         
		//   84  161:iload_3         
		//   85  162:invokevirtual   #735 <Method void View.measure(int, int)>
		//   86  165:return          
		}

		public void moveView(int i, int j)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			if(view == null)
		//*   4    6:aload_3         
		//*   5    7:ifnonnull       48
			{
				throw new IllegalArgumentException((new StringBuilder()).append("Cannot move a child from non-existing index:").append(i).append(mRecyclerView.toString()).toString());
		//    6   10:new             #673 <Class IllegalArgumentException>
		//    7   13:dup             
		//    8   14:new             #162 <Class StringBuilder>
		//    9   17:dup             
		//   10   18:invokespecial   #163 <Method void StringBuilder()>
		//   11   21:ldc2            #738 <String "Cannot move a child from non-existing index:">
		//   12   24:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   13   27:iload_1         
		//   14   28:invokevirtual   #173 <Method StringBuilder StringBuilder.append(int)>
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:invokevirtual   #739 <Method String RecyclerView.toString()>
		//   18   38:invokevirtual   #169 <Method StringBuilder StringBuilder.append(String)>
		//   19   41:invokevirtual   #180 <Method String StringBuilder.toString()>
		//   20   44:invokespecial   #676 <Method void IllegalArgumentException(String)>
		//   21   47:athrow          
			} else
			{
				detachViewAt(i);
		//   22   48:aload_0         
		//   23   49:iload_1         
		//   24   50:invokevirtual   #394 <Method void detachViewAt(int)>
				attachView(view, j);
		//   25   53:aload_0         
		//   26   54:aload_3         
		//   27   55:iload_2         
		//   28   56:invokevirtual   #417 <Method void attachView(View, int)>
				return;
		//   29   59:return          
			}
		}

		public void offsetChildrenHorizontal(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenHorizontal(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #742 <Method void RecyclerView.offsetChildrenHorizontal(int)>
		//    7   15:return          
		}

		public void offsetChildrenVertical(int i)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				mRecyclerView.offsetChildrenVertical(i);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:iload_1         
		//    6   12:invokevirtual   #745 <Method void RecyclerView.offsetChildrenVertical(int)>
		//    7   15:return          
		}

		public void onAdapterChanged(Adapter adapter, Adapter adapter1)
		{
		//    0    0:return          
		}

		public boolean onAddFocusables(RecyclerView recyclerview, ArrayList arraylist, int i, int j)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onAttachedToWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onDetachedFromWindow(RecyclerView recyclerview, Recycler recycler)
		{
			onDetachedFromWindow(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #754 <Method void onDetachedFromWindow(RecyclerView)>
		//    3    5:return          
		}

		public View onFocusSearchFailed(View view, int i, Recycler recycler, State state)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onInitializeAccessibilityEvent(Recycler recycler, State state, AccessibilityEvent accessibilityevent)
		{
			boolean flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore          5
			if(mRecyclerView != null && accessibilityevent != null)
		//*   2    3:aload_0         
		//*   3    4:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   4    7:ifnull          14
		//*   5   10:aload_3         
		//*   6   11:ifnonnull       15
		//*   7   14:return          
			{
				boolean flag = flag1;
		//    8   15:iload           5
		//    9   17:istore          4
				if(!mRecyclerView.canScrollVertically(1))
		//*  10   19:aload_0         
		//*  11   20:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   23:iconst_1        
		//*  13   24:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  14   27:ifne            75
				{
					flag = flag1;
		//   15   30:iload           5
		//   16   32:istore          4
					if(!mRecyclerView.canScrollVertically(-1))
		//*  17   34:aload_0         
		//*  18   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  19   38:iconst_m1       
		//*  20   39:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  21   42:ifne            75
					{
						flag = flag1;
		//   22   45:iload           5
		//   23   47:istore          4
						if(!mRecyclerView.canScrollHorizontally(-1))
		//*  24   49:aload_0         
		//*  25   50:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  26   53:iconst_m1       
		//*  27   54:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  28   57:ifne            75
							if(mRecyclerView.canScrollHorizontally(1))
		//*  29   60:aload_0         
		//*  30   61:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  31   64:iconst_1        
		//*  32   65:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  33   68:ifeq            106
								flag = flag1;
		//   34   71:iload           5
		//   35   73:istore          4
							else
		//*  36   75:aload_3         
		//*  37   76:iload           4
		//*  38   78:invokevirtual   #769 <Method void AccessibilityEvent.setScrollable(boolean)>
		//*  39   81:aload_0         
		//*  40   82:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  41   85:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  42   88:ifnull          14
		//*  43   91:aload_3         
		//*  44   92:aload_0         
		//*  45   93:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  46   96:getfield        #378 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  47   99:invokevirtual   #540 <Method int RecyclerView$Adapter.getItemCount()>
		//*  48  102:invokevirtual   #772 <Method void AccessibilityEvent.setItemCount(int)>
		//*  49  105:return          
								flag = false;
		//   50  106:iconst_0        
		//   51  107:istore          4
					}
				}
				accessibilityevent.setScrollable(flag);
				if(mRecyclerView.mAdapter != null)
				{
					accessibilityevent.setItemCount(mRecyclerView.mAdapter.getItemCount());
					return;
				}
			}
		//*  52  109:goto            75
		}

		public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent)
		{
			onInitializeAccessibilityEvent(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilityevent);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #779 <Method void onInitializeAccessibilityEvent(RecyclerView$Recycler, RecyclerView$State, AccessibilityEvent)>
		//    9   19:return          
		}

		void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			onInitializeAccessibilityNodeInfo(mRecyclerView.mRecycler, mRecyclerView.mState, accessibilitynodeinfocompat);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:invokevirtual   #784 <Method void onInitializeAccessibilityNodeInfo(RecyclerView$Recycler, RecyclerView$State, AccessibilityNodeInfoCompat)>
		//    9   19:return          
		}

		public void onInitializeAccessibilityNodeInfo(Recycler recycler, State state, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			if(mRecyclerView.canScrollVertically(-1) || mRecyclerView.canScrollHorizontally(-1))
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:iconst_m1       
		//*   3    5:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*   4    8:ifne            22
		//*   5   11:aload_0         
		//*   6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   7   15:iconst_m1       
		//*   8   16:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*   9   19:ifeq            34
			{
				accessibilitynodeinfocompat.addAction(8192);
		//   10   22:aload_3         
		//   11   23:sipush          8192
		//   12   26:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   13   29:aload_3         
		//   14   30:iconst_1        
		//   15   31:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			if(mRecyclerView.canScrollVertically(1) || mRecyclerView.canScrollHorizontally(1))
		//*  16   34:aload_0         
		//*  17   35:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  18   38:iconst_1        
		//*  19   39:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  20   42:ifne            56
		//*  21   45:aload_0         
		//*  22   46:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  23   49:iconst_1        
		//*  24   50:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  25   53:ifeq            68
			{
				accessibilitynodeinfocompat.addAction(4096);
		//   26   56:aload_3         
		//   27   57:sipush          4096
		//   28   60:invokevirtual   #789 <Method void AccessibilityNodeInfoCompat.addAction(int)>
				accessibilitynodeinfocompat.setScrollable(true);
		//   29   63:aload_3         
		//   30   64:iconst_1        
		//   31   65:invokevirtual   #790 <Method void AccessibilityNodeInfoCompat.setScrollable(boolean)>
			}
			accessibilitynodeinfocompat.setCollectionInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(getRowCountForAccessibility(recycler, state), getColumnCountForAccessibility(recycler, state), isLayoutHierarchical(recycler, state), getSelectionModeForAccessibility(recycler, state)))));
		//   32   68:aload_3         
		//   33   69:aload_0         
		//   34   70:aload_1         
		//   35   71:aload_2         
		//   36   72:invokevirtual   #792 <Method int getRowCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   37   75:aload_0         
		//   38   76:aload_1         
		//   39   77:aload_2         
		//   40   78:invokevirtual   #794 <Method int getColumnCountForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   41   81:aload_0         
		//   42   82:aload_1         
		//   43   83:aload_2         
		//   44   84:invokevirtual   #796 <Method boolean isLayoutHierarchical(RecyclerView$Recycler, RecyclerView$State)>
		//   45   87:aload_0         
		//   46   88:aload_1         
		//   47   89:aload_2         
		//   48   90:invokevirtual   #798 <Method int getSelectionModeForAccessibility(RecyclerView$Recycler, RecyclerView$State)>
		//   49   93:invokestatic    #804 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat.obtain(int, int, boolean, int)>
		//   50   96:invokevirtual   #808 <Method void AccessibilityNodeInfoCompat.setCollectionInfo(Object)>
		//   51   99:return          
		}

		public void onInitializeAccessibilityNodeInfoForItem(Recycler recycler, State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			int i;
			int j;
			if(canScrollVertically())
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #611 <Method boolean canScrollVertically()>
		//*   2    4:ifeq            45
				i = getPosition(view);
		//    3    7:aload_0         
		//    4    8:aload_3         
		//    5    9:invokevirtual   #812 <Method int getPosition(View)>
		//    6   12:istore          5
			else
		//*   7   14:aload_0         
		//*   8   15:invokevirtual   #537 <Method boolean canScrollHorizontally()>
		//*   9   18:ifeq            51
		//*  10   21:aload_0         
		//*  11   22:aload_3         
		//*  12   23:invokevirtual   #812 <Method int getPosition(View)>
		//*  13   26:istore          6
		//*  14   28:aload           4
		//*  15   30:iload           5
		//*  16   32:iconst_1        
		//*  17   33:iload           6
		//*  18   35:iconst_1        
		//*  19   36:iconst_0        
		//*  20   37:iconst_0        
		//*  21   38:invokestatic    #817 <Method android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean)>
		//*  22   41:invokevirtual   #820 <Method void AccessibilityNodeInfoCompat.setCollectionItemInfo(Object)>
		//*  23   44:return          
				i = 0;
		//   24   45:iconst_0        
		//   25   46:istore          5
			if(canScrollHorizontally())
				j = getPosition(view);
			else
		//*  26   48:goto            14
				j = 0;
		//   27   51:iconst_0        
		//   28   52:istore          6
			accessibilitynodeinfocompat.setCollectionItemInfo(((Object) (android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, j, 1, false, false))));
		//*  29   54:goto            28
		}

		void onInitializeAccessibilityNodeInfoForItem(View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_3        
			if(viewholder != null && !viewholder.isRemoved() && !mChildHelper.isHidden(viewholder.itemView))
		//*   3    5:aload_3         
		//*   4    6:ifnull          50
		//*   5    9:aload_3         
		//*   6   10:invokevirtual   #93  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   7   13:ifne            50
		//*   8   16:aload_0         
		//*   9   17:getfield        #124 <Field ChildHelper mChildHelper>
		//*  10   20:aload_3         
		//*  11   21:getfield        #137 <Field View RecyclerView$ViewHolder.itemView>
		//*  12   24:invokevirtual   #490 <Method boolean ChildHelper.isHidden(View)>
		//*  13   27:ifne            50
				onInitializeAccessibilityNodeInfoForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, accessibilitynodeinfocompat);
		//   14   30:aload_0         
		//   15   31:aload_0         
		//   16   32:getfield        #95  <Field RecyclerView mRecyclerView>
		//   17   35:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   18   38:aload_0         
		//   19   39:getfield        #95  <Field RecyclerView mRecyclerView>
		//   20   42:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//   21   45:aload_1         
		//   22   46:aload_2         
		//   23   47:invokevirtual   #823 <Method void onInitializeAccessibilityNodeInfoForItem(RecyclerView$Recycler, RecyclerView$State, View, AccessibilityNodeInfoCompat)>
		//   24   50:return          
		}

		public View onInterceptFocusSearch(View view, int i)
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onItemsAdded(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsChanged(RecyclerView recyclerview)
		{
		//    0    0:return          
		}

		public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k)
		{
		//    0    0:return          
		}

		public void onItemsRemoved(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj)
		{
			onItemsUpdated(recyclerview, i, j);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:invokevirtual   #835 <Method void onItemsUpdated(RecyclerView, int, int)>
		//    5    7:return          
		}

		public void onLayoutChildren(Recycler recycler, State state)
		{
			Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #840 <String "You must override onLayoutChildren(Recycler recycler, State state) ">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void onLayoutCompleted(State state)
		{
		//    0    0:return          
		}

		public void onMeasure(Recycler recycler, State state, int i, int j)
		{
			mRecyclerView.defaultOnMeasure(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_3         
		//    3    5:iload           4
		//    4    7:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
		//    5   10:return          
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, State state, View view, View view1)
		{
			return onRequestChildFocus(recyclerview, view, view1);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_3         
		//    3    3:aload           4
		//    4    5:invokevirtual   #858 <Method boolean onRequestChildFocus(RecyclerView, View, View)>
		//    5    8:ireturn         
		}

		public boolean onRequestChildFocus(RecyclerView recyclerview, View view, View view1)
		{
			return isSmoothScrolling() || recyclerview.isComputingLayout();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #860 <Method boolean isSmoothScrolling()>
		//    2    4:ifne            14
		//    3    7:aload_1         
		//    4    8:invokevirtual   #863 <Method boolean RecyclerView.isComputingLayout()>
		//    5   11:ifeq            16
		//    6   14:iconst_1        
		//    7   15:ireturn         
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void onRestoreInstanceState(Parcelable parcelable)
		{
		//    0    0:return          
		}

		public Parcelable onSaveInstanceState()
		{
			return null;
		//    0    0:aconst_null     
		//    1    1:areturn         
		}

		public void onScrollStateChanged(int i)
		{
		//    0    0:return          
		}

		boolean performAccessibilityAction(int i, Bundle bundle)
		{
			return performAccessibilityAction(mRecyclerView.mRecycler, mRecyclerView.mState, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iload_1         
		//    8   16:aload_2         
		//    9   17:invokevirtual   #873 <Method boolean performAccessibilityAction(RecyclerView$Recycler, RecyclerView$State, int, Bundle)>
		//   10   20:ireturn         
		}

		public boolean performAccessibilityAction(Recycler recycler, State state, int i, Bundle bundle)
		{
			if(mRecyclerView != null) goto _L2; else goto _L1
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:ifnonnull       9
_L1:
			return false;
		//    3    7:iconst_0        
		//    4    8:ireturn         
_L2:
			int l;
			boolean flag1;
			boolean flag2;
			flag1 = false;
		//    5    9:iconst_0        
		//    6   10:istore          7
			flag2 = false;
		//    7   12:iconst_0        
		//    8   13:istore          8
			boolean flag = false;
		//    9   15:iconst_0        
		//   10   16:istore          5
			l = 0;
		//   11   18:iconst_0        
		//   12   19:istore          6
			switch(i)
		//*  13   21:iload_3         
			{
		//*  14   22:lookupswitch    2: default 48
		//		               4096: 141
		//		               8192: 72
			default:
				i = ((int) (flag));
		//   15   48:iload           5
		//   16   50:istore_3        
				break;

			case 4096: 
				break MISSING_BLOCK_LABEL_141;

			case 8192: 
				break; /* Loop/switch isn't completed */
			}
_L4:
			if(i != 0 || l != 0)
		//*  17   51:iload_3         
		//*  18   52:ifne            60
		//*  19   55:iload           6
		//*  20   57:ifeq            7
			{
				mRecyclerView.scrollBy(l, i);
		//   21   60:aload_0         
		//   22   61:getfield        #95  <Field RecyclerView mRecyclerView>
		//   23   64:iload           6
		//   24   66:iload_3         
		//   25   67:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				return true;
		//   26   70:iconst_1        
		//   27   71:ireturn         
			}
			if(true) goto _L1; else goto _L3
_L3:
			int j = ((int) (flag1));
		//   28   72:iload           7
		//   29   74:istore          5
			if(mRecyclerView.canScrollVertically(-1))
		//*  30   76:aload_0         
		//*  31   77:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  32   80:iconst_m1       
		//*  33   81:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  34   84:ifeq            104
				j = -(getHeight() - getPaddingTop() - getPaddingBottom());
		//   35   87:aload_0         
		//   36   88:invokevirtual   #261 <Method int getHeight()>
		//   37   91:aload_0         
		//   38   92:invokevirtual   #252 <Method int getPaddingTop()>
		//   39   95:isub            
		//   40   96:aload_0         
		//   41   97:invokevirtual   #264 <Method int getPaddingBottom()>
		//   42  100:isub            
		//   43  101:ineg            
		//   44  102:istore          5
			i = j;
		//   45  104:iload           5
		//   46  106:istore_3        
			if(mRecyclerView.canScrollHorizontally(-1))
		//*  47  107:aload_0         
		//*  48  108:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  49  111:iconst_m1       
		//*  50  112:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  51  115:ifeq            51
			{
				l = -(getWidth() - getPaddingLeft() - getPaddingRight());
		//   52  118:aload_0         
		//   53  119:invokevirtual   #255 <Method int getWidth()>
		//   54  122:aload_0         
		//   55  123:invokevirtual   #249 <Method int getPaddingLeft()>
		//   56  126:isub            
		//   57  127:aload_0         
		//   58  128:invokevirtual   #258 <Method int getPaddingRight()>
		//   59  131:isub            
		//   60  132:ineg            
		//   61  133:istore          6
				i = j;
		//   62  135:iload           5
		//   63  137:istore_3        
			}
			  goto _L4
		//*  64  138:goto            51
			int k = ((int) (flag2));
		//   65  141:iload           8
		//   66  143:istore          5
			if(mRecyclerView.canScrollVertically(1))
		//*  67  145:aload_0         
		//*  68  146:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  69  149:iconst_1        
		//*  70  150:invokevirtual   #761 <Method boolean RecyclerView.canScrollVertically(int)>
		//*  71  153:ifeq            172
				k = getHeight() - getPaddingTop() - getPaddingBottom();
		//   72  156:aload_0         
		//   73  157:invokevirtual   #261 <Method int getHeight()>
		//   74  160:aload_0         
		//   75  161:invokevirtual   #252 <Method int getPaddingTop()>
		//   76  164:isub            
		//   77  165:aload_0         
		//   78  166:invokevirtual   #264 <Method int getPaddingBottom()>
		//   79  169:isub            
		//   80  170:istore          5
			i = k;
		//   81  172:iload           5
		//   82  174:istore_3        
			if(mRecyclerView.canScrollHorizontally(1))
		//*  83  175:aload_0         
		//*  84  176:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  85  179:iconst_1        
		//*  86  180:invokevirtual   #763 <Method boolean RecyclerView.canScrollHorizontally(int)>
		//*  87  183:ifeq            51
			{
				l = getWidth() - getPaddingLeft() - getPaddingRight();
		//   88  186:aload_0         
		//   89  187:invokevirtual   #255 <Method int getWidth()>
		//   90  190:aload_0         
		//   91  191:invokevirtual   #249 <Method int getPaddingLeft()>
		//   92  194:isub            
		//   93  195:aload_0         
		//   94  196:invokevirtual   #258 <Method int getPaddingRight()>
		//   95  199:isub            
		//   96  200:istore          6
				i = k;
		//   97  202:iload           5
		//   98  204:istore_3        
			}
			  goto _L4
		//*  99  205:goto            51
		}

		public boolean performAccessibilityActionForItem(Recycler recycler, State state, View view, int i, Bundle bundle)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean performAccessibilityActionForItem(View view, int i, Bundle bundle)
		{
			return performAccessibilityActionForItem(mRecyclerView.mRecycler, mRecyclerView.mState, view, i, bundle);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #95  <Field RecyclerView mRecyclerView>
		//    3    5:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//    4    8:aload_0         
		//    5    9:getfield        #95  <Field RecyclerView mRecyclerView>
		//    6   12:getfield        #499 <Field RecyclerView$State RecyclerView.mState>
		//    7   15:aload_1         
		//    8   16:iload_2         
		//    9   17:aload_3         
		//   10   18:invokevirtual   #881 <Method boolean performAccessibilityActionForItem(RecyclerView$Recycler, RecyclerView$State, View, int, Bundle)>
		//   11   21:ireturn         
		}

		public void postOnAnimation(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          15
				ViewCompat.postOnAnimation(((View) (mRecyclerView)), runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokestatic    #886 <Method void ViewCompat.postOnAnimation(View, Runnable)>
		//    7   15:return          
		}

		public void removeAllViews()
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_1        
		//*   5    7:iload_1         
		//*   6    8:iflt            26
				mChildHelper.removeViewAt(i);
		//    7   11:aload_0         
		//    8   12:getfield        #124 <Field ChildHelper mChildHelper>
		//    9   15:iload_1         
		//   10   16:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            7
		//   16   26:return          
		}

		public void removeAndRecycleAllViews(Recycler recycler)
		{
			for(int i = getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:invokevirtual   #450 <Method int getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_2        
		//*   5    7:iload_2         
		//*   6    8:iflt            38
				if(!RecyclerView.getChildViewHolderInt(getChildAt(i)).shouldIgnore())
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:invokevirtual   #454 <Method View getChildAt(int)>
		//*  10   16:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//*  11   19:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  12   22:ifne            31
					removeAndRecycleViewAt(i, recycler);
		//   13   25:aload_0         
		//   14   26:iload_2         
		//   15   27:aload_1         
		//   16   28:invokevirtual   #892 <Method void removeAndRecycleViewAt(int, RecyclerView$Recycler)>

		//   17   31:iload_2         
		//   18   32:iconst_1        
		//   19   33:isub            
		//   20   34:istore_2        
		//*  21   35:goto            7
		//   22   38:return          
		}

		void removeAndRecycleScrapInt(Recycler recycler)
		{
			int j = recycler.getScrapCount();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #896 <Method int RecyclerView$Recycler.getScrapCount()>
		//    2    4:istore_3        
			int i = j - 1;
		//    3    5:iload_3         
		//    4    6:iconst_1        
		//    5    7:isub            
		//    6    8:istore_2        
			while(i >= 0) 
		//*   7    9:iload_2         
		//*   8   10:iflt            103
			{
				View view = recycler.getScrapViewAt(i);
		//    9   13:aload_1         
		//   10   14:iload_2         
		//   11   15:invokevirtual   #899 <Method View RecyclerView$Recycler.getScrapViewAt(int)>
		//   12   18:astore          4
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//   13   20:aload           4
		//   14   22:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   15   25:astore          5
				if(!viewholder.shouldIgnore())
		//*  16   27:aload           5
		//*  17   29:invokevirtual   #371 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  18   32:ifeq            42
		//*  19   35:iload_2         
		//*  20   36:iconst_1        
		//*  21   37:isub            
		//*  22   38:istore_2        
		//*  23   39:goto            9
				{
					viewholder.setIsRecyclable(false);
		//   24   42:aload           5
		//   25   44:iconst_0        
		//   26   45:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
					if(viewholder.isTmpDetached())
		//*  27   48:aload           5
		//*  28   50:invokevirtual   #905 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  29   53:ifeq            66
						mRecyclerView.removeDetachedView(view, false);
		//   30   56:aload_0         
		//   31   57:getfield        #95  <Field RecyclerView mRecyclerView>
		//   32   60:aload           4
		//   33   62:iconst_0        
		//   34   63:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
					if(mRecyclerView.mItemAnimator != null)
		//*  35   66:aload_0         
		//*  36   67:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  37   70:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*  38   73:ifnull          88
						mRecyclerView.mItemAnimator.endAnimation(viewholder);
		//   39   76:aload_0         
		//   40   77:getfield        #95  <Field RecyclerView mRecyclerView>
		//   41   80:getfield        #478 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//   42   83:aload           5
		//   43   85:invokevirtual   #482 <Method void RecyclerView$ItemAnimator.endAnimation(RecyclerView$ViewHolder)>
					viewholder.setIsRecyclable(true);
		//   44   88:aload           5
		//   45   90:iconst_1        
		//   46   91:invokevirtual   #902 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
					recycler.quickRecycleScrapView(view);
		//   47   94:aload_1         
		//   48   95:aload           4
		//   49   97:invokevirtual   #912 <Method void RecyclerView$Recycler.quickRecycleScrapView(View)>
				}
				i--;
			}
		//*  50  100:goto            35
			recycler.clearScrap();
		//   51  103:aload_1         
		//   52  104:invokevirtual   #915 <Method void RecyclerView$Recycler.clearScrap()>
			if(j > 0)
		//*  53  107:iload_3         
		//*  54  108:ifle            118
				mRecyclerView.invalidate();
		//   55  111:aload_0         
		//   56  112:getfield        #95  <Field RecyclerView mRecyclerView>
		//   57  115:invokevirtual   #916 <Method void RecyclerView.invalidate()>
		//   58  118:return          
		}

		public void removeAndRecycleView(View view, Recycler recycler)
		{
			removeView(view);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #920 <Method void removeView(View)>
			recycler.recycleView(view);
		//    3    5:aload_2         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//    6   10:return          
		}

		public void removeAndRecycleViewAt(int i, Recycler recycler)
		{
			View view = getChildAt(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//    3    5:astore_3        
			removeViewAt(i);
		//    4    6:aload_0         
		//    5    7:iload_1         
		//    6    8:invokevirtual   #386 <Method void removeViewAt(int)>
			recycler.recycleView(view);
		//    7   11:aload_2         
		//    8   12:aload_3         
		//    9   13:invokevirtual   #923 <Method void RecyclerView$Recycler.recycleView(View)>
		//   10   16:return          
		}

		public boolean removeCallbacks(Runnable runnable)
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          16
				return mRecyclerView.removeCallbacks(runnable);
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #927 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    7   15:ireturn         
			else
				return false;
		//    8   16:iconst_0        
		//    9   17:ireturn         
		}

		public void removeDetachedView(View view)
		{
			mRecyclerView.removeDetachedView(view, false);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:iconst_0        
		//    4    6:invokevirtual   #909 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//    5    9:return          
		}

		public void removeView(View view)
		{
			mChildHelper.removeView(view);
		//    0    0:aload_0         
		//    1    1:getfield        #124 <Field ChildHelper mChildHelper>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #928 <Method void ChildHelper.removeView(View)>
		//    4    8:return          
		}

		public void removeViewAt(int i)
		{
			if(getChildAt(i) != null)
		//*   0    0:aload_0         
		//*   1    1:iload_1         
		//*   2    2:invokevirtual   #454 <Method View getChildAt(int)>
		//*   3    5:ifnull          16
				mChildHelper.removeViewAt(i);
		//    4    8:aload_0         
		//    5    9:getfield        #124 <Field ChildHelper mChildHelper>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #888 <Method void ChildHelper.removeViewAt(int)>
		//    8   16:return          
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag)
		{
			return requestChildRectangleOnScreen(recyclerview, view, rect, flag, false);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:aload_3         
		//    4    4:iload           4
		//    5    6:iconst_0        
		//    6    7:invokevirtual   #933 <Method boolean requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
		//    7   10:ireturn         
		}

		public boolean requestChildRectangleOnScreen(RecyclerView recyclerview, View view, Rect rect, boolean flag, boolean flag1)
		{
label0:
			{
				boolean flag2 = false;
		//    0    0:iconst_0        
		//    1    1:istore          8
				view = ((View) (getChildRectangleOnScreenScrollAmount(recyclerview, view, rect, flag)));
		//    2    3:aload_0         
		//    3    4:aload_1         
		//    4    5:aload_2         
		//    5    6:aload_3         
		//    6    7:iload           4
		//    7    9:invokespecial   #935 <Method int[] getChildRectangleOnScreenScrollAmount(RecyclerView, View, Rect, boolean)>
		//    8   12:astore_2        
				int i = view[0];
		//    9   13:aload_2         
		//   10   14:iconst_0        
		//   11   15:iaload          
		//   12   16:istore          6
				int j = view[1];
		//   13   18:aload_2         
		//   14   19:iconst_1        
		//   15   20:iaload          
		//   16   21:istore          7
				if(flag1)
		//*  17   23:iload           5
		//*  18   25:ifeq            44
				{
					flag1 = flag2;
		//   19   28:iload           8
		//   20   30:istore          5
					if(!isFocusedChildVisibleAfterScrolling(recyclerview, i, j))
						break label0;
		//   21   32:aload_0         
		//   22   33:aload_1         
		//   23   34:iload           6
		//   24   36:iload           7
		//   25   38:invokespecial   #937 <Method boolean isFocusedChildVisibleAfterScrolling(RecyclerView, int, int)>
		//   26   41:ifeq            74
				}
				if(i == 0)
		//*  27   44:iload           6
		//*  28   46:ifne            58
				{
					flag1 = flag2;
		//   29   49:iload           8
		//   30   51:istore          5
					if(j == 0)
						break label0;
		//   31   53:iload           7
		//   32   55:ifeq            74
				}
				if(flag)
		//*  33   58:iload           4
		//*  34   60:ifeq            77
					recyclerview.scrollBy(i, j);
		//   35   63:aload_1         
		//   36   64:iload           6
		//   37   66:iload           7
		//   38   68:invokevirtual   #876 <Method void RecyclerView.scrollBy(int, int)>
				else
		//*  39   71:iconst_1        
		//*  40   72:istore          5
		//*  41   74:iload           5
		//*  42   76:ireturn         
					recyclerview.smoothScrollBy(i, j);
		//   43   77:aload_1         
		//   44   78:iload           6
		//   45   80:iload           7
		//   46   82:invokevirtual   #940 <Method void RecyclerView.smoothScrollBy(int, int)>
				flag1 = true;
			}
			return flag1;
		//*  47   85:goto            71
		}

		public void requestLayout()
		{
			if(mRecyclerView != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//*   2    4:ifnull          14
				mRecyclerView.requestLayout();
		//    3    7:aload_0         
		//    4    8:getfield        #95  <Field RecyclerView mRecyclerView>
		//    5   11:invokevirtual   #943 <Method void RecyclerView.requestLayout()>
		//    6   14:return          
		}

		public void requestSimpleAnimationsInNextLayout()
		{
			mRequestedSimpleAnimations = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #66  <Field boolean mRequestedSimpleAnimations>
		//    3    5:return          
		}

		public int scrollHorizontallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void scrollToPosition(int i)
		{
		//    0    0:return          
		}

		public int scrollVerticallyBy(int i, Recycler recycler, State state)
		{
			return 0;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void setAutoMeasureEnabled(boolean flag)
		{
			mAutoMeasure = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #70  <Field boolean mAutoMeasure>
		//    3    5:return          
		}

		void setExactMeasureSpecsFrom(RecyclerView recyclerview)
		{
			setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(recyclerview.getHeight(), 0x40000000));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//    3    5:ldc1            #237 <Int 0x40000000>
		//    4    7:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    5   10:aload_1         
		//    6   11:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//    7   14:ldc1            #237 <Int 0x40000000>
		//    8   16:invokestatic    #240 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
		//    9   19:invokevirtual   #955 <Method void setMeasureSpecs(int, int)>
		//   10   22:return          
		}

		public final void setItemPrefetchEnabled(boolean flag)
		{
			if(flag != mItemPrefetchEnabled)
		//*   0    0:iload_1         
		//*   1    1:aload_0         
		//*   2    2:getfield        #74  <Field boolean mItemPrefetchEnabled>
		//*   3    5:icmpeq          35
			{
				mItemPrefetchEnabled = flag;
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:putfield        #74  <Field boolean mItemPrefetchEnabled>
				mPrefetchMaxCountObserved = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #958 <Field int mPrefetchMaxCountObserved>
				if(mRecyclerView != null)
		//*  10   18:aload_0         
		//*  11   19:getfield        #95  <Field RecyclerView mRecyclerView>
		//*  12   22:ifnull          35
					mRecyclerView.mRecycler.updateViewCacheSize();
		//   13   25:aload_0         
		//   14   26:getfield        #95  <Field RecyclerView mRecyclerView>
		//   15   29:getfield        #777 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//   16   32:invokevirtual   #961 <Method void RecyclerView$Recycler.updateViewCacheSize()>
			}
		//   17   35:return          
		}

		void setMeasureSpecs(int i, int j)
		{
			mWidth = android.view.View.MeasureSpec.getSize(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//    3    5:putfield        #657 <Field int mWidth>
			mWidthMode = android.view.View.MeasureSpec.getMode(i);
		//    4    8:aload_0         
		//    5    9:iload_1         
		//    6   10:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//    7   13:putfield        #660 <Field int mWidthMode>
			if(mWidthMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*   8   16:aload_0         
		//*   9   17:getfield        #660 <Field int mWidthMode>
		//*  10   20:ifne            34
		//*  11   23:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  12   26:ifne            34
				mWidth = 0;
		//   13   29:aload_0         
		//   14   30:iconst_0        
		//   15   31:putfield        #657 <Field int mWidth>
			mHeight = android.view.View.MeasureSpec.getSize(j);
		//   16   34:aload_0         
		//   17   35:iload_2         
		//   18   36:invokestatic    #219 <Method int android.view.View$MeasureSpec.getSize(int)>
		//   19   39:putfield        #574 <Field int mHeight>
			mHeightMode = android.view.View.MeasureSpec.getMode(j);
		//   20   42:aload_0         
		//   21   43:iload_2         
		//   22   44:invokestatic    #216 <Method int android.view.View$MeasureSpec.getMode(int)>
		//   23   47:putfield        #577 <Field int mHeightMode>
			if(mHeightMode == 0 && !RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC)
		//*  24   50:aload_0         
		//*  25   51:getfield        #577 <Field int mHeightMode>
		//*  26   54:ifne            68
		//*  27   57:getstatic       #964 <Field boolean RecyclerView.ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
		//*  28   60:ifne            68
				mHeight = 0;
		//   29   63:aload_0         
		//   30   64:iconst_0        
		//   31   65:putfield        #574 <Field int mHeight>
		//   32   68:return          
		}

		public void setMeasuredDimension(int i, int j)
		{
			mRecyclerView.setMeasuredDimension(i, j);
		//    0    0:aload_0         
		//    1    1:getfield        #95  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:iload_2         
		//    4    6:invokestatic    #968 <Method void RecyclerView.access$1200(RecyclerView, int, int)>
		//    5    9:return          
		}

		public void setMeasuredDimension(Rect rect, int i, int j)
		{
			int k = rect.width();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #287 <Method int Rect.width()>
		//    2    4:istore          4
			int l = getPaddingLeft();
		//    3    6:aload_0         
		//    4    7:invokevirtual   #249 <Method int getPaddingLeft()>
		//    5   10:istore          5
			int i1 = getPaddingRight();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #258 <Method int getPaddingRight()>
		//    8   16:istore          6
			int j1 = rect.height();
		//    9   18:aload_1         
		//   10   19:invokevirtual   #290 <Method int Rect.height()>
		//   11   22:istore          7
			int k1 = getPaddingTop();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #252 <Method int getPaddingTop()>
		//   14   28:istore          8
			int l1 = getPaddingBottom();
		//   15   30:aload_0         
		//   16   31:invokevirtual   #264 <Method int getPaddingBottom()>
		//   17   34:istore          9
			setMeasuredDimension(chooseSize(i, k + l + i1, getMinimumWidth()), chooseSize(j, j1 + k1 + l1, getMinimumHeight()));
		//   18   36:aload_0         
		//   19   37:iload_2         
		//   20   38:iload           4
		//   21   40:iload           5
		//   22   42:iadd            
		//   23   43:iload           6
		//   24   45:iadd            
		//   25   46:aload_0         
		//   26   47:invokevirtual   #971 <Method int getMinimumWidth()>
		//   27   50:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   28   53:iload_3         
		//   29   54:iload           7
		//   30   56:iload           8
		//   31   58:iadd            
		//   32   59:iload           9
		//   33   61:iadd            
		//   34   62:aload_0         
		//   35   63:invokevirtual   #975 <Method int getMinimumHeight()>
		//   36   66:invokestatic    #973 <Method int chooseSize(int, int, int)>
		//   37   69:invokevirtual   #977 <Method void setMeasuredDimension(int, int)>
		//   38   72:return          
		}

		void setMeasuredDimensionFromChildren(int i, int j)
		{
			int j2 = getChildCount();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #450 <Method int getChildCount()>
		//    2    4:istore          10
			if(j2 == 0)
		//*   3    6:iload           10
		//*   4    8:ifne            21
			{
				mRecyclerView.defaultOnMeasure(i, j);
		//    5   11:aload_0         
		//    6   12:getfield        #95  <Field RecyclerView mRecyclerView>
		//    7   15:iload_1         
		//    8   16:iload_2         
		//    9   17:invokevirtual   #853 <Method void RecyclerView.defaultOnMeasure(int, int)>
				return;
		//   10   20:return          
			}
			int l1 = 0x7fffffff;
		//   11   21:ldc2            #979 <Int 0x7fffffff>
		//   12   24:istore          8
			int l = 0x7fffffff;
		//   13   26:ldc2            #979 <Int 0x7fffffff>
		//   14   29:istore          4
			int k1 = 0x80000000;
		//   15   31:ldc1            #241 <Int 0x80000000>
		//   16   33:istore          7
			int k = 0x80000000;
		//   17   35:ldc1            #241 <Int 0x80000000>
		//   18   37:istore_3        
			for(int i1 = 0; i1 < j2;)
		//*  19   38:iconst_0        
		//*  20   39:istore          5
		//*  21   41:iload           5
		//*  22   43:iload           10
		//*  23   45:icmpge          179
			{
				View view = getChildAt(i1);
		//   24   48:aload_0         
		//   25   49:iload           5
		//   26   51:invokevirtual   #454 <Method View getChildAt(int)>
		//   27   54:astore          11
				Rect rect = mRecyclerView.mTempRect;
		//   28   56:aload_0         
		//   29   57:getfield        #95  <Field RecyclerView mRecyclerView>
		//   30   60:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   31   63:astore          12
				getDecoratedBoundsWithMargins(view, rect);
		//   32   65:aload_0         
		//   33   66:aload           11
		//   34   68:aload           12
		//   35   70:invokevirtual   #358 <Method void getDecoratedBoundsWithMargins(View, Rect)>
				int j1 = l1;
		//   36   73:iload           8
		//   37   75:istore          6
				if(rect.left < l1)
		//*  38   77:aload           12
		//*  39   79:getfield        #272 <Field int Rect.left>
		//*  40   82:iload           8
		//*  41   84:icmpge          94
					j1 = rect.left;
		//   42   87:aload           12
		//   43   89:getfield        #272 <Field int Rect.left>
		//   44   92:istore          6
				l1 = k1;
		//   45   94:iload           7
		//   46   96:istore          8
				if(rect.right > k1)
		//*  47   98:aload           12
		//*  48  100:getfield        #361 <Field int Rect.right>
		//*  49  103:iload           7
		//*  50  105:icmple          115
					l1 = rect.right;
		//   51  108:aload           12
		//   52  110:getfield        #361 <Field int Rect.right>
		//   53  113:istore          8
				int i2 = l;
		//   54  115:iload           4
		//   55  117:istore          9
				if(rect.top < l)
		//*  56  119:aload           12
		//*  57  121:getfield        #281 <Field int Rect.top>
		//*  58  124:iload           4
		//*  59  126:icmpge          136
					i2 = rect.top;
		//   60  129:aload           12
		//   61  131:getfield        #281 <Field int Rect.top>
		//   62  134:istore          9
				l = k;
		//   63  136:iload_3         
		//   64  137:istore          4
				if(rect.bottom > k)
		//*  65  139:aload           12
		//*  66  141:getfield        #364 <Field int Rect.bottom>
		//*  67  144:iload_3         
		//*  68  145:icmple          155
					l = rect.bottom;
		//   69  148:aload           12
		//   70  150:getfield        #364 <Field int Rect.bottom>
		//   71  153:istore          4
				i1++;
		//   72  155:iload           5
		//   73  157:iconst_1        
		//   74  158:iadd            
		//   75  159:istore          5
				k1 = l1;
		//   76  161:iload           8
		//   77  163:istore          7
				k = l;
		//   78  165:iload           4
		//   79  167:istore_3        
				l1 = j1;
		//   80  168:iload           6
		//   81  170:istore          8
				l = i2;
		//   82  172:iload           9
		//   83  174:istore          4
			}

		//*  84  176:goto            41
			mRecyclerView.mTempRect.set(l1, l, k1, k);
		//   85  179:aload_0         
		//   86  180:getfield        #95  <Field RecyclerView mRecyclerView>
		//   87  183:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   88  186:iload           8
		//   89  188:iload           4
		//   90  190:iload           7
		//   91  192:iload_3         
		//   92  193:invokevirtual   #425 <Method void Rect.set(int, int, int, int)>
			setMeasuredDimension(mRecyclerView.mTempRect, i, j);
		//   93  196:aload_0         
		//   94  197:aload_0         
		//   95  198:getfield        #95  <Field RecyclerView mRecyclerView>
		//   96  201:getfield        #354 <Field Rect RecyclerView.mTempRect>
		//   97  204:iload_1         
		//   98  205:iload_2         
		//   99  206:invokevirtual   #981 <Method void setMeasuredDimension(Rect, int, int)>
		//  100  209:return          
		}

		public void setMeasurementCacheEnabled(boolean flag)
		{
			mMeasurementCacheEnabled = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    3    5:return          
		}

		void setRecyclerView(RecyclerView recyclerview)
		{
			if(recyclerview == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       37
			{
				mRecyclerView = null;
		//    2    4:aload_0         
		//    3    5:aconst_null     
		//    4    6:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = null;
		//    5    9:aload_0         
		//    6   10:aconst_null     
		//    7   11:putfield        #124 <Field ChildHelper mChildHelper>
				mWidth = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #657 <Field int mWidth>
				mHeight = 0;
		//   11   19:aload_0         
		//   12   20:iconst_0        
		//   13   21:putfield        #574 <Field int mHeight>
			} else
		//*  14   24:aload_0         
		//*  15   25:ldc1            #237 <Int 0x40000000>
		//*  16   27:putfield        #660 <Field int mWidthMode>
		//*  17   30:aload_0         
		//*  18   31:ldc1            #237 <Int 0x40000000>
		//*  19   33:putfield        #577 <Field int mHeightMode>
		//*  20   36:return          
			{
				mRecyclerView = recyclerview;
		//   21   37:aload_0         
		//   22   38:aload_1         
		//   23   39:putfield        #95  <Field RecyclerView mRecyclerView>
				mChildHelper = recyclerview.mChildHelper;
		//   24   42:aload_0         
		//   25   43:aload_1         
		//   26   44:getfield        #984 <Field ChildHelper RecyclerView.mChildHelper>
		//   27   47:putfield        #124 <Field ChildHelper mChildHelper>
				mWidth = recyclerview.getWidth();
		//   28   50:aload_0         
		//   29   51:aload_1         
		//   30   52:invokevirtual   #951 <Method int RecyclerView.getWidth()>
		//   31   55:putfield        #657 <Field int mWidth>
				mHeight = recyclerview.getHeight();
		//   32   58:aload_0         
		//   33   59:aload_1         
		//   34   60:invokevirtual   #952 <Method int RecyclerView.getHeight()>
		//   35   63:putfield        #574 <Field int mHeight>
			}
			mWidthMode = 0x40000000;
			mHeightMode = 0x40000000;
		//*  36   66:goto            24
		}

		boolean shouldMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return view.isLayoutRequested() || !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getHeight(), j, layoutparams.height);
		//    0    0:aload_1         
		//    1    1:invokevirtual   #987 <Method boolean View.isLayoutRequested()>
		//    2    4:ifne            46
		//    3    7:aload_0         
		//    4    8:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    5   11:ifeq            46
		//    6   14:aload_1         
		//    7   15:invokevirtual   #615 <Method int View.getWidth()>
		//    8   18:iload_2         
		//    9   19:aload           4
		//   10   21:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//   11   24:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   12   27:ifeq            46
		//   13   30:aload_1         
		//   14   31:invokevirtual   #616 <Method int View.getHeight()>
		//   15   34:iload_3         
		//   16   35:aload           4
		//   17   37:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   18   40:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   19   43:ifne            48
		//   20   46:iconst_1        
		//   21   47:ireturn         
		//   22   48:iconst_0        
		//   23   49:ireturn         
		}

		boolean shouldMeasureTwice()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean shouldReMeasureChild(View view, int i, int j, LayoutParams layoutparams)
		{
			return !mMeasurementCacheEnabled || !isMeasurementUpToDate(view.getMeasuredWidth(), i, layoutparams.width) || !isMeasurementUpToDate(view.getMeasuredHeight(), j, layoutparams.height);
		//    0    0:aload_0         
		//    1    1:getfield        #72  <Field boolean mMeasurementCacheEnabled>
		//    2    4:ifeq            39
		//    3    7:aload_1         
		//    4    8:invokevirtual   #561 <Method int View.getMeasuredWidth()>
		//    5   11:iload_2         
		//    6   12:aload           4
		//    7   14:getfield        #723 <Field int RecyclerView$LayoutParams.width>
		//    8   17:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//    9   20:ifeq            39
		//   10   23:aload_1         
		//   11   24:invokevirtual   #557 <Method int View.getMeasuredHeight()>
		//   12   27:iload_3         
		//   13   28:aload           4
		//   14   30:getfield        #728 <Field int RecyclerView$LayoutParams.height>
		//   15   33:invokestatic    #989 <Method boolean isMeasurementUpToDate(int, int, int)>
		//   16   36:ifne            41
		//   17   39:iconst_1        
		//   18   40:ireturn         
		//   19   41:iconst_0        
		//   20   42:ireturn         
		}

		public void smoothScrollToPosition(RecyclerView recyclerview, State state, int i)
		{
			Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
		//    0    0:ldc2            #838 <String "RecyclerView">
		//    1    3:ldc2            #995 <String "You must override smoothScrollToPosition to support smooth scrolling">
		//    2    6:invokestatic    #846 <Method int Log.e(String, String)>
		//    3    9:pop             
		//    4   10:return          
		}

		public void startSmoothScroll(SmoothScroller smoothscroller)
		{
			if(mSmoothScroller != null && smoothscroller != mSmoothScroller && mSmoothScroller.isRunning())
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          32
		//*   3    7:aload_1         
		//*   4    8:aload_0         
		//*   5    9:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   6   12:if_acmpeq       32
		//*   7   15:aload_0         
		//*   8   16:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   9   19:invokevirtual   #204 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//*  10   22:ifeq            32
				mSmoothScroller.stop();
		//   11   25:aload_0         
		//   12   26:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   13   29:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
			mSmoothScroller = smoothscroller;
		//   14   32:aload_0         
		//   15   33:aload_1         
		//   16   34:putfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
			mSmoothScroller.start(mRecyclerView, this);
		//   17   37:aload_0         
		//   18   38:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//   19   41:aload_0         
		//   20   42:getfield        #95  <Field RecyclerView mRecyclerView>
		//   21   45:aload_0         
		//   22   46:invokevirtual   #1003 <Method void RecyclerView$SmoothScroller.start(RecyclerView, RecyclerView$LayoutManager)>
		//   23   49:return          
		}

		public void stopIgnoringView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #87  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			((ViewHolder) (view)).stopIgnoring();
		//    3    5:aload_1         
		//    4    6:invokevirtual   #1007 <Method void RecyclerView$ViewHolder.stopIgnoring()>
			((ViewHolder) (view)).resetInternal();
		//    5    9:aload_1         
		//    6   10:invokevirtual   #1010 <Method void RecyclerView$ViewHolder.resetInternal()>
			((ViewHolder) (view)).addFlags(4);
		//    7   13:aload_1         
		//    8   14:iconst_4        
		//    9   15:invokevirtual   #679 <Method void RecyclerView$ViewHolder.addFlags(int)>
		//   10   18:return          
		}

		void stopSmoothScroller()
		{
			if(mSmoothScroller != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//*   2    4:ifnull          14
				mSmoothScroller.stop();
		//    3    7:aload_0         
		//    4    8:getfield        #199 <Field RecyclerView$SmoothScroller mSmoothScroller>
		//    5   11:invokevirtual   #999 <Method void RecyclerView$SmoothScroller.stop()>
		//    6   14:return          
		}

		public boolean supportsPredictiveItemAnimations()
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		boolean mAutoMeasure;
		ChildHelper mChildHelper;
		private int mHeight;
		private int mHeightMode;
		ViewBoundsCheck mHorizontalBoundCheck;
		private final ViewBoundsCheck.Callback mHorizontalBoundCheckCallback = new _cls1();
		boolean mIsAttachedToWindow;
		private boolean mItemPrefetchEnabled;
		private boolean mMeasurementCacheEnabled;
		int mPrefetchMaxCountObserved;
		boolean mPrefetchMaxObservedInInitialPrefetch;
		RecyclerView mRecyclerView;
		boolean mRequestedSimpleAnimations;
		SmoothScroller mSmoothScroller;
		ViewBoundsCheck mVerticalBoundCheck;
		private final ViewBoundsCheck.Callback mVerticalBoundCheckCallback = new _cls2();
		private int mWidth;
		private int mWidthMode;


/*
		static void access$1400(LayoutManager layoutmanager, SmoothScroller smoothscroller)
		{
			layoutmanager.onSmoothScrollerStopped(smoothscroller);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #81  <Method void onSmoothScrollerStopped(RecyclerView$SmoothScroller)>
			return;
		//    3    5:return          
		}

*/

		public LayoutManager()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #47  <Method void Object()>
		//    2    4:aload_0         
		//    3    5:new             #9   <Class RecyclerView$LayoutManager$1>
		//    4    8:dup             
		//    5    9:aload_0         
		//    6   10:invokespecial   #50  <Method void RecyclerView$LayoutManager$1(RecyclerView$LayoutManager)>
		//    7   13:putfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//    8   16:aload_0         
		//    9   17:new             #11  <Class RecyclerView$LayoutManager$2>
		//   10   20:dup             
		//   11   21:aload_0         
		//   12   22:invokespecial   #53  <Method void RecyclerView$LayoutManager$2(RecyclerView$LayoutManager)>
		//   13   25:putfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
			mHorizontalBoundCheck = new ViewBoundsCheck(mHorizontalBoundCheckCallback);
		//   14   28:aload_0         
		//   15   29:new             #57  <Class ViewBoundsCheck>
		//   16   32:dup             
		//   17   33:aload_0         
		//   18   34:getfield        #52  <Field ViewBoundsCheck$Callback mHorizontalBoundCheckCallback>
		//   19   37:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   20   40:putfield        #62  <Field ViewBoundsCheck mHorizontalBoundCheck>
			mVerticalBoundCheck = new ViewBoundsCheck(mVerticalBoundCheckCallback);
		//   21   43:aload_0         
		//   22   44:new             #57  <Class ViewBoundsCheck>
		//   23   47:dup             
		//   24   48:aload_0         
		//   25   49:getfield        #55  <Field ViewBoundsCheck$Callback mVerticalBoundCheckCallback>
		//   26   52:invokespecial   #60  <Method void ViewBoundsCheck(ViewBoundsCheck$Callback)>
		//   27   55:putfield        #64  <Field ViewBoundsCheck mVerticalBoundCheck>
			mRequestedSimpleAnimations = false;
		//   28   58:aload_0         
		//   29   59:iconst_0        
		//   30   60:putfield        #66  <Field boolean mRequestedSimpleAnimations>
			mIsAttachedToWindow = false;
		//   31   63:aload_0         
		//   32   64:iconst_0        
		//   33   65:putfield        #68  <Field boolean mIsAttachedToWindow>
			mAutoMeasure = false;
		//   34   68:aload_0         
		//   35   69:iconst_0        
		//   36   70:putfield        #70  <Field boolean mAutoMeasure>
			mMeasurementCacheEnabled = true;
		//   37   73:aload_0         
		//   38   74:iconst_1        
		//   39   75:putfield        #72  <Field boolean mMeasurementCacheEnabled>
			mItemPrefetchEnabled = true;
		//   40   78:aload_0         
		//   41   79:iconst_1        
		//   42   80:putfield        #74  <Field boolean mItemPrefetchEnabled>
		//   43   83:return          
		}
	}

	public static interface LayoutManager.LayoutPrefetchRegistry
	{

		public abstract void addPosition(int i, int j);
	}

	public static class LayoutManager.Properties
	{

		public int orientation;
		public boolean reverseLayout;
		public int spanCount;
		public boolean stackFromEnd;

		public LayoutManager.Properties()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #20  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams
	{

		public int getViewAdapterPosition()
		{
			return mViewHolder.getAdapterPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #49  <Method int RecyclerView$ViewHolder.getAdapterPosition()>
		//    3    7:ireturn         
		}

		public int getViewLayoutPosition()
		{
			return mViewHolder.getLayoutPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #53  <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//    3    7:ireturn         
		}

		public int getViewPosition()
		{
			return mViewHolder.getPosition();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #58  <Method int RecyclerView$ViewHolder.getPosition()>
		//    3    7:ireturn         
		}

		public boolean isItemChanged()
		{
			return mViewHolder.isUpdated();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #64  <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//    3    7:ireturn         
		}

		public boolean isItemRemoved()
		{
			return mViewHolder.isRemoved();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #68  <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//    3    7:ireturn         
		}

		public boolean isViewInvalid()
		{
			return mViewHolder.isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #72  <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//    3    7:ireturn         
		}

		public boolean viewNeedsUpdate()
		{
			return mViewHolder.needsUpdate();
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field RecyclerView$ViewHolder mViewHolder>
		//    2    4:invokevirtual   #76  <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//    3    7:ireturn         
		}

		final Rect mDecorInsets;
		boolean mInsetsDirty;
		boolean mPendingInvalidate;
		ViewHolder mViewHolder;

		public LayoutParams(int i, int j)
		{
			super(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #18  <Method void android.view.ViewGroup$MarginLayoutParams(int, int)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(Context context, AttributeSet attributeset)
		{
			super(context, attributeset);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #33  <Method void android.view.ViewGroup$MarginLayoutParams(Context, AttributeSet)>
			mDecorInsets = new Rect();
		//    4    6:aload_0         
		//    5    7:new             #20  <Class Rect>
		//    6   10:dup             
		//    7   11:invokespecial   #23  <Method void Rect()>
		//    8   14:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    9   17:aload_0         
		//   10   18:iconst_1        
		//   11   19:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #29  <Field boolean mPendingInvalidate>
		//   15   27:return          
		}

		public LayoutParams(LayoutParams layoutparams)
		{
			super(((android.view.ViewGroup.LayoutParams) (layoutparams)));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
		{
			super(layoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #37  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}

		public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams)
		{
			super(marginlayoutparams);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #40  <Method void android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams)>
			mDecorInsets = new Rect();
		//    3    5:aload_0         
		//    4    6:new             #20  <Class Rect>
		//    5    9:dup             
		//    6   10:invokespecial   #23  <Method void Rect()>
		//    7   13:putfield        #25  <Field Rect mDecorInsets>
			mInsetsDirty = true;
		//    8   16:aload_0         
		//    9   17:iconst_1        
		//   10   18:putfield        #27  <Field boolean mInsetsDirty>
			mPendingInvalidate = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #29  <Field boolean mPendingInvalidate>
		//   14   26:return          
		}
	}

	public static interface OnChildAttachStateChangeListener
	{

		public abstract void onChildViewAttachedToWindow(View view);

		public abstract void onChildViewDetachedFromWindow(View view);
	}

	public static abstract class OnFlingListener
	{

		public abstract boolean onFling(int i, int j);

		public OnFlingListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static interface OnItemTouchListener
	{

		public abstract boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);

		public abstract void onRequestDisallowInterceptTouchEvent(boolean flag);

		public abstract void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent);
	}

	public static abstract class OnScrollListener
	{

		public void onScrollStateChanged(RecyclerView recyclerview, int i)
		{
		//    0    0:return          
		}

		public void onScrolled(RecyclerView recyclerview, int i, int j)
		{
		//    0    0:return          
		}

		public OnScrollListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	public static class RecycledViewPool
	{

		private ScrapData getScrapDataForType(int i)
		{
			ScrapData scrapdata1 = (ScrapData)mScrap.get(i);
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_3        
			ScrapData scrapdata = scrapdata1;
		//    6   12:aload_3         
		//    7   13:astore_2        
			if(scrapdata1 == null)
		//*   8   14:aload_3         
		//*   9   15:ifnonnull       35
			{
				scrapdata = new ScrapData();
		//   10   18:new             #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   11   21:dup             
		//   12   22:invokespecial   #36  <Method void RecyclerView$RecycledViewPool$ScrapData()>
		//   13   25:astore_2        
				mScrap.put(i, ((Object) (scrapdata)));
		//   14   26:aload_0         
		//   15   27:getfield        #26  <Field SparseArray mScrap>
		//   16   30:iload_1         
		//   17   31:aload_2         
		//   18   32:invokevirtual   #40  <Method void SparseArray.put(int, Object)>
			}
			return scrapdata;
		//   19   35:aload_2         
		//   20   36:areturn         
		}

		void attach(Adapter adapter)
		{
			mAttachCount = mAttachCount + 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:iadd            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		public void clear()
		{
			for(int i = 0; i < mScrap.size(); i++)
		//*   0    0:iconst_0        
		//*   1    1:istore_1        
		//*   2    2:iload_1         
		//*   3    3:aload_0         
		//*   4    4:getfield        #26  <Field SparseArray mScrap>
		//*   5    7:invokevirtual   #47  <Method int SparseArray.size()>
		//*   6   10:icmpge          37
				((ScrapData)mScrap.valueAt(i)).mScrapHeap.clear();
		//    7   13:aload_0         
		//    8   14:getfield        #26  <Field SparseArray mScrap>
		//    9   17:iload_1         
		//   10   18:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   11   21:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   12   24:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   13   27:invokevirtual   #58  <Method void ArrayList.clear()>

		//   14   30:iload_1         
		//   15   31:iconst_1        
		//   16   32:iadd            
		//   17   33:istore_1        
		//*  18   34:goto            2
		//   19   37:return          
		}

		void detach()
		{
			mAttachCount = mAttachCount - 1;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #28  <Field int mAttachCount>
		//    3    5:iconst_1        
		//    4    6:isub            
		//    5    7:putfield        #28  <Field int mAttachCount>
		//    6   10:return          
		}

		void factorInBindTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mBindRunningAverageNs = runningAverage(scrapdata.mBindRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//   11   22:return          
		}

		void factorInCreateTime(int i, long l)
		{
			ScrapData scrapdata = getScrapDataForType(i);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore          4
			scrapdata.mCreateRunningAverageNs = runningAverage(scrapdata.mCreateRunningAverageNs, l);
		//    4    7:aload           4
		//    5    9:aload_0         
		//    6   10:aload           4
		//    7   12:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    8   15:lload_2         
		//    9   16:invokevirtual   #71  <Method long runningAverage(long, long)>
		//   10   19:putfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//   11   22:return          
		}

		public ViewHolder getRecycledView(int i)
		{
			Object obj = ((Object) ((ScrapData)mScrap.get(i)));
		//    0    0:aload_0         
		//    1    1:getfield        #26  <Field SparseArray mScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//    4    8:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//    5   11:astore_2        
			if(obj != null && !((ScrapData) (obj)).mScrapHeap.isEmpty())
		//*   6   12:aload_2         
		//*   7   13:ifnull          45
		//*   8   16:aload_2         
		//*   9   17:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//*  10   20:invokevirtual   #81  <Method boolean ArrayList.isEmpty()>
		//*  11   23:ifne            45
			{
				obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//   12   26:aload_2         
		//   13   27:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   14   30:astore_2        
				return (ViewHolder)((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1);
		//   15   31:aload_2         
		//   16   32:aload_2         
		//   17   33:invokevirtual   #82  <Method int ArrayList.size()>
		//   18   36:iconst_1        
		//   19   37:isub            
		//   20   38:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   21   41:checkcast       #87  <Class RecyclerView$ViewHolder>
		//   22   44:areturn         
			} else
			{
				return null;
		//   23   45:aconst_null     
		//   24   46:areturn         
			}
		}

		public int getRecycledViewCount(int i)
		{
			return getScrapDataForType(i).mScrapHeap.size();
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    4    8:invokevirtual   #82  <Method int ArrayList.size()>
		//    5   11:ireturn         
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			if(adapter != null)
		//*   0    0:aload_1         
		//*   1    1:ifnull          8
				detach();
		//    2    4:aload_0         
		//    3    5:invokevirtual   #93  <Method void detach()>
			if(!flag && mAttachCount == 0)
		//*   4    8:iload_3         
		//*   5    9:ifne            23
		//*   6   12:aload_0         
		//*   7   13:getfield        #28  <Field int mAttachCount>
		//*   8   16:ifne            23
				clear();
		//    9   19:aload_0         
		//   10   20:invokevirtual   #94  <Method void clear()>
			if(adapter1 != null)
		//*  11   23:aload_2         
		//*  12   24:ifnull          32
				attach(adapter1);
		//   13   27:aload_0         
		//   14   28:aload_2         
		//   15   29:invokevirtual   #96  <Method void attach(RecyclerView$Adapter)>
		//   16   32:return          
		}

		public void putRecycledView(ViewHolder viewholder)
		{
			int i = viewholder.getItemViewType();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #101 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    2    4:istore_2        
			ArrayList arraylist = getScrapDataForType(i).mScrapHeap;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    6   10:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    7   13:astore_3        
			if(((ScrapData)mScrap.get(i)).mMaxScrap <= arraylist.size())
		//*   8   14:aload_0         
		//*   9   15:getfield        #26  <Field SparseArray mScrap>
		//*  10   18:iload_2         
		//*  11   19:invokevirtual   #35  <Method Object SparseArray.get(int)>
		//*  12   22:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//*  13   25:getfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
		//*  14   28:aload_3         
		//*  15   29:invokevirtual   #82  <Method int ArrayList.size()>
		//*  16   32:icmpgt          36
			{
				return;
		//   17   35:return          
			} else
			{
				viewholder.resetInternal();
		//   18   36:aload_1         
		//   19   37:invokevirtual   #107 <Method void RecyclerView$ViewHolder.resetInternal()>
				arraylist.add(((Object) (viewholder)));
		//   20   40:aload_3         
		//   21   41:aload_1         
		//   22   42:invokevirtual   #111 <Method boolean ArrayList.add(Object)>
		//   23   45:pop             
				return;
		//   24   46:return          
			}
		}

		long runningAverage(long l, long l1)
		{
			if(l == 0L)
		//*   0    0:lload_1         
		//*   1    1:lconst_0        
		//*   2    2:lcmp            
		//*   3    3:ifne            8
				return l1;
		//    4    6:lload_3         
		//    5    7:lreturn         
			else
				return (l / 4L) * 3L + l1 / 4L;
		//    6    8:lload_1         
		//    7    9:ldc2w           #112 <Long 4L>
		//    8   12:ldiv            
		//    9   13:ldc2w           #114 <Long 3L>
		//   10   16:lmul            
		//   11   17:lload_3         
		//   12   18:ldc2w           #112 <Long 4L>
		//   13   21:ldiv            
		//   14   22:ladd            
		//   15   23:lreturn         
		}

		public void setMaxRecycledViews(int i, int j)
		{
			Object obj = ((Object) (getScrapDataForType(i)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:astore_3        
			obj.mMaxScrap = j;
		//    4    6:aload_3         
		//    5    7:iload_2         
		//    6    8:putfield        #104 <Field int RecyclerView$RecycledViewPool$ScrapData.mMaxScrap>
			obj = ((Object) (((ScrapData) (obj)).mScrapHeap));
		//    7   11:aload_3         
		//    8   12:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//    9   15:astore_3        
			if(obj != null)
		//*  10   16:aload_3         
		//*  11   17:ifnull          42
				for(; ((ArrayList) (obj)).size() > j; ((ArrayList) (obj)).remove(((ArrayList) (obj)).size() - 1));
		//   12   20:aload_3         
		//   13   21:invokevirtual   #82  <Method int ArrayList.size()>
		//   14   24:iload_2         
		//   15   25:icmple          42
		//   16   28:aload_3         
		//   17   29:aload_3         
		//   18   30:invokevirtual   #82  <Method int ArrayList.size()>
		//   19   33:iconst_1        
		//   20   34:isub            
		//   21   35:invokevirtual   #85  <Method Object ArrayList.remove(int)>
		//   22   38:pop             
		//*  23   39:goto            20
		//   24   42:return          
		}

		int size()
		{
			int j = 0;
		//    0    0:iconst_0        
		//    1    1:istore_2        
			for(int i = 0; i < mScrap.size();)
		//*   2    2:iconst_0        
		//*   3    3:istore_1        
		//*   4    4:iload_1         
		//*   5    5:aload_0         
		//*   6    6:getfield        #26  <Field SparseArray mScrap>
		//*   7    9:invokevirtual   #47  <Method int SparseArray.size()>
		//*   8   12:icmpge          55
			{
				ArrayList arraylist = ((ScrapData)mScrap.valueAt(i)).mScrapHeap;
		//    9   15:aload_0         
		//   10   16:getfield        #26  <Field SparseArray mScrap>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #50  <Method Object SparseArray.valueAt(int)>
		//   13   23:checkcast       #9   <Class RecyclerView$RecycledViewPool$ScrapData>
		//   14   26:getfield        #54  <Field ArrayList RecyclerView$RecycledViewPool$ScrapData.mScrapHeap>
		//   15   29:astore          4
				int k = j;
		//   16   31:iload_2         
		//   17   32:istore_3        
				if(arraylist != null)
		//*  18   33:aload           4
		//*  19   35:ifnull          46
					k = j + arraylist.size();
		//   20   38:iload_2         
		//   21   39:aload           4
		//   22   41:invokevirtual   #82  <Method int ArrayList.size()>
		//   23   44:iadd            
		//   24   45:istore_3        
				i++;
		//   25   46:iload_1         
		//   26   47:iconst_1        
		//   27   48:iadd            
		//   28   49:istore_1        
				j = k;
		//   29   50:iload_3         
		//   30   51:istore_2        
			}

		//*  31   52:goto            4
			return j;
		//   32   55:iload_2         
		//   33   56:ireturn         
		}

		boolean willBindInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mBindRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #67  <Field long RecyclerView$RecycledViewPool$ScrapData.mBindRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		boolean willCreateInTime(int i, long l, long l1)
		{
			long l2 = getScrapDataForType(i).mCreateRunningAverageNs;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:invokespecial   #63  <Method RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int)>
		//    3    5:getfield        #75  <Field long RecyclerView$RecycledViewPool$ScrapData.mCreateRunningAverageNs>
		//    4    8:lstore          6
			return l2 == 0L || l + l2 < l1;
		//    5   10:lload           6
		//    6   12:lconst_0        
		//    7   13:lcmp            
		//    8   14:ifeq            27
		//    9   17:lload_2         
		//   10   18:lload           6
		//   11   20:ladd            
		//   12   21:lload           4
		//   13   23:lcmp            
		//   14   24:ifge            29
		//   15   27:iconst_1        
		//   16   28:ireturn         
		//   17   29:iconst_0        
		//   18   30:ireturn         
		}

		private static final int DEFAULT_MAX_SCRAP = 5;
		private int mAttachCount;
		SparseArray mScrap;

		public RecycledViewPool()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #21  <Method void Object()>
			mScrap = new SparseArray();
		//    2    4:aload_0         
		//    3    5:new             #23  <Class SparseArray>
		//    4    8:dup             
		//    5    9:invokespecial   #24  <Method void SparseArray()>
		//    6   12:putfield        #26  <Field SparseArray mScrap>
			mAttachCount = 0;
		//    7   15:aload_0         
		//    8   16:iconst_0        
		//    9   17:putfield        #28  <Field int mAttachCount>
		//   10   20:return          
		}
	}

	static class RecycledViewPool.ScrapData
	{

		long mBindRunningAverageNs;
		long mCreateRunningAverageNs;
		int mMaxScrap;
		ArrayList mScrapHeap;

		RecycledViewPool.ScrapData()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #22  <Method void Object()>
			mScrapHeap = new ArrayList();
		//    2    4:aload_0         
		//    3    5:new             #24  <Class ArrayList>
		//    4    8:dup             
		//    5    9:invokespecial   #25  <Method void ArrayList()>
		//    6   12:putfield        #27  <Field ArrayList mScrapHeap>
			mMaxScrap = 5;
		//    7   15:aload_0         
		//    8   16:iconst_5        
		//    9   17:putfield        #29  <Field int mMaxScrap>
			mCreateRunningAverageNs = 0L;
		//   10   20:aload_0         
		//   11   21:lconst_0        
		//   12   22:putfield        #31  <Field long mCreateRunningAverageNs>
			mBindRunningAverageNs = 0L;
		//   13   25:aload_0         
		//   14   26:lconst_0        
		//   15   27:putfield        #33  <Field long mBindRunningAverageNs>
		//   16   30:return          
		}
	}

	public final class Recycler
	{

		private void attachAccessibilityDelegateOnBind(ViewHolder viewholder)
		{
			if(isAccessibilityEnabled())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:invokevirtual   #61  <Method boolean RecyclerView.isAccessibilityEnabled()>
		//*   3    7:ifeq            55
			{
				View view = viewholder.itemView;
		//    4   10:aload_1         
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:astore_2        
				if(ViewCompat.getImportantForAccessibility(view) == 0)
		//*   7   15:aload_2         
		//*   8   16:invokestatic    #73  <Method int ViewCompat.getImportantForAccessibility(View)>
		//*   9   19:ifne            27
					ViewCompat.setImportantForAccessibility(view, 1);
		//   10   22:aload_2         
		//   11   23:iconst_1        
		//   12   24:invokestatic    #77  <Method void ViewCompat.setImportantForAccessibility(View, int)>
				if(!ViewCompat.hasAccessibilityDelegate(view))
		//*  13   27:aload_2         
		//*  14   28:invokestatic    #81  <Method boolean ViewCompat.hasAccessibilityDelegate(View)>
		//*  15   31:ifne            55
				{
					viewholder.addFlags(16384);
		//   16   34:aload_1         
		//   17   35:sipush          16384
		//   18   38:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					ViewCompat.setAccessibilityDelegate(view, mAccessibilityDelegate.getItemDelegate());
		//   19   41:aload_2         
		//   20   42:aload_0         
		//   21   43:getfield        #30  <Field RecyclerView this$0>
		//   22   46:getfield        #89  <Field RecyclerViewAccessibilityDelegate RecyclerView.mAccessibilityDelegate>
		//   23   49:invokevirtual   #95  <Method android.support.v4.view.AccessibilityDelegateCompat RecyclerViewAccessibilityDelegate.getItemDelegate()>
		//   24   52:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
				}
			}
		//   25   55:return          
		}

		private void invalidateDisplayListInt(ViewHolder viewholder)
		{
			if(viewholder.itemView instanceof ViewGroup)
		//*   0    0:aload_1         
		//*   1    1:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*   2    4:instanceof      #102 <Class ViewGroup>
		//*   3    7:ifeq            22
				invalidateDisplayListInt((ViewGroup)viewholder.itemView, false);
		//    4   10:aload_0         
		//    5   11:aload_1         
		//    6   12:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    7   15:checkcast       #102 <Class ViewGroup>
		//    8   18:iconst_0        
		//    9   19:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
		//   10   22:return          
		}

		private void invalidateDisplayListInt(ViewGroup viewgroup, boolean flag)
		{
			for(int i = viewgroup.getChildCount() - 1; i >= 0; i--)
		//*   0    0:aload_1         
		//*   1    1:invokevirtual   #109 <Method int ViewGroup.getChildCount()>
		//*   2    4:iconst_1        
		//*   3    5:isub            
		//*   4    6:istore_3        
		//*   5    7:iload_3         
		//*   6    8:iflt            43
			{
				View view = viewgroup.getChildAt(i);
		//    7   11:aload_1         
		//    8   12:iload_3         
		//    9   13:invokevirtual   #113 <Method View ViewGroup.getChildAt(int)>
		//   10   16:astore          4
				if(view instanceof ViewGroup)
		//*  11   18:aload           4
		//*  12   20:instanceof      #102 <Class ViewGroup>
		//*  13   23:ifeq            36
					invalidateDisplayListInt((ViewGroup)view, true);
		//   14   26:aload_0         
		//   15   27:aload           4
		//   16   29:checkcast       #102 <Class ViewGroup>
		//   17   32:iconst_1        
		//   18   33:invokespecial   #105 <Method void invalidateDisplayListInt(ViewGroup, boolean)>
			}

		//   19   36:iload_3         
		//   20   37:iconst_1        
		//   21   38:isub            
		//   22   39:istore_3        
		//*  23   40:goto            7
			if(!flag)
		//*  24   43:iload_2         
		//*  25   44:ifne            48
				return;
		//   26   47:return          
			if(viewgroup.getVisibility() == 4)
		//*  27   48:aload_1         
		//*  28   49:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//*  29   52:iconst_4        
		//*  30   53:icmpne          67
			{
				viewgroup.setVisibility(0);
		//   31   56:aload_1         
		//   32   57:iconst_0        
		//   33   58:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(4);
		//   34   61:aload_1         
		//   35   62:iconst_4        
		//   36   63:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   37   66:return          
			} else
			{
				int j = viewgroup.getVisibility();
		//   38   67:aload_1         
		//   39   68:invokevirtual   #116 <Method int ViewGroup.getVisibility()>
		//   40   71:istore_3        
				viewgroup.setVisibility(4);
		//   41   72:aload_1         
		//   42   73:iconst_4        
		//   43   74:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				viewgroup.setVisibility(j);
		//   44   77:aload_1         
		//   45   78:iload_3         
		//   46   79:invokevirtual   #119 <Method void ViewGroup.setVisibility(int)>
				return;
		//   47   82:return          
			}
		}

		private boolean tryBindViewHolderByDeadline(ViewHolder viewholder, int i, int j, long l)
		{
			viewholder.mOwnerRecyclerView = RecyclerView.this;
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:getfield        #30  <Field RecyclerView this$0>
		//    3    5:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			int k = viewholder.getItemViewType();
		//    4    8:aload_1         
		//    5    9:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//    6   12:istore          6
			long l1 = getNanoTime();
		//    7   14:aload_0         
		//    8   15:getfield        #30  <Field RecyclerView this$0>
		//    9   18:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   10   21:lstore          7
			if(l != 0xffffffffL && !mRecyclerPool.willBindInTime(k, l1, l))
		//*  11   23:lload           4
		//*  12   25:ldc2w           #132 <Long 0xffffffffL>
		//*  13   28:lcmp            
		//*  14   29:ifeq            50
		//*  15   32:aload_0         
		//*  16   33:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*  17   36:iload           6
		//*  18   38:lload           7
		//*  19   40:lload           4
		//*  20   42:invokevirtual   #141 <Method boolean RecyclerView$RecycledViewPool.willBindInTime(int, long, long)>
		//*  21   45:ifne            50
				return false;
		//   22   48:iconst_0        
		//   23   49:ireturn         
			mAdapter.bindViewHolder(viewholder, i);
		//   24   50:aload_0         
		//   25   51:getfield        #30  <Field RecyclerView this$0>
		//   26   54:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   27   57:aload_1         
		//   28   58:iload_2         
		//   29   59:invokevirtual   #151 <Method void RecyclerView$Adapter.bindViewHolder(RecyclerView$ViewHolder, int)>
			l = getNanoTime();
		//   30   62:aload_0         
		//   31   63:getfield        #30  <Field RecyclerView this$0>
		//   32   66:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//   33   69:lstore          4
			mRecyclerPool.factorInBindTime(viewholder.getItemViewType(), l - l1);
		//   34   71:aload_0         
		//   35   72:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   36   75:aload_1         
		//   37   76:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   38   79:lload           4
		//   39   81:lload           7
		//   40   83:lsub            
		//   41   84:invokevirtual   #155 <Method void RecyclerView$RecycledViewPool.factorInBindTime(int, long)>
			attachAccessibilityDelegateOnBind(viewholder);
		//   42   87:aload_0         
		//   43   88:aload_1         
		//   44   89:invokespecial   #157 <Method void attachAccessibilityDelegateOnBind(RecyclerView$ViewHolder)>
			if(mState.isPreLayout())
		//*  45   92:aload_0         
		//*  46   93:getfield        #30  <Field RecyclerView this$0>
		//*  47   96:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  48   99:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  49  102:ifeq            110
				viewholder.mPreLayoutPosition = j;
		//   50  105:aload_1         
		//   51  106:iload_3         
		//   52  107:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			return true;
		//   53  110:iconst_1        
		//   54  111:ireturn         
		}

		void addViewHolderToRecycledViewPool(ViewHolder viewholder, boolean flag)
		{
			RecyclerView.clearNestedRecyclerViewIfNotNested(viewholder);
		//    0    0:aload_1         
		//    1    1:invokestatic    #174 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
			if(viewholder.hasAnyOfTheFlags(16384))
		//*   2    4:aload_1         
		//*   3    5:sipush          16384
		//*   4    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   5   11:ifeq            30
			{
				viewholder.setFlags(0, 16384);
		//    6   14:aload_1         
		//    7   15:iconst_0        
		//    8   16:sipush          16384
		//    9   19:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				ViewCompat.setAccessibilityDelegate(viewholder.itemView, ((android.support.v4.view.AccessibilityDelegateCompat) (null)));
		//   10   22:aload_1         
		//   11   23:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   12   26:aconst_null     
		//   13   27:invokestatic    #99  <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
			}
			if(flag)
		//*  14   30:iload_2         
		//*  15   31:ifeq            39
				dispatchViewRecycled(viewholder);
		//   16   34:aload_0         
		//   17   35:aload_1         
		//   18   36:invokevirtual   #185 <Method void dispatchViewRecycled(RecyclerView$ViewHolder)>
			viewholder.mOwnerRecyclerView = null;
		//   19   39:aload_1         
		//   20   40:aconst_null     
		//   21   41:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
			getRecycledViewPool().putRecycledView(viewholder);
		//   22   44:aload_0         
		//   23   45:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//   24   48:aload_1         
		//   25   49:invokevirtual   #192 <Method void RecyclerView$RecycledViewPool.putRecycledView(RecyclerView$ViewHolder)>
		//   26   52:return          
		}

		public void bindViewToPosition(View view, int i)
		{
			ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore          5
			if(viewholder == null)
		//*   3    6:aload           5
		//*   4    8:ifnonnull       44
				throw new IllegalArgumentException((new StringBuilder()).append("The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter").append(exceptionLabel()).toString());
		//    5   11:new             #199 <Class IllegalArgumentException>
		//    6   14:dup             
		//    7   15:new             #201 <Class StringBuilder>
		//    8   18:dup             
		//    9   19:invokespecial   #202 <Method void StringBuilder()>
		//   10   22:ldc1            #204 <String "The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter">
		//   11   24:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   12   27:aload_0         
		//   13   28:getfield        #30  <Field RecyclerView this$0>
		//   14   31:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   15   34:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   16   37:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   17   40:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   18   43:athrow          
			int j = mAdapterHelper.findPositionOffset(i);
		//   19   44:aload_0         
		//   20   45:getfield        #30  <Field RecyclerView this$0>
		//   21   48:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   22   51:iload_2         
		//   23   52:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   24   55:istore_3        
			if(j < 0 || j >= mAdapter.getItemCount())
		//*  25   56:iload_3         
		//*  26   57:iflt            74
		//*  27   60:iload_3         
		//*  28   61:aload_0         
		//*  29   62:getfield        #30  <Field RecyclerView this$0>
		//*  30   65:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  31   68:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  32   71:icmplt          143
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(j).append(").").append("state:").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//   33   74:new             #233 <Class IndexOutOfBoundsException>
		//   34   77:dup             
		//   35   78:new             #201 <Class StringBuilder>
		//   36   81:dup             
		//   37   82:invokespecial   #202 <Method void StringBuilder()>
		//   38   85:ldc1            #235 <String "Inconsistency detected. Invalid item position ">
		//   39   87:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   40   90:iload_2         
		//   41   91:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   42   94:ldc1            #240 <String "(offset:">
		//   43   96:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   44   99:iload_3         
		//   45  100:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   46  103:ldc1            #242 <String ").">
		//   47  105:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   48  108:ldc1            #244 <String "state:">
		//   49  110:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   50  113:aload_0         
		//   51  114:getfield        #30  <Field RecyclerView this$0>
		//   52  117:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   53  120:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   54  123:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   55  126:aload_0         
		//   56  127:getfield        #30  <Field RecyclerView this$0>
		//   57  130:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   58  133:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   59  136:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   60  139:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   61  142:athrow          
			tryBindViewHolderByDeadline(viewholder, j, i, 0xffffffffL);
		//   62  143:aload_0         
		//   63  144:aload           5
		//   64  146:iload_3         
		//   65  147:iload_2         
		//   66  148:ldc2w           #132 <Long 0xffffffffL>
		//   67  151:invokespecial   #248 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//   68  154:pop             
			view = ((View) (viewholder.itemView.getLayoutParams()));
		//   69  155:aload           5
		//   70  157:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   71  160:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   72  163:astore_1        
			boolean flag;
			if(view == null)
		//*  73  164:aload_1         
		//*  74  165:ifnonnull       220
			{
				view = ((View) ((LayoutParams)generateDefaultLayoutParams()));
		//   75  168:aload_0         
		//   76  169:getfield        #30  <Field RecyclerView this$0>
		//   77  172:invokevirtual   #257 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//   78  175:checkcast       #259 <Class RecyclerView$LayoutParams>
		//   79  178:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//   80  179:aload           5
		//   81  181:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   82  184:aload_1         
		//   83  185:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//*  84  188:aload_1         
		//*  85  189:iconst_1        
		//*  86  190:putfield        #267 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//*  87  193:aload_1         
		//*  88  194:aload           5
		//*  89  196:putfield        #271 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
		//*  90  199:aload           5
		//*  91  201:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  92  204:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*  93  207:ifnonnull       263
		//*  94  210:iconst_1        
		//*  95  211:istore          4
		//*  96  213:aload_1         
		//*  97  214:iload           4
		//*  98  216:putfield        #278 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//*  99  219:return          
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (view))))
		//* 100  220:aload_0         
		//* 101  221:getfield        #30  <Field RecyclerView this$0>
		//* 102  224:aload_1         
		//* 103  225:invokevirtual   #282 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 104  228:ifne            255
			{
				view = ((View) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (view)))));
		//  105  231:aload_0         
		//  106  232:getfield        #30  <Field RecyclerView this$0>
		//  107  235:aload_1         
		//  108  236:invokevirtual   #286 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  109  239:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  110  242:astore_1        
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (view)));
		//  111  243:aload           5
		//  112  245:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  113  248:aload_1         
		//  114  249:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//* 115  252:goto            188
			{
				view = ((View) ((LayoutParams)view));
		//  116  255:aload_1         
		//  117  256:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  118  259:astore_1        
			}
			view.mInsetsDirty = true;
			view.mViewHolder = viewholder;
			if(viewholder.itemView.getParent() == null)
				flag = true;
			else
		//* 119  260:goto            188
				flag = false;
		//  120  263:iconst_0        
		//  121  264:istore          4
			view.mPendingInvalidate = flag;
		//* 122  266:goto            213
		}

		public void clear()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			recycleAndClearCachedViews();
		//    3    7:aload_0         
		//    4    8:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
		//    5   11:return          
		}

		void clearOldPositions()
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < l; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          36
				((ViewHolder)mCachedViews.get(i)).clearOldPosition();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   26:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   15   29:iload_1         
		//   16   30:iconst_1        
		//   17   31:iadd            
		//   18   32:istore_1        
		//*  19   33:goto            10
			l = mAttachedScrap.size();
		//   20   36:aload_0         
		//   21   37:getfield        #38  <Field ArrayList mAttachedScrap>
		//   22   40:invokevirtual   #296 <Method int ArrayList.size()>
		//   23   43:istore_2        
			for(int j = 0; j < l; j++)
		//*  24   44:iconst_0        
		//*  25   45:istore_1        
		//*  26   46:iload_1         
		//*  27   47:iload_2         
		//*  28   48:icmpge          72
				((ViewHolder)mAttachedScrap.get(j)).clearOldPosition();
		//   29   51:aload_0         
		//   30   52:getfield        #38  <Field ArrayList mAttachedScrap>
		//   31   55:iload_1         
		//   32   56:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   33   59:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   34   62:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   35   65:iload_1         
		//   36   66:iconst_1        
		//   37   67:iadd            
		//   38   68:istore_1        
		//*  39   69:goto            46
			if(mChangedScrap != null)
		//*  40   72:aload_0         
		//*  41   73:getfield        #40  <Field ArrayList mChangedScrap>
		//*  42   76:ifnull          115
			{
				int i1 = mChangedScrap.size();
		//   43   79:aload_0         
		//   44   80:getfield        #40  <Field ArrayList mChangedScrap>
		//   45   83:invokevirtual   #296 <Method int ArrayList.size()>
		//   46   86:istore_2        
				for(int k = 0; k < i1; k++)
		//*  47   87:iconst_0        
		//*  48   88:istore_1        
		//*  49   89:iload_1         
		//*  50   90:iload_2         
		//*  51   91:icmpge          115
					((ViewHolder)mChangedScrap.get(k)).clearOldPosition();
		//   52   94:aload_0         
		//   53   95:getfield        #40  <Field ArrayList mChangedScrap>
		//   54   98:iload_1         
		//   55   99:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   56  102:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   57  105:invokevirtual   #303 <Method void RecyclerView$ViewHolder.clearOldPosition()>

		//   58  108:iload_1         
		//   59  109:iconst_1        
		//   60  110:iadd            
		//   61  111:istore_1        
			}
		//*  62  112:goto            89
		//   63  115:return          
		}

		void clearScrap()
		{
			mAttachedScrap.clear();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #289 <Method void ArrayList.clear()>
			if(mChangedScrap != null)
		//*   3    7:aload_0         
		//*   4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//*   5   11:ifnull          21
				mChangedScrap.clear();
		//    6   14:aload_0         
		//    7   15:getfield        #40  <Field ArrayList mChangedScrap>
		//    8   18:invokevirtual   #289 <Method void ArrayList.clear()>
		//    9   21:return          
		}

		public int convertPreLayoutPositionToPostLayout(int i)
		{
			if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            18
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          81
				throw new IndexOutOfBoundsException((new StringBuilder()).append("invalid position ").append(i).append(". State ").append("item count is ").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//    8   18:new             #233 <Class IndexOutOfBoundsException>
		//    9   21:dup             
		//   10   22:new             #201 <Class StringBuilder>
		//   11   25:dup             
		//   12   26:invokespecial   #202 <Method void StringBuilder()>
		//   13   29:ldc2            #307 <String "invalid position ">
		//   14   32:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   15   35:iload_1         
		//   16   36:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   17   39:ldc2            #309 <String ". State ">
		//   18   42:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   19   45:ldc2            #311 <String "item count is ">
		//   20   48:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   21   51:aload_0         
		//   22   52:getfield        #30  <Field RecyclerView this$0>
		//   23   55:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   24   58:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   25   61:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   26   64:aload_0         
		//   27   65:getfield        #30  <Field RecyclerView this$0>
		//   28   68:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   29   71:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   30   74:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   31   77:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   32   80:athrow          
			if(!mState.isPreLayout())
		//*  33   81:aload_0         
		//*  34   82:getfield        #30  <Field RecyclerView this$0>
		//*  35   85:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  36   88:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  37   91:ifne            96
				return i;
		//   38   94:iload_1         
		//   39   95:ireturn         
			else
				return mAdapterHelper.findPositionOffset(i);
		//   40   96:aload_0         
		//   41   97:getfield        #30  <Field RecyclerView this$0>
		//   42  100:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   43  103:iload_1         
		//   44  104:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   45  107:ireturn         
		}

		void dispatchViewRecycled(ViewHolder viewholder)
		{
			if(mRecyclerListener != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//*   3    7:ifnull          23
				mRecyclerListener.onViewRecycled(viewholder);
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #315 <Field RecyclerView$RecyclerListener RecyclerView.mRecyclerListener>
		//    7   17:aload_1         
		//    8   18:invokeinterface #320 <Method void RecyclerView$RecyclerListener.onViewRecycled(RecyclerView$ViewHolder)>
			if(mAdapter != null)
		//*   9   23:aload_0         
		//*  10   24:getfield        #30  <Field RecyclerView this$0>
		//*  11   27:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  12   30:ifnull          44
				mAdapter.onViewRecycled(viewholder);
		//   13   33:aload_0         
		//   14   34:getfield        #30  <Field RecyclerView this$0>
		//   15   37:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   16   40:aload_1         
		//   17   41:invokevirtual   #321 <Method void RecyclerView$Adapter.onViewRecycled(RecyclerView$ViewHolder)>
			if(mState != null)
		//*  18   44:aload_0         
		//*  19   45:getfield        #30  <Field RecyclerView this$0>
		//*  20   48:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  21   51:ifnull          65
				mViewInfoStore.removeViewHolder(viewholder);
		//   22   54:aload_0         
		//   23   55:getfield        #30  <Field RecyclerView this$0>
		//   24   58:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//   25   61:aload_1         
		//   26   62:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//   27   65:return          
		}

		ViewHolder getChangedScrapViewForPosition(int i)
		{
			int k;
label0:
			{
				if(mChangedScrap != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #40  <Field ArrayList mChangedScrap>
		//*   2    4:ifnull          19
				{
					k = mChangedScrap.size();
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:invokevirtual   #296 <Method int ArrayList.size()>
		//    6   14:istore_3        
					if(k != 0)
						break label0;
		//    7   15:iload_3         
		//    8   16:ifne            21
				}
				return null;
		//    9   19:aconst_null     
		//   10   20:areturn         
			}
			for(int j = 0; j < k; j++)
		//*  11   21:iconst_0        
		//*  12   22:istore_2        
		//*  13   23:iload_2         
		//*  14   24:iload_3         
		//*  15   25:icmpge          75
			{
				ViewHolder viewholder = (ViewHolder)mChangedScrap.get(j);
		//   16   28:aload_0         
		//   17   29:getfield        #40  <Field ArrayList mChangedScrap>
		//   18   32:iload_2         
		//   19   33:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   20   36:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   21   39:astore          6
				if(!viewholder.wasReturnedFromScrap() && viewholder.getLayoutPosition() == i)
		//*  22   41:aload           6
		//*  23   43:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  24   46:ifne            68
		//*  25   49:aload           6
		//*  26   51:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//*  27   54:iload_1         
		//*  28   55:icmpne          68
				{
					viewholder.addFlags(32);
		//   29   58:aload           6
		//   30   60:bipush          32
		//   31   62:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					return viewholder;
		//   32   65:aload           6
		//   33   67:areturn         
				}
			}

		//   34   68:iload_2         
		//   35   69:iconst_1        
		//   36   70:iadd            
		//   37   71:istore_2        
		//*  38   72:goto            23
			if(mAdapter.hasStableIds())
		//*  39   75:aload_0         
		//*  40   76:getfield        #30  <Field RecyclerView this$0>
		//*  41   79:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  42   82:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  43   85:ifeq            187
			{
				i = mAdapterHelper.findPositionOffset(i);
		//   44   88:aload_0         
		//   45   89:getfield        #30  <Field RecyclerView this$0>
		//   46   92:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//   47   95:iload_1         
		//   48   96:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//   49   99:istore_1        
				if(i > 0 && i < mAdapter.getItemCount())
		//*  50  100:iload_1         
		//*  51  101:ifle            187
		//*  52  104:iload_1         
		//*  53  105:aload_0         
		//*  54  106:getfield        #30  <Field RecyclerView this$0>
		//*  55  109:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  56  112:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  57  115:icmpge          187
				{
					long l = mAdapter.getItemId(i);
		//   58  118:aload_0         
		//   59  119:getfield        #30  <Field RecyclerView this$0>
		//   60  122:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//   61  125:iload_1         
		//   62  126:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//   63  129:lstore          4
					for(i = 0; i < k; i++)
		//*  64  131:iconst_0        
		//*  65  132:istore_1        
		//*  66  133:iload_1         
		//*  67  134:iload_3         
		//*  68  135:icmpge          187
					{
						ViewHolder viewholder1 = (ViewHolder)mChangedScrap.get(i);
		//   69  138:aload_0         
		//   70  139:getfield        #40  <Field ArrayList mChangedScrap>
		//   71  142:iload_1         
		//   72  143:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   73  146:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   74  149:astore          6
						if(!viewholder1.wasReturnedFromScrap() && viewholder1.getItemId() == l)
		//*  75  151:aload           6
		//*  76  153:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  77  156:ifne            180
		//*  78  159:aload           6
		//*  79  161:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  80  164:lload           4
		//*  81  166:lcmp            
		//*  82  167:ifne            180
						{
							viewholder1.addFlags(32);
		//   83  170:aload           6
		//   84  172:bipush          32
		//   85  174:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
							return viewholder1;
		//   86  177:aload           6
		//   87  179:areturn         
						}
					}

		//   88  180:iload_1         
		//   89  181:iconst_1        
		//   90  182:iadd            
		//   91  183:istore_1        
				}
			}
		//*  92  184:goto            133
			return null;
		//   93  187:aconst_null     
		//   94  188:areturn         
		}

		RecycledViewPool getRecycledViewPool()
		{
			if(mRecyclerPool == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnonnull       18
				mRecyclerPool = new RecycledViewPool();
		//    3    7:aload_0         
		//    4    8:new             #137 <Class RecyclerView$RecycledViewPool>
		//    5   11:dup             
		//    6   12:invokespecial   #348 <Method void RecyclerView$RecycledViewPool()>
		//    7   15:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			return mRecyclerPool;
		//    8   18:aload_0         
		//    9   19:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   10   22:areturn         
		}

		int getScrapCount()
		{
			return mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:ireturn         
		}

		public List getScrapList()
		{
			return mUnmodifiableAttachedScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #50  <Field List mUnmodifiableAttachedScrap>
		//    2    4:areturn         
		}

		ViewHolder getScrapOrCachedViewForId(long l, int i, boolean flag)
		{
			int j = mAttachedScrap.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore          5
_L5:
			if(j < 0) goto _L2; else goto _L1
		//    6   11:iload           5
		//    7   13:iflt            154
_L1:
			ViewHolder viewholder1;
			viewholder1 = (ViewHolder)mAttachedScrap.get(j);
		//    8   16:aload_0         
		//    9   17:getfield        #38  <Field ArrayList mAttachedScrap>
		//   10   20:iload           5
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          7
			if(viewholder1.getItemId() != l || viewholder1.wasReturnedFromScrap())
				continue; /* Loop/switch isn't completed */
		//   14   30:aload           7
		//   15   32:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   16   35:lload_1         
		//   17   36:lcmp            
		//   18   37:ifne            145
		//   19   40:aload           7
		//   20   42:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   21   45:ifne            145
			if(i != viewholder1.getItemViewType()) goto _L4; else goto _L3
		//   22   48:iload_3         
		//   23   49:aload           7
		//   24   51:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   25   54:icmpne          108
_L3:
			ViewHolder viewholder;
			viewholder1.addFlags(32);
		//   26   57:aload           7
		//   27   59:bipush          32
		//   28   61:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
			viewholder = viewholder1;
		//   29   64:aload           7
		//   30   66:astore          6
			if(viewholder1.isRemoved())
		//*  31   68:aload           7
		//*  32   70:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  33   73:ifeq            105
			{
				viewholder = viewholder1;
		//   34   76:aload           7
		//   35   78:astore          6
				if(!mState.isPreLayout())
		//*  36   80:aload_0         
		//*  37   81:getfield        #30  <Field RecyclerView this$0>
		//*  38   84:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  39   87:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  40   90:ifne            105
				{
					viewholder1.setFlags(2, 14);
		//   41   93:aload           7
		//   42   95:iconst_2        
		//   43   96:bipush          14
		//   44   98:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
					viewholder = viewholder1;
		//   45  101:aload           7
		//   46  103:astore          6
				}
			}
_L8:
			return viewholder;
		//   47  105:aload           6
		//   48  107:areturn         
_L4:
			if(!flag)
		//*  49  108:iload           4
		//*  50  110:ifne            145
			{
				mAttachedScrap.remove(j);
		//   51  113:aload_0         
		//   52  114:getfield        #38  <Field ArrayList mAttachedScrap>
		//   53  117:iload           5
		//   54  119:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   55  122:pop             
				removeDetachedView(viewholder1.itemView, false);
		//   56  123:aload_0         
		//   57  124:getfield        #30  <Field RecyclerView this$0>
		//   58  127:aload           7
		//   59  129:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   60  132:iconst_0        
		//   61  133:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
				quickRecycleScrapView(viewholder1.itemView);
		//   62  136:aload_0         
		//   63  137:aload           7
		//   64  139:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   65  142:invokevirtual   #369 <Method void quickRecycleScrapView(View)>
			}
			j--;
		//   66  145:iload           5
		//   67  147:iconst_1        
		//   68  148:isub            
		//   69  149:istore          5
			  goto _L5
		//*  70  151:goto            11
_L2:
			j = mCachedViews.size() - 1;
		//   71  154:aload_0         
		//   72  155:getfield        #42  <Field ArrayList mCachedViews>
		//   73  158:invokevirtual   #296 <Method int ArrayList.size()>
		//   74  161:iconst_1        
		//   75  162:isub            
		//   76  163:istore          5
_L9:
			if(j < 0) goto _L7; else goto _L6
		//   77  165:iload           5
		//   78  167:iflt            247
_L6:
label0:
			{
				ViewHolder viewholder2 = (ViewHolder)mCachedViews.get(j);
		//   79  170:aload_0         
		//   80  171:getfield        #42  <Field ArrayList mCachedViews>
		//   81  174:iload           5
		//   82  176:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   83  179:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   84  182:astore          7
				if(viewholder2.getItemId() != l)
					continue; /* Loop/switch isn't completed */
		//   85  184:aload           7
		//   86  186:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//   87  189:lload_1         
		//   88  190:lcmp            
		//   89  191:ifne            238
				if(i != viewholder2.getItemViewType())
					break label0;
		//   90  194:iload_3         
		//   91  195:aload           7
		//   92  197:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//   93  200:icmpne          225
				viewholder = viewholder2;
		//   94  203:aload           7
		//   95  205:astore          6
				if(!flag)
		//*  96  207:iload           4
		//*  97  209:ifne            105
				{
					mCachedViews.remove(j);
		//   98  212:aload_0         
		//   99  213:getfield        #42  <Field ArrayList mCachedViews>
		//  100  216:iload           5
		//  101  218:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//  102  221:pop             
					return viewholder2;
		//  103  222:aload           7
		//  104  224:areturn         
				}
			}
			  goto _L8
			if(!flag)
		//* 105  225:iload           4
		//* 106  227:ifne            238
			{
				recycleCachedViewAt(j);
		//  107  230:aload_0         
		//  108  231:iload           5
		//  109  233:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
				return null;
		//  110  236:aconst_null     
		//  111  237:areturn         
			}
			j--;
		//  112  238:iload           5
		//  113  240:iconst_1        
		//  114  241:isub            
		//  115  242:istore          5
			  goto _L9
		//* 116  244:goto            165
_L7:
			return null;
		//  117  247:aconst_null     
		//  118  248:areturn         
			  goto _L8
		}

		ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int i, boolean flag)
		{
			int j;
			int l;
			l = mAttachedScrap.size();
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore          4
			j = 0;
		//    4    9:iconst_0        
		//    5   10:istore_3        
_L8:
			if(j >= l) goto _L2; else goto _L1
		//    6   11:iload_3         
		//    7   12:iload           4
		//    8   14:icmpge          93
_L1:
			Object obj = ((Object) ((ViewHolder)mAttachedScrap.get(j)));
		//    9   17:aload_0         
		//   10   18:getfield        #38  <Field ArrayList mAttachedScrap>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
			if(((ViewHolder) (obj)).wasReturnedFromScrap() || ((ViewHolder) (obj)).getLayoutPosition() != i || ((ViewHolder) (obj)).isInvalid() || !mState.mInPreLayout && ((ViewHolder) (obj)).isRemoved()) goto _L4; else goto _L3
		//   15   30:aload           5
		//   16   32:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//   17   35:ifne            86
		//   18   38:aload           5
		//   19   40:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//   20   43:iload_1         
		//   21   44:icmpne          86
		//   22   47:aload           5
		//   23   49:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//   24   52:ifne            86
		//   25   55:aload_0         
		//   26   56:getfield        #30  <Field RecyclerView this$0>
		//   27   59:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   28   62:getfield        #380 <Field boolean RecyclerView$State.mInPreLayout>
		//   29   65:ifne            76
		//   30   68:aload           5
		//   31   70:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//   32   73:ifne            86
_L3:
			((ViewHolder) (obj)).addFlags(32);
		//   33   76:aload           5
		//   34   78:bipush          32
		//   35   80:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
_L6:
			return ((ViewHolder) (obj));
		//   36   83:aload           5
		//   37   85:areturn         
_L4:
			j++;
		//   38   86:iload_3         
		//   39   87:iconst_1        
		//   40   88:iadd            
		//   41   89:istore_3        
			continue; /* Loop/switch isn't completed */
		//   42   90:goto            11
_L2:
			if(!flag)
		//*  43   93:iload_2         
		//*  44   94:ifne            219
			{
				obj = ((Object) (mChildHelper.findHiddenNonRemovedView(i)));
		//   45   97:aload_0         
		//   46   98:getfield        #30  <Field RecyclerView this$0>
		//   47  101:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   48  104:iload_1         
		//   49  105:invokevirtual   #389 <Method View ChildHelper.findHiddenNonRemovedView(int)>
		//   50  108:astore          5
				if(obj != null)
		//*  51  110:aload           5
		//*  52  112:ifnull          219
				{
					ViewHolder viewholder = RecyclerView.getChildViewHolderInt(((View) (obj)));
		//   53  115:aload           5
		//   54  117:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//   55  120:astore          6
					mChildHelper.unhide(((View) (obj)));
		//   56  122:aload_0         
		//   57  123:getfield        #30  <Field RecyclerView this$0>
		//   58  126:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   59  129:aload           5
		//   60  131:invokevirtual   #392 <Method void ChildHelper.unhide(View)>
					i = mChildHelper.indexOfChild(((View) (obj)));
		//   61  134:aload_0         
		//   62  135:getfield        #30  <Field RecyclerView this$0>
		//   63  138:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   64  141:aload           5
		//   65  143:invokevirtual   #395 <Method int ChildHelper.indexOfChild(View)>
		//   66  146:istore_1        
					if(i == -1)
		//*  67  147:iload_1         
		//*  68  148:iconst_m1       
		//*  69  149:icmpne          191
					{
						throw new IllegalStateException((new StringBuilder()).append("layout index should not be -1 after unhiding a view:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   70  152:new             #397 <Class IllegalStateException>
		//   71  155:dup             
		//   72  156:new             #201 <Class StringBuilder>
		//   73  159:dup             
		//   74  160:invokespecial   #202 <Method void StringBuilder()>
		//   75  163:ldc2            #399 <String "layout index should not be -1 after unhiding a view:">
		//   76  166:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   77  169:aload           6
		//   78  171:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   79  174:aload_0         
		//   80  175:getfield        #30  <Field RecyclerView this$0>
		//   81  178:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   82  181:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   83  184:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   84  187:invokespecial   #403 <Method void IllegalStateException(String)>
		//   85  190:athrow          
					} else
					{
						mChildHelper.detachViewFromParent(i);
		//   86  191:aload_0         
		//   87  192:getfield        #30  <Field RecyclerView this$0>
		//   88  195:getfield        #384 <Field ChildHelper RecyclerView.mChildHelper>
		//   89  198:iload_1         
		//   90  199:invokevirtual   #406 <Method void ChildHelper.detachViewFromParent(int)>
						scrapView(((View) (obj)));
		//   91  202:aload_0         
		//   92  203:aload           5
		//   93  205:invokevirtual   #409 <Method void scrapView(View)>
						viewholder.addFlags(8224);
		//   94  208:aload           6
		//   95  210:sipush          8224
		//   96  213:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						return viewholder;
		//   97  216:aload           6
		//   98  218:areturn         
					}
				}
			}
			int i1 = mCachedViews.size();
		//   99  219:aload_0         
		//  100  220:getfield        #42  <Field ArrayList mCachedViews>
		//  101  223:invokevirtual   #296 <Method int ArrayList.size()>
		//  102  226:istore          4
			int k = 0;
		//  103  228:iconst_0        
		//  104  229:istore_3        
label0:
			do
			{
label1:
				{
label2:
					{
						if(k >= i1)
							break label1;
		//  105  230:iload_3         
		//  106  231:iload           4
		//  107  233:icmpge          293
						ViewHolder viewholder1 = (ViewHolder)mCachedViews.get(k);
		//  108  236:aload_0         
		//  109  237:getfield        #42  <Field ArrayList mCachedViews>
		//  110  240:iload_3         
		//  111  241:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//  112  244:checkcast       #63  <Class RecyclerView$ViewHolder>
		//  113  247:astore          6
						if(viewholder1.isInvalid() || viewholder1.getLayoutPosition() != i)
							break label2;
		//  114  249:aload           6
		//  115  251:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//  116  254:ifne            286
		//  117  257:aload           6
		//  118  259:invokevirtual   #338 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
		//  119  262:iload_1         
		//  120  263:icmpne          286
						obj = ((Object) (viewholder1));
		//  121  266:aload           6
		//  122  268:astore          5
						if(!flag)
		//* 123  270:iload_2         
		//* 124  271:ifne            83
						{
							mCachedViews.remove(k);
		//  125  274:aload_0         
		//  126  275:getfield        #42  <Field ArrayList mCachedViews>
		//  127  278:iload_3         
		//  128  279:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//  129  282:pop             
							return viewholder1;
		//  130  283:aload           6
		//  131  285:areturn         
						}
					}
					if(true)
						break label0;
					k++;
		//  132  286:iload_3         
		//  133  287:iconst_1        
		//  134  288:iadd            
		//  135  289:istore_3        
				}
			} while(true);
		//  136  290:goto            230
			if(true) goto _L6; else goto _L5
_L5:
			return null;
		//  137  293:aconst_null     
		//  138  294:areturn         
			if(true) goto _L8; else goto _L7
_L7:
		}

		View getScrapViewAt(int i)
		{
			return ((ViewHolder)mAttachedScrap.get(i)).itemView;
		//    0    0:aload_0         
		//    1    1:getfield        #38  <Field ArrayList mAttachedScrap>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    4    8:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    5   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   14:areturn         
		}

		public View getViewForPosition(int i)
		{
			return getViewForPosition(i, false);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iconst_0        
		//    3    3:invokevirtual   #414 <Method View getViewForPosition(int, boolean)>
		//    4    6:areturn         
		}

		View getViewForPosition(int i, boolean flag)
		{
			return tryGetViewHolderForPositionByDeadline(i, flag, 0xffffffffL).itemView;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc2w           #132 <Long 0xffffffffL>
		//    4    6:invokevirtual   #418 <Method RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int, boolean, long)>
		//    5    9:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//    6   12:areturn         
		}

		void markItemDecorInsetsDirty()
		{
			int j = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore_2        
			for(int i = 0; i < j; i++)
		//*   4    8:iconst_0        
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iload_2         
		//*   8   12:icmpge          52
			{
				LayoutParams layoutparams = (LayoutParams)((ViewHolder)mCachedViews.get(i)).itemView.getLayoutParams();
		//    9   15:aload_0         
		//   10   16:getfield        #42  <Field ArrayList mCachedViews>
		//   11   19:iload_1         
		//   12   20:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   23:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   26:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//   15   29:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   16   32:checkcast       #259 <Class RecyclerView$LayoutParams>
		//   17   35:astore_3        
				if(layoutparams != null)
		//*  18   36:aload_3         
		//*  19   37:ifnull          45
					layoutparams.mInsetsDirty = true;
		//   20   40:aload_3         
		//   21   41:iconst_1        
		//   22   42:putfield        #267 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}

		//   23   45:iload_1         
		//   24   46:iconst_1        
		//   25   47:iadd            
		//   26   48:istore_1        
		//*  27   49:goto            10
		//   28   52:return          
		}

		void markKnownViewsInvalid()
		{
			if(mAdapter != null && mAdapter.hasStableIds())
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   3    7:ifnull          72
		//*   4   10:aload_0         
		//*   5   11:getfield        #30  <Field RecyclerView this$0>
		//*   6   14:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*   7   17:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*   8   20:ifeq            72
			{
				int j = mCachedViews.size();
		//    9   23:aload_0         
		//   10   24:getfield        #42  <Field ArrayList mCachedViews>
		//   11   27:invokevirtual   #296 <Method int ArrayList.size()>
		//   12   30:istore_2        
				for(int i = 0; i < j; i++)
		//*  13   31:iconst_0        
		//*  14   32:istore_1        
		//*  15   33:iload_1         
		//*  16   34:iload_2         
		//*  17   35:icmpge          76
				{
					ViewHolder viewholder = (ViewHolder)mCachedViews.get(i);
		//   18   38:aload_0         
		//   19   39:getfield        #42  <Field ArrayList mCachedViews>
		//   20   42:iload_1         
		//   21   43:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   22   46:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   23   49:astore_3        
					if(viewholder != null)
		//*  24   50:aload_3         
		//*  25   51:ifnull          65
					{
						viewholder.addFlags(6);
		//   26   54:aload_3         
		//   27   55:bipush          6
		//   28   57:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						viewholder.addChangePayload(((Object) (null)));
		//   29   60:aload_3         
		//   30   61:aconst_null     
		//   31   62:invokevirtual   #424 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
					}
				}

		//   32   65:iload_1         
		//   33   66:iconst_1        
		//   34   67:iadd            
		//   35   68:istore_1        
			} else
		//*  36   69:goto            33
			{
				recycleAndClearCachedViews();
		//   37   72:aload_0         
		//   38   73:invokevirtual   #292 <Method void recycleAndClearCachedViews()>
			}
		//   39   76:return          
		}

		void offsetPositionRecordsForInsert(int i, int j)
		{
			int l = mCachedViews.size();
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:istore          4
			for(int k = 0; k < l; k++)
		//*   4    9:iconst_0        
		//*   5   10:istore_3        
		//*   6   11:iload_3         
		//*   7   12:iload           4
		//*   8   14:icmpge          58
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    9   17:aload_0         
		//   10   18:getfield        #42  <Field ArrayList mCachedViews>
		//   11   21:iload_3         
		//   12   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   13   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   14   28:astore          5
				if(viewholder != null && viewholder.mPosition >= i)
		//*  15   30:aload           5
		//*  16   32:ifnull          51
		//*  17   35:aload           5
		//*  18   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  19   40:iload_1         
		//*  20   41:icmplt          51
					viewholder.offsetPosition(j, true);
		//   21   44:aload           5
		//   22   46:iload_2         
		//   23   47:iconst_1        
		//   24   48:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
			}

		//   25   51:iload_3         
		//   26   52:iconst_1        
		//   27   53:iadd            
		//   28   54:istore_3        
		//*  29   55:goto            11
		//   30   58:return          
		}

		void offsetPositionRecordsForMove(int i, int j)
		{
			int k;
			byte byte0;
			int l;
			int i1;
			int j1;
			if(i < j)
		//*   0    0:iload_1         
		//*   1    1:iload_2         
		//*   2    2:icmpge          79
			{
				l = i;
		//    3    5:iload_1         
		//    4    6:istore          5
				k = j;
		//    5    8:iload_2         
		//    6    9:istore_3        
				byte0 = -1;
		//    7   10:iconst_m1       
		//    8   11:istore          4
			} else
		//*   9   13:aload_0         
		//*  10   14:getfield        #42  <Field ArrayList mCachedViews>
		//*  11   17:invokevirtual   #296 <Method int ArrayList.size()>
		//*  12   20:istore          7
		//*  13   22:iconst_0        
		//*  14   23:istore          6
		//*  15   25:iload           6
		//*  16   27:iload           7
		//*  17   29:icmpge          122
		//*  18   32:aload_0         
		//*  19   33:getfield        #42  <Field ArrayList mCachedViews>
		//*  20   36:iload           6
		//*  21   38:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//*  22   41:checkcast       #63  <Class RecyclerView$ViewHolder>
		//*  23   44:astore          8
		//*  24   46:aload           8
		//*  25   48:ifnull          70
		//*  26   51:aload           8
		//*  27   53:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  28   56:iload           5
		//*  29   58:icmplt          70
		//*  30   61:aload           8
		//*  31   63:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  32   66:iload_3         
		//*  33   67:icmple          90
		//*  34   70:iload           6
		//*  35   72:iconst_1        
		//*  36   73:iadd            
		//*  37   74:istore          6
		//*  38   76:goto            25
			{
				l = j;
		//   39   79:iload_2         
		//   40   80:istore          5
				k = i;
		//   41   82:iload_1         
		//   42   83:istore_3        
				byte0 = 1;
		//   43   84:iconst_1        
		//   44   85:istore          4
			}
			j1 = mCachedViews.size();
			i1 = 0;
			while(i1 < j1) 
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(i1);
				if(viewholder != null && viewholder.mPosition >= l && viewholder.mPosition <= k)
		//*  45   87:goto            13
					if(viewholder.mPosition == i)
		//*  46   90:aload           8
		//*  47   92:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  48   95:iload_1         
		//*  49   96:icmpne          111
						viewholder.offsetPosition(j - i, false);
		//   50   99:aload           8
		//   51  101:iload_2         
		//   52  102:iload_1         
		//   53  103:isub            
		//   54  104:iconst_0        
		//   55  105:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					else
		//*  56  108:goto            70
						viewholder.offsetPosition(((int) (byte0)), false);
		//   57  111:aload           8
		//   58  113:iload           4
		//   59  115:iconst_0        
		//   60  116:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				i1++;
			}
		//*  61  119:goto            70
		//   62  122:return          
		}

		void offsetPositionRecordsForRemove(int i, int j, boolean flag)
		{
			int k = mCachedViews.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore          4
			while(k >= 0) 
		//*   6   11:iload           4
		//*   7   13:iflt            88
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload           4
		//   11   22:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   25:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   28:astore          5
				if(viewholder != null)
		//*  14   30:aload           5
		//*  15   32:ifnull          54
					if(viewholder.mPosition >= i + j)
		//*  16   35:aload           5
		//*  17   37:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  18   40:iload_1         
		//*  19   41:iload_2         
		//*  20   42:iadd            
		//*  21   43:icmplt          63
						viewholder.offsetPosition(-j, flag);
		//   22   46:aload           5
		//   23   48:iload_2         
		//   24   49:ineg            
		//   25   50:iload_3         
		//   26   51:invokevirtual   #432 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					else
		//*  27   54:iload           4
		//*  28   56:iconst_1        
		//*  29   57:isub            
		//*  30   58:istore          4
		//*  31   60:goto            11
					if(viewholder.mPosition >= i)
		//*  32   63:aload           5
		//*  33   65:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  34   68:iload_1         
		//*  35   69:icmplt          54
					{
						viewholder.addFlags(8);
		//   36   72:aload           5
		//   37   74:bipush          8
		//   38   76:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						recycleCachedViewAt(k);
		//   39   79:aload_0         
		//   40   80:iload           4
		//   41   82:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
					}
				k--;
			}
		//*  42   85:goto            54
		//   43   88:return          
		}

		void onAdapterChanged(Adapter adapter, Adapter adapter1, boolean flag)
		{
			clear();
		//    0    0:aload_0         
		//    1    1:invokevirtual   #438 <Method void clear()>
			getRecycledViewPool().onAdapterChanged(adapter, adapter1, flag);
		//    2    4:aload_0         
		//    3    5:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//    4    8:aload_1         
		//    5    9:aload_2         
		//    6   10:iload_3         
		//    7   11:invokevirtual   #440 <Method void RecyclerView$RecycledViewPool.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		//    8   14:return          
		}

		void quickRecycleScrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			view.mScrapContainer = null;
		//    3    5:aload_1         
		//    4    6:aconst_null     
		//    5    7:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//    6   10:pop             
			view.mInChangeScrap = false;
		//    7   11:aload_1         
		//    8   12:iconst_0        
		//    9   13:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//   10   16:pop             
			((ViewHolder) (view)).clearReturnedFromScrapFlag();
		//   11   17:aload_1         
		//   12   18:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			recycleViewHolderInternal(((ViewHolder) (view)));
		//   13   21:aload_0         
		//   14   22:aload_1         
		//   15   23:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//   16   26:return          
		}

		void recycleAndClearCachedViews()
		{
			for(int i = mCachedViews.size() - 1; i >= 0; i--)
		//*   0    0:aload_0         
		//*   1    1:getfield        #42  <Field ArrayList mCachedViews>
		//*   2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//*   3    7:iconst_1        
		//*   4    8:isub            
		//*   5    9:istore_1        
		//*   6   10:iload_1         
		//*   7   11:iflt            26
				recycleCachedViewAt(i);
		//    8   14:aload_0         
		//    9   15:iload_1         
		//   10   16:invokevirtual   #372 <Method void recycleCachedViewAt(int)>

		//   11   19:iload_1         
		//   12   20:iconst_1        
		//   13   21:isub            
		//   14   22:istore_1        
		//*  15   23:goto            10
			mCachedViews.clear();
		//   16   26:aload_0         
		//   17   27:getfield        #42  <Field ArrayList mCachedViews>
		//   18   30:invokevirtual   #289 <Method void ArrayList.clear()>
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//*  19   33:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//*  20   36:ifeq            49
				mPrefetchRegistry.clearPrefetchPositions();
		//   21   39:aload_0         
		//   22   40:getfield        #30  <Field RecyclerView this$0>
		//   23   43:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//   24   46:invokevirtual   #466 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//   25   49:return          
		}

		void recycleCachedViewAt(int i)
		{
			addViewHolderToRecycledViewPool((ViewHolder)mCachedViews.get(i), true);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #42  <Field ArrayList mCachedViews>
		//    3    5:iload_1         
		//    4    6:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//    5    9:checkcast       #63  <Class RecyclerView$ViewHolder>
		//    6   12:iconst_1        
		//    7   13:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
			mCachedViews.remove(i);
		//    8   16:aload_0         
		//    9   17:getfield        #42  <Field ArrayList mCachedViews>
		//   10   20:iload_1         
		//   11   21:invokevirtual   #361 <Method Object ArrayList.remove(int)>
		//   12   24:pop             
		//   13   25:return          
		}

		public void recycleView(View view)
		{
			ViewHolder viewholder;
			viewholder = RecyclerView.getChildViewHolderInt(view);
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_2        
			if(viewholder.isTmpDetached())
		//*   3    5:aload_2         
		//*   4    6:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*   5    9:ifeq            21
				removeDetachedView(view, false);
		//    6   12:aload_0         
		//    7   13:getfield        #30  <Field RecyclerView this$0>
		//    8   16:aload_1         
		//    9   17:iconst_0        
		//   10   18:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
			if(!viewholder.isScrap()) goto _L2; else goto _L1
		//   11   21:aload_2         
		//   12   22:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//   13   25:ifeq            38
_L1:
			viewholder.unScrap();
		//   14   28:aload_2         
		//   15   29:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
_L4:
			recycleViewHolderInternal(viewholder);
		//   16   32:aload_0         
		//   17   33:aload_2         
		//   18   34:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
			return;
		//   19   37:return          
_L2:
			if(viewholder.wasReturnedFromScrap())
		//*  20   38:aload_2         
		//*  21   39:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//*  22   42:ifeq            32
				viewholder.clearReturnedFromScrapFlag();
		//   23   45:aload_2         
		//   24   46:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
			if(true) goto _L4; else goto _L3
		//   25   49:goto            32
_L3:
		}

		void recycleViewHolderInternal(ViewHolder viewholder)
		{
			int i;
			boolean flag2 = false;
		//    0    0:iconst_0        
		//    1    1:istore          7
			if(viewholder.isScrap() || viewholder.itemView.getParent() != null)
		//*   2    3:aload_1         
		//*   3    4:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*   4    7:ifne            20
		//*   5   10:aload_1         
		//*   6   11:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*   7   14:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*   8   17:ifnull          89
			{
				StringBuilder stringbuilder = (new StringBuilder()).append("Scrapped or attached views may not be recycled. isScrap:").append(viewholder.isScrap()).append(" isAttached:");
		//    9   20:new             #201 <Class StringBuilder>
		//   10   23:dup             
		//   11   24:invokespecial   #202 <Method void StringBuilder()>
		//   12   27:ldc2            #480 <String "Scrapped or attached views may not be recycled. isScrap:">
		//   13   30:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   14   33:aload_1         
		//   15   34:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//   16   37:invokevirtual   #483 <Method StringBuilder StringBuilder.append(boolean)>
		//   17   40:ldc2            #485 <String " isAttached:">
		//   18   43:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   19   46:astore          8
				if(viewholder.itemView.getParent() != null)
		//*  20   48:aload_1         
		//*  21   49:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  22   52:invokevirtual   #275 <Method ViewParent View.getParent()>
		//*  23   55:ifnull          61
					flag2 = true;
		//   24   58:iconst_1        
		//   25   59:istore          7
				throw new IllegalArgumentException(stringbuilder.append(flag2).append(exceptionLabel()).toString());
		//   26   61:new             #199 <Class IllegalArgumentException>
		//   27   64:dup             
		//   28   65:aload           8
		//   29   67:iload           7
		//   30   69:invokevirtual   #483 <Method StringBuilder StringBuilder.append(boolean)>
		//   31   72:aload_0         
		//   32   73:getfield        #30  <Field RecyclerView this$0>
		//   33   76:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   34   79:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   35   82:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   36   85:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   37   88:athrow          
			}
			if(viewholder.isTmpDetached())
		//*  38   89:aload_1         
		//*  39   90:invokevirtual   #472 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
		//*  40   93:ifeq            134
				throw new IllegalArgumentException((new StringBuilder()).append("Tmp detached view should be removed from RecyclerView before it can be recycled: ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   41   96:new             #199 <Class IllegalArgumentException>
		//   42   99:dup             
		//   43  100:new             #201 <Class StringBuilder>
		//   44  103:dup             
		//   45  104:invokespecial   #202 <Method void StringBuilder()>
		//   46  107:ldc2            #487 <String "Tmp detached view should be removed from RecyclerView before it can be recycled: ">
		//   47  110:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   48  113:aload_1         
		//   49  114:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   50  117:aload_0         
		//   51  118:getfield        #30  <Field RecyclerView this$0>
		//   52  121:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   53  124:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   54  127:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   55  130:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   56  133:athrow          
			if(viewholder.shouldIgnore())
		//*  57  134:aload_1         
		//*  58  135:invokevirtual   #490 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//*  59  138:ifeq            175
				throw new IllegalArgumentException((new StringBuilder()).append("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.").append(exceptionLabel()).toString());
		//   60  141:new             #199 <Class IllegalArgumentException>
		//   61  144:dup             
		//   62  145:new             #201 <Class StringBuilder>
		//   63  148:dup             
		//   64  149:invokespecial   #202 <Method void StringBuilder()>
		//   65  152:ldc2            #492 <String "Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.">
		//   66  155:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   67  158:aload_0         
		//   68  159:getfield        #30  <Field RecyclerView this$0>
		//   69  162:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   70  165:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   71  168:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   72  171:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   73  174:athrow          
			flag2 = viewholder.doesTransientStatePreventRecycling();
		//   74  175:aload_1         
		//   75  176:invokestatic    #496 <Method boolean RecyclerView$ViewHolder.access$900(RecyclerView$ViewHolder)>
		//   76  179:istore          7
			int j;
			int k;
			boolean flag;
			boolean flag1;
			if(mAdapter != null && flag2 && mAdapter.onFailedToRecycleView(viewholder))
		//*  77  181:aload_0         
		//*  78  182:getfield        #30  <Field RecyclerView this$0>
		//*  79  185:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  80  188:ifnull          435
		//*  81  191:iload           7
		//*  82  193:ifeq            435
		//*  83  196:aload_0         
		//*  84  197:getfield        #30  <Field RecyclerView this$0>
		//*  85  200:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  86  203:aload_1         
		//*  87  204:invokevirtual   #499 <Method boolean RecyclerView$Adapter.onFailedToRecycleView(RecyclerView$ViewHolder)>
		//*  88  207:ifeq            435
				i = 1;
		//   89  210:iconst_1        
		//   90  211:istore_2        
			else
		//*  91  212:iconst_0        
		//*  92  213:istore_3        
		//*  93  214:iconst_0        
		//*  94  215:istore          6
		//*  95  217:iconst_0        
		//*  96  218:istore          5
		//*  97  220:iload_2         
		//*  98  221:ifne            235
		//*  99  224:iload           5
		//* 100  226:istore          4
		//* 101  228:aload_1         
		//* 102  229:invokevirtual   #502 <Method boolean RecyclerView$ViewHolder.isRecyclable()>
		//* 103  232:ifeq            404
		//* 104  235:iload           6
		//* 105  237:istore_2        
		//* 106  238:aload_0         
		//* 107  239:getfield        #54  <Field int mViewCacheMax>
		//* 108  242:ifle            383
		//* 109  245:iload           6
		//* 110  247:istore_2        
		//* 111  248:aload_1         
		//* 112  249:sipush          526
		//* 113  252:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 114  255:ifne            383
		//* 115  258:aload_0         
		//* 116  259:getfield        #42  <Field ArrayList mCachedViews>
		//* 117  262:invokevirtual   #296 <Method int ArrayList.size()>
		//* 118  265:istore_3        
		//* 119  266:iload_3         
		//* 120  267:istore_2        
		//* 121  268:iload_3         
		//* 122  269:aload_0         
		//* 123  270:getfield        #54  <Field int mViewCacheMax>
		//* 124  273:icmplt          291
		//* 125  276:iload_3         
		//* 126  277:istore_2        
		//* 127  278:iload_3         
		//* 128  279:ifle            291
		//* 129  282:aload_0         
		//* 130  283:iconst_0        
		//* 131  284:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
		//* 132  287:iload_3         
		//* 133  288:iconst_1        
		//* 134  289:isub            
		//* 135  290:istore_2        
		//* 136  291:iload_2         
		//* 137  292:istore_3        
		//* 138  293:iload_3         
		//* 139  294:istore          4
		//* 140  296:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 141  299:ifeq            371
		//* 142  302:iload_3         
		//* 143  303:istore          4
		//* 144  305:iload_2         
		//* 145  306:ifle            371
		//* 146  309:iload_3         
		//* 147  310:istore          4
		//* 148  312:aload_0         
		//* 149  313:getfield        #30  <Field RecyclerView this$0>
		//* 150  316:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 151  319:aload_1         
		//* 152  320:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 153  323:invokevirtual   #505 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 154  326:ifne            371
		//* 155  329:iload_2         
		//* 156  330:iconst_1        
		//* 157  331:isub            
		//* 158  332:istore_2        
		//* 159  333:iload_2         
		//* 160  334:iflt            366
		//* 161  337:aload_0         
		//* 162  338:getfield        #42  <Field ArrayList mCachedViews>
		//* 163  341:iload_2         
		//* 164  342:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//* 165  345:checkcast       #63  <Class RecyclerView$ViewHolder>
		//* 166  348:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//* 167  351:istore_3        
		//* 168  352:aload_0         
		//* 169  353:getfield        #30  <Field RecyclerView this$0>
		//* 170  356:getfield        #461 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 171  359:iload_3         
		//* 172  360:invokevirtual   #505 <Method boolean GapWorker$LayoutPrefetchRegistryImpl.lastPrefetchIncludedPosition(int)>
		//* 173  363:ifne            440
		//* 174  366:iload_2         
		//* 175  367:iconst_1        
		//* 176  368:iadd            
		//* 177  369:istore          4
		//* 178  371:aload_0         
		//* 179  372:getfield        #42  <Field ArrayList mCachedViews>
		//* 180  375:iload           4
		//* 181  377:aload_1         
		//* 182  378:invokevirtual   #509 <Method void ArrayList.add(int, Object)>
		//* 183  381:iconst_1        
		//* 184  382:istore_2        
		//* 185  383:iload_2         
		//* 186  384:istore_3        
		//* 187  385:iload           5
		//* 188  387:istore          4
		//* 189  389:iload_2         
		//* 190  390:ifne            404
		//* 191  393:aload_0         
		//* 192  394:aload_1         
		//* 193  395:iconst_1        
		//* 194  396:invokevirtual   #468 <Method void addViewHolderToRecycledViewPool(RecyclerView$ViewHolder, boolean)>
		//* 195  399:iconst_1        
		//* 196  400:istore          4
		//* 197  402:iload_2         
		//* 198  403:istore_3        
		//* 199  404:aload_0         
		//* 200  405:getfield        #30  <Field RecyclerView this$0>
		//* 201  408:getfield        #325 <Field ViewInfoStore RecyclerView.mViewInfoStore>
		//* 202  411:aload_1         
		//* 203  412:invokevirtual   #330 <Method void ViewInfoStore.removeViewHolder(RecyclerView$ViewHolder)>
		//* 204  415:iload_3         
		//* 205  416:ifne            434
		//* 206  419:iload           4
		//* 207  421:ifne            434
		//* 208  424:iload           7
		//* 209  426:ifeq            434
		//* 210  429:aload_1         
		//* 211  430:aconst_null     
		//* 212  431:putfield        #124 <Field RecyclerView RecyclerView$ViewHolder.mOwnerRecyclerView>
		//* 213  434:return          
				i = 0;
		//  214  435:iconst_0        
		//  215  436:istore_2        
			j = 0;
			flag1 = false;
			flag = false;
			if(i != 0) goto _L2; else goto _L1
_L1:
			k = ((int) (flag));
			if(!viewholder.isRecyclable()) goto _L3; else goto _L2
_L2:
			i = ((int) (flag1));
			if(mViewCacheMax <= 0) goto _L5; else goto _L4
_L4:
			i = ((int) (flag1));
			if(viewholder.hasAnyOfTheFlags(526)) goto _L5; else goto _L6
_L6:
			j = mCachedViews.size();
			i = j;
			if(j >= mViewCacheMax)
			{
				i = j;
				if(j > 0)
				{
					recycleCachedViewAt(0);
					i = j - 1;
				}
			}
			j = i;
			k = j;
			if(!RecyclerView.ALLOW_THREAD_GAP_WORK) goto _L8; else goto _L7
_L7:
			k = j;
			if(i <= 0) goto _L8; else goto _L9
_L9:
			k = j;
			if(mPrefetchRegistry.lastPrefetchIncludedPosition(viewholder.mPosition)) goto _L8; else goto _L10
_L10:
			i--;
_L15:
			if(i < 0) goto _L12; else goto _L11
_L11:
			j = ((ViewHolder)mCachedViews.get(i)).mPosition;
			if(mPrefetchRegistry.lastPrefetchIncludedPosition(j)) goto _L13; else goto _L12
_L12:
			k = i + 1;
_L8:
			mCachedViews.add(k, ((Object) (viewholder)));
			i = 1;
_L5:
			j = i;
			k = ((int) (flag));
			if(i == 0)
			{
				addViewHolderToRecycledViewPool(viewholder, true);
				k = 1;
				j = i;
			}
_L3:
			mViewInfoStore.removeViewHolder(viewholder);
			if(j == 0 && k == 0 && flag2)
				viewholder.mOwnerRecyclerView = null;
			return;
		//* 216  437:goto            212
_L13:
			i--;
		//  217  440:iload_2         
		//  218  441:iconst_1        
		//  219  442:isub            
		//  220  443:istore_2        
			if(true) goto _L15; else goto _L14
		//  221  444:goto            333
_L14:
		}

		void recycleViewInternal(View view)
		{
			recycleViewHolderInternal(RecyclerView.getChildViewHolderInt(view));
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    3    5:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		void scrapView(View view)
		{
			view = ((View) (RecyclerView.getChildViewHolderInt(view)));
		//    0    0:aload_1         
		//    1    1:invokestatic    #197 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
		//    2    4:astore_1        
			if(((ViewHolder) (view)).hasAnyOfTheFlags(12) || !((ViewHolder) (view)).isUpdated() || canReuseUpdatedViewHolder(((ViewHolder) (view))))
		//*   3    5:aload_1         
		//*   4    6:bipush          12
		//*   5    8:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//*   6   11:ifne            32
		//*   7   14:aload_1         
		//*   8   15:invokevirtual   #513 <Method boolean RecyclerView$ViewHolder.isUpdated()>
		//*   9   18:ifeq            32
		//*  10   21:aload_0         
		//*  11   22:getfield        #30  <Field RecyclerView this$0>
		//*  12   25:aload_1         
		//*  13   26:invokevirtual   #516 <Method boolean RecyclerView.canReuseUpdatedViewHolder(RecyclerView$ViewHolder)>
		//*  14   29:ifeq            109
				if(((ViewHolder) (view)).isInvalid() && !((ViewHolder) (view)).isRemoved() && !mAdapter.hasStableIds())
		//*  15   32:aload_1         
		//*  16   33:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//*  17   36:ifeq            93
		//*  18   39:aload_1         
		//*  19   40:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*  20   43:ifne            93
		//*  21   46:aload_0         
		//*  22   47:getfield        #30  <Field RecyclerView this$0>
		//*  23   50:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  24   53:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  25   56:ifne            93
				{
					throw new IllegalArgumentException((new StringBuilder()).append("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.").append(exceptionLabel()).toString());
		//   26   59:new             #199 <Class IllegalArgumentException>
		//   27   62:dup             
		//   28   63:new             #201 <Class StringBuilder>
		//   29   66:dup             
		//   30   67:invokespecial   #202 <Method void StringBuilder()>
		//   31   70:ldc2            #518 <String "Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.">
		//   32   73:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   33   76:aload_0         
		//   34   77:getfield        #30  <Field RecyclerView this$0>
		//   35   80:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   36   83:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   37   86:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   38   89:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//   39   92:athrow          
				} else
				{
					((ViewHolder) (view)).setScrapContainer(this, false);
		//   40   93:aload_1         
		//   41   94:aload_0         
		//   42   95:iconst_0        
		//   43   96:invokevirtual   #522 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
					mAttachedScrap.add(((Object) (view)));
		//   44   99:aload_0         
		//   45  100:getfield        #38  <Field ArrayList mAttachedScrap>
		//   46  103:aload_1         
		//   47  104:invokevirtual   #525 <Method boolean ArrayList.add(Object)>
		//   48  107:pop             
					return;
		//   49  108:return          
				}
			if(mChangedScrap == null)
		//*  50  109:aload_0         
		//*  51  110:getfield        #40  <Field ArrayList mChangedScrap>
		//*  52  113:ifnonnull       127
				mChangedScrap = new ArrayList();
		//   53  116:aload_0         
		//   54  117:new             #35  <Class ArrayList>
		//   55  120:dup             
		//   56  121:invokespecial   #36  <Method void ArrayList()>
		//   57  124:putfield        #40  <Field ArrayList mChangedScrap>
			((ViewHolder) (view)).setScrapContainer(this, true);
		//   58  127:aload_1         
		//   59  128:aload_0         
		//   60  129:iconst_1        
		//   61  130:invokevirtual   #522 <Method void RecyclerView$ViewHolder.setScrapContainer(RecyclerView$Recycler, boolean)>
			mChangedScrap.add(((Object) (view)));
		//   62  133:aload_0         
		//   63  134:getfield        #40  <Field ArrayList mChangedScrap>
		//   64  137:aload_1         
		//   65  138:invokevirtual   #525 <Method boolean ArrayList.add(Object)>
		//   66  141:pop             
		//   67  142:return          
		}

		void setRecycledViewPool(RecycledViewPool recycledviewpool)
		{
			if(mRecyclerPool != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//*   2    4:ifnull          14
				mRecyclerPool.detach();
		//    3    7:aload_0         
		//    4    8:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//    5   11:invokevirtual   #530 <Method void RecyclerView$RecycledViewPool.detach()>
			mRecyclerPool = recycledviewpool;
		//    6   14:aload_0         
		//    7   15:aload_1         
		//    8   16:putfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
			if(recycledviewpool != null)
		//*   9   19:aload_1         
		//*  10   20:ifnull          37
				mRecyclerPool.attach(getAdapter());
		//   11   23:aload_0         
		//   12   24:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//   13   27:aload_0         
		//   14   28:getfield        #30  <Field RecyclerView this$0>
		//   15   31:invokevirtual   #534 <Method RecyclerView$Adapter RecyclerView.getAdapter()>
		//   16   34:invokevirtual   #538 <Method void RecyclerView$RecycledViewPool.attach(RecyclerView$Adapter)>
		//   17   37:return          
		}

		void setViewCacheExtension(ViewCacheExtension viewcacheextension)
		{
			mViewCacheExtension = viewcacheextension;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//    3    5:return          
		}

		public void setViewCacheSize(int i)
		{
			mRequestedCacheMax = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #52  <Field int mRequestedCacheMax>
			updateViewCacheSize();
		//    3    5:aload_0         
		//    4    6:invokevirtual   #546 <Method void updateViewCacheSize()>
		//    5    9:return          
		}

		ViewHolder tryGetViewHolderForPositionByDeadline(int i, boolean flag, long l)
		{
			if(i < 0 || i >= mState.getItemCount())
		//*   0    0:iload_1         
		//*   1    1:iflt            18
		//*   2    4:iload_1         
		//*   3    5:aload_0         
		//*   4    6:getfield        #30  <Field RecyclerView this$0>
		//*   5    9:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*   6   12:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//*   7   15:icmplt          85
				throw new IndexOutOfBoundsException((new StringBuilder()).append("Invalid item position ").append(i).append("(").append(i).append("). Item count:").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//    8   18:new             #233 <Class IndexOutOfBoundsException>
		//    9   21:dup             
		//   10   22:new             #201 <Class StringBuilder>
		//   11   25:dup             
		//   12   26:invokespecial   #202 <Method void StringBuilder()>
		//   13   29:ldc2            #549 <String "Invalid item position ">
		//   14   32:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   15   35:iload_1         
		//   16   36:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   17   39:ldc2            #551 <String "(">
		//   18   42:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   19   45:iload_1         
		//   20   46:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   21   49:ldc2            #553 <String "). Item count:">
		//   22   52:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   23   55:aload_0         
		//   24   56:getfield        #30  <Field RecyclerView this$0>
		//   25   59:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//   26   62:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//   27   65:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//   28   68:aload_0         
		//   29   69:getfield        #30  <Field RecyclerView this$0>
		//   30   72:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   31   75:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   32   78:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   33   81:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   34   84:athrow          
			boolean flag2 = false;
		//   35   85:iconst_0        
		//   36   86:istore          6
			ViewHolder viewholder = null;
		//   37   88:aconst_null     
		//   38   89:astore          14
			boolean flag1;
			Object obj;
			if(mState.isPreLayout())
		//*  39   91:aload_0         
		//*  40   92:getfield        #30  <Field RecyclerView this$0>
		//*  41   95:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  42   98:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  43  101:ifeq            119
			{
				viewholder = getChangedScrapViewForPosition(i);
		//   44  104:aload_0         
		//   45  105:iload_1         
		//   46  106:invokevirtual   #555 <Method RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
		//   47  109:astore          14
				if(viewholder != null)
		//*  48  111:aload           14
		//*  49  113:ifnull          327
					flag2 = true;
		//   50  116:iconst_1        
		//   51  117:istore          6
				else
		//*  52  119:aload           14
		//*  53  121:astore          13
		//*  54  123:iload           6
		//*  55  125:istore          5
		//*  56  127:aload           14
		//*  57  129:ifnonnull       211
		//*  58  132:aload_0         
		//*  59  133:iload_1         
		//*  60  134:iload_2         
		//*  61  135:invokevirtual   #557 <Method RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int, boolean)>
		//*  62  138:astore          14
		//*  63  140:aload           14
		//*  64  142:astore          13
		//*  65  144:iload           6
		//*  66  146:istore          5
		//*  67  148:aload           14
		//*  68  150:ifnull          211
		//*  69  153:aload_0         
		//*  70  154:aload           14
		//*  71  156:invokevirtual   #560 <Method boolean validateViewHolderForOffsetPosition(RecyclerView$ViewHolder)>
		//*  72  159:ifne            349
		//*  73  162:iload_2         
		//*  74  163:ifne            204
		//*  75  166:aload           14
		//*  76  168:iconst_4        
		//*  77  169:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
		//*  78  172:aload           14
		//*  79  174:invokevirtual   #475 <Method boolean RecyclerView$ViewHolder.isScrap()>
		//*  80  177:ifeq            333
		//*  81  180:aload_0         
		//*  82  181:getfield        #30  <Field RecyclerView this$0>
		//*  83  184:aload           14
		//*  84  186:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//*  85  189:iconst_0        
		//*  86  190:invokevirtual   #365 <Method void RecyclerView.removeDetachedView(View, boolean)>
		//*  87  193:aload           14
		//*  88  195:invokevirtual   #478 <Method void RecyclerView$ViewHolder.unScrap()>
		//*  89  198:aload_0         
		//*  90  199:aload           14
		//*  91  201:invokevirtual   #454 <Method void recycleViewHolderInternal(RecyclerView$ViewHolder)>
		//*  92  204:aconst_null     
		//*  93  205:astore          13
		//*  94  207:iload           6
		//*  95  209:istore          5
		//*  96  211:aload           13
		//*  97  213:astore          14
		//*  98  215:iload           5
		//*  99  217:istore          6
		//* 100  219:aload           13
		//* 101  221:ifnonnull       749
		//* 102  224:aload_0         
		//* 103  225:getfield        #30  <Field RecyclerView this$0>
		//* 104  228:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//* 105  231:iload_1         
		//* 106  232:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//* 107  235:istore          8
		//* 108  237:iload           8
		//* 109  239:iflt            257
		//* 110  242:iload           8
		//* 111  244:aload_0         
		//* 112  245:getfield        #30  <Field RecyclerView this$0>
		//* 113  248:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 114  251:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//* 115  254:icmplt          359
		//* 116  257:new             #233 <Class IndexOutOfBoundsException>
		//* 117  260:dup             
		//* 118  261:new             #201 <Class StringBuilder>
		//* 119  264:dup             
		//* 120  265:invokespecial   #202 <Method void StringBuilder()>
		//* 121  268:ldc1            #235 <String "Inconsistency detected. Invalid item position ">
		//* 122  270:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 123  273:iload_1         
		//* 124  274:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 125  277:ldc1            #240 <String "(offset:">
		//* 126  279:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 127  282:iload           8
		//* 128  284:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 129  287:ldc1            #242 <String ").">
		//* 130  289:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 131  292:ldc1            #244 <String "state:">
		//* 132  294:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 133  297:aload_0         
		//* 134  298:getfield        #30  <Field RecyclerView this$0>
		//* 135  301:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 136  304:invokevirtual   #245 <Method int RecyclerView$State.getItemCount()>
		//* 137  307:invokevirtual   #238 <Method StringBuilder StringBuilder.append(int)>
		//* 138  310:aload_0         
		//* 139  311:getfield        #30  <Field RecyclerView this$0>
		//* 140  314:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//* 141  317:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//* 142  320:invokevirtual   #215 <Method String StringBuilder.toString()>
		//* 143  323:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//* 144  326:athrow          
					flag2 = false;
		//  145  327:iconst_0        
		//  146  328:istore          6
			}
			obj = ((Object) (viewholder));
			flag1 = flag2;
			if(viewholder == null)
			{
				viewholder = getScrapOrHiddenOrCachedHolderForPosition(i, flag);
				obj = ((Object) (viewholder));
				flag1 = flag2;
				if(viewholder != null)
					if(!validateViewHolderForOffsetPosition(viewholder))
					{
						if(!flag)
						{
							viewholder.addFlags(4);
							if(viewholder.isScrap())
							{
								removeDetachedView(viewholder.itemView, false);
								viewholder.unScrap();
							} else
		//* 147  330:goto            119
							if(viewholder.wasReturnedFromScrap())
		//* 148  333:aload           14
		//* 149  335:invokevirtual   #335 <Method boolean RecyclerView$ViewHolder.wasReturnedFromScrap()>
		//* 150  338:ifeq            198
								viewholder.clearReturnedFromScrapFlag();
		//  151  341:aload           14
		//  152  343:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
							recycleViewHolderInternal(viewholder);
						}
						obj = null;
						flag1 = flag2;
					} else
		//* 153  346:goto            198
					{
						flag1 = true;
		//  154  349:iconst_1        
		//  155  350:istore          5
						obj = ((Object) (viewholder));
		//  156  352:aload           14
		//  157  354:astore          13
					}
			}
			viewholder = ((ViewHolder) (obj));
			flag2 = flag1;
			if(obj == null)
			{
				int i1 = mAdapterHelper.findPositionOffset(i);
				if(i1 < 0 || i1 >= mAdapter.getItemCount())
					throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid item position ").append(i).append("(offset:").append(i1).append(").").append("state:").append(mState.getItemCount()).append(exceptionLabel()).toString());
		//* 158  356:goto            211
				int k = mAdapter.getItemViewType(i1);
		//  159  359:aload_0         
		//  160  360:getfield        #30  <Field RecyclerView this$0>
		//  161  363:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  162  366:iload           8
		//  163  368:invokevirtual   #562 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//  164  371:istore          7
				viewholder = ((ViewHolder) (obj));
		//  165  373:aload           13
		//  166  375:astore          14
				flag2 = flag1;
		//  167  377:iload           5
		//  168  379:istore          6
				if(mAdapter.hasStableIds())
		//* 169  381:aload_0         
		//* 170  382:getfield        #30  <Field RecyclerView this$0>
		//* 171  385:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//* 172  388:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//* 173  391:ifeq            442
				{
					obj = ((Object) (getScrapOrCachedViewForId(mAdapter.getItemId(i1), k, flag)));
		//  174  394:aload_0         
		//  175  395:aload_0         
		//  176  396:getfield        #30  <Field RecyclerView this$0>
		//  177  399:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  178  402:iload           8
		//  179  404:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//  180  407:iload           7
		//  181  409:iload_2         
		//  182  410:invokevirtual   #564 <Method RecyclerView$ViewHolder getScrapOrCachedViewForId(long, int, boolean)>
		//  183  413:astore          13
					viewholder = ((ViewHolder) (obj));
		//  184  415:aload           13
		//  185  417:astore          14
					flag2 = flag1;
		//  186  419:iload           5
		//  187  421:istore          6
					if(obj != null)
		//* 188  423:aload           13
		//* 189  425:ifnull          442
					{
						obj.mPosition = i1;
		//  190  428:aload           13
		//  191  430:iload           8
		//  192  432:putfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
						flag2 = true;
		//  193  435:iconst_1        
		//  194  436:istore          6
						viewholder = ((ViewHolder) (obj));
		//  195  438:aload           13
		//  196  440:astore          14
					}
				}
				obj = ((Object) (viewholder));
		//  197  442:aload           14
		//  198  444:astore          13
				if(viewholder == null)
		//* 199  446:aload           14
		//* 200  448:ifnonnull       580
				{
					obj = ((Object) (viewholder));
		//  201  451:aload           14
		//  202  453:astore          13
					if(mViewCacheExtension != null)
		//* 203  455:aload_0         
		//* 204  456:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//* 205  459:ifnull          580
					{
						View view = mViewCacheExtension.getViewForPositionAndType(this, i, k);
		//  206  462:aload_0         
		//  207  463:getfield        #542 <Field RecyclerView$ViewCacheExtension mViewCacheExtension>
		//  208  466:aload_0         
		//  209  467:iload_1         
		//  210  468:iload           7
		//  211  470:invokevirtual   #570 <Method View RecyclerView$ViewCacheExtension.getViewForPositionAndType(RecyclerView$Recycler, int, int)>
		//  212  473:astore          15
						obj = ((Object) (viewholder));
		//  213  475:aload           14
		//  214  477:astore          13
						if(view != null)
		//* 215  479:aload           15
		//* 216  481:ifnull          580
						{
							viewholder = getChildViewHolder(view);
		//  217  484:aload_0         
		//  218  485:getfield        #30  <Field RecyclerView this$0>
		//  219  488:aload           15
		//  220  490:invokevirtual   #573 <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolder(View)>
		//  221  493:astore          14
							if(viewholder == null)
		//* 222  495:aload           14
		//* 223  497:ifnonnull       534
								throw new IllegalArgumentException((new StringBuilder()).append("getViewForPositionAndType returned a view which does not have a ViewHolder").append(exceptionLabel()).toString());
		//  224  500:new             #199 <Class IllegalArgumentException>
		//  225  503:dup             
		//  226  504:new             #201 <Class StringBuilder>
		//  227  507:dup             
		//  228  508:invokespecial   #202 <Method void StringBuilder()>
		//  229  511:ldc2            #575 <String "getViewForPositionAndType returned a view which does not have a ViewHolder">
		//  230  514:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//  231  517:aload_0         
		//  232  518:getfield        #30  <Field RecyclerView this$0>
		//  233  521:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//  234  524:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//  235  527:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  236  530:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//  237  533:athrow          
							obj = ((Object) (viewholder));
		//  238  534:aload           14
		//  239  536:astore          13
							if(viewholder.shouldIgnore())
		//* 240  538:aload           14
		//* 241  540:invokevirtual   #490 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
		//* 242  543:ifeq            580
								throw new IllegalArgumentException((new StringBuilder()).append("getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.").append(exceptionLabel()).toString());
		//  243  546:new             #199 <Class IllegalArgumentException>
		//  244  549:dup             
		//  245  550:new             #201 <Class StringBuilder>
		//  246  553:dup             
		//  247  554:invokespecial   #202 <Method void StringBuilder()>
		//  248  557:ldc2            #577 <String "getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.">
		//  249  560:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//  250  563:aload_0         
		//  251  564:getfield        #30  <Field RecyclerView this$0>
		//  252  567:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//  253  570:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//  254  573:invokevirtual   #215 <Method String StringBuilder.toString()>
		//  255  576:invokespecial   #218 <Method void IllegalArgumentException(String)>
		//  256  579:athrow          
						}
					}
				}
				viewholder = ((ViewHolder) (obj));
		//  257  580:aload           13
		//  258  582:astore          14
				if(obj == null)
		//* 259  584:aload           13
		//* 260  586:ifnonnull       634
				{
					obj = ((Object) (getRecycledViewPool().getRecycledView(k)));
		//  261  589:aload_0         
		//  262  590:invokevirtual   #189 <Method RecyclerView$RecycledViewPool getRecycledViewPool()>
		//  263  593:iload           7
		//  264  595:invokevirtual   #580 <Method RecyclerView$ViewHolder RecyclerView$RecycledViewPool.getRecycledView(int)>
		//  265  598:astore          13
					viewholder = ((ViewHolder) (obj));
		//  266  600:aload           13
		//  267  602:astore          14
					if(obj != null)
		//* 268  604:aload           13
		//* 269  606:ifnull          634
					{
						((ViewHolder) (obj)).resetInternal();
		//  270  609:aload           13
		//  271  611:invokevirtual   #583 <Method void RecyclerView$ViewHolder.resetInternal()>
						viewholder = ((ViewHolder) (obj));
		//  272  614:aload           13
		//  273  616:astore          14
						if(RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST)
		//* 274  618:getstatic       #586 <Field boolean RecyclerView.FORCE_INVALIDATE_DISPLAY_LIST>
		//* 275  621:ifeq            634
						{
							invalidateDisplayListInt(((ViewHolder) (obj)));
		//  276  624:aload_0         
		//  277  625:aload           13
		//  278  627:invokespecial   #588 <Method void invalidateDisplayListInt(RecyclerView$ViewHolder)>
							viewholder = ((ViewHolder) (obj));
		//  279  630:aload           13
		//  280  632:astore          14
						}
					}
				}
				if(viewholder == null)
		//* 281  634:aload           14
		//* 282  636:ifnonnull       1044
				{
					long l1 = getNanoTime();
		//  283  639:aload_0         
		//  284  640:getfield        #30  <Field RecyclerView this$0>
		//  285  643:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//  286  646:lstore          9
					if(l != 0xffffffffL && !mRecyclerPool.willCreateInTime(k, l1, l))
		//* 287  648:lload_3         
		//* 288  649:ldc2w           #132 <Long 0xffffffffL>
		//* 289  652:lcmp            
		//* 290  653:ifeq            673
		//* 291  656:aload_0         
		//* 292  657:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//* 293  660:iload           7
		//* 294  662:lload           9
		//* 295  664:lload_3         
		//* 296  665:invokevirtual   #591 <Method boolean RecyclerView$RecycledViewPool.willCreateInTime(int, long, long)>
		//* 297  668:ifne            673
						return null;
		//  298  671:aconst_null     
		//  299  672:areturn         
					viewholder = mAdapter.createViewHolder(((ViewGroup) (RecyclerView.this)), k);
		//  300  673:aload_0         
		//  301  674:getfield        #30  <Field RecyclerView this$0>
		//  302  677:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//  303  680:aload_0         
		//  304  681:getfield        #30  <Field RecyclerView this$0>
		//  305  684:iload           7
		//  306  686:invokevirtual   #595 <Method RecyclerView$ViewHolder RecyclerView$Adapter.createViewHolder(ViewGroup, int)>
		//  307  689:astore          14
					if(RecyclerView.ALLOW_THREAD_GAP_WORK)
		//* 308  691:invokestatic    #457 <Method boolean RecyclerView.access$800()>
		//* 309  694:ifeq            726
					{
						obj = ((Object) (RecyclerView.findNestedRecyclerView(viewholder.itemView)));
		//  310  697:aload           14
		//  311  699:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  312  702:invokestatic    #599 <Method RecyclerView RecyclerView.findNestedRecyclerView(View)>
		//  313  705:astore          13
						if(obj != null)
		//* 314  707:aload           13
		//* 315  709:ifnull          726
							viewholder.mNestedRecyclerView = new WeakReference(obj);
		//  316  712:aload           14
		//  317  714:new             #601 <Class WeakReference>
		//  318  717:dup             
		//  319  718:aload           13
		//  320  720:invokespecial   #603 <Method void WeakReference(Object)>
		//  321  723:putfield        #607 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
					}
					long l2 = getNanoTime();
		//  322  726:aload_0         
		//  323  727:getfield        #30  <Field RecyclerView this$0>
		//  324  730:invokevirtual   #131 <Method long RecyclerView.getNanoTime()>
		//  325  733:lstore          11
					mRecyclerPool.factorInCreateTime(k, l2 - l1);
		//  326  735:aload_0         
		//  327  736:getfield        #135 <Field RecyclerView$RecycledViewPool mRecyclerPool>
		//  328  739:iload           7
		//  329  741:lload           11
		//  330  743:lload           9
		//  331  745:lsub            
		//  332  746:invokevirtual   #610 <Method void RecyclerView$RecycledViewPool.factorInCreateTime(int, long)>
				}
			}
			if(flag2 && !mState.isPreLayout() && viewholder.hasAnyOfTheFlags(8192))
		//* 333  749:iload           6
		//* 334  751:ifeq            850
		//* 335  754:aload_0         
		//* 336  755:getfield        #30  <Field RecyclerView this$0>
		//* 337  758:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 338  761:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 339  764:ifne            850
		//* 340  767:aload           14
		//* 341  769:sipush          8192
		//* 342  772:invokevirtual   #178 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
		//* 343  775:ifeq            850
			{
				viewholder.setFlags(0, 8192);
		//  344  778:aload           14
		//  345  780:iconst_0        
		//  346  781:sipush          8192
		//  347  784:invokevirtual   #182 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
				if(mState.mRunSimpleAnimations)
		//* 348  787:aload_0         
		//* 349  788:getfield        #30  <Field RecyclerView this$0>
		//* 350  791:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 351  794:getfield        #613 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		//* 352  797:ifeq            850
				{
					int j = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder);
		//  353  800:aload           14
		//  354  802:invokestatic    #619 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
		//  355  805:istore          5
					obj = ((Object) (mItemAnimator.recordPreLayoutInformation(mState, viewholder, j | 0x1000, viewholder.getUnmodifiedPayloads())));
		//  356  807:aload_0         
		//  357  808:getfield        #30  <Field RecyclerView this$0>
		//  358  811:getfield        #623 <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//  359  814:aload_0         
		//  360  815:getfield        #30  <Field RecyclerView this$0>
		//  361  818:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//  362  821:aload           14
		//  363  823:iload           5
		//  364  825:sipush          4096
		//  365  828:ior             
		//  366  829:aload           14
		//  367  831:invokevirtual   #626 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
		//  368  834:invokevirtual   #630 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
		//  369  837:astore          13
					recordAnimationInfoIfBouncedHiddenView(viewholder, ((ItemAnimator.ItemHolderInfo) (obj)));
		//  370  839:aload_0         
		//  371  840:getfield        #30  <Field RecyclerView this$0>
		//  372  843:aload           14
		//  373  845:aload           13
		//  374  847:invokevirtual   #634 <Method void RecyclerView.recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				}
			}
			flag = false;
		//  375  850:iconst_0        
		//  376  851:istore_2        
			if(mState.isPreLayout() && viewholder.isBound())
		//* 377  852:aload_0         
		//* 378  853:getfield        #30  <Field RecyclerView this$0>
		//* 379  856:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//* 380  859:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//* 381  862:ifeq            943
		//* 382  865:aload           14
		//* 383  867:invokevirtual   #637 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 384  870:ifeq            943
				viewholder.mPreLayoutPosition = i;
		//  385  873:aload           14
		//  386  875:iload_1         
		//  387  876:putfield        #169 <Field int RecyclerView$ViewHolder.mPreLayoutPosition>
			else
		//* 388  879:aload           14
		//* 389  881:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 390  884:invokevirtual   #254 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//* 391  887:astore          13
		//* 392  889:aload           13
		//* 393  891:ifnonnull       990
		//* 394  894:aload_0         
		//* 395  895:getfield        #30  <Field RecyclerView this$0>
		//* 396  898:invokevirtual   #257 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateDefaultLayoutParams()>
		//* 397  901:checkcast       #259 <Class RecyclerView$LayoutParams>
		//* 398  904:astore          13
		//* 399  906:aload           14
		//* 400  908:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//* 401  911:aload           13
		//* 402  913:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 403  916:aload           13
		//* 404  918:aload           14
		//* 405  920:putfield        #271 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
		//* 406  923:iload           6
		//* 407  925:ifeq            1039
		//* 408  928:iload_2         
		//* 409  929:ifeq            1039
		//* 410  932:iconst_1        
		//* 411  933:istore_2        
		//* 412  934:aload           13
		//* 413  936:iload_2         
		//* 414  937:putfield        #278 <Field boolean RecyclerView$LayoutParams.mPendingInvalidate>
		//* 415  940:aload           14
		//* 416  942:areturn         
			if(!viewholder.isBound() || viewholder.needsUpdate() || viewholder.isInvalid())
		//* 417  943:aload           14
		//* 418  945:invokevirtual   #637 <Method boolean RecyclerView$ViewHolder.isBound()>
		//* 419  948:ifeq            967
		//* 420  951:aload           14
		//* 421  953:invokevirtual   #640 <Method boolean RecyclerView$ViewHolder.needsUpdate()>
		//* 422  956:ifne            967
		//* 423  959:aload           14
		//* 424  961:invokevirtual   #377 <Method boolean RecyclerView$ViewHolder.isInvalid()>
		//* 425  964:ifeq            879
				flag = tryBindViewHolderByDeadline(viewholder, mAdapterHelper.findPositionOffset(i), i, l);
		//  426  967:aload_0         
		//  427  968:aload           14
		//  428  970:aload_0         
		//  429  971:getfield        #30  <Field RecyclerView this$0>
		//  430  974:getfield        #222 <Field AdapterHelper RecyclerView.mAdapterHelper>
		//  431  977:iload_1         
		//  432  978:invokevirtual   #228 <Method int AdapterHelper.findPositionOffset(int)>
		//  433  981:iload_1         
		//  434  982:lload_3         
		//  435  983:invokespecial   #248 <Method boolean tryBindViewHolderByDeadline(RecyclerView$ViewHolder, int, int, long)>
		//  436  986:istore_2        
			obj = ((Object) (viewholder.itemView.getLayoutParams()));
			if(obj == null)
			{
				obj = ((Object) ((LayoutParams)generateDefaultLayoutParams()));
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
			} else
		//* 437  987:goto            879
			if(!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj))))
		//* 438  990:aload_0         
		//* 439  991:getfield        #30  <Field RecyclerView this$0>
		//* 440  994:aload           13
		//* 441  996:invokevirtual   #282 <Method boolean RecyclerView.checkLayoutParams(android.view.ViewGroup$LayoutParams)>
		//* 442  999:ifne            1029
			{
				obj = ((Object) ((LayoutParams)generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)))));
		//  443 1002:aload_0         
		//  444 1003:getfield        #30  <Field RecyclerView this$0>
		//  445 1006:aload           13
		//  446 1008:invokevirtual   #286 <Method android.view.ViewGroup$LayoutParams RecyclerView.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
		//  447 1011:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  448 1014:astore          13
				viewholder.itemView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
		//  449 1016:aload           14
		//  450 1018:getfield        #67  <Field View RecyclerView$ViewHolder.itemView>
		//  451 1021:aload           13
		//  452 1023:invokevirtual   #263 <Method void View.setLayoutParams(android.view.ViewGroup$LayoutParams)>
			} else
		//* 453 1026:goto            916
			{
				obj = ((Object) ((LayoutParams)obj));
		//  454 1029:aload           13
		//  455 1031:checkcast       #259 <Class RecyclerView$LayoutParams>
		//  456 1034:astore          13
			}
			obj.mViewHolder = viewholder;
			if(flag2 && flag)
				flag = true;
			else
		//* 457 1036:goto            916
				flag = false;
		//  458 1039:iconst_0        
		//  459 1040:istore_2        
			obj.mPendingInvalidate = flag;
			return viewholder;
		//* 460 1041:goto            934
		//* 461 1044:goto            749
		}

		void unscrapView(ViewHolder viewholder)
		{
			if(viewholder.mInChangeScrap)
		//*   0    0:aload_1         
		//*   1    1:invokestatic    #645 <Method boolean RecyclerView$ViewHolder.access$1100(RecyclerView$ViewHolder)>
		//*   2    4:ifeq            33
				mChangedScrap.remove(((Object) (viewholder)));
		//    3    7:aload_0         
		//    4    8:getfield        #40  <Field ArrayList mChangedScrap>
		//    5   11:aload_1         
		//    6   12:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//    7   15:pop             
			else
		//*   8   16:aload_1         
		//*   9   17:aconst_null     
		//*  10   18:invokestatic    #444 <Method RecyclerView$Recycler RecyclerView$ViewHolder.access$1002(RecyclerView$ViewHolder, RecyclerView$Recycler)>
		//*  11   21:pop             
		//*  12   22:aload_1         
		//*  13   23:iconst_0        
		//*  14   24:invokestatic    #448 <Method boolean RecyclerView$ViewHolder.access$1102(RecyclerView$ViewHolder, boolean)>
		//*  15   27:pop             
		//*  16   28:aload_1         
		//*  17   29:invokevirtual   #451 <Method void RecyclerView$ViewHolder.clearReturnedFromScrapFlag()>
		//*  18   32:return          
				mAttachedScrap.remove(((Object) (viewholder)));
		//   19   33:aload_0         
		//   20   34:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   37:aload_1         
		//   22   38:invokevirtual   #647 <Method boolean ArrayList.remove(Object)>
		//   23   41:pop             
			viewholder.mScrapContainer = null;
			viewholder.mInChangeScrap = false;
			viewholder.clearReturnedFromScrapFlag();
		//*  24   42:goto            16
		}

		void updateViewCacheSize()
		{
			int i;
			if(mLayout != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #30  <Field RecyclerView this$0>
		//*   2    4:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnull          71
				i = mLayout.mPrefetchMaxCountObserved;
		//    4   10:aload_0         
		//    5   11:getfield        #30  <Field RecyclerView this$0>
		//    6   14:getfield        #651 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    7   17:getfield        #656 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
		//    8   20:istore_1        
			else
		//*   9   21:aload_0         
		//*  10   22:aload_0         
		//*  11   23:getfield        #52  <Field int mRequestedCacheMax>
		//*  12   26:iload_1         
		//*  13   27:iadd            
		//*  14   28:putfield        #54  <Field int mViewCacheMax>
		//*  15   31:aload_0         
		//*  16   32:getfield        #42  <Field ArrayList mCachedViews>
		//*  17   35:invokevirtual   #296 <Method int ArrayList.size()>
		//*  18   38:iconst_1        
		//*  19   39:isub            
		//*  20   40:istore_1        
		//*  21   41:iload_1         
		//*  22   42:iflt            76
		//*  23   45:aload_0         
		//*  24   46:getfield        #42  <Field ArrayList mCachedViews>
		//*  25   49:invokevirtual   #296 <Method int ArrayList.size()>
		//*  26   52:aload_0         
		//*  27   53:getfield        #54  <Field int mViewCacheMax>
		//*  28   56:icmple          76
		//*  29   59:aload_0         
		//*  30   60:iload_1         
		//*  31   61:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
		//*  32   64:iload_1         
		//*  33   65:iconst_1        
		//*  34   66:isub            
		//*  35   67:istore_1        
		//*  36   68:goto            41
				i = 0;
		//   37   71:iconst_0        
		//   38   72:istore_1        
			mViewCacheMax = mRequestedCacheMax + i;
			for(i = mCachedViews.size() - 1; i >= 0 && mCachedViews.size() > mViewCacheMax; i--)
				recycleCachedViewAt(i);

		//*  39   73:goto            21
		//   40   76:return          
		}

		boolean validateViewHolderForOffsetPosition(ViewHolder viewholder)
		{
			boolean flag1 = true;
		//    0    0:iconst_1        
		//    1    1:istore_3        
			boolean flag;
			if(viewholder.isRemoved())
		//*   2    2:aload_1         
		//*   3    3:invokevirtual   #358 <Method boolean RecyclerView$ViewHolder.isRemoved()>
		//*   4    6:ifeq            22
			{
				flag = mState.isPreLayout();
		//    5    9:aload_0         
		//    6   10:getfield        #30  <Field RecyclerView this$0>
		//    7   13:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//    8   16:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//    9   19:istore_2        
			} else
		//*  10   20:iload_2         
		//*  11   21:ireturn         
			{
				if(viewholder.mPosition < 0 || viewholder.mPosition >= mAdapter.getItemCount())
		//*  12   22:aload_1         
		//*  13   23:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  14   26:iflt            46
		//*  15   29:aload_1         
		//*  16   30:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  17   33:aload_0         
		//*  18   34:getfield        #30  <Field RecyclerView this$0>
		//*  19   37:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  20   40:invokevirtual   #231 <Method int RecyclerView$Adapter.getItemCount()>
		//*  21   43:icmplt          84
					throw new IndexOutOfBoundsException((new StringBuilder()).append("Inconsistency detected. Invalid view holder adapter position").append(((Object) (viewholder))).append(exceptionLabel()).toString());
		//   22   46:new             #233 <Class IndexOutOfBoundsException>
		//   23   49:dup             
		//   24   50:new             #201 <Class StringBuilder>
		//   25   53:dup             
		//   26   54:invokespecial   #202 <Method void StringBuilder()>
		//   27   57:ldc2            #658 <String "Inconsistency detected. Invalid view holder adapter position">
		//   28   60:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   29   63:aload_1         
		//   30   64:invokevirtual   #402 <Method StringBuilder StringBuilder.append(Object)>
		//   31   67:aload_0         
		//   32   68:getfield        #30  <Field RecyclerView this$0>
		//   33   71:invokevirtual   #212 <Method String RecyclerView.exceptionLabel()>
		//   34   74:invokevirtual   #208 <Method StringBuilder StringBuilder.append(String)>
		//   35   77:invokevirtual   #215 <Method String StringBuilder.toString()>
		//   36   80:invokespecial   #246 <Method void IndexOutOfBoundsException(String)>
		//   37   83:athrow          
				if(!mState.isPreLayout() && mAdapter.getItemViewType(viewholder.mPosition) != viewholder.getItemViewType())
		//*  38   84:aload_0         
		//*  39   85:getfield        #30  <Field RecyclerView this$0>
		//*  40   88:getfield        #161 <Field RecyclerView$State RecyclerView.mState>
		//*  41   91:invokevirtual   #166 <Method boolean RecyclerView$State.isPreLayout()>
		//*  42   94:ifne            120
		//*  43   97:aload_0         
		//*  44   98:getfield        #30  <Field RecyclerView this$0>
		//*  45  101:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  46  104:aload_1         
		//*  47  105:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  48  108:invokevirtual   #562 <Method int RecyclerView$Adapter.getItemViewType(int)>
		//*  49  111:aload_1         
		//*  50  112:invokevirtual   #127 <Method int RecyclerView$ViewHolder.getItemViewType()>
		//*  51  115:icmpeq          120
					return false;
		//   52  118:iconst_0        
		//   53  119:ireturn         
				flag = flag1;
		//   54  120:iload_3         
		//   55  121:istore_2        
				if(mAdapter.hasStableIds())
		//*  56  122:aload_0         
		//*  57  123:getfield        #30  <Field RecyclerView this$0>
		//*  58  126:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  59  129:invokevirtual   #341 <Method boolean RecyclerView$Adapter.hasStableIds()>
		//*  60  132:ifeq            20
				{
					flag = flag1;
		//   61  135:iload_3         
		//   62  136:istore_2        
					if(viewholder.getItemId() != mAdapter.getItemId(viewholder.mPosition))
		//*  63  137:aload_1         
		//*  64  138:invokevirtual   #347 <Method long RecyclerView$ViewHolder.getItemId()>
		//*  65  141:aload_0         
		//*  66  142:getfield        #30  <Field RecyclerView this$0>
		//*  67  145:getfield        #145 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  68  148:aload_1         
		//*  69  149:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//*  70  152:invokevirtual   #345 <Method long RecyclerView$Adapter.getItemId(int)>
		//*  71  155:lcmp            
		//*  72  156:ifeq            20
						return false;
		//   73  159:iconst_0        
		//   74  160:ireturn         
				}
			}
			return flag;
		}

		void viewRangeUpdate(int i, int j)
		{
			int k = mCachedViews.size() - 1;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field ArrayList mCachedViews>
		//    2    4:invokevirtual   #296 <Method int ArrayList.size()>
		//    3    7:iconst_1        
		//    4    8:isub            
		//    5    9:istore_3        
			while(k >= 0) 
		//*   6   10:iload_3         
		//*   7   11:iflt            74
			{
				ViewHolder viewholder = (ViewHolder)mCachedViews.get(k);
		//    8   14:aload_0         
		//    9   15:getfield        #42  <Field ArrayList mCachedViews>
		//   10   18:iload_3         
		//   11   19:invokevirtual   #300 <Method Object ArrayList.get(int)>
		//   12   22:checkcast       #63  <Class RecyclerView$ViewHolder>
		//   13   25:astore          5
				if(viewholder != null)
		//*  14   27:aload           5
		//*  15   29:ifnonnull       39
		//*  16   32:iload_3         
		//*  17   33:iconst_1        
		//*  18   34:isub            
		//*  19   35:istore_3        
		//*  20   36:goto            10
				{
					int l = viewholder.mPosition;
		//   21   39:aload           5
		//   22   41:getfield        #428 <Field int RecyclerView$ViewHolder.mPosition>
		//   23   44:istore          4
					if(l >= i && l < i + j)
		//*  24   46:iload           4
		//*  25   48:iload_1         
		//*  26   49:icmplt          32
		//*  27   52:iload           4
		//*  28   54:iload_1         
		//*  29   55:iload_2         
		//*  30   56:iadd            
		//*  31   57:icmpge          32
					{
						viewholder.addFlags(2);
		//   32   60:aload           5
		//   33   62:iconst_2        
		//   34   63:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
						recycleCachedViewAt(k);
		//   35   66:aload_0         
		//   36   67:iload_3         
		//   37   68:invokevirtual   #372 <Method void recycleCachedViewAt(int)>
					}
				}
				k--;
			}
		//*  38   71:goto            32
		//   39   74:return          
		}

		static final int DEFAULT_CACHE_SIZE = 2;
		final ArrayList mAttachedScrap = new ArrayList();
		final ArrayList mCachedViews = new ArrayList();
		ArrayList mChangedScrap;
		RecycledViewPool mRecyclerPool;
		private int mRequestedCacheMax;
		private final List mUnmodifiableAttachedScrap;
		private ViewCacheExtension mViewCacheExtension;
		int mViewCacheMax;
		final RecyclerView this$0;

		public Recycler()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #30  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #33  <Method void Object()>
		//    5    9:aload_0         
		//    6   10:new             #35  <Class ArrayList>
		//    7   13:dup             
		//    8   14:invokespecial   #36  <Method void ArrayList()>
		//    9   17:putfield        #38  <Field ArrayList mAttachedScrap>
			mChangedScrap = null;
		//   10   20:aload_0         
		//   11   21:aconst_null     
		//   12   22:putfield        #40  <Field ArrayList mChangedScrap>
		//   13   25:aload_0         
		//   14   26:new             #35  <Class ArrayList>
		//   15   29:dup             
		//   16   30:invokespecial   #36  <Method void ArrayList()>
		//   17   33:putfield        #42  <Field ArrayList mCachedViews>
			mUnmodifiableAttachedScrap = Collections.unmodifiableList(((List) (mAttachedScrap)));
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #38  <Field ArrayList mAttachedScrap>
		//   21   41:invokestatic    #48  <Method List Collections.unmodifiableList(List)>
		//   22   44:putfield        #50  <Field List mUnmodifiableAttachedScrap>
			mRequestedCacheMax = 2;
		//   23   47:aload_0         
		//   24   48:iconst_2        
		//   25   49:putfield        #52  <Field int mRequestedCacheMax>
			mViewCacheMax = 2;
		//   26   52:aload_0         
		//   27   53:iconst_2        
		//   28   54:putfield        #54  <Field int mViewCacheMax>
		//   29   57:return          
		}
	}

	public static interface RecyclerListener
	{

		public abstract void onViewRecycled(ViewHolder viewholder);
	}

	private class RecyclerViewDataObserver extends AdapterDataObserver
	{

		public void onChanged()
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			mState.mStructureChanged = true;
		//    4    8:aload_0         
		//    5    9:getfield        #13  <Field RecyclerView this$0>
		//    6   12:getfield        #26  <Field RecyclerView$State RecyclerView.mState>
		//    7   15:iconst_1        
		//    8   16:putfield        #32  <Field boolean RecyclerView$State.mStructureChanged>
			setDataSetChangedAfterLayout();
		//    9   19:aload_0         
		//   10   20:getfield        #13  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #35  <Method void RecyclerView.setDataSetChangedAfterLayout()>
			if(!mAdapterHelper.hasPendingUpdates())
		//*  12   26:aload_0         
		//*  13   27:getfield        #13  <Field RecyclerView this$0>
		//*  14   30:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*  15   33:invokevirtual   #45  <Method boolean AdapterHelper.hasPendingUpdates()>
		//*  16   36:ifne            46
				requestLayout();
		//   17   39:aload_0         
		//   18   40:getfield        #13  <Field RecyclerView this$0>
		//   19   43:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
		//   20   46:return          
		}

		public void onItemRangeChanged(int i, int j, Object obj)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeChanged(i, j, obj))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:aload_3         
		//*  10   18:invokevirtual   #53  <Method boolean AdapterHelper.onItemRangeChanged(int, int, Object)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeInserted(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeInserted(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #61  <Method boolean AdapterHelper.onItemRangeInserted(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		public void onItemRangeMoved(int i, int j, int k)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeMoved(i, j, k))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:iload_3         
		//*  10   18:invokevirtual   #66  <Method boolean AdapterHelper.onItemRangeMoved(int, int, int)>
		//*  11   21:ifeq            28
				triggerUpdateProcessor();
		//   12   24:aload_0         
		//   13   25:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   14   28:return          
		}

		public void onItemRangeRemoved(int i, int j)
		{
			assertNotInLayoutOrScroll(((String) (null)));
		//    0    0:aload_0         
		//    1    1:getfield        #13  <Field RecyclerView this$0>
		//    2    4:aconst_null     
		//    3    5:invokevirtual   #22  <Method void RecyclerView.assertNotInLayoutOrScroll(String)>
			if(mAdapterHelper.onItemRangeRemoved(i, j))
		//*   4    8:aload_0         
		//*   5    9:getfield        #13  <Field RecyclerView this$0>
		//*   6   12:getfield        #39  <Field AdapterHelper RecyclerView.mAdapterHelper>
		//*   7   15:iload_1         
		//*   8   16:iload_2         
		//*   9   17:invokevirtual   #69  <Method boolean AdapterHelper.onItemRangeRemoved(int, int)>
		//*  10   20:ifeq            27
				triggerUpdateProcessor();
		//   11   23:aload_0         
		//   12   24:invokevirtual   #56  <Method void triggerUpdateProcessor()>
		//   13   27:return          
		}

		void triggerUpdateProcessor()
		{
			if(RecyclerView.POST_UPDATES_ON_ANIMATION && mHasFixedSize && mIsAttached)
		//*   0    0:getstatic       #72  <Field boolean RecyclerView.POST_UPDATES_ON_ANIMATION>
		//*   1    3:ifeq            41
		//*   2    6:aload_0         
		//*   3    7:getfield        #13  <Field RecyclerView this$0>
		//*   4   10:getfield        #75  <Field boolean RecyclerView.mHasFixedSize>
		//*   5   13:ifeq            41
		//*   6   16:aload_0         
		//*   7   17:getfield        #13  <Field RecyclerView this$0>
		//*   8   20:getfield        #78  <Field boolean RecyclerView.mIsAttached>
		//*   9   23:ifeq            41
			{
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), mUpdateChildViewsRunnable);
		//   10   26:aload_0         
		//   11   27:getfield        #13  <Field RecyclerView this$0>
		//   12   30:aload_0         
		//   13   31:getfield        #13  <Field RecyclerView this$0>
		//   14   34:getfield        #82  <Field Runnable RecyclerView.mUpdateChildViewsRunnable>
		//   15   37:invokestatic    #88  <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   40:return          
			} else
			{
				mAdapterUpdateDuringMeasure = true;
		//   17   41:aload_0         
		//   18   42:getfield        #13  <Field RecyclerView this$0>
		//   19   45:iconst_1        
		//   20   46:putfield        #91  <Field boolean RecyclerView.mAdapterUpdateDuringMeasure>
				requestLayout();
		//   21   49:aload_0         
		//   22   50:getfield        #13  <Field RecyclerView this$0>
		//   23   53:invokevirtual   #48  <Method void RecyclerView.requestLayout()>
				return;
		//   24   56:return          
			}
		}

		final RecyclerView this$0;

		RecyclerViewDataObserver()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #13  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #16  <Method void RecyclerView$AdapterDataObserver()>
		//    5    9:return          
		}
	}

	public static class SavedState extends AbsSavedState
	{

		void copyFrom(SavedState savedstate)
		{
			mLayoutState = savedstate.mLayoutState;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:getfield        #37  <Field Parcelable mLayoutState>
		//    3    5:putfield        #37  <Field Parcelable mLayoutState>
		//    4    8:return          
		}

		public void writeToParcel(Parcel parcel, int i)
		{
			super.writeToParcel(parcel, i);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #54  <Method void AbsSavedState.writeToParcel(Parcel, int)>
			parcel.writeParcelable(mLayoutState, 0);
		//    4    6:aload_1         
		//    5    7:aload_0         
		//    6    8:getfield        #37  <Field Parcelable mLayoutState>
		//    7   11:iconst_0        
		//    8   12:invokevirtual   #58  <Method void Parcel.writeParcelable(Parcelable, int)>
		//    9   15:return          
		}

		public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.ClassLoaderCreator() {

			public SavedState createFromParcel(Parcel parcel)
			{
				return new SavedState(parcel, ((ClassLoader) (null)));
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aconst_null     
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public SavedState createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return new SavedState(parcel, classloader);
			//    0    0:new             #9   <Class RecyclerView$SavedState>
			//    1    3:dup             
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:invokespecial   #22  <Method void RecyclerView$SavedState(Parcel, ClassLoader)>
			//    5    9:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel)
			{
				return ((Object) (createFromParcel(parcel)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #26  <Method RecyclerView$SavedState createFromParcel(Parcel)>
			//    3    5:areturn         
			}

			public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader)
			{
				return ((Object) (createFromParcel(parcel, classloader)));
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:aload_2         
			//    3    3:invokevirtual   #29  <Method RecyclerView$SavedState createFromParcel(Parcel, ClassLoader)>
			//    4    6:areturn         
			}

			public SavedState[] newArray(int i)
			{
				return new SavedState[i];
			//    0    0:iload_1         
			//    1    1:anewarray       SavedState[]
			//    2    4:areturn         
			}

			public volatile Object[] newArray(int i)
			{
				return ((Object []) (newArray(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #34  <Method RecyclerView$SavedState[] newArray(int)>
			//    3    5:areturn         
			}

		}
;
		Parcelable mLayoutState;

		static 
		{
		//    0    0:new             #9   <Class RecyclerView$SavedState$1>
		//    1    3:dup             
		//    2    4:invokespecial   #23  <Method void RecyclerView$SavedState$1()>
		//    3    7:putstatic       #25  <Field android.os.Parcelable$Creator CREATOR>
		//*   4   10:return          
		}

		SavedState(Parcel parcel, ClassLoader classloader)
		{
			super(parcel, classloader);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:aload_2         
		//    3    3:invokespecial   #29  <Method void AbsSavedState(Parcel, ClassLoader)>
			if(classloader == null)
		//*   4    6:aload_2         
		//*   5    7:ifnull          20
		//*   6   10:aload_0         
		//*   7   11:aload_1         
		//*   8   12:aload_2         
		//*   9   13:invokevirtual   #35  <Method Parcelable Parcel.readParcelable(ClassLoader)>
		//*  10   16:putfield        #37  <Field Parcelable mLayoutState>
		//*  11   19:return          
				classloader = ((Class) (android/support/v7/widget/RecyclerView$LayoutManager)).getClassLoader();
		//   12   20:ldc1            #39  <Class RecyclerView$LayoutManager>
		//   13   22:invokevirtual   #45  <Method ClassLoader Class.getClassLoader()>
		//   14   25:astore_2        
			mLayoutState = parcel.readParcelable(classloader);
		//*  15   26:goto            10
		}

		SavedState(Parcelable parcelable)
		{
			super(parcelable);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #48  <Method void AbsSavedState(Parcelable)>
		//    3    5:return          
		}
	}

	public static class SimpleOnItemTouchListener
		implements OnItemTouchListener
	{

		public boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
			return false;
		//    0    0:iconst_0        
		//    1    1:ireturn         
		}

		public void onRequestDisallowInterceptTouchEvent(boolean flag)
		{
		//    0    0:return          
		}

		public void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent)
		{
		//    0    0:return          
		}

		public SimpleOnItemTouchListener()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #13  <Method void Object()>
		//    2    4:return          
		}
	}

	public static abstract class SmoothScroller
	{

		private void onAnimation(int i, int j)
		{
label0:
			{
				RecyclerView recyclerview = mRecyclerView;
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:astore          4
				if(!mRunning || mTargetPosition == -1 || recyclerview == null)
		//*   3    6:aload_0         
		//*   4    7:getfield        #47  <Field boolean mRunning>
		//*   5   10:ifeq            26
		//*   6   13:aload_0         
		//*   7   14:getfield        #32  <Field int mTargetPosition>
		//*   8   17:iconst_m1       
		//*   9   18:icmpeq          26
		//*  10   21:aload           4
		//*  11   23:ifnonnull       30
					stop();
		//   12   26:aload_0         
		//   13   27:invokevirtual   #50  <Method void stop()>
				mPendingInitialRun = false;
		//   14   30:aload_0         
		//   15   31:iconst_0        
		//   16   32:putfield        #52  <Field boolean mPendingInitialRun>
				if(mTargetView != null)
		//*  17   35:aload_0         
		//*  18   36:getfield        #54  <Field View mTargetView>
		//*  19   39:ifnull          87
					if(getChildPosition(mTargetView) == mTargetPosition)
		//*  20   42:aload_0         
		//*  21   43:aload_0         
		//*  22   44:getfield        #54  <Field View mTargetView>
		//*  23   47:invokevirtual   #58  <Method int getChildPosition(View)>
		//*  24   50:aload_0         
		//*  25   51:getfield        #32  <Field int mTargetPosition>
		//*  26   54:icmpne          151
					{
						onTargetFound(mTargetView, recyclerview.mState, mRecyclingAction);
		//   27   57:aload_0         
		//   28   58:aload_0         
		//   29   59:getfield        #54  <Field View mTargetView>
		//   30   62:aload           4
		//   31   64:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   32   67:aload_0         
		//   33   68:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   34   71:invokevirtual   #66  <Method void onTargetFound(View, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
						mRecyclingAction.runIfNecessary(recyclerview);
		//   35   74:aload_0         
		//   36   75:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   37   78:aload           4
		//   38   80:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
						stop();
		//   39   83:aload_0         
		//   40   84:invokevirtual   #50  <Method void stop()>
					} else
		//*  41   87:aload_0         
		//*  42   88:getfield        #47  <Field boolean mRunning>
		//*  43   91:ifeq            150
		//*  44   94:aload_0         
		//*  45   95:iload_1         
		//*  46   96:iload_2         
		//*  47   97:aload           4
		//*  48   99:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//*  49  102:aload_0         
		//*  50  103:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  51  106:invokevirtual   #74  <Method void onSeekTargetStep(int, int, RecyclerView$State, RecyclerView$SmoothScroller$Action)>
		//*  52  109:aload_0         
		//*  53  110:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  54  113:invokevirtual   #78  <Method boolean RecyclerView$SmoothScroller$Action.hasJumpTarget()>
		//*  55  116:istore_3        
		//*  56  117:aload_0         
		//*  57  118:getfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//*  58  121:aload           4
		//*  59  123:invokevirtual   #70  <Method void RecyclerView$SmoothScroller$Action.runIfNecessary(RecyclerView)>
		//*  60  126:iload_3         
		//*  61  127:ifeq            150
		//*  62  130:aload_0         
		//*  63  131:getfield        #47  <Field boolean mRunning>
		//*  64  134:ifeq            167
		//*  65  137:aload_0         
		//*  66  138:iconst_1        
		//*  67  139:putfield        #52  <Field boolean mPendingInitialRun>
		//*  68  142:aload           4
		//*  69  144:getfield        #82  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//*  70  147:invokevirtual   #87  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
		//*  71  150:return          
					{
						Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
		//   72  151:ldc1            #89  <String "RecyclerView">
		//   73  153:ldc1            #91  <String "Passed over target position while smooth scrolling.">
		//   74  155:invokestatic    #97  <Method int Log.e(String, String)>
		//   75  158:pop             
						mTargetView = null;
		//   76  159:aload_0         
		//   77  160:aconst_null     
		//   78  161:putfield        #54  <Field View mTargetView>
					}
				if(mRunning)
				{
					onSeekTargetStep(i, j, recyclerview.mState, mRecyclingAction);
					boolean flag = mRecyclingAction.hasJumpTarget();
					mRecyclingAction.runIfNecessary(recyclerview);
					if(flag)
					{
						if(!mRunning)
							break label0;
						mPendingInitialRun = true;
						recyclerview.mViewFlinger.postOnAnimation();
					}
				}
				return;
			}
		//*  79  164:goto            87
			stop();
		//   80  167:aload_0         
		//   81  168:invokevirtual   #50  <Method void stop()>
		//   82  171:return          
		}

		public View findViewByPosition(int i)
		{
			return mRecyclerView.mLayout.findViewByPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:iload_1         
		//    4    8:invokevirtual   #106 <Method View RecyclerView$LayoutManager.findViewByPosition(int)>
		//    5   11:areturn         
		}

		public int getChildCount()
		{
			return mRecyclerView.mLayout.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:getfield        #102 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//    3    7:invokevirtual   #110 <Method int RecyclerView$LayoutManager.getChildCount()>
		//    4   10:ireturn         
		}

		public int getChildPosition(View view)
		{
			return mRecyclerView.getChildLayoutPosition(view);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:aload_1         
		//    3    5:invokevirtual   #113 <Method int RecyclerView.getChildLayoutPosition(View)>
		//    4    8:ireturn         
		}

		public LayoutManager getLayoutManager()
		{
			return mLayoutManager;
		//    0    0:aload_0         
		//    1    1:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//    2    4:areturn         
		}

		public int getTargetPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #32  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public void instantScrollToPosition(int i)
		{
			mRecyclerView.scrollToPosition(i);
		//    0    0:aload_0         
		//    1    1:getfield        #45  <Field RecyclerView mRecyclerView>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #126 <Method void RecyclerView.scrollToPosition(int)>
		//    4    8:return          
		}

		public boolean isPendingInitialRun()
		{
			return mPendingInitialRun;
		//    0    0:aload_0         
		//    1    1:getfield        #52  <Field boolean mPendingInitialRun>
		//    2    4:ireturn         
		}

		public boolean isRunning()
		{
			return mRunning;
		//    0    0:aload_0         
		//    1    1:getfield        #47  <Field boolean mRunning>
		//    2    4:ireturn         
		}

		protected void normalize(PointF pointf)
		{
			float f = (float)Math.sqrt(pointf.x * pointf.x + pointf.y * pointf.y);
		//    0    0:aload_1         
		//    1    1:getfield        #137 <Field float PointF.x>
		//    2    4:aload_1         
		//    3    5:getfield        #137 <Field float PointF.x>
		//    4    8:fmul            
		//    5    9:aload_1         
		//    6   10:getfield        #140 <Field float PointF.y>
		//    7   13:aload_1         
		//    8   14:getfield        #140 <Field float PointF.y>
		//    9   17:fmul            
		//   10   18:fadd            
		//   11   19:f2d             
		//   12   20:invokestatic    #146 <Method double Math.sqrt(double)>
		//   13   23:d2f             
		//   14   24:fstore_2        
			pointf.x = pointf.x / f;
		//   15   25:aload_1         
		//   16   26:aload_1         
		//   17   27:getfield        #137 <Field float PointF.x>
		//   18   30:fload_2         
		//   19   31:fdiv            
		//   20   32:putfield        #137 <Field float PointF.x>
			pointf.y = pointf.y / f;
		//   21   35:aload_1         
		//   22   36:aload_1         
		//   23   37:getfield        #140 <Field float PointF.y>
		//   24   40:fload_2         
		//   25   41:fdiv            
		//   26   42:putfield        #140 <Field float PointF.y>
		//   27   45:return          
		}

		protected void onChildAttachedToWindow(View view)
		{
			if(getChildPosition(view) == getTargetPosition())
		//*   0    0:aload_0         
		//*   1    1:aload_1         
		//*   2    2:invokevirtual   #58  <Method int getChildPosition(View)>
		//*   3    5:aload_0         
		//*   4    6:invokevirtual   #150 <Method int getTargetPosition()>
		//*   5    9:icmpne          17
				mTargetView = view;
		//    6   12:aload_0         
		//    7   13:aload_1         
		//    8   14:putfield        #54  <Field View mTargetView>
		//    9   17:return          
		}

		protected abstract void onSeekTargetStep(int i, int j, State state, Action action);

		protected abstract void onStart();

		protected abstract void onStop();

		protected abstract void onTargetFound(View view, State state, Action action);

		public void setTargetPosition(int i)
		{
			mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #32  <Field int mTargetPosition>
		//    3    5:return          
		}

		void start(RecyclerView recyclerview, LayoutManager layoutmanager)
		{
			mRecyclerView = recyclerview;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #45  <Field RecyclerView mRecyclerView>
			mLayoutManager = layoutmanager;
		//    3    5:aload_0         
		//    4    6:aload_2         
		//    5    7:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
			if(mTargetPosition == -1)
		//*   6   10:aload_0         
		//*   7   11:getfield        #32  <Field int mTargetPosition>
		//*   8   14:iconst_m1       
		//*   9   15:icmpne          28
			{
				throw new IllegalArgumentException("Invalid target position");
		//   10   18:new             #157 <Class IllegalArgumentException>
		//   11   21:dup             
		//   12   22:ldc1            #159 <String "Invalid target position">
		//   13   24:invokespecial   #162 <Method void IllegalArgumentException(String)>
		//   14   27:athrow          
			} else
			{
				mRecyclerView.mState.mTargetPosition = mTargetPosition;
		//   15   28:aload_0         
		//   16   29:getfield        #45  <Field RecyclerView mRecyclerView>
		//   17   32:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//   18   35:aload_0         
		//   19   36:getfield        #32  <Field int mTargetPosition>
		//   20   39:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   21   42:pop             
				mRunning = true;
		//   22   43:aload_0         
		//   23   44:iconst_1        
		//   24   45:putfield        #47  <Field boolean mRunning>
				mPendingInitialRun = true;
		//   25   48:aload_0         
		//   26   49:iconst_1        
		//   27   50:putfield        #52  <Field boolean mPendingInitialRun>
				mTargetView = findViewByPosition(getTargetPosition());
		//   28   53:aload_0         
		//   29   54:aload_0         
		//   30   55:aload_0         
		//   31   56:invokevirtual   #150 <Method int getTargetPosition()>
		//   32   59:invokevirtual   #169 <Method View findViewByPosition(int)>
		//   33   62:putfield        #54  <Field View mTargetView>
				onStart();
		//   34   65:aload_0         
		//   35   66:invokevirtual   #171 <Method void onStart()>
				mRecyclerView.mViewFlinger.postOnAnimation();
		//   36   69:aload_0         
		//   37   70:getfield        #45  <Field RecyclerView mRecyclerView>
		//   38   73:getfield        #82  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   39   76:invokevirtual   #87  <Method void RecyclerView$ViewFlinger.postOnAnimation()>
				return;
		//   40   79:return          
			}
		}

		protected final void stop()
		{
			if(!mRunning)
		//*   0    0:aload_0         
		//*   1    1:getfield        #47  <Field boolean mRunning>
		//*   2    4:ifne            8
			{
				return;
		//    3    7:return          
			} else
			{
				onStop();
		//    4    8:aload_0         
		//    5    9:invokevirtual   #173 <Method void onStop()>
				mRecyclerView.mState.mTargetPosition = -1;
		//    6   12:aload_0         
		//    7   13:getfield        #45  <Field RecyclerView mRecyclerView>
		//    8   16:getfield        #62  <Field RecyclerView$State RecyclerView.mState>
		//    9   19:iconst_m1       
		//   10   20:invokestatic    #168 <Method int RecyclerView$State.access$1302(RecyclerView$State, int)>
		//   11   23:pop             
				mTargetView = null;
		//   12   24:aload_0         
		//   13   25:aconst_null     
		//   14   26:putfield        #54  <Field View mTargetView>
				mTargetPosition = -1;
		//   15   29:aload_0         
		//   16   30:iconst_m1       
		//   17   31:putfield        #32  <Field int mTargetPosition>
				mPendingInitialRun = false;
		//   18   34:aload_0         
		//   19   35:iconst_0        
		//   20   36:putfield        #52  <Field boolean mPendingInitialRun>
				mRunning = false;
		//   21   39:aload_0         
		//   22   40:iconst_0        
		//   23   41:putfield        #47  <Field boolean mRunning>
				mLayoutManager.onSmoothScrollerStopped(this);
		//   24   44:aload_0         
		//   25   45:getfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
		//   26   48:aload_0         
		//   27   49:invokestatic    #177 <Method void RecyclerView$LayoutManager.access$1400(RecyclerView$LayoutManager, RecyclerView$SmoothScroller)>
				mLayoutManager = null;
		//   28   52:aload_0         
		//   29   53:aconst_null     
		//   30   54:putfield        #118 <Field RecyclerView$LayoutManager mLayoutManager>
				mRecyclerView = null;
		//   31   57:aload_0         
		//   32   58:aconst_null     
		//   33   59:putfield        #45  <Field RecyclerView mRecyclerView>
				return;
		//   34   62:return          
			}
		}

		private LayoutManager mLayoutManager;
		private boolean mPendingInitialRun;
		private RecyclerView mRecyclerView;
		private final Action mRecyclingAction = new Action(0, 0);
		private boolean mRunning;
		private int mTargetPosition;
		private View mTargetView;


/*
		static void access$600(SmoothScroller smoothscroller, int i, int j)
		{
			smoothscroller.onAnimation(i, j);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:invokespecial   #43  <Method void onAnimation(int, int)>
			return;
		//    4    6:return          
		}

*/

		public SmoothScroller()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #30  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #32  <Field int mTargetPosition>
		//    5    9:aload_0         
		//    6   10:new             #9   <Class RecyclerView$SmoothScroller$Action>
		//    7   13:dup             
		//    8   14:iconst_0        
		//    9   15:iconst_0        
		//   10   16:invokespecial   #35  <Method void RecyclerView$SmoothScroller$Action(int, int)>
		//   11   19:putfield        #37  <Field RecyclerView$SmoothScroller$Action mRecyclingAction>
		//   12   22:return          
		}
	}

	public static class SmoothScroller.Action
	{

		private void validate()
		{
			if(mInterpolator != null && mDuration < 1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #46  <Field Interpolator mInterpolator>
		//*   2    4:ifnull          25
		//*   3    7:aload_0         
		//*   4    8:getfield        #44  <Field int mDuration>
		//*   5   11:iconst_1        
		//*   6   12:icmpge          25
				throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
		//    7   15:new             #49  <Class IllegalStateException>
		//    8   18:dup             
		//    9   19:ldc1            #51  <String "If you provide an interpolator, you must set a positive duration">
		//   10   21:invokespecial   #54  <Method void IllegalStateException(String)>
		//   11   24:athrow          
			if(mDuration < 1)
		//*  12   25:aload_0         
		//*  13   26:getfield        #44  <Field int mDuration>
		//*  14   29:iconst_1        
		//*  15   30:icmpge          43
				throw new IllegalStateException("Scroll duration must be a positive number");
		//   16   33:new             #49  <Class IllegalStateException>
		//   17   36:dup             
		//   18   37:ldc1            #56  <String "Scroll duration must be a positive number">
		//   19   39:invokespecial   #54  <Method void IllegalStateException(String)>
		//   20   42:athrow          
			else
				return;
		//   21   43:return          
		}

		public int getDuration()
		{
			return mDuration;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mDuration>
		//    2    4:ireturn         
		}

		public int getDx()
		{
			return mDx;
		//    0    0:aload_0         
		//    1    1:getfield        #40  <Field int mDx>
		//    2    4:ireturn         
		}

		public int getDy()
		{
			return mDy;
		//    0    0:aload_0         
		//    1    1:getfield        #42  <Field int mDy>
		//    2    4:ireturn         
		}

		public Interpolator getInterpolator()
		{
			return mInterpolator;
		//    0    0:aload_0         
		//    1    1:getfield        #46  <Field Interpolator mInterpolator>
		//    2    4:areturn         
		}

		boolean hasJumpTarget()
		{
			return mJumpToPosition >= 0;
		//    0    0:aload_0         
		//    1    1:getfield        #34  <Field int mJumpToPosition>
		//    2    4:iflt            9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		public void jumpTo(int i)
		{
			mJumpToPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #34  <Field int mJumpToPosition>
		//    3    5:return          
		}

		void runIfNecessary(RecyclerView recyclerview)
		{
			if(mJumpToPosition >= 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #34  <Field int mJumpToPosition>
		//*   2    4:iflt            28
			{
				int i = mJumpToPosition;
		//    3    7:aload_0         
		//    4    8:getfield        #34  <Field int mJumpToPosition>
		//    5   11:istore_2        
				mJumpToPosition = -1;
		//    6   12:aload_0         
		//    7   13:iconst_m1       
		//    8   14:putfield        #34  <Field int mJumpToPosition>
				recyclerview.jumpToPositionForSmoothScroller(i);
		//    9   17:aload_1         
		//   10   18:iload_2         
		//   11   19:invokevirtual   #71  <Method void RecyclerView.jumpToPositionForSmoothScroller(int)>
				mChanged = false;
		//   12   22:aload_0         
		//   13   23:iconst_0        
		//   14   24:putfield        #36  <Field boolean mChanged>
				return;
		//   15   27:return          
			}
			if(mChanged)
		//*  16   28:aload_0         
		//*  17   29:getfield        #36  <Field boolean mChanged>
		//*  18   32:ifeq            151
			{
				validate();
		//   19   35:aload_0         
		//   20   36:invokespecial   #73  <Method void validate()>
				if(mInterpolator == null)
		//*  21   39:aload_0         
		//*  22   40:getfield        #46  <Field Interpolator mInterpolator>
		//*  23   43:ifnonnull       125
				{
					if(mDuration == 0x80000000)
		//*  24   46:aload_0         
		//*  25   47:getfield        #44  <Field int mDuration>
		//*  26   50:ldc1            #13  <Int 0x80000000>
		//*  27   52:icmpne          103
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy);
		//   28   55:aload_1         
		//   29   56:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   30   59:aload_0         
		//   31   60:getfield        #40  <Field int mDx>
		//   32   63:aload_0         
		//   33   64:getfield        #42  <Field int mDy>
		//   34   67:invokevirtual   #82  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int)>
					else
		//*  35   70:aload_0         
		//*  36   71:aload_0         
		//*  37   72:getfield        #38  <Field int mConsecutiveUpdates>
		//*  38   75:iconst_1        
		//*  39   76:iadd            
		//*  40   77:putfield        #38  <Field int mConsecutiveUpdates>
		//*  41   80:aload_0         
		//*  42   81:getfield        #38  <Field int mConsecutiveUpdates>
		//*  43   84:bipush          10
		//*  44   86:icmple          97
		//*  45   89:ldc1            #84  <String "RecyclerView">
		//*  46   91:ldc1            #86  <String "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary">
		//*  47   93:invokestatic    #92  <Method int Log.e(String, String)>
		//*  48   96:pop             
		//*  49   97:aload_0         
		//*  50   98:iconst_0        
		//*  51   99:putfield        #36  <Field boolean mChanged>
		//*  52  102:return          
						recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration);
		//   53  103:aload_1         
		//   54  104:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   55  107:aload_0         
		//   56  108:getfield        #40  <Field int mDx>
		//   57  111:aload_0         
		//   58  112:getfield        #42  <Field int mDy>
		//   59  115:aload_0         
		//   60  116:getfield        #44  <Field int mDuration>
		//   61  119:invokevirtual   #94  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int)>
				} else
		//*  62  122:goto            70
				{
					recyclerview.mViewFlinger.smoothScrollBy(mDx, mDy, mDuration, mInterpolator);
		//   63  125:aload_1         
		//   64  126:getfield        #77  <Field RecyclerView$ViewFlinger RecyclerView.mViewFlinger>
		//   65  129:aload_0         
		//   66  130:getfield        #40  <Field int mDx>
		//   67  133:aload_0         
		//   68  134:getfield        #42  <Field int mDy>
		//   69  137:aload_0         
		//   70  138:getfield        #44  <Field int mDuration>
		//   71  141:aload_0         
		//   72  142:getfield        #46  <Field Interpolator mInterpolator>
		//   73  145:invokevirtual   #96  <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, int, Interpolator)>
				}
				mConsecutiveUpdates = mConsecutiveUpdates + 1;
				if(mConsecutiveUpdates > 10)
					Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
				mChanged = false;
				return;
			} else
		//*  74  148:goto            70
			{
				mConsecutiveUpdates = 0;
		//   75  151:aload_0         
		//   76  152:iconst_0        
		//   77  153:putfield        #38  <Field int mConsecutiveUpdates>
				return;
		//   78  156:return          
			}
		}

		public void setDuration(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDuration = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #44  <Field int mDuration>
		//    6   10:return          
		}

		public void setDx(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDx = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #40  <Field int mDx>
		//    6   10:return          
		}

		public void setDy(int i)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mDy = i;
		//    3    5:aload_0         
		//    4    6:iload_1         
		//    5    7:putfield        #42  <Field int mDy>
		//    6   10:return          
		}

		public void setInterpolator(Interpolator interpolator)
		{
			mChanged = true;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #36  <Field boolean mChanged>
			mInterpolator = interpolator;
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:putfield        #46  <Field Interpolator mInterpolator>
		//    6   10:return          
		}

		public void update(int i, int j, int k, Interpolator interpolator)
		{
			mDx = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #40  <Field int mDx>
			mDy = j;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #42  <Field int mDy>
			mDuration = k;
		//    6   10:aload_0         
		//    7   11:iload_3         
		//    8   12:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//    9   15:aload_0         
		//   10   16:aload           4
		//   11   18:putfield        #46  <Field Interpolator mInterpolator>
			mChanged = true;
		//   12   21:aload_0         
		//   13   22:iconst_1        
		//   14   23:putfield        #36  <Field boolean mChanged>
		//   15   26:return          
		}

		public static final int UNDEFINED_DURATION = 0x80000000;
		private boolean mChanged;
		private int mConsecutiveUpdates;
		private int mDuration;
		private int mDx;
		private int mDy;
		private Interpolator mInterpolator;
		private int mJumpToPosition;

		public SmoothScroller.Action(int i, int j)
		{
			this(i, j, 0x80000000, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:ldc1            #13  <Int 0x80000000>
		//    4    5:aconst_null     
		//    5    6:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    9:return          
		}

		public SmoothScroller.Action(int i, int j, int k)
		{
			this(i, j, k, ((Interpolator) (null)));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:aconst_null     
		//    5    5:invokespecial   #27  <Method void RecyclerView$SmoothScroller$Action(int, int, int, Interpolator)>
		//    6    8:return          
		}

		public SmoothScroller.Action(int i, int j, int k, Interpolator interpolator)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #32  <Method void Object()>
			mJumpToPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #34  <Field int mJumpToPosition>
			mChanged = false;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #36  <Field boolean mChanged>
			mConsecutiveUpdates = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #38  <Field int mConsecutiveUpdates>
			mDx = i;
		//   11   19:aload_0         
		//   12   20:iload_1         
		//   13   21:putfield        #40  <Field int mDx>
			mDy = j;
		//   14   24:aload_0         
		//   15   25:iload_2         
		//   16   26:putfield        #42  <Field int mDy>
			mDuration = k;
		//   17   29:aload_0         
		//   18   30:iload_3         
		//   19   31:putfield        #44  <Field int mDuration>
			mInterpolator = interpolator;
		//   20   34:aload_0         
		//   21   35:aload           4
		//   22   37:putfield        #46  <Field Interpolator mInterpolator>
		//   23   40:return          
		}
	}

	public static interface SmoothScroller.ScrollVectorProvider
	{

		public abstract PointF computeScrollVectorForPosition(int i);
	}

	public static class State
	{

		void assertLayoutStep(int i)
		{
			if((mLayoutStep & i) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #50  <Field int mLayoutStep>
		//*   2    4:iload_1         
		//*   3    5:iand            
		//*   4    6:ifne            54
				throw new IllegalStateException((new StringBuilder()).append("Layout state should be one of ").append(Integer.toBinaryString(i)).append(" but it is ").append(Integer.toBinaryString(mLayoutStep)).toString());
		//    5    9:new             #71  <Class IllegalStateException>
		//    6   12:dup             
		//    7   13:new             #73  <Class StringBuilder>
		//    8   16:dup             
		//    9   17:invokespecial   #74  <Method void StringBuilder()>
		//   10   20:ldc1            #76  <String "Layout state should be one of ">
		//   11   22:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   12   25:iload_1         
		//   13   26:invokestatic    #86  <Method String Integer.toBinaryString(int)>
		//   14   29:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   15   32:ldc1            #88  <String " but it is ">
		//   16   34:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   17   37:aload_0         
		//   18   38:getfield        #50  <Field int mLayoutStep>
		//   19   41:invokestatic    #86  <Method String Integer.toBinaryString(int)>
		//   20   44:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   21   47:invokevirtual   #92  <Method String StringBuilder.toString()>
		//   22   50:invokespecial   #95  <Method void IllegalStateException(String)>
		//   23   53:athrow          
			else
				return;
		//   24   54:return          
		}

		public boolean didStructureChange()
		{
			return mStructureChanged;
		//    0    0:aload_0         
		//    1    1:getfield        #54  <Field boolean mStructureChanged>
		//    2    4:ireturn         
		}

		public Object get(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       9
				return ((Object) (null));
		//    3    7:aconst_null     
		//    4    8:areturn         
			else
				return mData.get(i);
		//    5    9:aload_0         
		//    6   10:getfield        #101 <Field SparseArray mData>
		//    7   13:iload_1         
		//    8   14:invokevirtual   #105 <Method Object SparseArray.get(int)>
		//    9   17:areturn         
		}

		public int getItemCount()
		{
			if(mInPreLayout)
		//*   0    0:aload_0         
		//*   1    1:getfield        #56  <Field boolean mInPreLayout>
		//*   2    4:ifeq            17
				return mPreviousLayoutItemCount - mDeletedInvisibleItemCountSincePreviousLayout;
		//    3    7:aload_0         
		//    4    8:getfield        #46  <Field int mPreviousLayoutItemCount>
		//    5   11:aload_0         
		//    6   12:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//    7   15:isub            
		//    8   16:ireturn         
			else
				return mItemCount;
		//    9   17:aload_0         
		//   10   18:getfield        #52  <Field int mItemCount>
		//   11   21:ireturn         
		}

		public int getRemainingScrollHorizontal()
		{
			return mRemainingScrollHorizontal;
		//    0    0:aload_0         
		//    1    1:getfield        #112 <Field int mRemainingScrollHorizontal>
		//    2    4:ireturn         
		}

		public int getRemainingScrollVertical()
		{
			return mRemainingScrollVertical;
		//    0    0:aload_0         
		//    1    1:getfield        #115 <Field int mRemainingScrollVertical>
		//    2    4:ireturn         
		}

		public int getTargetScrollPosition()
		{
			return mTargetPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:ireturn         
		}

		public boolean hasTargetScrollPosition()
		{
			return mTargetPosition != -1;
		//    0    0:aload_0         
		//    1    1:getfield        #44  <Field int mTargetPosition>
		//    2    4:iconst_m1       
		//    3    5:icmpeq          10
		//    4    8:iconst_1        
		//    5    9:ireturn         
		//    6   10:iconst_0        
		//    7   11:ireturn         
		}

		public boolean isMeasuring()
		{
			return mIsMeasuring;
		//    0    0:aload_0         
		//    1    1:getfield        #60  <Field boolean mIsMeasuring>
		//    2    4:ireturn         
		}

		public boolean isPreLayout()
		{
			return mInPreLayout;
		//    0    0:aload_0         
		//    1    1:getfield        #56  <Field boolean mInPreLayout>
		//    2    4:ireturn         
		}

		void prepareForNestedPrefetch(Adapter adapter)
		{
			mLayoutStep = 1;
		//    0    0:aload_0         
		//    1    1:iconst_1        
		//    2    2:putfield        #50  <Field int mLayoutStep>
			mItemCount = adapter.getItemCount();
		//    3    5:aload_0         
		//    4    6:aload_1         
		//    5    7:invokevirtual   #125 <Method int RecyclerView$Adapter.getItemCount()>
		//    6   10:putfield        #52  <Field int mItemCount>
			mInPreLayout = false;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   10   18:aload_0         
		//   11   19:iconst_0        
		//   12   20:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   13   23:aload_0         
		//   14   24:iconst_0        
		//   15   25:putfield        #60  <Field boolean mIsMeasuring>
		//   16   28:return          
		}

		public void put(int i, Object obj)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       18
				mData = new SparseArray();
		//    3    7:aload_0         
		//    4    8:new             #103 <Class SparseArray>
		//    5   11:dup             
		//    6   12:invokespecial   #128 <Method void SparseArray()>
		//    7   15:putfield        #101 <Field SparseArray mData>
			mData.put(i, obj);
		//    8   18:aload_0         
		//    9   19:getfield        #101 <Field SparseArray mData>
		//   10   22:iload_1         
		//   11   23:aload_2         
		//   12   24:invokevirtual   #130 <Method void SparseArray.put(int, Object)>
		//   13   27:return          
		}

		public void remove(int i)
		{
			if(mData == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #101 <Field SparseArray mData>
		//*   2    4:ifnonnull       8
			{
				return;
		//    3    7:return          
			} else
			{
				mData.remove(i);
		//    4    8:aload_0         
		//    5    9:getfield        #101 <Field SparseArray mData>
		//    6   12:iload_1         
		//    7   13:invokevirtual   #133 <Method void SparseArray.remove(int)>
				return;
		//    8   16:return          
			}
		}

		State reset()
		{
			mTargetPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #44  <Field int mTargetPosition>
			if(mData != null)
		//*   3    5:aload_0         
		//*   4    6:getfield        #101 <Field SparseArray mData>
		//*   5    9:ifnull          19
				mData.clear();
		//    6   12:aload_0         
		//    7   13:getfield        #101 <Field SparseArray mData>
		//    8   16:invokevirtual   #138 <Method void SparseArray.clear()>
			mItemCount = 0;
		//    9   19:aload_0         
		//   10   20:iconst_0        
		//   11   21:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   12   24:aload_0         
		//   13   25:iconst_0        
		//   14   26:putfield        #54  <Field boolean mStructureChanged>
			mIsMeasuring = false;
		//   15   29:aload_0         
		//   16   30:iconst_0        
		//   17   31:putfield        #60  <Field boolean mIsMeasuring>
			return this;
		//   18   34:aload_0         
		//   19   35:areturn         
		}

		public String toString()
		{
			return (new StringBuilder()).append("State{mTargetPosition=").append(mTargetPosition).append(", mData=").append(((Object) (mData))).append(", mItemCount=").append(mItemCount).append(", mPreviousLayoutItemCount=").append(mPreviousLayoutItemCount).append(", mDeletedInvisibleItemCountSincePreviousLayout=").append(mDeletedInvisibleItemCountSincePreviousLayout).append(", mStructureChanged=").append(mStructureChanged).append(", mInPreLayout=").append(mInPreLayout).append(", mRunSimpleAnimations=").append(mRunSimpleAnimations).append(", mRunPredictiveAnimations=").append(mRunPredictiveAnimations).append('}').toString();
		//    0    0:new             #73  <Class StringBuilder>
		//    1    3:dup             
		//    2    4:invokespecial   #74  <Method void StringBuilder()>
		//    3    7:ldc1            #140 <String "State{mTargetPosition=">
		//    4    9:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//    5   12:aload_0         
		//    6   13:getfield        #44  <Field int mTargetPosition>
		//    7   16:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//    8   19:ldc1            #145 <String ", mData=">
		//    9   21:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   10   24:aload_0         
		//   11   25:getfield        #101 <Field SparseArray mData>
		//   12   28:invokevirtual   #148 <Method StringBuilder StringBuilder.append(Object)>
		//   13   31:ldc1            #150 <String ", mItemCount=">
		//   14   33:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   15   36:aload_0         
		//   16   37:getfield        #52  <Field int mItemCount>
		//   17   40:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   18   43:ldc1            #152 <String ", mPreviousLayoutItemCount=">
		//   19   45:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   20   48:aload_0         
		//   21   49:getfield        #46  <Field int mPreviousLayoutItemCount>
		//   22   52:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   23   55:ldc1            #154 <String ", mDeletedInvisibleItemCountSincePreviousLayout=">
		//   24   57:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   25   60:aload_0         
		//   26   61:getfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
		//   27   64:invokevirtual   #143 <Method StringBuilder StringBuilder.append(int)>
		//   28   67:ldc1            #156 <String ", mStructureChanged=">
		//   29   69:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   30   72:aload_0         
		//   31   73:getfield        #54  <Field boolean mStructureChanged>
		//   32   76:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   33   79:ldc1            #161 <String ", mInPreLayout=">
		//   34   81:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   35   84:aload_0         
		//   36   85:getfield        #56  <Field boolean mInPreLayout>
		//   37   88:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   38   91:ldc1            #163 <String ", mRunSimpleAnimations=">
		//   39   93:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   40   96:aload_0         
		//   41   97:getfield        #62  <Field boolean mRunSimpleAnimations>
		//   42  100:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   43  103:ldc1            #165 <String ", mRunPredictiveAnimations=">
		//   44  105:invokevirtual   #80  <Method StringBuilder StringBuilder.append(String)>
		//   45  108:aload_0         
		//   46  109:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//   47  112:invokevirtual   #159 <Method StringBuilder StringBuilder.append(boolean)>
		//   48  115:bipush          125
		//   49  117:invokevirtual   #168 <Method StringBuilder StringBuilder.append(char)>
		//   50  120:invokevirtual   #92  <Method String StringBuilder.toString()>
		//   51  123:areturn         
		}

		public boolean willRunPredictiveAnimations()
		{
			return mRunPredictiveAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #64  <Field boolean mRunPredictiveAnimations>
		//    2    4:ireturn         
		}

		public boolean willRunSimpleAnimations()
		{
			return mRunSimpleAnimations;
		//    0    0:aload_0         
		//    1    1:getfield        #62  <Field boolean mRunSimpleAnimations>
		//    2    4:ireturn         
		}

		static final int STEP_ANIMATIONS = 4;
		static final int STEP_LAYOUT = 2;
		static final int STEP_START = 1;
		private SparseArray mData;
		int mDeletedInvisibleItemCountSincePreviousLayout;
		long mFocusedItemId;
		int mFocusedItemPosition;
		int mFocusedSubChildId;
		boolean mInPreLayout;
		boolean mIsMeasuring;
		int mItemCount;
		int mLayoutStep;
		int mPreviousLayoutItemCount;
		int mRemainingScrollHorizontal;
		int mRemainingScrollVertical;
		boolean mRunPredictiveAnimations;
		boolean mRunSimpleAnimations;
		boolean mStructureChanged;
		private int mTargetPosition;
		boolean mTrackOldChangeHolders;


/*
		static int access$1302(State state, int i)
		{
			state.mTargetPosition = i;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #44  <Field int mTargetPosition>
			return i;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/

		public State()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #42  <Method void Object()>
			mTargetPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #44  <Field int mTargetPosition>
			mPreviousLayoutItemCount = 0;
		//    5    9:aload_0         
		//    6   10:iconst_0        
		//    7   11:putfield        #46  <Field int mPreviousLayoutItemCount>
			mDeletedInvisibleItemCountSincePreviousLayout = 0;
		//    8   14:aload_0         
		//    9   15:iconst_0        
		//   10   16:putfield        #48  <Field int mDeletedInvisibleItemCountSincePreviousLayout>
			mLayoutStep = 1;
		//   11   19:aload_0         
		//   12   20:iconst_1        
		//   13   21:putfield        #50  <Field int mLayoutStep>
			mItemCount = 0;
		//   14   24:aload_0         
		//   15   25:iconst_0        
		//   16   26:putfield        #52  <Field int mItemCount>
			mStructureChanged = false;
		//   17   29:aload_0         
		//   18   30:iconst_0        
		//   19   31:putfield        #54  <Field boolean mStructureChanged>
			mInPreLayout = false;
		//   20   34:aload_0         
		//   21   35:iconst_0        
		//   22   36:putfield        #56  <Field boolean mInPreLayout>
			mTrackOldChangeHolders = false;
		//   23   39:aload_0         
		//   24   40:iconst_0        
		//   25   41:putfield        #58  <Field boolean mTrackOldChangeHolders>
			mIsMeasuring = false;
		//   26   44:aload_0         
		//   27   45:iconst_0        
		//   28   46:putfield        #60  <Field boolean mIsMeasuring>
			mRunSimpleAnimations = false;
		//   29   49:aload_0         
		//   30   50:iconst_0        
		//   31   51:putfield        #62  <Field boolean mRunSimpleAnimations>
			mRunPredictiveAnimations = false;
		//   32   54:aload_0         
		//   33   55:iconst_0        
		//   34   56:putfield        #64  <Field boolean mRunPredictiveAnimations>
		//   35   59:return          
		}
	}

	static interface State.LayoutState
		extends Annotation
	{
	}

	public static abstract class ViewCacheExtension
	{

		public abstract View getViewForPositionAndType(Recycler recycler, int i, int j);

		public ViewCacheExtension()
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #11  <Method void Object()>
		//    2    4:return          
		}
	}

	class ViewFlinger
		implements Runnable
	{

		private int computeScrollDuration(int i, int j, int k, int l)
		{
			int i1 = Math.abs(i);
		//    0    0:iload_1         
		//    1    1:invokestatic    #59  <Method int Math.abs(int)>
		//    2    4:istore          9
			int j1 = Math.abs(j);
		//    3    6:iload_2         
		//    4    7:invokestatic    #59  <Method int Math.abs(int)>
		//    5   10:istore          10
			float f;
			float f1;
			float f2;
			boolean flag;
			if(i1 > j1)
		//*   6   12:iload           9
		//*   7   14:iload           10
		//*   8   16:icmple          134
				flag = true;
		//    9   19:iconst_1        
		//   10   20:istore          8
			else
		//*  11   22:iload_3         
		//*  12   23:iload_3         
		//*  13   24:imul            
		//*  14   25:iload           4
		//*  15   27:iload           4
		//*  16   29:imul            
		//*  17   30:iadd            
		//*  18   31:i2d             
		//*  19   32:invokestatic    #63  <Method double Math.sqrt(double)>
		//*  20   35:d2i             
		//*  21   36:istore_3        
		//*  22   37:iload_1         
		//*  23   38:iload_1         
		//*  24   39:imul            
		//*  25   40:iload_2         
		//*  26   41:iload_2         
		//*  27   42:imul            
		//*  28   43:iadd            
		//*  29   44:i2d             
		//*  30   45:invokestatic    #63  <Method double Math.sqrt(double)>
		//*  31   48:d2i             
		//*  32   49:istore_2        
		//*  33   50:iload           8
		//*  34   52:ifeq            140
		//*  35   55:aload_0         
		//*  36   56:getfield        #25  <Field RecyclerView this$0>
		//*  37   59:invokevirtual   #67  <Method int RecyclerView.getWidth()>
		//*  38   62:istore_1        
		//*  39   63:iload_1         
		//*  40   64:iconst_2        
		//*  41   65:idiv            
		//*  42   66:istore          4
		//*  43   68:fconst_1        
		//*  44   69:fconst_1        
		//*  45   70:iload_2         
		//*  46   71:i2f             
		//*  47   72:fmul            
		//*  48   73:iload_1         
		//*  49   74:i2f             
		//*  50   75:fdiv            
		//*  51   76:invokestatic    #71  <Method float Math.min(float, float)>
		//*  52   79:fstore          7
		//*  53   81:iload           4
		//*  54   83:i2f             
		//*  55   84:fstore          5
		//*  56   86:iload           4
		//*  57   88:i2f             
		//*  58   89:fstore          6
		//*  59   91:aload_0         
		//*  60   92:fload           7
		//*  61   94:invokespecial   #75  <Method float distanceInfluenceForSnapDuration(float)>
		//*  62   97:fstore          7
		//*  63   99:iload_3         
		//*  64  100:ifle            151
		//*  65  103:ldc1            #76  <Float 1000F>
		//*  66  105:fload           5
		//*  67  107:fload           6
		//*  68  109:fload           7
		//*  69  111:fmul            
		//*  70  112:fadd            
		//*  71  113:iload_3         
		//*  72  114:i2f             
		//*  73  115:fdiv            
		//*  74  116:invokestatic    #78  <Method float Math.abs(float)>
		//*  75  119:fmul            
		//*  76  120:invokestatic    #82  <Method int Math.round(float)>
		//*  77  123:iconst_4        
		//*  78  124:imul            
		//*  79  125:istore_1        
		//*  80  126:iload_1         
		//*  81  127:sipush          2000
		//*  82  130:invokestatic    #85  <Method int Math.min(int, int)>
		//*  83  133:ireturn         
				flag = false;
		//   84  134:iconst_0        
		//   85  135:istore          8
			k = (int)Math.sqrt(k * k + l * l);
			j = (int)Math.sqrt(i * i + j * j);
			if(flag)
				i = getWidth();
			else
		//*  86  137:goto            22
				i = getHeight();
		//   87  140:aload_0         
		//   88  141:getfield        #25  <Field RecyclerView this$0>
		//   89  144:invokevirtual   #88  <Method int RecyclerView.getHeight()>
		//   90  147:istore_1        
			l = i / 2;
			f2 = Math.min(1.0F, (1.0F * (float)j) / (float)i);
			f = l;
			f1 = l;
			f2 = distanceInfluenceForSnapDuration(f2);
			if(k > 0)
			{
				i = Math.round(1000F * Math.abs((f + f1 * f2) / (float)k)) * 4;
			} else
		//*  91  148:goto            63
			{
				if(flag)
		//*  92  151:iload           8
		//*  93  153:ifeq            174
					j = i1;
		//   94  156:iload           9
		//   95  158:istore_2        
				else
		//*  96  159:iload_2         
		//*  97  160:i2f             
		//*  98  161:iload_1         
		//*  99  162:i2f             
		//* 100  163:fdiv            
		//* 101  164:fconst_1        
		//* 102  165:fadd            
		//* 103  166:ldc1            #89  <Float 300F>
		//* 104  168:fmul            
		//* 105  169:f2i             
		//* 106  170:istore_1        
		//* 107  171:goto            126
					j = j1;
		//  108  174:iload           10
		//  109  176:istore_2        
				i = (int)(((float)j / (float)i + 1.0F) * 300F);
			}
			return Math.min(i, 2000);
		//* 110  177:goto            159
		}

		private void disableRunOnAnimationRequests()
		{
			mReSchedulePostAnimationCallback = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mEatRunOnAnimationRequest = true;
		//    3    5:aload_0         
		//    4    6:iconst_1        
		//    5    7:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//    6   10:return          
		}

		private float distanceInfluenceForSnapDuration(float f)
		{
			return (float)Math.sin((f - 0.5F) * 0.4712389F);
		//    0    0:fload_1         
		//    1    1:ldc1            #91  <Float 0.5F>
		//    2    3:fsub            
		//    3    4:ldc1            #92  <Float 0.4712389F>
		//    4    6:fmul            
		//    5    7:f2d             
		//    6    8:invokestatic    #95  <Method double Math.sin(double)>
		//    7   11:d2f             
		//    8   12:freturn         
		}

		private void enableRunOnAnimationRequests()
		{
			mEatRunOnAnimationRequest = false;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			if(mReSchedulePostAnimationCallback)
		//*   3    5:aload_0         
		//*   4    6:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//*   5    9:ifeq            16
				postOnAnimation();
		//    6   12:aload_0         
		//    7   13:invokevirtual   #99  <Method void postOnAnimation()>
		//    8   16:return          
		}

		public void fling(int i, int j)
		{
			setScrollState(2);
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:iconst_2        
		//    3    5:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//    4    8:aload_0         
		//    5    9:iconst_0        
		//    6   10:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//    7   13:aload_0         
		//    8   14:iconst_0        
		//    9   15:putfield        #109 <Field int mLastFlingX>
			mScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
		//   10   18:aload_0         
		//   11   19:getfield        #48  <Field OverScroller mScroller>
		//   12   22:iconst_0        
		//   13   23:iconst_0        
		//   14   24:iload_1         
		//   15   25:iload_2         
		//   16   26:ldc1            #110 <Int 0x80000000>
		//   17   28:ldc1            #111 <Int 0x7fffffff>
		//   18   30:ldc1            #110 <Int 0x80000000>
		//   19   32:ldc1            #111 <Int 0x7fffffff>
		//   20   34:invokevirtual   #114 <Method void OverScroller.fling(int, int, int, int, int, int, int, int)>
			postOnAnimation();
		//   21   37:aload_0         
		//   22   38:invokevirtual   #99  <Method void postOnAnimation()>
		//   23   41:return          
		}

		void postOnAnimation()
		{
			if(mEatRunOnAnimationRequest)
		//*   0    0:aload_0         
		//*   1    1:getfield        #35  <Field boolean mEatRunOnAnimationRequest>
		//*   2    4:ifeq            13
			{
				mReSchedulePostAnimationCallback = true;
		//    3    7:aload_0         
		//    4    8:iconst_1        
		//    5    9:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
				return;
		//    6   12:return          
			} else
			{
				removeCallbacks(((Runnable) (this)));
		//    7   13:aload_0         
		//    8   14:getfield        #25  <Field RecyclerView this$0>
		//    9   17:aload_0         
		//   10   18:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//   11   21:pop             
				ViewCompat.postOnAnimation(((View) (RecyclerView.this)), ((Runnable) (this)));
		//   12   22:aload_0         
		//   13   23:getfield        #25  <Field RecyclerView this$0>
		//   14   26:aload_0         
		//   15   27:invokestatic    #123 <Method void ViewCompat.postOnAnimation(View, Runnable)>
				return;
		//   16   30:return          
			}
		}

		public void run()
		{
			OverScroller overscroller;
			SmoothScroller smoothscroller;
			if(mLayout == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #25  <Field RecyclerView this$0>
		//*   2    4:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//*   3    7:ifnonnull       15
			{
				stop();
		//    4   10:aload_0         
		//    5   11:invokevirtual   #131 <Method void stop()>
				return;
		//    6   14:return          
			}
			disableRunOnAnimationRequests();
		//    7   15:aload_0         
		//    8   16:invokespecial   #133 <Method void disableRunOnAnimationRequests()>
			consumePendingUpdateOperations();
		//    9   19:aload_0         
		//   10   20:getfield        #25  <Field RecyclerView this$0>
		//   11   23:invokevirtual   #136 <Method void RecyclerView.consumePendingUpdateOperations()>
			overscroller = mScroller;
		//   12   26:aload_0         
		//   13   27:getfield        #48  <Field OverScroller mScroller>
		//   14   30:astore          13
			smoothscroller = mLayout.mSmoothScroller;
		//   15   32:aload_0         
		//   16   33:getfield        #25  <Field RecyclerView this$0>
		//   17   36:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//   18   39:getfield        #142 <Field RecyclerView$SmoothScroller RecyclerView$LayoutManager.mSmoothScroller>
		//   19   42:astore          14
			if(!overscroller.computeScrollOffset()) goto _L2; else goto _L1
		//   20   44:aload           13
		//   21   46:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   22   49:ifeq            742
_L1:
			int ai[] = mScrollConsumed;
		//   23   52:aload_0         
		//   24   53:getfield        #25  <Field RecyclerView this$0>
		//   25   56:invokestatic    #150 <Method int[] RecyclerView.access$500(RecyclerView)>
		//   26   59:astore          15
			int l2 = overscroller.getCurrX();
		//   27   61:aload           13
		//   28   63:invokevirtual   #153 <Method int OverScroller.getCurrX()>
		//   29   66:istore          11
			int i3 = overscroller.getCurrY();
		//   30   68:aload           13
		//   31   70:invokevirtual   #156 <Method int OverScroller.getCurrY()>
		//   32   73:istore          12
			int l1 = l2 - mLastFlingX;
		//   33   75:iload           11
		//   34   77:aload_0         
		//   35   78:getfield        #109 <Field int mLastFlingX>
		//   36   81:isub            
		//   37   82:istore          7
			int i = i3 - mLastFlingY;
		//   38   84:iload           12
		//   39   86:aload_0         
		//   40   87:getfield        #107 <Field int mLastFlingY>
		//   41   90:isub            
		//   42   91:istore_1        
			int i2 = 0;
		//   43   92:iconst_0        
		//   44   93:istore          8
			int l = 0;
		//   45   95:iconst_0        
		//   46   96:istore_3        
			mLastFlingX = l2;
		//   47   97:aload_0         
		//   48   98:iload           11
		//   49  100:putfield        #109 <Field int mLastFlingX>
			mLastFlingY = i3;
		//   50  103:aload_0         
		//   51  104:iload           12
		//   52  106:putfield        #107 <Field int mLastFlingY>
			int j2 = 0;
		//   53  109:iconst_0        
		//   54  110:istore          9
			int k = 0;
		//   55  112:iconst_0        
		//   56  113:istore_2        
			int k2 = 0;
		//   57  114:iconst_0        
		//   58  115:istore          10
			int i1 = 0;
		//   59  117:iconst_0        
		//   60  118:istore          4
			int k1 = l1;
		//   61  120:iload           7
		//   62  122:istore          6
			int j1 = i;
		//   63  124:iload_1         
		//   64  125:istore          5
			if(dispatchNestedPreScroll(l1, i, ai, ((int []) (null)), 1))
		//*  65  127:aload_0         
		//*  66  128:getfield        #25  <Field RecyclerView this$0>
		//*  67  131:iload           7
		//*  68  133:iload_1         
		//*  69  134:aload           15
		//*  70  136:aconst_null     
		//*  71  137:iconst_1        
		//*  72  138:invokevirtual   #160 <Method boolean RecyclerView.dispatchNestedPreScroll(int, int, int[], int[], int)>
		//*  73  141:ifeq            161
			{
				k1 = l1 - ai[0];
		//   74  144:iload           7
		//   75  146:aload           15
		//   76  148:iconst_0        
		//   77  149:iaload          
		//   78  150:isub            
		//   79  151:istore          6
				j1 = i - ai[1];
		//   80  153:iload_1         
		//   81  154:aload           15
		//   82  156:iconst_1        
		//   83  157:iaload          
		//   84  158:isub            
		//   85  159:istore          5
			}
			if(mAdapter != null)
		//*  86  161:aload_0         
		//*  87  162:getfield        #25  <Field RecyclerView this$0>
		//*  88  165:getfield        #164 <Field RecyclerView$Adapter RecyclerView.mAdapter>
		//*  89  168:ifnull          943
			{
				eatRequestLayout();
		//   90  171:aload_0         
		//   91  172:getfield        #25  <Field RecyclerView this$0>
		//   92  175:invokevirtual   #167 <Method void RecyclerView.eatRequestLayout()>
				onEnterLayoutOrScroll();
		//   93  178:aload_0         
		//   94  179:getfield        #25  <Field RecyclerView this$0>
		//   95  182:invokevirtual   #170 <Method void RecyclerView.onEnterLayoutOrScroll()>
				TraceCompat.beginSection("RV Scroll");
		//   96  185:ldc1            #172 <String "RV Scroll">
		//   97  187:invokestatic    #178 <Method void TraceCompat.beginSection(String)>
				fillRemainingScrollValues(mState);
		//   98  190:aload_0         
		//   99  191:getfield        #25  <Field RecyclerView this$0>
		//  100  194:aload_0         
		//  101  195:getfield        #25  <Field RecyclerView this$0>
		//  102  198:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  103  201:invokevirtual   #186 <Method void RecyclerView.fillRemainingScrollValues(RecyclerView$State)>
				int j;
				if(k1 != 0)
		//* 104  204:iload           6
		//* 105  206:ifeq            938
				{
					j = mLayout.scrollHorizontallyBy(k1, mRecycler, mState);
		//  106  209:aload_0         
		//  107  210:getfield        #25  <Field RecyclerView this$0>
		//  108  213:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//  109  216:iload           6
		//  110  218:aload_0         
		//  111  219:getfield        #25  <Field RecyclerView this$0>
		//  112  222:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//  113  225:aload_0         
		//  114  226:getfield        #25  <Field RecyclerView this$0>
		//  115  229:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//  116  232:invokevirtual   #194 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//  117  235:istore_1        
					k = k1 - j;
		//  118  236:iload           6
		//  119  238:iload_1         
		//  120  239:isub            
		//  121  240:istore_2        
				} else
		//* 122  241:iload           5
		//* 123  243:ifeq            279
		//* 124  246:aload_0         
		//* 125  247:getfield        #25  <Field RecyclerView this$0>
		//* 126  250:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 127  253:iload           5
		//* 128  255:aload_0         
		//* 129  256:getfield        #25  <Field RecyclerView this$0>
		//* 130  259:getfield        #190 <Field RecyclerView$Recycler RecyclerView.mRecycler>
		//* 131  262:aload_0         
		//* 132  263:getfield        #25  <Field RecyclerView this$0>
		//* 133  266:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//* 134  269:invokevirtual   #197 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
		//* 135  272:istore_3        
		//* 136  273:iload           5
		//* 137  275:iload_3         
		//* 138  276:isub            
		//* 139  277:istore          4
		//* 140  279:invokestatic    #200 <Method void TraceCompat.endSection()>
		//* 141  282:aload_0         
		//* 142  283:getfield        #25  <Field RecyclerView this$0>
		//* 143  286:invokevirtual   #203 <Method void RecyclerView.repositionShadowingViews()>
		//* 144  289:aload_0         
		//* 145  290:getfield        #25  <Field RecyclerView this$0>
		//* 146  293:invokevirtual   #206 <Method void RecyclerView.onExitLayoutOrScroll()>
		//* 147  296:aload_0         
		//* 148  297:getfield        #25  <Field RecyclerView this$0>
		//* 149  300:iconst_0        
		//* 150  301:invokevirtual   #210 <Method void RecyclerView.resumeRequestLayout(boolean)>
		//* 151  304:iload_1         
		//* 152  305:istore          7
		//* 153  307:iload_3         
		//* 154  308:istore          8
		//* 155  310:iload_2         
		//* 156  311:istore          9
		//* 157  313:iload           4
		//* 158  315:istore          10
		//* 159  317:aload           14
		//* 160  319:ifnull          399
		//* 161  322:iload_1         
		//* 162  323:istore          7
		//* 163  325:iload_3         
		//* 164  326:istore          8
		//* 165  328:iload_2         
		//* 166  329:istore          9
		//* 167  331:iload           4
		//* 168  333:istore          10
		//* 169  335:aload           14
		//* 170  337:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 171  340:ifne            399
		//* 172  343:iload_1         
		//* 173  344:istore          7
		//* 174  346:iload_3         
		//* 175  347:istore          8
		//* 176  349:iload_2         
		//* 177  350:istore          9
		//* 178  352:iload           4
		//* 179  354:istore          10
		//* 180  356:aload           14
		//* 181  358:invokevirtual   #218 <Method boolean RecyclerView$SmoothScroller.isRunning()>
		//* 182  361:ifeq            399
		//* 183  364:aload_0         
		//* 184  365:getfield        #25  <Field RecyclerView this$0>
		//* 185  368:getfield        #182 <Field RecyclerView$State RecyclerView.mState>
		//* 186  371:invokevirtual   #223 <Method int RecyclerView$State.getItemCount()>
		//* 187  374:istore          7
		//* 188  376:iload           7
		//* 189  378:ifne            779
		//* 190  381:aload           14
		//* 191  383:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
		//* 192  386:iload           4
		//* 193  388:istore          10
		//* 194  390:iload_2         
		//* 195  391:istore          9
		//* 196  393:iload_3         
		//* 197  394:istore          8
		//* 198  396:iload_1         
		//* 199  397:istore          7
		//* 200  399:aload_0         
		//* 201  400:getfield        #25  <Field RecyclerView this$0>
		//* 202  403:getfield        #228 <Field ArrayList RecyclerView.mItemDecorations>
		//* 203  406:invokevirtual   #233 <Method boolean ArrayList.isEmpty()>
		//* 204  409:ifne            419
		//* 205  412:aload_0         
		//* 206  413:getfield        #25  <Field RecyclerView this$0>
		//* 207  416:invokevirtual   #236 <Method void RecyclerView.invalidate()>
		//* 208  419:aload_0         
		//* 209  420:getfield        #25  <Field RecyclerView this$0>
		//* 210  423:invokevirtual   #239 <Method int RecyclerView.getOverScrollMode()>
		//* 211  426:iconst_2        
		//* 212  427:icmpeq          441
		//* 213  430:aload_0         
		//* 214  431:getfield        #25  <Field RecyclerView this$0>
		//* 215  434:iload           6
		//* 216  436:iload           5
		//* 217  438:invokevirtual   #242 <Method void RecyclerView.considerReleasingGlowsOnScroll(int, int)>
		//* 218  441:aload_0         
		//* 219  442:getfield        #25  <Field RecyclerView this$0>
		//* 220  445:iload           7
		//* 221  447:iload           8
		//* 222  449:iload           9
		//* 223  451:iload           10
		//* 224  453:aconst_null     
		//* 225  454:iconst_1        
		//* 226  455:invokevirtual   #246 <Method boolean RecyclerView.dispatchNestedScroll(int, int, int, int, int[], int)>
		//* 227  458:ifne            575
		//* 228  461:iload           9
		//* 229  463:ifne            471
		//* 230  466:iload           10
		//* 231  468:ifeq            575
		//* 232  471:aload           13
		//* 233  473:invokevirtual   #250 <Method float OverScroller.getCurrVelocity()>
		//* 234  476:f2i             
		//* 235  477:istore_3        
		//* 236  478:iconst_0        
		//* 237  479:istore_1        
		//* 238  480:iload           9
		//* 239  482:iload           11
		//* 240  484:icmpeq          495
		//* 241  487:iload           9
		//* 242  489:ifge            858
		//* 243  492:iload_3         
		//* 244  493:ineg            
		//* 245  494:istore_1        
		//* 246  495:iconst_0        
		//* 247  496:istore_2        
		//* 248  497:iload           10
		//* 249  499:iload           12
		//* 250  501:icmpeq          512
		//* 251  504:iload           10
		//* 252  506:ifge            873
		//* 253  509:iload_3         
		//* 254  510:ineg            
		//* 255  511:istore_2        
		//* 256  512:aload_0         
		//* 257  513:getfield        #25  <Field RecyclerView this$0>
		//* 258  516:invokevirtual   #239 <Method int RecyclerView.getOverScrollMode()>
		//* 259  519:iconst_2        
		//* 260  520:icmpeq          532
		//* 261  523:aload_0         
		//* 262  524:getfield        #25  <Field RecyclerView this$0>
		//* 263  527:iload_1         
		//* 264  528:iload_2         
		//* 265  529:invokevirtual   #253 <Method void RecyclerView.absorbGlows(int, int)>
		//* 266  532:iload_1         
		//* 267  533:ifne            551
		//* 268  536:iload           9
		//* 269  538:iload           11
		//* 270  540:icmpeq          551
		//* 271  543:aload           13
		//* 272  545:invokevirtual   #256 <Method int OverScroller.getFinalX()>
		//* 273  548:ifne            575
		//* 274  551:iload_2         
		//* 275  552:ifne            570
		//* 276  555:iload           10
		//* 277  557:iload           12
		//* 278  559:icmpeq          570
		//* 279  562:aload           13
		//* 280  564:invokevirtual   #259 <Method int OverScroller.getFinalY()>
		//* 281  567:ifne            575
		//* 282  570:aload           13
		//* 283  572:invokevirtual   #262 <Method void OverScroller.abortAnimation()>
		//* 284  575:iload           7
		//* 285  577:ifne            585
		//* 286  580:iload           8
		//* 287  582:ifeq            596
		//* 288  585:aload_0         
		//* 289  586:getfield        #25  <Field RecyclerView this$0>
		//* 290  589:iload           7
		//* 291  591:iload           8
		//* 292  593:invokevirtual   #265 <Method void RecyclerView.dispatchOnScrolled(int, int)>
		//* 293  596:aload_0         
		//* 294  597:getfield        #25  <Field RecyclerView this$0>
		//* 295  600:invokestatic    #269 <Method boolean RecyclerView.access$700(RecyclerView)>
		//* 296  603:ifne            613
		//* 297  606:aload_0         
		//* 298  607:getfield        #25  <Field RecyclerView this$0>
		//* 299  610:invokevirtual   #236 <Method void RecyclerView.invalidate()>
		//* 300  613:iload           5
		//* 301  615:ifeq            888
		//* 302  618:aload_0         
		//* 303  619:getfield        #25  <Field RecyclerView this$0>
		//* 304  622:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 305  625:invokevirtual   #272 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
		//* 306  628:ifeq            888
		//* 307  631:iload           8
		//* 308  633:iload           5
		//* 309  635:icmpne          888
		//* 310  638:iconst_1        
		//* 311  639:istore_1        
		//* 312  640:iload           6
		//* 313  642:ifeq            893
		//* 314  645:aload_0         
		//* 315  646:getfield        #25  <Field RecyclerView this$0>
		//* 316  649:getfield        #128 <Field RecyclerView$LayoutManager RecyclerView.mLayout>
		//* 317  652:invokevirtual   #275 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
		//* 318  655:ifeq            893
		//* 319  658:iload           7
		//* 320  660:iload           6
		//* 321  662:icmpne          893
		//* 322  665:iconst_1        
		//* 323  666:istore_2        
		//* 324  667:iload           6
		//* 325  669:ifne            677
		//* 326  672:iload           5
		//* 327  674:ifeq            685
		//* 328  677:iload_2         
		//* 329  678:ifne            685
		//* 330  681:iload_1         
		//* 331  682:ifeq            898
		//* 332  685:iconst_1        
		//* 333  686:istore_1        
		//* 334  687:aload           13
		//* 335  689:invokevirtual   #278 <Method boolean OverScroller.isFinished()>
		//* 336  692:ifne            710
		//* 337  695:iload_1         
		//* 338  696:ifne            903
		//* 339  699:aload_0         
		//* 340  700:getfield        #25  <Field RecyclerView this$0>
		//* 341  703:iconst_1        
		//* 342  704:invokevirtual   #282 <Method boolean RecyclerView.hasNestedScrollingParent(int)>
		//* 343  707:ifne            903
		//* 344  710:aload_0         
		//* 345  711:getfield        #25  <Field RecyclerView this$0>
		//* 346  714:iconst_0        
		//* 347  715:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
		//* 348  718:invokestatic    #285 <Method boolean RecyclerView.access$800()>
		//* 349  721:ifeq            734
		//* 350  724:aload_0         
		//* 351  725:getfield        #25  <Field RecyclerView this$0>
		//* 352  728:getfield        #289 <Field GapWorker$LayoutPrefetchRegistryImpl RecyclerView.mPrefetchRegistry>
		//* 353  731:invokevirtual   #294 <Method void GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions()>
		//* 354  734:aload_0         
		//* 355  735:getfield        #25  <Field RecyclerView this$0>
		//* 356  738:iconst_1        
		//* 357  739:invokevirtual   #297 <Method void RecyclerView.stopNestedScroll(int)>
		//* 358  742:aload           14
		//* 359  744:ifnull          774
		//* 360  747:aload           14
		//* 361  749:invokevirtual   #215 <Method boolean RecyclerView$SmoothScroller.isPendingInitialRun()>
		//* 362  752:ifeq            762
		//* 363  755:aload           14
		//* 364  757:iconst_0        
		//* 365  758:iconst_0        
		//* 366  759:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 367  762:aload_0         
		//* 368  763:getfield        #37  <Field boolean mReSchedulePostAnimationCallback>
		//* 369  766:ifne            774
		//* 370  769:aload           14
		//* 371  771:invokevirtual   #224 <Method void RecyclerView$SmoothScroller.stop()>
		//* 372  774:aload_0         
		//* 373  775:invokespecial   #303 <Method void enableRunOnAnimationRequests()>
		//* 374  778:return          
		//* 375  779:aload           14
		//* 376  781:invokevirtual   #306 <Method int RecyclerView$SmoothScroller.getTargetPosition()>
		//* 377  784:iload           7
		//* 378  786:icmplt          828
		//* 379  789:aload           14
		//* 380  791:iload           7
		//* 381  793:iconst_1        
		//* 382  794:isub            
		//* 383  795:invokevirtual   #309 <Method void RecyclerView$SmoothScroller.setTargetPosition(int)>
		//* 384  798:aload           14
		//* 385  800:iload           6
		//* 386  802:iload_2         
		//* 387  803:isub            
		//* 388  804:iload           5
		//* 389  806:iload           4
		//* 390  808:isub            
		//* 391  809:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 392  812:iload_1         
		//* 393  813:istore          7
		//* 394  815:iload_3         
		//* 395  816:istore          8
		//* 396  818:iload_2         
		//* 397  819:istore          9
		//* 398  821:iload           4
		//* 399  823:istore          10
		//* 400  825:goto            399
		//* 401  828:aload           14
		//* 402  830:iload           6
		//* 403  832:iload_2         
		//* 404  833:isub            
		//* 405  834:iload           5
		//* 406  836:iload           4
		//* 407  838:isub            
		//* 408  839:invokestatic    #301 <Method void RecyclerView$SmoothScroller.access$600(RecyclerView$SmoothScroller, int, int)>
		//* 409  842:iload_1         
		//* 410  843:istore          7
		//* 411  845:iload_3         
		//* 412  846:istore          8
		//* 413  848:iload_2         
		//* 414  849:istore          9
		//* 415  851:iload           4
		//* 416  853:istore          10
		//* 417  855:goto            399
		//* 418  858:iload           9
		//* 419  860:ifle            868
		//* 420  863:iload_3         
		//* 421  864:istore_1        
		//* 422  865:goto            495
		//* 423  868:iconst_0        
		//* 424  869:istore_1        
		//* 425  870:goto            495
		//* 426  873:iload           10
		//* 427  875:ifle            883
		//* 428  878:iload_3         
		//* 429  879:istore_2        
		//* 430  880:goto            512
		//* 431  883:iconst_0        
		//* 432  884:istore_2        
		//* 433  885:goto            512
		//* 434  888:iconst_0        
		//* 435  889:istore_1        
		//* 436  890:goto            640
		//* 437  893:iconst_0        
		//* 438  894:istore_2        
		//* 439  895:goto            667
		//* 440  898:iconst_0        
		//* 441  899:istore_1        
		//* 442  900:goto            687
		//* 443  903:aload_0         
		//* 444  904:invokevirtual   #99  <Method void postOnAnimation()>
		//* 445  907:aload_0         
		//* 446  908:getfield        #25  <Field RecyclerView this$0>
		//* 447  911:getfield        #313 <Field GapWorker RecyclerView.mGapWorker>
		//* 448  914:ifnull          742
		//* 449  917:aload_0         
		//* 450  918:getfield        #25  <Field RecyclerView this$0>
		//* 451  921:getfield        #313 <Field GapWorker RecyclerView.mGapWorker>
		//* 452  924:aload_0         
		//* 453  925:getfield        #25  <Field RecyclerView this$0>
		//* 454  928:iload           6
		//* 455  930:iload           5
		//* 456  932:invokevirtual   #319 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
		//* 457  935:goto            742
				{
					j = 0;
		//  458  938:iconst_0        
		//  459  939:istore_1        
				}
				if(j1 != 0)
				{
					l = mLayout.scrollVerticallyBy(j1, mRecycler, mState);
					i1 = j1 - l;
				}
				TraceCompat.endSection();
				repositionShadowingViews();
				onExitLayoutOrScroll();
				resumeRequestLayout(false);
				l1 = j;
				i2 = l;
				j2 = k;
				k2 = i1;
				if(smoothscroller != null)
				{
					l1 = j;
					i2 = l;
					j2 = k;
					k2 = i1;
					if(!smoothscroller.isPendingInitialRun())
					{
						l1 = j;
						i2 = l;
						j2 = k;
						k2 = i1;
						if(smoothscroller.isRunning())
						{
							l1 = mState.getItemCount();
							if(l1 == 0)
							{
								smoothscroller.stop();
								k2 = i1;
								j2 = k;
								i2 = l;
								l1 = j;
							} else
							if(smoothscroller.getTargetPosition() >= l1)
							{
								smoothscroller.setTargetPosition(l1 - 1);
								smoothscroller.onAnimation(k1 - k, j1 - i1);
								l1 = j;
								i2 = l;
								j2 = k;
								k2 = i1;
							} else
							{
								smoothscroller.onAnimation(k1 - k, j1 - i1);
								l1 = j;
								i2 = l;
								j2 = k;
								k2 = i1;
							}
						}
					}
				}
			} else
		//* 460  940:goto            241
			{
				l1 = 0;
		//  461  943:iconst_0        
		//  462  944:istore          7
			}
			if(!mItemDecorations.isEmpty())
				invalidate();
			if(getOverScrollMode() != 2)
				considerReleasingGlowsOnScroll(k1, j1);
			if(!dispatchNestedScroll(l1, i2, j2, k2, ((int []) (null)), 1) && (j2 != 0 || k2 != 0))
			{
				l = (int)overscroller.getCurrVelocity();
				j = 0;
				if(j2 != l2)
					if(j2 < 0)
						j = -l;
					else
					if(j2 > 0)
						j = l;
					else
						j = 0;
				k = 0;
				if(k2 != i3)
					if(k2 < 0)
						k = -l;
					else
					if(k2 > 0)
						k = l;
					else
						k = 0;
				if(getOverScrollMode() != 2)
					absorbGlows(j, k);
				if((j != 0 || j2 == l2 || overscroller.getFinalX() == 0) && (k != 0 || k2 == i3 || overscroller.getFinalY() == 0))
					overscroller.abortAnimation();
			}
			if(l1 != 0 || i2 != 0)
				dispatchOnScrolled(l1, i2);
			if(!awakenScrollBars())
				invalidate();
			if(j1 != 0 && mLayout.canScrollVertically() && i2 == j1)
				j = 1;
			else
				j = 0;
			if(k1 != 0 && mLayout.canScrollHorizontally() && l1 == k1)
				k = 1;
			else
				k = 0;
			if(k1 == 0 && j1 == 0 || k != 0 || j != 0)
				j = 1;
			else
				j = 0;
			if(!overscroller.isFinished() && (j != 0 || hasNestedScrollingParent(1))) goto _L4; else goto _L3
_L3:
			setScrollState(0);
			if(RecyclerView.ALLOW_THREAD_GAP_WORK)
				mPrefetchRegistry.clearPrefetchPositions();
			stopNestedScroll(1);
_L2:
			if(smoothscroller != null)
			{
				if(smoothscroller.isPendingInitialRun())
					smoothscroller.onAnimation(0, 0);
				if(!mReSchedulePostAnimationCallback)
					smoothscroller.stop();
			}
			enableRunOnAnimationRequests();
			return;
_L4:
			postOnAnimation();
			if(mGapWorker != null)
				mGapWorker.postFromTraversal(RecyclerView.this, k1, j1);
			if(true) goto _L2; else goto _L5
_L5:
		//* 463  946:goto            399
		}

		public void smoothScrollBy(int i, int j)
		{
			smoothScrollBy(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokevirtual   #323 <Method void smoothScrollBy(int, int, int, int)>
		//    6    8:return          
		}

		public void smoothScrollBy(int i, int j, int k)
		{
			smoothScrollBy(i, j, k, RecyclerView.sQuinticInterpolator);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iload_3         
		//    4    4:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    5    7:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//    6   10:return          
		}

		public void smoothScrollBy(int i, int j, int k, int l)
		{
			smoothScrollBy(i, j, computeScrollDuration(i, j, k, l));
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:aload_0         
		//    4    4:iload_1         
		//    5    5:iload_2         
		//    6    6:iload_3         
		//    7    7:iload           4
		//    8    9:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    9   12:invokevirtual   #331 <Method void smoothScrollBy(int, int, int)>
		//   10   15:return          
		}

		public void smoothScrollBy(int i, int j, int k, Interpolator interpolator)
		{
			if(mInterpolator != interpolator)
		//*   0    0:aload_0         
		//*   1    1:getfield        #33  <Field Interpolator mInterpolator>
		//*   2    4:aload           4
		//*   3    6:if_acmpeq       35
			{
				mInterpolator = interpolator;
		//    4    9:aload_0         
		//    5   10:aload           4
		//    6   12:putfield        #33  <Field Interpolator mInterpolator>
				mScroller = new OverScroller(getContext(), interpolator);
		//    7   15:aload_0         
		//    8   16:new             #39  <Class OverScroller>
		//    9   19:dup             
		//   10   20:aload_0         
		//   11   21:getfield        #25  <Field RecyclerView this$0>
		//   12   24:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   13   27:aload           4
		//   14   29:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   15   32:putfield        #48  <Field OverScroller mScroller>
			}
			setScrollState(2);
		//   16   35:aload_0         
		//   17   36:getfield        #25  <Field RecyclerView this$0>
		//   18   39:iconst_2        
		//   19   40:invokevirtual   #105 <Method void RecyclerView.setScrollState(int)>
			mLastFlingY = 0;
		//   20   43:aload_0         
		//   21   44:iconst_0        
		//   22   45:putfield        #107 <Field int mLastFlingY>
			mLastFlingX = 0;
		//   23   48:aload_0         
		//   24   49:iconst_0        
		//   25   50:putfield        #109 <Field int mLastFlingX>
			mScroller.startScroll(0, 0, i, j, k);
		//   26   53:aload_0         
		//   27   54:getfield        #48  <Field OverScroller mScroller>
		//   28   57:iconst_0        
		//   29   58:iconst_0        
		//   30   59:iload_1         
		//   31   60:iload_2         
		//   32   61:iload_3         
		//   33   62:invokevirtual   #335 <Method void OverScroller.startScroll(int, int, int, int, int)>
			if(android.os.Build.VERSION.SDK_INT < 23)
		//*  34   65:getstatic       #340 <Field int android.os.Build$VERSION.SDK_INT>
		//*  35   68:bipush          23
		//*  36   70:icmpge          81
				mScroller.computeScrollOffset();
		//   37   73:aload_0         
		//   38   74:getfield        #48  <Field OverScroller mScroller>
		//   39   77:invokevirtual   #146 <Method boolean OverScroller.computeScrollOffset()>
		//   40   80:pop             
			postOnAnimation();
		//   41   81:aload_0         
		//   42   82:invokevirtual   #99  <Method void postOnAnimation()>
		//   43   85:return          
		}

		public void smoothScrollBy(int i, int j, Interpolator interpolator)
		{
			int k = computeScrollDuration(i, j, 0, 0);
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:iload_2         
		//    3    3:iconst_0        
		//    4    4:iconst_0        
		//    5    5:invokespecial   #329 <Method int computeScrollDuration(int, int, int, int)>
		//    6    8:istore          4
			Interpolator interpolator1 = interpolator;
		//    7   10:aload_3         
		//    8   11:astore          5
			if(interpolator == null)
		//*   9   13:aload_3         
		//*  10   14:ifnonnull       22
				interpolator1 = RecyclerView.sQuinticInterpolator;
		//   11   17:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   12   20:astore          5
			smoothScrollBy(i, j, k, interpolator1);
		//   13   22:aload_0         
		//   14   23:iload_1         
		//   15   24:iload_2         
		//   16   25:iload           4
		//   17   27:aload           5
		//   18   29:invokevirtual   #327 <Method void smoothScrollBy(int, int, int, Interpolator)>
		//   19   32:return          
		}

		public void stop()
		{
			removeCallbacks(((Runnable) (this)));
		//    0    0:aload_0         
		//    1    1:getfield        #25  <Field RecyclerView this$0>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #118 <Method boolean RecyclerView.removeCallbacks(Runnable)>
		//    4    8:pop             
			mScroller.abortAnimation();
		//    5    9:aload_0         
		//    6   10:getfield        #48  <Field OverScroller mScroller>
		//    7   13:invokevirtual   #262 <Method void OverScroller.abortAnimation()>
		//    8   16:return          
		}

		private boolean mEatRunOnAnimationRequest;
		Interpolator mInterpolator;
		private int mLastFlingX;
		private int mLastFlingY;
		private boolean mReSchedulePostAnimationCallback;
		private OverScroller mScroller;
		final RecyclerView this$0;


/*
		static OverScroller access$400(ViewFlinger viewflinger)
		{
			return viewflinger.mScroller;
		//    0    0:aload_0         
		//    1    1:getfield        #48  <Field OverScroller mScroller>
		//    2    4:areturn         
		}

*/

		ViewFlinger()
		{
			this$0 = RecyclerView.this;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #25  <Field RecyclerView this$0>
			super();
		//    3    5:aload_0         
		//    4    6:invokespecial   #28  <Method void Object()>
			mInterpolator = RecyclerView.sQuinticInterpolator;
		//    5    9:aload_0         
		//    6   10:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//    7   13:putfield        #33  <Field Interpolator mInterpolator>
			mEatRunOnAnimationRequest = false;
		//    8   16:aload_0         
		//    9   17:iconst_0        
		//   10   18:putfield        #35  <Field boolean mEatRunOnAnimationRequest>
			mReSchedulePostAnimationCallback = false;
		//   11   21:aload_0         
		//   12   22:iconst_0        
		//   13   23:putfield        #37  <Field boolean mReSchedulePostAnimationCallback>
			mScroller = new OverScroller(getContext(), RecyclerView.sQuinticInterpolator);
		//   14   26:aload_0         
		//   15   27:new             #39  <Class OverScroller>
		//   16   30:dup             
		//   17   31:aload_1         
		//   18   32:invokevirtual   #43  <Method Context RecyclerView.getContext()>
		//   19   35:getstatic       #31  <Field Interpolator RecyclerView.sQuinticInterpolator>
		//   20   38:invokespecial   #46  <Method void OverScroller(Context, Interpolator)>
		//   21   41:putfield        #48  <Field OverScroller mScroller>
		//   22   44:return          
		}
	}

	public static abstract class ViewHolder
	{

		private void createPayloadsIfNeeded()
		{
			if(mPayloads == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnonnull       29
			{
				mPayloads = ((List) (new ArrayList()));
		//    3    7:aload_0         
		//    4    8:new             #153 <Class ArrayList>
		//    5   11:dup             
		//    6   12:invokespecial   #154 <Method void ArrayList()>
		//    7   15:putfield        #100 <Field List mPayloads>
				mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
		//    8   18:aload_0         
		//    9   19:aload_0         
		//   10   20:getfield        #100 <Field List mPayloads>
		//   11   23:invokestatic    #158 <Method List Collections.unmodifiableList(List)>
		//   12   26:putfield        #102 <Field List mUnmodifiedPayloads>
			}
		//   13   29:return          
		}

		private boolean doesTransientStatePreventRecycling()
		{
			return (mFlags & 0x10) == 0 && ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifeq            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		private void onEnteredHiddenState(RecyclerView recyclerview)
		{
			mWasImportantForAccessibilityBeforeHidden = ViewCompat.getImportantForAccessibility(itemView);
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #121 <Field View itemView>
		//    3    5:invokestatic    #168 <Method int ViewCompat.getImportantForAccessibility(View)>
		//    4    8:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			recyclerview.setChildImportantForAccessibilityInternal(this, 4);
		//    5   11:aload_1         
		//    6   12:aload_0         
		//    7   13:iconst_4        
		//    8   14:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    9   17:pop             
		//   10   18:return          
		}

		private void onLeftHiddenState(RecyclerView recyclerview)
		{
			recyclerview.setChildImportantForAccessibilityInternal(this, mWasImportantForAccessibilityBeforeHidden);
		//    0    0:aload_1         
		//    1    1:aload_0         
		//    2    2:aload_0         
		//    3    3:getfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    4    6:invokevirtual   #172 <Method boolean RecyclerView.setChildImportantForAccessibilityInternal(RecyclerView$ViewHolder, int)>
		//    5    9:pop             
			mWasImportantForAccessibilityBeforeHidden = 0;
		//    6   10:aload_0         
		//    7   11:iconst_0        
		//    8   12:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
		//    9   15:return          
		}

		private boolean shouldBeKeptAsChild()
		{
			return (mFlags & 0x10) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		void addChangePayload(Object obj)
		{
			if(obj == null)
		//*   0    0:aload_1         
		//*   1    1:ifnonnull       12
				addFlags(1024);
		//    2    4:aload_0         
		//    3    5:sipush          1024
		//    4    8:invokevirtual   #178 <Method void addFlags(int)>
			else
		//*   5   11:return          
			if((mFlags & 0x400) == 0)
		//*   6   12:aload_0         
		//*   7   13:getfield        #136 <Field int mFlags>
		//*   8   16:sipush          1024
		//*   9   19:iand            
		//*  10   20:ifne            11
			{
				createPayloadsIfNeeded();
		//   11   23:aload_0         
		//   12   24:invokespecial   #180 <Method void createPayloadsIfNeeded()>
				mPayloads.add(obj);
		//   13   27:aload_0         
		//   14   28:getfield        #100 <Field List mPayloads>
		//   15   31:aload_1         
		//   16   32:invokeinterface #186 <Method boolean List.add(Object)>
		//   17   37:pop             
				return;
		//   18   38:return          
			}
		}

		void addFlags(int i)
		{
			mFlags = mFlags | i;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:iload_1         
		//    4    6:ior             
		//    5    7:putfield        #136 <Field int mFlags>
		//    6   10:return          
		}

		void clearOldPosition()
		{
			mOldPosition = -1;
		//    0    0:aload_0         
		//    1    1:iconst_m1       
		//    2    2:putfield        #86  <Field int mOldPosition>
			mPreLayoutPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #94  <Field int mPreLayoutPosition>
		//    6   10:return          
		}

		void clearPayload()
		{
			if(mPayloads != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #100 <Field List mPayloads>
		//*   2    4:ifnull          16
				mPayloads.clear();
		//    3    7:aload_0         
		//    4    8:getfield        #100 <Field List mPayloads>
		//    5   11:invokeinterface #191 <Method void List.clear()>
			mFlags = mFlags & 0xfffffbff;
		//    6   16:aload_0         
		//    7   17:aload_0         
		//    8   18:getfield        #136 <Field int mFlags>
		//    9   21:sipush          -1025
		//   10   24:iand            
		//   11   25:putfield        #136 <Field int mFlags>
		//   12   28:return          
		}

		void clearReturnedFromScrapFlag()
		{
			mFlags = mFlags & 0xffffffdf;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:bipush          -33
		//    4    7:iand            
		//    5    8:putfield        #136 <Field int mFlags>
		//    6   11:return          
		}

		void clearTmpDetachFlag()
		{
			mFlags = mFlags & 0xfffffeff;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -257
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		void flagRemovedAndOffsetPosition(int i, int j, boolean flag)
		{
			addFlags(8);
		//    0    0:aload_0         
		//    1    1:bipush          8
		//    2    3:invokevirtual   #178 <Method void addFlags(int)>
			offsetPosition(j, flag);
		//    3    6:aload_0         
		//    4    7:iload_2         
		//    5    8:iload_3         
		//    6    9:invokevirtual   #199 <Method void offsetPosition(int, boolean)>
			mPosition = i;
		//    7   12:aload_0         
		//    8   13:iload_1         
		//    9   14:putfield        #84  <Field int mPosition>
		//   10   17:return          
		}

		public final int getAdapterPosition()
		{
			if(mOwnerRecyclerView == null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//*   2    4:ifnonnull       9
				return -1;
		//    3    7:iconst_m1       
		//    4    8:ireturn         
			else
				return mOwnerRecyclerView.getAdapterPositionFor(this);
		//    5    9:aload_0         
		//    6   10:getfield        #203 <Field RecyclerView mOwnerRecyclerView>
		//    7   13:aload_0         
		//    8   14:invokevirtual   #206 <Method int RecyclerView.getAdapterPositionFor(RecyclerView$ViewHolder)>
		//    9   17:ireturn         
		}

		public final long getItemId()
		{
			return mItemId;
		//    0    0:aload_0         
		//    1    1:getfield        #90  <Field long mItemId>
		//    2    4:lreturn         
		}

		public final int getItemViewType()
		{
			return mItemViewType;
		//    0    0:aload_0         
		//    1    1:getfield        #92  <Field int mItemViewType>
		//    2    4:ireturn         
		}

		public final int getLayoutPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		public final int getOldPosition()
		{
			return mOldPosition;
		//    0    0:aload_0         
		//    1    1:getfield        #86  <Field int mOldPosition>
		//    2    4:ireturn         
		}

		public final int getPosition()
		{
			if(mPreLayoutPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #94  <Field int mPreLayoutPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          13
				return mPosition;
		//    4    8:aload_0         
		//    5    9:getfield        #84  <Field int mPosition>
		//    6   12:ireturn         
			else
				return mPreLayoutPosition;
		//    7   13:aload_0         
		//    8   14:getfield        #94  <Field int mPreLayoutPosition>
		//    9   17:ireturn         
		}

		List getUnmodifiedPayloads()
		{
			if((mFlags & 0x400) == 0)
		//*   0    0:aload_0         
		//*   1    1:getfield        #136 <Field int mFlags>
		//*   2    4:sipush          1024
		//*   3    7:iand            
		//*   4    8:ifne            39
			{
				if(mPayloads == null || mPayloads.size() == 0)
		//*   5   11:aload_0         
		//*   6   12:getfield        #100 <Field List mPayloads>
		//*   7   15:ifnull          30
		//*   8   18:aload_0         
		//*   9   19:getfield        #100 <Field List mPayloads>
		//*  10   22:invokeinterface #219 <Method int List.size()>
		//*  11   27:ifne            34
					return FULLUPDATE_PAYLOADS;
		//   12   30:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   13   33:areturn         
				else
					return mUnmodifiedPayloads;
		//   14   34:aload_0         
		//   15   35:getfield        #102 <Field List mUnmodifiedPayloads>
		//   16   38:areturn         
			} else
			{
				return FULLUPDATE_PAYLOADS;
		//   17   39:getstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//   18   42:areturn         
			}
		}

		boolean hasAnyOfTheFlags(int i)
		{
			return (mFlags & i) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iload_1         
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isAdapterPositionUnknown()
		{
			return (mFlags & 0x200) != 0 || isInvalid();
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          512
		//    3    7:iand            
		//    4    8:ifne            18
		//    5   11:aload_0         
		//    6   12:invokevirtual   #227 <Method boolean isInvalid()>
		//    7   15:ifeq            20
		//    8   18:iconst_1        
		//    9   19:ireturn         
		//   10   20:iconst_0        
		//   11   21:ireturn         
		}

		boolean isBound()
		{
			return (mFlags & 1) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_1        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean isInvalid()
		{
			return (mFlags & 4) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_4        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		public final boolean isRecyclable()
		{
			return (mFlags & 0x10) == 0 && !ViewCompat.hasTransientState(itemView);
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          16
		//    3    6:iand            
		//    4    7:ifne            22
		//    5   10:aload_0         
		//    6   11:getfield        #121 <Field View itemView>
		//    7   14:invokestatic    #164 <Method boolean ViewCompat.hasTransientState(View)>
		//    8   17:ifne            22
		//    9   20:iconst_1        
		//   10   21:ireturn         
		//   11   22:iconst_0        
		//   12   23:ireturn         
		}

		boolean isRemoved()
		{
			return (mFlags & 8) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          8
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		boolean isScrap()
		{
			return mScrapContainer != null;
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:ifnull          9
		//    3    7:iconst_1        
		//    4    8:ireturn         
		//    5    9:iconst_0        
		//    6   10:ireturn         
		}

		boolean isTmpDetached()
		{
			return (mFlags & 0x100) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          256
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		boolean isUpdated()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		boolean needsUpdate()
		{
			return (mFlags & 2) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:iconst_2        
		//    3    5:iand            
		//    4    6:ifeq            11
		//    5    9:iconst_1        
		//    6   10:ireturn         
		//    7   11:iconst_0        
		//    8   12:ireturn         
		}

		void offsetPosition(int i, boolean flag)
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
			if(mPreLayoutPosition == -1)
		//*   8   16:aload_0         
		//*   9   17:getfield        #94  <Field int mPreLayoutPosition>
		//*  10   20:iconst_m1       
		//*  11   21:icmpne          32
				mPreLayoutPosition = mPosition;
		//   12   24:aload_0         
		//   13   25:aload_0         
		//   14   26:getfield        #84  <Field int mPosition>
		//   15   29:putfield        #94  <Field int mPreLayoutPosition>
			if(flag)
		//*  16   32:iload_2         
		//*  17   33:ifeq            46
				mPreLayoutPosition = mPreLayoutPosition + i;
		//   18   36:aload_0         
		//   19   37:aload_0         
		//   20   38:getfield        #94  <Field int mPreLayoutPosition>
		//   21   41:iload_1         
		//   22   42:iadd            
		//   23   43:putfield        #94  <Field int mPreLayoutPosition>
			mPosition = mPosition + i;
		//   24   46:aload_0         
		//   25   47:aload_0         
		//   26   48:getfield        #84  <Field int mPosition>
		//   27   51:iload_1         
		//   28   52:iadd            
		//   29   53:putfield        #84  <Field int mPosition>
			if(itemView.getLayoutParams() != null)
		//*  30   56:aload_0         
		//*  31   57:getfield        #121 <Field View itemView>
		//*  32   60:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//*  33   63:ifnull          80
				((LayoutParams)itemView.getLayoutParams()).mInsetsDirty = true;
		//   34   66:aload_0         
		//   35   67:getfield        #121 <Field View itemView>
		//   36   70:invokevirtual   #240 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//   37   73:checkcast       #242 <Class RecyclerView$LayoutParams>
		//   38   76:iconst_1        
		//   39   77:putfield        #245 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		//   40   80:return          
		}

		void resetInternal()
		{
			mFlags = 0;
		//    0    0:aload_0         
		//    1    1:iconst_0        
		//    2    2:putfield        #136 <Field int mFlags>
			mPosition = -1;
		//    3    5:aload_0         
		//    4    6:iconst_m1       
		//    5    7:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    6   10:aload_0         
		//    7   11:iconst_m1       
		//    8   12:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    9   15:aload_0         
		//   10   16:ldc2w           #87  <Long -1L>
		//   11   19:putfield        #90  <Field long mItemId>
			mPreLayoutPosition = -1;
		//   12   22:aload_0         
		//   13   23:iconst_m1       
		//   14   24:putfield        #94  <Field int mPreLayoutPosition>
			mIsRecyclableCount = 0;
		//   15   27:aload_0         
		//   16   28:iconst_0        
		//   17   29:putfield        #104 <Field int mIsRecyclableCount>
			mShadowedHolder = null;
		//   18   32:aload_0         
		//   19   33:aconst_null     
		//   20   34:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   21   37:aload_0         
		//   22   38:aconst_null     
		//   23   39:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			clearPayload();
		//   24   42:aload_0         
		//   25   43:invokevirtual   #248 <Method void clearPayload()>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   26   46:aload_0         
		//   27   47:iconst_0        
		//   28   48:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   29   51:aload_0         
		//   30   52:iconst_m1       
		//   31   53:putfield        #112 <Field int mPendingAccessibilityState>
			RecyclerView.clearNestedRecyclerViewIfNotNested(this);
		//   32   56:aload_0         
		//   33   57:invokestatic    #252 <Method void RecyclerView.clearNestedRecyclerViewIfNotNested(RecyclerView$ViewHolder)>
		//   34   60:return          
		}

		void saveOldPosition()
		{
			if(mOldPosition == -1)
		//*   0    0:aload_0         
		//*   1    1:getfield        #86  <Field int mOldPosition>
		//*   2    4:iconst_m1       
		//*   3    5:icmpne          16
				mOldPosition = mPosition;
		//    4    8:aload_0         
		//    5    9:aload_0         
		//    6   10:getfield        #84  <Field int mPosition>
		//    7   13:putfield        #86  <Field int mOldPosition>
		//    8   16:return          
		}

		void setFlags(int i, int j)
		{
			mFlags = mFlags & ~j | i & j;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:iload_2         
		//    4    6:iconst_m1       
		//    5    7:ixor            
		//    6    8:iand            
		//    7    9:iload_1         
		//    8   10:iload_2         
		//    9   11:iand            
		//   10   12:ior             
		//   11   13:putfield        #136 <Field int mFlags>
		//   12   16:return          
		}

		public final void setIsRecyclable(boolean flag)
		{
			int i;
			if(flag)
		//*   0    0:iload_1         
		//*   1    1:ifeq            56
				i = mIsRecyclableCount - 1;
		//    2    4:aload_0         
		//    3    5:getfield        #104 <Field int mIsRecyclableCount>
		//    4    8:iconst_1        
		//    5    9:isub            
		//    6   10:istore_2        
			else
		//*   7   11:aload_0         
		//*   8   12:iload_2         
		//*   9   13:putfield        #104 <Field int mIsRecyclableCount>
		//*  10   16:aload_0         
		//*  11   17:getfield        #104 <Field int mIsRecyclableCount>
		//*  12   20:ifge            66
		//*  13   23:aload_0         
		//*  14   24:iconst_0        
		//*  15   25:putfield        #104 <Field int mIsRecyclableCount>
		//*  16   28:ldc2            #259 <String "View">
		//*  17   31:new             #261 <Class StringBuilder>
		//*  18   34:dup             
		//*  19   35:invokespecial   #262 <Method void StringBuilder()>
		//*  20   38:ldc2            #264 <String "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ">
		//*  21   41:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  22   44:aload_0         
		//*  23   45:invokevirtual   #271 <Method StringBuilder StringBuilder.append(Object)>
		//*  24   48:invokevirtual   #275 <Method String StringBuilder.toString()>
		//*  25   51:invokestatic    #281 <Method int Log.e(String, String)>
		//*  26   54:pop             
		//*  27   55:return          
				i = mIsRecyclableCount + 1;
		//   28   56:aload_0         
		//   29   57:getfield        #104 <Field int mIsRecyclableCount>
		//   30   60:iconst_1        
		//   31   61:iadd            
		//   32   62:istore_2        
			mIsRecyclableCount = i;
			if(mIsRecyclableCount < 0)
			{
				mIsRecyclableCount = 0;
				Log.e("View", (new StringBuilder()).append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ").append(((Object) (this))).toString());
			} else
		//*  33   63:goto            11
			{
				if(!flag && mIsRecyclableCount == 1)
		//*  34   66:iload_1         
		//*  35   67:ifne            90
		//*  36   70:aload_0         
		//*  37   71:getfield        #104 <Field int mIsRecyclableCount>
		//*  38   74:iconst_1        
		//*  39   75:icmpne          90
				{
					mFlags = mFlags | 0x10;
		//   40   78:aload_0         
		//   41   79:aload_0         
		//   42   80:getfield        #136 <Field int mFlags>
		//   43   83:bipush          16
		//   44   85:ior             
		//   45   86:putfield        #136 <Field int mFlags>
					return;
		//   46   89:return          
				}
				if(flag && mIsRecyclableCount == 0)
		//*  47   90:iload_1         
		//*  48   91:ifeq            55
		//*  49   94:aload_0         
		//*  50   95:getfield        #104 <Field int mIsRecyclableCount>
		//*  51   98:ifne            55
				{
					mFlags = mFlags & 0xffffffef;
		//   52  101:aload_0         
		//   53  102:aload_0         
		//   54  103:getfield        #136 <Field int mFlags>
		//   55  106:bipush          -17
		//   56  108:iand            
		//   57  109:putfield        #136 <Field int mFlags>
					return;
		//   58  112:return          
				}
			}
		}

		void setScrapContainer(Recycler recycler, boolean flag)
		{
			mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = flag;
		//    3    5:aload_0         
		//    4    6:iload_2         
		//    5    7:putfield        #108 <Field boolean mInChangeScrap>
		//    6   10:return          
		}

		boolean shouldIgnore()
		{
			return (mFlags & 0x80) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:sipush          128
		//    3    7:iand            
		//    4    8:ifeq            13
		//    5   11:iconst_1        
		//    6   12:ireturn         
		//    7   13:iconst_0        
		//    8   14:ireturn         
		}

		void stopIgnoring()
		{
			mFlags = mFlags & 0xffffff7f;
		//    0    0:aload_0         
		//    1    1:aload_0         
		//    2    2:getfield        #136 <Field int mFlags>
		//    3    5:sipush          -129
		//    4    8:iand            
		//    5    9:putfield        #136 <Field int mFlags>
		//    6   12:return          
		}

		public String toString()
		{
			StringBuilder stringbuilder = new StringBuilder((new StringBuilder()).append("ViewHolder{").append(Integer.toHexString(((Object)this).hashCode())).append(" position=").append(mPosition).append(" id=").append(mItemId).append(", oldPos=").append(mOldPosition).append(", pLpos:").append(mPreLayoutPosition).toString());
		//    0    0:new             #261 <Class StringBuilder>
		//    1    3:dup             
		//    2    4:new             #261 <Class StringBuilder>
		//    3    7:dup             
		//    4    8:invokespecial   #262 <Method void StringBuilder()>
		//    5   11:ldc2            #287 <String "ViewHolder{">
		//    6   14:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//    7   17:aload_0         
		//    8   18:invokevirtual   #290 <Method int Object.hashCode()>
		//    9   21:invokestatic    #296 <Method String Integer.toHexString(int)>
		//   10   24:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   11   27:ldc2            #298 <String " position=">
		//   12   30:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   13   33:aload_0         
		//   14   34:getfield        #84  <Field int mPosition>
		//   15   37:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   16   40:ldc2            #303 <String " id=">
		//   17   43:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   18   46:aload_0         
		//   19   47:getfield        #90  <Field long mItemId>
		//   20   50:invokevirtual   #306 <Method StringBuilder StringBuilder.append(long)>
		//   21   53:ldc2            #308 <String ", oldPos=">
		//   22   56:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   23   59:aload_0         
		//   24   60:getfield        #86  <Field int mOldPosition>
		//   25   63:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   26   66:ldc2            #310 <String ", pLpos:">
		//   27   69:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   28   72:aload_0         
		//   29   73:getfield        #94  <Field int mPreLayoutPosition>
		//   30   76:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//   31   79:invokevirtual   #275 <Method String StringBuilder.toString()>
		//   32   82:invokespecial   #311 <Method void StringBuilder(String)>
		//   33   85:astore_2        
			if(isScrap())
		//*  34   86:aload_0         
		//*  35   87:invokevirtual   #313 <Method boolean isScrap()>
		//*  36   90:ifeq            118
			{
				StringBuilder stringbuilder1 = stringbuilder.append(" scrap ");
		//   37   93:aload_2         
		//   38   94:ldc2            #315 <String " scrap ">
		//   39   97:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//   40  100:astore_3        
				String s;
				if(mInChangeScrap)
		//*  41  101:aload_0         
		//*  42  102:getfield        #108 <Field boolean mInChangeScrap>
		//*  43  105:ifeq            295
					s = "[changeScrap]";
		//   44  108:ldc2            #317 <String "[changeScrap]">
		//   45  111:astore_1        
				else
		//*  46  112:aload_3         
		//*  47  113:aload_1         
		//*  48  114:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  49  117:pop             
		//*  50  118:aload_0         
		//*  51  119:invokevirtual   #227 <Method boolean isInvalid()>
		//*  52  122:ifeq            133
		//*  53  125:aload_2         
		//*  54  126:ldc2            #319 <String " invalid">
		//*  55  129:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  56  132:pop             
		//*  57  133:aload_0         
		//*  58  134:invokevirtual   #321 <Method boolean isBound()>
		//*  59  137:ifne            148
		//*  60  140:aload_2         
		//*  61  141:ldc2            #323 <String " unbound">
		//*  62  144:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  63  147:pop             
		//*  64  148:aload_0         
		//*  65  149:invokevirtual   #325 <Method boolean needsUpdate()>
		//*  66  152:ifeq            163
		//*  67  155:aload_2         
		//*  68  156:ldc2            #327 <String " update">
		//*  69  159:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  70  162:pop             
		//*  71  163:aload_0         
		//*  72  164:invokevirtual   #329 <Method boolean isRemoved()>
		//*  73  167:ifeq            178
		//*  74  170:aload_2         
		//*  75  171:ldc2            #331 <String " removed">
		//*  76  174:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  77  177:pop             
		//*  78  178:aload_0         
		//*  79  179:invokevirtual   #333 <Method boolean shouldIgnore()>
		//*  80  182:ifeq            193
		//*  81  185:aload_2         
		//*  82  186:ldc2            #335 <String " ignored">
		//*  83  189:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  84  192:pop             
		//*  85  193:aload_0         
		//*  86  194:invokevirtual   #337 <Method boolean isTmpDetached()>
		//*  87  197:ifeq            208
		//*  88  200:aload_2         
		//*  89  201:ldc2            #339 <String " tmpDetached">
		//*  90  204:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//*  91  207:pop             
		//*  92  208:aload_0         
		//*  93  209:invokevirtual   #341 <Method boolean isRecyclable()>
		//*  94  212:ifne            249
		//*  95  215:aload_2         
		//*  96  216:new             #261 <Class StringBuilder>
		//*  97  219:dup             
		//*  98  220:invokespecial   #262 <Method void StringBuilder()>
		//*  99  223:ldc2            #343 <String " not recyclable(">
		//* 100  226:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 101  229:aload_0         
		//* 102  230:getfield        #104 <Field int mIsRecyclableCount>
		//* 103  233:invokevirtual   #301 <Method StringBuilder StringBuilder.append(int)>
		//* 104  236:ldc2            #345 <String ")">
		//* 105  239:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 106  242:invokevirtual   #275 <Method String StringBuilder.toString()>
		//* 107  245:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 108  248:pop             
		//* 109  249:aload_0         
		//* 110  250:invokevirtual   #347 <Method boolean isAdapterPositionUnknown()>
		//* 111  253:ifeq            264
		//* 112  256:aload_2         
		//* 113  257:ldc2            #349 <String " undefined adapter position">
		//* 114  260:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 115  263:pop             
		//* 116  264:aload_0         
		//* 117  265:getfield        #121 <Field View itemView>
		//* 118  268:invokevirtual   #353 <Method ViewParent View.getParent()>
		//* 119  271:ifnonnull       282
		//* 120  274:aload_2         
		//* 121  275:ldc2            #355 <String " no parent">
		//* 122  278:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 123  281:pop             
		//* 124  282:aload_2         
		//* 125  283:ldc2            #357 <String "}">
		//* 126  286:invokevirtual   #268 <Method StringBuilder StringBuilder.append(String)>
		//* 127  289:pop             
		//* 128  290:aload_2         
		//* 129  291:invokevirtual   #275 <Method String StringBuilder.toString()>
		//* 130  294:areturn         
					s = "[attachedScrap]";
		//  131  295:ldc2            #359 <String "[attachedScrap]">
		//  132  298:astore_1        
				stringbuilder1.append(s);
			}
			if(isInvalid())
				stringbuilder.append(" invalid");
			if(!isBound())
				stringbuilder.append(" unbound");
			if(needsUpdate())
				stringbuilder.append(" update");
			if(isRemoved())
				stringbuilder.append(" removed");
			if(shouldIgnore())
				stringbuilder.append(" ignored");
			if(isTmpDetached())
				stringbuilder.append(" tmpDetached");
			if(!isRecyclable())
				stringbuilder.append((new StringBuilder()).append(" not recyclable(").append(mIsRecyclableCount).append(")").toString());
			if(isAdapterPositionUnknown())
				stringbuilder.append(" undefined adapter position");
			if(itemView.getParent() == null)
				stringbuilder.append(" no parent");
			stringbuilder.append("}");
			return stringbuilder.toString();
		//* 133  299:goto            112
		}

		void unScrap()
		{
			mScrapContainer.unscrapView(this);
		//    0    0:aload_0         
		//    1    1:getfield        #106 <Field RecyclerView$Recycler mScrapContainer>
		//    2    4:aload_0         
		//    3    5:invokevirtual   #365 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
		//    4    8:return          
		}

		boolean wasReturnedFromScrap()
		{
			return (mFlags & 0x20) != 0;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:bipush          32
		//    3    6:iand            
		//    4    7:ifeq            12
		//    5   10:iconst_1        
		//    6   11:ireturn         
		//    7   12:iconst_0        
		//    8   13:ireturn         
		}

		static final int FLAG_ADAPTER_FULLUPDATE = 1024;
		static final int FLAG_ADAPTER_POSITION_UNKNOWN = 512;
		static final int FLAG_APPEARED_IN_PRE_LAYOUT = 4096;
		static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 8192;
		static final int FLAG_BOUND = 1;
		static final int FLAG_IGNORE = 128;
		static final int FLAG_INVALID = 4;
		static final int FLAG_MOVED = 2048;
		static final int FLAG_NOT_RECYCLABLE = 16;
		static final int FLAG_REMOVED = 8;
		static final int FLAG_RETURNED_FROM_SCRAP = 32;
		static final int FLAG_SET_A11Y_ITEM_DELEGATE = 16384;
		static final int FLAG_TMP_DETACHED = 256;
		static final int FLAG_UPDATE = 2;
		private static final List FULLUPDATE_PAYLOADS;
		static final int PENDING_ACCESSIBILITY_STATE_NOT_SET = -1;
		public final View itemView;
		private int mFlags;
		private boolean mInChangeScrap;
		private int mIsRecyclableCount;
		long mItemId;
		int mItemViewType;
		WeakReference mNestedRecyclerView;
		int mOldPosition;
		RecyclerView mOwnerRecyclerView;
		List mPayloads;
		int mPendingAccessibilityState;
		int mPosition;
		int mPreLayoutPosition;
		private Recycler mScrapContainer;
		ViewHolder mShadowedHolder;
		ViewHolder mShadowingHolder;
		List mUnmodifiedPayloads;
		private int mWasImportantForAccessibilityBeforeHidden;

		static 
		{
			FULLUPDATE_PAYLOADS = Collections.EMPTY_LIST;
		//    0    0:getstatic       #75  <Field List Collections.EMPTY_LIST>
		//    1    3:putstatic       #77  <Field List FULLUPDATE_PAYLOADS>
		//*   2    6:return          
		}


/*
		static Recycler access$1002(ViewHolder viewholder, Recycler recycler)
		{
			viewholder.mScrapContainer = recycler;
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			return recycler;
		//    3    5:aload_1         
		//    4    6:areturn         
		}

*/


/*
		static boolean access$1100(ViewHolder viewholder)
		{
			return viewholder.mInChangeScrap;
		//    0    0:aload_0         
		//    1    1:getfield        #108 <Field boolean mInChangeScrap>
		//    2    4:ireturn         
		}

*/


/*
		static boolean access$1102(ViewHolder viewholder, boolean flag)
		{
			viewholder.mInChangeScrap = flag;
		//    0    0:aload_0         
		//    1    1:iload_1         
		//    2    2:putfield        #108 <Field boolean mInChangeScrap>
			return flag;
		//    3    5:iload_1         
		//    4    6:ireturn         
		}

*/


/*
		static boolean access$1500(ViewHolder viewholder)
		{
			return viewholder.shouldBeKeptAsChild();
		//    0    0:aload_0         
		//    1    1:invokespecial   #132 <Method boolean shouldBeKeptAsChild()>
		//    2    4:ireturn         
		}

*/


/*
		static int access$1600(ViewHolder viewholder)
		{
			return viewholder.mFlags;
		//    0    0:aload_0         
		//    1    1:getfield        #136 <Field int mFlags>
		//    2    4:ireturn         
		}

*/


/*
		static void access$200(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onEnteredHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #142 <Method void onEnteredHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static void access$300(ViewHolder viewholder, RecyclerView recyclerview)
		{
			viewholder.onLeftHiddenState(recyclerview);
		//    0    0:aload_0         
		//    1    1:aload_1         
		//    2    2:invokespecial   #146 <Method void onLeftHiddenState(RecyclerView)>
			return;
		//    3    5:return          
		}

*/


/*
		static boolean access$900(ViewHolder viewholder)
		{
			return viewholder.doesTransientStatePreventRecycling();
		//    0    0:aload_0         
		//    1    1:invokespecial   #150 <Method boolean doesTransientStatePreventRecycling()>
		//    2    4:ireturn         
		}

*/

		public ViewHolder(View view)
		{
		//    0    0:aload_0         
		//    1    1:invokespecial   #82  <Method void Object()>
			mPosition = -1;
		//    2    4:aload_0         
		//    3    5:iconst_m1       
		//    4    6:putfield        #84  <Field int mPosition>
			mOldPosition = -1;
		//    5    9:aload_0         
		//    6   10:iconst_m1       
		//    7   11:putfield        #86  <Field int mOldPosition>
			mItemId = -1L;
		//    8   14:aload_0         
		//    9   15:ldc2w           #87  <Long -1L>
		//   10   18:putfield        #90  <Field long mItemId>
			mItemViewType = -1;
		//   11   21:aload_0         
		//   12   22:iconst_m1       
		//   13   23:putfield        #92  <Field int mItemViewType>
			mPreLayoutPosition = -1;
		//   14   26:aload_0         
		//   15   27:iconst_m1       
		//   16   28:putfield        #94  <Field int mPreLayoutPosition>
			mShadowedHolder = null;
		//   17   31:aload_0         
		//   18   32:aconst_null     
		//   19   33:putfield        #96  <Field RecyclerView$ViewHolder mShadowedHolder>
			mShadowingHolder = null;
		//   20   36:aload_0         
		//   21   37:aconst_null     
		//   22   38:putfield        #98  <Field RecyclerView$ViewHolder mShadowingHolder>
			mPayloads = null;
		//   23   41:aload_0         
		//   24   42:aconst_null     
		//   25   43:putfield        #100 <Field List mPayloads>
			mUnmodifiedPayloads = null;
		//   26   46:aload_0         
		//   27   47:aconst_null     
		//   28   48:putfield        #102 <Field List mUnmodifiedPayloads>
			mIsRecyclableCount = 0;
		//   29   51:aload_0         
		//   30   52:iconst_0        
		//   31   53:putfield        #104 <Field int mIsRecyclableCount>
			mScrapContainer = null;
		//   32   56:aload_0         
		//   33   57:aconst_null     
		//   34   58:putfield        #106 <Field RecyclerView$Recycler mScrapContainer>
			mInChangeScrap = false;
		//   35   61:aload_0         
		//   36   62:iconst_0        
		//   37   63:putfield        #108 <Field boolean mInChangeScrap>
			mWasImportantForAccessibilityBeforeHidden = 0;
		//   38   66:aload_0         
		//   39   67:iconst_0        
		//   40   68:putfield        #110 <Field int mWasImportantForAccessibilityBeforeHidden>
			mPendingAccessibilityState = -1;
		//   41   71:aload_0         
		//   42   72:iconst_m1       
		//   43   73:putfield        #112 <Field int mPendingAccessibilityState>
			if(view == null)
		//*  44   76:aload_1         
		//*  45   77:ifnonnull       90
			{
				throw new IllegalArgumentException("itemView may not be null");
		//   46   80:new             #114 <Class IllegalArgumentException>
		//   47   83:dup             
		//   48   84:ldc1            #116 <String "itemView may not be null">
		//   49   86:invokespecial   #119 <Method void IllegalArgumentException(String)>
		//   50   89:athrow          
			} else
			{
				itemView = view;
		//   51   90:aload_0         
		//   52   91:aload_1         
		//   53   92:putfield        #121 <Field View itemView>
				return;
		//   54   95:return          
			}
		}
	}


	public RecyclerView(Context context)
	{
		this(context, ((AttributeSet) (null)));
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aconst_null     
	//    3    3:invokespecial   #355 <Method void RecyclerView(Context, AttributeSet)>
	//    4    6:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset)
	{
		this(context, attributeset, 0);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iconst_0        
	//    4    4:invokespecial   #359 <Method void RecyclerView(Context, AttributeSet, int)>
	//    5    7:return          
	}

	public RecyclerView(Context context, AttributeSet attributeset, int i)
	{
		super(context, attributeset, i);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:iload_3         
	//    4    4:invokespecial   #361 <Method void ViewGroup(Context, AttributeSet, int)>
		mObserver = new RecyclerViewDataObserver();
	//    5    7:aload_0         
	//    6    8:new             #95  <Class RecyclerView$RecyclerViewDataObserver>
	//    7   11:dup             
	//    8   12:aload_0         
	//    9   13:invokespecial   #364 <Method void RecyclerView$RecyclerViewDataObserver(RecyclerView)>
	//   10   16:putfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
		mRecycler = new Recycler();
	//   11   19:aload_0         
	//   12   20:new             #89  <Class RecyclerView$Recycler>
	//   13   23:dup             
	//   14   24:aload_0         
	//   15   25:invokespecial   #367 <Method void RecyclerView$Recycler(RecyclerView)>
	//   16   28:putfield        #369 <Field RecyclerView$Recycler mRecycler>
		mViewInfoStore = new ViewInfoStore();
	//   17   31:aload_0         
	//   18   32:new             #371 <Class ViewInfoStore>
	//   19   35:dup             
	//   20   36:invokespecial   #372 <Method void ViewInfoStore()>
	//   21   39:putfield        #374 <Field ViewInfoStore mViewInfoStore>
		mUpdateChildViewsRunnable = new Runnable() {

			public void run()
			{
				if(!mFirstLayoutComplete || isLayoutRequested())
			//*   0    0:aload_0         
			//*   1    1:getfield        #14  <Field RecyclerView this$0>
			//*   2    4:getfield        #23  <Field boolean RecyclerView.mFirstLayoutComplete>
			//*   3    7:ifeq            20
			//*   4   10:aload_0         
			//*   5   11:getfield        #14  <Field RecyclerView this$0>
			//*   6   14:invokevirtual   #27  <Method boolean RecyclerView.isLayoutRequested()>
			//*   7   17:ifeq            21
					return;
			//    8   20:return          
				if(!mIsAttached)
			//*   9   21:aload_0         
			//*  10   22:getfield        #14  <Field RecyclerView this$0>
			//*  11   25:getfield        #30  <Field boolean RecyclerView.mIsAttached>
			//*  12   28:ifne            39
				{
					requestLayout();
			//   13   31:aload_0         
			//   14   32:getfield        #14  <Field RecyclerView this$0>
			//   15   35:invokevirtual   #33  <Method void RecyclerView.requestLayout()>
					return;
			//   16   38:return          
				}
				if(mLayoutFrozen)
			//*  17   39:aload_0         
			//*  18   40:getfield        #14  <Field RecyclerView this$0>
			//*  19   43:getfield        #36  <Field boolean RecyclerView.mLayoutFrozen>
			//*  20   46:ifeq            58
				{
					mLayoutRequestEaten = true;
			//   21   49:aload_0         
			//   22   50:getfield        #14  <Field RecyclerView this$0>
			//   23   53:iconst_1        
			//   24   54:putfield        #39  <Field boolean RecyclerView.mLayoutRequestEaten>
					return;
			//   25   57:return          
				} else
				{
					consumePendingUpdateOperations();
			//   26   58:aload_0         
			//   27   59:getfield        #14  <Field RecyclerView this$0>
			//   28   62:invokevirtual   #42  <Method void RecyclerView.consumePendingUpdateOperations()>
					return;
			//   29   65:return          
				}
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
	//   22   42:aload_0         
	//   23   43:new             #10  <Class RecyclerView$1>
	//   24   46:dup             
	//   25   47:aload_0         
	//   26   48:invokespecial   #375 <Method void RecyclerView$1(RecyclerView)>
	//   27   51:putfield        #377 <Field Runnable mUpdateChildViewsRunnable>
		mTempRect = new Rect();
	//   28   54:aload_0         
	//   29   55:new             #379 <Class Rect>
	//   30   58:dup             
	//   31   59:invokespecial   #380 <Method void Rect()>
	//   32   62:putfield        #382 <Field Rect mTempRect>
		mTempRect2 = new Rect();
	//   33   65:aload_0         
	//   34   66:new             #379 <Class Rect>
	//   35   69:dup             
	//   36   70:invokespecial   #380 <Method void Rect()>
	//   37   73:putfield        #384 <Field Rect mTempRect2>
		mTempRectF = new RectF();
	//   38   76:aload_0         
	//   39   77:new             #386 <Class RectF>
	//   40   80:dup             
	//   41   81:invokespecial   #387 <Method void RectF()>
	//   42   84:putfield        #389 <Field RectF mTempRectF>
		mItemDecorations = new ArrayList();
	//   43   87:aload_0         
	//   44   88:new             #391 <Class ArrayList>
	//   45   91:dup             
	//   46   92:invokespecial   #392 <Method void ArrayList()>
	//   47   95:putfield        #394 <Field ArrayList mItemDecorations>
		mOnItemTouchListeners = new ArrayList();
	//   48   98:aload_0         
	//   49   99:new             #391 <Class ArrayList>
	//   50  102:dup             
	//   51  103:invokespecial   #392 <Method void ArrayList()>
	//   52  106:putfield        #396 <Field ArrayList mOnItemTouchListeners>
		mEatRequestLayout = 0;
	//   53  109:aload_0         
	//   54  110:iconst_0        
	//   55  111:putfield        #398 <Field int mEatRequestLayout>
		mDataSetHasChangedAfterLayout = false;
	//   56  114:aload_0         
	//   57  115:iconst_0        
	//   58  116:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		mLayoutOrScrollCounter = 0;
	//   59  119:aload_0         
	//   60  120:iconst_0        
	//   61  121:putfield        #402 <Field int mLayoutOrScrollCounter>
		mDispatchScrollCounter = 0;
	//   62  124:aload_0         
	//   63  125:iconst_0        
	//   64  126:putfield        #404 <Field int mDispatchScrollCounter>
		mItemAnimator = ((ItemAnimator) (new DefaultItemAnimator()));
	//   65  129:aload_0         
	//   66  130:new             #406 <Class DefaultItemAnimator>
	//   67  133:dup             
	//   68  134:invokespecial   #407 <Method void DefaultItemAnimator()>
	//   69  137:putfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
		mScrollState = 0;
	//   70  140:aload_0         
	//   71  141:iconst_0        
	//   72  142:putfield        #411 <Field int mScrollState>
		mScrollPointerId = -1;
	//   73  145:aload_0         
	//   74  146:iconst_m1       
	//   75  147:putfield        #413 <Field int mScrollPointerId>
		mScaledHorizontalScrollFactor = 1.401298E-45F;
	//   76  150:aload_0         
	//   77  151:ldc2            #414 <Float 1.401298E-45F>
	//   78  154:putfield        #416 <Field float mScaledHorizontalScrollFactor>
		mScaledVerticalScrollFactor = 1.401298E-45F;
	//   79  157:aload_0         
	//   80  158:ldc2            #414 <Float 1.401298E-45F>
	//   81  161:putfield        #418 <Field float mScaledVerticalScrollFactor>
		mPreserveFocusAfterLayout = true;
	//   82  164:aload_0         
	//   83  165:iconst_1        
	//   84  166:putfield        #420 <Field boolean mPreserveFocusAfterLayout>
		mViewFlinger = new ViewFlinger();
	//   85  169:aload_0         
	//   86  170:new             #124 <Class RecyclerView$ViewFlinger>
	//   87  173:dup             
	//   88  174:aload_0         
	//   89  175:invokespecial   #421 <Method void RecyclerView$ViewFlinger(RecyclerView)>
	//   90  178:putfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
		boolean flag;
		Object obj;
		if(ALLOW_THREAD_GAP_WORK)
	//*  91  181:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  92  184:ifeq            639
			obj = ((Object) (new GapWorker.LayoutPrefetchRegistryImpl()));
	//   93  187:new             #425 <Class GapWorker$LayoutPrefetchRegistryImpl>
	//   94  190:dup             
	//   95  191:invokespecial   #426 <Method void GapWorker$LayoutPrefetchRegistryImpl()>
	//   96  194:astore          5
		else
	//*  97  196:aload_0         
	//*  98  197:aload           5
	//*  99  199:putfield        #428 <Field GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry>
	//* 100  202:aload_0         
	//* 101  203:new             #115 <Class RecyclerView$State>
	//* 102  206:dup             
	//* 103  207:invokespecial   #429 <Method void RecyclerView$State()>
	//* 104  210:putfield        #431 <Field RecyclerView$State mState>
	//* 105  213:aload_0         
	//* 106  214:iconst_0        
	//* 107  215:putfield        #433 <Field boolean mItemsAddedOrRemoved>
	//* 108  218:aload_0         
	//* 109  219:iconst_0        
	//* 110  220:putfield        #435 <Field boolean mItemsChanged>
	//* 111  223:aload_0         
	//* 112  224:new             #49  <Class RecyclerView$ItemAnimatorRestoreListener>
	//* 113  227:dup             
	//* 114  228:aload_0         
	//* 115  229:invokespecial   #436 <Method void RecyclerView$ItemAnimatorRestoreListener(RecyclerView)>
	//* 116  232:putfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//* 117  235:aload_0         
	//* 118  236:iconst_0        
	//* 119  237:putfield        #440 <Field boolean mPostedAnimatorRunner>
	//* 120  240:aload_0         
	//* 121  241:iconst_2        
	//* 122  242:newarray        int[]
	//* 123  244:putfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 124  247:aload_0         
	//* 125  248:iconst_2        
	//* 126  249:newarray        int[]
	//* 127  251:putfield        #444 <Field int[] mScrollOffset>
	//* 128  254:aload_0         
	//* 129  255:iconst_2        
	//* 130  256:newarray        int[]
	//* 131  258:putfield        #446 <Field int[] mScrollConsumed>
	//* 132  261:aload_0         
	//* 133  262:iconst_2        
	//* 134  263:newarray        int[]
	//* 135  265:putfield        #448 <Field int[] mNestedOffsets>
	//* 136  268:aload_0         
	//* 137  269:new             #391 <Class ArrayList>
	//* 138  272:dup             
	//* 139  273:invokespecial   #392 <Method void ArrayList()>
	//* 140  276:putfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//* 141  279:aload_0         
	//* 142  280:new             #12  <Class RecyclerView$2>
	//* 143  283:dup             
	//* 144  284:aload_0         
	//* 145  285:invokespecial   #451 <Method void RecyclerView$2(RecyclerView)>
	//* 146  288:putfield        #453 <Field Runnable mItemAnimatorRunner>
	//* 147  291:aload_0         
	//* 148  292:new             #16  <Class RecyclerView$4>
	//* 149  295:dup             
	//* 150  296:aload_0         
	//* 151  297:invokespecial   #454 <Method void RecyclerView$4(RecyclerView)>
	//* 152  300:putfield        #456 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//* 153  303:aload_2         
	//* 154  304:ifnull          645
	//* 155  307:aload_1         
	//* 156  308:aload_2         
	//* 157  309:getstatic       #314 <Field int[] CLIP_TO_PADDING_ATTR>
	//* 158  312:iload_3         
	//* 159  313:iconst_0        
	//* 160  314:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 161  317:astore          5
	//* 162  319:aload_0         
	//* 163  320:aload           5
	//* 164  322:iconst_0        
	//* 165  323:iconst_1        
	//* 166  324:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 167  327:putfield        #468 <Field boolean mClipToPadding>
	//* 168  330:aload           5
	//* 169  332:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 170  335:aload_0         
	//* 171  336:iconst_1        
	//* 172  337:invokevirtual   #475 <Method void setScrollContainer(boolean)>
	//* 173  340:aload_0         
	//* 174  341:iconst_1        
	//* 175  342:invokevirtual   #478 <Method void setFocusableInTouchMode(boolean)>
	//* 176  345:aload_1         
	//* 177  346:invokestatic    #484 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//* 178  349:astore          5
	//* 179  351:aload_0         
	//* 180  352:aload           5
	//* 181  354:invokevirtual   #488 <Method int ViewConfiguration.getScaledTouchSlop()>
	//* 182  357:putfield        #490 <Field int mTouchSlop>
	//* 183  360:aload_0         
	//* 184  361:aload           5
	//* 185  363:aload_1         
	//* 186  364:invokestatic    #496 <Method float ViewConfigurationCompat.getScaledHorizontalScrollFactor(ViewConfiguration, Context)>
	//* 187  367:putfield        #416 <Field float mScaledHorizontalScrollFactor>
	//* 188  370:aload_0         
	//* 189  371:aload           5
	//* 190  373:aload_1         
	//* 191  374:invokestatic    #499 <Method float ViewConfigurationCompat.getScaledVerticalScrollFactor(ViewConfiguration, Context)>
	//* 192  377:putfield        #418 <Field float mScaledVerticalScrollFactor>
	//* 193  380:aload_0         
	//* 194  381:aload           5
	//* 195  383:invokevirtual   #502 <Method int ViewConfiguration.getScaledMinimumFlingVelocity()>
	//* 196  386:putfield        #504 <Field int mMinFlingVelocity>
	//* 197  389:aload_0         
	//* 198  390:aload           5
	//* 199  392:invokevirtual   #507 <Method int ViewConfiguration.getScaledMaximumFlingVelocity()>
	//* 200  395:putfield        #509 <Field int mMaxFlingVelocity>
	//* 201  398:aload_0         
	//* 202  399:invokevirtual   #512 <Method int getOverScrollMode()>
	//* 203  402:iconst_2        
	//* 204  403:icmpne          653
	//* 205  406:iconst_1        
	//* 206  407:istore          4
	//* 207  409:aload_0         
	//* 208  410:iload           4
	//* 209  412:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
	//* 210  415:aload_0         
	//* 211  416:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 212  419:aload_0         
	//* 213  420:getfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//* 214  423:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//* 215  426:aload_0         
	//* 216  427:invokevirtual   #522 <Method void initAdapterManager()>
	//* 217  430:aload_0         
	//* 218  431:invokespecial   #525 <Method void initChildrenHelper()>
	//* 219  434:aload_0         
	//* 220  435:invokestatic    #531 <Method int ViewCompat.getImportantForAccessibility(View)>
	//* 221  438:ifne            446
	//* 222  441:aload_0         
	//* 223  442:iconst_1        
	//* 224  443:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
	//* 225  446:aload_0         
	//* 226  447:aload_0         
	//* 227  448:invokevirtual   #539 <Method Context getContext()>
	//* 228  451:ldc2            #541 <String "accessibility">
	//* 229  454:invokevirtual   #545 <Method Object Context.getSystemService(String)>
	//* 230  457:checkcast       #547 <Class AccessibilityManager>
	//* 231  460:putfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//* 232  463:aload_0         
	//* 233  464:new             #551 <Class RecyclerViewAccessibilityDelegate>
	//* 234  467:dup             
	//* 235  468:aload_0         
	//* 236  469:invokespecial   #552 <Method void RecyclerViewAccessibilityDelegate(RecyclerView)>
	//* 237  472:invokevirtual   #556 <Method void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)>
	//* 238  475:iconst_1        
	//* 239  476:istore          4
	//* 240  478:aload_2         
	//* 241  479:ifnull          659
	//* 242  482:aload_1         
	//* 243  483:aload_2         
	//* 244  484:getstatic       #560 <Field int[] android.support.v7.recyclerview.R$styleable.RecyclerView>
	//* 245  487:iload_3         
	//* 246  488:iconst_0        
	//* 247  489:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 248  492:astore          5
	//* 249  494:aload           5
	//* 250  496:getstatic       #563 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_layoutManager>
	//* 251  499:invokevirtual   #567 <Method String TypedArray.getString(int)>
	//* 252  502:astore          6
	//* 253  504:aload           5
	//* 254  506:getstatic       #570 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_android_descendantFocusability>
	//* 255  509:iconst_m1       
	//* 256  510:invokevirtual   #574 <Method int TypedArray.getInt(int, int)>
	//* 257  513:iconst_m1       
	//* 258  514:icmpne          524
	//* 259  517:aload_0         
	//* 260  518:ldc2            #575 <Int 0x40000>
	//* 261  521:invokevirtual   #579 <Method void setDescendantFocusability(int)>
	//* 262  524:aload_0         
	//* 263  525:aload           5
	//* 264  527:getstatic       #582 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollEnabled>
	//* 265  530:iconst_0        
	//* 266  531:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 267  534:putfield        #584 <Field boolean mEnableFastScroller>
	//* 268  537:aload_0         
	//* 269  538:getfield        #584 <Field boolean mEnableFastScroller>
	//* 270  541:ifeq            586
	//* 271  544:aload_0         
	//* 272  545:aload           5
	//* 273  547:getstatic       #587 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalThumbDrawable>
	//* 274  550:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 275  553:checkcast       #593 <Class StateListDrawable>
	//* 276  556:aload           5
	//* 277  558:getstatic       #596 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollVerticalTrackDrawable>
	//* 278  561:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 279  564:aload           5
	//* 280  566:getstatic       #599 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalThumbDrawable>
	//* 281  569:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 282  572:checkcast       #593 <Class StateListDrawable>
	//* 283  575:aload           5
	//* 284  577:getstatic       #602 <Field int android.support.v7.recyclerview.R$styleable.RecyclerView_fastScrollHorizontalTrackDrawable>
	//* 285  580:invokevirtual   #591 <Method Drawable TypedArray.getDrawable(int)>
	//* 286  583:invokevirtual   #606 <Method void initFastScroller(StateListDrawable, Drawable, StateListDrawable, Drawable)>
	//* 287  586:aload           5
	//* 288  588:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 289  591:aload_0         
	//* 290  592:aload_1         
	//* 291  593:aload           6
	//* 292  595:aload_2         
	//* 293  596:iload_3         
	//* 294  597:iconst_0        
	//* 295  598:invokespecial   #610 <Method void createLayoutManager(Context, String, AttributeSet, int, int)>
	//* 296  601:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//* 297  604:bipush          21
	//* 298  606:icmplt          632
	//* 299  609:aload_1         
	//* 300  610:aload_2         
	//* 301  611:getstatic       #311 <Field int[] NESTED_SCROLLING_ATTRS>
	//* 302  614:iload_3         
	//* 303  615:iconst_0        
	//* 304  616:invokevirtual   #460 <Method TypedArray Context.obtainStyledAttributes(AttributeSet, int[], int, int)>
	//* 305  619:astore_1        
	//* 306  620:aload_1         
	//* 307  621:iconst_0        
	//* 308  622:iconst_1        
	//* 309  623:invokevirtual   #466 <Method boolean TypedArray.getBoolean(int, boolean)>
	//* 310  626:istore          4
	//* 311  628:aload_1         
	//* 312  629:invokevirtual   #471 <Method void TypedArray.recycle()>
	//* 313  632:aload_0         
	//* 314  633:iload           4
	//* 315  635:invokevirtual   #613 <Method void setNestedScrollingEnabled(boolean)>
	//* 316  638:return          
			obj = null;
	//  317  639:aconst_null     
	//  318  640:astore          5
		mPrefetchRegistry = ((GapWorker.LayoutPrefetchRegistryImpl) (obj));
		mState = new State();
		mItemsAddedOrRemoved = false;
		mItemsChanged = false;
		mItemAnimatorListener = ((ItemAnimator.ItemAnimatorListener) (new ItemAnimatorRestoreListener()));
		mPostedAnimatorRunner = false;
		mMinMaxLayoutPositions = new int[2];
		mScrollOffset = new int[2];
		mScrollConsumed = new int[2];
		mNestedOffsets = new int[2];
		mPendingAccessibilityImportanceChange = ((List) (new ArrayList()));
		mViewInfoProcessCallback = new ViewInfoStore.ProcessCallback() {

			public void processAppeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				animateAppearance(viewholder, itemholderinfo, itemholderinfo1);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:aload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #23  <Method void RecyclerView.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//    6   10:return          
			}

			public void processDisappeared(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				mRecycler.unscrapView(viewholder);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    3    7:aload_1         
			//    4    8:invokevirtual   #36  <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
				animateDisappearance(viewholder, itemholderinfo, itemholderinfo1);
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:aload_1         
			//    8   16:aload_2         
			//    9   17:aload_3         
			//   10   18:invokevirtual   #39  <Method void RecyclerView.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//   11   21:return          
			}

			public void processPersistent(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
			{
				viewholder.setIsRecyclable(false);
			//    0    0:aload_1         
			//    1    1:iconst_0        
			//    2    2:invokevirtual   #47  <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
				if(mDataSetHasChangedAfterLayout)
			//*   3    5:aload_0         
			//*   4    6:getfield        #14  <Field RecyclerView this$0>
			//*   5    9:getfield        #51  <Field boolean RecyclerView.mDataSetHasChangedAfterLayout>
			//*   6   12:ifeq            40
				{
					if(mItemAnimator.animateChange(viewholder, viewholder, itemholderinfo, itemholderinfo1))
			//*   7   15:aload_0         
			//*   8   16:getfield        #14  <Field RecyclerView this$0>
			//*   9   19:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  10   22:aload_1         
			//*  11   23:aload_1         
			//*  12   24:aload_2         
			//*  13   25:aload_3         
			//*  14   26:invokevirtual   #61  <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  15   29:ifeq            39
						postAnimationRunner();
			//   16   32:aload_0         
			//   17   33:getfield        #14  <Field RecyclerView this$0>
			//   18   36:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
				} else
			//*  19   39:return          
				if(mItemAnimator.animatePersistence(viewholder, itemholderinfo, itemholderinfo1))
			//*  20   40:aload_0         
			//*  21   41:getfield        #14  <Field RecyclerView this$0>
			//*  22   44:getfield        #55  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
			//*  23   47:aload_1         
			//*  24   48:aload_2         
			//*  25   49:aload_3         
			//*  26   50:invokevirtual   #68  <Method boolean RecyclerView$ItemAnimator.animatePersistence(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
			//*  27   53:ifeq            39
				{
					postAnimationRunner();
			//   28   56:aload_0         
			//   29   57:getfield        #14  <Field RecyclerView this$0>
			//   30   60:invokevirtual   #64  <Method void RecyclerView.postAnimationRunner()>
					return;
			//   31   63:return          
				}
			}

			public void unused(ViewHolder viewholder)
			{
				mLayout.removeAndRecycleView(viewholder.itemView, mRecycler);
			//    0    0:aload_0         
			//    1    1:getfield        #14  <Field RecyclerView this$0>
			//    2    4:getfield        #73  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    3    7:aload_1         
			//    4    8:getfield        #77  <Field View RecyclerView$ViewHolder.itemView>
			//    5   11:aload_0         
			//    6   12:getfield        #14  <Field RecyclerView this$0>
			//    7   15:getfield        #30  <Field RecyclerView$Recycler RecyclerView.mRecycler>
			//    8   18:invokevirtual   #83  <Method void RecyclerView$LayoutManager.removeAndRecycleView(View, RecyclerView$Recycler)>
			//    9   21:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
		}
;
		if(attributeset != null)
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, CLIP_TO_PADDING_ATTR, i, 0)));
			mClipToPadding = ((TypedArray) (obj)).getBoolean(0, true);
			((TypedArray) (obj)).recycle();
		} else
	//* 319  642:goto            196
		{
			mClipToPadding = true;
	//  320  645:aload_0         
	//  321  646:iconst_1        
	//  322  647:putfield        #468 <Field boolean mClipToPadding>
		}
		setScrollContainer(true);
		setFocusableInTouchMode(true);
		obj = ((Object) (ViewConfiguration.get(context)));
		mTouchSlop = ((ViewConfiguration) (obj)).getScaledTouchSlop();
		mScaledHorizontalScrollFactor = ViewConfigurationCompat.getScaledHorizontalScrollFactor(((ViewConfiguration) (obj)), context);
		mScaledVerticalScrollFactor = ViewConfigurationCompat.getScaledVerticalScrollFactor(((ViewConfiguration) (obj)), context);
		mMinFlingVelocity = ((ViewConfiguration) (obj)).getScaledMinimumFlingVelocity();
		mMaxFlingVelocity = ((ViewConfiguration) (obj)).getScaledMaximumFlingVelocity();
		if(getOverScrollMode() == 2)
			flag = true;
		else
	//* 323  650:goto            335
			flag = false;
	//  324  653:iconst_0        
	//  325  654:istore          4
		setWillNotDraw(flag);
		mItemAnimator.setListener(mItemAnimatorListener);
		initAdapterManager();
		initChildrenHelper();
		if(ViewCompat.getImportantForAccessibility(((View) (this))) == 0)
			ViewCompat.setImportantForAccessibility(((View) (this)), 1);
		mAccessibilityManager = (AccessibilityManager)getContext().getSystemService("accessibility");
		setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
		flag = true;
		if(attributeset != null)
		{
			obj = ((Object) (context.obtainStyledAttributes(attributeset, android.support.v7.recyclerview.R.styleable.RecyclerView, i, 0)));
			String s = ((TypedArray) (obj)).getString(android.support.v7.recyclerview.R.styleable.RecyclerView_layoutManager);
			if(((TypedArray) (obj)).getInt(android.support.v7.recyclerview.R.styleable.RecyclerView_android_descendantFocusability, -1) == -1)
				setDescendantFocusability(0x40000);
			mEnableFastScroller = ((TypedArray) (obj)).getBoolean(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollEnabled, false);
			if(mEnableFastScroller)
				initFastScroller((StateListDrawable)((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalThumbDrawable), ((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollVerticalTrackDrawable), (StateListDrawable)((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalThumbDrawable), ((TypedArray) (obj)).getDrawable(android.support.v7.recyclerview.R.styleable.RecyclerView_fastScrollHorizontalTrackDrawable));
			((TypedArray) (obj)).recycle();
			createLayoutManager(context, s, attributeset, i, 0);
			if(android.os.Build.VERSION.SDK_INT >= 21)
			{
				context = ((Context) (context.obtainStyledAttributes(attributeset, NESTED_SCROLLING_ATTRS, i, 0)));
				flag = ((TypedArray) (context)).getBoolean(0, true);
				((TypedArray) (context)).recycle();
			}
		} else
	//* 326  656:goto            409
		{
			setDescendantFocusability(0x40000);
	//  327  659:aload_0         
	//  328  660:ldc2            #575 <Int 0x40000>
	//  329  663:invokevirtual   #579 <Method void setDescendantFocusability(int)>
		}
		setNestedScrollingEnabled(flag);
	//* 330  666:goto            632
	}

	private void addAnimatingView(ViewHolder viewholder)
	{
		View view = viewholder.itemView;
	//    0    0:aload_1         
	//    1    1:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//    2    4:astore_3        
		boolean flag;
		if(view.getParent() == this)
	//*   3    5:aload_3         
	//*   4    6:invokevirtual   #651 <Method ViewParent View.getParent()>
	//*   5    9:aload_0         
	//*   6   10:if_acmpne       49
			flag = true;
	//    7   13:iconst_1        
	//    8   14:istore_2        
		else
	//*   9   15:aload_0         
	//*  10   16:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//*  11   19:aload_0         
	//*  12   20:aload_3         
	//*  13   21:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//*  14   24:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
	//*  15   27:aload_1         
	//*  16   28:invokevirtual   #661 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*  17   31:ifeq            54
	//*  18   34:aload_0         
	//*  19   35:getfield        #663 <Field ChildHelper mChildHelper>
	//*  20   38:aload_3         
	//*  21   39:iconst_m1       
	//*  22   40:aload_3         
	//*  23   41:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//*  24   44:iconst_1        
	//*  25   45:invokevirtual   #672 <Method void ChildHelper.attachViewToParent(View, int, android.view.ViewGroup$LayoutParams, boolean)>
	//*  26   48:return          
			flag = false;
	//   27   49:iconst_0        
	//   28   50:istore_2        
		mRecycler.unscrapView(getChildViewHolder(view));
		if(viewholder.isTmpDetached())
		{
			mChildHelper.attachViewToParent(view, -1, view.getLayoutParams(), true);
			return;
		}
	//*  29   51:goto            15
		if(!flag)
	//*  30   54:iload_2         
	//*  31   55:ifne            68
		{
			mChildHelper.addView(view, true);
	//   32   58:aload_0         
	//   33   59:getfield        #663 <Field ChildHelper mChildHelper>
	//   34   62:aload_3         
	//   35   63:iconst_1        
	//   36   64:invokevirtual   #676 <Method void ChildHelper.addView(View, boolean)>
			return;
	//   37   67:return          
		} else
		{
			mChildHelper.hide(view);
	//   38   68:aload_0         
	//   39   69:getfield        #663 <Field ChildHelper mChildHelper>
	//   40   72:aload_3         
	//   41   73:invokevirtual   #680 <Method void ChildHelper.hide(View)>
			return;
	//   42   76:return          
		}
	}

	private void animateChange(ViewHolder viewholder, ViewHolder viewholder1, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1, boolean flag, boolean flag1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(flag)
	//*   3    5:iload           5
	//*   4    7:ifeq            15
			addAnimatingView(viewholder);
	//    5   10:aload_0         
	//    6   11:aload_1         
	//    7   12:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		if(viewholder != viewholder1)
	//*   8   15:aload_1         
	//*   9   16:aload_2         
	//*  10   17:if_acmpeq       58
		{
			if(flag1)
	//*  11   20:iload           6
	//*  12   22:ifeq            30
				addAnimatingView(viewholder1);
	//   13   25:aload_0         
	//   14   26:aload_2         
	//   15   27:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			viewholder.mShadowedHolder = viewholder1;
	//   16   30:aload_1         
	//   17   31:aload_2         
	//   18   32:putfield        #692 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowedHolder>
			addAnimatingView(viewholder);
	//   19   35:aload_0         
	//   20   36:aload_1         
	//   21   37:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
			mRecycler.unscrapView(viewholder);
	//   22   40:aload_0         
	//   23   41:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   24   44:aload_1         
	//   25   45:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			viewholder1.setIsRecyclable(false);
	//   26   48:aload_2         
	//   27   49:iconst_0        
	//   28   50:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
			viewholder1.mShadowingHolder = viewholder;
	//   29   53:aload_2         
	//   30   54:aload_1         
	//   31   55:putfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
		}
		if(mItemAnimator.animateChange(viewholder, viewholder1, itemholderinfo, itemholderinfo1))
	//*  32   58:aload_0         
	//*  33   59:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   62:aload_1         
	//*  35   63:aload_2         
	//*  36   64:aload_3         
	//*  37   65:aload           4
	//*  38   67:invokevirtual   #698 <Method boolean RecyclerView$ItemAnimator.animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  39   70:ifeq            77
			postAnimationRunner();
	//   40   73:aload_0         
	//   41   74:invokevirtual   #701 <Method void postAnimationRunner()>
	//   42   77:return          
	}

	private void cancelTouch()
	{
		resetTouch();
	//    0    0:aload_0         
	//    1    1:invokespecial   #705 <Method void resetTouch()>
		setScrollState(0);
	//    2    4:aload_0         
	//    3    5:iconst_0        
	//    4    6:invokevirtual   #708 <Method void setScrollState(int)>
	//    5    9:return          
	}

	static void clearNestedRecyclerViewIfNotNested(ViewHolder viewholder)
	{
		if(viewholder.mNestedRecyclerView == null) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//    2    4:ifnull          30
_L1:
		Object obj = ((Object) ((View)viewholder.mNestedRecyclerView.get()));
	//    3    7:aload_0         
	//    4    8:getfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
	//    5   11:invokevirtual   #718 <Method Object WeakReference.get()>
	//    6   14:checkcast       #647 <Class View>
	//    7   17:astore_1        
_L5:
		if(obj == null)
			break; /* Loop/switch isn't completed */
	//    8   18:aload_1         
	//    9   19:ifnull          56
		if(obj != viewholder.itemView) goto _L3; else goto _L2
	//   10   22:aload_1         
	//   11   23:aload_0         
	//   12   24:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   13   27:if_acmpne       31
_L2:
		return;
	//   14   30:return          
_L3:
		obj = ((Object) (((View) (obj)).getParent()));
	//   15   31:aload_1         
	//   16   32:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   17   35:astore_1        
		if(obj instanceof View)
	//*  18   36:aload_1         
	//*  19   37:instanceof      #647 <Class View>
	//*  20   40:ifeq            51
			obj = ((Object) ((View)obj));
	//   21   43:aload_1         
	//   22   44:checkcast       #647 <Class View>
	//   23   47:astore_1        
		else
	//*  24   48:goto            18
			obj = null;
	//   25   51:aconst_null     
	//   26   52:astore_1        
		if(true) goto _L5; else goto _L4
	//   27   53:goto            18
_L4:
		viewholder.mNestedRecyclerView = null;
	//   28   56:aload_0         
	//   29   57:aconst_null     
	//   30   58:putfield        #713 <Field WeakReference RecyclerView$ViewHolder.mNestedRecyclerView>
		return;
	//   31   61:return          
	}

	private void createLayoutManager(Context context, String s, AttributeSet attributeset, int i, int j)
	{
		if(s == null) goto _L2; else goto _L1
	//    0    0:aload_2         
	//    1    1:ifnull          384
_L1:
		s = s.trim();
	//    2    4:aload_2         
	//    3    5:invokevirtual   #736 <Method String String.trim()>
	//    4    8:astore_2        
		if(s.isEmpty()) goto _L2; else goto _L3
	//    5    9:aload_2         
	//    6   10:invokevirtual   #739 <Method boolean String.isEmpty()>
	//    7   13:ifne            384
_L3:
		String s1 = getFullClassName(context, s);
	//    8   16:aload_0         
	//    9   17:aload_1         
	//   10   18:aload_2         
	//   11   19:invokespecial   #743 <Method String getFullClassName(Context, String)>
	//   12   22:astore          7
		if(!isInEditMode()) goto _L5; else goto _L4
	//   13   24:aload_0         
	//   14   25:invokevirtual   #746 <Method boolean isInEditMode()>
	//   15   28:ifeq            114
_L4:
		s = ((String) (((Object)this).getClass().getClassLoader()));
	//   16   31:aload_0         
	//   17   32:invokevirtual   #752 <Method Class Object.getClass()>
	//   18   35:invokevirtual   #756 <Method ClassLoader Class.getClassLoader()>
	//   19   38:astore_2        
_L8:
		Class class1 = ((ClassLoader) (s)).loadClass(s1).asSubclass(android/support/v7/widget/RecyclerView$LayoutManager);
	//   20   39:aload_2         
	//   21   40:aload           7
	//   22   42:invokevirtual   #762 <Method Class ClassLoader.loadClass(String)>
	//   23   45:ldc1            #55  <Class RecyclerView$LayoutManager>
	//   24   47:invokevirtual   #766 <Method Class Class.asSubclass(Class)>
	//   25   50:astore          8
		s = null;
	//   26   52:aconst_null     
	//   27   53:astore_2        
		Constructor constructor = class1.getConstructor(LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE);
	//   28   54:aload           8
	//   29   56:getstatic       #345 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//   30   59:invokevirtual   #770 <Method Constructor Class.getConstructor(Class[])>
	//   31   62:astore          6
		s = ((String) (new Object[] {
			context, attributeset, Integer.valueOf(i), Integer.valueOf(j)
		}));
	//   32   64:iconst_4        
	//   33   65:anewarray       Object[]
	//   34   68:dup             
	//   35   69:iconst_0        
	//   36   70:aload_1         
	//   37   71:aastore         
	//   38   72:dup             
	//   39   73:iconst_1        
	//   40   74:aload_3         
	//   41   75:aastore         
	//   42   76:dup             
	//   43   77:iconst_2        
	//   44   78:iload           4
	//   45   80:invokestatic    #774 <Method Integer Integer.valueOf(int)>
	//   46   83:aastore         
	//   47   84:dup             
	//   48   85:iconst_3        
	//   49   86:iload           5
	//   50   88:invokestatic    #774 <Method Integer Integer.valueOf(int)>
	//   51   91:aastore         
	//   52   92:astore_2        
		context = ((Context) (constructor));
	//   53   93:aload           6
	//   54   95:astore_1        
_L6:
		NoSuchMethodException nosuchmethodexception;
		try
		{
			((Constructor) (context)).setAccessible(true);
	//   55   96:aload_1         
	//   56   97:iconst_1        
	//   57   98:invokevirtual   #779 <Method void Constructor.setAccessible(boolean)>
			setLayoutManager((LayoutManager)((Constructor) (context)).newInstance(((Object []) (s))));
	//   58  101:aload_0         
	//   59  102:aload_1         
	//   60  103:aload_2         
	//   61  104:invokevirtual   #783 <Method Object Constructor.newInstance(Object[])>
	//   62  107:checkcast       #55  <Class RecyclerView$LayoutManager>
	//   63  110:invokevirtual   #787 <Method void setLayoutManager(RecyclerView$LayoutManager)>
			return;
	//   64  113:return          
		}
	//*  65  114:aload_1         
	//*  66  115:invokevirtual   #788 <Method ClassLoader Context.getClassLoader()>
	//*  67  118:astore_2        
	//*  68  119:goto            39
	//*  69  122:astore          6
	//*  70  124:aload           8
	//*  71  126:iconst_0        
	//*  72  127:anewarray       Class[]
	//*  73  130:invokevirtual   #770 <Method Constructor Class.getConstructor(Class[])>
	//*  74  133:astore_1        
	//*  75  134:goto            96
	//*  76  137:astore_1        
	//*  77  138:aload_1         
	//*  78  139:aload           6
	//*  79  141:invokevirtual   #792 <Method Throwable NoSuchMethodException.initCause(Throwable)>
	//*  80  144:pop             
	//*  81  145:new             #794 <Class IllegalStateException>
	//*  82  148:dup             
	//*  83  149:new             #796 <Class StringBuilder>
	//*  84  152:dup             
	//*  85  153:invokespecial   #797 <Method void StringBuilder()>
	//*  86  156:aload_3         
	//*  87  157:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//*  88  162:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  89  165:ldc2            #806 <String ": Error creating LayoutManager ">
	//*  90  168:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  91  171:aload           7
	//*  92  173:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  93  176:invokevirtual   #809 <Method String StringBuilder.toString()>
	//*  94  179:aload_1         
	//*  95  180:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//*  96  183:athrow          
		// Misplaced declaration of an exception variable
		catch(Context context)
	//*  97  184:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Unable to find LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//   98  185:new             #794 <Class IllegalStateException>
	//   99  188:dup             
	//  100  189:new             #796 <Class StringBuilder>
	//  101  192:dup             
	//  102  193:invokespecial   #797 <Method void StringBuilder()>
	//  103  196:aload_3         
	//  104  197:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  105  202:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  106  205:ldc2            #814 <String ": Unable to find LayoutManager ">
	//  107  208:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  108  211:aload           7
	//  109  213:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  110  216:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  111  219:aload_1         
	//  112  220:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  113  223:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 114  224:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  115  225:new             #794 <Class IllegalStateException>
	//  116  228:dup             
	//  117  229:new             #796 <Class StringBuilder>
	//  118  232:dup             
	//  119  233:invokespecial   #797 <Method void StringBuilder()>
	//  120  236:aload_3         
	//  121  237:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  122  242:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  123  245:ldc2            #816 <String ": Could not instantiate the LayoutManager: ">
	//  124  248:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  125  251:aload           7
	//  126  253:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  127  256:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  128  259:aload_1         
	//  129  260:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  130  263:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 131  264:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Could not instantiate the LayoutManager: ").append(s1).toString(), ((Throwable) (context)));
	//  132  265:new             #794 <Class IllegalStateException>
	//  133  268:dup             
	//  134  269:new             #796 <Class StringBuilder>
	//  135  272:dup             
	//  136  273:invokespecial   #797 <Method void StringBuilder()>
	//  137  276:aload_3         
	//  138  277:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  139  282:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  140  285:ldc2            #816 <String ": Could not instantiate the LayoutManager: ">
	//  141  288:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  142  291:aload           7
	//  143  293:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  144  296:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  145  299:aload_1         
	//  146  300:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  147  303:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 148  304:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Cannot access non-public constructor ").append(s1).toString(), ((Throwable) (context)));
	//  149  305:new             #794 <Class IllegalStateException>
	//  150  308:dup             
	//  151  309:new             #796 <Class StringBuilder>
	//  152  312:dup             
	//  153  313:invokespecial   #797 <Method void StringBuilder()>
	//  154  316:aload_3         
	//  155  317:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  156  322:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  157  325:ldc2            #818 <String ": Cannot access non-public constructor ">
	//  158  328:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  159  331:aload           7
	//  160  333:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  161  336:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  162  339:aload_1         
	//  163  340:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  164  343:athrow          
		}
		// Misplaced declaration of an exception variable
		catch(Context context)
	//* 165  344:astore_1        
		{
			throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Class is not a LayoutManager ").append(s1).toString(), ((Throwable) (context)));
	//  166  345:new             #794 <Class IllegalStateException>
	//  167  348:dup             
	//  168  349:new             #796 <Class StringBuilder>
	//  169  352:dup             
	//  170  353:invokespecial   #797 <Method void StringBuilder()>
	//  171  356:aload_3         
	//  172  357:invokeinterface #800 <Method String AttributeSet.getPositionDescription()>
	//  173  362:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  174  365:ldc2            #820 <String ": Class is not a LayoutManager ">
	//  175  368:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  176  371:aload           7
	//  177  373:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  178  376:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  179  379:aload_1         
	//  180  380:invokespecial   #812 <Method void IllegalStateException(String, Throwable)>
	//  181  383:athrow          
		}
_L5:
		s = ((String) (context.getClassLoader()));
		continue; /* Loop/switch isn't completed */
		nosuchmethodexception;
		context = ((Context) (class1.getConstructor(new Class[0])));
		  goto _L6
		context;
		((NoSuchMethodException) (context)).initCause(((Throwable) (nosuchmethodexception)));
		throw new IllegalStateException((new StringBuilder()).append(attributeset.getPositionDescription()).append(": Error creating LayoutManager ").append(s1).toString(), ((Throwable) (context)));
_L2:
		return;
	//  182  384:return          
		if(true) goto _L8; else goto _L7
_L7:
	}

	private boolean didChildRangeChange(int i, int j)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore_3        
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
	//    2    2:aload_0         
	//    3    3:aload_0         
	//    4    4:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//    5    7:invokespecial   #826 <Method void findMinMaxChildLayoutPositions(int[])>
		if(mMinMaxLayoutPositions[0] != i || mMinMaxLayoutPositions[1] != j)
	//*   6   10:aload_0         
	//*   7   11:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*   8   14:iconst_0        
	//*   9   15:iaload          
	//*  10   16:iload_1         
	//*  11   17:icmpne          30
	//*  12   20:aload_0         
	//*  13   21:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*  14   24:iconst_1        
	//*  15   25:iaload          
	//*  16   26:iload_2         
	//*  17   27:icmpeq          32
			flag = true;
	//   18   30:iconst_1        
	//   19   31:istore_3        
		return flag;
	//   20   32:iload_3         
	//   21   33:ireturn         
	}

	private void dispatchContentChangedIfNecessary()
	{
		int i = mEatenAccessibilityChangeFlags;
	//    0    0:aload_0         
	//    1    1:getfield        #829 <Field int mEatenAccessibilityChangeFlags>
	//    2    4:istore_1        
		mEatenAccessibilityChangeFlags = 0;
	//    3    5:aload_0         
	//    4    6:iconst_0        
	//    5    7:putfield        #829 <Field int mEatenAccessibilityChangeFlags>
		if(i != 0 && isAccessibilityEnabled())
	//*   6   10:iload_1         
	//*   7   11:ifeq            42
	//*   8   14:aload_0         
	//*   9   15:invokevirtual   #832 <Method boolean isAccessibilityEnabled()>
	//*  10   18:ifeq            42
		{
			AccessibilityEvent accessibilityevent = AccessibilityEvent.obtain();
	//   11   21:invokestatic    #838 <Method AccessibilityEvent AccessibilityEvent.obtain()>
	//   12   24:astore_2        
			accessibilityevent.setEventType(2048);
	//   13   25:aload_2         
	//   14   26:sipush          2048
	//   15   29:invokevirtual   #841 <Method void AccessibilityEvent.setEventType(int)>
			AccessibilityEventCompat.setContentChangeTypes(accessibilityevent, i);
	//   16   32:aload_2         
	//   17   33:iload_1         
	//   18   34:invokestatic    #847 <Method void AccessibilityEventCompat.setContentChangeTypes(AccessibilityEvent, int)>
			sendAccessibilityEventUnchecked(accessibilityevent);
	//   19   37:aload_0         
	//   20   38:aload_2         
	//   21   39:invokevirtual   #851 <Method void sendAccessibilityEventUnchecked(AccessibilityEvent)>
		}
	//   22   42:return          
	}

	private void dispatchLayoutStep1()
	{
		mState.assertLayoutStep(1);
	//    0    0:aload_0         
	//    1    1:getfield        #431 <Field RecyclerView$State mState>
	//    2    4:iconst_1        
	//    3    5:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		fillRemainingScrollValues(mState);
	//    4    8:aload_0         
	//    5    9:aload_0         
	//    6   10:getfield        #431 <Field RecyclerView$State mState>
	//    7   13:invokevirtual   #859 <Method void fillRemainingScrollValues(RecyclerView$State)>
		mState.mIsMeasuring = false;
	//    8   16:aload_0         
	//    9   17:getfield        #431 <Field RecyclerView$State mState>
	//   10   20:iconst_0        
	//   11   21:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
		eatRequestLayout();
	//   12   24:aload_0         
	//   13   25:invokevirtual   #865 <Method void eatRequestLayout()>
		mViewInfoStore.clear();
	//   14   28:aload_0         
	//   15   29:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   16   32:invokevirtual   #868 <Method void ViewInfoStore.clear()>
		onEnterLayoutOrScroll();
	//   17   35:aload_0         
	//   18   36:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		processAdapterUpdatesAndSetAnimationFlags();
	//   19   39:aload_0         
	//   20   40:invokespecial   #874 <Method void processAdapterUpdatesAndSetAnimationFlags()>
		saveFocusInfo();
	//   21   43:aload_0         
	//   22   44:invokespecial   #877 <Method void saveFocusInfo()>
		State state = mState;
	//   23   47:aload_0         
	//   24   48:getfield        #431 <Field RecyclerView$State mState>
	//   25   51:astore          7
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemsChanged)
	//*  26   53:aload_0         
	//*  27   54:getfield        #431 <Field RecyclerView$State mState>
	//*  28   57:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  29   60:ifeq            197
	//*  30   63:aload_0         
	//*  31   64:getfield        #435 <Field boolean mItemsChanged>
	//*  32   67:ifeq            197
			flag = true;
	//   33   70:iconst_1        
	//   34   71:istore          4
		else
	//*  35   73:aload           7
	//*  36   75:iload           4
	//*  37   77:putfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*  38   80:aload_0         
	//*  39   81:iconst_0        
	//*  40   82:putfield        #435 <Field boolean mItemsChanged>
	//*  41   85:aload_0         
	//*  42   86:iconst_0        
	//*  43   87:putfield        #433 <Field boolean mItemsAddedOrRemoved>
	//*  44   90:aload_0         
	//*  45   91:getfield        #431 <Field RecyclerView$State mState>
	//*  46   94:aload_0         
	//*  47   95:getfield        #431 <Field RecyclerView$State mState>
	//*  48   98:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//*  49  101:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
	//*  50  104:aload_0         
	//*  51  105:getfield        #431 <Field RecyclerView$State mState>
	//*  52  108:aload_0         
	//*  53  109:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  54  112:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//*  55  115:putfield        #897 <Field int RecyclerView$State.mItemCount>
	//*  56  118:aload_0         
	//*  57  119:aload_0         
	//*  58  120:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//*  59  123:invokespecial   #826 <Method void findMinMaxChildLayoutPositions(int[])>
	//*  60  126:aload_0         
	//*  61  127:getfield        #431 <Field RecyclerView$State mState>
	//*  62  130:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  63  133:ifeq            303
	//*  64  136:aload_0         
	//*  65  137:getfield        #663 <Field ChildHelper mChildHelper>
	//*  66  140:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  67  143:istore_2        
	//*  68  144:iconst_0        
	//*  69  145:istore_1        
	//*  70  146:iload_1         
	//*  71  147:iload_2         
	//*  72  148:icmpge          303
	//*  73  151:aload_0         
	//*  74  152:getfield        #663 <Field ChildHelper mChildHelper>
	//*  75  155:iload_1         
	//*  76  156:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//*  77  159:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  78  162:astore          7
	//*  79  164:aload           7
	//*  80  166:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  81  169:ifne            190
	//*  82  172:aload           7
	//*  83  174:invokevirtual   #913 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//*  84  177:ifeq            203
	//*  85  180:aload_0         
	//*  86  181:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  87  184:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  88  187:ifne            203
	//*  89  190:iload_1         
	//*  90  191:iconst_1        
	//*  91  192:iadd            
	//*  92  193:istore_1        
	//*  93  194:goto            146
			flag = false;
	//   94  197:iconst_0        
	//   95  198:istore          4
		state.mTrackOldChangeHolders = flag;
		mItemsChanged = false;
		mItemsAddedOrRemoved = false;
		mState.mInPreLayout = mState.mRunPredictiveAnimations;
		mState.mItemCount = mAdapter.getItemCount();
		findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
		if(mState.mRunSimpleAnimations)
		{
			int k = mChildHelper.getChildCount();
			int i = 0;
			while(i < k) 
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
				if(!viewholder.shouldIgnore() && (!viewholder.isInvalid() || mAdapter.hasStableIds()))
	//*  96  200:goto            73
				{
					ItemAnimator.ItemHolderInfo itemholderinfo = mItemAnimator.recordPreLayoutInformation(mState, viewholder, ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder), viewholder.getUnmodifiedPayloads());
	//   97  203:aload_0         
	//   98  204:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   99  207:aload_0         
	//  100  208:getfield        #431 <Field RecyclerView$State mState>
	//  101  211:aload           7
	//  102  213:aload           7
	//  103  215:invokestatic    #920 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  104  218:aload           7
	//  105  220:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  106  223:invokevirtual   #928 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  107  226:astore          8
					mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//  108  228:aload_0         
	//  109  229:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  110  232:aload           7
	//  111  234:aload           8
	//  112  236:invokevirtual   #932 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore() && !viewholder.isInvalid())
	//* 113  239:aload_0         
	//* 114  240:getfield        #431 <Field RecyclerView$State mState>
	//* 115  243:getfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//* 116  246:ifeq            190
	//* 117  249:aload           7
	//* 118  251:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//* 119  254:ifeq            190
	//* 120  257:aload           7
	//* 121  259:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//* 122  262:ifne            190
	//* 123  265:aload           7
	//* 124  267:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 125  270:ifne            190
	//* 126  273:aload           7
	//* 127  275:invokevirtual   #913 <Method boolean RecyclerView$ViewHolder.isInvalid()>
	//* 128  278:ifne            190
					{
						long l1 = getChangedHolderKey(viewholder);
	//  129  281:aload_0         
	//  130  282:aload           7
	//  131  284:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//  132  287:lstore          5
						mViewInfoStore.addToOldChangeHolders(l1, viewholder);
	//  133  289:aload_0         
	//  134  290:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  135  293:lload           5
	//  136  295:aload           7
	//  137  297:invokevirtual   #946 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
					}
				}
				i++;
			}
		}
	//* 138  300:goto            190
		if(!mState.mRunPredictiveAnimations) goto _L2; else goto _L1
	//  139  303:aload_0         
	//  140  304:getfield        #431 <Field RecyclerView$State mState>
	//  141  307:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//  142  310:ifeq            513
_L1:
		saveOldPositions();
	//  143  313:aload_0         
	//  144  314:invokevirtual   #949 <Method void saveOldPositions()>
		boolean flag1 = mState.mStructureChanged;
	//  145  317:aload_0         
	//  146  318:getfield        #431 <Field RecyclerView$State mState>
	//  147  321:getfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
	//  148  324:istore          4
		mState.mStructureChanged = false;
	//  149  326:aload_0         
	//  150  327:getfield        #431 <Field RecyclerView$State mState>
	//  151  330:iconst_0        
	//  152  331:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		mLayout.onLayoutChildren(mRecycler, mState);
	//  153  334:aload_0         
	//  154  335:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  155  338:aload_0         
	//  156  339:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  157  342:aload_0         
	//  158  343:getfield        #431 <Field RecyclerView$State mState>
	//  159  346:invokevirtual   #958 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = flag1;
	//  160  349:aload_0         
	//  161  350:getfield        #431 <Field RecyclerView$State mState>
	//  162  353:iload           4
	//  163  355:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		int j = 0;
	//  164  358:iconst_0        
	//  165  359:istore_1        
		do
		{
			if(j >= mChildHelper.getChildCount())
				break;
	//  166  360:iload_1         
	//  167  361:aload_0         
	//  168  362:getfield        #663 <Field ChildHelper mChildHelper>
	//  169  365:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//  170  368:icmpge          491
			ViewHolder viewholder1 = getChildViewHolderInt(mChildHelper.getChildAt(j));
	//  171  371:aload_0         
	//  172  372:getfield        #663 <Field ChildHelper mChildHelper>
	//  173  375:iload_1         
	//  174  376:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//  175  379:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//  176  382:astore          7
			if(!viewholder1.shouldIgnore() && !mViewInfoStore.isInPreLayout(viewholder1))
	//* 177  384:aload           7
	//* 178  386:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//* 179  389:ifeq            399
	//* 180  392:iload_1         
	//* 181  393:iconst_1        
	//* 182  394:iadd            
	//* 183  395:istore_1        
	//* 184  396:goto            360
	//* 185  399:aload_0         
	//* 186  400:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//* 187  403:aload           7
	//* 188  405:invokevirtual   #962 <Method boolean ViewInfoStore.isInPreLayout(RecyclerView$ViewHolder)>
	//* 189  408:ifne            392
			{
				int i1 = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewholder1);
	//  190  411:aload           7
	//  191  413:invokestatic    #920 <Method int RecyclerView$ItemAnimator.buildAdapterChangeFlagsForAnimations(RecyclerView$ViewHolder)>
	//  192  416:istore_3        
				boolean flag2 = viewholder1.hasAnyOfTheFlags(8192);
	//  193  417:aload           7
	//  194  419:sipush          8192
	//  195  422:invokevirtual   #966 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//  196  425:istore          4
				int l = i1;
	//  197  427:iload_3         
	//  198  428:istore_2        
				if(!flag2)
	//* 199  429:iload           4
	//* 200  431:ifne            440
					l = i1 | 0x1000;
	//  201  434:iload_3         
	//  202  435:sipush          4096
	//  203  438:ior             
	//  204  439:istore_2        
				ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPreLayoutInformation(mState, viewholder1, l, viewholder1.getUnmodifiedPayloads());
	//  205  440:aload_0         
	//  206  441:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//  207  444:aload_0         
	//  208  445:getfield        #431 <Field RecyclerView$State mState>
	//  209  448:aload           7
	//  210  450:iload_2         
	//  211  451:aload           7
	//  212  453:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//  213  456:invokevirtual   #928 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPreLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder, int, List)>
	//  214  459:astore          8
				if(flag2)
	//* 215  461:iload           4
	//* 216  463:ifeq            477
					recordAnimationInfoIfBouncedHiddenView(viewholder1, itemholderinfo1);
	//  217  466:aload_0         
	//  218  467:aload           7
	//  219  469:aload           8
	//  220  471:invokevirtual   #969 <Method void recordAnimationInfoIfBouncedHiddenView(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
				else
	//* 221  474:goto            392
					mViewInfoStore.addToAppearedInPreLayoutHolders(viewholder1, itemholderinfo1);
	//  222  477:aload_0         
	//  223  478:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  224  481:aload           7
	//  225  483:aload           8
	//  226  485:invokevirtual   #972 <Method void ViewInfoStore.addToAppearedInPreLayoutHolders(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
			}
			j++;
		} while(true);
	//* 227  488:goto            392
		clearOldPositions();
	//  228  491:aload_0         
	//  229  492:invokevirtual   #975 <Method void clearOldPositions()>
_L4:
		onExitLayoutOrScroll();
	//  230  495:aload_0         
	//  231  496:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  232  499:aload_0         
	//  233  500:iconst_0        
	//  234  501:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
		mState.mLayoutStep = 2;
	//  235  504:aload_0         
	//  236  505:getfield        #431 <Field RecyclerView$State mState>
	//  237  508:iconst_2        
	//  238  509:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
		return;
	//  239  512:return          
_L2:
		clearOldPositions();
	//  240  513:aload_0         
	//  241  514:invokevirtual   #975 <Method void clearOldPositions()>
		if(true) goto _L4; else goto _L3
	//  242  517:goto            495
_L3:
	}

	private void dispatchLayoutStep2()
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #865 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		mState.assertLayoutStep(6);
	//    4    8:aload_0         
	//    5    9:getfield        #431 <Field RecyclerView$State mState>
	//    6   12:bipush          6
	//    7   14:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		mAdapterHelper.consumeUpdatesInOnePass();
	//    8   17:aload_0         
	//    9   18:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   10   21:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		mState.mItemCount = mAdapter.getItemCount();
	//   11   24:aload_0         
	//   12   25:getfield        #431 <Field RecyclerView$State mState>
	//   13   28:aload_0         
	//   14   29:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   15   32:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//   16   35:putfield        #897 <Field int RecyclerView$State.mItemCount>
		mState.mDeletedInvisibleItemCountSincePreviousLayout = 0;
	//   17   38:aload_0         
	//   18   39:getfield        #431 <Field RecyclerView$State mState>
	//   19   42:iconst_0        
	//   20   43:putfield        #995 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
		mState.mInPreLayout = false;
	//   21   46:aload_0         
	//   22   47:getfield        #431 <Field RecyclerView$State mState>
	//   23   50:iconst_0        
	//   24   51:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
		mLayout.onLayoutChildren(mRecycler, mState);
	//   25   54:aload_0         
	//   26   55:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   27   58:aload_0         
	//   28   59:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   29   62:aload_0         
	//   30   63:getfield        #431 <Field RecyclerView$State mState>
	//   31   66:invokevirtual   #958 <Method void RecyclerView$LayoutManager.onLayoutChildren(RecyclerView$Recycler, RecyclerView$State)>
		mState.mStructureChanged = false;
	//   32   69:aload_0         
	//   33   70:getfield        #431 <Field RecyclerView$State mState>
	//   34   73:iconst_0        
	//   35   74:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		mPendingSavedState = null;
	//   36   77:aload_0         
	//   37   78:aconst_null     
	//   38   79:putfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
		State state = mState;
	//   39   82:aload_0         
	//   40   83:getfield        #431 <Field RecyclerView$State mState>
	//   41   86:astore_2        
		boolean flag;
		if(mState.mRunSimpleAnimations && mItemAnimator != null)
	//*  42   87:aload_0         
	//*  43   88:getfield        #431 <Field RecyclerView$State mState>
	//*  44   91:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  45   94:ifeq            129
	//*  46   97:aload_0         
	//*  47   98:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  48  101:ifnull          129
			flag = true;
	//   49  104:iconst_1        
	//   50  105:istore_1        
		else
	//*  51  106:aload_2         
	//*  52  107:iload_1         
	//*  53  108:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  54  111:aload_0         
	//*  55  112:getfield        #431 <Field RecyclerView$State mState>
	//*  56  115:iconst_4        
	//*  57  116:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  58  119:aload_0         
	//*  59  120:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
	//*  60  123:aload_0         
	//*  61  124:iconst_0        
	//*  62  125:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  63  128:return          
			flag = false;
	//   64  129:iconst_0        
	//   65  130:istore_1        
		state.mRunSimpleAnimations = flag;
		mState.mLayoutStep = 4;
		onExitLayoutOrScroll();
		resumeRequestLayout(false);
	//*  66  131:goto            106
	}

	private void dispatchLayoutStep3()
	{
		mState.assertLayoutStep(4);
	//    0    0:aload_0         
	//    1    1:getfield        #431 <Field RecyclerView$State mState>
	//    2    4:iconst_4        
	//    3    5:invokevirtual   #855 <Method void RecyclerView$State.assertLayoutStep(int)>
		eatRequestLayout();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #865 <Method void eatRequestLayout()>
		onEnterLayoutOrScroll();
	//    6   12:aload_0         
	//    7   13:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
		mState.mLayoutStep = 1;
	//    8   16:aload_0         
	//    9   17:getfield        #431 <Field RecyclerView$State mState>
	//   10   20:iconst_1        
	//   11   21:putfield        #984 <Field int RecyclerView$State.mLayoutStep>
		if(mState.mRunSimpleAnimations)
	//*  12   24:aload_0         
	//*  13   25:getfield        #431 <Field RecyclerView$State mState>
	//*  14   28:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  15   31:ifeq            263
		{
			int i = mChildHelper.getChildCount() - 1;
	//   16   34:aload_0         
	//   17   35:getfield        #663 <Field ChildHelper mChildHelper>
	//   18   38:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//   19   41:iconst_1        
	//   20   42:isub            
	//   21   43:istore_1        
			while(i >= 0) 
	//*  22   44:iload_1         
	//*  23   45:iflt            252
			{
				ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//   24   48:aload_0         
	//   25   49:getfield        #663 <Field ChildHelper mChildHelper>
	//   26   52:iload_1         
	//   27   53:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   28   56:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   59:astore          6
				if(!viewholder.shouldIgnore())
	//*  30   61:aload           6
	//*  31   63:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   66:ifeq            76
	//*  33   69:iload_1         
	//*  34   70:iconst_1        
	//*  35   71:isub            
	//*  36   72:istore_1        
	//*  37   73:goto            44
				{
					long l = getChangedHolderKey(viewholder);
	//   38   76:aload_0         
	//   39   77:aload           6
	//   40   79:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   41   82:lstore_2        
					ItemAnimator.ItemHolderInfo itemholderinfo1 = mItemAnimator.recordPostLayoutInformation(mState, viewholder);
	//   42   83:aload_0         
	//   43   84:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   44   87:aload_0         
	//   45   88:getfield        #431 <Field RecyclerView$State mState>
	//   46   91:aload           6
	//   47   93:invokevirtual   #1002 <Method RecyclerView$ItemAnimator$ItemHolderInfo RecyclerView$ItemAnimator.recordPostLayoutInformation(RecyclerView$State, RecyclerView$ViewHolder)>
	//   48   96:astore          9
					ViewHolder viewholder1 = mViewInfoStore.getFromOldChangeHolders(l);
	//   49   98:aload_0         
	//   50   99:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   51  102:lload_2         
	//   52  103:invokevirtual   #1006 <Method RecyclerView$ViewHolder ViewInfoStore.getFromOldChangeHolders(long)>
	//   53  106:astore          7
					if(viewholder1 != null && !viewholder1.shouldIgnore())
	//*  54  108:aload           7
	//*  55  110:ifnull          238
	//*  56  113:aload           7
	//*  57  115:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  58  118:ifne            238
					{
						boolean flag = mViewInfoStore.isDisappearing(viewholder1);
	//   59  121:aload_0         
	//   60  122:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   61  125:aload           7
	//   62  127:invokevirtual   #1009 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   63  130:istore          4
						boolean flag1 = mViewInfoStore.isDisappearing(viewholder);
	//   64  132:aload_0         
	//   65  133:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   66  136:aload           6
	//   67  138:invokevirtual   #1009 <Method boolean ViewInfoStore.isDisappearing(RecyclerView$ViewHolder)>
	//   68  141:istore          5
						if(flag && viewholder1 == viewholder)
	//*  69  143:iload           4
	//*  70  145:ifeq            169
	//*  71  148:aload           7
	//*  72  150:aload           6
	//*  73  152:if_acmpne       169
						{
							mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   74  155:aload_0         
	//   75  156:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   76  159:aload           6
	//   77  161:aload           9
	//   78  163:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
						} else
	//*  79  166:goto            69
						{
							ItemAnimator.ItemHolderInfo itemholderinfo = mViewInfoStore.popFromPreLayout(viewholder1);
	//   80  169:aload_0         
	//   81  170:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   82  173:aload           7
	//   83  175:invokevirtual   #1016 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPreLayout(RecyclerView$ViewHolder)>
	//   84  178:astore          8
							mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//   85  180:aload_0         
	//   86  181:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   87  184:aload           6
	//   88  186:aload           9
	//   89  188:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
							itemholderinfo1 = mViewInfoStore.popFromPostLayout(viewholder);
	//   90  191:aload_0         
	//   91  192:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   92  195:aload           6
	//   93  197:invokevirtual   #1019 <Method RecyclerView$ItemAnimator$ItemHolderInfo ViewInfoStore.popFromPostLayout(RecyclerView$ViewHolder)>
	//   94  200:astore          9
							if(itemholderinfo == null)
	//*  95  202:aload           8
	//*  96  204:ifnonnull       219
								handleMissingPreInfoForChangeError(l, viewholder, viewholder1);
	//   97  207:aload_0         
	//   98  208:lload_2         
	//   99  209:aload           6
	//  100  211:aload           7
	//  101  213:invokespecial   #1023 <Method void handleMissingPreInfoForChangeError(long, RecyclerView$ViewHolder, RecyclerView$ViewHolder)>
							else
	//* 102  216:goto            69
								animateChange(viewholder1, viewholder, itemholderinfo, itemholderinfo1, flag, flag1);
	//  103  219:aload_0         
	//  104  220:aload           7
	//  105  222:aload           6
	//  106  224:aload           8
	//  107  226:aload           9
	//  108  228:iload           4
	//  109  230:iload           5
	//  110  232:invokespecial   #1025 <Method void animateChange(RecyclerView$ViewHolder, RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo, boolean, boolean)>
						}
					} else
	//* 111  235:goto            69
					{
						mViewInfoStore.addToPostLayout(viewholder, itemholderinfo1);
	//  112  238:aload_0         
	//  113  239:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  114  242:aload           6
	//  115  244:aload           9
	//  116  246:invokevirtual   #1012 <Method void ViewInfoStore.addToPostLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
					}
				}
				i--;
			}
	//* 117  249:goto            69
			mViewInfoStore.process(mViewInfoProcessCallback);
	//  118  252:aload_0         
	//  119  253:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  120  256:aload_0         
	//  121  257:getfield        #456 <Field ViewInfoStore$ProcessCallback mViewInfoProcessCallback>
	//  122  260:invokevirtual   #1029 <Method void ViewInfoStore.process(ViewInfoStore$ProcessCallback)>
		}
		mLayout.removeAndRecycleScrapInt(mRecycler);
	//  123  263:aload_0         
	//  124  264:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  125  267:aload_0         
	//  126  268:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  127  271:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		mState.mPreviousLayoutItemCount = mState.mItemCount;
	//  128  274:aload_0         
	//  129  275:getfield        #431 <Field RecyclerView$State mState>
	//  130  278:aload_0         
	//  131  279:getfield        #431 <Field RecyclerView$State mState>
	//  132  282:getfield        #897 <Field int RecyclerView$State.mItemCount>
	//  133  285:putfield        #1036 <Field int RecyclerView$State.mPreviousLayoutItemCount>
		mDataSetHasChangedAfterLayout = false;
	//  134  288:aload_0         
	//  135  289:iconst_0        
	//  136  290:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		mState.mRunSimpleAnimations = false;
	//  137  293:aload_0         
	//  138  294:getfield        #431 <Field RecyclerView$State mState>
	//  139  297:iconst_0        
	//  140  298:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
		mState.mRunPredictiveAnimations = false;
	//  141  301:aload_0         
	//  142  302:getfield        #431 <Field RecyclerView$State mState>
	//  143  305:iconst_0        
	//  144  306:putfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
		mLayout.mRequestedSimpleAnimations = false;
	//  145  309:aload_0         
	//  146  310:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  147  313:iconst_0        
	//  148  314:putfield        #1039 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
		if(mRecycler.mChangedScrap != null)
	//* 149  317:aload_0         
	//* 150  318:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 151  321:getfield        #1042 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//* 152  324:ifnull          337
			mRecycler.mChangedScrap.clear();
	//  153  327:aload_0         
	//  154  328:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  155  331:getfield        #1042 <Field ArrayList RecyclerView$Recycler.mChangedScrap>
	//  156  334:invokevirtual   #1043 <Method void ArrayList.clear()>
		if(mLayout.mPrefetchMaxObservedInInitialPrefetch)
	//* 157  337:aload_0         
	//* 158  338:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 159  341:getfield        #1046 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
	//* 160  344:ifeq            370
		{
			mLayout.mPrefetchMaxCountObserved = 0;
	//  161  347:aload_0         
	//  162  348:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  163  351:iconst_0        
	//  164  352:putfield        #1049 <Field int RecyclerView$LayoutManager.mPrefetchMaxCountObserved>
			mLayout.mPrefetchMaxObservedInInitialPrefetch = false;
	//  165  355:aload_0         
	//  166  356:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  167  359:iconst_0        
	//  168  360:putfield        #1046 <Field boolean RecyclerView$LayoutManager.mPrefetchMaxObservedInInitialPrefetch>
			mRecycler.updateViewCacheSize();
	//  169  363:aload_0         
	//  170  364:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  171  367:invokevirtual   #1052 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		}
		mLayout.onLayoutCompleted(mState);
	//  172  370:aload_0         
	//  173  371:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  174  374:aload_0         
	//  175  375:getfield        #431 <Field RecyclerView$State mState>
	//  176  378:invokevirtual   #1055 <Method void RecyclerView$LayoutManager.onLayoutCompleted(RecyclerView$State)>
		onExitLayoutOrScroll();
	//  177  381:aload_0         
	//  178  382:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
		resumeRequestLayout(false);
	//  179  385:aload_0         
	//  180  386:iconst_0        
	//  181  387:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
		mViewInfoStore.clear();
	//  182  390:aload_0         
	//  183  391:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//  184  394:invokevirtual   #868 <Method void ViewInfoStore.clear()>
		if(didChildRangeChange(mMinMaxLayoutPositions[0], mMinMaxLayoutPositions[1]))
	//* 185  397:aload_0         
	//* 186  398:aload_0         
	//* 187  399:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 188  402:iconst_0        
	//* 189  403:iaload          
	//* 190  404:aload_0         
	//* 191  405:getfield        #442 <Field int[] mMinMaxLayoutPositions>
	//* 192  408:iconst_1        
	//* 193  409:iaload          
	//* 194  410:invokespecial   #1057 <Method boolean didChildRangeChange(int, int)>
	//* 195  413:ifeq            422
			dispatchOnScrolled(0, 0);
	//  196  416:aload_0         
	//  197  417:iconst_0        
	//  198  418:iconst_0        
	//  199  419:invokevirtual   #1060 <Method void dispatchOnScrolled(int, int)>
		recoverFocusFromState();
	//  200  422:aload_0         
	//  201  423:invokespecial   #1063 <Method void recoverFocusFromState()>
		resetFocusInfo();
	//  202  426:aload_0         
	//  203  427:invokespecial   #1066 <Method void resetFocusInfo()>
	//  204  430:return          
	}

	private boolean dispatchOnItemTouch(MotionEvent motionevent)
	{
		int i = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//    2    4:istore_2        
		if(mActiveOnItemTouchListener == null) goto _L2; else goto _L1
	//    3    5:aload_0         
	//    4    6:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//    5    9:ifnull          21
_L1:
		if(i != 0) goto _L4; else goto _L3
	//    6   12:iload_2         
	//    7   13:ifne            73
_L3:
		mActiveOnItemTouchListener = null;
	//    8   16:aload_0         
	//    9   17:aconst_null     
	//   10   18:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
_L2:
		if(i == 0) goto _L6; else goto _L5
	//   11   21:iload_2         
	//   12   22:ifeq            108
_L5:
		int j;
		j = mOnItemTouchListeners.size();
	//   13   25:aload_0         
	//   14   26:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   15   29:invokevirtual   #1078 <Method int ArrayList.size()>
	//   16   32:istore_3        
		i = 0;
	//   17   33:iconst_0        
	//   18   34:istore_2        
_L11:
		OnItemTouchListener onitemtouchlistener;
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//   19   35:iload_2         
	//   20   36:iload_3         
	//   21   37:icmpge          108
		onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   22   40:aload_0         
	//   23   41:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   24   44:iload_2         
	//   25   45:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   26   48:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   27   51:astore          4
		if(!onitemtouchlistener.onInterceptTouchEvent(this, motionevent)) goto _L8; else goto _L7
	//   28   53:aload           4
	//   29   55:aload_0         
	//   30   56:aload_1         
	//   31   57:invokeinterface #1085 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//   32   62:ifeq            101
_L7:
		mActiveOnItemTouchListener = onitemtouchlistener;
	//   33   65:aload_0         
	//   34   66:aload           4
	//   35   68:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
_L10:
		return true;
	//   36   71:iconst_1        
	//   37   72:ireturn         
_L4:
		mActiveOnItemTouchListener.onTouchEvent(this, motionevent);
	//   38   73:aload_0         
	//   39   74:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   40   77:aload_0         
	//   41   78:aload_1         
	//   42   79:invokeinterface #1089 <Method void RecyclerView$OnItemTouchListener.onTouchEvent(RecyclerView, MotionEvent)>
		if(i != 3 && i != 1) goto _L10; else goto _L9
	//   43   84:iload_2         
	//   44   85:iconst_3        
	//   45   86:icmpeq          94
	//   46   89:iload_2         
	//   47   90:iconst_1        
	//   48   91:icmpne          71
_L9:
		mActiveOnItemTouchListener = null;
	//   49   94:aload_0         
	//   50   95:aconst_null     
	//   51   96:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		return true;
	//   52   99:iconst_1        
	//   53  100:ireturn         
_L8:
		i++;
	//   54  101:iload_2         
	//   55  102:iconst_1        
	//   56  103:iadd            
	//   57  104:istore_2        
		if(true) goto _L11; else goto _L6
	//   58  105:goto            35
_L6:
		return false;
	//   59  108:iconst_0        
	//   60  109:ireturn         
	}

	private boolean dispatchOnItemTouchIntercept(MotionEvent motionevent)
	{
		int j = motionevent.getAction();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//    2    4:istore_3        
		if(j == 3 || j == 0)
	//*   3    5:iload_3         
	//*   4    6:iconst_3        
	//*   5    7:icmpeq          14
	//*   6   10:iload_3         
	//*   7   11:ifne            19
			mActiveOnItemTouchListener = null;
	//    8   14:aload_0         
	//    9   15:aconst_null     
	//   10   16:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
		int k = mOnItemTouchListeners.size();
	//   11   19:aload_0         
	//   12   20:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   13   23:invokevirtual   #1078 <Method int ArrayList.size()>
	//   14   26:istore          4
		for(int i = 0; i < k; i++)
	//*  15   28:iconst_0        
	//*  16   29:istore_2        
	//*  17   30:iload_2         
	//*  18   31:iload           4
	//*  19   33:icmpge          81
		{
			OnItemTouchListener onitemtouchlistener = (OnItemTouchListener)mOnItemTouchListeners.get(i);
	//   20   36:aload_0         
	//   21   37:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   22   40:iload_2         
	//   23   41:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   24   44:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   25   47:astore          5
			if(onitemtouchlistener.onInterceptTouchEvent(this, motionevent) && j != 3)
	//*  26   49:aload           5
	//*  27   51:aload_0         
	//*  28   52:aload_1         
	//*  29   53:invokeinterface #1085 <Method boolean RecyclerView$OnItemTouchListener.onInterceptTouchEvent(RecyclerView, MotionEvent)>
	//*  30   58:ifeq            74
	//*  31   61:iload_3         
	//*  32   62:iconst_3        
	//*  33   63:icmpeq          74
			{
				mActiveOnItemTouchListener = onitemtouchlistener;
	//   34   66:aload_0         
	//   35   67:aload           5
	//   36   69:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
				return true;
	//   37   72:iconst_1        
	//   38   73:ireturn         
			}
		}

	//   39   74:iload_2         
	//   40   75:iconst_1        
	//   41   76:iadd            
	//   42   77:istore_2        
	//*  43   78:goto            30
		return false;
	//   44   81:iconst_0        
	//   45   82:ireturn         
	}

	private void findMinMaxChildLayoutPositions(int ai[])
	{
		int k1 = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          8
		if(k1 == 0)
	//*   4    9:iload           8
	//*   5   11:ifne            23
		{
			ai[0] = -1;
	//    6   14:aload_1         
	//    7   15:iconst_0        
	//    8   16:iconst_m1       
	//    9   17:iastore         
			ai[1] = -1;
	//   10   18:aload_1         
	//   11   19:iconst_1        
	//   12   20:iconst_m1       
	//   13   21:iastore         
			return;
	//   14   22:return          
		}
		int j = 0x7fffffff;
	//   15   23:ldc2            #1091 <Int 0x7fffffff>
	//   16   26:istore_3        
		int l = 0x80000000;
	//   17   27:ldc2            #1092 <Int 0x80000000>
	//   18   30:istore          5
		int k = 0;
	//   19   32:iconst_0        
	//   20   33:istore          4
		while(k < k1) 
	//*  21   35:iload           4
	//*  22   37:iload           8
	//*  23   39:icmpge          125
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getChildAt(k));
	//   24   42:aload_0         
	//   25   43:getfield        #663 <Field ChildHelper mChildHelper>
	//   26   46:iload           4
	//   27   48:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   28   51:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   29   54:astore          9
			int j1;
			if(viewholder.shouldIgnore())
	//*  30   56:aload           9
	//*  31   58:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  32   61:ifeq            85
			{
				j1 = j;
	//   33   64:iload_3         
	//   34   65:istore          7
				j = l;
	//   35   67:iload           5
	//   36   69:istore_3        
			} else
	//*  37   70:iload           4
	//*  38   72:iconst_1        
	//*  39   73:iadd            
	//*  40   74:istore          4
	//*  41   76:iload_3         
	//*  42   77:istore          5
	//*  43   79:iload           7
	//*  44   81:istore_3        
	//*  45   82:goto            35
			{
				int i1 = viewholder.getLayoutPosition();
	//   46   85:aload           9
	//   47   87:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   48   90:istore          6
				int i = j;
	//   49   92:iload_3         
	//   50   93:istore_2        
				if(i1 < j)
	//*  51   94:iload           6
	//*  52   96:iload_3         
	//*  53   97:icmpge          103
					i = i1;
	//   54  100:iload           6
	//   55  102:istore_2        
				j = l;
	//   56  103:iload           5
	//   57  105:istore_3        
				j1 = i;
	//   58  106:iload_2         
	//   59  107:istore          7
				if(i1 > l)
	//*  60  109:iload           6
	//*  61  111:iload           5
	//*  62  113:icmple          70
				{
					j = i1;
	//   63  116:iload           6
	//   64  118:istore_3        
					j1 = i;
	//   65  119:iload_2         
	//   66  120:istore          7
				}
			}
			k++;
			l = j;
			j = j1;
		}
	//*  67  122:goto            70
		ai[0] = j;
	//   68  125:aload_1         
	//   69  126:iconst_0        
	//   70  127:iload_3         
	//   71  128:iastore         
		ai[1] = l;
	//   72  129:aload_1         
	//   73  130:iconst_1        
	//   74  131:iload           5
	//   75  133:iastore         
	//   76  134:return          
	}

	static RecyclerView findNestedRecyclerView(View view)
	{
		if(!(view instanceof ViewGroup))
	//*   0    0:aload_0         
	//*   1    1:instanceof      #4   <Class ViewGroup>
	//*   2    4:ifne            9
			return null;
	//    3    7:aconst_null     
	//    4    8:areturn         
		if(view instanceof RecyclerView)
	//*   5    9:aload_0         
	//*   6   10:instanceof      #2   <Class RecyclerView>
	//*   7   13:ifeq            21
			return (RecyclerView)view;
	//    8   16:aload_0         
	//    9   17:checkcast       #2   <Class RecyclerView>
	//   10   20:areturn         
		view = ((View) ((ViewGroup)view));
	//   11   21:aload_0         
	//   12   22:checkcast       #4   <Class ViewGroup>
	//   13   25:astore_0        
		int j = ((ViewGroup) (view)).getChildCount();
	//   14   26:aload_0         
	//   15   27:invokevirtual   #1098 <Method int ViewGroup.getChildCount()>
	//   16   30:istore_2        
		for(int i = 0; i < j; i++)
	//*  17   31:iconst_0        
	//*  18   32:istore_1        
	//*  19   33:iload_1         
	//*  20   34:iload_2         
	//*  21   35:icmpge          60
		{
			RecyclerView recyclerview = findNestedRecyclerView(((ViewGroup) (view)).getChildAt(i));
	//   22   38:aload_0         
	//   23   39:iload_1         
	//   24   40:invokevirtual   #1099 <Method View ViewGroup.getChildAt(int)>
	//   25   43:invokestatic    #1101 <Method RecyclerView findNestedRecyclerView(View)>
	//   26   46:astore_3        
			if(recyclerview != null)
	//*  27   47:aload_3         
	//*  28   48:ifnull          53
				return recyclerview;
	//   29   51:aload_3         
	//   30   52:areturn         
		}

	//   31   53:iload_1         
	//   32   54:iconst_1        
	//   33   55:iadd            
	//   34   56:istore_1        
	//*  35   57:goto            33
		return null;
	//   36   60:aconst_null     
	//   37   61:areturn         
	}

	private View findNextViewToFocus()
	{
		int i;
		int j;
		ViewHolder viewholder;
		int k;
		if(mState.mFocusedItemPosition != -1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #431 <Field RecyclerView$State mState>
	//*   2    4:getfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//*   3    7:iconst_m1       
	//*   4    8:icmpeq          72
			i = mState.mFocusedItemPosition;
	//    5   11:aload_0         
	//    6   12:getfield        #431 <Field RecyclerView$State mState>
	//    7   15:getfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//    8   18:istore_1        
		else
	//*   9   19:aload_0         
	//*  10   20:getfield        #431 <Field RecyclerView$State mState>
	//*  11   23:invokevirtual   #1108 <Method int RecyclerView$State.getItemCount()>
	//*  12   26:istore_3        
	//*  13   27:iload_1         
	//*  14   28:istore_2        
	//*  15   29:iload_2         
	//*  16   30:iload_3         
	//*  17   31:icmpge          46
	//*  18   34:aload_0         
	//*  19   35:iload_2         
	//*  20   36:invokevirtual   #1112 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//*  21   39:astore          4
	//*  22   41:aload           4
	//*  23   43:ifnonnull       77
	//*  24   46:iload_3         
	//*  25   47:iload_1         
	//*  26   48:invokestatic    #1117 <Method int Math.min(int, int)>
	//*  27   51:iconst_1        
	//*  28   52:isub            
	//*  29   53:istore_1        
	//*  30   54:iload_1         
	//*  31   55:iflt            70
	//*  32   58:aload_0         
	//*  33   59:iload_1         
	//*  34   60:invokevirtual   #1112 <Method RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
	//*  35   63:astore          4
	//*  36   65:aload           4
	//*  37   67:ifnonnull       101
	//*  38   70:aconst_null     
	//*  39   71:areturn         
			i = 0;
	//   40   72:iconst_0        
	//   41   73:istore_1        
		k = mState.getItemCount();
		j = i;
_L4:
		if(j >= k) goto _L2; else goto _L1
_L1:
		viewholder = findViewHolderForAdapterPosition(j);
		if(viewholder != null) goto _L3; else goto _L2
_L2:
		i = Math.min(k, i) - 1;
_L5:
		if(i >= 0)
		{
			viewholder = findViewHolderForAdapterPosition(i);
			if(viewholder != null)
				break MISSING_BLOCK_LABEL_101;
		}
		return null;
	//*  42   74:goto            19
_L3:
		if(viewholder.itemView.hasFocusable())
	//*  43   77:aload           4
	//*  44   79:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  45   82:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  46   85:ifeq            94
			return viewholder.itemView;
	//   47   88:aload           4
	//   48   90:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   49   93:areturn         
		j++;
	//   50   94:iload_2         
	//   51   95:iconst_1        
	//   52   96:iadd            
	//   53   97:istore_2        
		  goto _L4
	//*  54   98:goto            29
		if(viewholder.itemView.hasFocusable())
	//*  55  101:aload           4
	//*  56  103:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  57  106:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  58  109:ifeq            118
			return viewholder.itemView;
	//   59  112:aload           4
	//   60  114:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   61  117:areturn         
		i--;
	//   62  118:iload_1         
	//   63  119:iconst_1        
	//   64  120:isub            
	//   65  121:istore_1        
		  goto _L5
	//*  66  122:goto            54
	}

	static ViewHolder getChildViewHolderInt(View view)
	{
		if(view == null)
	//*   0    0:aload_0         
	//*   1    1:ifnonnull       6
			return null;
	//    2    4:aconst_null     
	//    3    5:areturn         
		else
			return ((LayoutParams)view.getLayoutParams()).mViewHolder;
	//    4    6:aload_0         
	//    5    7:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    6   10:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   13:getfield        #1123 <Field RecyclerView$ViewHolder RecyclerView$LayoutParams.mViewHolder>
	//    8   16:areturn         
	}

	static void getDecoratedBoundsWithMarginsInt(View view, Rect rect)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore_2        
		Rect rect1 = layoutparams.mDecorInsets;
	//    4    8:aload_2         
	//    5    9:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    6   12:astore_3        
		rect.set(view.getLeft() - rect1.left - layoutparams.leftMargin, view.getTop() - rect1.top - layoutparams.topMargin, view.getRight() + rect1.right + layoutparams.rightMargin, view.getBottom() + rect1.bottom + layoutparams.bottomMargin);
	//    7   13:aload_1         
	//    8   14:aload_0         
	//    9   15:invokevirtual   #1131 <Method int View.getLeft()>
	//   10   18:aload_3         
	//   11   19:getfield        #1134 <Field int Rect.left>
	//   12   22:isub            
	//   13   23:aload_2         
	//   14   24:getfield        #1137 <Field int RecyclerView$LayoutParams.leftMargin>
	//   15   27:isub            
	//   16   28:aload_0         
	//   17   29:invokevirtual   #1140 <Method int View.getTop()>
	//   18   32:aload_3         
	//   19   33:getfield        #1143 <Field int Rect.top>
	//   20   36:isub            
	//   21   37:aload_2         
	//   22   38:getfield        #1146 <Field int RecyclerView$LayoutParams.topMargin>
	//   23   41:isub            
	//   24   42:aload_0         
	//   25   43:invokevirtual   #1149 <Method int View.getRight()>
	//   26   46:aload_3         
	//   27   47:getfield        #1152 <Field int Rect.right>
	//   28   50:iadd            
	//   29   51:aload_2         
	//   30   52:getfield        #1155 <Field int RecyclerView$LayoutParams.rightMargin>
	//   31   55:iadd            
	//   32   56:aload_0         
	//   33   57:invokevirtual   #1158 <Method int View.getBottom()>
	//   34   60:aload_3         
	//   35   61:getfield        #1161 <Field int Rect.bottom>
	//   36   64:iadd            
	//   37   65:aload_2         
	//   38   66:getfield        #1164 <Field int RecyclerView$LayoutParams.bottomMargin>
	//   39   69:iadd            
	//   40   70:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
	//   41   73:return          
	}

	private int getDeepestFocusedViewWithId(View view)
	{
		int i = view.getId();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1172 <Method int View.getId()>
	//    2    4:istore_2        
		do
		{
			if(view.isFocused() || !(view instanceof ViewGroup) || !view.hasFocus())
				break;
	//    3    5:aload_1         
	//    4    6:invokevirtual   #1175 <Method boolean View.isFocused()>
	//    5    9:ifne            54
	//    6   12:aload_1         
	//    7   13:instanceof      #4   <Class ViewGroup>
	//    8   16:ifeq            54
	//    9   19:aload_1         
	//   10   20:invokevirtual   #1178 <Method boolean View.hasFocus()>
	//   11   23:ifeq            54
			View view1 = ((ViewGroup)view).getFocusedChild();
	//   12   26:aload_1         
	//   13   27:checkcast       #4   <Class ViewGroup>
	//   14   30:invokevirtual   #1181 <Method View ViewGroup.getFocusedChild()>
	//   15   33:astore_3        
			view = view1;
	//   16   34:aload_3         
	//   17   35:astore_1        
			if(view1.getId() != -1)
	//*  18   36:aload_3         
	//*  19   37:invokevirtual   #1172 <Method int View.getId()>
	//*  20   40:iconst_m1       
	//*  21   41:icmpeq          5
			{
				i = view1.getId();
	//   22   44:aload_3         
	//   23   45:invokevirtual   #1172 <Method int View.getId()>
	//   24   48:istore_2        
				view = view1;
	//   25   49:aload_3         
	//   26   50:astore_1        
			}
		} while(true);
	//   27   51:goto            5
		return i;
	//   28   54:iload_2         
	//   29   55:ireturn         
	}

	private String getFullClassName(Context context, String s)
	{
		if(s.charAt(0) == '.')
	//*   0    0:aload_2         
	//*   1    1:iconst_0        
	//*   2    2:invokevirtual   #1185 <Method char String.charAt(int)>
	//*   3    5:bipush          46
	//*   4    7:icmpne          34
		{
			context = ((Context) ((new StringBuilder()).append(context.getPackageName()).append(s).toString()));
	//    5   10:new             #796 <Class StringBuilder>
	//    6   13:dup             
	//    7   14:invokespecial   #797 <Method void StringBuilder()>
	//    8   17:aload_1         
	//    9   18:invokevirtual   #1188 <Method String Context.getPackageName()>
	//   10   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   11   24:aload_2         
	//   12   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   28:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   31:astore_1        
		} else
	//*  15   32:aload_1         
	//*  16   33:areturn         
		{
			context = ((Context) (s));
	//   17   34:aload_2         
	//   18   35:astore_1        
			if(!s.contains("."))
	//*  19   36:aload_2         
	//*  20   37:ldc2            #1190 <String ".">
	//*  21   40:invokevirtual   #1194 <Method boolean String.contains(CharSequence)>
	//*  22   43:ifne            32
				return (new StringBuilder()).append(((Class) (android/support/v7/widget/RecyclerView)).getPackage().getName()).append('.').append(s).toString();
	//   23   46:new             #796 <Class StringBuilder>
	//   24   49:dup             
	//   25   50:invokespecial   #797 <Method void StringBuilder()>
	//   26   53:ldc1            #2   <Class RecyclerView>
	//   27   55:invokevirtual   #1198 <Method Package Class.getPackage()>
	//   28   58:invokevirtual   #1203 <Method String Package.getName()>
	//   29   61:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   30   64:bipush          46
	//   31   66:invokevirtual   #1206 <Method StringBuilder StringBuilder.append(char)>
	//   32   69:aload_2         
	//   33   70:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   34   73:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   35   76:areturn         
		}
		return ((String) (context));
	}

	private NestedScrollingChildHelper getScrollingChildHelper()
	{
		if(mScrollingChildHelper == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//*   2    4:ifnonnull       19
			mScrollingChildHelper = new NestedScrollingChildHelper(((View) (this)));
	//    3    7:aload_0         
	//    4    8:new             #1212 <Class NestedScrollingChildHelper>
	//    5   11:dup             
	//    6   12:aload_0         
	//    7   13:invokespecial   #1214 <Method void NestedScrollingChildHelper(View)>
	//    8   16:putfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
		return mScrollingChildHelper;
	//    9   19:aload_0         
	//   10   20:getfield        #1210 <Field NestedScrollingChildHelper mScrollingChildHelper>
	//   11   23:areturn         
	}

	private void handleMissingPreInfoForChangeError(long l, ViewHolder viewholder, ViewHolder viewholder1)
	{
		int i;
		int j;
		j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore          6
		i = 0;
	//    4    9:iconst_0        
	//    5   10:istore          5
_L3:
		ViewHolder viewholder2;
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//    6   12:iload           5
	//    7   14:iload           6
	//    8   16:icmpge          168
		viewholder2 = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           5
	//   12   25:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          7
		  goto _L1
	//*  15   33:aload           7
	//*  16   35:aload_3         
	//*  17   36:if_acmpne       48
_L5:
		i++;
	//   18   39:iload           5
	//   19   41:iconst_1        
	//   20   42:iadd            
	//   21   43:istore          5
		if(true) goto _L3; else goto _L2
	//   22   45:goto            12
_L1:
		if(viewholder2 == viewholder || getChangedHolderKey(viewholder2) != l) goto _L5; else goto _L4
	//   23   48:aload_0         
	//   24   49:aload           7
	//   25   51:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   26   54:lload_1         
	//   27   55:lcmp            
	//   28   56:ifne            39
_L4:
		if(mAdapter != null && mAdapter.hasStableIds())
	//*  29   59:aload_0         
	//*  30   60:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  31   63:ifnull          122
	//*  32   66:aload_0         
	//*  33   67:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  34   70:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  35   73:ifeq            122
			throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   36   76:new             #794 <Class IllegalStateException>
	//   37   79:dup             
	//   38   80:new             #796 <Class StringBuilder>
	//   39   83:dup             
	//   40   84:invokespecial   #797 <Method void StringBuilder()>
	//   41   87:ldc2            #1216 <String "Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:">
	//   42   90:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   43   93:aload           7
	//   44   95:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   45   98:ldc2            #1221 <String " \n View Holder 2:">
	//   46  101:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   47  104:aload_3         
	//   48  105:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   49  108:aload_0         
	//   50  109:invokevirtual   #1224 <Method String exceptionLabel()>
	//   51  112:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   52  115:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   53  118:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   54  121:athrow          
		else
			throw new IllegalStateException((new StringBuilder()).append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:").append(((Object) (viewholder2))).append(" \n View Holder 2:").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   55  122:new             #794 <Class IllegalStateException>
	//   56  125:dup             
	//   57  126:new             #796 <Class StringBuilder>
	//   58  129:dup             
	//   59  130:invokespecial   #797 <Method void StringBuilder()>
	//   60  133:ldc2            #1229 <String "Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:">
	//   61  136:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   62  139:aload           7
	//   63  141:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   64  144:ldc2            #1221 <String " \n View Holder 2:">
	//   65  147:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   66  150:aload_3         
	//   67  151:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   68  154:aload_0         
	//   69  155:invokevirtual   #1224 <Method String exceptionLabel()>
	//   70  158:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   71  161:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   72  164:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   73  167:athrow          
_L2:
		Log.e("RecyclerView", (new StringBuilder()).append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ").append(((Object) (viewholder1))).append(" cannot be found but it is necessary for ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   74  168:ldc1            #168 <String "RecyclerView">
	//   75  170:new             #796 <Class StringBuilder>
	//   76  173:dup             
	//   77  174:invokespecial   #797 <Method void StringBuilder()>
	//   78  177:ldc2            #1231 <String "Problem while matching changed view holders with the newones. The pre-layout information for the change holder ">
	//   79  180:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   80  183:aload           4
	//   81  185:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   82  188:ldc2            #1233 <String " cannot be found but it is necessary for ">
	//   83  191:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   84  194:aload_3         
	//   85  195:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   86  198:aload_0         
	//   87  199:invokevirtual   #1224 <Method String exceptionLabel()>
	//   88  202:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   89  205:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   90  208:invokestatic    #1239 <Method int Log.e(String, String)>
	//   91  211:pop             
		return;
	//   92  212:return          
	}

	private boolean hasUpdatedView()
	{
		int i;
		int j;
		j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		i = 0;
	//    4    8:iconst_0        
	//    5    9:istore_1        
_L3:
		ViewHolder viewholder;
		if(i >= j)
			break; /* Loop/switch isn't completed */
	//    6   10:iload_1         
	//    7   11:iload_2         
	//    8   12:icmpge          54
		viewholder = getChildViewHolderInt(mChildHelper.getChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
		  goto _L1
	//*  15   27:aload_3         
	//*  16   28:ifnull          38
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifeq            45
_L5:
		i++;
	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
		if(true) goto _L3; else goto _L2
	//   24   42:goto            10
_L1:
		if(viewholder == null || viewholder.shouldIgnore() || !viewholder.isUpdated()) goto _L5; else goto _L4
	//   25   45:aload_3         
	//   26   46:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//   27   49:ifeq            38
_L4:
		return true;
	//   28   52:iconst_1        
	//   29   53:ireturn         
_L2:
		return false;
	//   30   54:iconst_0        
	//   31   55:ireturn         
	}

	private void initChildrenHelper()
	{
		mChildHelper = new ChildHelper(new ChildHelper.Callback() {

			public void addView(View view, int i)
			{
				RecyclerView.this.addView(view, i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #24  <Method void RecyclerView.addView(View, int)>
				dispatchChildAttached(view);
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:aload_1         
			//    8   14:invokevirtual   #28  <Method void RecyclerView.dispatchChildAttached(View)>
			//    9   17:return          
			}

			public void attachViewToParent(View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
			{
				ViewHolder viewholder = RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore          4
				if(viewholder != null)
			//*   3    6:aload           4
			//*   4    8:ifnull          70
				{
					if(!viewholder.isTmpDetached() && !viewholder.shouldIgnore())
			//*   5   11:aload           4
			//*   6   13:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*   7   16:ifne            65
			//*   8   19:aload           4
			//*   9   21:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  10   24:ifne            65
						throw new IllegalArgumentException((new StringBuilder()).append("Called attach on a child which is not detached: ").append(((Object) (viewholder))).append(exceptionLabel()).toString());
			//   11   27:new             #45  <Class IllegalArgumentException>
			//   12   30:dup             
			//   13   31:new             #47  <Class StringBuilder>
			//   14   34:dup             
			//   15   35:invokespecial   #48  <Method void StringBuilder()>
			//   16   38:ldc1            #50  <String "Called attach on a child which is not detached: ">
			//   17   40:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   18   43:aload           4
			//   19   45:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   20   48:aload_0         
			//   21   49:getfield        #17  <Field RecyclerView this$0>
			//   22   52:invokevirtual   #61  <Method String RecyclerView.exceptionLabel()>
			//   23   55:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   24   58:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   25   61:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   26   64:athrow          
					viewholder.clearTmpDetachFlag();
			//   27   65:aload           4
			//   28   67:invokevirtual   #70  <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
				}
				RecyclerView.this.attachViewToParent(view, i, layoutparams);
			//   29   70:aload_0         
			//   30   71:getfield        #17  <Field RecyclerView this$0>
			//   31   74:aload_1         
			//   32   75:iload_2         
			//   33   76:aload_3         
			//   34   77:invokestatic    #74  <Method void RecyclerView.access$000(RecyclerView, View, int, android.view.ViewGroup$LayoutParams)>
			//   35   80:return          
			}

			public void detachViewFromParent(int i)
			{
				Object obj = ((Object) (getChildAt(i)));
			//    0    0:aload_0         
			//    1    1:iload_1         
			//    2    2:invokevirtual   #80  <Method View getChildAt(int)>
			//    3    5:astore_2        
				if(obj != null)
			//*   4    6:aload_2         
			//*   5    7:ifnull          77
				{
					obj = ((Object) (RecyclerView.getChildViewHolderInt(((View) (obj)))));
			//    6   10:aload_2         
			//    7   11:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    8   14:astore_2        
					if(obj != null)
			//*   9   15:aload_2         
			//*  10   16:ifnull          77
					{
						if(((ViewHolder) (obj)).isTmpDetached() && !((ViewHolder) (obj)).shouldIgnore())
			//*  11   19:aload_2         
			//*  12   20:invokevirtual   #40  <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
			//*  13   23:ifeq            70
			//*  14   26:aload_2         
			//*  15   27:invokevirtual   #43  <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
			//*  16   30:ifne            70
							throw new IllegalArgumentException((new StringBuilder()).append("called detach on an already detached child ").append(obj).append(exceptionLabel()).toString());
			//   17   33:new             #45  <Class IllegalArgumentException>
			//   18   36:dup             
			//   19   37:new             #47  <Class StringBuilder>
			//   20   40:dup             
			//   21   41:invokespecial   #48  <Method void StringBuilder()>
			//   22   44:ldc1            #82  <String "called detach on an already detached child ">
			//   23   46:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   24   49:aload_2         
			//   25   50:invokevirtual   #57  <Method StringBuilder StringBuilder.append(Object)>
			//   26   53:aload_0         
			//   27   54:getfield        #17  <Field RecyclerView this$0>
			//   28   57:invokevirtual   #61  <Method String RecyclerView.exceptionLabel()>
			//   29   60:invokevirtual   #54  <Method StringBuilder StringBuilder.append(String)>
			//   30   63:invokevirtual   #64  <Method String StringBuilder.toString()>
			//   31   66:invokespecial   #67  <Method void IllegalArgumentException(String)>
			//   32   69:athrow          
						((ViewHolder) (obj)).addFlags(256);
			//   33   70:aload_2         
			//   34   71:sipush          256
			//   35   74:invokevirtual   #85  <Method void RecyclerView$ViewHolder.addFlags(int)>
					}
				}
				RecyclerView.this.detachViewFromParent(i);
			//   36   77:aload_0         
			//   37   78:getfield        #17  <Field RecyclerView this$0>
			//   38   81:iload_1         
			//   39   82:invokestatic    #89  <Method void RecyclerView.access$100(RecyclerView, int)>
			//   40   85:return          
			}

			public View getChildAt(int i)
			{
				return RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:areturn         
			}

			public int getChildCount()
			{
				return RecyclerView.this.getChildCount();
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:invokevirtual   #94  <Method int RecyclerView.getChildCount()>
			//    3    7:ireturn         
			}

			public ViewHolder getChildViewHolder(View view)
			{
				return RecyclerView.getChildViewHolderInt(view);
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:areturn         
			}

			public int indexOfChild(View view)
			{
				return RecyclerView.this.indexOfChild(view);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:aload_1         
			//    3    5:invokevirtual   #99  <Method int RecyclerView.indexOfChild(View)>
			//    4    8:ireturn         
			}

			public void onEnteredHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onEnteredHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #104 <Method void RecyclerView$ViewHolder.access$200(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void onLeftHiddenState(View view)
			{
				view = ((View) (RecyclerView.getChildViewHolderInt(view)));
			//    0    0:aload_1         
			//    1    1:invokestatic    #34  <Method RecyclerView$ViewHolder RecyclerView.getChildViewHolderInt(View)>
			//    2    4:astore_1        
				if(view != null)
			//*   3    5:aload_1         
			//*   4    6:ifnull          17
					((ViewHolder) (view)).onLeftHiddenState(RecyclerView.this);
			//    5    9:aload_1         
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:invokestatic    #108 <Method void RecyclerView$ViewHolder.access$300(RecyclerView$ViewHolder, RecyclerView)>
			//    9   17:return          
			}

			public void removeAllViews()
			{
				int j = getChildCount();
			//    0    0:aload_0         
			//    1    1:invokevirtual   #110 <Method int getChildCount()>
			//    2    4:istore_2        
				for(int i = 0; i < j; i++)
			//*   3    5:iconst_0        
			//*   4    6:istore_1        
			//*   5    7:iload_1         
			//*   6    8:iload_2         
			//*   7    9:icmpge          37
				{
					View view = getChildAt(i);
			//    8   12:aload_0         
			//    9   13:iload_1         
			//   10   14:invokevirtual   #80  <Method View getChildAt(int)>
			//   11   17:astore_3        
					dispatchChildDetached(view);
			//   12   18:aload_0         
			//   13   19:getfield        #17  <Field RecyclerView this$0>
			//   14   22:aload_3         
			//   15   23:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   16   26:aload_3         
			//   17   27:invokevirtual   #118 <Method void View.clearAnimation()>
				}

			//   18   30:iload_1         
			//   19   31:iconst_1        
			//   20   32:iadd            
			//   21   33:istore_1        
			//*  22   34:goto            7
				RecyclerView.this.removeAllViews();
			//   23   37:aload_0         
			//   24   38:getfield        #17  <Field RecyclerView this$0>
			//   25   41:invokevirtual   #120 <Method void RecyclerView.removeAllViews()>
			//   26   44:return          
			}

			public void removeViewAt(int i)
			{
				View view = RecyclerView.this.getChildAt(i);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:invokevirtual   #90  <Method View RecyclerView.getChildAt(int)>
			//    4    8:astore_2        
				if(view != null)
			//*   5    9:aload_2         
			//*   6   10:ifnull          25
				{
					dispatchChildDetached(view);
			//    7   13:aload_0         
			//    8   14:getfield        #17  <Field RecyclerView this$0>
			//    9   17:aload_2         
			//   10   18:invokevirtual   #113 <Method void RecyclerView.dispatchChildDetached(View)>
					view.clearAnimation();
			//   11   21:aload_2         
			//   12   22:invokevirtual   #118 <Method void View.clearAnimation()>
				}
				RecyclerView.this.removeViewAt(i);
			//   13   25:aload_0         
			//   14   26:getfield        #17  <Field RecyclerView this$0>
			//   15   29:iload_1         
			//   16   30:invokevirtual   #123 <Method void RecyclerView.removeViewAt(int)>
			//   17   33:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #669 <Class ChildHelper>
	//    2    4:dup             
	//    3    5:new             #18  <Class RecyclerView$5>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1241 <Method void RecyclerView$5(RecyclerView)>
	//    7   13:invokespecial   #1244 <Method void ChildHelper(ChildHelper$Callback)>
	//    8   16:putfield        #663 <Field ChildHelper mChildHelper>
	//    9   19:return          
	}

	private boolean isPreferredNextFocus(View view, View view1, int i)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          5
		boolean flag2 = true;
	//    2    3:iconst_1        
	//    3    4:istore          7
		boolean flag1;
		if(view1 == null || view1 == this)
	//*   4    6:aload_2         
	//*   5    7:ifnull          15
	//*   6   10:aload_2         
	//*   7   11:aload_0         
	//*   8   12:if_acmpne       21
		{
			flag1 = false;
	//    9   15:iconst_0        
	//   10   16:istore          6
		} else
	//*  11   18:iload           6
	//*  12   20:ireturn         
		{
			flag1 = flag2;
	//   13   21:iload           7
	//   14   23:istore          6
			if(view != null)
	//*  15   25:aload_1         
	//*  16   26:ifnull          18
				if(i == 2 || i == 1)
	//*  17   29:iload_3         
	//*  18   30:iconst_2        
	//*  19   31:icmpeq          39
	//*  20   34:iload_3         
	//*  21   35:iconst_1        
	//*  22   36:icmpne          125
				{
					byte byte0;
					if(mLayout.getLayoutDirection() == 1)
	//*  23   39:aload_0         
	//*  24   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  25   43:invokevirtual   #1249 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  26   46:iconst_1        
	//*  27   47:icmpne          103
						byte0 = 1;
	//   28   50:iconst_1        
	//   29   51:istore          4
					else
	//*  30   53:iload_3         
	//*  31   54:iconst_2        
	//*  32   55:icmpne          61
	//*  33   58:iconst_1        
	//*  34   59:istore          5
	//*  35   61:iload           5
	//*  36   63:iload           4
	//*  37   65:ixor            
	//*  38   66:ifeq            109
	//*  39   69:bipush          66
	//*  40   71:istore          4
	//*  41   73:iload           7
	//*  42   75:istore          6
	//*  43   77:aload_0         
	//*  44   78:aload_1         
	//*  45   79:aload_2         
	//*  46   80:iload           4
	//*  47   82:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//*  48   85:ifne            18
	//*  49   88:iload_3         
	//*  50   89:iconst_2        
	//*  51   90:icmpne          116
	//*  52   93:aload_0         
	//*  53   94:aload_1         
	//*  54   95:aload_2         
	//*  55   96:sipush          130
	//*  56   99:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//*  57  102:ireturn         
						byte0 = 0;
	//   58  103:iconst_0        
	//   59  104:istore          4
					if(i == 2)
						flag = true;
					if(flag ^ byte0)
						byte0 = 66;
					else
	//*  60  106:goto            53
						byte0 = 17;
	//   61  109:bipush          17
	//   62  111:istore          4
					flag1 = flag2;
					if(!isPreferredNextFocusAbsolute(view, view1, ((int) (byte0))))
						if(i == 2)
							return isPreferredNextFocusAbsolute(view, view1, 130);
						else
	//*  63  113:goto            73
							return isPreferredNextFocusAbsolute(view, view1, 33);
	//   64  116:aload_0         
	//   65  117:aload_1         
	//   66  118:aload_2         
	//   67  119:bipush          33
	//   68  121:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   69  124:ireturn         
				} else
				{
					return isPreferredNextFocusAbsolute(view, view1, i);
	//   70  125:aload_0         
	//   71  126:aload_1         
	//   72  127:aload_2         
	//   73  128:iload_3         
	//   74  129:invokespecial   #1252 <Method boolean isPreferredNextFocusAbsolute(View, View, int)>
	//   75  132:ireturn         
				}
		}
		return flag1;
	}

	private boolean isPreferredNextFocusAbsolute(View view, View view1, int i)
	{
		mTempRect.set(0, 0, view.getWidth(), view.getHeight());
	//    0    0:aload_0         
	//    1    1:getfield        #382 <Field Rect mTempRect>
	//    2    4:iconst_0        
	//    3    5:iconst_0        
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1255 <Method int View.getWidth()>
	//    6   10:aload_1         
	//    7   11:invokevirtual   #1258 <Method int View.getHeight()>
	//    8   14:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		mTempRect2.set(0, 0, view1.getWidth(), view1.getHeight());
	//    9   17:aload_0         
	//   10   18:getfield        #384 <Field Rect mTempRect2>
	//   11   21:iconst_0        
	//   12   22:iconst_0        
	//   13   23:aload_2         
	//   14   24:invokevirtual   #1255 <Method int View.getWidth()>
	//   15   27:aload_2         
	//   16   28:invokevirtual   #1258 <Method int View.getHeight()>
	//   17   31:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		offsetDescendantRectToMyCoords(view, mTempRect);
	//   18   34:aload_0         
	//   19   35:aload_1         
	//   20   36:aload_0         
	//   21   37:getfield        #382 <Field Rect mTempRect>
	//   22   40:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		offsetDescendantRectToMyCoords(view1, mTempRect2);
	//   23   43:aload_0         
	//   24   44:aload_2         
	//   25   45:aload_0         
	//   26   46:getfield        #384 <Field Rect mTempRect2>
	//   27   49:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
		i;
	//   28   52:iload_3         
		JVM INSTR lookupswitch 4: default 96
	//	               17: 131
	//	               33: 239
	//	               66: 186
	//	               130: 292;
	//   29   53:lookupswitch    4: default 96
	//	               17: 131
	//	               33: 239
	//	               66: 186
	//	               130: 292
		   goto _L1 _L2 _L3 _L4 _L5
_L1:
		throw new IllegalArgumentException((new StringBuilder()).append("direction must be absolute. received:").append(i).append(exceptionLabel()).toString());
	//   30   96:new             #1263 <Class IllegalArgumentException>
	//   31   99:dup             
	//   32  100:new             #796 <Class StringBuilder>
	//   33  103:dup             
	//   34  104:invokespecial   #797 <Method void StringBuilder()>
	//   35  107:ldc2            #1265 <String "direction must be absolute. received:">
	//   36  110:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   37  113:iload_3         
	//   38  114:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//   39  117:aload_0         
	//   40  118:invokevirtual   #1224 <Method String exceptionLabel()>
	//   41  121:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   42  124:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   43  127:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   44  130:athrow          
_L2:
		if(mTempRect.right <= mTempRect2.right && mTempRect.left < mTempRect2.right || mTempRect.left <= mTempRect2.left) goto _L7; else goto _L6
	//   45  131:aload_0         
	//   46  132:getfield        #382 <Field Rect mTempRect>
	//   47  135:getfield        #1152 <Field int Rect.right>
	//   48  138:aload_0         
	//   49  139:getfield        #384 <Field Rect mTempRect2>
	//   50  142:getfield        #1152 <Field int Rect.right>
	//   51  145:icmpgt          165
	//   52  148:aload_0         
	//   53  149:getfield        #382 <Field Rect mTempRect>
	//   54  152:getfield        #1134 <Field int Rect.left>
	//   55  155:aload_0         
	//   56  156:getfield        #384 <Field Rect mTempRect2>
	//   57  159:getfield        #1152 <Field int Rect.right>
	//   58  162:icmplt          184
	//   59  165:aload_0         
	//   60  166:getfield        #382 <Field Rect mTempRect>
	//   61  169:getfield        #1134 <Field int Rect.left>
	//   62  172:aload_0         
	//   63  173:getfield        #384 <Field Rect mTempRect2>
	//   64  176:getfield        #1134 <Field int Rect.left>
	//   65  179:icmple          184
_L6:
		return true;
	//   66  182:iconst_1        
	//   67  183:ireturn         
_L7:
		return false;
	//   68  184:iconst_0        
	//   69  185:ireturn         
_L4:
		if(mTempRect.left >= mTempRect2.left && mTempRect.right > mTempRect2.left || mTempRect.right >= mTempRect2.right)
	//*  70  186:aload_0         
	//*  71  187:getfield        #382 <Field Rect mTempRect>
	//*  72  190:getfield        #1134 <Field int Rect.left>
	//*  73  193:aload_0         
	//*  74  194:getfield        #384 <Field Rect mTempRect2>
	//*  75  197:getfield        #1134 <Field int Rect.left>
	//*  76  200:icmplt          220
	//*  77  203:aload_0         
	//*  78  204:getfield        #382 <Field Rect mTempRect>
	//*  79  207:getfield        #1152 <Field int Rect.right>
	//*  80  210:aload_0         
	//*  81  211:getfield        #384 <Field Rect mTempRect2>
	//*  82  214:getfield        #1134 <Field int Rect.left>
	//*  83  217:icmpgt          237
	//*  84  220:aload_0         
	//*  85  221:getfield        #382 <Field Rect mTempRect>
	//*  86  224:getfield        #1152 <Field int Rect.right>
	//*  87  227:aload_0         
	//*  88  228:getfield        #384 <Field Rect mTempRect2>
	//*  89  231:getfield        #1152 <Field int Rect.right>
	//*  90  234:icmplt          182
			return false;
	//   91  237:iconst_0        
	//   92  238:ireturn         
		continue; /* Loop/switch isn't completed */
_L3:
		if(mTempRect.bottom <= mTempRect2.bottom && mTempRect.top < mTempRect2.bottom || mTempRect.top <= mTempRect2.top)
	//*  93  239:aload_0         
	//*  94  240:getfield        #382 <Field Rect mTempRect>
	//*  95  243:getfield        #1161 <Field int Rect.bottom>
	//*  96  246:aload_0         
	//*  97  247:getfield        #384 <Field Rect mTempRect2>
	//*  98  250:getfield        #1161 <Field int Rect.bottom>
	//*  99  253:icmpgt          273
	//* 100  256:aload_0         
	//* 101  257:getfield        #382 <Field Rect mTempRect>
	//* 102  260:getfield        #1143 <Field int Rect.top>
	//* 103  263:aload_0         
	//* 104  264:getfield        #384 <Field Rect mTempRect2>
	//* 105  267:getfield        #1161 <Field int Rect.bottom>
	//* 106  270:icmplt          290
	//* 107  273:aload_0         
	//* 108  274:getfield        #382 <Field Rect mTempRect>
	//* 109  277:getfield        #1143 <Field int Rect.top>
	//* 110  280:aload_0         
	//* 111  281:getfield        #384 <Field Rect mTempRect2>
	//* 112  284:getfield        #1143 <Field int Rect.top>
	//* 113  287:icmpgt          182
			return false;
	//  114  290:iconst_0        
	//  115  291:ireturn         
		continue; /* Loop/switch isn't completed */
_L5:
		if(mTempRect.top >= mTempRect2.top && mTempRect.bottom > mTempRect2.top || mTempRect.bottom >= mTempRect2.bottom)
	//* 116  292:aload_0         
	//* 117  293:getfield        #382 <Field Rect mTempRect>
	//* 118  296:getfield        #1143 <Field int Rect.top>
	//* 119  299:aload_0         
	//* 120  300:getfield        #384 <Field Rect mTempRect2>
	//* 121  303:getfield        #1143 <Field int Rect.top>
	//* 122  306:icmplt          326
	//* 123  309:aload_0         
	//* 124  310:getfield        #382 <Field Rect mTempRect>
	//* 125  313:getfield        #1161 <Field int Rect.bottom>
	//* 126  316:aload_0         
	//* 127  317:getfield        #384 <Field Rect mTempRect2>
	//* 128  320:getfield        #1143 <Field int Rect.top>
	//* 129  323:icmpgt          343
	//* 130  326:aload_0         
	//* 131  327:getfield        #382 <Field Rect mTempRect>
	//* 132  330:getfield        #1161 <Field int Rect.bottom>
	//* 133  333:aload_0         
	//* 134  334:getfield        #384 <Field Rect mTempRect2>
	//* 135  337:getfield        #1161 <Field int Rect.bottom>
	//* 136  340:icmplt          182
			return false;
	//  137  343:iconst_0        
	//  138  344:ireturn         
		if(true) goto _L6; else goto _L8
_L8:
	}

	private void onPointerUp(MotionEvent motionevent)
	{
		int i = motionevent.getActionIndex();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//    2    4:istore_2        
		if(motionevent.getPointerId(i) == mScrollPointerId)
	//*   3    5:aload_1         
	//*   4    6:iload_2         
	//*   5    7:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//*   6   10:aload_0         
	//*   7   11:getfield        #413 <Field int mScrollPointerId>
	//*   8   14:icmpne          74
		{
			int j;
			if(i == 0)
	//*   9   17:iload_2         
	//*  10   18:ifne            75
				i = 1;
	//   11   21:iconst_1        
	//   12   22:istore_2        
			else
	//*  13   23:aload_0         
	//*  14   24:aload_1         
	//*  15   25:iload_2         
	//*  16   26:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//*  17   29:putfield        #413 <Field int mScrollPointerId>
	//*  18   32:aload_1         
	//*  19   33:iload_2         
	//*  20   34:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//*  21   37:ldc2            #1283 <Float 0.5F>
	//*  22   40:fadd            
	//*  23   41:f2i             
	//*  24   42:istore_3        
	//*  25   43:aload_0         
	//*  26   44:iload_3         
	//*  27   45:putfield        #1285 <Field int mLastTouchX>
	//*  28   48:aload_0         
	//*  29   49:iload_3         
	//*  30   50:putfield        #1287 <Field int mInitialTouchX>
	//*  31   53:aload_1         
	//*  32   54:iload_2         
	//*  33   55:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//*  34   58:ldc2            #1283 <Float 0.5F>
	//*  35   61:fadd            
	//*  36   62:f2i             
	//*  37   63:istore_2        
	//*  38   64:aload_0         
	//*  39   65:iload_2         
	//*  40   66:putfield        #1292 <Field int mLastTouchY>
	//*  41   69:aload_0         
	//*  42   70:iload_2         
	//*  43   71:putfield        #1294 <Field int mInitialTouchY>
	//*  44   74:return          
				i = 0;
	//   45   75:iconst_0        
	//   46   76:istore_2        
			mScrollPointerId = motionevent.getPointerId(i);
			j = (int)(motionevent.getX(i) + 0.5F);
			mLastTouchX = j;
			mInitialTouchX = j;
			i = (int)(motionevent.getY(i) + 0.5F);
			mLastTouchY = i;
			mInitialTouchY = i;
		}
	//*  47   77:goto            23
	}

	private boolean predictiveItemAnimationsEnabled()
	{
		return mItemAnimator != null && mLayout.supportsPredictiveItemAnimations();
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1298 <Method boolean RecyclerView$LayoutManager.supportsPredictiveItemAnimations()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	private void processAdapterUpdatesAndSetAnimationFlags()
	{
		boolean flag2 = true;
	//    0    0:iconst_1        
	//    1    1:istore_3        
		if(mDataSetHasChangedAfterLayout)
	//*   2    2:aload_0         
	//*   3    3:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*   4    6:ifeq            24
		{
			mAdapterHelper.reset();
	//    5    9:aload_0         
	//    6   10:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//    7   13:invokevirtual   #1301 <Method void AdapterHelper.reset()>
			mLayout.onItemsChanged(this);
	//    8   16:aload_0         
	//    9   17:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   10   20:aload_0         
	//   11   21:invokevirtual   #1304 <Method void RecyclerView$LayoutManager.onItemsChanged(RecyclerView)>
		}
		boolean flag;
		boolean flag1;
		State state;
		if(predictiveItemAnimationsEnabled())
	//*  12   24:aload_0         
	//*  13   25:invokespecial   #1306 <Method boolean predictiveItemAnimationsEnabled()>
	//*  14   28:ifeq            163
			mAdapterHelper.preProcess();
	//   15   31:aload_0         
	//   16   32:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   17   35:invokevirtual   #1309 <Method void AdapterHelper.preProcess()>
		else
	//*  18   38:aload_0         
	//*  19   39:getfield        #433 <Field boolean mItemsAddedOrRemoved>
	//*  20   42:ifne            52
	//*  21   45:aload_0         
	//*  22   46:getfield        #435 <Field boolean mItemsChanged>
	//*  23   49:ifeq            173
	//*  24   52:iconst_1        
	//*  25   53:istore_1        
	//*  26   54:aload_0         
	//*  27   55:getfield        #431 <Field RecyclerView$State mState>
	//*  28   58:astore          4
	//*  29   60:aload_0         
	//*  30   61:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  31   64:ifeq            178
	//*  32   67:aload_0         
	//*  33   68:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  34   71:ifnull          178
	//*  35   74:aload_0         
	//*  36   75:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  37   78:ifne            95
	//*  38   81:iload_1         
	//*  39   82:ifne            95
	//*  40   85:aload_0         
	//*  41   86:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  42   89:getfield        #1039 <Field boolean RecyclerView$LayoutManager.mRequestedSimpleAnimations>
	//*  43   92:ifeq            178
	//*  44   95:aload_0         
	//*  45   96:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  46   99:ifeq            112
	//*  47  102:aload_0         
	//*  48  103:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  49  106:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  50  109:ifeq            178
	//*  51  112:iconst_1        
	//*  52  113:istore_2        
	//*  53  114:aload           4
	//*  54  116:iload_2         
	//*  55  117:putfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  56  120:aload_0         
	//*  57  121:getfield        #431 <Field RecyclerView$State mState>
	//*  58  124:astore          4
	//*  59  126:aload_0         
	//*  60  127:getfield        #431 <Field RecyclerView$State mState>
	//*  61  130:getfield        #880 <Field boolean RecyclerView$State.mRunSimpleAnimations>
	//*  62  133:ifeq            183
	//*  63  136:iload_1         
	//*  64  137:ifeq            183
	//*  65  140:aload_0         
	//*  66  141:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  67  144:ifne            183
	//*  68  147:aload_0         
	//*  69  148:invokespecial   #1306 <Method boolean predictiveItemAnimationsEnabled()>
	//*  70  151:ifeq            183
	//*  71  154:iload_3         
	//*  72  155:istore_2        
	//*  73  156:aload           4
	//*  74  158:iload_2         
	//*  75  159:putfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//*  76  162:return          
			mAdapterHelper.consumeUpdatesInOnePass();
	//   77  163:aload_0         
	//   78  164:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   79  167:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
		if(mItemsAddedOrRemoved || mItemsChanged)
			flag = true;
		else
	//*  80  170:goto            38
			flag = false;
	//   81  173:iconst_0        
	//   82  174:istore_1        
		state = mState;
		if(mFirstLayoutComplete && mItemAnimator != null && (mDataSetHasChangedAfterLayout || flag || mLayout.mRequestedSimpleAnimations) && (!mDataSetHasChangedAfterLayout || mAdapter.hasStableIds()))
			flag1 = true;
		else
	//*  83  175:goto            54
			flag1 = false;
	//   84  178:iconst_0        
	//   85  179:istore_2        
		state.mRunSimpleAnimations = flag1;
		state = mState;
		if(mState.mRunSimpleAnimations && flag && !mDataSetHasChangedAfterLayout && predictiveItemAnimationsEnabled())
			flag1 = flag2;
		else
	//*  86  180:goto            114
			flag1 = false;
	//   87  183:iconst_0        
	//   88  184:istore_2        
		state.mRunPredictiveAnimations = flag1;
	//*  89  185:goto            156
	}

	private void pullGlows(float f, float f1, float f2, float f3)
	{
		boolean flag = false;
	//    0    0:iconst_0        
	//    1    1:istore          5
		if(f1 < 0.0F)
	//*   2    3:fload_2         
	//*   3    4:fconst_0        
	//*   4    5:fcmpg           
	//*   5    6:ifge            100
		{
			ensureLeftGlow();
	//    6    9:aload_0         
	//    7   10:invokevirtual   #1316 <Method void ensureLeftGlow()>
			EdgeEffectCompat.onPull(mLeftGlow, -f1 / (float)getWidth(), 1.0F - f2 / (float)getHeight());
	//    8   13:aload_0         
	//    9   14:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   10   17:fload_2         
	//   11   18:fneg            
	//   12   19:aload_0         
	//   13   20:invokevirtual   #1319 <Method int getWidth()>
	//   14   23:i2f             
	//   15   24:fdiv            
	//   16   25:fconst_1        
	//   17   26:fload_3         
	//   18   27:aload_0         
	//   19   28:invokevirtual   #1320 <Method int getHeight()>
	//   20   31:i2f             
	//   21   32:fdiv            
	//   22   33:fsub            
	//   23   34:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   24   37:iconst_1        
	//   25   38:istore          5
		} else
	//*  26   40:fload           4
	//*  27   42:fconst_0        
	//*  28   43:fcmpg           
	//*  29   44:ifge            137
	//*  30   47:aload_0         
	//*  31   48:invokevirtual   #1329 <Method void ensureTopGlow()>
	//*  32   51:aload_0         
	//*  33   52:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  34   55:fload           4
	//*  35   57:fneg            
	//*  36   58:aload_0         
	//*  37   59:invokevirtual   #1320 <Method int getHeight()>
	//*  38   62:i2f             
	//*  39   63:fdiv            
	//*  40   64:fload_1         
	//*  41   65:aload_0         
	//*  42   66:invokevirtual   #1319 <Method int getWidth()>
	//*  43   69:i2f             
	//*  44   70:fdiv            
	//*  45   71:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
	//*  46   74:iconst_1        
	//*  47   75:istore          5
	//*  48   77:iload           5
	//*  49   79:ifne            95
	//*  50   82:fload_2         
	//*  51   83:fconst_0        
	//*  52   84:fcmpl           
	//*  53   85:ifne            95
	//*  54   88:fload           4
	//*  55   90:fconst_0        
	//*  56   91:fcmpl           
	//*  57   92:ifeq            99
	//*  58   95:aload_0         
	//*  59   96:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//*  60   99:return          
		if(f1 > 0.0F)
	//*  61  100:fload_2         
	//*  62  101:fconst_0        
	//*  63  102:fcmpl           
	//*  64  103:ifle            40
		{
			ensureRightGlow();
	//   65  106:aload_0         
	//   66  107:invokevirtual   #1337 <Method void ensureRightGlow()>
			EdgeEffectCompat.onPull(mRightGlow, f1 / (float)getWidth(), f2 / (float)getHeight());
	//   67  110:aload_0         
	//   68  111:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   69  114:fload_2         
	//   70  115:aload_0         
	//   71  116:invokevirtual   #1319 <Method int getWidth()>
	//   72  119:i2f             
	//   73  120:fdiv            
	//   74  121:fload_3         
	//   75  122:aload_0         
	//   76  123:invokevirtual   #1320 <Method int getHeight()>
	//   77  126:i2f             
	//   78  127:fdiv            
	//   79  128:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//   80  131:iconst_1        
	//   81  132:istore          5
		}
		if(f3 < 0.0F)
		{
			ensureTopGlow();
			EdgeEffectCompat.onPull(mTopGlow, -f3 / (float)getHeight(), f / (float)getWidth());
			flag = true;
		} else
	//*  82  134:goto            40
		if(f3 > 0.0F)
	//*  83  137:fload           4
	//*  84  139:fconst_0        
	//*  85  140:fcmpl           
	//*  86  141:ifle            77
		{
			ensureBottomGlow();
	//   87  144:aload_0         
	//   88  145:invokevirtual   #1342 <Method void ensureBottomGlow()>
			EdgeEffectCompat.onPull(mBottomGlow, f3 / (float)getHeight(), 1.0F - f / (float)getWidth());
	//   89  148:aload_0         
	//   90  149:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   91  152:fload           4
	//   92  154:aload_0         
	//   93  155:invokevirtual   #1320 <Method int getHeight()>
	//   94  158:i2f             
	//   95  159:fdiv            
	//   96  160:fconst_1        
	//   97  161:fload_1         
	//   98  162:aload_0         
	//   99  163:invokevirtual   #1319 <Method int getWidth()>
	//  100  166:i2f             
	//  101  167:fdiv            
	//  102  168:fsub            
	//  103  169:invokestatic    #1326 <Method void EdgeEffectCompat.onPull(EdgeEffect, float, float)>
			flag = true;
	//  104  172:iconst_1        
	//  105  173:istore          5
		}
		if(flag || f1 != 0.0F || f3 != 0.0F)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//* 106  175:goto            77
	}

	private void recoverFocusFromState()
	{
		if(mPreserveFocusAfterLayout && mAdapter != null && hasFocus() && getDescendantFocusability() != 0x60000 && (getDescendantFocusability() != 0x20000 || !isFocused())) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ifeq            48
	//    3    7:aload_0         
	//    4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    5   11:ifnull          48
	//    6   14:aload_0         
	//    7   15:invokevirtual   #1345 <Method boolean hasFocus()>
	//    8   18:ifeq            48
	//    9   21:aload_0         
	//   10   22:invokevirtual   #1348 <Method int getDescendantFocusability()>
	//   11   25:ldc2            #1349 <Int 0x60000>
	//   12   28:icmpeq          48
	//   13   31:aload_0         
	//   14   32:invokevirtual   #1348 <Method int getDescendantFocusability()>
	//   15   35:ldc2            #1350 <Int 0x20000>
	//   16   38:icmpne          49
	//   17   41:aload_0         
	//   18   42:invokevirtual   #1351 <Method boolean isFocused()>
	//   19   45:ifeq            49
_L1:
		return;
	//   20   48:return          
_L2:
		View view;
		if(isFocused())
			break; /* Loop/switch isn't completed */
	//   21   49:aload_0         
	//   22   50:invokevirtual   #1351 <Method boolean isFocused()>
	//   23   53:ifne            108
		view = getFocusedChild();
	//   24   56:aload_0         
	//   25   57:invokevirtual   #1352 <Method View getFocusedChild()>
	//   26   60:astore_1        
		if(!IGNORE_DETACHED_FOCUSED_CHILD || view.getParent() != null && view.hasFocus())
			continue; /* Loop/switch isn't completed */
	//   27   61:getstatic       #331 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//   28   64:ifeq            97
	//   29   67:aload_1         
	//   30   68:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   31   71:ifnull          81
	//   32   74:aload_1         
	//   33   75:invokevirtual   #1178 <Method boolean View.hasFocus()>
	//   34   78:ifne            97
		if(mChildHelper.getChildCount() == 0)
	//*  35   81:aload_0         
	//*  36   82:getfield        #663 <Field ChildHelper mChildHelper>
	//*  37   85:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  38   88:ifne            108
		{
			requestFocus();
	//   39   91:aload_0         
	//   40   92:invokevirtual   #1355 <Method boolean requestFocus()>
	//   41   95:pop             
			return;
	//   42   96:return          
		}
		break; /* Loop/switch isn't completed */
		if(!mChildHelper.isHidden(view)) goto _L1; else goto _L3
	//   43   97:aload_0         
	//   44   98:getfield        #663 <Field ChildHelper mChildHelper>
	//   45  101:aload_1         
	//   46  102:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   47  105:ifeq            48
_L3:
		Object obj1 = null;
	//   48  108:aconst_null     
	//   49  109:astore_2        
		Object obj = ((Object) (obj1));
	//   50  110:aload_2         
	//   51  111:astore_1        
		if(mState.mFocusedItemId != -1L)
	//*  52  112:aload_0         
	//*  53  113:getfield        #431 <Field RecyclerView$State mState>
	//*  54  116:getfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//*  55  119:ldc2w           #156 <Long -1L>
	//*  56  122:lcmp            
	//*  57  123:ifeq            150
		{
			obj = ((Object) (obj1));
	//   58  126:aload_2         
	//   59  127:astore_1        
			if(mAdapter.hasStableIds())
	//*  60  128:aload_0         
	//*  61  129:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  62  132:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  63  135:ifeq            150
				obj = ((Object) (findViewHolderForItemId(mState.mFocusedItemId)));
	//   64  138:aload_0         
	//   65  139:aload_0         
	//   66  140:getfield        #431 <Field RecyclerView$State mState>
	//   67  143:getfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//   68  146:invokevirtual   #1365 <Method RecyclerView$ViewHolder findViewHolderForItemId(long)>
	//   69  149:astore_1        
		}
		obj1 = null;
	//   70  150:aconst_null     
	//   71  151:astore_2        
		if(obj == null || mChildHelper.isHidden(((ViewHolder) (obj)).itemView) || !((ViewHolder) (obj)).itemView.hasFocusable())
	//*  72  152:aload_1         
	//*  73  153:ifnull          180
	//*  74  156:aload_0         
	//*  75  157:getfield        #663 <Field ChildHelper mChildHelper>
	//*  76  160:aload_1         
	//*  77  161:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  78  164:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//*  79  167:ifne            180
	//*  80  170:aload_1         
	//*  81  171:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  82  174:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//*  83  177:ifne            253
		{
			obj = ((Object) (obj1));
	//   84  180:aload_2         
	//   85  181:astore_1        
			if(mChildHelper.getChildCount() > 0)
	//*  86  182:aload_0         
	//*  87  183:getfield        #663 <Field ChildHelper mChildHelper>
	//*  88  186:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*  89  189:ifle            197
				obj = ((Object) (findNextViewToFocus()));
	//   90  192:aload_0         
	//   91  193:invokespecial   #1367 <Method View findNextViewToFocus()>
	//   92  196:astore_1        
		} else
	//*  93  197:aload_1         
	//*  94  198:ifnull          48
	//*  95  201:aload_1         
	//*  96  202:astore_2        
	//*  97  203:aload_0         
	//*  98  204:getfield        #431 <Field RecyclerView$State mState>
	//*  99  207:getfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 100  210:i2l             
	//* 101  211:ldc2w           #156 <Long -1L>
	//* 102  214:lcmp            
	//* 103  215:ifeq            247
	//* 104  218:aload_1         
	//* 105  219:aload_0         
	//* 106  220:getfield        #431 <Field RecyclerView$State mState>
	//* 107  223:getfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//* 108  226:invokevirtual   #1373 <Method View View.findViewById(int)>
	//* 109  229:astore_3        
	//* 110  230:aload_1         
	//* 111  231:astore_2        
	//* 112  232:aload_3         
	//* 113  233:ifnull          247
	//* 114  236:aload_1         
	//* 115  237:astore_2        
	//* 116  238:aload_3         
	//* 117  239:invokevirtual   #1376 <Method boolean View.isFocusable()>
	//* 118  242:ifeq            247
	//* 119  245:aload_3         
	//* 120  246:astore_2        
	//* 121  247:aload_2         
	//* 122  248:invokevirtual   #1377 <Method boolean View.requestFocus()>
	//* 123  251:pop             
	//* 124  252:return          
		{
			obj = ((Object) (((ViewHolder) (obj)).itemView));
	//  125  253:aload_1         
	//  126  254:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//  127  257:astore_1        
		}
		if(obj != null)
		{
			Object obj2 = obj;
			if((long)mState.mFocusedSubChildId != -1L)
			{
				View view1 = ((View) (obj)).findViewById(mState.mFocusedSubChildId);
				obj2 = obj;
				if(view1 != null)
				{
					obj2 = obj;
					if(view1.isFocusable())
						obj2 = ((Object) (view1));
				}
			}
			((View) (obj2)).requestFocus();
			return;
		}
		if(true) goto _L1; else goto _L4
	//  128  258:goto            197
_L4:
	}

	private void releaseGlows()
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore_2        
		if(mLeftGlow != null)
	//*   2    2:aload_0         
	//*   3    3:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   4    6:ifnull          24
		{
			mLeftGlow.onRelease();
	//    5    9:aload_0         
	//    6   10:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//    7   13:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag1 = mLeftGlow.isFinished();
	//    8   16:aload_0         
	//    9   17:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   10   20:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   11   23:istore_2        
		}
		boolean flag = flag1;
	//   12   24:iload_2         
	//   13   25:istore_1        
		if(mTopGlow != null)
	//*  14   26:aload_0         
	//*  15   27:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  16   30:ifnull          50
		{
			mTopGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   19   37:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mTopGlow.isFinished();
	//   20   40:iload_2         
	//   21   41:aload_0         
	//   22   42:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   23   45:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   24   48:ior             
	//   25   49:istore_1        
		}
		flag1 = flag;
	//   26   50:iload_1         
	//   27   51:istore_2        
		if(mRightGlow != null)
	//*  28   52:aload_0         
	//*  29   53:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  30   56:ifnull          76
		{
			mRightGlow.onRelease();
	//   31   59:aload_0         
	//   32   60:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   33   63:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag1 = flag | mRightGlow.isFinished();
	//   34   66:iload_1         
	//   35   67:aload_0         
	//   36   68:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   37   71:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   38   74:ior             
	//   39   75:istore_2        
		}
		flag = flag1;
	//   40   76:iload_2         
	//   41   77:istore_1        
		if(mBottomGlow != null)
	//*  42   78:aload_0         
	//*  43   79:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  44   82:ifnull          102
		{
			mBottomGlow.onRelease();
	//   45   85:aload_0         
	//   46   86:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   47   89:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
			flag = flag1 | mBottomGlow.isFinished();
	//   48   92:iload_2         
	//   49   93:aload_0         
	//   50   94:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   51   97:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   52  100:ior             
	//   53  101:istore_1        
		}
		if(flag)
	//*  54  102:iload_1         
	//*  55  103:ifeq            110
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   56  106:aload_0         
	//   57  107:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//   58  110:return          
	}

	private void requestChildOnScreen(View view, View view1)
	{
		boolean flag1 = true;
	//    0    0:iconst_1        
	//    1    1:istore          4
		boolean flag;
		Object obj;
		Rect rect1;
		if(view1 != null)
	//*   2    3:aload_2         
	//*   3    4:ifnull          215
			obj = ((Object) (view1));
	//    4    7:aload_2         
	//    5    8:astore          5
		else
	//*   6   10:aload_0         
	//*   7   11:getfield        #382 <Field Rect mTempRect>
	//*   8   14:iconst_0        
	//*   9   15:iconst_0        
	//*  10   16:aload           5
	//*  11   18:invokevirtual   #1255 <Method int View.getWidth()>
	//*  12   21:aload           5
	//*  13   23:invokevirtual   #1258 <Method int View.getHeight()>
	//*  14   26:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
	//*  15   29:aload           5
	//*  16   31:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//*  17   34:astore          5
	//*  18   36:aload           5
	//*  19   38:instanceof      #68  <Class RecyclerView$LayoutParams>
	//*  20   41:ifeq            154
	//*  21   44:aload           5
	//*  22   46:checkcast       #68  <Class RecyclerView$LayoutParams>
	//*  23   49:astore          5
	//*  24   51:aload           5
	//*  25   53:getfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*  26   56:ifne            154
	//*  27   59:aload           5
	//*  28   61:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//*  29   64:astore          5
	//*  30   66:aload_0         
	//*  31   67:getfield        #382 <Field Rect mTempRect>
	//*  32   70:astore          6
	//*  33   72:aload           6
	//*  34   74:aload           6
	//*  35   76:getfield        #1134 <Field int Rect.left>
	//*  36   79:aload           5
	//*  37   81:getfield        #1134 <Field int Rect.left>
	//*  38   84:isub            
	//*  39   85:putfield        #1134 <Field int Rect.left>
	//*  40   88:aload_0         
	//*  41   89:getfield        #382 <Field Rect mTempRect>
	//*  42   92:astore          6
	//*  43   94:aload           6
	//*  44   96:aload           6
	//*  45   98:getfield        #1152 <Field int Rect.right>
	//*  46  101:aload           5
	//*  47  103:getfield        #1152 <Field int Rect.right>
	//*  48  106:iadd            
	//*  49  107:putfield        #1152 <Field int Rect.right>
	//*  50  110:aload_0         
	//*  51  111:getfield        #382 <Field Rect mTempRect>
	//*  52  114:astore          6
	//*  53  116:aload           6
	//*  54  118:aload           6
	//*  55  120:getfield        #1143 <Field int Rect.top>
	//*  56  123:aload           5
	//*  57  125:getfield        #1143 <Field int Rect.top>
	//*  58  128:isub            
	//*  59  129:putfield        #1143 <Field int Rect.top>
	//*  60  132:aload_0         
	//*  61  133:getfield        #382 <Field Rect mTempRect>
	//*  62  136:astore          6
	//*  63  138:aload           6
	//*  64  140:aload           6
	//*  65  142:getfield        #1161 <Field int Rect.bottom>
	//*  66  145:aload           5
	//*  67  147:getfield        #1161 <Field int Rect.bottom>
	//*  68  150:iadd            
	//*  69  151:putfield        #1161 <Field int Rect.bottom>
	//*  70  154:aload_2         
	//*  71  155:ifnull          176
	//*  72  158:aload_0         
	//*  73  159:aload_2         
	//*  74  160:aload_0         
	//*  75  161:getfield        #382 <Field Rect mTempRect>
	//*  76  164:invokevirtual   #1261 <Method void offsetDescendantRectToMyCoords(View, Rect)>
	//*  77  167:aload_0         
	//*  78  168:aload_1         
	//*  79  169:aload_0         
	//*  80  170:getfield        #382 <Field Rect mTempRect>
	//*  81  173:invokevirtual   #1394 <Method void offsetRectIntoDescendantCoords(View, Rect)>
	//*  82  176:aload_0         
	//*  83  177:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  84  180:astore          5
	//*  85  182:aload_0         
	//*  86  183:getfield        #382 <Field Rect mTempRect>
	//*  87  186:astore          6
	//*  88  188:aload_0         
	//*  89  189:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  90  192:ifne            221
	//*  91  195:iconst_1        
	//*  92  196:istore_3        
	//*  93  197:aload_2         
	//*  94  198:ifnonnull       226
	//*  95  201:aload           5
	//*  96  203:aload_0         
	//*  97  204:aload_1         
	//*  98  205:aload           6
	//*  99  207:iload_3         
	//* 100  208:iload           4
	//* 101  210:invokevirtual   #1398 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean, boolean)>
	//* 102  213:pop             
	//* 103  214:return          
			obj = ((Object) (view));
	//  104  215:aload_1         
	//  105  216:astore          5
		mTempRect.set(0, 0, ((View) (obj)).getWidth(), ((View) (obj)).getHeight());
		obj = ((Object) (((View) (obj)).getLayoutParams()));
		if(obj instanceof LayoutParams)
		{
			obj = ((Object) ((LayoutParams)obj));
			if(!((LayoutParams) (obj)).mInsetsDirty)
			{
				obj = ((Object) (((LayoutParams) (obj)).mDecorInsets));
				Rect rect = mTempRect;
				rect.left = rect.left - ((Rect) (obj)).left;
				rect = mTempRect;
				rect.right = rect.right + ((Rect) (obj)).right;
				rect = mTempRect;
				rect.top = rect.top - ((Rect) (obj)).top;
				rect = mTempRect;
				rect.bottom = rect.bottom + ((Rect) (obj)).bottom;
			}
		}
		if(view1 != null)
		{
			offsetDescendantRectToMyCoords(view1, mTempRect);
			offsetRectIntoDescendantCoords(view, mTempRect);
		}
		obj = ((Object) (mLayout));
		rect1 = mTempRect;
		if(!mFirstLayoutComplete)
			flag = true;
		else
	//* 106  218:goto            10
			flag = false;
	//  107  221:iconst_0        
	//  108  222:istore_3        
		if(view1 != null)
	//* 109  223:goto            197
			flag1 = false;
	//  110  226:iconst_0        
	//  111  227:istore          4
		((LayoutManager) (obj)).requestChildRectangleOnScreen(this, view, rect1, flag, flag1);
	//* 112  229:goto            201
	}

	private void resetFocusInfo()
	{
		mState.mFocusedItemId = -1L;
	//    0    0:aload_0         
	//    1    1:getfield        #431 <Field RecyclerView$State mState>
	//    2    4:ldc2w           #156 <Long -1L>
	//    3    7:putfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
		mState.mFocusedItemPosition = -1;
	//    4   10:aload_0         
	//    5   11:getfield        #431 <Field RecyclerView$State mState>
	//    6   14:iconst_m1       
	//    7   15:putfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
		mState.mFocusedSubChildId = -1;
	//    8   18:aload_0         
	//    9   19:getfield        #431 <Field RecyclerView$State mState>
	//   10   22:iconst_m1       
	//   11   23:putfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//   12   26:return          
	}

	private void resetTouch()
	{
		if(mVelocityTracker != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*   2    4:ifnull          14
			mVelocityTracker.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//    5   11:invokevirtual   #1403 <Method void VelocityTracker.clear()>
		stopNestedScroll(0);
	//    6   14:aload_0         
	//    7   15:iconst_0        
	//    8   16:invokevirtual   #1406 <Method void stopNestedScroll(int)>
		releaseGlows();
	//    9   19:aload_0         
	//   10   20:invokespecial   #1408 <Method void releaseGlows()>
	//   11   23:return          
	}

	private void saveFocusInfo()
	{
		State state = null;
	//    0    0:aconst_null     
	//    1    1:astore          5
		Object obj = ((Object) (state));
	//    2    3:aload           5
	//    3    5:astore          4
		if(mPreserveFocusAfterLayout)
	//*   4    7:aload_0         
	//*   5    8:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//*   6   11:ifeq            42
		{
			obj = ((Object) (state));
	//    7   14:aload           5
	//    8   16:astore          4
			if(hasFocus())
	//*   9   18:aload_0         
	//*  10   19:invokevirtual   #1345 <Method boolean hasFocus()>
	//*  11   22:ifeq            42
			{
				obj = ((Object) (state));
	//   12   25:aload           5
	//   13   27:astore          4
				if(mAdapter != null)
	//*  14   29:aload_0         
	//*  15   30:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  16   33:ifnull          42
					obj = ((Object) (getFocusedChild()));
	//   17   36:aload_0         
	//   18   37:invokevirtual   #1352 <Method View getFocusedChild()>
	//   19   40:astore          4
			}
		}
		if(obj == null)
	//*  20   42:aload           4
	//*  21   44:ifnonnull       60
			obj = null;
	//   22   47:aconst_null     
	//   23   48:astore          4
		else
	//*  24   50:aload           4
	//*  25   52:ifnonnull       71
	//*  26   55:aload_0         
	//*  27   56:invokespecial   #1066 <Method void resetFocusInfo()>
	//*  28   59:return          
			obj = ((Object) (findContainingViewHolder(((View) (obj)))));
	//   29   60:aload_0         
	//   30   61:aload           4
	//   31   63:invokevirtual   #1411 <Method RecyclerView$ViewHolder findContainingViewHolder(View)>
	//   32   66:astore          4
		if(obj == null)
		{
			resetFocusInfo();
			return;
		}
	//*  33   68:goto            50
		state = mState;
	//   34   71:aload_0         
	//   35   72:getfield        #431 <Field RecyclerView$State mState>
	//   36   75:astore          5
		int i;
		long l;
		if(mAdapter.hasStableIds())
	//*  37   77:aload_0         
	//*  38   78:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  39   81:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*  40   84:ifeq            137
			l = ((ViewHolder) (obj)).getItemId();
	//   41   87:aload           4
	//   42   89:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//   43   92:lstore_2        
		else
	//*  44   93:aload           5
	//*  45   95:lload_2         
	//*  46   96:putfield        #1362 <Field long RecyclerView$State.mFocusedItemId>
	//*  47   99:aload_0         
	//*  48  100:getfield        #431 <Field RecyclerView$State mState>
	//*  49  103:astore          5
	//*  50  105:aload_0         
	//*  51  106:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*  52  109:ifeq            144
	//*  53  112:iconst_m1       
	//*  54  113:istore_1        
	//*  55  114:aload           5
	//*  56  116:iload_1         
	//*  57  117:putfield        #1107 <Field int RecyclerView$State.mFocusedItemPosition>
	//*  58  120:aload_0         
	//*  59  121:getfield        #431 <Field RecyclerView$State mState>
	//*  60  124:aload_0         
	//*  61  125:aload           4
	//*  62  127:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  63  130:invokespecial   #1417 <Method int getDeepestFocusedViewWithId(View)>
	//*  64  133:putfield        #1370 <Field int RecyclerView$State.mFocusedSubChildId>
	//*  65  136:return          
			l = -1L;
	//   66  137:ldc2w           #156 <Long -1L>
	//   67  140:lstore_2        
		state.mFocusedItemId = l;
		state = mState;
		if(mDataSetHasChangedAfterLayout)
			i = -1;
		else
	//*  68  141:goto            93
		if(((ViewHolder) (obj)).isRemoved())
	//*  69  144:aload           4
	//*  70  146:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  71  149:ifeq            161
			i = ((ViewHolder) (obj)).mOldPosition;
	//   72  152:aload           4
	//   73  154:getfield        #1420 <Field int RecyclerView$ViewHolder.mOldPosition>
	//   74  157:istore_1        
		else
	//*  75  158:goto            114
			i = ((ViewHolder) (obj)).getAdapterPosition();
	//   76  161:aload           4
	//   77  163:invokevirtual   #1423 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//   78  166:istore_1        
		state.mFocusedItemPosition = i;
		mState.mFocusedSubChildId = getDeepestFocusedViewWithId(((ViewHolder) (obj)).itemView);
	//*  79  167:goto            114
	}

	private void setAdapterInternal(Adapter adapter, boolean flag, boolean flag1)
	{
		if(mAdapter != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          26
		{
			mAdapter.unregisterAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//    3    7:aload_0         
	//    4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    5   11:aload_0         
	//    6   12:getfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//    7   15:invokevirtual   #1429 <Method void RecyclerView$Adapter.unregisterAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			mAdapter.onDetachedFromRecyclerView(this);
	//    8   18:aload_0         
	//    9   19:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   10   22:aload_0         
	//   11   23:invokevirtual   #1432 <Method void RecyclerView$Adapter.onDetachedFromRecyclerView(RecyclerView)>
		}
		if(!flag || flag1)
	//*  12   26:iload_2         
	//*  13   27:ifeq            34
	//*  14   30:iload_3         
	//*  15   31:ifeq            38
			removeAndRecycleViews();
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1435 <Method void removeAndRecycleViews()>
		mAdapterHelper.reset();
	//   18   38:aload_0         
	//   19   39:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   20   42:invokevirtual   #1301 <Method void AdapterHelper.reset()>
		Adapter adapter1 = mAdapter;
	//   21   45:aload_0         
	//   22   46:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   23   49:astore          4
		mAdapter = adapter;
	//   24   51:aload_0         
	//   25   52:aload_1         
	//   26   53:putfield        #891 <Field RecyclerView$Adapter mAdapter>
		if(adapter != null)
	//*  27   56:aload_1         
	//*  28   57:ifnull          73
		{
			adapter.registerAdapterDataObserver(((AdapterDataObserver) (mObserver)));
	//   29   60:aload_1         
	//   30   61:aload_0         
	//   31   62:getfield        #366 <Field RecyclerView$RecyclerViewDataObserver mObserver>
	//   32   65:invokevirtual   #1438 <Method void RecyclerView$Adapter.registerAdapterDataObserver(RecyclerView$AdapterDataObserver)>
			adapter.onAttachedToRecyclerView(this);
	//   33   68:aload_1         
	//   34   69:aload_0         
	//   35   70:invokevirtual   #1441 <Method void RecyclerView$Adapter.onAttachedToRecyclerView(RecyclerView)>
		}
		if(mLayout != null)
	//*  36   73:aload_0         
	//*  37   74:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  38   77:ifnull          93
			mLayout.onAdapterChanged(adapter1, mAdapter);
	//   39   80:aload_0         
	//   40   81:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   41   84:aload           4
	//   42   86:aload_0         
	//   43   87:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   44   90:invokevirtual   #1445 <Method void RecyclerView$LayoutManager.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter)>
		mRecycler.onAdapterChanged(adapter1, mAdapter, flag);
	//   45   93:aload_0         
	//   46   94:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   47   97:aload           4
	//   48   99:aload_0         
	//   49  100:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   50  103:iload_2         
	//   51  104:invokevirtual   #1448 <Method void RecyclerView$Recycler.onAdapterChanged(RecyclerView$Adapter, RecyclerView$Adapter, boolean)>
		mState.mStructureChanged = true;
	//   52  107:aload_0         
	//   53  108:getfield        #431 <Field RecyclerView$State mState>
	//   54  111:iconst_1        
	//   55  112:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
		setDataSetChangedAfterLayout();
	//   56  115:aload_0         
	//   57  116:invokevirtual   #1451 <Method void setDataSetChangedAfterLayout()>
	//   58  119:return          
	}

	private void stopScrollersInternal()
	{
		mViewFlinger.stop();
	//    0    0:aload_0         
	//    1    1:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    2    4:invokevirtual   #1455 <Method void RecyclerView$ViewFlinger.stop()>
		if(mLayout != null)
	//*   3    7:aload_0         
	//*   4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:ifnull          21
			mLayout.stopSmoothScroller();
	//    6   14:aload_0         
	//    7   15:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    8   18:invokevirtual   #1458 <Method void RecyclerView$LayoutManager.stopSmoothScroller()>
	//    9   21:return          
	}

	void absorbGlows(int i, int j)
	{
		if(i < 0)
	//*   0    0:iload_1         
	//*   1    1:ifge            47
		{
			ensureLeftGlow();
	//    2    4:aload_0         
	//    3    5:invokevirtual   #1316 <Method void ensureLeftGlow()>
			mLeftGlow.onAbsorb(-i);
	//    4    8:aload_0         
	//    5    9:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//    6   12:iload_1         
	//    7   13:ineg            
	//    8   14:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		} else
	//*   9   17:iload_2         
	//*  10   18:ifge            66
	//*  11   21:aload_0         
	//*  12   22:invokevirtual   #1329 <Method void ensureTopGlow()>
	//*  13   25:aload_0         
	//*  14   26:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  15   29:iload_2         
	//*  16   30:ineg            
	//*  17   31:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
	//*  18   34:iload_1         
	//*  19   35:ifne            42
	//*  20   38:iload_2         
	//*  21   39:ifeq            46
	//*  22   42:aload_0         
	//*  23   43:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//*  24   46:return          
		if(i > 0)
	//*  25   47:iload_1         
	//*  26   48:ifle            17
		{
			ensureRightGlow();
	//   27   51:aload_0         
	//   28   52:invokevirtual   #1337 <Method void ensureRightGlow()>
			mRightGlow.onAbsorb(i);
	//   29   55:aload_0         
	//   30   56:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   31   59:iload_1         
	//   32   60:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(j < 0)
		{
			ensureTopGlow();
			mTopGlow.onAbsorb(-j);
		} else
	//*  33   63:goto            17
		if(j > 0)
	//*  34   66:iload_2         
	//*  35   67:ifle            34
		{
			ensureBottomGlow();
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1342 <Method void ensureBottomGlow()>
			mBottomGlow.onAbsorb(j);
	//   38   74:aload_0         
	//   39   75:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   40   78:iload_2         
	//   41   79:invokevirtual   #1462 <Method void EdgeEffect.onAbsorb(int)>
		}
		if(i != 0 || j != 0)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//*  42   82:goto            34
	}

	public void addFocusables(ArrayList arraylist, int i, int j)
	{
		if(mLayout == null || !mLayout.onAddFocusables(this, arraylist, i, j))
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          21
	//*   3    7:aload_0         
	//*   4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   5   11:aload_0         
	//*   6   12:aload_1         
	//*   7   13:iload_2         
	//*   8   14:iload_3         
	//*   9   15:invokevirtual   #1468 <Method boolean RecyclerView$LayoutManager.onAddFocusables(RecyclerView, ArrayList, int, int)>
	//*  10   18:ifne            28
			super.addFocusables(arraylist, i, j);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:iload_2         
	//   14   24:iload_3         
	//   15   25:invokespecial   #1470 <Method void ViewGroup.addFocusables(ArrayList, int, int)>
	//   16   28:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration)
	{
		addItemDecoration(itemdecoration, -1);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iconst_m1       
	//    3    3:invokevirtual   #1477 <Method void addItemDecoration(RecyclerView$ItemDecoration, int)>
	//    4    6:return          
	}

	public void addItemDecoration(ItemDecoration itemdecoration, int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #1479 <String "Cannot add item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		if(mItemDecorations.isEmpty())
	//*   7   17:aload_0         
	//*   8   18:getfield        #394 <Field ArrayList mItemDecorations>
	//*   9   21:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  10   24:ifeq            32
			setWillNotDraw(false);
	//   11   27:aload_0         
	//   12   28:iconst_0        
	//   13   29:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
		if(i < 0)
	//*  14   32:iload_2         
	//*  15   33:ifge            54
			mItemDecorations.add(((Object) (itemdecoration)));
	//   16   36:aload_0         
	//   17   37:getfield        #394 <Field ArrayList mItemDecorations>
	//   18   40:aload_1         
	//   19   41:invokevirtual   #1487 <Method boolean ArrayList.add(Object)>
	//   20   44:pop             
		else
	//*  21   45:aload_0         
	//*  22   46:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
	//*  23   49:aload_0         
	//*  24   50:invokevirtual   #1493 <Method void requestLayout()>
	//*  25   53:return          
			mItemDecorations.add(i, ((Object) (itemdecoration)));
	//   26   54:aload_0         
	//   27   55:getfield        #394 <Field ArrayList mItemDecorations>
	//   28   58:iload_2         
	//   29   59:aload_1         
	//   30   60:invokevirtual   #1496 <Method void ArrayList.add(int, Object)>
		markItemDecorInsetsDirty();
		requestLayout();
	//*  31   63:goto            45
	}

	public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       18
			mOnChildAttachStateListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #391 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #392 <Method void ArrayList()>
	//    7   15:putfield        #1500 <Field List mOnChildAttachStateListeners>
		mOnChildAttachStateListeners.add(((Object) (onchildattachstatechangelistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1503 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	public void addOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.add(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #1487 <Method boolean ArrayList.add(Object)>
	//    4    8:pop             
	//    5    9:return          
	}

	public void addOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnonnull       18
			mScrollListeners = ((List) (new ArrayList()));
	//    3    7:aload_0         
	//    4    8:new             #391 <Class ArrayList>
	//    5   11:dup             
	//    6   12:invokespecial   #392 <Method void ArrayList()>
	//    7   15:putfield        #1509 <Field List mScrollListeners>
		mScrollListeners.add(((Object) (onscrolllistener)));
	//    8   18:aload_0         
	//    9   19:getfield        #1509 <Field List mScrollListeners>
	//   10   22:aload_1         
	//   11   23:invokeinterface #1503 <Method boolean List.add(Object)>
	//   12   28:pop             
	//   13   29:return          
	}

	void animateAppearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		viewholder.setIsRecyclable(false);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateAppearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   3    5:aload_0         
	//*   4    6:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:aload_3         
	//*   8   12:invokevirtual   #1514 <Method boolean RecyclerView$ItemAnimator.animateAppearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*   9   15:ifeq            22
			postAnimationRunner();
	//   10   18:aload_0         
	//   11   19:invokevirtual   #701 <Method void postAnimationRunner()>
	//   12   22:return          
	}

	void animateDisappearance(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo, ItemAnimator.ItemHolderInfo itemholderinfo1)
	{
		addAnimatingView(viewholder);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #688 <Method void addAnimatingView(RecyclerView$ViewHolder)>
		viewholder.setIsRecyclable(false);
	//    3    5:aload_1         
	//    4    6:iconst_0        
	//    5    7:invokevirtual   #686 <Method void RecyclerView$ViewHolder.setIsRecyclable(boolean)>
		if(mItemAnimator.animateDisappearance(viewholder, itemholderinfo, itemholderinfo1))
	//*   6   10:aload_0         
	//*   7   11:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   8   14:aload_1         
	//*   9   15:aload_2         
	//*  10   16:aload_3         
	//*  11   17:invokevirtual   #1517 <Method boolean RecyclerView$ItemAnimator.animateDisappearance(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//*  12   20:ifeq            27
			postAnimationRunner();
	//   13   23:aload_0         
	//   14   24:invokevirtual   #701 <Method void postAnimationRunner()>
	//   15   27:return          
	}

	void assertInLayoutOrScroll(String s)
	{
		if(!isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifne            71
		{
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       42
				throw new IllegalStateException((new StringBuilder()).append("Cannot call this method unless RecyclerView is computing a layout or scrolling").append(exceptionLabel()).toString());
	//    5   11:new             #794 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:new             #796 <Class StringBuilder>
	//    8   18:dup             
	//    9   19:invokespecial   #797 <Method void StringBuilder()>
	//   10   22:ldc2            #1523 <String "Cannot call this method unless RecyclerView is computing a layout or scrolling">
	//   11   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1224 <Method String exceptionLabel()>
	//   14   32:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   35:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   16   38:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   17   41:athrow          
			else
				throw new IllegalStateException((new StringBuilder()).append(s).append(exceptionLabel()).toString());
	//   18   42:new             #794 <Class IllegalStateException>
	//   19   45:dup             
	//   20   46:new             #796 <Class StringBuilder>
	//   21   49:dup             
	//   22   50:invokespecial   #797 <Method void StringBuilder()>
	//   23   53:aload_1         
	//   24   54:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   25   57:aload_0         
	//   26   58:invokevirtual   #1224 <Method String exceptionLabel()>
	//   27   61:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   28   64:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   29   67:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   30   70:athrow          
		} else
		{
			return;
	//   31   71:return          
		}
	}

	void assertNotInLayoutOrScroll(String s)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            51
			if(s == null)
	//*   3    7:aload_1         
	//*   4    8:ifnonnull       42
				throw new IllegalStateException((new StringBuilder()).append("Cannot call this method while RecyclerView is computing a layout or scrolling").append(exceptionLabel()).toString());
	//    5   11:new             #794 <Class IllegalStateException>
	//    6   14:dup             
	//    7   15:new             #796 <Class StringBuilder>
	//    8   18:dup             
	//    9   19:invokespecial   #797 <Method void StringBuilder()>
	//   10   22:ldc2            #1525 <String "Cannot call this method while RecyclerView is computing a layout or scrolling">
	//   11   25:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1224 <Method String exceptionLabel()>
	//   14   32:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   35:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   16   38:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   17   41:athrow          
			else
				throw new IllegalStateException(s);
	//   18   42:new             #794 <Class IllegalStateException>
	//   19   45:dup             
	//   20   46:aload_1         
	//   21   47:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   22   50:athrow          
		if(mDispatchScrollCounter > 0)
	//*  23   51:aload_0         
	//*  24   52:getfield        #404 <Field int mDispatchScrollCounter>
	//*  25   55:ifle            97
			Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", ((Throwable) (new IllegalStateException((new StringBuilder()).append("").append(exceptionLabel()).toString()))));
	//   26   58:ldc1            #168 <String "RecyclerView">
	//   27   60:ldc2            #1527 <String "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.">
	//   28   63:new             #794 <Class IllegalStateException>
	//   29   66:dup             
	//   30   67:new             #796 <Class StringBuilder>
	//   31   70:dup             
	//   32   71:invokespecial   #797 <Method void StringBuilder()>
	//   33   74:ldc2            #1529 <String "">
	//   34   77:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   35   80:aload_0         
	//   36   81:invokevirtual   #1224 <Method String exceptionLabel()>
	//   37   84:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   38   87:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   39   90:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   40   93:invokestatic    #1533 <Method int Log.w(String, String, Throwable)>
	//   41   96:pop             
	//   42   97:return          
	}

	boolean canReuseUpdatedViewHolder(ViewHolder viewholder)
	{
		return mItemAnimator == null || mItemAnimator.canReuseUpdatedViewHolder(viewholder, viewholder.getUnmodifiedPayloads());
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          22
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:aload_1         
	//    6   12:aload_1         
	//    7   13:invokevirtual   #924 <Method List RecyclerView$ViewHolder.getUnmodifiedPayloads()>
	//    8   16:invokevirtual   #1537 <Method boolean RecyclerView$ItemAnimator.canReuseUpdatedViewHolder(RecyclerView$ViewHolder, List)>
	//    9   19:ifeq            24
	//   10   22:iconst_1        
	//   11   23:ireturn         
	//   12   24:iconst_0        
	//   13   25:ireturn         
	}

	protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		return (layoutparams instanceof LayoutParams) && mLayout.checkLayoutParams((LayoutParams)layoutparams);
	//    0    0:aload_1         
	//    1    1:instanceof      #68  <Class RecyclerView$LayoutParams>
	//    2    4:ifeq            23
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:aload_1         
	//    6   12:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    7   15:invokevirtual   #1542 <Method boolean RecyclerView$LayoutManager.checkLayoutParams(RecyclerView$LayoutParams)>
	//    8   18:ifeq            23
	//    9   21:iconst_1        
	//   10   22:ireturn         
	//   11   23:iconst_0        
	//   12   24:ireturn         
	}

	void clearOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.clearOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #1551 <Method void RecyclerView$ViewHolder.clearOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
		mRecycler.clearOldPositions();
	//   25   45:aload_0         
	//   26   46:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   27   49:invokevirtual   #1552 <Method void RecyclerView$Recycler.clearOldPositions()>
	//   28   52:return          
	}

	public void clearOnChildAttachStateChangeListeners()
	{
		if(mOnChildAttachStateListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnull          16
			mOnChildAttachStateListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//    5   11:invokeinterface #1554 <Method void List.clear()>
	//    6   16:return          
	}

	public void clearOnScrollListeners()
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnull          16
			mScrollListeners.clear();
	//    3    7:aload_0         
	//    4    8:getfield        #1509 <Field List mScrollListeners>
	//    5   11:invokeinterface #1554 <Method void List.clear()>
	//    6   16:return          
	}

	public int computeHorizontalScrollExtent()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1562 <Method int RecyclerView$LayoutManager.computeHorizontalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeHorizontalScrollOffset()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1565 <Method int RecyclerView$LayoutManager.computeHorizontalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeHorizontalScrollRange()
	{
		while(mLayout == null || !mLayout.canScrollHorizontally()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//    8   16:ifeq            7
		return mLayout.computeHorizontalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1568 <Method int RecyclerView$LayoutManager.computeHorizontalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollExtent()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollExtent(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1574 <Method int RecyclerView$LayoutManager.computeVerticalScrollExtent(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollOffset()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollOffset(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1577 <Method int RecyclerView$LayoutManager.computeVerticalScrollOffset(RecyclerView$State)>
	//   14   30:ireturn         
	}

	public int computeVerticalScrollRange()
	{
		while(mLayout == null || !mLayout.canScrollVertically()) 
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
			return 0;
	//    3    7:iconst_0        
	//    4    8:ireturn         
	//    5    9:aload_0         
	//    6   10:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    7   13:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//    8   16:ifeq            7
		return mLayout.computeVerticalScrollRange(mState);
	//    9   19:aload_0         
	//   10   20:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   23:aload_0         
	//   12   24:getfield        #431 <Field RecyclerView$State mState>
	//   13   27:invokevirtual   #1580 <Method int RecyclerView$LayoutManager.computeVerticalScrollRange(RecyclerView$State)>
	//   14   30:ireturn         
	}

	void considerReleasingGlowsOnScroll(int i, int j)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		boolean flag = flag1;
	//    2    3:iload           4
	//    3    5:istore_3        
		if(mLeftGlow != null)
	//*   4    6:aload_0         
	//*   5    7:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   6   10:ifnull          48
		{
			flag = flag1;
	//    7   13:iload           4
	//    8   15:istore_3        
			if(!mLeftGlow.isFinished())
	//*   9   16:aload_0         
	//*  10   17:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  11   20:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  12   23:ifne            48
			{
				flag = flag1;
	//   13   26:iload           4
	//   14   28:istore_3        
				if(i > 0)
	//*  15   29:iload_1         
	//*  16   30:ifle            48
				{
					mLeftGlow.onRelease();
	//   17   33:aload_0         
	//   18   34:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   19   37:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag = mLeftGlow.isFinished();
	//   20   40:aload_0         
	//   21   41:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   22   44:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   23   47:istore_3        
				}
			}
		}
		flag1 = flag;
	//   24   48:iload_3         
	//   25   49:istore          4
		if(mRightGlow != null)
	//*  26   51:aload_0         
	//*  27   52:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  28   55:ifnull          96
		{
			flag1 = flag;
	//   29   58:iload_3         
	//   30   59:istore          4
			if(!mRightGlow.isFinished())
	//*  31   61:aload_0         
	//*  32   62:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*  33   65:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  34   68:ifne            96
			{
				flag1 = flag;
	//   35   71:iload_3         
	//   36   72:istore          4
				if(i < 0)
	//*  37   74:iload_1         
	//*  38   75:ifge            96
				{
					mRightGlow.onRelease();
	//   39   78:aload_0         
	//   40   79:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   41   82:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mRightGlow.isFinished();
	//   42   85:iload_3         
	//   43   86:aload_0         
	//   44   87:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   45   90:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   46   93:ior             
	//   47   94:istore          4
				}
			}
		}
		flag = flag1;
	//   48   96:iload           4
	//   49   98:istore_3        
		if(mTopGlow != null)
	//*  50   99:aload_0         
	//*  51  100:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  52  103:ifnull          144
		{
			flag = flag1;
	//   53  106:iload           4
	//   54  108:istore_3        
			if(!mTopGlow.isFinished())
	//*  55  109:aload_0         
	//*  56  110:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  57  113:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  58  116:ifne            144
			{
				flag = flag1;
	//   59  119:iload           4
	//   60  121:istore_3        
				if(j > 0)
	//*  61  122:iload_2         
	//*  62  123:ifle            144
				{
					mTopGlow.onRelease();
	//   63  126:aload_0         
	//   64  127:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   65  130:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag = flag1 | mTopGlow.isFinished();
	//   66  133:iload           4
	//   67  135:aload_0         
	//   68  136:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   69  139:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   70  142:ior             
	//   71  143:istore_3        
				}
			}
		}
		flag1 = flag;
	//   72  144:iload_3         
	//   73  145:istore          4
		if(mBottomGlow != null)
	//*  74  147:aload_0         
	//*  75  148:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  76  151:ifnull          192
		{
			flag1 = flag;
	//   77  154:iload_3         
	//   78  155:istore          4
			if(!mBottomGlow.isFinished())
	//*  79  157:aload_0         
	//*  80  158:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*  81  161:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  82  164:ifne            192
			{
				flag1 = flag;
	//   83  167:iload_3         
	//   84  168:istore          4
				if(j < 0)
	//*  85  170:iload_2         
	//*  86  171:ifge            192
				{
					mBottomGlow.onRelease();
	//   87  174:aload_0         
	//   88  175:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   89  178:invokevirtual   #1383 <Method void EdgeEffect.onRelease()>
					flag1 = flag | mBottomGlow.isFinished();
	//   90  181:iload_3         
	//   91  182:aload_0         
	//   92  183:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   93  186:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//   94  189:ior             
	//   95  190:istore          4
				}
			}
		}
		if(flag1)
	//*  96  192:iload           4
	//*  97  194:ifeq            201
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//   98  197:aload_0         
	//   99  198:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//  100  201:return          
	}

	void consumePendingUpdateOperations()
	{
		if(!mFirstLayoutComplete || mDataSetHasChangedAfterLayout)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*   2    4:ifeq            14
	//*   3    7:aload_0         
	//*   4    8:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//*   5   11:ifeq            27
		{
			TraceCompat.beginSection("RV FullInvalidate");
	//    6   14:ldc1            #185 <String "RV FullInvalidate">
	//    7   16:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
			dispatchLayout();
	//    8   19:aload_0         
	//    9   20:invokevirtual   #1590 <Method void dispatchLayout()>
			TraceCompat.endSection();
	//   10   23:invokestatic    #1593 <Method void TraceCompat.endSection()>
		} else
	//*  11   26:return          
		if(mAdapterHelper.hasPendingUpdates())
	//*  12   27:aload_0         
	//*  13   28:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  14   31:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  15   34:ifeq            26
		{
			if(mAdapterHelper.hasAnyUpdateTypes(4) && !mAdapterHelper.hasAnyUpdateTypes(11))
	//*  16   37:aload_0         
	//*  17   38:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  18   41:iconst_4        
	//*  19   42:invokevirtual   #1599 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  20   45:ifeq            121
	//*  21   48:aload_0         
	//*  22   49:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  23   52:bipush          11
	//*  24   54:invokevirtual   #1599 <Method boolean AdapterHelper.hasAnyUpdateTypes(int)>
	//*  25   57:ifne            121
			{
				TraceCompat.beginSection("RV PartialInvalidate");
	//   26   60:ldc1            #179 <String "RV PartialInvalidate">
	//   27   62:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
				eatRequestLayout();
	//   28   65:aload_0         
	//   29   66:invokevirtual   #865 <Method void eatRequestLayout()>
				onEnterLayoutOrScroll();
	//   30   69:aload_0         
	//   31   70:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
				mAdapterHelper.preProcess();
	//   32   73:aload_0         
	//   33   74:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   34   77:invokevirtual   #1309 <Method void AdapterHelper.preProcess()>
				if(!mLayoutRequestEaten)
	//*  35   80:aload_0         
	//*  36   81:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  37   84:ifne            98
					if(hasUpdatedView())
	//*  38   87:aload_0         
	//*  39   88:invokespecial   #1603 <Method boolean hasUpdatedView()>
	//*  40   91:ifeq            111
						dispatchLayout();
	//   41   94:aload_0         
	//   42   95:invokevirtual   #1590 <Method void dispatchLayout()>
					else
	//*  43   98:aload_0         
	//*  44   99:iconst_1        
	//*  45  100:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  46  103:aload_0         
	//*  47  104:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
	//*  48  107:invokestatic    #1593 <Method void TraceCompat.endSection()>
	//*  49  110:return          
						mAdapterHelper.consumePostponedUpdates();
	//   50  111:aload_0         
	//   51  112:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   52  115:invokevirtual   #1606 <Method void AdapterHelper.consumePostponedUpdates()>
				resumeRequestLayout(true);
				onExitLayoutOrScroll();
				TraceCompat.endSection();
				return;
			}
	//*  53  118:goto            98
			if(mAdapterHelper.hasPendingUpdates())
	//*  54  121:aload_0         
	//*  55  122:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  56  125:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//*  57  128:ifeq            26
			{
				TraceCompat.beginSection("RV FullInvalidate");
	//   58  131:ldc1            #185 <String "RV FullInvalidate">
	//   59  133:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
				dispatchLayout();
	//   60  136:aload_0         
	//   61  137:invokevirtual   #1590 <Method void dispatchLayout()>
				TraceCompat.endSection();
	//   62  140:invokestatic    #1593 <Method void TraceCompat.endSection()>
				return;
	//   63  143:return          
			}
		}
	}

	void defaultOnMeasure(int i, int j)
	{
		setMeasuredDimension(LayoutManager.chooseSize(i, getPaddingLeft() + getPaddingRight(), ViewCompat.getMinimumWidth(((View) (this)))), LayoutManager.chooseSize(j, getPaddingTop() + getPaddingBottom(), ViewCompat.getMinimumHeight(((View) (this)))));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:aload_0         
	//    3    3:invokevirtual   #1610 <Method int getPaddingLeft()>
	//    4    6:aload_0         
	//    5    7:invokevirtual   #1613 <Method int getPaddingRight()>
	//    6   10:iadd            
	//    7   11:aload_0         
	//    8   12:invokestatic    #1616 <Method int ViewCompat.getMinimumWidth(View)>
	//    9   15:invokestatic    #1620 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   10   18:iload_2         
	//   11   19:aload_0         
	//   12   20:invokevirtual   #1623 <Method int getPaddingTop()>
	//   13   23:aload_0         
	//   14   24:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   15   27:iadd            
	//   16   28:aload_0         
	//   17   29:invokestatic    #1629 <Method int ViewCompat.getMinimumHeight(View)>
	//   18   32:invokestatic    #1620 <Method int RecyclerView$LayoutManager.chooseSize(int, int, int)>
	//   19   35:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
	//   20   38:return          
	}

	void dispatchChildAttached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildAttachedToWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1633 <Method void onChildAttachedToWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewAttachedToWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1636 <Method void RecyclerView$Adapter.onViewAttachedToWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1637 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewAttachedToWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1638 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1641 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewAttachedToWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchChildDetached(View view)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		onChildDetachedFromWindow(view);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:invokevirtual   #1645 <Method void onChildDetachedFromWindow(View)>
		if(mAdapter != null && viewholder != null)
	//*   6   10:aload_0         
	//*   7   11:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   8   14:ifnull          29
	//*   9   17:aload_3         
	//*  10   18:ifnull          29
			mAdapter.onViewDetachedFromWindow(viewholder);
	//   11   21:aload_0         
	//   12   22:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   13   25:aload_3         
	//   14   26:invokevirtual   #1648 <Method void RecyclerView$Adapter.onViewDetachedFromWindow(RecyclerView$ViewHolder)>
		if(mOnChildAttachStateListeners != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  17   33:ifnull          78
		{
			for(int i = mOnChildAttachStateListeners.size() - 1; i >= 0; i--)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*  20   40:invokeinterface #1637 <Method int List.size()>
	//*  21   45:iconst_1        
	//*  22   46:isub            
	//*  23   47:istore_2        
	//*  24   48:iload_2         
	//*  25   49:iflt            78
				((OnChildAttachStateChangeListener)mOnChildAttachStateListeners.get(i)).onChildViewDetachedFromWindow(view);
	//   26   52:aload_0         
	//   27   53:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//   28   56:iload_2         
	//   29   57:invokeinterface #1638 <Method Object List.get(int)>
	//   30   62:checkcast       #71  <Class RecyclerView$OnChildAttachStateChangeListener>
	//   31   65:aload_1         
	//   32   66:invokeinterface #1651 <Method void RecyclerView$OnChildAttachStateChangeListener.onChildViewDetachedFromWindow(View)>

	//   33   71:iload_2         
	//   34   72:iconst_1        
	//   35   73:isub            
	//   36   74:istore_2        
		}
	//*  37   75:goto            48
	//   38   78:return          
	}

	void dispatchLayout()
	{
		if(mAdapter == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnonnull       17
		{
			Log.e("RecyclerView", "No adapter attached; skipping layout");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #1653 <String "No adapter attached; skipping layout">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
			return;
	//    7   16:return          
		}
		if(mLayout == null)
	//*   8   17:aload_0         
	//*   9   18:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  10   21:ifnonnull       34
		{
			Log.e("RecyclerView", "No layout manager attached; skipping layout");
	//   11   24:ldc1            #168 <String "RecyclerView">
	//   12   26:ldc2            #1655 <String "No layout manager attached; skipping layout">
	//   13   29:invokestatic    #1239 <Method int Log.e(String, String)>
	//   14   32:pop             
			return;
	//   15   33:return          
		}
		mState.mIsMeasuring = false;
	//   16   34:aload_0         
	//   17   35:getfield        #431 <Field RecyclerView$State mState>
	//   18   38:iconst_0        
	//   19   39:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
		if(mState.mLayoutStep == 1)
	//*  20   42:aload_0         
	//*  21   43:getfield        #431 <Field RecyclerView$State mState>
	//*  22   46:getfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  23   49:iconst_1        
	//*  24   50:icmpne          74
		{
			dispatchLayoutStep1();
	//   25   53:aload_0         
	//   26   54:invokespecial   #1657 <Method void dispatchLayoutStep1()>
			mLayout.setExactMeasureSpecsFrom(this);
	//   27   57:aload_0         
	//   28   58:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   29   61:aload_0         
	//   30   62:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   31   65:aload_0         
	//   32   66:invokespecial   #1662 <Method void dispatchLayoutStep2()>
		} else
	//*  33   69:aload_0         
	//*  34   70:invokespecial   #1664 <Method void dispatchLayoutStep3()>
	//*  35   73:return          
		if(mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth() || mLayout.getHeight() != getHeight())
	//*  36   74:aload_0         
	//*  37   75:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//*  38   78:invokevirtual   #1667 <Method boolean AdapterHelper.hasUpdates()>
	//*  39   81:ifne            112
	//*  40   84:aload_0         
	//*  41   85:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  42   88:invokevirtual   #1668 <Method int RecyclerView$LayoutManager.getWidth()>
	//*  43   91:aload_0         
	//*  44   92:invokevirtual   #1319 <Method int getWidth()>
	//*  45   95:icmpne          112
	//*  46   98:aload_0         
	//*  47   99:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  48  102:invokevirtual   #1669 <Method int RecyclerView$LayoutManager.getHeight()>
	//*  49  105:aload_0         
	//*  50  106:invokevirtual   #1320 <Method int getHeight()>
	//*  51  109:icmpeq          127
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   52  112:aload_0         
	//   53  113:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   54  116:aload_0         
	//   55  117:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
			dispatchLayoutStep2();
	//   56  120:aload_0         
	//   57  121:invokespecial   #1662 <Method void dispatchLayoutStep2()>
		} else
	//*  58  124:goto            69
		{
			mLayout.setExactMeasureSpecsFrom(this);
	//   59  127:aload_0         
	//   60  128:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   61  131:aload_0         
	//   62  132:invokevirtual   #1660 <Method void RecyclerView$LayoutManager.setExactMeasureSpecsFrom(RecyclerView)>
		}
		dispatchLayoutStep3();
	//*  63  135:goto            69
	}

	public boolean dispatchNestedFling(float f, float f1, boolean flag)
	{
		return getScrollingChildHelper().dispatchNestedFling(f, f1, flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:iload_3         
	//    5    7:invokevirtual   #1675 <Method boolean NestedScrollingChildHelper.dispatchNestedFling(float, float, boolean)>
	//    6   10:ireturn         
	}

	public boolean dispatchNestedPreFling(float f, float f1)
	{
		return getScrollingChildHelper().dispatchNestedPreFling(f, f1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:fload_1         
	//    3    5:fload_2         
	//    4    6:invokevirtual   #1679 <Method boolean NestedScrollingChildHelper.dispatchNestedPreFling(float, float)>
	//    5    9:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[])
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:invokevirtual   #1683 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[])>
	//    7   12:ireturn         
	}

	public boolean dispatchNestedPreScroll(int i, int j, int ai[], int ai1[], int k)
	{
		return getScrollingChildHelper().dispatchNestedPreScroll(i, j, ai, ai1, k);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:aload_3         
	//    5    7:aload           4
	//    6    9:iload           5
	//    7   11:invokevirtual   #1686 <Method boolean NestedScrollingChildHelper.dispatchNestedPreScroll(int, int, int[], int[], int)>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[])
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:invokevirtual   #1690 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[])>
	//    8   14:ireturn         
	}

	public boolean dispatchNestedScroll(int i, int j, int k, int l, int ai[], int i1)
	{
		return getScrollingChildHelper().dispatchNestedScroll(i, j, k, l, ai, i1);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:iload_3         
	//    5    7:iload           4
	//    6    9:aload           5
	//    7   11:iload           6
	//    8   13:invokevirtual   #1693 <Method boolean NestedScrollingChildHelper.dispatchNestedScroll(int, int, int, int, int[], int)>
	//    9   16:ireturn         
	}

	void dispatchOnScrollStateChanged(int i)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			mLayout.onScrollStateChanged(i);
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:iload_1         
	//    6   12:invokevirtual   #1697 <Method void RecyclerView$LayoutManager.onScrollStateChanged(int)>
		onScrollStateChanged(i);
	//    7   15:aload_0         
	//    8   16:iload_1         
	//    9   17:invokevirtual   #1698 <Method void onScrollStateChanged(int)>
		if(mScrollListener != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  12   24:ifnull          36
			mScrollListener.onScrollStateChanged(this, i);
	//   13   27:aload_0         
	//   14   28:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//   15   31:aload_0         
	//   16   32:iload_1         
	//   17   33:invokevirtual   #1702 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>
		if(mScrollListeners != null)
	//*  18   36:aload_0         
	//*  19   37:getfield        #1509 <Field List mScrollListeners>
	//*  20   40:ifnull          84
		{
			for(int j = mScrollListeners.size() - 1; j >= 0; j--)
	//*  21   43:aload_0         
	//*  22   44:getfield        #1509 <Field List mScrollListeners>
	//*  23   47:invokeinterface #1637 <Method int List.size()>
	//*  24   52:iconst_1        
	//*  25   53:isub            
	//*  26   54:istore_2        
	//*  27   55:iload_2         
	//*  28   56:iflt            84
				((OnScrollListener)mScrollListeners.get(j)).onScrollStateChanged(this, i);
	//   29   59:aload_0         
	//   30   60:getfield        #1509 <Field List mScrollListeners>
	//   31   63:iload_2         
	//   32   64:invokeinterface #1638 <Method Object List.get(int)>
	//   33   69:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   34   72:aload_0         
	//   35   73:iload_1         
	//   36   74:invokevirtual   #1702 <Method void RecyclerView$OnScrollListener.onScrollStateChanged(RecyclerView, int)>

	//   37   77:iload_2         
	//   38   78:iconst_1        
	//   39   79:isub            
	//   40   80:istore_2        
		}
	//*  41   81:goto            55
	//   42   84:return          
	}

	void dispatchOnScrolled(int i, int j)
	{
		mDispatchScrollCounter = mDispatchScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #404 <Field int mDispatchScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #404 <Field int mDispatchScrollCounter>
		int k = getScrollX();
	//    6   10:aload_0         
	//    7   11:invokevirtual   #1705 <Method int getScrollX()>
	//    8   14:istore_3        
		int i1 = getScrollY();
	//    9   15:aload_0         
	//   10   16:invokevirtual   #1708 <Method int getScrollY()>
	//   11   19:istore          4
		onScrollChanged(k, i1, k, i1);
	//   12   21:aload_0         
	//   13   22:iload_3         
	//   14   23:iload           4
	//   15   25:iload_3         
	//   16   26:iload           4
	//   17   28:invokevirtual   #1711 <Method void onScrollChanged(int, int, int, int)>
		onScrolled(i, j);
	//   18   31:aload_0         
	//   19   32:iload_1         
	//   20   33:iload_2         
	//   21   34:invokevirtual   #1714 <Method void onScrolled(int, int)>
		if(mScrollListener != null)
	//*  22   37:aload_0         
	//*  23   38:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//*  24   41:ifnull          54
			mScrollListener.onScrolled(this, i, j);
	//   25   44:aload_0         
	//   26   45:getfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//   27   48:aload_0         
	//   28   49:iload_1         
	//   29   50:iload_2         
	//   30   51:invokevirtual   #1716 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>
		if(mScrollListeners != null)
	//*  31   54:aload_0         
	//*  32   55:getfield        #1509 <Field List mScrollListeners>
	//*  33   58:ifnull          103
		{
			for(int l = mScrollListeners.size() - 1; l >= 0; l--)
	//*  34   61:aload_0         
	//*  35   62:getfield        #1509 <Field List mScrollListeners>
	//*  36   65:invokeinterface #1637 <Method int List.size()>
	//*  37   70:iconst_1        
	//*  38   71:isub            
	//*  39   72:istore_3        
	//*  40   73:iload_3         
	//*  41   74:iflt            103
				((OnScrollListener)mScrollListeners.get(l)).onScrolled(this, i, j);
	//   42   77:aload_0         
	//   43   78:getfield        #1509 <Field List mScrollListeners>
	//   44   81:iload_3         
	//   45   82:invokeinterface #1638 <Method Object List.get(int)>
	//   46   87:checkcast       #80  <Class RecyclerView$OnScrollListener>
	//   47   90:aload_0         
	//   48   91:iload_1         
	//   49   92:iload_2         
	//   50   93:invokevirtual   #1716 <Method void RecyclerView$OnScrollListener.onScrolled(RecyclerView, int, int)>

	//   51   96:iload_3         
	//   52   97:iconst_1        
	//   53   98:isub            
	//   54   99:istore_3        
		}
	//*  55  100:goto            73
		mDispatchScrollCounter = mDispatchScrollCounter - 1;
	//   56  103:aload_0         
	//   57  104:aload_0         
	//   58  105:getfield        #404 <Field int mDispatchScrollCounter>
	//   59  108:iconst_1        
	//   60  109:isub            
	//   61  110:putfield        #404 <Field int mDispatchScrollCounter>
	//   62  113:return          
	}

	void dispatchPendingImportantForAccessibilityChanges()
	{
		int i = mPendingAccessibilityImportanceChange.size() - 1;
	//    0    0:aload_0         
	//    1    1:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//    2    4:invokeinterface #1637 <Method int List.size()>
	//    3    9:iconst_1        
	//    4   10:isub            
	//    5   11:istore_1        
		while(i >= 0) 
	//*   6   12:iload_1         
	//*   7   13:iflt            81
		{
			ViewHolder viewholder = (ViewHolder)mPendingAccessibilityImportanceChange.get(i);
	//    8   16:aload_0         
	//    9   17:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   10   20:iload_1         
	//   11   21:invokeinterface #1638 <Method Object List.get(int)>
	//   12   26:checkcast       #127 <Class RecyclerView$ViewHolder>
	//   13   29:astore_3        
			if(viewholder.itemView.getParent() == this && !viewholder.shouldIgnore())
	//*  14   30:aload_3         
	//*  15   31:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//*  16   34:invokevirtual   #651 <Method ViewParent View.getParent()>
	//*  17   37:aload_0         
	//*  18   38:if_acmpne       48
	//*  19   41:aload_3         
	//*  20   42:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   45:ifeq            55
	//*  22   48:iload_1         
	//*  23   49:iconst_1        
	//*  24   50:isub            
	//*  25   51:istore_1        
	//*  26   52:goto            12
			{
				int j = viewholder.mPendingAccessibilityState;
	//   27   55:aload_3         
	//   28   56:getfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
	//   29   59:istore_2        
				if(j != -1)
	//*  30   60:iload_2         
	//*  31   61:iconst_m1       
	//*  32   62:icmpeq          48
				{
					ViewCompat.setImportantForAccessibility(viewholder.itemView, j);
	//   33   65:aload_3         
	//   34   66:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   35   69:iload_2         
	//   36   70:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
					viewholder.mPendingAccessibilityState = -1;
	//   37   73:aload_3         
	//   38   74:iconst_m1       
	//   39   75:putfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
				}
			}
			i--;
		}
	//*  40   78:goto            48
		mPendingAccessibilityImportanceChange.clear();
	//   41   81:aload_0         
	//   42   82:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   43   85:invokeinterface #1554 <Method void List.clear()>
	//   44   90:return          
	}

	protected void dispatchRestoreInstanceState(SparseArray sparsearray)
	{
		dispatchThawSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1725 <Method void dispatchThawSelfOnly(SparseArray)>
	//    3    5:return          
	}

	protected void dispatchSaveInstanceState(SparseArray sparsearray)
	{
		dispatchFreezeSelfOnly(sparsearray);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1730 <Method void dispatchFreezeSelfOnly(SparseArray)>
	//    3    5:return          
	}

	public void draw(Canvas canvas)
	{
		boolean flag = true;
	//    0    0:iconst_1        
	//    1    1:istore          4
		super.draw(canvas);
	//    2    3:aload_0         
	//    3    4:aload_1         
	//    4    5:invokespecial   #1734 <Method void ViewGroup.draw(Canvas)>
		int k = mItemDecorations.size();
	//    5    8:aload_0         
	//    6    9:getfield        #394 <Field ArrayList mItemDecorations>
	//    7   12:invokevirtual   #1078 <Method int ArrayList.size()>
	//    8   15:istore_3        
		for(int i = 0; i < k; i++)
	//*   9   16:iconst_0        
	//*  10   17:istore_2        
	//*  11   18:iload_2         
	//*  12   19:iload_3         
	//*  13   20:icmpge          50
			((ItemDecoration)mItemDecorations.get(i)).onDrawOver(canvas, this, mState);
	//   14   23:aload_0         
	//   15   24:getfield        #394 <Field ArrayList mItemDecorations>
	//   16   27:iload_2         
	//   17   28:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   18   31:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   19   34:aload_1         
	//   20   35:aload_0         
	//   21   36:aload_0         
	//   22   37:getfield        #431 <Field RecyclerView$State mState>
	//   23   40:invokevirtual   #1738 <Method void RecyclerView$ItemDecoration.onDrawOver(Canvas, RecyclerView, RecyclerView$State)>

	//   24   43:iload_2         
	//   25   44:iconst_1        
	//   26   45:iadd            
	//   27   46:istore_2        
	//*  28   47:goto            18
		int j = 0;
	//   29   50:iconst_0        
	//   30   51:istore_2        
		k = j;
	//   31   52:iload_2         
	//   32   53:istore_3        
		if(mLeftGlow != null)
	//*  33   54:aload_0         
	//*  34   55:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  35   58:ifnull          137
		{
			k = j;
	//   36   61:iload_2         
	//   37   62:istore_3        
			if(!mLeftGlow.isFinished())
	//*  38   63:aload_0         
	//*  39   64:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  40   67:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  41   70:ifne            137
			{
				int l = canvas.save();
	//   42   73:aload_1         
	//   43   74:invokevirtual   #1743 <Method int Canvas.save()>
	//   44   77:istore          5
				int i1;
				if(mClipToPadding)
	//*  45   79:aload_0         
	//*  46   80:getfield        #468 <Field boolean mClipToPadding>
	//*  47   83:ifeq            456
					j = getPaddingBottom();
	//   48   86:aload_0         
	//   49   87:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   50   90:istore_2        
				else
	//*  51   91:aload_1         
	//*  52   92:ldc2            #1744 <Float 270F>
	//*  53   95:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//*  54   98:aload_1         
	//*  55   99:aload_0         
	//*  56  100:invokevirtual   #1320 <Method int getHeight()>
	//*  57  103:ineg            
	//*  58  104:iload_2         
	//*  59  105:iadd            
	//*  60  106:i2f             
	//*  61  107:fconst_0        
	//*  62  108:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//*  63  111:aload_0         
	//*  64  112:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  65  115:ifnull          461
	//*  66  118:aload_0         
	//*  67  119:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*  68  122:aload_1         
	//*  69  123:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//*  70  126:ifeq            461
	//*  71  129:iconst_1        
	//*  72  130:istore_3        
	//*  73  131:aload_1         
	//*  74  132:iload           5
	//*  75  134:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//*  76  137:iload_3         
	//*  77  138:istore_2        
	//*  78  139:aload_0         
	//*  79  140:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  80  143:ifnull          215
	//*  81  146:iload_3         
	//*  82  147:istore_2        
	//*  83  148:aload_0         
	//*  84  149:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*  85  152:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//*  86  155:ifne            215
	//*  87  158:aload_1         
	//*  88  159:invokevirtual   #1743 <Method int Canvas.save()>
	//*  89  162:istore          5
	//*  90  164:aload_0         
	//*  91  165:getfield        #468 <Field boolean mClipToPadding>
	//*  92  168:ifeq            185
	//*  93  171:aload_1         
	//*  94  172:aload_0         
	//*  95  173:invokevirtual   #1610 <Method int getPaddingLeft()>
	//*  96  176:i2f             
	//*  97  177:aload_0         
	//*  98  178:invokevirtual   #1623 <Method int getPaddingTop()>
	//*  99  181:i2f             
	//* 100  182:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 101  185:aload_0         
	//* 102  186:getfield        #1331 <Field EdgeEffect mTopGlow>
	//* 103  189:ifnull          466
	//* 104  192:aload_0         
	//* 105  193:getfield        #1331 <Field EdgeEffect mTopGlow>
	//* 106  196:aload_1         
	//* 107  197:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 108  200:ifeq            466
	//* 109  203:iconst_1        
	//* 110  204:istore_2        
	//* 111  205:iload_3         
	//* 112  206:iload_2         
	//* 113  207:ior             
	//* 114  208:istore_2        
	//* 115  209:aload_1         
	//* 116  210:iload           5
	//* 117  212:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 118  215:iload_2         
	//* 119  216:istore_3        
	//* 120  217:aload_0         
	//* 121  218:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 122  221:ifnull          308
	//* 123  224:iload_2         
	//* 124  225:istore_3        
	//* 125  226:aload_0         
	//* 126  227:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 127  230:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//* 128  233:ifne            308
	//* 129  236:aload_1         
	//* 130  237:invokevirtual   #1743 <Method int Canvas.save()>
	//* 131  240:istore          5
	//* 132  242:aload_0         
	//* 133  243:invokevirtual   #1319 <Method int getWidth()>
	//* 134  246:istore          6
	//* 135  248:aload_0         
	//* 136  249:getfield        #468 <Field boolean mClipToPadding>
	//* 137  252:ifeq            471
	//* 138  255:aload_0         
	//* 139  256:invokevirtual   #1623 <Method int getPaddingTop()>
	//* 140  259:istore_3        
	//* 141  260:aload_1         
	//* 142  261:ldc2            #1759 <Float 90F>
	//* 143  264:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//* 144  267:aload_1         
	//* 145  268:iload_3         
	//* 146  269:ineg            
	//* 147  270:i2f             
	//* 148  271:iload           6
	//* 149  273:ineg            
	//* 150  274:i2f             
	//* 151  275:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 152  278:aload_0         
	//* 153  279:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 154  282:ifnull          476
	//* 155  285:aload_0         
	//* 156  286:getfield        #1339 <Field EdgeEffect mRightGlow>
	//* 157  289:aload_1         
	//* 158  290:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 159  293:ifeq            476
	//* 160  296:iconst_1        
	//* 161  297:istore_3        
	//* 162  298:iload_2         
	//* 163  299:iload_3         
	//* 164  300:ior             
	//* 165  301:istore_3        
	//* 166  302:aload_1         
	//* 167  303:iload           5
	//* 168  305:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 169  308:iload_3         
	//* 170  309:istore_2        
	//* 171  310:aload_0         
	//* 172  311:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 173  314:ifnull          406
	//* 174  317:iload_3         
	//* 175  318:istore_2        
	//* 176  319:aload_0         
	//* 177  320:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 178  323:invokevirtual   #1386 <Method boolean EdgeEffect.isFinished()>
	//* 179  326:ifne            406
	//* 180  329:aload_1         
	//* 181  330:invokevirtual   #1743 <Method int Canvas.save()>
	//* 182  333:istore          5
	//* 183  335:aload_1         
	//* 184  336:ldc2            #1760 <Float 180F>
	//* 185  339:invokevirtual   #1748 <Method void Canvas.rotate(float)>
	//* 186  342:aload_0         
	//* 187  343:getfield        #468 <Field boolean mClipToPadding>
	//* 188  346:ifeq            481
	//* 189  349:aload_1         
	//* 190  350:aload_0         
	//* 191  351:invokevirtual   #1319 <Method int getWidth()>
	//* 192  354:ineg            
	//* 193  355:aload_0         
	//* 194  356:invokevirtual   #1613 <Method int getPaddingRight()>
	//* 195  359:iadd            
	//* 196  360:i2f             
	//* 197  361:aload_0         
	//* 198  362:invokevirtual   #1320 <Method int getHeight()>
	//* 199  365:ineg            
	//* 200  366:aload_0         
	//* 201  367:invokevirtual   #1626 <Method int getPaddingBottom()>
	//* 202  370:iadd            
	//* 203  371:i2f             
	//* 204  372:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
	//* 205  375:aload_0         
	//* 206  376:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 207  379:ifnull          500
	//* 208  382:aload_0         
	//* 209  383:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//* 210  386:aload_1         
	//* 211  387:invokevirtual   #1755 <Method boolean EdgeEffect.draw(Canvas)>
	//* 212  390:ifeq            500
	//* 213  393:iload           4
	//* 214  395:istore_2        
	//* 215  396:iload_3         
	//* 216  397:iload_2         
	//* 217  398:ior             
	//* 218  399:istore_2        
	//* 219  400:aload_1         
	//* 220  401:iload           5
	//* 221  403:invokevirtual   #1758 <Method void Canvas.restoreToCount(int)>
	//* 222  406:iload_2         
	//* 223  407:istore_3        
	//* 224  408:iload_2         
	//* 225  409:ifne            447
	//* 226  412:iload_2         
	//* 227  413:istore_3        
	//* 228  414:aload_0         
	//* 229  415:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 230  418:ifnull          447
	//* 231  421:iload_2         
	//* 232  422:istore_3        
	//* 233  423:aload_0         
	//* 234  424:getfield        #394 <Field ArrayList mItemDecorations>
	//* 235  427:invokevirtual   #1078 <Method int ArrayList.size()>
	//* 236  430:ifle            447
	//* 237  433:iload_2         
	//* 238  434:istore_3        
	//* 239  435:aload_0         
	//* 240  436:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//* 241  439:invokevirtual   #1763 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//* 242  442:ifeq            447
	//* 243  445:iconst_1        
	//* 244  446:istore_3        
	//* 245  447:iload_3         
	//* 246  448:ifeq            455
	//* 247  451:aload_0         
	//* 248  452:invokestatic    #1334 <Method void ViewCompat.postInvalidateOnAnimation(View)>
	//* 249  455:return          
					j = 0;
	//  250  456:iconst_0        
	//  251  457:istore_2        
				canvas.rotate(270F);
				canvas.translate(-getHeight() + j, 0.0F);
				if(mLeftGlow != null && mLeftGlow.draw(canvas))
					k = 1;
				else
	//* 252  458:goto            91
					k = 0;
	//  253  461:iconst_0        
	//  254  462:istore_3        
				canvas.restoreToCount(l);
			}
		}
		j = k;
		if(mTopGlow != null)
		{
			j = k;
			if(!mTopGlow.isFinished())
			{
				l = canvas.save();
				if(mClipToPadding)
					canvas.translate(getPaddingLeft(), getPaddingTop());
				if(mTopGlow != null && mTopGlow.draw(canvas))
					j = 1;
				else
	//* 255  463:goto            131
					j = 0;
	//  256  466:iconst_0        
	//  257  467:istore_2        
				j = ((int) (k | j));
				canvas.restoreToCount(l);
			}
		}
		k = j;
		if(mRightGlow != null)
		{
			k = j;
			if(!mRightGlow.isFinished())
			{
				l = canvas.save();
				i1 = getWidth();
				if(mClipToPadding)
					k = getPaddingTop();
				else
	//* 258  468:goto            205
					k = 0;
	//  259  471:iconst_0        
	//  260  472:istore_3        
				canvas.rotate(90F);
				canvas.translate(-k, -i1);
				if(mRightGlow != null && mRightGlow.draw(canvas))
					k = 1;
				else
	//* 261  473:goto            260
					k = 0;
	//  262  476:iconst_0        
	//  263  477:istore_3        
				k = j | k;
				canvas.restoreToCount(l);
			}
		}
		j = k;
		if(mBottomGlow != null)
		{
			j = k;
			if(!mBottomGlow.isFinished())
			{
				l = canvas.save();
				canvas.rotate(180F);
				if(mClipToPadding)
					canvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
				else
	//* 264  478:goto            298
					canvas.translate(-getWidth(), -getHeight());
	//  265  481:aload_1         
	//  266  482:aload_0         
	//  267  483:invokevirtual   #1319 <Method int getWidth()>
	//  268  486:ineg            
	//  269  487:i2f             
	//  270  488:aload_0         
	//  271  489:invokevirtual   #1320 <Method int getHeight()>
	//  272  492:ineg            
	//  273  493:i2f             
	//  274  494:invokevirtual   #1752 <Method void Canvas.translate(float, float)>
				if(mBottomGlow != null && mBottomGlow.draw(canvas))
					j = ((int) (flag));
				else
	//* 275  497:goto            375
					j = 0;
	//  276  500:iconst_0        
	//  277  501:istore_2        
				j = k | j;
				canvas.restoreToCount(l);
			}
		}
		k = j;
		if(j == 0)
		{
			k = j;
			if(mItemAnimator != null)
			{
				k = j;
				if(mItemDecorations.size() > 0)
				{
					k = j;
					if(mItemAnimator.isRunning())
						k = 1;
				}
			}
		}
		if(k != 0)
			ViewCompat.postInvalidateOnAnimation(((View) (this)));
	//* 278  502:goto            396
	}

	public boolean drawChild(Canvas canvas, View view, long l)
	{
		return super.drawChild(canvas, view, l);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:aload_2         
	//    3    3:lload_3         
	//    4    4:invokespecial   #1767 <Method boolean ViewGroup.drawChild(Canvas, View, long)>
	//    5    7:ireturn         
	}

	void eatRequestLayout()
	{
		mEatRequestLayout = mEatRequestLayout + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #398 <Field int mEatRequestLayout>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #398 <Field int mEatRequestLayout>
		if(mEatRequestLayout == 1 && !mLayoutFrozen)
	//*   6   10:aload_0         
	//*   7   11:getfield        #398 <Field int mEatRequestLayout>
	//*   8   14:iconst_1        
	//*   9   15:icmpne          30
	//*  10   18:aload_0         
	//*  11   19:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  12   22:ifne            30
			mLayoutRequestEaten = false;
	//   13   25:aload_0         
	//   14   26:iconst_0        
	//   15   27:putfield        #1601 <Field boolean mLayoutRequestEaten>
	//   16   30:return          
	}

	void ensureBottomGlow()
	{
		if(mBottomGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mBottomGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1344 <Field EdgeEffect mBottomGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mBottomGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1613 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1623 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mBottomGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1344 <Field EdgeEffect mBottomGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureLeftGlow()
	{
		if(mLeftGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mLeftGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1318 <Field EdgeEffect mLeftGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mLeftGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1623 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1613 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mLeftGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1318 <Field EdgeEffect mLeftGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureRightGlow()
	{
		if(mRightGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1339 <Field EdgeEffect mRightGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mRightGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1339 <Field EdgeEffect mRightGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mRightGlow.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
	//   14   30:aload_0         
	//   15   31:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1623 <Method int getPaddingTop()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1613 <Method int getPaddingRight()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mRightGlow.setSize(getMeasuredHeight(), getMeasuredWidth());
	//   34   66:aload_0         
	//   35   67:getfield        #1339 <Field EdgeEffect mRightGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	void ensureTopGlow()
	{
		if(mTopGlow != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1331 <Field EdgeEffect mTopGlow>
	//*   2    4:ifnull          8
			return;
	//    3    7:return          
		mTopGlow = new EdgeEffect(getContext());
	//    4    8:aload_0         
	//    5    9:new             #1380 <Class EdgeEffect>
	//    6   12:dup             
	//    7   13:aload_0         
	//    8   14:invokevirtual   #539 <Method Context getContext()>
	//    9   17:invokespecial   #1771 <Method void EdgeEffect(Context)>
	//   10   20:putfield        #1331 <Field EdgeEffect mTopGlow>
		if(mClipToPadding)
	//*  11   23:aload_0         
	//*  12   24:getfield        #468 <Field boolean mClipToPadding>
	//*  13   27:ifeq            66
		{
			mTopGlow.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
	//   14   30:aload_0         
	//   15   31:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   16   34:aload_0         
	//   17   35:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   18   38:aload_0         
	//   19   39:invokevirtual   #1610 <Method int getPaddingLeft()>
	//   20   42:isub            
	//   21   43:aload_0         
	//   22   44:invokevirtual   #1613 <Method int getPaddingRight()>
	//   23   47:isub            
	//   24   48:aload_0         
	//   25   49:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   26   52:aload_0         
	//   27   53:invokevirtual   #1623 <Method int getPaddingTop()>
	//   28   56:isub            
	//   29   57:aload_0         
	//   30   58:invokevirtual   #1626 <Method int getPaddingBottom()>
	//   31   61:isub            
	//   32   62:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   33   65:return          
		} else
		{
			mTopGlow.setSize(getMeasuredWidth(), getMeasuredHeight());
	//   34   66:aload_0         
	//   35   67:getfield        #1331 <Field EdgeEffect mTopGlow>
	//   36   70:aload_0         
	//   37   71:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   38   74:aload_0         
	//   39   75:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   40   78:invokevirtual   #1780 <Method void EdgeEffect.setSize(int, int)>
			return;
	//   41   81:return          
		}
	}

	String exceptionLabel()
	{
		return (new StringBuilder()).append(" ").append(super.toString()).append(", adapter:").append(((Object) (mAdapter))).append(", layout:").append(((Object) (mLayout))).append(", context:").append(((Object) (getContext()))).toString();
	//    0    0:new             #796 <Class StringBuilder>
	//    1    3:dup             
	//    2    4:invokespecial   #797 <Method void StringBuilder()>
	//    3    7:ldc2            #1782 <String " ">
	//    4   10:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//    5   13:aload_0         
	//    6   14:invokespecial   #1783 <Method String ViewGroup.toString()>
	//    7   17:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//    8   20:ldc2            #1785 <String ", adapter:">
	//    9   23:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   26:aload_0         
	//   11   27:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//   12   30:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   13   33:ldc2            #1787 <String ", layout:">
	//   14   36:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   39:aload_0         
	//   16   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   17   43:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   18   46:ldc2            #1789 <String ", context:">
	//   19   49:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   20   52:aload_0         
	//   21   53:invokevirtual   #539 <Method Context getContext()>
	//   22   56:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   23   59:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   24   62:areturn         
	}

	final void fillRemainingScrollValues(State state)
	{
		if(getScrollState() == 2)
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1792 <Method int getScrollState()>
	//*   2    4:iconst_2        
	//*   3    5:icmpne          43
		{
			OverScroller overscroller = mViewFlinger.mScroller;
	//    4    8:aload_0         
	//    5    9:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//    6   12:invokestatic    #1796 <Method OverScroller RecyclerView$ViewFlinger.access$400(RecyclerView$ViewFlinger)>
	//    7   15:astore_2        
			state.mRemainingScrollHorizontal = overscroller.getFinalX() - overscroller.getCurrX();
	//    8   16:aload_1         
	//    9   17:aload_2         
	//   10   18:invokevirtual   #1801 <Method int OverScroller.getFinalX()>
	//   11   21:aload_2         
	//   12   22:invokevirtual   #1804 <Method int OverScroller.getCurrX()>
	//   13   25:isub            
	//   14   26:putfield        #1807 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = overscroller.getFinalY() - overscroller.getCurrY();
	//   15   29:aload_1         
	//   16   30:aload_2         
	//   17   31:invokevirtual   #1810 <Method int OverScroller.getFinalY()>
	//   18   34:aload_2         
	//   19   35:invokevirtual   #1813 <Method int OverScroller.getCurrY()>
	//   20   38:isub            
	//   21   39:putfield        #1816 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   22   42:return          
		} else
		{
			state.mRemainingScrollHorizontal = 0;
	//   23   43:aload_1         
	//   24   44:iconst_0        
	//   25   45:putfield        #1807 <Field int RecyclerView$State.mRemainingScrollHorizontal>
			state.mRemainingScrollVertical = 0;
	//   26   48:aload_1         
	//   27   49:iconst_0        
	//   28   50:putfield        #1816 <Field int RecyclerView$State.mRemainingScrollVertical>
			return;
	//   29   53:return          
		}
	}

	public View findChildViewUnder(float f, float f1)
	{
		for(int i = mChildHelper.getChildCount() - 1; i >= 0; i--)
	//*   0    0:aload_0         
	//*   1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//*   2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//*   3    7:iconst_1        
	//*   4    8:isub            
	//*   5    9:istore          5
	//*   6   11:iload           5
	//*   7   13:iflt            106
		{
			View view = mChildHelper.getChildAt(i);
	//    8   16:aload_0         
	//    9   17:getfield        #663 <Field ChildHelper mChildHelper>
	//   10   20:iload           5
	//   11   22:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   12   25:astore          6
			float f2 = view.getTranslationX();
	//   13   27:aload           6
	//   14   29:invokevirtual   #1822 <Method float View.getTranslationX()>
	//   15   32:fstore_3        
			float f3 = view.getTranslationY();
	//   16   33:aload           6
	//   17   35:invokevirtual   #1825 <Method float View.getTranslationY()>
	//   18   38:fstore          4
			if(f >= (float)view.getLeft() + f2 && f <= (float)view.getRight() + f2 && f1 >= (float)view.getTop() + f3 && f1 <= (float)view.getBottom() + f3)
	//*  19   40:fload_1         
	//*  20   41:aload           6
	//*  21   43:invokevirtual   #1131 <Method int View.getLeft()>
	//*  22   46:i2f             
	//*  23   47:fload_3         
	//*  24   48:fadd            
	//*  25   49:fcmpl           
	//*  26   50:iflt            97
	//*  27   53:fload_1         
	//*  28   54:aload           6
	//*  29   56:invokevirtual   #1149 <Method int View.getRight()>
	//*  30   59:i2f             
	//*  31   60:fload_3         
	//*  32   61:fadd            
	//*  33   62:fcmpg           
	//*  34   63:ifgt            97
	//*  35   66:fload_2         
	//*  36   67:aload           6
	//*  37   69:invokevirtual   #1140 <Method int View.getTop()>
	//*  38   72:i2f             
	//*  39   73:fload           4
	//*  40   75:fadd            
	//*  41   76:fcmpl           
	//*  42   77:iflt            97
	//*  43   80:fload_2         
	//*  44   81:aload           6
	//*  45   83:invokevirtual   #1158 <Method int View.getBottom()>
	//*  46   86:i2f             
	//*  47   87:fload           4
	//*  48   89:fadd            
	//*  49   90:fcmpg           
	//*  50   91:ifgt            97
				return view;
	//   51   94:aload           6
	//   52   96:areturn         
		}

	//   53   97:iload           5
	//   54   99:iconst_1        
	//   55  100:isub            
	//   56  101:istore          5
	//*  57  103:goto            11
		return null;
	//   58  106:aconst_null     
	//   59  107:areturn         
	}

	public View findContainingItemView(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #651 <Method ViewParent View.getParent()>
	//    2    4:astore_3        
		View view1 = view;
	//    3    5:aload_1         
	//    4    6:astore_2        
		for(view = ((View) (viewparent)); view != null && view != this && (view instanceof View); view = ((View) (view1.getParent())))
	//*   5    7:aload_3         
	//*   6    8:astore_1        
	//*   7    9:aload_1         
	//*   8   10:ifnull          38
	//*   9   13:aload_1         
	//*  10   14:aload_0         
	//*  11   15:if_acmpeq       38
	//*  12   18:aload_1         
	//*  13   19:instanceof      #647 <Class View>
	//*  14   22:ifeq            38
			view1 = (View)view;
	//   15   25:aload_1         
	//   16   26:checkcast       #647 <Class View>
	//   17   29:astore_2        

	//   18   30:aload_2         
	//   19   31:invokevirtual   #651 <Method ViewParent View.getParent()>
	//   20   34:astore_1        
	//*  21   35:goto            9
		if(view == this)
	//*  22   38:aload_1         
	//*  23   39:aload_0         
	//*  24   40:if_acmpne       45
			return view1;
	//   25   43:aload_2         
	//   26   44:areturn         
		else
			return null;
	//   27   45:aconst_null     
	//   28   46:areturn         
	}

	public ViewHolder findContainingViewHolder(View view)
	{
		view = findContainingItemView(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//    3    5:astore_1        
		if(view == null)
	//*   4    6:aload_1         
	//*   5    7:ifnonnull       12
			return null;
	//    6   10:aconst_null     
	//    7   11:areturn         
		else
			return getChildViewHolder(view);
	//    8   12:aload_0         
	//    9   13:aload_1         
	//   10   14:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   11   17:areturn         
	}

	public ViewHolder findViewHolderForAdapterPosition(int i)
	{
		if(!mDataSetHasChangedAfterLayout) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//    2    4:ifeq            13
_L1:
		ViewHolder viewholder1 = null;
	//    3    7:aconst_null     
	//    4    8:astore          5
_L4:
		return viewholder1;
	//    5   10:aload           5
	//    6   12:areturn         
_L2:
		int k = mChildHelper.getUnfilteredChildCount();
	//    7   13:aload_0         
	//    8   14:getfield        #663 <Field ChildHelper mChildHelper>
	//    9   17:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//   10   20:istore_3        
		viewholder1 = null;
	//   11   21:aconst_null     
	//   12   22:astore          5
		for(int j = 0; j < k;)
	//*  13   24:iconst_0        
	//*  14   25:istore_2        
	//*  15   26:iload_2         
	//*  16   27:iload_3         
	//*  17   28:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   18   31:aload_0         
	//   19   32:getfield        #663 <Field ChildHelper mChildHelper>
	//   20   35:iload_2         
	//   21   36:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   22   39:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   23   42:astore          4
			ViewHolder viewholder2 = viewholder1;
	//   24   44:aload           5
	//   25   46:astore          6
			if(viewholder != null)
	//*  26   48:aload           4
	//*  27   50:ifnull          102
			{
				viewholder2 = viewholder1;
	//   28   53:aload           5
	//   29   55:astore          6
				if(!viewholder.isRemoved())
	//*  30   57:aload           4
	//*  31   59:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  32   62:ifne            102
				{
					viewholder2 = viewholder1;
	//   33   65:aload           5
	//   34   67:astore          6
					if(getAdapterPositionFor(viewholder) == i)
	//*  35   69:aload_0         
	//*  36   70:aload           4
	//*  37   72:invokevirtual   #1832 <Method int getAdapterPositionFor(RecyclerView$ViewHolder)>
	//*  38   75:iload_1         
	//*  39   76:icmpne          102
					{
						viewholder1 = viewholder;
	//   40   79:aload           4
	//   41   81:astore          5
						if(!mChildHelper.isHidden(viewholder.itemView))
							continue; /* Loop/switch isn't completed */
	//   42   83:aload_0         
	//   43   84:getfield        #663 <Field ChildHelper mChildHelper>
	//   44   87:aload           4
	//   45   89:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   46   92:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   47   95:ifeq            10
						viewholder2 = viewholder;
	//   48   98:aload           4
	//   49  100:astore          6
					}
				}
			}
			j++;
	//   50  102:iload_2         
	//   51  103:iconst_1        
	//   52  104:iadd            
	//   53  105:istore_2        
			viewholder1 = viewholder2;
	//   54  106:aload           6
	//   55  108:astore          5
		}

	//*  56  110:goto            26
		return viewholder1;
	//   57  113:aload           5
	//   58  115:areturn         
		if(true) goto _L4; else goto _L3
_L3:
	}

	public ViewHolder findViewHolderForItemId(long l)
	{
		if(mAdapter != null && mAdapter.hasStableIds()) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    2    4:ifnull          17
	//    3    7:aload_0         
	//    4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    5   11:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//    6   14:ifne            23
_L1:
		ViewHolder viewholder1 = null;
	//    7   17:aconst_null     
	//    8   18:astore          6
_L4:
		return viewholder1;
	//    9   20:aload           6
	//   10   22:areturn         
_L2:
		int j = mChildHelper.getUnfilteredChildCount();
	//   11   23:aload_0         
	//   12   24:getfield        #663 <Field ChildHelper mChildHelper>
	//   13   27:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//   14   30:istore          4
		viewholder1 = null;
	//   15   32:aconst_null     
	//   16   33:astore          6
		for(int i = 0; i < j;)
	//*  17   35:iconst_0        
	//*  18   36:istore_3        
	//*  19   37:iload_3         
	//*  20   38:iload           4
	//*  21   40:icmpge          125
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//   22   43:aload_0         
	//   23   44:getfield        #663 <Field ChildHelper mChildHelper>
	//   24   47:iload_3         
	//   25   48:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   26   51:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   27   54:astore          5
			ViewHolder viewholder2 = viewholder1;
	//   28   56:aload           6
	//   29   58:astore          7
			if(viewholder != null)
	//*  30   60:aload           5
	//*  31   62:ifnull          114
			{
				viewholder2 = viewholder1;
	//   32   65:aload           6
	//   33   67:astore          7
				if(!viewholder.isRemoved())
	//*  34   69:aload           5
	//*  35   71:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  36   74:ifne            114
				{
					viewholder2 = viewholder1;
	//   37   77:aload           6
	//   38   79:astore          7
					if(viewholder.getItemId() == l)
	//*  39   81:aload           5
	//*  40   83:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//*  41   86:lload_1         
	//*  42   87:lcmp            
	//*  43   88:ifne            114
					{
						viewholder1 = viewholder;
	//   44   91:aload           5
	//   45   93:astore          6
						if(!mChildHelper.isHidden(viewholder.itemView))
							continue; /* Loop/switch isn't completed */
	//   46   95:aload_0         
	//   47   96:getfield        #663 <Field ChildHelper mChildHelper>
	//   48   99:aload           5
	//   49  101:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   50  104:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   51  107:ifeq            20
						viewholder2 = viewholder;
	//   52  110:aload           5
	//   53  112:astore          7
					}
				}
			}
			i++;
	//   54  114:iload_3         
	//   55  115:iconst_1        
	//   56  116:iadd            
	//   57  117:istore_3        
			viewholder1 = viewholder2;
	//   58  118:aload           7
	//   59  120:astore          6
		}

	//*  60  122:goto            37
		return viewholder1;
	//   61  125:aload           6
	//   62  127:areturn         
		if(true) goto _L4; else goto _L3
_L3:
	}

	public ViewHolder findViewHolderForLayoutPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1837 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	public ViewHolder findViewHolderForPosition(int i)
	{
		return findViewHolderForPosition(i, false);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iconst_0        
	//    3    3:invokevirtual   #1837 <Method RecyclerView$ViewHolder findViewHolderForPosition(int, boolean)>
	//    4    6:areturn         
	}

	ViewHolder findViewHolderForPosition(int i, boolean flag)
	{
		int j;
		int k;
		ViewHolder viewholder;
		k = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		viewholder = null;
	//    4    9:aconst_null     
	//    5   10:astore          5
		j = 0;
	//    6   12:iconst_0        
	//    7   13:istore_3        
_L8:
		ViewHolder viewholder1;
		ViewHolder viewholder2;
		if(j >= k)
			break MISSING_BLOCK_LABEL_121;
	//    8   14:iload_3         
	//    9   15:iload           4
	//   10   17:icmpge          121
		viewholder1 = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(j));
	//   11   20:aload_0         
	//   12   21:getfield        #663 <Field ChildHelper mChildHelper>
	//   13   24:iload_3         
	//   14   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   15   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   31:astore          6
		viewholder2 = viewholder;
	//   17   33:aload           5
	//   18   35:astore          7
		if(viewholder1 == null) goto _L2; else goto _L1
	//   19   37:aload           6
	//   20   39:ifnull          71
_L1:
		viewholder2 = viewholder;
	//   21   42:aload           5
	//   22   44:astore          7
		if(viewholder1.isRemoved()) goto _L2; else goto _L3
	//   23   46:aload           6
	//   24   48:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//   25   51:ifne            71
_L3:
		if(!flag) goto _L5; else goto _L4
	//   26   54:iload_2         
	//   27   55:ifeq            82
_L4:
		if(viewholder1.mPosition == i) goto _L7; else goto _L6
	//   28   58:aload           6
	//   29   60:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//   30   63:iload_1         
	//   31   64:icmpeq          95
_L6:
		viewholder2 = viewholder;
	//   32   67:aload           5
	//   33   69:astore          7
_L2:
		j++;
	//   34   71:iload_3         
	//   35   72:iconst_1        
	//   36   73:iadd            
	//   37   74:istore_3        
		viewholder = viewholder2;
	//   38   75:aload           7
	//   39   77:astore          5
		  goto _L8
	//*  40   79:goto            14
_L5:
		viewholder2 = viewholder;
	//   41   82:aload           5
	//   42   84:astore          7
		if(viewholder1.getLayoutPosition() != i) goto _L2; else goto _L7
	//   43   86:aload           6
	//   44   88:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//   45   91:iload_1         
	//   46   92:icmpne          71
_L7:
		viewholder = viewholder1;
	//   47   95:aload           6
	//   48   97:astore          5
		if(!mChildHelper.isHidden(viewholder1.itemView))
			break MISSING_BLOCK_LABEL_121;
	//   49   99:aload_0         
	//   50  100:getfield        #663 <Field ChildHelper mChildHelper>
	//   51  103:aload           6
	//   52  105:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   53  108:invokevirtual   #1359 <Method boolean ChildHelper.isHidden(View)>
	//   54  111:ifeq            121
		viewholder2 = viewholder1;
	//   55  114:aload           6
	//   56  116:astore          7
		  goto _L2
	//*  57  118:goto            71
		return viewholder;
	//   58  121:aload           5
	//   59  123:areturn         
	}

	public boolean fling(int i, int j)
	{
		if(mLayout != null) goto _L2; else goto _L1
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:ifnonnull       18
_L1:
		Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #1845 <String "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
_L4:
		return false;
	//    7   16:iconst_0        
	//    8   17:ireturn         
_L2:
		int k;
		int l;
		boolean flag1;
		boolean flag2;
label0:
		{
			if(mLayoutFrozen)
				continue; /* Loop/switch isn't completed */
	//    9   18:aload_0         
	//   10   19:getfield        #1769 <Field boolean mLayoutFrozen>
	//   11   22:ifne            16
			flag1 = mLayout.canScrollHorizontally();
	//   12   25:aload_0         
	//   13   26:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   15   32:istore          6
			flag2 = mLayout.canScrollVertically();
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   19   41:istore          7
			if(flag1)
	//*  20   43:iload           6
	//*  21   45:ifeq            61
			{
				k = i;
	//   22   48:iload_1         
	//   23   49:istore_3        
				if(Math.abs(i) >= mMinFlingVelocity)
					break label0;
	//   24   50:iload_1         
	//   25   51:invokestatic    #1848 <Method int Math.abs(int)>
	//   26   54:aload_0         
	//   27   55:getfield        #504 <Field int mMinFlingVelocity>
	//   28   58:icmpge          63
			}
			k = 0;
	//   29   61:iconst_0        
	//   30   62:istore_3        
		}
		if(flag2)
	//*  31   63:iload           7
	//*  32   65:ifeq            82
		{
			l = j;
	//   33   68:iload_2         
	//   34   69:istore          4
			if(Math.abs(j) >= mMinFlingVelocity)
				continue; /* Loop/switch isn't completed */
	//   35   71:iload_2         
	//   36   72:invokestatic    #1848 <Method int Math.abs(int)>
	//   37   75:aload_0         
	//   38   76:getfield        #504 <Field int mMinFlingVelocity>
	//   39   79:icmpge          85
		}
		l = 0;
	//   40   82:iconst_0        
	//   41   83:istore          4
		if(k == 0 && l == 0 || dispatchNestedPreFling(k, l)) goto _L4; else goto _L3
	//   42   85:iload_3         
	//   43   86:ifne            94
	//   44   89:iload           4
	//   45   91:ifeq            16
	//   46   94:aload_0         
	//   47   95:iload_3         
	//   48   96:i2f             
	//   49   97:iload           4
	//   50   99:i2f             
	//   51  100:invokevirtual   #1849 <Method boolean dispatchNestedPreFling(float, float)>
	//   52  103:ifne            16
_L3:
		boolean flag;
		if(flag1 || flag2)
	//*  53  106:iload           6
	//*  54  108:ifne            116
	//*  55  111:iload           7
	//*  56  113:ifeq            153
			flag = true;
	//   57  116:iconst_1        
	//   58  117:istore          5
		else
	//*  59  119:aload_0         
	//*  60  120:iload_3         
	//*  61  121:i2f             
	//*  62  122:iload           4
	//*  63  124:i2f             
	//*  64  125:iload           5
	//*  65  127:invokevirtual   #1850 <Method boolean dispatchNestedFling(float, float, boolean)>
	//*  66  130:pop             
	//*  67  131:aload_0         
	//*  68  132:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  69  135:ifnull          159
	//*  70  138:aload_0         
	//*  71  139:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//*  72  142:iload_3         
	//*  73  143:iload           4
	//*  74  145:invokevirtual   #1855 <Method boolean RecyclerView$OnFlingListener.onFling(int, int)>
	//*  75  148:ifeq            159
	//*  76  151:iconst_1        
	//*  77  152:ireturn         
			flag = false;
	//   78  153:iconst_0        
	//   79  154:istore          5
		dispatchNestedFling(k, l, flag);
		if(mOnFlingListener != null && mOnFlingListener.onFling(k, l))
			return true;
	//*  80  156:goto            119
		if(flag)
	//*  81  159:iload           5
	//*  82  161:ifeq            16
		{
			i = 0;
	//   83  164:iconst_0        
	//   84  165:istore_1        
			if(flag1)
	//*  85  166:iload           6
	//*  86  168:ifeq            175
				i = ((int) (false | true));
	//   87  171:iconst_0        
	//   88  172:iconst_1        
	//   89  173:ior             
	//   90  174:istore_1        
			j = i;
	//   91  175:iload_1         
	//   92  176:istore_2        
			if(flag2)
	//*  93  177:iload           7
	//*  94  179:ifeq            186
				j = i | 2;
	//   95  182:iload_1         
	//   96  183:iconst_2        
	//   97  184:ior             
	//   98  185:istore_2        
			startNestedScroll(j, 1);
	//   99  186:aload_0         
	//  100  187:iload_2         
	//  101  188:iconst_1        
	//  102  189:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//  103  192:pop             
			i = Math.max(-mMaxFlingVelocity, Math.min(k, mMaxFlingVelocity));
	//  104  193:aload_0         
	//  105  194:getfield        #509 <Field int mMaxFlingVelocity>
	//  106  197:ineg            
	//  107  198:iload_3         
	//  108  199:aload_0         
	//  109  200:getfield        #509 <Field int mMaxFlingVelocity>
	//  110  203:invokestatic    #1117 <Method int Math.min(int, int)>
	//  111  206:invokestatic    #1861 <Method int Math.max(int, int)>
	//  112  209:istore_1        
			j = Math.max(-mMaxFlingVelocity, Math.min(l, mMaxFlingVelocity));
	//  113  210:aload_0         
	//  114  211:getfield        #509 <Field int mMaxFlingVelocity>
	//  115  214:ineg            
	//  116  215:iload           4
	//  117  217:aload_0         
	//  118  218:getfield        #509 <Field int mMaxFlingVelocity>
	//  119  221:invokestatic    #1117 <Method int Math.min(int, int)>
	//  120  224:invokestatic    #1861 <Method int Math.max(int, int)>
	//  121  227:istore_2        
			mViewFlinger.fling(i, j);
	//  122  228:aload_0         
	//  123  229:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//  124  232:iload_1         
	//  125  233:iload_2         
	//  126  234:invokevirtual   #1863 <Method void RecyclerView$ViewFlinger.fling(int, int)>
			return true;
	//  127  237:iconst_1        
	//  128  238:ireturn         
		}
		if(true) goto _L4; else goto _L5
_L5:
	}

	public View focusSearch(View view, int i)
	{
		Object obj = ((Object) (mLayout.onInterceptFocusSearch(view, i)));
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #1868 <Method View RecyclerView$LayoutManager.onInterceptFocusSearch(View, int)>
	//    5    9:astore          8
		if(obj != null)
	//*   6   11:aload           8
	//*   7   13:ifnull          19
			return ((View) (obj));
	//    8   16:aload           8
	//    9   18:areturn         
		int j;
		int k;
		if(mAdapter != null && mLayout != null && !isComputingLayout() && !mLayoutFrozen)
	//*  10   19:aload_0         
	//*  11   20:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  12   23:ifnull          240
	//*  13   26:aload_0         
	//*  14   27:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  15   30:ifnull          240
	//*  16   33:aload_0         
	//*  17   34:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*  18   37:ifne            240
	//*  19   40:aload_0         
	//*  20   41:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  21   44:ifne            240
			j = 1;
	//   22   47:iconst_1        
	//   23   48:istore_3        
		else
	//*  24   49:invokestatic    #1874 <Method FocusFinder FocusFinder.getInstance()>
	//*  25   52:astore          8
	//*  26   54:iload_3         
	//*  27   55:ifeq            348
	//*  28   58:iload_2         
	//*  29   59:iconst_2        
	//*  30   60:icmpeq          68
	//*  31   63:iload_2         
	//*  32   64:iconst_1        
	//*  33   65:icmpne          348
	//*  34   68:iconst_0        
	//*  35   69:istore          5
	//*  36   71:iload_2         
	//*  37   72:istore_3        
	//*  38   73:aload_0         
	//*  39   74:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  40   77:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  41   80:ifeq            127
	//*  42   83:iload_2         
	//*  43   84:iconst_2        
	//*  44   85:icmpne          245
	//*  45   88:sipush          130
	//*  46   91:istore          4
	//*  47   93:aload           8
	//*  48   95:aload_0         
	//*  49   96:aload_1         
	//*  50   97:iload           4
	//*  51   99:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//*  52  102:ifnonnull       252
	//*  53  105:iconst_1        
	//*  54  106:istore          6
	//*  55  108:iload           6
	//*  56  110:istore          5
	//*  57  112:iload_2         
	//*  58  113:istore_3        
	//*  59  114:getstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  60  117:ifeq            127
	//*  61  120:iload           4
	//*  62  122:istore_3        
	//*  63  123:iload           6
	//*  64  125:istore          5
	//*  65  127:iload           5
	//*  66  129:istore          7
	//*  67  131:iload_3         
	//*  68  132:istore          6
	//*  69  134:iload           5
	//*  70  136:ifne            221
	//*  71  139:iload           5
	//*  72  141:istore          7
	//*  73  143:iload_3         
	//*  74  144:istore          6
	//*  75  146:aload_0         
	//*  76  147:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  77  150:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  78  153:ifeq            221
	//*  79  156:aload_0         
	//*  80  157:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  81  160:invokevirtual   #1249 <Method int RecyclerView$LayoutManager.getLayoutDirection()>
	//*  82  163:iconst_1        
	//*  83  164:icmpne          258
	//*  84  167:iconst_1        
	//*  85  168:istore_2        
	//*  86  169:iload_3         
	//*  87  170:iconst_2        
	//*  88  171:icmpne          263
	//*  89  174:iconst_1        
	//*  90  175:istore          4
	//*  91  177:iload           4
	//*  92  179:iload_2         
	//*  93  180:ixor            
	//*  94  181:ifeq            269
	//*  95  184:bipush          66
	//*  96  186:istore_2        
	//*  97  187:aload           8
	//*  98  189:aload_0         
	//*  99  190:aload_1         
	//* 100  191:iload_2         
	//* 101  192:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//* 102  195:ifnonnull       275
	//* 103  198:iconst_1        
	//* 104  199:istore          4
	//* 105  201:iload           4
	//* 106  203:istore          7
	//* 107  205:iload_3         
	//* 108  206:istore          6
	//* 109  208:getstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//* 110  211:ifeq            221
	//* 111  214:iload_2         
	//* 112  215:istore          6
	//* 113  217:iload           4
	//* 114  219:istore          7
	//* 115  221:iload           7
	//* 116  223:ifeq            309
	//* 117  226:aload_0         
	//* 118  227:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
	//* 119  230:aload_0         
	//* 120  231:aload_1         
	//* 121  232:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//* 122  235:ifnonnull       281
	//* 123  238:aconst_null     
	//* 124  239:areturn         
			j = 0;
	//  125  240:iconst_0        
	//  126  241:istore_3        
		obj = ((Object) (FocusFinder.getInstance()));
		if(j != 0 && (i == 2 || i == 1))
		{
			boolean flag = false;
			j = i;
			char c;
			if(mLayout.canScrollVertically())
			{
				boolean flag1;
				if(i == 2)
					c = '\202';
				else
	//* 127  242:goto            49
					c = '!';
	//  128  245:bipush          33
	//  129  247:istore          4
				if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, ((int) (c))) == null)
					k = 1;
				else
	//* 130  249:goto            93
					k = 0;
	//  131  252:iconst_0        
	//  132  253:istore          6
				flag = ((boolean) (k));
				j = i;
				if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
				{
					j = ((int) (c));
					flag = ((boolean) (k));
				}
			}
			flag1 = flag;
			k = j;
			if(!flag)
			{
				flag1 = flag;
				k = j;
				if(mLayout.canScrollHorizontally())
				{
					if(mLayout.getLayoutDirection() == 1)
						i = 1;
					else
	//* 133  255:goto            108
						i = 0;
	//  134  258:iconst_0        
	//  135  259:istore_2        
					if(j == 2)
						c = '\001';
					else
	//* 136  260:goto            169
						c = '\0';
	//  137  263:iconst_0        
	//  138  264:istore          4
					if((c ^ i) != 0)
						i = 66;
					else
	//* 139  266:goto            177
						i = 17;
	//  140  269:bipush          17
	//  141  271:istore_2        
					if(((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i) == null)
						c = '\001';
					else
	//* 142  272:goto            187
						c = '\0';
	//  143  275:iconst_0        
	//  144  276:istore          4
					flag1 = ((boolean) (c));
					k = j;
					if(FORCE_ABS_FOCUS_SEARCH_DIRECTION)
					{
						k = i;
						flag1 = ((boolean) (c));
					}
				}
			}
			if(flag1)
			{
				consumePendingUpdateOperations();
				if(findContainingItemView(view) == null)
					return null;
	//* 145  278:goto            201
				eatRequestLayout();
	//  146  281:aload_0         
	//  147  282:invokevirtual   #865 <Method void eatRequestLayout()>
				mLayout.onFocusSearchFailed(view, k, mRecycler, mState);
	//  148  285:aload_0         
	//  149  286:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  150  289:aload_1         
	//  151  290:iload           6
	//  152  292:aload_0         
	//  153  293:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  154  296:aload_0         
	//  155  297:getfield        #431 <Field RecyclerView$State mState>
	//  156  300:invokevirtual   #1884 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  157  303:pop             
				resumeRequestLayout(false);
	//  158  304:aload_0         
	//  159  305:iconst_0        
	//  160  306:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
			}
			obj = ((Object) (((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, k)));
	//  161  309:aload           8
	//  162  311:aload_0         
	//  163  312:aload_1         
	//  164  313:iload           6
	//  165  315:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  166  318:astore          8
		} else
	//* 167  320:aload           8
	//* 168  322:ifnull          438
	//* 169  325:aload           8
	//* 170  327:invokevirtual   #1120 <Method boolean View.hasFocusable()>
	//* 171  330:ifne            438
	//* 172  333:aload_0         
	//* 173  334:invokevirtual   #1352 <Method View getFocusedChild()>
	//* 174  337:ifnonnull       429
	//* 175  340:aload_0         
	//* 176  341:aload_1         
	//* 177  342:iload           6
	//* 178  344:invokespecial   #1886 <Method View ViewGroup.focusSearch(View, int)>
	//* 179  347:areturn         
		{
			View view1 = ((FocusFinder) (obj)).findNextFocus(((ViewGroup) (this)), view, i);
	//  180  348:aload           8
	//  181  350:aload_0         
	//  182  351:aload_1         
	//  183  352:iload_2         
	//  184  353:invokevirtual   #1878 <Method View FocusFinder.findNextFocus(ViewGroup, View, int)>
	//  185  356:astore          9
			obj = ((Object) (view1));
	//  186  358:aload           9
	//  187  360:astore          8
			k = i;
	//  188  362:iload_2         
	//  189  363:istore          6
			if(view1 == null)
	//* 190  365:aload           9
	//* 191  367:ifnonnull       320
			{
				obj = ((Object) (view1));
	//  192  370:aload           9
	//  193  372:astore          8
				k = i;
	//  194  374:iload_2         
	//  195  375:istore          6
				if(j != 0)
	//* 196  377:iload_3         
	//* 197  378:ifeq            320
				{
					consumePendingUpdateOperations();
	//  198  381:aload_0         
	//  199  382:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
					if(findContainingItemView(view) == null)
	//* 200  385:aload_0         
	//* 201  386:aload_1         
	//* 202  387:invokevirtual   #1829 <Method View findContainingItemView(View)>
	//* 203  390:ifnonnull       395
						return null;
	//  204  393:aconst_null     
	//  205  394:areturn         
					eatRequestLayout();
	//  206  395:aload_0         
	//  207  396:invokevirtual   #865 <Method void eatRequestLayout()>
					obj = ((Object) (mLayout.onFocusSearchFailed(view, i, mRecycler, mState)));
	//  208  399:aload_0         
	//  209  400:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  210  403:aload_1         
	//  211  404:iload_2         
	//  212  405:aload_0         
	//  213  406:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  214  409:aload_0         
	//  215  410:getfield        #431 <Field RecyclerView$State mState>
	//  216  413:invokevirtual   #1884 <Method View RecyclerView$LayoutManager.onFocusSearchFailed(View, int, RecyclerView$Recycler, RecyclerView$State)>
	//  217  416:astore          8
					resumeRequestLayout(false);
	//  218  418:aload_0         
	//  219  419:iconst_0        
	//  220  420:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
					k = i;
	//  221  423:iload_2         
	//  222  424:istore          6
				}
			}
		}
		if(obj != null && !((View) (obj)).hasFocusable())
			if(getFocusedChild() == null)
			{
				return super.focusSearch(view, k);
			} else
	//* 223  426:goto            320
			{
				requestChildOnScreen(((View) (obj)), ((View) (null)));
	//  224  429:aload_0         
	//  225  430:aload           8
	//  226  432:aconst_null     
	//  227  433:invokespecial   #1888 <Method void requestChildOnScreen(View, View)>
				return view;
	//  228  436:aload_1         
	//  229  437:areturn         
			}
		if(!isPreferredNextFocus(view, ((View) (obj)), k))
	//* 230  438:aload_0         
	//* 231  439:aload_1         
	//* 232  440:aload           8
	//* 233  442:iload           6
	//* 234  444:invokespecial   #1890 <Method boolean isPreferredNextFocus(View, View, int)>
	//* 235  447:ifeq            453
	//* 236  450:aload           8
	//* 237  452:areturn         
			obj = ((Object) (super.focusSearch(view, k)));
	//  238  453:aload_0         
	//  239  454:aload_1         
	//  240  455:iload           6
	//  241  457:invokespecial   #1886 <Method View ViewGroup.focusSearch(View, int)>
	//  242  460:astore          8
		return ((View) (obj));
	//* 243  462:goto            450
	}

	protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateDefaultLayoutParams()));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:invokevirtual   #1896 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateDefaultLayoutParams()>
	//   19   45:areturn         
	}

	public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(getContext(), attributeset)));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:aload_0         
	//   19   43:invokevirtual   #539 <Method Context getContext()>
	//   20   46:aload_1         
	//   21   47:invokevirtual   #1901 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(Context, AttributeSet)>
	//   22   50:areturn         
	}

	protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       38
			throw new IllegalStateException((new StringBuilder()).append("RecyclerView has no LayoutManager").append(exceptionLabel()).toString());
	//    3    7:new             #794 <Class IllegalStateException>
	//    4   10:dup             
	//    5   11:new             #796 <Class StringBuilder>
	//    6   14:dup             
	//    7   15:invokespecial   #797 <Method void StringBuilder()>
	//    8   18:ldc2            #1893 <String "RecyclerView has no LayoutManager">
	//    9   21:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   10   24:aload_0         
	//   11   25:invokevirtual   #1224 <Method String exceptionLabel()>
	//   12   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   13   31:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   14   34:invokespecial   #1227 <Method void IllegalStateException(String)>
	//   15   37:athrow          
		else
			return ((android.view.ViewGroup.LayoutParams) (mLayout.generateLayoutParams(layoutparams)));
	//   16   38:aload_0         
	//   17   39:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   42:aload_1         
	//   19   43:invokevirtual   #1905 <Method RecyclerView$LayoutParams RecyclerView$LayoutManager.generateLayoutParams(android.view.ViewGroup$LayoutParams)>
	//   20   46:areturn         
	}

	public Adapter getAdapter()
	{
		return mAdapter;
	//    0    0:aload_0         
	//    1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//    2    4:areturn         
	}

	int getAdapterPositionFor(ViewHolder viewholder)
	{
		if(viewholder.hasAnyOfTheFlags(524) || !viewholder.isBound())
	//*   0    0:aload_1         
	//*   1    1:sipush          524
	//*   2    4:invokevirtual   #966 <Method boolean RecyclerView$ViewHolder.hasAnyOfTheFlags(int)>
	//*   3    7:ifne            17
	//*   4   10:aload_1         
	//*   5   11:invokevirtual   #1910 <Method boolean RecyclerView$ViewHolder.isBound()>
	//*   6   14:ifne            19
			return -1;
	//    7   17:iconst_m1       
	//    8   18:ireturn         
		else
			return mAdapterHelper.applyPendingUpdatesToPosition(viewholder.mPosition);
	//    9   19:aload_0         
	//   10   20:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//   11   23:aload_1         
	//   12   24:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//   13   27:invokevirtual   #1913 <Method int AdapterHelper.applyPendingUpdatesToPosition(int)>
	//   14   30:ireturn         
	}

	public int getBaseline()
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          15
			return mLayout.getBaseline();
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:invokevirtual   #1916 <Method int RecyclerView$LayoutManager.getBaseline()>
	//    6   14:ireturn         
		else
			return super.getBaseline();
	//    7   15:aload_0         
	//    8   16:invokespecial   #1917 <Method int ViewGroup.getBaseline()>
	//    9   19:ireturn         
	}

	long getChangedHolderKey(ViewHolder viewholder)
	{
		if(mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   3    7:ifeq            15
			return viewholder.getItemId();
	//    4   10:aload_1         
	//    5   11:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//    6   14:lreturn         
		else
			return (long)viewholder.mPosition;
	//    7   15:aload_1         
	//    8   16:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//    9   19:i2l             
	//   10   20:lreturn         
	}

	public int getChildAdapterPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getAdapterPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1423 <Method int RecyclerView$ViewHolder.getAdapterPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	protected int getChildDrawingOrder(int i, int j)
	{
		if(mChildDrawingOrderCallback == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   2    4:ifnonnull       14
			return super.getChildDrawingOrder(i, j);
	//    3    7:aload_0         
	//    4    8:iload_1         
	//    5    9:iload_2         
	//    6   10:invokespecial   #1923 <Method int ViewGroup.getChildDrawingOrder(int, int)>
	//    7   13:ireturn         
		else
			return mChildDrawingOrderCallback.onGetChildDrawingOrder(i, j);
	//    8   14:aload_0         
	//    9   15:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//   10   18:iload_1         
	//   11   19:iload_2         
	//   12   20:invokeinterface #1926 <Method int RecyclerView$ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int)>
	//   13   25:ireturn         
	}

	public long getChildItemId(View view)
	{
		if(mAdapter != null && mAdapter.hasStableIds())
	//*   0    0:aload_0         
	//*   1    1:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   2    4:ifnull          17
	//*   3    7:aload_0         
	//*   4    8:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*   5   11:invokevirtual   #916 <Method boolean RecyclerView$Adapter.hasStableIds()>
	//*   6   14:ifne            21
	//*   7   17:ldc2w           #156 <Long -1L>
	//*   8   20:lreturn         
	//*   9   21:aload_1         
	//*  10   22:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  11   25:astore_1        
			if((view = ((View) (getChildViewHolderInt(view)))) != null)
	//*  12   26:aload_1         
	//*  13   27:ifnull          17
				return ((ViewHolder) (view)).getItemId();
	//   14   30:aload_1         
	//   15   31:invokevirtual   #1415 <Method long RecyclerView$ViewHolder.getItemId()>
	//   16   34:lreturn         
		return -1L;
	}

	public int getChildLayoutPosition(View view)
	{
		view = ((View) (getChildViewHolderInt(view)));
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_1        
		if(view != null)
	//*   3    5:aload_1         
	//*   4    6:ifnull          14
			return ((ViewHolder) (view)).getLayoutPosition();
	//    5    9:aload_1         
	//    6   10:invokevirtual   #1095 <Method int RecyclerView$ViewHolder.getLayoutPosition()>
	//    7   13:ireturn         
		else
			return -1;
	//    8   14:iconst_m1       
	//    9   15:ireturn         
	}

	public int getChildPosition(View view)
	{
		return getChildAdapterPosition(view);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokevirtual   #1932 <Method int getChildAdapterPosition(View)>
	//    3    5:ireturn         
	}

	public ViewHolder getChildViewHolder(View view)
	{
		ViewParent viewparent = view.getParent();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #651 <Method ViewParent View.getParent()>
	//    2    4:astore_2        
		if(viewparent != null && viewparent != this)
	//*   3    5:aload_2         
	//*   4    6:ifnull          52
	//*   5    9:aload_2         
	//*   6   10:aload_0         
	//*   7   11:if_acmpeq       52
			throw new IllegalArgumentException((new StringBuilder()).append("View ").append(((Object) (view))).append(" is not a direct child of ").append(((Object) (this))).toString());
	//    8   14:new             #1263 <Class IllegalArgumentException>
	//    9   17:dup             
	//   10   18:new             #796 <Class StringBuilder>
	//   11   21:dup             
	//   12   22:invokespecial   #797 <Method void StringBuilder()>
	//   13   25:ldc2            #1934 <String "View ">
	//   14   28:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   31:aload_1         
	//   16   32:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   17   35:ldc2            #1936 <String " is not a direct child of ">
	//   18   38:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   19   41:aload_0         
	//   20   42:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   21   45:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   22   48:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   23   51:athrow          
		else
			return getChildViewHolderInt(view);
	//   24   52:aload_1         
	//   25   53:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   26   56:areturn         
	}

	public boolean getClipToPadding()
	{
		return mClipToPadding;
	//    0    0:aload_0         
	//    1    1:getfield        #468 <Field boolean mClipToPadding>
	//    2    4:ireturn         
	}

	public RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
	{
		return mAccessibilityDelegate;
	//    0    0:aload_0         
	//    1    1:getfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    2    4:areturn         
	}

	public void getDecoratedBoundsWithMargins(View view, Rect rect)
	{
		getDecoratedBoundsWithMarginsInt(view, rect);
	//    0    0:aload_1         
	//    1    1:aload_2         
	//    2    2:invokestatic    #1944 <Method void getDecoratedBoundsWithMarginsInt(View, Rect)>
	//    3    5:return          
	}

	public ItemAnimator getItemAnimator()
	{
		return mItemAnimator;
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:areturn         
	}

	Rect getItemDecorInsetsForChild(View view)
	{
		LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
	//    0    0:aload_1         
	//    1    1:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//    2    4:checkcast       #68  <Class RecyclerView$LayoutParams>
	//    3    7:astore          4
		if(!layoutparams.mInsetsDirty)
	//*   4    9:aload           4
	//*   5   11:getfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
	//*   6   14:ifne            23
			return layoutparams.mDecorInsets;
	//    7   17:aload           4
	//    8   19:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//    9   22:areturn         
		if(mState.isPreLayout() && (layoutparams.isItemChanged() || layoutparams.isViewInvalid()))
	//*  10   23:aload_0         
	//*  11   24:getfield        #431 <Field RecyclerView$State mState>
	//*  12   27:invokevirtual   #1951 <Method boolean RecyclerView$State.isPreLayout()>
	//*  13   30:ifeq            55
	//*  14   33:aload           4
	//*  15   35:invokevirtual   #1954 <Method boolean RecyclerView$LayoutParams.isItemChanged()>
	//*  16   38:ifne            49
	//*  17   41:aload           4
	//*  18   43:invokevirtual   #1957 <Method boolean RecyclerView$LayoutParams.isViewInvalid()>
	//*  19   46:ifeq            55
			return layoutparams.mDecorInsets;
	//   20   49:aload           4
	//   21   51:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   22   54:areturn         
		Rect rect = layoutparams.mDecorInsets;
	//   23   55:aload           4
	//   24   57:getfield        #1128 <Field Rect RecyclerView$LayoutParams.mDecorInsets>
	//   25   60:astore          5
		rect.set(0, 0, 0, 0);
	//   26   62:aload           5
	//   27   64:iconst_0        
	//   28   65:iconst_0        
	//   29   66:iconst_0        
	//   30   67:iconst_0        
	//   31   68:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
		int j = mItemDecorations.size();
	//   32   71:aload_0         
	//   33   72:getfield        #394 <Field ArrayList mItemDecorations>
	//   34   75:invokevirtual   #1078 <Method int ArrayList.size()>
	//   35   78:istore_3        
		for(int i = 0; i < j; i++)
	//*  36   79:iconst_0        
	//*  37   80:istore_2        
	//*  38   81:iload_2         
	//*  39   82:iload_3         
	//*  40   83:icmpge          200
		{
			mTempRect.set(0, 0, 0, 0);
	//   41   86:aload_0         
	//   42   87:getfield        #382 <Field Rect mTempRect>
	//   43   90:iconst_0        
	//   44   91:iconst_0        
	//   45   92:iconst_0        
	//   46   93:iconst_0        
	//   47   94:invokevirtual   #1168 <Method void Rect.set(int, int, int, int)>
			((ItemDecoration)mItemDecorations.get(i)).getItemOffsets(mTempRect, view, this, mState);
	//   48   97:aload_0         
	//   49   98:getfield        #394 <Field ArrayList mItemDecorations>
	//   50  101:iload_2         
	//   51  102:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   52  105:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   53  108:aload_0         
	//   54  109:getfield        #382 <Field Rect mTempRect>
	//   55  112:aload_1         
	//   56  113:aload_0         
	//   57  114:aload_0         
	//   58  115:getfield        #431 <Field RecyclerView$State mState>
	//   59  118:invokevirtual   #1961 <Method void RecyclerView$ItemDecoration.getItemOffsets(Rect, View, RecyclerView, RecyclerView$State)>
			rect.left = rect.left + mTempRect.left;
	//   60  121:aload           5
	//   61  123:aload           5
	//   62  125:getfield        #1134 <Field int Rect.left>
	//   63  128:aload_0         
	//   64  129:getfield        #382 <Field Rect mTempRect>
	//   65  132:getfield        #1134 <Field int Rect.left>
	//   66  135:iadd            
	//   67  136:putfield        #1134 <Field int Rect.left>
			rect.top = rect.top + mTempRect.top;
	//   68  139:aload           5
	//   69  141:aload           5
	//   70  143:getfield        #1143 <Field int Rect.top>
	//   71  146:aload_0         
	//   72  147:getfield        #382 <Field Rect mTempRect>
	//   73  150:getfield        #1143 <Field int Rect.top>
	//   74  153:iadd            
	//   75  154:putfield        #1143 <Field int Rect.top>
			rect.right = rect.right + mTempRect.right;
	//   76  157:aload           5
	//   77  159:aload           5
	//   78  161:getfield        #1152 <Field int Rect.right>
	//   79  164:aload_0         
	//   80  165:getfield        #382 <Field Rect mTempRect>
	//   81  168:getfield        #1152 <Field int Rect.right>
	//   82  171:iadd            
	//   83  172:putfield        #1152 <Field int Rect.right>
			rect.bottom = rect.bottom + mTempRect.bottom;
	//   84  175:aload           5
	//   85  177:aload           5
	//   86  179:getfield        #1161 <Field int Rect.bottom>
	//   87  182:aload_0         
	//   88  183:getfield        #382 <Field Rect mTempRect>
	//   89  186:getfield        #1161 <Field int Rect.bottom>
	//   90  189:iadd            
	//   91  190:putfield        #1161 <Field int Rect.bottom>
		}

	//   92  193:iload_2         
	//   93  194:iconst_1        
	//   94  195:iadd            
	//   95  196:istore_2        
	//*  96  197:goto            81
		layoutparams.mInsetsDirty = false;
	//   97  200:aload           4
	//   98  202:iconst_0        
	//   99  203:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
		return rect;
	//  100  206:aload           5
	//  101  208:areturn         
	}

	public ItemDecoration getItemDecorationAt(int i)
	{
		if(i < 0 || i >= mItemDecorations.size())
	//*   0    0:iload_1         
	//*   1    1:iflt            15
	//*   2    4:iload_1         
	//*   3    5:aload_0         
	//*   4    6:getfield        #394 <Field ArrayList mItemDecorations>
	//*   5    9:invokevirtual   #1078 <Method int ArrayList.size()>
	//*   6   12:icmplt          17
			return null;
	//    7   15:aconst_null     
	//    8   16:areturn         
		else
			return (ItemDecoration)mItemDecorations.get(i);
	//    9   17:aload_0         
	//   10   18:getfield        #394 <Field ArrayList mItemDecorations>
	//   11   21:iload_1         
	//   12   22:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   13   25:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   14   28:areturn         
	}

	public LayoutManager getLayoutManager()
	{
		return mLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:areturn         
	}

	public int getMaxFlingVelocity()
	{
		return mMaxFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #509 <Field int mMaxFlingVelocity>
	//    2    4:ireturn         
	}

	public int getMinFlingVelocity()
	{
		return mMinFlingVelocity;
	//    0    0:aload_0         
	//    1    1:getfield        #504 <Field int mMinFlingVelocity>
	//    2    4:ireturn         
	}

	long getNanoTime()
	{
		if(ALLOW_THREAD_GAP_WORK)
	//*   0    0:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*   1    3:ifeq            10
			return System.nanoTime();
	//    2    6:invokestatic    #1973 <Method long System.nanoTime()>
	//    3    9:lreturn         
		else
			return 0L;
	//    4   10:lconst_0        
	//    5   11:lreturn         
	}

	public OnFlingListener getOnFlingListener()
	{
		return mOnFlingListener;
	//    0    0:aload_0         
	//    1    1:getfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    2    4:areturn         
	}

	public boolean getPreserveFocusAfterLayout()
	{
		return mPreserveFocusAfterLayout;
	//    0    0:aload_0         
	//    1    1:getfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    2    4:ireturn         
	}

	public RecycledViewPool getRecycledViewPool()
	{
		return mRecycler.getRecycledViewPool();
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:invokevirtual   #1980 <Method RecyclerView$RecycledViewPool RecyclerView$Recycler.getRecycledViewPool()>
	//    3    7:areturn         
	}

	public int getScrollState()
	{
		return mScrollState;
	//    0    0:aload_0         
	//    1    1:getfield        #411 <Field int mScrollState>
	//    2    4:ireturn         
	}

	public boolean hasFixedSize()
	{
		return mHasFixedSize;
	//    0    0:aload_0         
	//    1    1:getfield        #1983 <Field boolean mHasFixedSize>
	//    2    4:ireturn         
	}

	public boolean hasNestedScrollingParent()
	{
		return getScrollingChildHelper().hasNestedScrollingParent();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #1986 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent()>
	//    3    7:ireturn         
	}

	public boolean hasNestedScrollingParent(int i)
	{
		return getScrollingChildHelper().hasNestedScrollingParent(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #1988 <Method boolean NestedScrollingChildHelper.hasNestedScrollingParent(int)>
	//    4    8:ireturn         
	}

	public boolean hasPendingAdapterUpdates()
	{
		return !mFirstLayoutComplete || mDataSetHasChangedAfterLayout || mAdapterHelper.hasPendingUpdates();
	//    0    0:aload_0         
	//    1    1:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//    2    4:ifeq            24
	//    3    7:aload_0         
	//    4    8:getfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
	//    5   11:ifne            24
	//    6   14:aload_0         
	//    7   15:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//    8   18:invokevirtual   #1596 <Method boolean AdapterHelper.hasPendingUpdates()>
	//    9   21:ifeq            26
	//   10   24:iconst_1        
	//   11   25:ireturn         
	//   12   26:iconst_0        
	//   13   27:ireturn         
	}

	void initAdapterManager()
	{
		mAdapterHelper = new AdapterHelper(new AdapterHelper.Callback() {

			void dispatchUpdate(AdapterHelper.UpdateOp updateop)
			{
				switch(updateop.cmd)
			//*   0    0:aload_1         
			//*   1    1:getfield        #28  <Field int AdapterHelper$UpdateOp.cmd>
				{
			//*   2    4:tableswitch     1 8: default 52
			//			               1 53
			//			               2 76
			//			               3 52
			//			               4 99
			//			               5 52
			//			               6 52
			//			               7 52
			//			               8 126
				case 3: // '\003'
				case 5: // '\005'
				case 6: // '\006'
				case 7: // '\007'
				default:
					return;
			//    3   52:return          

				case 1: // '\001'
					mLayout.onItemsAdded(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//    4   53:aload_0         
			//    5   54:getfield        #17  <Field RecyclerView this$0>
			//    6   57:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//    7   60:aload_0         
			//    8   61:getfield        #17  <Field RecyclerView this$0>
			//    9   64:aload_1         
			//   10   65:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   11   68:aload_1         
			//   12   69:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   13   72:invokevirtual   #44  <Method void RecyclerView$LayoutManager.onItemsAdded(RecyclerView, int, int)>
					return;
			//   14   75:return          

				case 2: // '\002'
					mLayout.onItemsRemoved(RecyclerView.this, updateop.positionStart, updateop.itemCount);
			//   15   76:aload_0         
			//   16   77:getfield        #17  <Field RecyclerView this$0>
			//   17   80:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   18   83:aload_0         
			//   19   84:getfield        #17  <Field RecyclerView this$0>
			//   20   87:aload_1         
			//   21   88:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   22   91:aload_1         
			//   23   92:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   24   95:invokevirtual   #47  <Method void RecyclerView$LayoutManager.onItemsRemoved(RecyclerView, int, int)>
					return;
			//   25   98:return          

				case 4: // '\004'
					mLayout.onItemsUpdated(RecyclerView.this, updateop.positionStart, updateop.itemCount, updateop.payload);
			//   26   99:aload_0         
			//   27  100:getfield        #17  <Field RecyclerView this$0>
			//   28  103:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   29  106:aload_0         
			//   30  107:getfield        #17  <Field RecyclerView this$0>
			//   31  110:aload_1         
			//   32  111:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   33  114:aload_1         
			//   34  115:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   35  118:aload_1         
			//   36  119:getfield        #51  <Field Object AdapterHelper$UpdateOp.payload>
			//   37  122:invokevirtual   #55  <Method void RecyclerView$LayoutManager.onItemsUpdated(RecyclerView, int, int, Object)>
					return;
			//   38  125:return          

				case 8: // '\b'
					mLayout.onItemsMoved(RecyclerView.this, updateop.positionStart, updateop.itemCount, 1);
			//   39  126:aload_0         
			//   40  127:getfield        #17  <Field RecyclerView this$0>
			//   41  130:getfield        #32  <Field RecyclerView$LayoutManager RecyclerView.mLayout>
			//   42  133:aload_0         
			//   43  134:getfield        #17  <Field RecyclerView this$0>
			//   44  137:aload_1         
			//   45  138:getfield        #35  <Field int AdapterHelper$UpdateOp.positionStart>
			//   46  141:aload_1         
			//   47  142:getfield        #38  <Field int AdapterHelper$UpdateOp.itemCount>
			//   48  145:iconst_1        
			//   49  146:invokevirtual   #59  <Method void RecyclerView$LayoutManager.onItemsMoved(RecyclerView, int, int, int)>
					break;
				}
			//   50  149:return          
			}

			public ViewHolder findViewHolder(int i)
			{
				ViewHolder viewholder1 = findViewHolderForPosition(i, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iconst_1        
			//    4    6:invokevirtual   #65  <Method RecyclerView$ViewHolder RecyclerView.findViewHolderForPosition(int, boolean)>
			//    5    9:astore_3        
				ViewHolder viewholder;
				if(viewholder1 == null)
			//*   6   10:aload_3         
			//*   7   11:ifnonnull       18
				{
					viewholder = null;
			//    8   14:aconst_null     
			//    9   15:astore_2        
				} else
			//*  10   16:aload_2         
			//*  11   17:areturn         
				{
					viewholder = viewholder1;
			//   12   18:aload_3         
			//   13   19:astore_2        
					if(mChildHelper.isHidden(viewholder1.itemView))
			//*  14   20:aload_0         
			//*  15   21:getfield        #17  <Field RecyclerView this$0>
			//*  16   24:getfield        #69  <Field ChildHelper RecyclerView.mChildHelper>
			//*  17   27:aload_3         
			//*  18   28:getfield        #75  <Field View RecyclerView$ViewHolder.itemView>
			//*  19   31:invokevirtual   #81  <Method boolean ChildHelper.isHidden(View)>
			//*  20   34:ifeq            16
						return null;
			//   21   37:aconst_null     
			//   22   38:areturn         
				}
				return viewholder;
			}

			public void markViewHoldersUpdated(int i, int j, Object obj)
			{
				viewRangeUpdate(i, j, obj);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:aload_3         
			//    5    7:invokevirtual   #86  <Method void RecyclerView.viewRangeUpdate(int, int, Object)>
				mItemsChanged = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #90  <Field boolean RecyclerView.mItemsChanged>
			//   10   18:return          
			}

			public void offsetPositionsForAdd(int i, int j)
			{
				offsetPositionRecordsForInsert(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #95  <Method void RecyclerView.offsetPositionRecordsForInsert(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForMove(int i, int j)
			{
				offsetPositionRecordsForMove(i, j);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:invokevirtual   #102 <Method void RecyclerView.offsetPositionRecordsForMove(int, int)>
				mItemsAddedOrRemoved = true;
			//    5    9:aload_0         
			//    6   10:getfield        #17  <Field RecyclerView this$0>
			//    7   13:iconst_1        
			//    8   14:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//    9   17:return          
			}

			public void offsetPositionsForRemovingInvisible(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, true);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_1        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
				State state = mState;
			//   10   18:aload_0         
			//   11   19:getfield        #17  <Field RecyclerView this$0>
			//   12   22:getfield        #111 <Field RecyclerView$State RecyclerView.mState>
			//   13   25:astore_3        
				state.mDeletedInvisibleItemCountSincePreviousLayout = state.mDeletedInvisibleItemCountSincePreviousLayout + j;
			//   14   26:aload_3         
			//   15   27:aload_3         
			//   16   28:getfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   17   31:iload_2         
			//   18   32:iadd            
			//   19   33:putfield        #116 <Field int RecyclerView$State.mDeletedInvisibleItemCountSincePreviousLayout>
			//   20   36:return          
			}

			public void offsetPositionsForRemovingLaidOutOrNewView(int i, int j)
			{
				offsetPositionRecordsForRemove(i, j, false);
			//    0    0:aload_0         
			//    1    1:getfield        #17  <Field RecyclerView this$0>
			//    2    4:iload_1         
			//    3    5:iload_2         
			//    4    6:iconst_0        
			//    5    7:invokevirtual   #107 <Method void RecyclerView.offsetPositionRecordsForRemove(int, int, boolean)>
				mItemsAddedOrRemoved = true;
			//    6   10:aload_0         
			//    7   11:getfield        #17  <Field RecyclerView this$0>
			//    8   14:iconst_1        
			//    9   15:putfield        #98  <Field boolean RecyclerView.mItemsAddedOrRemoved>
			//   10   18:return          
			}

			public void onDispatchFirstPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			public void onDispatchSecondPass(AdapterHelper.UpdateOp updateop)
			{
				dispatchUpdate(updateop);
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:invokevirtual   #120 <Method void dispatchUpdate(AdapterHelper$UpdateOp)>
			//    3    5:return          
			}

			final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #19  <Method void Object()>
			//    5    9:return          
			}
		}
);
	//    0    0:aload_0         
	//    1    1:new             #989 <Class AdapterHelper>
	//    2    4:dup             
	//    3    5:new             #20  <Class RecyclerView$6>
	//    4    8:dup             
	//    5    9:aload_0         
	//    6   10:invokespecial   #1990 <Method void RecyclerView$6(RecyclerView)>
	//    7   13:invokespecial   #1993 <Method void AdapterHelper(AdapterHelper$Callback)>
	//    8   16:putfield        #987 <Field AdapterHelper mAdapterHelper>
	//    9   19:return          
	}

	void initFastScroller(StateListDrawable statelistdrawable, Drawable drawable, StateListDrawable statelistdrawable1, Drawable drawable1)
	{
		if(statelistdrawable == null || drawable == null || statelistdrawable1 == null || drawable1 == null)
	//*   0    0:aload_1         
	//*   1    1:ifnull          17
	//*   2    4:aload_2         
	//*   3    5:ifnull          17
	//*   4    8:aload_3         
	//*   5    9:ifnull          17
	//*   6   12:aload           4
	//*   7   14:ifnonnull       48
		{
			throw new IllegalArgumentException((new StringBuilder()).append("Trying to set fast scroller without both required drawables.").append(exceptionLabel()).toString());
	//    8   17:new             #1263 <Class IllegalArgumentException>
	//    9   20:dup             
	//   10   21:new             #796 <Class StringBuilder>
	//   11   24:dup             
	//   12   25:invokespecial   #797 <Method void StringBuilder()>
	//   13   28:ldc2            #1995 <String "Trying to set fast scroller without both required drawables.">
	//   14   31:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   15   34:aload_0         
	//   16   35:invokevirtual   #1224 <Method String exceptionLabel()>
	//   17   38:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   18   41:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   19   44:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   20   47:athrow          
		} else
		{
			Resources resources = getContext().getResources();
	//   21   48:aload_0         
	//   22   49:invokevirtual   #539 <Method Context getContext()>
	//   23   52:invokevirtual   #1999 <Method Resources Context.getResources()>
	//   24   55:astore          5
			new FastScroller(this, statelistdrawable, drawable, statelistdrawable1, drawable1, resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_default_thickness), resources.getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.fastscroll_minimum_range), resources.getDimensionPixelOffset(android.support.v7.recyclerview.R.dimen.fastscroll_margin));
	//   25   57:new             #2001 <Class FastScroller>
	//   26   60:dup             
	//   27   61:aload_0         
	//   28   62:aload_1         
	//   29   63:aload_2         
	//   30   64:aload_3         
	//   31   65:aload           4
	//   32   67:aload           5
	//   33   69:getstatic       #2006 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_default_thickness>
	//   34   72:invokevirtual   #2011 <Method int Resources.getDimensionPixelSize(int)>
	//   35   75:aload           5
	//   36   77:getstatic       #2014 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_minimum_range>
	//   37   80:invokevirtual   #2011 <Method int Resources.getDimensionPixelSize(int)>
	//   38   83:aload           5
	//   39   85:getstatic       #2017 <Field int android.support.v7.recyclerview.R$dimen.fastscroll_margin>
	//   40   88:invokevirtual   #2020 <Method int Resources.getDimensionPixelOffset(int)>
	//   41   91:invokespecial   #2023 <Method void FastScroller(RecyclerView, StateListDrawable, Drawable, StateListDrawable, Drawable, int, int, int)>
	//   42   94:pop             
			return;
	//   43   95:return          
		}
	}

	void invalidateGlows()
	{
		mBottomGlow = null;
	//    0    0:aload_0         
	//    1    1:aconst_null     
	//    2    2:putfield        #1344 <Field EdgeEffect mBottomGlow>
		mTopGlow = null;
	//    3    5:aload_0         
	//    4    6:aconst_null     
	//    5    7:putfield        #1331 <Field EdgeEffect mTopGlow>
		mRightGlow = null;
	//    6   10:aload_0         
	//    7   11:aconst_null     
	//    8   12:putfield        #1339 <Field EdgeEffect mRightGlow>
		mLeftGlow = null;
	//    9   15:aload_0         
	//   10   16:aconst_null     
	//   11   17:putfield        #1318 <Field EdgeEffect mLeftGlow>
	//   12   20:return          
	}

	public void invalidateItemDecorations()
	{
		if(mItemDecorations.size() == 0)
	//*   0    0:aload_0         
	//*   1    1:getfield        #394 <Field ArrayList mItemDecorations>
	//*   2    4:invokevirtual   #1078 <Method int ArrayList.size()>
	//*   3    7:ifne            11
			return;
	//    4   10:return          
		if(mLayout != null)
	//*   5   11:aload_0         
	//*   6   12:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   7   15:ifnull          28
			mLayout.assertNotInLayoutOrScroll("Cannot invalidate item decorations during a scroll or layout");
	//    8   18:aload_0         
	//    9   19:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   10   22:ldc2            #2027 <String "Cannot invalidate item decorations during a scroll or layout">
	//   11   25:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		markItemDecorInsetsDirty();
	//   12   28:aload_0         
	//   13   29:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
		requestLayout();
	//   14   32:aload_0         
	//   15   33:invokevirtual   #1493 <Method void requestLayout()>
	//   16   36:return          
	}

	boolean isAccessibilityEnabled()
	{
		return mAccessibilityManager != null && mAccessibilityManager.isEnabled();
	//    0    0:aload_0         
	//    1    1:getfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #549 <Field AccessibilityManager mAccessibilityManager>
	//    5   11:invokevirtual   #2030 <Method boolean AccessibilityManager.isEnabled()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAnimating()
	{
		return mItemAnimator != null && mItemAnimator.isRunning();
	//    0    0:aload_0         
	//    1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    2    4:ifnull          19
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #1763 <Method boolean RecyclerView$ItemAnimator.isRunning()>
	//    6   14:ifeq            19
	//    7   17:iconst_1        
	//    8   18:ireturn         
	//    9   19:iconst_0        
	//   10   20:ireturn         
	}

	public boolean isAttachedToWindow()
	{
		return mIsAttached;
	//    0    0:aload_0         
	//    1    1:getfield        #2034 <Field boolean mIsAttached>
	//    2    4:ireturn         
	}

	public boolean isComputingLayout()
	{
		return mLayoutOrScrollCounter > 0;
	//    0    0:aload_0         
	//    1    1:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    2    4:ifle            9
	//    3    7:iconst_1        
	//    4    8:ireturn         
	//    5    9:iconst_0        
	//    6   10:ireturn         
	}

	public boolean isLayoutFrozen()
	{
		return mLayoutFrozen;
	//    0    0:aload_0         
	//    1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//    2    4:ireturn         
	}

	public boolean isNestedScrollingEnabled()
	{
		return getScrollingChildHelper().isNestedScrollingEnabled();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2038 <Method boolean NestedScrollingChildHelper.isNestedScrollingEnabled()>
	//    3    7:ireturn         
	}

	void jumpToPositionForSmoothScroller(int i)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//    4    8:aload_0         
	//    5    9:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    6   12:iload_1         
	//    7   13:invokevirtual   #2042 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//    8   16:aload_0         
	//    9   17:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//   10   20:pop             
			return;
	//   11   21:return          
		}
	}

	void markItemDecorInsetsDirty()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          40
			((LayoutParams)mChildHelper.getUnfilteredChildAt(i).getLayoutParams()).mInsetsDirty = true;
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   14   26:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   15   29:iconst_1        
	//   16   30:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>

	//   17   33:iload_1         
	//   18   34:iconst_1        
	//   19   35:iadd            
	//   20   36:istore_1        
	//*  21   37:goto            10
		mRecycler.markItemDecorInsetsDirty();
	//   22   40:aload_0         
	//   23   41:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   24   44:invokevirtual   #2043 <Method void RecyclerView$Recycler.markItemDecorInsetsDirty()>
	//   25   47:return          
	}

	void markKnownViewsInvalid()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          51
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:ifnull          44
	//*  17   31:aload_3         
	//*  18   32:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   35:ifne            44
				viewholder.addFlags(6);
	//   20   38:aload_3         
	//   21   39:bipush          6
	//   22   41:invokevirtual   #2047 <Method void RecyclerView$ViewHolder.addFlags(int)>
		}

	//   23   44:iload_1         
	//   24   45:iconst_1        
	//   25   46:iadd            
	//   26   47:istore_1        
	//*  27   48:goto            10
		markItemDecorInsetsDirty();
	//   28   51:aload_0         
	//   29   52:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
		mRecycler.markKnownViewsInvalid();
	//   30   55:aload_0         
	//   31   56:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   32   59:invokevirtual   #2049 <Method void RecyclerView$Recycler.markKnownViewsInvalid()>
	//   33   62:return          
	}

	public void offsetChildrenHorizontal(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetLeftAndRight(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2053 <Method void View.offsetLeftAndRight(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	public void offsetChildrenVertical(int i)
	{
		int k = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_3        
		for(int j = 0; j < k; j++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          34
			mChildHelper.getChildAt(j).offsetTopAndBottom(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:iload_1         
	//   14   24:invokevirtual   #2057 <Method void View.offsetTopAndBottom(int)>

	//   15   27:iload_2         
	//   16   28:iconst_1        
	//   17   29:iadd            
	//   18   30:istore_2        
	//*  19   31:goto            10
	//   20   34:return          
	}

	void offsetPositionRecordsForInsert(int i, int j)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          4
		for(int k = 0; k < l; k++)
	//*   4    9:iconst_0        
	//*   5   10:istore_3        
	//*   6   11:iload_3         
	//*   7   12:iload           4
	//*   8   14:icmpge          74
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   17:aload_0         
	//   10   18:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   21:iload_3         
	//   12   22:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   25:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   28:astore          5
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i)
	//*  15   30:aload           5
	//*  16   32:ifnull          67
	//*  17   35:aload           5
	//*  18   37:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   40:ifne            67
	//*  20   43:aload           5
	//*  21   45:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   48:iload_1         
	//*  23   49:icmplt          67
			{
				viewholder.offsetPosition(j, false);
	//   24   52:aload           5
	//   25   54:iload_2         
	//   26   55:iconst_0        
	//   27   56:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
	//   28   59:aload_0         
	//   29   60:getfield        #431 <Field RecyclerView$State mState>
	//   30   63:iconst_1        
	//   31   64:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
			}
		}

	//   32   67:iload_3         
	//   33   68:iconst_1        
	//   34   69:iadd            
	//   35   70:istore_3        
	//*  36   71:goto            11
		mRecycler.offsetPositionRecordsForInsert(i, j);
	//   37   74:aload_0         
	//   38   75:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   39   78:iload_1         
	//   40   79:iload_2         
	//   41   80:invokevirtual   #2064 <Method void RecyclerView$Recycler.offsetPositionRecordsForInsert(int, int)>
		requestLayout();
	//   42   83:aload_0         
	//   43   84:invokevirtual   #1493 <Method void requestLayout()>
	//   44   87:return          
	}

	void offsetPositionRecordsForMove(int i, int j)
	{
		int j1 = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          7
		int k;
		byte byte0;
		int l;
		int i1;
		if(i < j)
	//*   4    9:iload_1         
	//*   5   10:iload_2         
	//*   6   11:icmpge          79
		{
			l = i;
	//    7   14:iload_1         
	//    8   15:istore          5
			k = j;
	//    9   17:iload_2         
	//   10   18:istore_3        
			byte0 = -1;
	//   11   19:iconst_m1       
	//   12   20:istore          4
		} else
	//*  13   22:iconst_0        
	//*  14   23:istore          6
	//*  15   25:iload           6
	//*  16   27:iload           7
	//*  17   29:icmpge          130
	//*  18   32:aload_0         
	//*  19   33:getfield        #663 <Field ChildHelper mChildHelper>
	//*  20   36:iload           6
	//*  21   38:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//*  22   41:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//*  23   44:astore          8
	//*  24   46:aload           8
	//*  25   48:ifnull          70
	//*  26   51:aload           8
	//*  27   53:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  28   56:iload           5
	//*  29   58:icmplt          70
	//*  30   61:aload           8
	//*  31   63:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  32   66:iload_3         
	//*  33   67:icmple          90
	//*  34   70:iload           6
	//*  35   72:iconst_1        
	//*  36   73:iadd            
	//*  37   74:istore          6
	//*  38   76:goto            25
		{
			l = j;
	//   39   79:iload_2         
	//   40   80:istore          5
			k = i;
	//   41   82:iload_1         
	//   42   83:istore_3        
			byte0 = 1;
	//   43   84:iconst_1        
	//   44   85:istore          4
		}
		i1 = 0;
		while(i1 < j1) 
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i1));
			if(viewholder != null && viewholder.mPosition >= l && viewholder.mPosition <= k)
	//*  45   87:goto            22
			{
				if(viewholder.mPosition == i)
	//*  46   90:aload           8
	//*  47   92:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  48   95:iload_1         
	//*  49   96:icmpne          119
					viewholder.offsetPosition(j - i, false);
	//   50   99:aload           8
	//   51  101:iload_2         
	//   52  102:iload_1         
	//   53  103:isub            
	//   54  104:iconst_0        
	//   55  105:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				else
	//*  56  108:aload_0         
	//*  57  109:getfield        #431 <Field RecyclerView$State mState>
	//*  58  112:iconst_1        
	//*  59  113:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
	//*  60  116:goto            70
					viewholder.offsetPosition(((int) (byte0)), false);
	//   61  119:aload           8
	//   62  121:iload           4
	//   63  123:iconst_0        
	//   64  124:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
				mState.mStructureChanged = true;
			}
			i1++;
		}
	//*  65  127:goto            108
		mRecycler.offsetPositionRecordsForMove(i, j);
	//   66  130:aload_0         
	//   67  131:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   68  134:iload_1         
	//   69  135:iload_2         
	//   70  136:invokevirtual   #2067 <Method void RecyclerView$Recycler.offsetPositionRecordsForMove(int, int)>
		requestLayout();
	//   71  139:aload_0         
	//   72  140:invokevirtual   #1493 <Method void requestLayout()>
	//   73  143:return          
	}

	void offsetPositionRecordsForRemove(int i, int j, boolean flag)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		int k = 0;
	//    4    9:iconst_0        
	//    5   10:istore          4
		while(k < l) 
	//*   6   12:iload           4
	//*   7   14:iload           5
	//*   8   16:icmpge          113
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(k));
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   31:astore          6
			if(viewholder != null && !viewholder.shouldIgnore())
	//*  15   33:aload           6
	//*  16   35:ifnull          73
	//*  17   38:aload           6
	//*  18   40:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  19   43:ifne            73
				if(viewholder.mPosition >= i + j)
	//*  20   46:aload           6
	//*  21   48:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  22   51:iload_1         
	//*  23   52:iload_2         
	//*  24   53:iadd            
	//*  25   54:icmplt          82
				{
					viewholder.offsetPosition(-j, flag);
	//   26   57:aload           6
	//   27   59:iload_2         
	//   28   60:ineg            
	//   29   61:iload_3         
	//   30   62:invokevirtual   #2062 <Method void RecyclerView$ViewHolder.offsetPosition(int, boolean)>
					mState.mStructureChanged = true;
	//   31   65:aload_0         
	//   32   66:getfield        #431 <Field RecyclerView$State mState>
	//   33   69:iconst_1        
	//   34   70:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
				} else
	//*  35   73:iload           4
	//*  36   75:iconst_1        
	//*  37   76:iadd            
	//*  38   77:istore          4
	//*  39   79:goto            12
				if(viewholder.mPosition >= i)
	//*  40   82:aload           6
	//*  41   84:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  42   87:iload_1         
	//*  43   88:icmplt          73
				{
					viewholder.flagRemovedAndOffsetPosition(i - 1, -j, flag);
	//   44   91:aload           6
	//   45   93:iload_1         
	//   46   94:iconst_1        
	//   47   95:isub            
	//   48   96:iload_2         
	//   49   97:ineg            
	//   50   98:iload_3         
	//   51   99:invokevirtual   #2072 <Method void RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int, int, boolean)>
					mState.mStructureChanged = true;
	//   52  102:aload_0         
	//   53  103:getfield        #431 <Field RecyclerView$State mState>
	//   54  106:iconst_1        
	//   55  107:putfield        #952 <Field boolean RecyclerView$State.mStructureChanged>
				}
			k++;
		}
	//*  56  110:goto            73
		mRecycler.offsetPositionRecordsForRemove(i, j, flag);
	//   57  113:aload_0         
	//   58  114:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   59  117:iload_1         
	//   60  118:iload_2         
	//   61  119:iload_3         
	//   62  120:invokevirtual   #2074 <Method void RecyclerView$Recycler.offsetPositionRecordsForRemove(int, int, boolean)>
		requestLayout();
	//   63  123:aload_0         
	//   64  124:invokevirtual   #1493 <Method void requestLayout()>
	//   65  127:return          
	}

	protected void onAttachedToWindow()
	{
		boolean flag = true;
	//    0    0:iconst_1        
	//    1    1:istore          4
		super.onAttachedToWindow();
	//    2    3:aload_0         
	//    3    4:invokespecial   #2077 <Method void ViewGroup.onAttachedToWindow()>
		mLayoutOrScrollCounter = 0;
	//    4    7:aload_0         
	//    5    8:iconst_0        
	//    6    9:putfield        #402 <Field int mLayoutOrScrollCounter>
		mIsAttached = true;
	//    7   12:aload_0         
	//    8   13:iconst_1        
	//    9   14:putfield        #2034 <Field boolean mIsAttached>
		if(!mFirstLayoutComplete || isLayoutRequested())
	//*  10   17:aload_0         
	//*  11   18:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  12   21:ifeq            170
	//*  13   24:aload_0         
	//*  14   25:invokevirtual   #2080 <Method boolean isLayoutRequested()>
	//*  15   28:ifne            170
	//*  16   31:aload_0         
	//*  17   32:iload           4
	//*  18   34:putfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  19   37:aload_0         
	//*  20   38:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  21   41:ifnull          52
	//*  22   44:aload_0         
	//*  23   45:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  24   48:aload_0         
	//*  25   49:invokevirtual   #2083 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
	//*  26   52:aload_0         
	//*  27   53:iconst_0        
	//*  28   54:putfield        #440 <Field boolean mPostedAnimatorRunner>
	//*  29   57:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  30   60:ifeq            169
	//*  31   63:aload_0         
	//*  32   64:getstatic       #2089 <Field ThreadLocal GapWorker.sGapWorker>
	//*  33   67:invokevirtual   #2092 <Method Object ThreadLocal.get()>
	//*  34   70:checkcast       #2085 <Class GapWorker>
	//*  35   73:putfield        #2094 <Field GapWorker mGapWorker>
	//*  36   76:aload_0         
	//*  37   77:getfield        #2094 <Field GapWorker mGapWorker>
	//*  38   80:ifnonnull       161
	//*  39   83:aload_0         
	//*  40   84:new             #2085 <Class GapWorker>
	//*  41   87:dup             
	//*  42   88:invokespecial   #2095 <Method void GapWorker()>
	//*  43   91:putfield        #2094 <Field GapWorker mGapWorker>
	//*  44   94:aload_0         
	//*  45   95:invokestatic    #2099 <Method Display ViewCompat.getDisplay(View)>
	//*  46   98:astore          5
	//*  47  100:ldc2            #2100 <Float 60F>
	//*  48  103:fstore_2        
	//*  49  104:fload_2         
	//*  50  105:fstore_1        
	//*  51  106:aload_0         
	//*  52  107:invokevirtual   #746 <Method boolean isInEditMode()>
	//*  53  110:ifne            138
	//*  54  113:fload_2         
	//*  55  114:fstore_1        
	//*  56  115:aload           5
	//*  57  117:ifnull          138
	//*  58  120:aload           5
	//*  59  122:invokevirtual   #2105 <Method float Display.getRefreshRate()>
	//*  60  125:fstore_3        
	//*  61  126:fload_2         
	//*  62  127:fstore_1        
	//*  63  128:fload_3         
	//*  64  129:ldc2            #2106 <Float 30F>
	//*  65  132:fcmpl           
	//*  66  133:iflt            138
	//*  67  136:fload_3         
	//*  68  137:fstore_1        
	//*  69  138:aload_0         
	//*  70  139:getfield        #2094 <Field GapWorker mGapWorker>
	//*  71  142:ldc2            #2107 <Float 1E+09F>
	//*  72  145:fload_1         
	//*  73  146:fdiv            
	//*  74  147:f2l             
	//*  75  148:putfield        #2110 <Field long GapWorker.mFrameIntervalNs>
	//*  76  151:getstatic       #2089 <Field ThreadLocal GapWorker.sGapWorker>
	//*  77  154:aload_0         
	//*  78  155:getfield        #2094 <Field GapWorker mGapWorker>
	//*  79  158:invokevirtual   #2113 <Method void ThreadLocal.set(Object)>
	//*  80  161:aload_0         
	//*  81  162:getfield        #2094 <Field GapWorker mGapWorker>
	//*  82  165:aload_0         
	//*  83  166:invokevirtual   #2115 <Method void GapWorker.add(RecyclerView)>
	//*  84  169:return          
			flag = false;
	//   85  170:iconst_0        
	//   86  171:istore          4
		mFirstLayoutComplete = flag;
		if(mLayout != null)
			mLayout.dispatchAttachedToWindow(this);
		mPostedAnimatorRunner = false;
		if(ALLOW_THREAD_GAP_WORK)
		{
			mGapWorker = (GapWorker)GapWorker.sGapWorker.get();
			if(mGapWorker == null)
			{
				mGapWorker = new GapWorker();
				Display display = ViewCompat.getDisplay(((View) (this)));
				float f1 = 60F;
				float f = f1;
				if(!isInEditMode())
				{
					f = f1;
					if(display != null)
					{
						float f2 = display.getRefreshRate();
						f = f1;
						if(f2 >= 30F)
							f = f2;
					}
				}
				mGapWorker.mFrameIntervalNs = (long)(1E+09F / f);
				GapWorker.sGapWorker.set(((Object) (mGapWorker)));
			}
			mGapWorker.add(this);
		}
	//*  87  173:goto            31
	}

	public void onChildAttachedToWindow(View view)
	{
	//    0    0:return          
	}

	public void onChildDetachedFromWindow(View view)
	{
	//    0    0:return          
	}

	protected void onDetachedFromWindow()
	{
		super.onDetachedFromWindow();
	//    0    0:aload_0         
	//    1    1:invokespecial   #2118 <Method void ViewGroup.onDetachedFromWindow()>
		if(mItemAnimator != null)
	//*   2    4:aload_0         
	//*   3    5:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   4    8:ifnull          18
			mItemAnimator.endAnimations();
	//    5   11:aload_0         
	//    6   12:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    7   15:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
		stopScroll();
	//    8   18:aload_0         
	//    9   19:invokevirtual   #2124 <Method void stopScroll()>
		mIsAttached = false;
	//   10   22:aload_0         
	//   11   23:iconst_0        
	//   12   24:putfield        #2034 <Field boolean mIsAttached>
		if(mLayout != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  15   31:ifnull          46
			mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:aload_0         
	//   20   40:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   21   43:invokevirtual   #2128 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
		mPendingAccessibilityImportanceChange.clear();
	//   22   46:aload_0         
	//   23   47:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//   24   50:invokeinterface #1554 <Method void List.clear()>
		removeCallbacks(mItemAnimatorRunner);
	//   25   55:aload_0         
	//   26   56:aload_0         
	//   27   57:getfield        #453 <Field Runnable mItemAnimatorRunner>
	//   28   60:invokevirtual   #2132 <Method boolean removeCallbacks(Runnable)>
	//   29   63:pop             
		mViewInfoStore.onDetach();
	//   30   64:aload_0         
	//   31   65:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   32   68:invokevirtual   #2135 <Method void ViewInfoStore.onDetach()>
		if(ALLOW_THREAD_GAP_WORK)
	//*  33   71:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  34   74:ifeq            90
		{
			mGapWorker.remove(this);
	//   35   77:aload_0         
	//   36   78:getfield        #2094 <Field GapWorker mGapWorker>
	//   37   81:aload_0         
	//   38   82:invokevirtual   #2138 <Method void GapWorker.remove(RecyclerView)>
			mGapWorker = null;
	//   39   85:aload_0         
	//   40   86:aconst_null     
	//   41   87:putfield        #2094 <Field GapWorker mGapWorker>
		}
	//   42   90:return          
	}

	public void onDraw(Canvas canvas)
	{
		super.onDraw(canvas);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:invokespecial   #2141 <Method void ViewGroup.onDraw(Canvas)>
		int j = mItemDecorations.size();
	//    3    5:aload_0         
	//    4    6:getfield        #394 <Field ArrayList mItemDecorations>
	//    5    9:invokevirtual   #1078 <Method int ArrayList.size()>
	//    6   12:istore_3        
		for(int i = 0; i < j; i++)
	//*   7   13:iconst_0        
	//*   8   14:istore_2        
	//*   9   15:iload_2         
	//*  10   16:iload_3         
	//*  11   17:icmpge          47
			((ItemDecoration)mItemDecorations.get(i)).onDraw(canvas, this, mState);
	//   12   20:aload_0         
	//   13   21:getfield        #394 <Field ArrayList mItemDecorations>
	//   14   24:iload_2         
	//   15   25:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   16   28:checkcast       #52  <Class RecyclerView$ItemDecoration>
	//   17   31:aload_1         
	//   18   32:aload_0         
	//   19   33:aload_0         
	//   20   34:getfield        #431 <Field RecyclerView$State mState>
	//   21   37:invokevirtual   #2143 <Method void RecyclerView$ItemDecoration.onDraw(Canvas, RecyclerView, RecyclerView$State)>

	//   22   40:iload_2         
	//   23   41:iconst_1        
	//   24   42:iadd            
	//   25   43:istore_2        
	//*  26   44:goto            15
	//   27   47:return          
	}

	void onEnterLayoutOrScroll()
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter + 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:iadd            
	//    5    7:putfield        #402 <Field int mLayoutOrScrollCounter>
	//    6   10:return          
	}

	void onExitLayoutOrScroll()
	{
		onExitLayoutOrScroll(true);
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:invokevirtual   #2145 <Method void onExitLayoutOrScroll(boolean)>
	//    3    5:return          
	}

	void onExitLayoutOrScroll(boolean flag)
	{
		mLayoutOrScrollCounter = mLayoutOrScrollCounter - 1;
	//    0    0:aload_0         
	//    1    1:aload_0         
	//    2    2:getfield        #402 <Field int mLayoutOrScrollCounter>
	//    3    5:iconst_1        
	//    4    6:isub            
	//    5    7:putfield        #402 <Field int mLayoutOrScrollCounter>
		if(mLayoutOrScrollCounter < 1)
	//*   6   10:aload_0         
	//*   7   11:getfield        #402 <Field int mLayoutOrScrollCounter>
	//*   8   14:iconst_1        
	//*   9   15:icmpge          35
		{
			mLayoutOrScrollCounter = 0;
	//   10   18:aload_0         
	//   11   19:iconst_0        
	//   12   20:putfield        #402 <Field int mLayoutOrScrollCounter>
			if(flag)
	//*  13   23:iload_1         
	//*  14   24:ifeq            35
			{
				dispatchContentChangedIfNecessary();
	//   15   27:aload_0         
	//   16   28:invokespecial   #2147 <Method void dispatchContentChangedIfNecessary()>
				dispatchPendingImportantForAccessibilityChanges();
	//   17   31:aload_0         
	//   18   32:invokevirtual   #2149 <Method void dispatchPendingImportantForAccessibilityChanges()>
			}
		}
	//   19   35:return          
	}

	public boolean onGenericMotionEvent(MotionEvent motionevent)
	{
		if(mLayout != null && !mLayoutFrozen && motionevent.getAction() == 8)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       9
	//*   3    7:iconst_0        
	//*   4    8:ireturn         
	//*   5    9:aload_0         
	//*   6   10:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   7   13:ifne            7
	//*   8   16:aload_1         
	//*   9   17:invokevirtual   #1073 <Method int MotionEvent.getAction()>
	//*  10   20:bipush          8
	//*  11   22:icmpne          7
		{
			float f;
			float f1;
			if((motionevent.getSource() & 2) != 0)
	//*  12   25:aload_1         
	//*  13   26:invokevirtual   #2153 <Method int MotionEvent.getSource()>
	//*  14   29:iconst_2        
	//*  15   30:iand            
	//*  16   31:ifeq            113
			{
				if(mLayout.canScrollVertically())
	//*  17   34:aload_0         
	//*  18   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  19   38:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  20   41:ifeq            103
					f1 = -motionevent.getAxisValue(9);
	//   21   44:aload_1         
	//   22   45:bipush          9
	//   23   47:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//   24   50:fneg            
	//   25   51:fstore_3        
				else
	//*  26   52:aload_0         
	//*  27   53:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  28   56:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  29   59:ifeq            108
	//*  30   62:aload_1         
	//*  31   63:bipush          10
	//*  32   65:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//*  33   68:fstore_2        
	//*  34   69:fload_3         
	//*  35   70:fconst_0        
	//*  36   71:fcmpl           
	//*  37   72:ifne            81
	//*  38   75:fload_2         
	//*  39   76:fconst_0        
	//*  40   77:fcmpl           
	//*  41   78:ifeq            7
	//*  42   81:aload_0         
	//*  43   82:aload_0         
	//*  44   83:getfield        #416 <Field float mScaledHorizontalScrollFactor>
	//*  45   86:fload_2         
	//*  46   87:fmul            
	//*  47   88:f2i             
	//*  48   89:aload_0         
	//*  49   90:getfield        #418 <Field float mScaledVerticalScrollFactor>
	//*  50   93:fload_3         
	//*  51   94:fmul            
	//*  52   95:f2i             
	//*  53   96:aload_1         
	//*  54   97:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//*  55  100:pop             
	//*  56  101:iconst_0        
	//*  57  102:ireturn         
					f1 = 0.0F;
	//   58  103:fconst_0        
	//   59  104:fstore_3        
				if(mLayout.canScrollHorizontally())
					f = motionevent.getAxisValue(10);
				else
	//*  60  105:goto            52
					f = 0.0F;
	//   61  108:fconst_0        
	//   62  109:fstore_2        
			} else
	//*  63  110:goto            69
			if((motionevent.getSource() & 0x400000) != 0)
	//*  64  113:aload_1         
	//*  65  114:invokevirtual   #2153 <Method int MotionEvent.getSource()>
	//*  66  117:ldc2            #2161 <Int 0x400000>
	//*  67  120:iand            
	//*  68  121:ifeq            171
			{
				f = motionevent.getAxisValue(26);
	//   69  124:aload_1         
	//   70  125:bipush          26
	//   71  127:invokevirtual   #2156 <Method float MotionEvent.getAxisValue(int)>
	//   72  130:fstore_2        
				if(mLayout.canScrollVertically())
	//*  73  131:aload_0         
	//*  74  132:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  75  135:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  76  138:ifeq            149
				{
					f1 = -f;
	//   77  141:fload_2         
	//   78  142:fneg            
	//   79  143:fstore_3        
					f = 0.0F;
	//   80  144:fconst_0        
	//   81  145:fstore_2        
				} else
	//*  82  146:goto            69
				if(mLayout.canScrollHorizontally())
	//*  83  149:aload_0         
	//*  84  150:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  85  153:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  86  156:ifeq            164
				{
					f1 = 0.0F;
	//   87  159:fconst_0        
	//   88  160:fstore_3        
				} else
	//*  89  161:goto            69
				{
					f1 = 0.0F;
	//   90  164:fconst_0        
	//   91  165:fstore_3        
					f = 0.0F;
	//   92  166:fconst_0        
	//   93  167:fstore_2        
				}
			} else
	//*  94  168:goto            69
			{
				f1 = 0.0F;
	//   95  171:fconst_0        
	//   96  172:fstore_3        
				f = 0.0F;
	//   97  173:fconst_0        
	//   98  174:fstore_2        
			}
			if(f1 != 0.0F || f != 0.0F)
			{
				scrollByInternal((int)(mScaledHorizontalScrollFactor * f), (int)(mScaledVerticalScrollFactor * f1), motionevent);
				return false;
			}
		}
		return false;
	//*  99  175:goto            69
	}

	public boolean onInterceptTouchEvent(MotionEvent motionevent)
	{
		int i;
		int k;
		boolean flag2;
		boolean flag3;
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		if(dispatchOnItemTouchIntercept(motionevent))
	//*   5    9:aload_0         
	//*   6   10:aload_1         
	//*   7   11:invokespecial   #2163 <Method boolean dispatchOnItemTouchIntercept(MotionEvent)>
	//*   8   14:ifeq            23
		{
			cancelTouch();
	//    9   17:aload_0         
	//   10   18:invokespecial   #2165 <Method void cancelTouch()>
			return true;
	//   11   21:iconst_1        
	//   12   22:ireturn         
		}
		if(mLayout == null)
	//*  13   23:aload_0         
	//*  14   24:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  15   27:ifnonnull       32
			return false;
	//   16   30:iconst_0        
	//   17   31:ireturn         
		flag2 = mLayout.canScrollHorizontally();
	//   18   32:aload_0         
	//   19   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   20   36:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   21   39:istore          8
		flag3 = mLayout.canScrollVertically();
	//   22   41:aload_0         
	//   23   42:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   24   45:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   25   48:istore          9
		if(mVelocityTracker == null)
	//*  26   50:aload_0         
	//*  27   51:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*  28   54:ifnonnull       64
			mVelocityTracker = VelocityTracker.obtain();
	//   29   57:aload_0         
	//   30   58:invokestatic    #2168 <Method VelocityTracker VelocityTracker.obtain()>
	//   31   61:putfield        #1400 <Field VelocityTracker mVelocityTracker>
		mVelocityTracker.addMovement(motionevent);
	//   32   64:aload_0         
	//   33   65:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//   34   68:aload_1         
	//   35   69:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
		k = motionevent.getActionMasked();
	//   36   72:aload_1         
	//   37   73:invokevirtual   #2174 <Method int MotionEvent.getActionMasked()>
	//   38   76:istore_3        
		i = motionevent.getActionIndex();
	//   39   77:aload_1         
	//   40   78:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//   41   81:istore_2        
		k;
	//   42   82:iload_3         
		JVM INSTR tableswitch 0 6: default 124
	//	               0 134
	//	               1 500
	//	               2 320
	//	               3 515
	//	               4 124
	//	               5 266
	//	               6 492;
	//   43   83:tableswitch     0 6: default 124
	//	               0 134
	//	               1 500
	//	               2 320
	//	               3 515
	//	               4 124
	//	               5 266
	//	               6 492
		   goto _L1 _L2 _L3 _L4 _L5 _L1 _L6 _L7
_L1:
		break; /* Loop/switch isn't completed */
_L5:
		break MISSING_BLOCK_LABEL_515;
_L8:
		return mScrollState == 1;
	//   44  124:aload_0         
	//   45  125:getfield        #411 <Field int mScrollState>
	//   46  128:iconst_1        
	//   47  129:icmpne          522
	//   48  132:iconst_1        
	//   49  133:ireturn         
	//   50  134:aload_0         
	//   51  135:getfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//   52  138:ifeq            146
	//   53  141:aload_0         
	//   54  142:iconst_0        
	//   55  143:putfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//   56  146:aload_0         
	//   57  147:aload_1         
	//   58  148:iconst_0        
	//   59  149:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//   60  152:putfield        #413 <Field int mScrollPointerId>
	//   61  155:aload_1         
	//   62  156:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//   63  159:ldc2            #1283 <Float 0.5F>
	//   64  162:fadd            
	//   65  163:f2i             
	//   66  164:istore_2        
	//   67  165:aload_0         
	//   68  166:iload_2         
	//   69  167:putfield        #1285 <Field int mLastTouchX>
	//   70  170:aload_0         
	//   71  171:iload_2         
	//   72  172:putfield        #1287 <Field int mInitialTouchX>
	//   73  175:aload_1         
	//   74  176:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//   75  179:ldc2            #1283 <Float 0.5F>
	//   76  182:fadd            
	//   77  183:f2i             
	//   78  184:istore_2        
	//   79  185:aload_0         
	//   80  186:iload_2         
	//   81  187:putfield        #1292 <Field int mLastTouchY>
	//   82  190:aload_0         
	//   83  191:iload_2         
	//   84  192:putfield        #1294 <Field int mInitialTouchY>
	//   85  195:aload_0         
	//   86  196:getfield        #411 <Field int mScrollState>
	//   87  199:iconst_2        
	//   88  200:icmpne          218
	//   89  203:aload_0         
	//   90  204:invokevirtual   #2181 <Method ViewParent getParent()>
	//   91  207:iconst_1        
	//   92  208:invokeinterface #2186 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
	//   93  213:aload_0         
	//   94  214:iconst_1        
	//   95  215:invokevirtual   #708 <Method void setScrollState(int)>
	//   96  218:aload_0         
	//   97  219:getfield        #448 <Field int[] mNestedOffsets>
	//   98  222:astore_1        
	//   99  223:aload_0         
	//  100  224:getfield        #448 <Field int[] mNestedOffsets>
	//  101  227:iconst_1        
	//  102  228:iconst_0        
	//  103  229:iastore         
	//  104  230:aload_1         
	//  105  231:iconst_0        
	//  106  232:iconst_0        
	//  107  233:iastore         
	//  108  234:iconst_0        
	//  109  235:istore_2        
	//  110  236:iload           8
	//  111  238:ifeq            245
	//  112  241:iconst_0        
	//  113  242:iconst_1        
	//  114  243:ior             
	//  115  244:istore_2        
	//  116  245:iload_2         
	//  117  246:istore_3        
	//  118  247:iload           9
	//  119  249:ifeq            256
	//  120  252:iload_2         
	//  121  253:iconst_2        
	//  122  254:ior             
	//  123  255:istore_3        
	//  124  256:aload_0         
	//  125  257:iload_3         
	//  126  258:iconst_0        
	//  127  259:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//  128  262:pop             
	//  129  263:goto            124
	//  130  266:aload_0         
	//  131  267:aload_1         
	//  132  268:iload_2         
	//  133  269:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//  134  272:putfield        #413 <Field int mScrollPointerId>
	//  135  275:aload_1         
	//  136  276:iload_2         
	//  137  277:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//  138  280:ldc2            #1283 <Float 0.5F>
	//  139  283:fadd            
	//  140  284:f2i             
	//  141  285:istore_3        
	//  142  286:aload_0         
	//  143  287:iload_3         
	//  144  288:putfield        #1285 <Field int mLastTouchX>
	//  145  291:aload_0         
	//  146  292:iload_3         
	//  147  293:putfield        #1287 <Field int mInitialTouchX>
	//  148  296:aload_1         
	//  149  297:iload_2         
	//  150  298:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//  151  301:ldc2            #1283 <Float 0.5F>
	//  152  304:fadd            
	//  153  305:f2i             
	//  154  306:istore_2        
	//  155  307:aload_0         
	//  156  308:iload_2         
	//  157  309:putfield        #1292 <Field int mLastTouchY>
	//  158  312:aload_0         
	//  159  313:iload_2         
	//  160  314:putfield        #1294 <Field int mInitialTouchY>
	//  161  317:goto            124
	//  162  320:aload_1         
	//  163  321:aload_0         
	//  164  322:getfield        #413 <Field int mScrollPointerId>
	//  165  325:invokevirtual   #2189 <Method int MotionEvent.findPointerIndex(int)>
	//  166  328:istore_2        
	//  167  329:iload_2         
	//  168  330:ifge            370
	//  169  333:ldc1            #168 <String "RecyclerView">
	//  170  335:new             #796 <Class StringBuilder>
	//  171  338:dup             
	//  172  339:invokespecial   #797 <Method void StringBuilder()>
	//  173  342:ldc2            #2191 <String "Error processing scroll; pointer index for id ">
	//  174  345:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  175  348:aload_0         
	//  176  349:getfield        #413 <Field int mScrollPointerId>
	//  177  352:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//  178  355:ldc2            #2193 <String " not found. Did any MotionEvents get skipped?">
	//  179  358:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  180  361:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  181  364:invokestatic    #1239 <Method int Log.e(String, String)>
	//  182  367:pop             
	//  183  368:iconst_0        
	//  184  369:ireturn         
	//  185  370:aload_1         
	//  186  371:iload_2         
	//  187  372:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//  188  375:ldc2            #1283 <Float 0.5F>
	//  189  378:fadd            
	//  190  379:f2i             
	//  191  380:istore          6
	//  192  382:aload_1         
	//  193  383:iload_2         
	//  194  384:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//  195  387:ldc2            #1283 <Float 0.5F>
	//  196  390:fadd            
	//  197  391:f2i             
	//  198  392:istore          4
	//  199  394:aload_0         
	//  200  395:getfield        #411 <Field int mScrollState>
	//  201  398:iconst_1        
	//  202  399:icmpeq          124
	//  203  402:aload_0         
	//  204  403:getfield        #1287 <Field int mInitialTouchX>
	//  205  406:istore          7
	//  206  408:aload_0         
	//  207  409:getfield        #1294 <Field int mInitialTouchY>
	//  208  412:istore          5
	//  209  414:iconst_0        
	//  210  415:istore_3        
	//  211  416:iload_3         
	//  212  417:istore_2        
	//  213  418:iload           8
	//  214  420:ifeq            448
	//  215  423:iload_3         
	//  216  424:istore_2        
	//  217  425:iload           6
	//  218  427:iload           7
	//  219  429:isub            
	//  220  430:invokestatic    #1848 <Method int Math.abs(int)>
	//  221  433:aload_0         
	//  222  434:getfield        #490 <Field int mTouchSlop>
	//  223  437:icmple          448
	//  224  440:aload_0         
	//  225  441:iload           6
	//  226  443:putfield        #1285 <Field int mLastTouchX>
	//  227  446:iconst_1        
	//  228  447:istore_2        
	//  229  448:iload_2         
	//  230  449:istore_3        
	//  231  450:iload           9
	//  232  452:ifeq            480
	//  233  455:iload_2         
	//  234  456:istore_3        
	//  235  457:iload           4
	//  236  459:iload           5
	//  237  461:isub            
	//  238  462:invokestatic    #1848 <Method int Math.abs(int)>
	//  239  465:aload_0         
	//  240  466:getfield        #490 <Field int mTouchSlop>
	//  241  469:icmple          480
	//  242  472:aload_0         
	//  243  473:iload           4
	//  244  475:putfield        #1292 <Field int mLastTouchY>
	//  245  478:iconst_1        
	//  246  479:istore_3        
	//  247  480:iload_3         
	//  248  481:ifeq            124
	//  249  484:aload_0         
	//  250  485:iconst_1        
	//  251  486:invokevirtual   #708 <Method void setScrollState(int)>
	//  252  489:goto            124
	//  253  492:aload_0         
	//  254  493:aload_1         
	//  255  494:invokespecial   #2195 <Method void onPointerUp(MotionEvent)>
	//  256  497:goto            124
	//  257  500:aload_0         
	//  258  501:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//  259  504:invokevirtual   #1403 <Method void VelocityTracker.clear()>
	//  260  507:aload_0         
	//  261  508:iconst_0        
	//  262  509:invokevirtual   #1406 <Method void stopNestedScroll(int)>
	//  263  512:goto            124
	//  264  515:aload_0         
	//  265  516:invokespecial   #2165 <Method void cancelTouch()>
	//  266  519:goto            124
	//  267  522:iconst_0        
	//  268  523:ireturn         
_L2:
		if(mIgnoreMotionEventTillDown)
			mIgnoreMotionEventTillDown = false;
		mScrollPointerId = motionevent.getPointerId(0);
		i = (int)(motionevent.getX() + 0.5F);
		mLastTouchX = i;
		mInitialTouchX = i;
		i = (int)(motionevent.getY() + 0.5F);
		mLastTouchY = i;
		mInitialTouchY = i;
		if(mScrollState == 2)
		{
			getParent().requestDisallowInterceptTouchEvent(true);
			setScrollState(1);
		}
		motionevent = ((MotionEvent) (mNestedOffsets));
		mNestedOffsets[1] = 0;
		motionevent[0] = 0;
		i = 0;
		if(flag2)
			i = ((int) (false | true));
		k = i;
		if(flag3)
			k = i | 2;
		startNestedScroll(k, 0);
		  goto _L8
_L6:
		mScrollPointerId = motionevent.getPointerId(i);
		int l = (int)(motionevent.getX(i) + 0.5F);
		mLastTouchX = l;
		mInitialTouchX = l;
		i = (int)(motionevent.getY(i) + 0.5F);
		mLastTouchY = i;
		mInitialTouchY = i;
		  goto _L8
_L4:
		int j = motionevent.findPointerIndex(mScrollPointerId);
		if(j < 0)
		{
			Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
			return false;
		}
		int k1 = (int)(motionevent.getX(j) + 0.5F);
		int i1 = (int)(motionevent.getY(j) + 0.5F);
		if(mScrollState != 1)
		{
			int l1 = mInitialTouchX;
			int j1 = mInitialTouchY;
			boolean flag1 = false;
			boolean flag = flag1;
			if(flag2)
			{
				flag = flag1;
				if(Math.abs(k1 - l1) > mTouchSlop)
				{
					mLastTouchX = k1;
					flag = true;
				}
			}
			flag1 = flag;
			if(flag3)
			{
				flag1 = flag;
				if(Math.abs(i1 - j1) > mTouchSlop)
				{
					mLastTouchY = i1;
					flag1 = true;
				}
			}
			if(flag1)
				setScrollState(1);
		}
		  goto _L8
_L7:
		onPointerUp(motionevent);
		  goto _L8
_L3:
		mVelocityTracker.clear();
		stopNestedScroll(0);
		  goto _L8
		cancelTouch();
		  goto _L8
	}

	protected void onLayout(boolean flag, int i, int j, int k, int l)
	{
		TraceCompat.beginSection("RV OnLayout");
	//    0    0:ldc1            #188 <String "RV OnLayout">
	//    1    2:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
		dispatchLayout();
	//    2    5:aload_0         
	//    3    6:invokevirtual   #1590 <Method void dispatchLayout()>
		TraceCompat.endSection();
	//    4    9:invokestatic    #1593 <Method void TraceCompat.endSection()>
		mFirstLayoutComplete = true;
	//    5   12:aload_0         
	//    6   13:iconst_1        
	//    7   14:putfield        #1311 <Field boolean mFirstLayoutComplete>
	//    8   17:return          
	}

	protected void onMeasure(int i, int j)
	{
		boolean flag1 = false;
	//    0    0:iconst_0        
	//    1    1:istore          4
		if(mLayout != null) goto _L2; else goto _L1
	//    2    3:aload_0         
	//    3    4:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    4    7:ifnonnull       17
_L1:
		defaultOnMeasure(i, j);
	//    5   10:aload_0         
	//    6   11:iload_1         
	//    7   12:iload_2         
	//    8   13:invokevirtual   #2200 <Method void defaultOnMeasure(int, int)>
_L4:
		return;
	//    9   16:return          
_L2:
		if(!mLayout.mAutoMeasure)
			break; /* Loop/switch isn't completed */
	//   10   17:aload_0         
	//   11   18:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   12   21:getfield        #2203 <Field boolean RecyclerView$LayoutManager.mAutoMeasure>
	//   13   24:ifeq            195
		int k = android.view.View.MeasureSpec.getMode(i);
	//   14   27:iload_1         
	//   15   28:invokestatic    #2208 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   16   31:istore          5
		int l = android.view.View.MeasureSpec.getMode(j);
	//   17   33:iload_2         
	//   18   34:invokestatic    #2208 <Method int android.view.View$MeasureSpec.getMode(int)>
	//   19   37:istore          6
		boolean flag = flag1;
	//   20   39:iload           4
	//   21   41:istore_3        
		if(k == 0x40000000)
	//*  22   42:iload           5
	//*  23   44:ldc2            #2209 <Int 0x40000000>
	//*  24   47:icmpne          63
		{
			flag = flag1;
	//   25   50:iload           4
	//   26   52:istore_3        
			if(l == 0x40000000)
	//*  27   53:iload           6
	//*  28   55:ldc2            #2209 <Int 0x40000000>
	//*  29   58:icmpne          63
				flag = true;
	//   30   61:iconst_1        
	//   31   62:istore_3        
		}
		mLayout.onMeasure(mRecycler, mState, i, j);
	//   32   63:aload_0         
	//   33   64:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   34   67:aload_0         
	//   35   68:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   36   71:aload_0         
	//   37   72:getfield        #431 <Field RecyclerView$State mState>
	//   38   75:iload_1         
	//   39   76:iload_2         
	//   40   77:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
		if(!flag && mAdapter != null)
	//*  41   80:iload_3         
	//*  42   81:ifne            16
	//*  43   84:aload_0         
	//*  44   85:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  45   88:ifnull          16
		{
			if(mState.mLayoutStep == 1)
	//*  46   91:aload_0         
	//*  47   92:getfield        #431 <Field RecyclerView$State mState>
	//*  48   95:getfield        #984 <Field int RecyclerView$State.mLayoutStep>
	//*  49   98:iconst_1        
	//*  50   99:icmpne          106
				dispatchLayoutStep1();
	//   51  102:aload_0         
	//   52  103:invokespecial   #1657 <Method void dispatchLayoutStep1()>
			mLayout.setMeasureSpecs(i, j);
	//   53  106:aload_0         
	//   54  107:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   55  110:iload_1         
	//   56  111:iload_2         
	//   57  112:invokevirtual   #2215 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
			mState.mIsMeasuring = true;
	//   58  115:aload_0         
	//   59  116:getfield        #431 <Field RecyclerView$State mState>
	//   60  119:iconst_1        
	//   61  120:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
			dispatchLayoutStep2();
	//   62  123:aload_0         
	//   63  124:invokespecial   #1662 <Method void dispatchLayoutStep2()>
			mLayout.setMeasuredDimensionFromChildren(i, j);
	//   64  127:aload_0         
	//   65  128:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   66  131:iload_1         
	//   67  132:iload_2         
	//   68  133:invokevirtual   #2218 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
			if(mLayout.shouldMeasureTwice())
	//*  69  136:aload_0         
	//*  70  137:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  71  140:invokevirtual   #2221 <Method boolean RecyclerView$LayoutManager.shouldMeasureTwice()>
	//*  72  143:ifeq            16
			{
				mLayout.setMeasureSpecs(android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000));
	//   73  146:aload_0         
	//   74  147:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   75  150:aload_0         
	//   76  151:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//   77  154:ldc2            #2209 <Int 0x40000000>
	//   78  157:invokestatic    #2224 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   79  160:aload_0         
	//   80  161:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//   81  164:ldc2            #2209 <Int 0x40000000>
	//   82  167:invokestatic    #2224 <Method int android.view.View$MeasureSpec.makeMeasureSpec(int, int)>
	//   83  170:invokevirtual   #2215 <Method void RecyclerView$LayoutManager.setMeasureSpecs(int, int)>
				mState.mIsMeasuring = true;
	//   84  173:aload_0         
	//   85  174:getfield        #431 <Field RecyclerView$State mState>
	//   86  177:iconst_1        
	//   87  178:putfield        #862 <Field boolean RecyclerView$State.mIsMeasuring>
				dispatchLayoutStep2();
	//   88  181:aload_0         
	//   89  182:invokespecial   #1662 <Method void dispatchLayoutStep2()>
				mLayout.setMeasuredDimensionFromChildren(i, j);
	//   90  185:aload_0         
	//   91  186:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   92  189:iload_1         
	//   93  190:iload_2         
	//   94  191:invokevirtual   #2218 <Method void RecyclerView$LayoutManager.setMeasuredDimensionFromChildren(int, int)>
				return;
	//   95  194:return          
			}
		}
		if(true) goto _L4; else goto _L3
_L3:
		if(mHasFixedSize)
	//*  96  195:aload_0         
	//*  97  196:getfield        #1983 <Field boolean mHasFixedSize>
	//*  98  199:ifeq            220
		{
			mLayout.onMeasure(mRecycler, mState, i, j);
	//   99  202:aload_0         
	//  100  203:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//  101  206:aload_0         
	//  102  207:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//  103  210:aload_0         
	//  104  211:getfield        #431 <Field RecyclerView$State mState>
	//  105  214:iload_1         
	//  106  215:iload_2         
	//  107  216:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
			return;
	//  108  219:return          
		}
		if(mAdapterUpdateDuringMeasure)
	//* 109  220:aload_0         
	//* 110  221:getfield        #2226 <Field boolean mAdapterUpdateDuringMeasure>
	//* 111  224:ifeq            345
		{
			eatRequestLayout();
	//  112  227:aload_0         
	//  113  228:invokevirtual   #865 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//  114  231:aload_0         
	//  115  232:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
			processAdapterUpdatesAndSetAnimationFlags();
	//  116  235:aload_0         
	//  117  236:invokespecial   #874 <Method void processAdapterUpdatesAndSetAnimationFlags()>
			onExitLayoutOrScroll();
	//  118  239:aload_0         
	//  119  240:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
			if(mState.mRunPredictiveAnimations)
	//* 120  243:aload_0         
	//* 121  244:getfield        #431 <Field RecyclerView$State mState>
	//* 122  247:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 123  250:ifeq            327
			{
				mState.mInPreLayout = true;
	//  124  253:aload_0         
	//  125  254:getfield        #431 <Field RecyclerView$State mState>
	//  126  257:iconst_1        
	//  127  258:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
			} else
	//* 128  261:aload_0         
	//* 129  262:iconst_0        
	//* 130  263:putfield        #2226 <Field boolean mAdapterUpdateDuringMeasure>
	//* 131  266:aload_0         
	//* 132  267:iconst_0        
	//* 133  268:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 134  271:aload_0         
	//* 135  272:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//* 136  275:ifnull          368
	//* 137  278:aload_0         
	//* 138  279:getfield        #431 <Field RecyclerView$State mState>
	//* 139  282:aload_0         
	//* 140  283:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//* 141  286:invokevirtual   #894 <Method int RecyclerView$Adapter.getItemCount()>
	//* 142  289:putfield        #897 <Field int RecyclerView$State.mItemCount>
	//* 143  292:aload_0         
	//* 144  293:invokevirtual   #865 <Method void eatRequestLayout()>
	//* 145  296:aload_0         
	//* 146  297:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//* 147  300:aload_0         
	//* 148  301:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//* 149  304:aload_0         
	//* 150  305:getfield        #431 <Field RecyclerView$State mState>
	//* 151  308:iload_1         
	//* 152  309:iload_2         
	//* 153  310:invokevirtual   #2212 <Method void RecyclerView$LayoutManager.onMeasure(RecyclerView$Recycler, RecyclerView$State, int, int)>
	//* 154  313:aload_0         
	//* 155  314:iconst_0        
	//* 156  315:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//* 157  318:aload_0         
	//* 158  319:getfield        #431 <Field RecyclerView$State mState>
	//* 159  322:iconst_0        
	//* 160  323:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
	//* 161  326:return          
			{
				mAdapterHelper.consumeUpdatesInOnePass();
	//  162  327:aload_0         
	//  163  328:getfield        #987 <Field AdapterHelper mAdapterHelper>
	//  164  331:invokevirtual   #992 <Method void AdapterHelper.consumeUpdatesInOnePass()>
				mState.mInPreLayout = false;
	//  165  334:aload_0         
	//  166  335:getfield        #431 <Field RecyclerView$State mState>
	//  167  338:iconst_0        
	//  168  339:putfield        #889 <Field boolean RecyclerView$State.mInPreLayout>
			}
			mAdapterUpdateDuringMeasure = false;
			resumeRequestLayout(false);
		} else
	//* 169  342:goto            261
		if(mState.mRunPredictiveAnimations)
	//* 170  345:aload_0         
	//* 171  346:getfield        #431 <Field RecyclerView$State mState>
	//* 172  349:getfield        #886 <Field boolean RecyclerView$State.mRunPredictiveAnimations>
	//* 173  352:ifeq            271
		{
			setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());
	//  174  355:aload_0         
	//  175  356:aload_0         
	//  176  357:invokevirtual   #1774 <Method int getMeasuredWidth()>
	//  177  360:aload_0         
	//  178  361:invokevirtual   #1777 <Method int getMeasuredHeight()>
	//  179  364:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
			return;
	//  180  367:return          
		}
		if(mAdapter != null)
			mState.mItemCount = mAdapter.getItemCount();
		else
			mState.mItemCount = 0;
	//  181  368:aload_0         
	//  182  369:getfield        #431 <Field RecyclerView$State mState>
	//  183  372:iconst_0        
	//  184  373:putfield        #897 <Field int RecyclerView$State.mItemCount>
		eatRequestLayout();
		mLayout.onMeasure(mRecycler, mState, i, j);
		resumeRequestLayout(false);
		mState.mInPreLayout = false;
		return;
	//* 185  376:goto            292
	}

	protected boolean onRequestFocusInDescendants(int i, Rect rect)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            9
			return false;
	//    3    7:iconst_0        
	//    4    8:ireturn         
		else
			return super.onRequestFocusInDescendants(i, rect);
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:aload_2         
	//    8   12:invokespecial   #2230 <Method boolean ViewGroup.onRequestFocusInDescendants(int, Rect)>
	//    9   15:ireturn         
	}

	protected void onRestoreInstanceState(Parcelable parcelable)
	{
		if(!(parcelable instanceof SavedState))
	//*   0    0:aload_1         
	//*   1    1:instanceof      #98  <Class RecyclerView$SavedState>
	//*   2    4:ifne            13
		{
			super.onRestoreInstanceState(parcelable);
	//    3    7:aload_0         
	//    4    8:aload_1         
	//    5    9:invokespecial   #2234 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
		} else
	//*   6   12:return          
		{
			mPendingSavedState = (SavedState)parcelable;
	//    7   13:aload_0         
	//    8   14:aload_1         
	//    9   15:checkcast       #98  <Class RecyclerView$SavedState>
	//   10   18:putfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
			super.onRestoreInstanceState(mPendingSavedState.getSuperState());
	//   11   21:aload_0         
	//   12   22:aload_0         
	//   13   23:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   14   26:invokevirtual   #2238 <Method Parcelable RecyclerView$SavedState.getSuperState()>
	//   15   29:invokespecial   #2234 <Method void ViewGroup.onRestoreInstanceState(Parcelable)>
			if(mLayout != null && mPendingSavedState.mLayoutState != null)
	//*  16   32:aload_0         
	//*  17   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  18   36:ifnull          12
	//*  19   39:aload_0         
	//*  20   40:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//*  21   43:getfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//*  22   46:ifnull          12
			{
				mLayout.onRestoreInstanceState(mPendingSavedState.mLayoutState);
	//   23   49:aload_0         
	//   24   50:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   25   53:aload_0         
	//   26   54:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   27   57:getfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
	//   28   60:invokevirtual   #2243 <Method void RecyclerView$LayoutManager.onRestoreInstanceState(Parcelable)>
				return;
	//   29   63:return          
			}
		}
	}

	protected Parcelable onSaveInstanceState()
	{
		SavedState savedstate = new SavedState(super.onSaveInstanceState());
	//    0    0:new             #98  <Class RecyclerView$SavedState>
	//    1    3:dup             
	//    2    4:aload_0         
	//    3    5:invokespecial   #2246 <Method Parcelable ViewGroup.onSaveInstanceState()>
	//    4    8:invokespecial   #2248 <Method void RecyclerView$SavedState(Parcelable)>
	//    5   11:astore_1        
		if(mPendingSavedState != null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//*   8   16:ifnull          29
		{
			savedstate.copyFrom(mPendingSavedState);
	//    9   19:aload_1         
	//   10   20:aload_0         
	//   11   21:getfield        #997 <Field RecyclerView$SavedState mPendingSavedState>
	//   12   24:invokevirtual   #2252 <Method void RecyclerView$SavedState.copyFrom(RecyclerView$SavedState)>
			return ((Parcelable) (savedstate));
	//   13   27:aload_1         
	//   14   28:areturn         
		}
		if(mLayout != null)
	//*  15   29:aload_0         
	//*  16   30:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  17   33:ifnull          49
		{
			savedstate.mLayoutState = mLayout.onSaveInstanceState();
	//   18   36:aload_1         
	//   19   37:aload_0         
	//   20   38:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   21   41:invokevirtual   #2253 <Method Parcelable RecyclerView$LayoutManager.onSaveInstanceState()>
	//   22   44:putfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   23   47:aload_1         
	//   24   48:areturn         
		} else
		{
			savedstate.mLayoutState = null;
	//   25   49:aload_1         
	//   26   50:aconst_null     
	//   27   51:putfield        #2242 <Field Parcelable RecyclerView$SavedState.mLayoutState>
			return ((Parcelable) (savedstate));
	//   28   54:aload_1         
	//   29   55:areturn         
		}
	}

	public void onScrollStateChanged(int i)
	{
	//    0    0:return          
	}

	public void onScrolled(int i, int j)
	{
	//    0    0:return          
	}

	protected void onSizeChanged(int i, int j, int k, int l)
	{
		super.onSizeChanged(i, j, k, l);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:iload_3         
	//    4    4:iload           4
	//    5    6:invokespecial   #2256 <Method void ViewGroup.onSizeChanged(int, int, int, int)>
		if(i != k || j != l)
	//*   6    9:iload_1         
	//*   7   10:iload_3         
	//*   8   11:icmpne          20
	//*   9   14:iload_2         
	//*  10   15:iload           4
	//*  11   17:icmpeq          24
			invalidateGlows();
	//   12   20:aload_0         
	//   13   21:invokevirtual   #2258 <Method void invalidateGlows()>
	//   14   24:return          
	}

	public boolean onTouchEvent(MotionEvent motionevent)
	{
		int i;
		int j;
		int l;
		boolean flag;
		boolean flag1;
		boolean flag2;
		MotionEvent motionevent1;
		if(mLayoutFrozen || mIgnoreMotionEventTillDown)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifne            14
	//*   3    7:aload_0         
	//*   4    8:getfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
	//*   5   11:ifeq            16
			return false;
	//    6   14:iconst_0        
	//    7   15:ireturn         
		if(dispatchOnItemTouch(motionevent))
	//*   8   16:aload_0         
	//*   9   17:aload_1         
	//*  10   18:invokespecial   #2260 <Method boolean dispatchOnItemTouch(MotionEvent)>
	//*  11   21:ifeq            30
		{
			cancelTouch();
	//   12   24:aload_0         
	//   13   25:invokespecial   #2165 <Method void cancelTouch()>
			return true;
	//   14   28:iconst_1        
	//   15   29:ireturn         
		}
		if(mLayout == null)
	//*  16   30:aload_0         
	//*  17   31:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  18   34:ifnonnull       39
			return false;
	//   19   37:iconst_0        
	//   20   38:ireturn         
		flag1 = mLayout.canScrollHorizontally();
	//   21   39:aload_0         
	//   22   40:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   23   43:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   24   46:istore          13
		flag2 = mLayout.canScrollVertically();
	//   25   48:aload_0         
	//   26   49:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   27   52:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   28   55:istore          14
		if(mVelocityTracker == null)
	//*  29   57:aload_0         
	//*  30   58:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//*  31   61:ifnonnull       71
			mVelocityTracker = VelocityTracker.obtain();
	//   32   64:aload_0         
	//   33   65:invokestatic    #2168 <Method VelocityTracker VelocityTracker.obtain()>
	//   34   68:putfield        #1400 <Field VelocityTracker mVelocityTracker>
		flag = false;
	//   35   71:iconst_0        
	//   36   72:istore          10
		motionevent1 = MotionEvent.obtain(motionevent);
	//   37   74:aload_1         
	//   38   75:invokestatic    #2263 <Method MotionEvent MotionEvent.obtain(MotionEvent)>
	//   39   78:astore          15
		l = motionevent.getActionMasked();
	//   40   80:aload_1         
	//   41   81:invokevirtual   #2174 <Method int MotionEvent.getActionMasked()>
	//   42   84:istore          6
		j = motionevent.getActionIndex();
	//   43   86:aload_1         
	//   44   87:invokevirtual   #1274 <Method int MotionEvent.getActionIndex()>
	//   45   90:istore          5
		if(l == 0)
	//*  46   92:iload           6
	//*  47   94:ifne            115
		{
			int ai[] = mNestedOffsets;
	//   48   97:aload_0         
	//   49   98:getfield        #448 <Field int[] mNestedOffsets>
	//   50  101:astore          16
			mNestedOffsets[1] = 0;
	//   51  103:aload_0         
	//   52  104:getfield        #448 <Field int[] mNestedOffsets>
	//   53  107:iconst_1        
	//   54  108:iconst_0        
	//   55  109:iastore         
			ai[0] = 0;
	//   56  110:aload           16
	//   57  112:iconst_0        
	//   58  113:iconst_0        
	//   59  114:iastore         
		}
		motionevent1.offsetLocation(mNestedOffsets[0], mNestedOffsets[1]);
	//   60  115:aload           15
	//   61  117:aload_0         
	//   62  118:getfield        #448 <Field int[] mNestedOffsets>
	//   63  121:iconst_0        
	//   64  122:iaload          
	//   65  123:i2f             
	//   66  124:aload_0         
	//   67  125:getfield        #448 <Field int[] mNestedOffsets>
	//   68  128:iconst_1        
	//   69  129:iaload          
	//   70  130:i2f             
	//   71  131:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
		i = ((int) (flag));
	//   72  134:iload           10
	//   73  136:istore          4
		l;
	//   74  138:iload           6
		JVM INSTR tableswitch 0 6: default 184
	//	               0 209
	//	               1 891
	//	               2 374
	//	               3 999
	//	               4 188
	//	               5 307
	//	               6 879;
	//   75  140:tableswitch     0 6: default 184
	//	               0 209
	//	               1 891
	//	               2 374
	//	               3 999
	//	               4 188
	//	               5 307
	//	               6 879
		   goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8
_L6:
		break; /* Loop/switch isn't completed */
_L1:
		i = ((int) (flag));
	//   76  184:iload           10
	//   77  186:istore          4
_L10:
		if(i == 0)
	//*  78  188:iload           4
	//*  79  190:ifne            202
			mVelocityTracker.addMovement(motionevent1);
	//   80  193:aload_0         
	//   81  194:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//   82  197:aload           15
	//   83  199:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
		motionevent1.recycle();
	//   84  202:aload           15
	//   85  204:invokevirtual   #2267 <Method void MotionEvent.recycle()>
		return true;
	//   86  207:iconst_1        
	//   87  208:ireturn         
_L2:
		mScrollPointerId = motionevent.getPointerId(0);
	//   88  209:aload_0         
	//   89  210:aload_1         
	//   90  211:iconst_0        
	//   91  212:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//   92  215:putfield        #413 <Field int mScrollPointerId>
		i = (int)(motionevent.getX() + 0.5F);
	//   93  218:aload_1         
	//   94  219:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//   95  222:ldc2            #1283 <Float 0.5F>
	//   96  225:fadd            
	//   97  226:f2i             
	//   98  227:istore          4
		mLastTouchX = i;
	//   99  229:aload_0         
	//  100  230:iload           4
	//  101  232:putfield        #1285 <Field int mLastTouchX>
		mInitialTouchX = i;
	//  102  235:aload_0         
	//  103  236:iload           4
	//  104  238:putfield        #1287 <Field int mInitialTouchX>
		i = (int)(motionevent.getY() + 0.5F);
	//  105  241:aload_1         
	//  106  242:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//  107  245:ldc2            #1283 <Float 0.5F>
	//  108  248:fadd            
	//  109  249:f2i             
	//  110  250:istore          4
		mLastTouchY = i;
	//  111  252:aload_0         
	//  112  253:iload           4
	//  113  255:putfield        #1292 <Field int mLastTouchY>
		mInitialTouchY = i;
	//  114  258:aload_0         
	//  115  259:iload           4
	//  116  261:putfield        #1294 <Field int mInitialTouchY>
		i = 0;
	//  117  264:iconst_0        
	//  118  265:istore          4
		if(flag1)
	//* 119  267:iload           13
	//* 120  269:ifeq            277
			i = ((int) (false | true));
	//  121  272:iconst_0        
	//  122  273:iconst_1        
	//  123  274:ior             
	//  124  275:istore          4
		j = i;
	//  125  277:iload           4
	//  126  279:istore          5
		if(flag2)
	//* 127  281:iload           14
	//* 128  283:ifeq            292
			j = i | 2;
	//  129  286:iload           4
	//  130  288:iconst_2        
	//  131  289:ior             
	//  132  290:istore          5
		startNestedScroll(j, 0);
	//  133  292:aload_0         
	//  134  293:iload           5
	//  135  295:iconst_0        
	//  136  296:invokevirtual   #1858 <Method boolean startNestedScroll(int, int)>
	//  137  299:pop             
		i = ((int) (flag));
	//  138  300:iload           10
	//  139  302:istore          4
		continue; /* Loop/switch isn't completed */
	//  140  304:goto            188
_L7:
		mScrollPointerId = motionevent.getPointerId(j);
	//  141  307:aload_0         
	//  142  308:aload_1         
	//  143  309:iload           5
	//  144  311:invokevirtual   #1278 <Method int MotionEvent.getPointerId(int)>
	//  145  314:putfield        #413 <Field int mScrollPointerId>
		i = (int)(motionevent.getX(j) + 0.5F);
	//  146  317:aload_1         
	//  147  318:iload           5
	//  148  320:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//  149  323:ldc2            #1283 <Float 0.5F>
	//  150  326:fadd            
	//  151  327:f2i             
	//  152  328:istore          4
		mLastTouchX = i;
	//  153  330:aload_0         
	//  154  331:iload           4
	//  155  333:putfield        #1285 <Field int mLastTouchX>
		mInitialTouchX = i;
	//  156  336:aload_0         
	//  157  337:iload           4
	//  158  339:putfield        #1287 <Field int mInitialTouchX>
		i = (int)(motionevent.getY(j) + 0.5F);
	//  159  342:aload_1         
	//  160  343:iload           5
	//  161  345:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//  162  348:ldc2            #1283 <Float 0.5F>
	//  163  351:fadd            
	//  164  352:f2i             
	//  165  353:istore          4
		mLastTouchY = i;
	//  166  355:aload_0         
	//  167  356:iload           4
	//  168  358:putfield        #1292 <Field int mLastTouchY>
		mInitialTouchY = i;
	//  169  361:aload_0         
	//  170  362:iload           4
	//  171  364:putfield        #1294 <Field int mInitialTouchY>
		i = ((int) (flag));
	//  172  367:iload           10
	//  173  369:istore          4
		continue; /* Loop/switch isn't completed */
	//  174  371:goto            188
_L4:
		i = motionevent.findPointerIndex(mScrollPointerId);
	//  175  374:aload_1         
	//  176  375:aload_0         
	//  177  376:getfield        #413 <Field int mScrollPointerId>
	//  178  379:invokevirtual   #2189 <Method int MotionEvent.findPointerIndex(int)>
	//  179  382:istore          4
		if(i < 0)
	//* 180  384:iload           4
	//* 181  386:ifge            426
		{
			Log.e("RecyclerView", (new StringBuilder()).append("Error processing scroll; pointer index for id ").append(mScrollPointerId).append(" not found. Did any MotionEvents get skipped?").toString());
	//  182  389:ldc1            #168 <String "RecyclerView">
	//  183  391:new             #796 <Class StringBuilder>
	//  184  394:dup             
	//  185  395:invokespecial   #797 <Method void StringBuilder()>
	//  186  398:ldc2            #2191 <String "Error processing scroll; pointer index for id ">
	//  187  401:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  188  404:aload_0         
	//  189  405:getfield        #413 <Field int mScrollPointerId>
	//  190  408:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//  191  411:ldc2            #2193 <String " not found. Did any MotionEvents get skipped?">
	//  192  414:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//  193  417:invokevirtual   #809 <Method String StringBuilder.toString()>
	//  194  420:invokestatic    #1239 <Method int Log.e(String, String)>
	//  195  423:pop             
			return false;
	//  196  424:iconst_0        
	//  197  425:ireturn         
		}
		int i2 = (int)(motionevent.getX(i) + 0.5F);
	//  198  426:aload_1         
	//  199  427:iload           4
	//  200  429:invokevirtual   #1282 <Method float MotionEvent.getX(int)>
	//  201  432:ldc2            #1283 <Float 0.5F>
	//  202  435:fadd            
	//  203  436:f2i             
	//  204  437:istore          11
		int j2 = (int)(motionevent.getY(i) + 0.5F);
	//  205  439:aload_1         
	//  206  440:iload           4
	//  207  442:invokevirtual   #1290 <Method float MotionEvent.getY(int)>
	//  208  445:ldc2            #1283 <Float 0.5F>
	//  209  448:fadd            
	//  210  449:f2i             
	//  211  450:istore          12
		int j1 = mLastTouchX - i2;
	//  212  452:aload_0         
	//  213  453:getfield        #1285 <Field int mLastTouchX>
	//  214  456:iload           11
	//  215  458:isub            
	//  216  459:istore          7
		int i1 = mLastTouchY - j2;
	//  217  461:aload_0         
	//  218  462:getfield        #1292 <Field int mLastTouchY>
	//  219  465:iload           12
	//  220  467:isub            
	//  221  468:istore          6
		int k = j1;
	//  222  470:iload           7
	//  223  472:istore          5
		i = i1;
	//  224  474:iload           6
	//  225  476:istore          4
		if(dispatchNestedPreScroll(j1, i1, mScrollConsumed, mScrollOffset, 0))
	//* 226  478:aload_0         
	//* 227  479:iload           7
	//* 228  481:iload           6
	//* 229  483:aload_0         
	//* 230  484:getfield        #446 <Field int[] mScrollConsumed>
	//* 231  487:aload_0         
	//* 232  488:getfield        #444 <Field int[] mScrollOffset>
	//* 233  491:iconst_0        
	//* 234  492:invokevirtual   #2268 <Method boolean dispatchNestedPreScroll(int, int, int[], int[], int)>
	//* 235  495:ifeq            575
		{
			k = j1 - mScrollConsumed[0];
	//  236  498:iload           7
	//  237  500:aload_0         
	//  238  501:getfield        #446 <Field int[] mScrollConsumed>
	//  239  504:iconst_0        
	//  240  505:iaload          
	//  241  506:isub            
	//  242  507:istore          5
			i = i1 - mScrollConsumed[1];
	//  243  509:iload           6
	//  244  511:aload_0         
	//  245  512:getfield        #446 <Field int[] mScrollConsumed>
	//  246  515:iconst_1        
	//  247  516:iaload          
	//  248  517:isub            
	//  249  518:istore          4
			motionevent1.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  250  520:aload           15
	//  251  522:aload_0         
	//  252  523:getfield        #444 <Field int[] mScrollOffset>
	//  253  526:iconst_0        
	//  254  527:iaload          
	//  255  528:i2f             
	//  256  529:aload_0         
	//  257  530:getfield        #444 <Field int[] mScrollOffset>
	//  258  533:iconst_1        
	//  259  534:iaload          
	//  260  535:i2f             
	//  261  536:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  262  539:aload_0         
	//  263  540:getfield        #448 <Field int[] mNestedOffsets>
	//  264  543:astore_1        
			motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  265  544:aload_1         
	//  266  545:iconst_0        
	//  267  546:aload_1         
	//  268  547:iconst_0        
	//  269  548:iaload          
	//  270  549:aload_0         
	//  271  550:getfield        #444 <Field int[] mScrollOffset>
	//  272  553:iconst_0        
	//  273  554:iaload          
	//  274  555:iadd            
	//  275  556:iastore         
			motionevent = ((MotionEvent) (mNestedOffsets));
	//  276  557:aload_0         
	//  277  558:getfield        #448 <Field int[] mNestedOffsets>
	//  278  561:astore_1        
			motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  279  562:aload_1         
	//  280  563:iconst_1        
	//  281  564:aload_1         
	//  282  565:iconst_1        
	//  283  566:iaload          
	//  284  567:aload_0         
	//  285  568:getfield        #444 <Field int[] mScrollOffset>
	//  286  571:iconst_1        
	//  287  572:iaload          
	//  288  573:iadd            
	//  289  574:iastore         
		}
		i1 = k;
	//  290  575:iload           5
	//  291  577:istore          6
		j1 = i;
	//  292  579:iload           4
	//  293  581:istore          7
		if(mScrollState != 1)
	//* 294  583:aload_0         
	//* 295  584:getfield        #411 <Field int mScrollState>
	//* 296  587:iconst_1        
	//* 297  588:icmpeq          720
		{
			j1 = 0;
	//  298  591:iconst_0        
	//  299  592:istore          7
			int k1 = k;
	//  300  594:iload           5
	//  301  596:istore          8
			i1 = j1;
	//  302  598:iload           7
	//  303  600:istore          6
			if(flag1)
	//* 304  602:iload           13
	//* 305  604:ifeq            644
			{
				k1 = k;
	//  306  607:iload           5
	//  307  609:istore          8
				i1 = j1;
	//  308  611:iload           7
	//  309  613:istore          6
				if(Math.abs(k) > mTouchSlop)
	//* 310  615:iload           5
	//* 311  617:invokestatic    #1848 <Method int Math.abs(int)>
	//* 312  620:aload_0         
	//* 313  621:getfield        #490 <Field int mTouchSlop>
	//* 314  624:icmple          644
				{
					int l1;
					if(k > 0)
	//* 315  627:iload           5
	//* 316  629:ifle            843
						k1 = k - mTouchSlop;
	//  317  632:iload           5
	//  318  634:aload_0         
	//  319  635:getfield        #490 <Field int mTouchSlop>
	//  320  638:isub            
	//  321  639:istore          8
					else
	//* 322  641:iconst_1        
	//* 323  642:istore          6
	//* 324  644:iload           4
	//* 325  646:istore          5
	//* 326  648:iload           6
	//* 327  650:istore          9
	//* 328  652:iload           14
	//* 329  654:ifeq            694
	//* 330  657:iload           4
	//* 331  659:istore          5
	//* 332  661:iload           6
	//* 333  663:istore          9
	//* 334  665:iload           4
	//* 335  667:invokestatic    #1848 <Method int Math.abs(int)>
	//* 336  670:aload_0         
	//* 337  671:getfield        #490 <Field int mTouchSlop>
	//* 338  674:icmple          694
	//* 339  677:iload           4
	//* 340  679:ifle            855
	//* 341  682:iload           4
	//* 342  684:aload_0         
	//* 343  685:getfield        #490 <Field int mTouchSlop>
	//* 344  688:isub            
	//* 345  689:istore          5
	//* 346  691:iconst_1        
	//* 347  692:istore          9
	//* 348  694:iload           8
	//* 349  696:istore          6
	//* 350  698:iload           5
	//* 351  700:istore          7
	//* 352  702:iload           9
	//* 353  704:ifeq            720
	//* 354  707:aload_0         
	//* 355  708:iconst_1        
	//* 356  709:invokevirtual   #708 <Method void setScrollState(int)>
	//* 357  712:iload           5
	//* 358  714:istore          7
	//* 359  716:iload           8
	//* 360  718:istore          6
	//* 361  720:iload           10
	//* 362  722:istore          4
	//* 363  724:aload_0         
	//* 364  725:getfield        #411 <Field int mScrollState>
	//* 365  728:iconst_1        
	//* 366  729:icmpne          188
	//* 367  732:aload_0         
	//* 368  733:iload           11
	//* 369  735:aload_0         
	//* 370  736:getfield        #444 <Field int[] mScrollOffset>
	//* 371  739:iconst_0        
	//* 372  740:iaload          
	//* 373  741:isub            
	//* 374  742:putfield        #1285 <Field int mLastTouchX>
	//* 375  745:aload_0         
	//* 376  746:iload           12
	//* 377  748:aload_0         
	//* 378  749:getfield        #444 <Field int[] mScrollOffset>
	//* 379  752:iconst_1        
	//* 380  753:iaload          
	//* 381  754:isub            
	//* 382  755:putfield        #1292 <Field int mLastTouchY>
	//* 383  758:iload           13
	//* 384  760:ifeq            867
	//* 385  763:iload           6
	//* 386  765:istore          4
	//* 387  767:iload           14
	//* 388  769:ifeq            873
	//* 389  772:iload           7
	//* 390  774:istore          5
	//* 391  776:aload_0         
	//* 392  777:iload           4
	//* 393  779:iload           5
	//* 394  781:aload           15
	//* 395  783:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//* 396  786:ifeq            799
	//* 397  789:aload_0         
	//* 398  790:invokevirtual   #2181 <Method ViewParent getParent()>
	//* 399  793:iconst_1        
	//* 400  794:invokeinterface #2186 <Method void ViewParent.requestDisallowInterceptTouchEvent(boolean)>
	//* 401  799:iload           10
	//* 402  801:istore          4
	//* 403  803:aload_0         
	//* 404  804:getfield        #2094 <Field GapWorker mGapWorker>
	//* 405  807:ifnull          188
	//* 406  810:iload           6
	//* 407  812:ifne            824
	//* 408  815:iload           10
	//* 409  817:istore          4
	//* 410  819:iload           7
	//* 411  821:ifeq            188
	//* 412  824:aload_0         
	//* 413  825:getfield        #2094 <Field GapWorker mGapWorker>
	//* 414  828:aload_0         
	//* 415  829:iload           6
	//* 416  831:iload           7
	//* 417  833:invokevirtual   #2271 <Method void GapWorker.postFromTraversal(RecyclerView, int, int)>
	//* 418  836:iload           10
	//* 419  838:istore          4
	//* 420  840:goto            188
						k1 = k + mTouchSlop;
	//  421  843:iload           5
	//  422  845:aload_0         
	//  423  846:getfield        #490 <Field int mTouchSlop>
	//  424  849:iadd            
	//  425  850:istore          8
					i1 = 1;
				}
			}
			k = i;
			l1 = i1;
			if(flag2)
			{
				k = i;
				l1 = i1;
				if(Math.abs(i) > mTouchSlop)
				{
					if(i > 0)
						k = i - mTouchSlop;
					else
	//* 426  852:goto            641
						k = i + mTouchSlop;
	//  427  855:iload           4
	//  428  857:aload_0         
	//  429  858:getfield        #490 <Field int mTouchSlop>
	//  430  861:iadd            
	//  431  862:istore          5
					l1 = 1;
				}
			}
			i1 = k1;
			j1 = k;
			if(l1 != 0)
			{
				setScrollState(1);
				j1 = k;
				i1 = k1;
			}
		}
		i = ((int) (flag));
		if(mScrollState != 1)
			continue; /* Loop/switch isn't completed */
		mLastTouchX = i2 - mScrollOffset[0];
		mLastTouchY = j2 - mScrollOffset[1];
		if(flag1)
			i = i1;
		else
	//* 432  864:goto            691
			i = 0;
	//  433  867:iconst_0        
	//  434  868:istore          4
		if(flag2)
			k = j1;
		else
	//* 435  870:goto            767
			k = 0;
	//  436  873:iconst_0        
	//  437  874:istore          5
		if(scrollByInternal(i, k, motionevent1))
			getParent().requestDisallowInterceptTouchEvent(true);
		i = ((int) (flag));
		if(mGapWorker == null)
			continue; /* Loop/switch isn't completed */
		if(i1 == 0)
		{
			i = ((int) (flag));
			if(j1 == 0)
				continue; /* Loop/switch isn't completed */
		}
		mGapWorker.postFromTraversal(this, i1, j1);
		i = ((int) (flag));
		continue; /* Loop/switch isn't completed */
	//  438  876:goto            776
_L8:
		onPointerUp(motionevent);
	//  439  879:aload_0         
	//  440  880:aload_1         
	//  441  881:invokespecial   #2195 <Method void onPointerUp(MotionEvent)>
		i = ((int) (flag));
	//  442  884:iload           10
	//  443  886:istore          4
		continue; /* Loop/switch isn't completed */
	//  444  888:goto            188
_L3:
		mVelocityTracker.addMovement(motionevent1);
	//  445  891:aload_0         
	//  446  892:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//  447  895:aload           15
	//  448  897:invokevirtual   #2171 <Method void VelocityTracker.addMovement(MotionEvent)>
		i = 1;
	//  449  900:iconst_1        
	//  450  901:istore          4
		mVelocityTracker.computeCurrentVelocity(1000, mMaxFlingVelocity);
	//  451  903:aload_0         
	//  452  904:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//  453  907:sipush          1000
	//  454  910:aload_0         
	//  455  911:getfield        #509 <Field int mMaxFlingVelocity>
	//  456  914:i2f             
	//  457  915:invokevirtual   #2275 <Method void VelocityTracker.computeCurrentVelocity(int, float)>
		float f;
		float f1;
		if(flag1)
	//* 458  918:iload           13
	//* 459  920:ifeq            989
			f = -mVelocityTracker.getXVelocity(mScrollPointerId);
	//  460  923:aload_0         
	//  461  924:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//  462  927:aload_0         
	//  463  928:getfield        #413 <Field int mScrollPointerId>
	//  464  931:invokevirtual   #2278 <Method float VelocityTracker.getXVelocity(int)>
	//  465  934:fneg            
	//  466  935:fstore_2        
		else
	//* 467  936:iload           14
	//* 468  938:ifeq            994
	//* 469  941:aload_0         
	//* 470  942:getfield        #1400 <Field VelocityTracker mVelocityTracker>
	//* 471  945:aload_0         
	//* 472  946:getfield        #413 <Field int mScrollPointerId>
	//* 473  949:invokevirtual   #2281 <Method float VelocityTracker.getYVelocity(int)>
	//* 474  952:fneg            
	//* 475  953:fstore_3        
	//* 476  954:fload_2         
	//* 477  955:fconst_0        
	//* 478  956:fcmpl           
	//* 479  957:ifne            966
	//* 480  960:fload_3         
	//* 481  961:fconst_0        
	//* 482  962:fcmpl           
	//* 483  963:ifeq            977
	//* 484  966:aload_0         
	//* 485  967:fload_2         
	//* 486  968:f2i             
	//* 487  969:fload_3         
	//* 488  970:f2i             
	//* 489  971:invokevirtual   #2283 <Method boolean fling(int, int)>
	//* 490  974:ifne            982
	//* 491  977:aload_0         
	//* 492  978:iconst_0        
	//* 493  979:invokevirtual   #708 <Method void setScrollState(int)>
	//* 494  982:aload_0         
	//* 495  983:invokespecial   #705 <Method void resetTouch()>
	//* 496  986:goto            188
			f = 0.0F;
	//  497  989:fconst_0        
	//  498  990:fstore_2        
		if(flag2)
			f1 = -mVelocityTracker.getYVelocity(mScrollPointerId);
		else
	//* 499  991:goto            936
			f1 = 0.0F;
	//  500  994:fconst_0        
	//  501  995:fstore_3        
		if(f == 0.0F && f1 == 0.0F || !fling((int)f, (int)f1))
			setScrollState(0);
		resetTouch();
		continue; /* Loop/switch isn't completed */
	//  502  996:goto            954
_L5:
		cancelTouch();
	//  503  999:aload_0         
	//  504 1000:invokespecial   #2165 <Method void cancelTouch()>
		i = ((int) (flag));
	//  505 1003:iload           10
	//  506 1005:istore          4
		if(true) goto _L10; else goto _L9
	//  507 1007:goto            188
_L9:
	}

	void postAnimationRunner()
	{
		if(!mPostedAnimatorRunner && mIsAttached)
	//*   0    0:aload_0         
	//*   1    1:getfield        #440 <Field boolean mPostedAnimatorRunner>
	//*   2    4:ifne            27
	//*   3    7:aload_0         
	//*   4    8:getfield        #2034 <Field boolean mIsAttached>
	//*   5   11:ifeq            27
		{
			ViewCompat.postOnAnimation(((View) (this)), mItemAnimatorRunner);
	//    6   14:aload_0         
	//    7   15:aload_0         
	//    8   16:getfield        #453 <Field Runnable mItemAnimatorRunner>
	//    9   19:invokestatic    #2287 <Method void ViewCompat.postOnAnimation(View, Runnable)>
			mPostedAnimatorRunner = true;
	//   10   22:aload_0         
	//   11   23:iconst_1        
	//   12   24:putfield        #440 <Field boolean mPostedAnimatorRunner>
		}
	//   13   27:return          
	}

	void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewholder, ItemAnimator.ItemHolderInfo itemholderinfo)
	{
		viewholder.setFlags(0, 8192);
	//    0    0:aload_1         
	//    1    1:iconst_0        
	//    2    2:sipush          8192
	//    3    5:invokevirtual   #2290 <Method void RecyclerView$ViewHolder.setFlags(int, int)>
		if(mState.mTrackOldChangeHolders && viewholder.isUpdated() && !viewholder.isRemoved() && !viewholder.shouldIgnore())
	//*   4    8:aload_0         
	//*   5    9:getfield        #431 <Field RecyclerView$State mState>
	//*   6   12:getfield        #883 <Field boolean RecyclerView$State.mTrackOldChangeHolders>
	//*   7   15:ifeq            54
	//*   8   18:aload_1         
	//*   9   19:invokevirtual   #935 <Method boolean RecyclerView$ViewHolder.isUpdated()>
	//*  10   22:ifeq            54
	//*  11   25:aload_1         
	//*  12   26:invokevirtual   #938 <Method boolean RecyclerView$ViewHolder.isRemoved()>
	//*  13   29:ifne            54
	//*  14   32:aload_1         
	//*  15   33:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  16   36:ifne            54
		{
			long l = getChangedHolderKey(viewholder);
	//   17   39:aload_0         
	//   18   40:aload_1         
	//   19   41:invokevirtual   #942 <Method long getChangedHolderKey(RecyclerView$ViewHolder)>
	//   20   44:lstore_3        
			mViewInfoStore.addToOldChangeHolders(l, viewholder);
	//   21   45:aload_0         
	//   22   46:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   23   49:lload_3         
	//   24   50:aload_1         
	//   25   51:invokevirtual   #946 <Method void ViewInfoStore.addToOldChangeHolders(long, RecyclerView$ViewHolder)>
		}
		mViewInfoStore.addToPreLayout(viewholder, itemholderinfo);
	//   26   54:aload_0         
	//   27   55:getfield        #374 <Field ViewInfoStore mViewInfoStore>
	//   28   58:aload_1         
	//   29   59:aload_2         
	//   30   60:invokevirtual   #932 <Method void ViewInfoStore.addToPreLayout(RecyclerView$ViewHolder, RecyclerView$ItemAnimator$ItemHolderInfo)>
	//   31   63:return          
	}

	void removeAndRecycleViews()
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          14
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
		if(mLayout != null)
	//*   6   14:aload_0         
	//*   7   15:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   8   18:ifnull          43
		{
			mLayout.removeAndRecycleAllViews(mRecycler);
	//    9   21:aload_0         
	//   10   22:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   11   25:aload_0         
	//   12   26:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   13   29:invokevirtual   #2293 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   14   32:aload_0         
	//   15   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   16   36:aload_0         
	//   17   37:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   18   40:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
		}
		mRecycler.clear();
	//   19   43:aload_0         
	//   20   44:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   21   47:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
	//   22   50:return          
	}

	boolean removeAnimatingView(View view)
	{
		eatRequestLayout();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #865 <Method void eatRequestLayout()>
		boolean flag1 = mChildHelper.removeViewIfHidden(view);
	//    2    4:aload_0         
	//    3    5:getfield        #663 <Field ChildHelper mChildHelper>
	//    4    8:aload_1         
	//    5    9:invokevirtual   #2298 <Method boolean ChildHelper.removeViewIfHidden(View)>
	//    6   12:istore_3        
		if(flag1)
	//*   7   13:iload_3         
	//*   8   14:ifeq            38
		{
			view = ((View) (getChildViewHolderInt(view)));
	//    9   17:aload_1         
	//   10   18:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   11   21:astore_1        
			mRecycler.unscrapView(((ViewHolder) (view)));
	//   12   22:aload_0         
	//   13   23:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   14   26:aload_1         
	//   15   27:invokevirtual   #658 <Method void RecyclerView$Recycler.unscrapView(RecyclerView$ViewHolder)>
			mRecycler.recycleViewHolderInternal(((ViewHolder) (view)));
	//   16   30:aload_0         
	//   17   31:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   18   34:aload_1         
	//   19   35:invokevirtual   #2301 <Method void RecyclerView$Recycler.recycleViewHolderInternal(RecyclerView$ViewHolder)>
		}
		boolean flag;
		if(!flag1)
	//*  20   38:iload_3         
	//*  21   39:ifne            51
			flag = true;
	//   22   42:iconst_1        
	//   23   43:istore_2        
		else
	//*  24   44:aload_0         
	//*  25   45:iload_2         
	//*  26   46:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
	//*  27   49:iload_3         
	//*  28   50:ireturn         
			flag = false;
	//   29   51:iconst_0        
	//   30   52:istore_2        
		resumeRequestLayout(flag);
		return flag1;
	//*  31   53:goto            44
	}

	protected void removeDetachedView(View view, boolean flag)
	{
		ViewHolder viewholder = getChildViewHolderInt(view);
	//    0    0:aload_1         
	//    1    1:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//    2    4:astore_3        
		if(viewholder != null)
	//*   3    5:aload_3         
	//*   4    6:ifnull          20
			if(viewholder.isTmpDetached())
	//*   5    9:aload_3         
	//*   6   10:invokevirtual   #661 <Method boolean RecyclerView$ViewHolder.isTmpDetached()>
	//*   7   13:ifeq            36
				viewholder.clearTmpDetachFlag();
	//    8   16:aload_3         
	//    9   17:invokevirtual   #2305 <Method void RecyclerView$ViewHolder.clearTmpDetachFlag()>
			else
	//*  10   20:aload_1         
	//*  11   21:invokevirtual   #2308 <Method void View.clearAnimation()>
	//*  12   24:aload_0         
	//*  13   25:aload_1         
	//*  14   26:invokevirtual   #2310 <Method void dispatchChildDetached(View)>
	//*  15   29:aload_0         
	//*  16   30:aload_1         
	//*  17   31:iload_2         
	//*  18   32:invokespecial   #2312 <Method void ViewGroup.removeDetachedView(View, boolean)>
	//*  19   35:return          
			if(!viewholder.shouldIgnore())
	//*  20   36:aload_3         
	//*  21   37:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  22   40:ifne            20
				throw new IllegalArgumentException((new StringBuilder()).append("Called removeDetachedView with a view which is not flagged as tmp detached.").append(((Object) (viewholder))).append(exceptionLabel()).toString());
	//   23   43:new             #1263 <Class IllegalArgumentException>
	//   24   46:dup             
	//   25   47:new             #796 <Class StringBuilder>
	//   26   50:dup             
	//   27   51:invokespecial   #797 <Method void StringBuilder()>
	//   28   54:ldc2            #2314 <String "Called removeDetachedView with a view which is not flagged as tmp detached.">
	//   29   57:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   30   60:aload_3         
	//   31   61:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//   32   64:aload_0         
	//   33   65:invokevirtual   #1224 <Method String exceptionLabel()>
	//   34   68:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   35   71:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   36   74:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//   37   77:athrow          
		view.clearAnimation();
		dispatchChildDetached(view);
		super.removeDetachedView(view, flag);
	}

	public void removeItemDecoration(ItemDecoration itemdecoration)
	{
		if(mLayout != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnull          17
			mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or layout");
	//    3    7:aload_0         
	//    4    8:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    5   11:ldc2            #2317 <String "Cannot remove item decoration during a scroll  or layout">
	//    6   14:invokevirtual   #1482 <Method void RecyclerView$LayoutManager.assertNotInLayoutOrScroll(String)>
		mItemDecorations.remove(((Object) (itemdecoration)));
	//    7   17:aload_0         
	//    8   18:getfield        #394 <Field ArrayList mItemDecorations>
	//    9   21:aload_1         
	//   10   22:invokevirtual   #2319 <Method boolean ArrayList.remove(Object)>
	//   11   25:pop             
		if(mItemDecorations.isEmpty())
	//*  12   26:aload_0         
	//*  13   27:getfield        #394 <Field ArrayList mItemDecorations>
	//*  14   30:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  15   33:ifeq            51
		{
			boolean flag;
			if(getOverScrollMode() == 2)
	//*  16   36:aload_0         
	//*  17   37:invokevirtual   #512 <Method int getOverScrollMode()>
	//*  18   40:iconst_2        
	//*  19   41:icmpne          60
				flag = true;
	//   20   44:iconst_1        
	//   21   45:istore_2        
			else
	//*  22   46:aload_0         
	//*  23   47:iload_2         
	//*  24   48:invokevirtual   #515 <Method void setWillNotDraw(boolean)>
	//*  25   51:aload_0         
	//*  26   52:invokevirtual   #1490 <Method void markItemDecorInsetsDirty()>
	//*  27   55:aload_0         
	//*  28   56:invokevirtual   #1493 <Method void requestLayout()>
	//*  29   59:return          
				flag = false;
	//   30   60:iconst_0        
	//   31   61:istore_2        
			setWillNotDraw(flag);
		}
		markItemDecorInsetsDirty();
		requestLayout();
	//*  32   62:goto            46
	}

	public void removeOnChildAttachStateChangeListener(OnChildAttachStateChangeListener onchildattachstatechangelistener)
	{
		if(mOnChildAttachStateListeners == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//*   2    4:ifnonnull       8
		{
			return;
	//    3    7:return          
		} else
		{
			mOnChildAttachStateListeners.remove(((Object) (onchildattachstatechangelistener)));
	//    4    8:aload_0         
	//    5    9:getfield        #1500 <Field List mOnChildAttachStateListeners>
	//    6   12:aload_1         
	//    7   13:invokeinterface #2321 <Method boolean List.remove(Object)>
	//    8   18:pop             
			return;
	//    9   19:return          
		}
	}

	public void removeOnItemTouchListener(OnItemTouchListener onitemtouchlistener)
	{
		mOnItemTouchListeners.remove(((Object) (onitemtouchlistener)));
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2319 <Method boolean ArrayList.remove(Object)>
	//    4    8:pop             
		if(mActiveOnItemTouchListener == onitemtouchlistener)
	//*   5    9:aload_0         
	//*   6   10:getfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//*   7   13:aload_1         
	//*   8   14:if_acmpne       22
			mActiveOnItemTouchListener = null;
	//    9   17:aload_0         
	//   10   18:aconst_null     
	//   11   19:putfield        #1075 <Field RecyclerView$OnItemTouchListener mActiveOnItemTouchListener>
	//   12   22:return          
	}

	public void removeOnScrollListener(OnScrollListener onscrolllistener)
	{
		if(mScrollListeners != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1509 <Field List mScrollListeners>
	//*   2    4:ifnull          18
			mScrollListeners.remove(((Object) (onscrolllistener)));
	//    3    7:aload_0         
	//    4    8:getfield        #1509 <Field List mScrollListeners>
	//    5   11:aload_1         
	//    6   12:invokeinterface #2321 <Method boolean List.remove(Object)>
	//    7   17:pop             
	//    8   18:return          
	}

	void repositionShadowingViews()
	{
		int j = mChildHelper.getChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #900 <Method int ChildHelper.getChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          118
		{
			View view = mChildHelper.getChildAt(i);
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #904 <Method View ChildHelper.getChildAt(int)>
	//   13   23:astore          5
			Object obj = ((Object) (getChildViewHolder(view)));
	//   14   25:aload_0         
	//   15   26:aload           5
	//   16   28:invokevirtual   #655 <Method RecyclerView$ViewHolder getChildViewHolder(View)>
	//   17   31:astore          6
			if(obj == null || ((ViewHolder) (obj)).mShadowingHolder == null)
				continue;
	//   18   33:aload           6
	//   19   35:ifnull          111
	//   20   38:aload           6
	//   21   40:getfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   22   43:ifnull          111
			obj = ((Object) (((ViewHolder) (obj)).mShadowingHolder.itemView));
	//   23   46:aload           6
	//   24   48:getfield        #695 <Field RecyclerView$ViewHolder RecyclerView$ViewHolder.mShadowingHolder>
	//   25   51:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   26   54:astore          6
			int k = view.getLeft();
	//   27   56:aload           5
	//   28   58:invokevirtual   #1131 <Method int View.getLeft()>
	//   29   61:istore_3        
			int l = view.getTop();
	//   30   62:aload           5
	//   31   64:invokevirtual   #1140 <Method int View.getTop()>
	//   32   67:istore          4
			if(k != ((View) (obj)).getLeft() || l != ((View) (obj)).getTop())
	//*  33   69:iload_3         
	//*  34   70:aload           6
	//*  35   72:invokevirtual   #1131 <Method int View.getLeft()>
	//*  36   75:icmpne          88
	//*  37   78:iload           4
	//*  38   80:aload           6
	//*  39   82:invokevirtual   #1140 <Method int View.getTop()>
	//*  40   85:icmpeq          111
				((View) (obj)).layout(k, l, ((View) (obj)).getWidth() + k, ((View) (obj)).getHeight() + l);
	//   41   88:aload           6
	//   42   90:iload_3         
	//   43   91:iload           4
	//   44   93:aload           6
	//   45   95:invokevirtual   #1255 <Method int View.getWidth()>
	//   46   98:iload_3         
	//   47   99:iadd            
	//   48  100:aload           6
	//   49  102:invokevirtual   #1258 <Method int View.getHeight()>
	//   50  105:iload           4
	//   51  107:iadd            
	//   52  108:invokevirtual   #2327 <Method void View.layout(int, int, int, int)>
		}

	//   53  111:iload_1         
	//   54  112:iconst_1        
	//   55  113:iadd            
	//   56  114:istore_1        
	//*  57  115:goto            10
	//   58  118:return          
	}

	public void requestChildFocus(View view, View view1)
	{
		if(!mLayout.onRequestChildFocus(this, mState, view, view1) && view1 != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:aload_0         
	//*   3    5:aload_0         
	//*   4    6:getfield        #431 <Field RecyclerView$State mState>
	//*   5    9:aload_1         
	//*   6   10:aload_2         
	//*   7   11:invokevirtual   #2332 <Method boolean RecyclerView$LayoutManager.onRequestChildFocus(RecyclerView, RecyclerView$State, View, View)>
	//*   8   14:ifne            27
	//*   9   17:aload_2         
	//*  10   18:ifnull          27
			requestChildOnScreen(view, view1);
	//   11   21:aload_0         
	//   12   22:aload_1         
	//   13   23:aload_2         
	//   14   24:invokespecial   #1888 <Method void requestChildOnScreen(View, View)>
		super.requestChildFocus(view, view1);
	//   15   27:aload_0         
	//   16   28:aload_1         
	//   17   29:aload_2         
	//   18   30:invokespecial   #2334 <Method void ViewGroup.requestChildFocus(View, View)>
	//   19   33:return          
	}

	public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean flag)
	{
		return mLayout.requestChildRectangleOnScreen(this, view, rect, flag);
	//    0    0:aload_0         
	//    1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//    2    4:aload_0         
	//    3    5:aload_1         
	//    4    6:aload_2         
	//    5    7:iload_3         
	//    6    8:invokevirtual   #2338 <Method boolean RecyclerView$LayoutManager.requestChildRectangleOnScreen(RecyclerView, View, Rect, boolean)>
	//    7   11:ireturn         
	}

	public void requestDisallowInterceptTouchEvent(boolean flag)
	{
		int j = mOnItemTouchListeners.size();
	//    0    0:aload_0         
	//    1    1:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//    2    4:invokevirtual   #1078 <Method int ArrayList.size()>
	//    3    7:istore_3        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_2        
	//*   6   10:iload_2         
	//*   7   11:iload_3         
	//*   8   12:icmpge          39
			((OnItemTouchListener)mOnItemTouchListeners.get(i)).onRequestDisallowInterceptTouchEvent(flag);
	//    9   15:aload_0         
	//   10   16:getfield        #396 <Field ArrayList mOnItemTouchListeners>
	//   11   19:iload_2         
	//   12   20:invokevirtual   #1081 <Method Object ArrayList.get(int)>
	//   13   23:checkcast       #77  <Class RecyclerView$OnItemTouchListener>
	//   14   26:iload_1         
	//   15   27:invokeinterface #2341 <Method void RecyclerView$OnItemTouchListener.onRequestDisallowInterceptTouchEvent(boolean)>

	//   16   32:iload_2         
	//   17   33:iconst_1        
	//   18   34:iadd            
	//   19   35:istore_2        
	//*  20   36:goto            10
		super.requestDisallowInterceptTouchEvent(flag);
	//   21   39:aload_0         
	//   22   40:iload_1         
	//   23   41:invokespecial   #2342 <Method void ViewGroup.requestDisallowInterceptTouchEvent(boolean)>
	//   24   44:return          
	}

	public void requestLayout()
	{
		if(mEatRequestLayout == 0 && !mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #398 <Field int mEatRequestLayout>
	//*   2    4:ifne            19
	//*   3    7:aload_0         
	//*   4    8:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   5   11:ifne            19
		{
			super.requestLayout();
	//    6   14:aload_0         
	//    7   15:invokespecial   #2343 <Method void ViewGroup.requestLayout()>
			return;
	//    8   18:return          
		} else
		{
			mLayoutRequestEaten = true;
	//    9   19:aload_0         
	//   10   20:iconst_1        
	//   11   21:putfield        #1601 <Field boolean mLayoutRequestEaten>
			return;
	//   12   24:return          
		}
	}

	void resumeRequestLayout(boolean flag)
	{
		if(mEatRequestLayout < 1)
	//*   0    0:aload_0         
	//*   1    1:getfield        #398 <Field int mEatRequestLayout>
	//*   2    4:iconst_1        
	//*   3    5:icmpge          13
			mEatRequestLayout = 1;
	//    4    8:aload_0         
	//    5    9:iconst_1        
	//    6   10:putfield        #398 <Field int mEatRequestLayout>
		if(!flag)
	//*   7   13:iload_1         
	//*   8   14:ifne            22
			mLayoutRequestEaten = false;
	//    9   17:aload_0         
	//   10   18:iconst_0        
	//   11   19:putfield        #1601 <Field boolean mLayoutRequestEaten>
		if(mEatRequestLayout == 1)
	//*  12   22:aload_0         
	//*  13   23:getfield        #398 <Field int mEatRequestLayout>
	//*  14   26:iconst_1        
	//*  15   27:icmpne          78
		{
			if(flag && mLayoutRequestEaten && !mLayoutFrozen && mLayout != null && mAdapter != null)
	//*  16   30:iload_1         
	//*  17   31:ifeq            66
	//*  18   34:aload_0         
	//*  19   35:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  20   38:ifeq            66
	//*  21   41:aload_0         
	//*  22   42:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  23   45:ifne            66
	//*  24   48:aload_0         
	//*  25   49:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  26   52:ifnull          66
	//*  27   55:aload_0         
	//*  28   56:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  29   59:ifnull          66
				dispatchLayout();
	//   30   62:aload_0         
	//   31   63:invokevirtual   #1590 <Method void dispatchLayout()>
			if(!mLayoutFrozen)
	//*  32   66:aload_0         
	//*  33   67:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  34   70:ifne            78
				mLayoutRequestEaten = false;
	//   35   73:aload_0         
	//   36   74:iconst_0        
	//   37   75:putfield        #1601 <Field boolean mLayoutRequestEaten>
		}
		mEatRequestLayout = mEatRequestLayout - 1;
	//   38   78:aload_0         
	//   39   79:aload_0         
	//   40   80:getfield        #398 <Field int mEatRequestLayout>
	//   41   83:iconst_1        
	//   42   84:isub            
	//   43   85:putfield        #398 <Field int mEatRequestLayout>
	//   44   88:return          
	}

	void saveOldPositions()
	{
		int j = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore_2        
		for(int i = 0; i < j; i++)
	//*   4    8:iconst_0        
	//*   5    9:istore_1        
	//*   6   10:iload_1         
	//*   7   11:iload_2         
	//*   8   12:icmpge          45
		{
			ViewHolder viewholder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));
	//    9   15:aload_0         
	//   10   16:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   19:iload_1         
	//   12   20:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   23:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   14   26:astore_3        
			if(!viewholder.shouldIgnore())
	//*  15   27:aload_3         
	//*  16   28:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  17   31:ifne            38
				viewholder.saveOldPosition();
	//   18   34:aload_3         
	//   19   35:invokevirtual   #2346 <Method void RecyclerView$ViewHolder.saveOldPosition()>
		}

	//   20   38:iload_1         
	//   21   39:iconst_1        
	//   22   40:iadd            
	//   23   41:istore_1        
	//*  24   42:goto            10
	//   25   45:return          
	}

	public void scrollBy(int i, int j)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
			Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #2349 <String "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
		else
	//*   7   16:return          
		if(!mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  10   21:ifne            16
		{
			boolean flag = mLayout.canScrollHorizontally();
	//   11   24:aload_0         
	//   12   25:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   13   28:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//   14   31:istore_3        
			boolean flag1 = mLayout.canScrollVertically();
	//   15   32:aload_0         
	//   16   33:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   17   36:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//   18   39:istore          4
			if(flag || flag1)
	//*  19   41:iload_3         
	//*  20   42:ifne            50
	//*  21   45:iload           4
	//*  22   47:ifeq            16
			{
				if(!flag)
	//*  23   50:iload_3         
	//*  24   51:ifeq            68
	//*  25   54:iload           4
	//*  26   56:ifeq            73
	//*  27   59:aload_0         
	//*  28   60:iload_1         
	//*  29   61:iload_2         
	//*  30   62:aconst_null     
	//*  31   63:invokevirtual   #2160 <Method boolean scrollByInternal(int, int, MotionEvent)>
	//*  32   66:pop             
	//*  33   67:return          
					i = 0;
	//   34   68:iconst_0        
	//   35   69:istore_1        
				if(!flag1)
	//*  36   70:goto            54
					j = 0;
	//   37   73:iconst_0        
	//   38   74:istore_2        
				scrollByInternal(i, j, ((MotionEvent) (null)));
				return;
			}
		}
	//*  39   75:goto            59
	}

	boolean scrollByInternal(int i, int j, MotionEvent motionevent)
	{
		int k;
		int l;
		int i1;
		int j1;
		boolean flag4;
		flag4 = false;
	//    0    0:iconst_0        
	//    1    1:istore          12
		l = 0;
	//    2    3:iconst_0        
	//    3    4:istore          5
		boolean flag2 = false;
	//    4    6:iconst_0        
	//    5    7:istore          10
		j1 = 0;
	//    6    9:iconst_0        
	//    7   10:istore          7
		boolean flag = false;
	//    8   12:iconst_0        
	//    9   13:istore          8
		k = 0;
	//   10   15:iconst_0        
	//   11   16:istore          4
		boolean flag3 = false;
	//   12   18:iconst_0        
	//   13   19:istore          11
		i1 = 0;
	//   14   21:iconst_0        
	//   15   22:istore          6
		boolean flag1 = false;
	//   16   24:iconst_0        
	//   17   25:istore          9
		consumePendingUpdateOperations();
	//   18   27:aload_0         
	//   19   28:invokevirtual   #1880 <Method void consumePendingUpdateOperations()>
		if(mAdapter != null)
	//*  20   31:aload_0         
	//*  21   32:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  22   35:ifnull          147
		{
			eatRequestLayout();
	//   23   38:aload_0         
	//   24   39:invokevirtual   #865 <Method void eatRequestLayout()>
			onEnterLayoutOrScroll();
	//   25   42:aload_0         
	//   26   43:invokevirtual   #871 <Method void onEnterLayoutOrScroll()>
			TraceCompat.beginSection("RV Scroll");
	//   27   46:ldc1            #194 <String "RV Scroll">
	//   28   48:invokestatic    #1587 <Method void TraceCompat.beginSection(String)>
			fillRemainingScrollValues(mState);
	//   29   51:aload_0         
	//   30   52:aload_0         
	//   31   53:getfield        #431 <Field RecyclerView$State mState>
	//   32   56:invokevirtual   #859 <Method void fillRemainingScrollValues(RecyclerView$State)>
			k = ((int) (flag3));
	//   33   59:iload           11
	//   34   61:istore          4
			l = ((int) (flag2));
	//   35   63:iload           10
	//   36   65:istore          5
			if(i != 0)
	//*  37   67:iload_1         
	//*  38   68:ifeq            95
			{
				k = mLayout.scrollHorizontallyBy(i, mRecycler, mState);
	//   39   71:aload_0         
	//   40   72:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   41   75:iload_1         
	//   42   76:aload_0         
	//   43   77:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   44   80:aload_0         
	//   45   81:getfield        #431 <Field RecyclerView$State mState>
	//   46   84:invokevirtual   #2353 <Method int RecyclerView$LayoutManager.scrollHorizontallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   47   87:istore          4
				l = i - k;
	//   48   89:iload_1         
	//   49   90:iload           4
	//   50   92:isub            
	//   51   93:istore          5
			}
			i1 = ((int) (flag1));
	//   52   95:iload           9
	//   53   97:istore          6
			j1 = ((int) (flag));
	//   54   99:iload           8
	//   55  101:istore          7
			if(j != 0)
	//*  56  103:iload_2         
	//*  57  104:ifeq            131
			{
				i1 = mLayout.scrollVerticallyBy(j, mRecycler, mState);
	//   58  107:aload_0         
	//   59  108:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   60  111:iload_2         
	//   61  112:aload_0         
	//   62  113:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   63  116:aload_0         
	//   64  117:getfield        #431 <Field RecyclerView$State mState>
	//   65  120:invokevirtual   #2356 <Method int RecyclerView$LayoutManager.scrollVerticallyBy(int, RecyclerView$Recycler, RecyclerView$State)>
	//   66  123:istore          6
				j1 = j - i1;
	//   67  125:iload_2         
	//   68  126:iload           6
	//   69  128:isub            
	//   70  129:istore          7
			}
			TraceCompat.endSection();
	//   71  131:invokestatic    #1593 <Method void TraceCompat.endSection()>
			repositionShadowingViews();
	//   72  134:aload_0         
	//   73  135:invokevirtual   #2358 <Method void repositionShadowingViews()>
			onExitLayoutOrScroll();
	//   74  138:aload_0         
	//   75  139:invokevirtual   #978 <Method void onExitLayoutOrScroll()>
			resumeRequestLayout(false);
	//   76  142:aload_0         
	//   77  143:iconst_0        
	//   78  144:invokevirtual   #981 <Method void resumeRequestLayout(boolean)>
		}
		if(!mItemDecorations.isEmpty())
	//*  79  147:aload_0         
	//*  80  148:getfield        #394 <Field ArrayList mItemDecorations>
	//*  81  151:invokevirtual   #1483 <Method boolean ArrayList.isEmpty()>
	//*  82  154:ifne            161
			invalidate();
	//   83  157:aload_0         
	//   84  158:invokevirtual   #2361 <Method void invalidate()>
		if(!dispatchNestedScroll(k, i1, l, j1, mScrollOffset, 0)) goto _L2; else goto _L1
	//   85  161:aload_0         
	//   86  162:iload           4
	//   87  164:iload           6
	//   88  166:iload           5
	//   89  168:iload           7
	//   90  170:aload_0         
	//   91  171:getfield        #444 <Field int[] mScrollOffset>
	//   92  174:iconst_0        
	//   93  175:invokevirtual   #2362 <Method boolean dispatchNestedScroll(int, int, int, int, int[], int)>
	//   94  178:ifeq            314
_L1:
		mLastTouchX = mLastTouchX - mScrollOffset[0];
	//   95  181:aload_0         
	//   96  182:aload_0         
	//   97  183:getfield        #1285 <Field int mLastTouchX>
	//   98  186:aload_0         
	//   99  187:getfield        #444 <Field int[] mScrollOffset>
	//  100  190:iconst_0        
	//  101  191:iaload          
	//  102  192:isub            
	//  103  193:putfield        #1285 <Field int mLastTouchX>
		mLastTouchY = mLastTouchY - mScrollOffset[1];
	//  104  196:aload_0         
	//  105  197:aload_0         
	//  106  198:getfield        #1292 <Field int mLastTouchY>
	//  107  201:aload_0         
	//  108  202:getfield        #444 <Field int[] mScrollOffset>
	//  109  205:iconst_1        
	//  110  206:iaload          
	//  111  207:isub            
	//  112  208:putfield        #1292 <Field int mLastTouchY>
		if(motionevent != null)
	//* 113  211:aload_3         
	//* 114  212:ifnull          233
			motionevent.offsetLocation(mScrollOffset[0], mScrollOffset[1]);
	//  115  215:aload_3         
	//  116  216:aload_0         
	//  117  217:getfield        #444 <Field int[] mScrollOffset>
	//  118  220:iconst_0        
	//  119  221:iaload          
	//  120  222:i2f             
	//  121  223:aload_0         
	//  122  224:getfield        #444 <Field int[] mScrollOffset>
	//  123  227:iconst_1        
	//  124  228:iaload          
	//  125  229:i2f             
	//  126  230:invokevirtual   #2266 <Method void MotionEvent.offsetLocation(float, float)>
		motionevent = ((MotionEvent) (mNestedOffsets));
	//  127  233:aload_0         
	//  128  234:getfield        #448 <Field int[] mNestedOffsets>
	//  129  237:astore_3        
		motionevent[0] = motionevent[0] + mScrollOffset[0];
	//  130  238:aload_3         
	//  131  239:iconst_0        
	//  132  240:aload_3         
	//  133  241:iconst_0        
	//  134  242:iaload          
	//  135  243:aload_0         
	//  136  244:getfield        #444 <Field int[] mScrollOffset>
	//  137  247:iconst_0        
	//  138  248:iaload          
	//  139  249:iadd            
	//  140  250:iastore         
		motionevent = ((MotionEvent) (mNestedOffsets));
	//  141  251:aload_0         
	//  142  252:getfield        #448 <Field int[] mNestedOffsets>
	//  143  255:astore_3        
		motionevent[1] = motionevent[1] + mScrollOffset[1];
	//  144  256:aload_3         
	//  145  257:iconst_1        
	//  146  258:aload_3         
	//  147  259:iconst_1        
	//  148  260:iaload          
	//  149  261:aload_0         
	//  150  262:getfield        #444 <Field int[] mScrollOffset>
	//  151  265:iconst_1        
	//  152  266:iaload          
	//  153  267:iadd            
	//  154  268:iastore         
_L4:
		if(k != 0 || i1 != 0)
	//* 155  269:iload           4
	//* 156  271:ifne            279
	//* 157  274:iload           6
	//* 158  276:ifeq            287
			dispatchOnScrolled(k, i1);
	//  159  279:aload_0         
	//  160  280:iload           4
	//  161  282:iload           6
	//  162  284:invokevirtual   #1060 <Method void dispatchOnScrolled(int, int)>
		if(!awakenScrollBars())
	//* 163  287:aload_0         
	//* 164  288:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//* 165  291:ifne            298
			invalidate();
	//  166  294:aload_0         
	//  167  295:invokevirtual   #2361 <Method void invalidate()>
		if(k != 0 || i1 != 0)
	//* 168  298:iload           4
	//* 169  300:ifne            308
	//* 170  303:iload           6
	//* 171  305:ifeq            311
			flag4 = true;
	//  172  308:iconst_1        
	//  173  309:istore          12
		return flag4;
	//  174  311:iload           12
	//  175  313:ireturn         
_L2:
		if(getOverScrollMode() != 2)
	//* 176  314:aload_0         
	//* 177  315:invokevirtual   #512 <Method int getOverScrollMode()>
	//* 178  318:iconst_2        
	//* 179  319:icmpeq          269
		{
			if(motionevent != null && !MotionEventCompat.isFromSource(motionevent, 8194))
	//* 180  322:aload_3         
	//* 181  323:ifnull          354
	//* 182  326:aload_3         
	//* 183  327:sipush          8194
	//* 184  330:invokestatic    #2368 <Method boolean MotionEventCompat.isFromSource(MotionEvent, int)>
	//* 185  333:ifne            354
				pullGlows(motionevent.getX(), l, motionevent.getY(), j1);
	//  186  336:aload_0         
	//  187  337:aload_3         
	//  188  338:invokevirtual   #2178 <Method float MotionEvent.getX()>
	//  189  341:iload           5
	//  190  343:i2f             
	//  191  344:aload_3         
	//  192  345:invokevirtual   #2180 <Method float MotionEvent.getY()>
	//  193  348:iload           7
	//  194  350:i2f             
	//  195  351:invokespecial   #2370 <Method void pullGlows(float, float, float, float)>
			considerReleasingGlowsOnScroll(i, j);
	//  196  354:aload_0         
	//  197  355:iload_1         
	//  198  356:iload_2         
	//  199  357:invokevirtual   #2372 <Method void considerReleasingGlowsOnScroll(int, int)>
		}
		if(true) goto _L4; else goto _L3
	//  200  360:goto            269
_L3:
	}

	public void scrollTo(int i, int j)
	{
		Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
	//    0    0:ldc1            #168 <String "RecyclerView">
	//    1    2:ldc2            #2375 <String "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead">
	//    2    5:invokestatic    #2377 <Method int Log.w(String, String)>
	//    3    8:pop             
	//    4    9:return          
	}

	public void scrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		stopScroll();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2124 <Method void stopScroll()>
		if(mLayout == null)
	//*   6   12:aload_0         
	//*   7   13:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   8   16:ifnonnull       29
		{
			Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    9   19:ldc1            #168 <String "RecyclerView">
	//   10   21:ldc2            #2379 <String "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//   11   24:invokestatic    #1239 <Method int Log.e(String, String)>
	//   12   27:pop             
			return;
	//   13   28:return          
		} else
		{
			mLayout.scrollToPosition(i);
	//   14   29:aload_0         
	//   15   30:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   16   33:iload_1         
	//   17   34:invokevirtual   #2042 <Method void RecyclerView$LayoutManager.scrollToPosition(int)>
			awakenScrollBars();
	//   18   37:aload_0         
	//   19   38:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//   20   41:pop             
			return;
	//   21   42:return          
		}
	}

	public void sendAccessibilityEventUnchecked(AccessibilityEvent accessibilityevent)
	{
		if(shouldDeferAccessibilityEvent(accessibilityevent))
	//*   0    0:aload_0         
	//*   1    1:aload_1         
	//*   2    2:invokevirtual   #2383 <Method boolean shouldDeferAccessibilityEvent(AccessibilityEvent)>
	//*   3    5:ifeq            9
		{
			return;
	//    4    8:return          
		} else
		{
			super.sendAccessibilityEventUnchecked(accessibilityevent);
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:invokespecial   #2384 <Method void ViewGroup.sendAccessibilityEventUnchecked(AccessibilityEvent)>
			return;
	//    8   14:return          
		}
	}

	public void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate recyclerviewaccessibilitydelegate)
	{
		mAccessibilityDelegate = recyclerviewaccessibilitydelegate;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
		ViewCompat.setAccessibilityDelegate(((View) (this)), ((android.support.v4.view.AccessibilityDelegateCompat) (mAccessibilityDelegate)));
	//    3    5:aload_0         
	//    4    6:aload_0         
	//    5    7:getfield        #1941 <Field RecyclerViewAccessibilityDelegate mAccessibilityDelegate>
	//    6   10:invokestatic    #2388 <Method void ViewCompat.setAccessibilityDelegate(View, android.support.v4.view.AccessibilityDelegateCompat)>
	//    7   13:return          
	}

	public void setAdapter(Adapter adapter)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2393 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, false, true);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_0        
	//    6    8:iconst_1        
	//    7    9:invokespecial   #2395 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		requestLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1493 <Method void requestLayout()>
	//   10   16:return          
	}

	public void setChildDrawingOrderCallback(ChildDrawingOrderCallback childdrawingordercallback)
	{
		if(childdrawingordercallback == mChildDrawingOrderCallback)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		mChildDrawingOrderCallback = childdrawingordercallback;
	//    5    9:aload_0         
	//    6   10:aload_1         
	//    7   11:putfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
		boolean flag;
		if(mChildDrawingOrderCallback != null)
	//*   8   14:aload_0         
	//*   9   15:getfield        #1921 <Field RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback>
	//*  10   18:ifnull          29
			flag = true;
	//   11   21:iconst_1        
	//   12   22:istore_2        
		else
	//*  13   23:aload_0         
	//*  14   24:iload_2         
	//*  15   25:invokevirtual   #2400 <Method void setChildrenDrawingOrderEnabled(boolean)>
	//*  16   28:return          
			flag = false;
	//   17   29:iconst_0        
	//   18   30:istore_2        
		setChildrenDrawingOrderEnabled(flag);
	//*  19   31:goto            23
	}

	boolean setChildImportantForAccessibilityInternal(ViewHolder viewholder, int i)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            25
		{
			viewholder.mPendingAccessibilityState = i;
	//    3    7:aload_1         
	//    4    8:iload_2         
	//    5    9:putfield        #1720 <Field int RecyclerView$ViewHolder.mPendingAccessibilityState>
			mPendingAccessibilityImportanceChange.add(((Object) (viewholder)));
	//    6   12:aload_0         
	//    7   13:getfield        #450 <Field List mPendingAccessibilityImportanceChange>
	//    8   16:aload_1         
	//    9   17:invokeinterface #1503 <Method boolean List.add(Object)>
	//   10   22:pop             
			return false;
	//   11   23:iconst_0        
	//   12   24:ireturn         
		} else
		{
			ViewCompat.setImportantForAccessibility(viewholder.itemView, i);
	//   13   25:aload_1         
	//   14   26:getfield        #645 <Field View RecyclerView$ViewHolder.itemView>
	//   15   29:iload_2         
	//   16   30:invokestatic    #535 <Method void ViewCompat.setImportantForAccessibility(View, int)>
			return true;
	//   17   33:iconst_1        
	//   18   34:ireturn         
		}
	}

	public void setClipToPadding(boolean flag)
	{
		if(flag != mClipToPadding)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #468 <Field boolean mClipToPadding>
	//*   3    5:icmpeq          12
			invalidateGlows();
	//    4    8:aload_0         
	//    5    9:invokevirtual   #2258 <Method void invalidateGlows()>
		mClipToPadding = flag;
	//    6   12:aload_0         
	//    7   13:iload_1         
	//    8   14:putfield        #468 <Field boolean mClipToPadding>
		super.setClipToPadding(flag);
	//    9   17:aload_0         
	//   10   18:iload_1         
	//   11   19:invokespecial   #2405 <Method void ViewGroup.setClipToPadding(boolean)>
		if(mFirstLayoutComplete)
	//*  12   22:aload_0         
	//*  13   23:getfield        #1311 <Field boolean mFirstLayoutComplete>
	//*  14   26:ifeq            33
			requestLayout();
	//   15   29:aload_0         
	//   16   30:invokevirtual   #1493 <Method void requestLayout()>
	//   17   33:return          
	}

	void setDataSetChangedAfterLayout()
	{
		mDataSetHasChangedAfterLayout = true;
	//    0    0:aload_0         
	//    1    1:iconst_1        
	//    2    2:putfield        #400 <Field boolean mDataSetHasChangedAfterLayout>
		markKnownViewsInvalid();
	//    3    5:aload_0         
	//    4    6:invokevirtual   #2406 <Method void markKnownViewsInvalid()>
	//    5    9:return          
	}

	public void setHasFixedSize(boolean flag)
	{
		mHasFixedSize = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #1983 <Field boolean mHasFixedSize>
	//    3    5:return          
	}

	public void setItemAnimator(ItemAnimator itemanimator)
	{
		if(mItemAnimator != null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*   2    4:ifnull          22
		{
			mItemAnimator.endAnimations();
	//    3    7:aload_0         
	//    4    8:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    5   11:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mItemAnimator.setListener(((ItemAnimator.ItemAnimatorListener) (null)));
	//    6   14:aload_0         
	//    7   15:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//    8   18:aconst_null     
	//    9   19:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
		}
		mItemAnimator = itemanimator;
	//   10   22:aload_0         
	//   11   23:aload_1         
	//   12   24:putfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
		if(mItemAnimator != null)
	//*  13   27:aload_0         
	//*  14   28:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  15   31:ifnull          45
			mItemAnimator.setListener(mItemAnimatorListener);
	//   16   34:aload_0         
	//   17   35:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   18   38:aload_0         
	//   19   39:getfield        #438 <Field RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener>
	//   20   42:invokevirtual   #519 <Method void RecyclerView$ItemAnimator.setListener(RecyclerView$ItemAnimator$ItemAnimatorListener)>
	//   21   45:return          
	}

	public void setItemViewCacheSize(int i)
	{
		mRecycler.setViewCacheSize(i);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2413 <Method void RecyclerView$Recycler.setViewCacheSize(int)>
	//    4    8:return          
	}

	public void setLayoutFrozen(boolean flag)
	{
label0:
		{
			if(flag != mLayoutFrozen)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   3    5:icmpeq          54
			{
				assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
	//    4    8:aload_0         
	//    5    9:ldc2            #2415 <String "Do not setLayoutFrozen in layout or scroll">
	//    6   12:invokevirtual   #2416 <Method void assertNotInLayoutOrScroll(String)>
				if(flag)
					break label0;
	//    7   15:iload_1         
	//    8   16:ifne            55
				mLayoutFrozen = false;
	//    9   19:aload_0         
	//   10   20:iconst_0        
	//   11   21:putfield        #1769 <Field boolean mLayoutFrozen>
				if(mLayoutRequestEaten && mLayout != null && mAdapter != null)
	//*  12   24:aload_0         
	//*  13   25:getfield        #1601 <Field boolean mLayoutRequestEaten>
	//*  14   28:ifeq            49
	//*  15   31:aload_0         
	//*  16   32:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  17   35:ifnull          49
	//*  18   38:aload_0         
	//*  19   39:getfield        #891 <Field RecyclerView$Adapter mAdapter>
	//*  20   42:ifnull          49
					requestLayout();
	//   21   45:aload_0         
	//   22   46:invokevirtual   #1493 <Method void requestLayout()>
				mLayoutRequestEaten = false;
	//   23   49:aload_0         
	//   24   50:iconst_0        
	//   25   51:putfield        #1601 <Field boolean mLayoutRequestEaten>
			}
			return;
	//   26   54:return          
		}
		long l = SystemClock.uptimeMillis();
	//   27   55:invokestatic    #2421 <Method long SystemClock.uptimeMillis()>
	//   28   58:lstore_2        
		onTouchEvent(MotionEvent.obtain(l, l, 3, 0.0F, 0.0F, 0));
	//   29   59:aload_0         
	//   30   60:lload_2         
	//   31   61:lload_2         
	//   32   62:iconst_3        
	//   33   63:fconst_0        
	//   34   64:fconst_0        
	//   35   65:iconst_0        
	//   36   66:invokestatic    #2424 <Method MotionEvent MotionEvent.obtain(long, long, int, float, float, int)>
	//   37   69:invokevirtual   #2426 <Method boolean onTouchEvent(MotionEvent)>
	//   38   72:pop             
		mLayoutFrozen = true;
	//   39   73:aload_0         
	//   40   74:iconst_1        
	//   41   75:putfield        #1769 <Field boolean mLayoutFrozen>
		mIgnoreMotionEventTillDown = true;
	//   42   78:aload_0         
	//   43   79:iconst_1        
	//   44   80:putfield        #2176 <Field boolean mIgnoreMotionEventTillDown>
		stopScroll();
	//   45   83:aload_0         
	//   46   84:invokevirtual   #2124 <Method void stopScroll()>
	//   47   87:return          
	}

	public void setLayoutManager(LayoutManager layoutmanager)
	{
		if(layoutmanager == mLayout)
	//*   0    0:aload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   3    5:if_acmpne       9
			return;
	//    4    8:return          
		stopScroll();
	//    5    9:aload_0         
	//    6   10:invokevirtual   #2124 <Method void stopScroll()>
		if(mLayout != null)
	//*   7   13:aload_0         
	//*   8   14:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   9   17:ifnull          162
		{
			if(mItemAnimator != null)
	//*  10   20:aload_0         
	//*  11   21:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//*  12   24:ifnull          34
				mItemAnimator.endAnimations();
	//   13   27:aload_0         
	//   14   28:getfield        #409 <Field RecyclerView$ItemAnimator mItemAnimator>
	//   15   31:invokevirtual   #2121 <Method void RecyclerView$ItemAnimator.endAnimations()>
			mLayout.removeAndRecycleAllViews(mRecycler);
	//   16   34:aload_0         
	//   17   35:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   18   38:aload_0         
	//   19   39:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   20   42:invokevirtual   #2293 <Method void RecyclerView$LayoutManager.removeAndRecycleAllViews(RecyclerView$Recycler)>
			mLayout.removeAndRecycleScrapInt(mRecycler);
	//   21   45:aload_0         
	//   22   46:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   23   49:aload_0         
	//   24   50:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   25   53:invokevirtual   #1033 <Method void RecyclerView$LayoutManager.removeAndRecycleScrapInt(RecyclerView$Recycler)>
			mRecycler.clear();
	//   26   56:aload_0         
	//   27   57:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   28   60:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
			if(mIsAttached)
	//*  29   63:aload_0         
	//*  30   64:getfield        #2034 <Field boolean mIsAttached>
	//*  31   67:ifeq            82
				mLayout.dispatchDetachedFromWindow(this, mRecycler);
	//   32   70:aload_0         
	//   33   71:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   34   74:aload_0         
	//   35   75:aload_0         
	//   36   76:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   37   79:invokevirtual   #2128 <Method void RecyclerView$LayoutManager.dispatchDetachedFromWindow(RecyclerView, RecyclerView$Recycler)>
			mLayout.setRecyclerView(((RecyclerView) (null)));
	//   38   82:aload_0         
	//   39   83:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   40   86:aconst_null     
	//   41   87:invokevirtual   #2429 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			mLayout = null;
	//   42   90:aload_0         
	//   43   91:aconst_null     
	//   44   92:putfield        #954 <Field RecyclerView$LayoutManager mLayout>
		} else
	//*  45   95:aload_0         
	//*  46   96:getfield        #663 <Field ChildHelper mChildHelper>
	//*  47   99:invokevirtual   #2432 <Method void ChildHelper.removeAllViewsUnfiltered()>
	//*  48  102:aload_0         
	//*  49  103:aload_1         
	//*  50  104:putfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  51  107:aload_1         
	//*  52  108:ifnull          195
	//*  53  111:aload_1         
	//*  54  112:getfield        #2436 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  55  115:ifnull          172
	//*  56  118:new             #1263 <Class IllegalArgumentException>
	//*  57  121:dup             
	//*  58  122:new             #796 <Class StringBuilder>
	//*  59  125:dup             
	//*  60  126:invokespecial   #797 <Method void StringBuilder()>
	//*  61  129:ldc2            #2438 <String "LayoutManager ">
	//*  62  132:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  63  135:aload_1         
	//*  64  136:invokevirtual   #1219 <Method StringBuilder StringBuilder.append(Object)>
	//*  65  139:ldc2            #2440 <String " is already attached to a RecyclerView:">
	//*  66  142:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  67  145:aload_1         
	//*  68  146:getfield        #2436 <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
	//*  69  149:invokevirtual   #1224 <Method String exceptionLabel()>
	//*  70  152:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//*  71  155:invokevirtual   #809 <Method String StringBuilder.toString()>
	//*  72  158:invokespecial   #1269 <Method void IllegalArgumentException(String)>
	//*  73  161:athrow          
		{
			mRecycler.clear();
	//   74  162:aload_0         
	//   75  163:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   76  166:invokevirtual   #2294 <Method void RecyclerView$Recycler.clear()>
		}
		mChildHelper.removeAllViewsUnfiltered();
		mLayout = layoutmanager;
		if(layoutmanager != null)
		{
			if(layoutmanager.mRecyclerView != null)
				throw new IllegalArgumentException((new StringBuilder()).append("LayoutManager ").append(((Object) (layoutmanager))).append(" is already attached to a RecyclerView:").append(layoutmanager.mRecyclerView.exceptionLabel()).toString());
	//*  77  169:goto            95
			mLayout.setRecyclerView(this);
	//   78  172:aload_0         
	//   79  173:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   80  176:aload_0         
	//   81  177:invokevirtual   #2429 <Method void RecyclerView$LayoutManager.setRecyclerView(RecyclerView)>
			if(mIsAttached)
	//*  82  180:aload_0         
	//*  83  181:getfield        #2034 <Field boolean mIsAttached>
	//*  84  184:ifeq            195
				mLayout.dispatchAttachedToWindow(this);
	//   85  187:aload_0         
	//   86  188:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   87  191:aload_0         
	//   88  192:invokevirtual   #2083 <Method void RecyclerView$LayoutManager.dispatchAttachedToWindow(RecyclerView)>
		}
		mRecycler.updateViewCacheSize();
	//   89  195:aload_0         
	//   90  196:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   91  199:invokevirtual   #1052 <Method void RecyclerView$Recycler.updateViewCacheSize()>
		requestLayout();
	//   92  202:aload_0         
	//   93  203:invokevirtual   #1493 <Method void requestLayout()>
	//   94  206:return          
	}

	public void setNestedScrollingEnabled(boolean flag)
	{
		getScrollingChildHelper().setNestedScrollingEnabled(flag);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2441 <Method void NestedScrollingChildHelper.setNestedScrollingEnabled(boolean)>
	//    4    8:return          
	}

	public void setOnFlingListener(OnFlingListener onflinglistener)
	{
		mOnFlingListener = onflinglistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1852 <Field RecyclerView$OnFlingListener mOnFlingListener>
	//    3    5:return          
	}

	public void setOnScrollListener(OnScrollListener onscrolllistener)
	{
		mScrollListener = onscrolllistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #1700 <Field RecyclerView$OnScrollListener mScrollListener>
	//    3    5:return          
	}

	public void setPreserveFocusAfterLayout(boolean flag)
	{
		mPreserveFocusAfterLayout = flag;
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:putfield        #420 <Field boolean mPreserveFocusAfterLayout>
	//    3    5:return          
	}

	public void setRecycledViewPool(RecycledViewPool recycledviewpool)
	{
		mRecycler.setRecycledViewPool(recycledviewpool);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2449 <Method void RecyclerView$Recycler.setRecycledViewPool(RecyclerView$RecycledViewPool)>
	//    4    8:return          
	}

	public void setRecyclerListener(RecyclerListener recyclerlistener)
	{
		mRecyclerListener = recyclerlistener;
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:putfield        #2453 <Field RecyclerView$RecyclerListener mRecyclerListener>
	//    3    5:return          
	}

	void setScrollState(int i)
	{
		if(i == mScrollState)
	//*   0    0:iload_1         
	//*   1    1:aload_0         
	//*   2    2:getfield        #411 <Field int mScrollState>
	//*   3    5:icmpne          9
			return;
	//    4    8:return          
		mScrollState = i;
	//    5    9:aload_0         
	//    6   10:iload_1         
	//    7   11:putfield        #411 <Field int mScrollState>
		if(i != 2)
	//*   8   14:iload_1         
	//*   9   15:iconst_2        
	//*  10   16:icmpeq          23
			stopScrollersInternal();
	//   11   19:aload_0         
	//   12   20:invokespecial   #2455 <Method void stopScrollersInternal()>
		dispatchOnScrollStateChanged(i);
	//   13   23:aload_0         
	//   14   24:iload_1         
	//   15   25:invokevirtual   #2457 <Method void dispatchOnScrollStateChanged(int)>
	//   16   28:return          
	}

	public void setScrollingTouchSlop(int i)
	{
		ViewConfiguration viewconfiguration = ViewConfiguration.get(getContext());
	//    0    0:aload_0         
	//    1    1:invokevirtual   #539 <Method Context getContext()>
	//    2    4:invokestatic    #484 <Method ViewConfiguration ViewConfiguration.get(Context)>
	//    3    7:astore_2        
		switch(i)
	//*   4    8:iload_1         
		{
	//*   5    9:tableswitch     0 1: default 32
	//	               0 64
	//	               1 73
		default:
			Log.w("RecyclerView", (new StringBuilder()).append("setScrollingTouchSlop(): bad argument constant ").append(i).append("; using default value").toString());
	//    6   32:ldc1            #168 <String "RecyclerView">
	//    7   34:new             #796 <Class StringBuilder>
	//    8   37:dup             
	//    9   38:invokespecial   #797 <Method void StringBuilder()>
	//   10   41:ldc2            #2460 <String "setScrollingTouchSlop(): bad argument constant ">
	//   11   44:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   12   47:iload_1         
	//   13   48:invokevirtual   #1268 <Method StringBuilder StringBuilder.append(int)>
	//   14   51:ldc2            #2462 <String "; using default value">
	//   15   54:invokevirtual   #804 <Method StringBuilder StringBuilder.append(String)>
	//   16   57:invokevirtual   #809 <Method String StringBuilder.toString()>
	//   17   60:invokestatic    #2377 <Method int Log.w(String, String)>
	//   18   63:pop             
			// fall through

		case 0: // '\0'
			mTouchSlop = viewconfiguration.getScaledTouchSlop();
	//   19   64:aload_0         
	//   20   65:aload_2         
	//   21   66:invokevirtual   #488 <Method int ViewConfiguration.getScaledTouchSlop()>
	//   22   69:putfield        #490 <Field int mTouchSlop>
			return;
	//   23   72:return          

		case 1: // '\001'
			mTouchSlop = viewconfiguration.getScaledPagingTouchSlop();
	//   24   73:aload_0         
	//   25   74:aload_2         
	//   26   75:invokevirtual   #2465 <Method int ViewConfiguration.getScaledPagingTouchSlop()>
	//   27   78:putfield        #490 <Field int mTouchSlop>
			break;
		}
	//   28   81:return          
	}

	public void setViewCacheExtension(ViewCacheExtension viewcacheextension)
	{
		mRecycler.setViewCacheExtension(viewcacheextension);
	//    0    0:aload_0         
	//    1    1:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//    2    4:aload_1         
	//    3    5:invokevirtual   #2469 <Method void RecyclerView$Recycler.setViewCacheExtension(RecyclerView$ViewCacheExtension)>
	//    4    8:return          
	}

	boolean shouldDeferAccessibilityEvent(AccessibilityEvent accessibilityevent)
	{
		if(isComputingLayout())
	//*   0    0:aload_0         
	//*   1    1:invokevirtual   #1521 <Method boolean isComputingLayout()>
	//*   2    4:ifeq            38
		{
			int i = 0;
	//    3    7:iconst_0        
	//    4    8:istore_2        
			if(accessibilityevent != null)
	//*   5    9:aload_1         
	//*   6   10:ifnull          18
				i = AccessibilityEventCompat.getContentChangeTypes(accessibilityevent);
	//    7   13:aload_1         
	//    8   14:invokestatic    #2473 <Method int AccessibilityEventCompat.getContentChangeTypes(AccessibilityEvent)>
	//    9   17:istore_2        
			int j = i;
	//   10   18:iload_2         
	//   11   19:istore_3        
			if(i == 0)
	//*  12   20:iload_2         
	//*  13   21:ifne            26
				j = 0;
	//   14   24:iconst_0        
	//   15   25:istore_3        
			mEatenAccessibilityChangeFlags = mEatenAccessibilityChangeFlags | j;
	//   16   26:aload_0         
	//   17   27:aload_0         
	//   18   28:getfield        #829 <Field int mEatenAccessibilityChangeFlags>
	//   19   31:iload_3         
	//   20   32:ior             
	//   21   33:putfield        #829 <Field int mEatenAccessibilityChangeFlags>
			return true;
	//   22   36:iconst_1        
	//   23   37:ireturn         
		} else
		{
			return false;
	//   24   38:iconst_0        
	//   25   39:ireturn         
		}
	}

	public void smoothScrollBy(int i, int j)
	{
		smoothScrollBy(i, j, ((Interpolator) (null)));
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:aconst_null     
	//    4    4:invokevirtual   #2477 <Method void smoothScrollBy(int, int, Interpolator)>
	//    5    7:return          
	}

	public void smoothScrollBy(int i, int j, Interpolator interpolator)
	{
		if(mLayout == null)
	//*   0    0:aload_0         
	//*   1    1:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   2    4:ifnonnull       17
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    3    7:ldc1            #168 <String "RecyclerView">
	//    4    9:ldc2            #2479 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    5   12:invokestatic    #1239 <Method int Log.e(String, String)>
	//    6   15:pop             
		else
	//*   7   16:return          
		if(!mLayoutFrozen)
	//*   8   17:aload_0         
	//*   9   18:getfield        #1769 <Field boolean mLayoutFrozen>
	//*  10   21:ifne            16
		{
			if(!mLayout.canScrollHorizontally())
	//*  11   24:aload_0         
	//*  12   25:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  13   28:invokevirtual   #1559 <Method boolean RecyclerView$LayoutManager.canScrollHorizontally()>
	//*  14   31:ifne            36
				i = 0;
	//   15   34:iconst_0        
	//   16   35:istore_1        
			if(!mLayout.canScrollVertically())
	//*  17   36:aload_0         
	//*  18   37:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*  19   40:invokevirtual   #1572 <Method boolean RecyclerView$LayoutManager.canScrollVertically()>
	//*  20   43:ifne            48
				j = 0;
	//   21   46:iconst_0        
	//   22   47:istore_2        
			if(i != 0 || j != 0)
	//*  23   48:iload_1         
	//*  24   49:ifne            56
	//*  25   52:iload_2         
	//*  26   53:ifeq            16
			{
				mViewFlinger.smoothScrollBy(i, j, interpolator);
	//   27   56:aload_0         
	//   28   57:getfield        #423 <Field RecyclerView$ViewFlinger mViewFlinger>
	//   29   60:iload_1         
	//   30   61:iload_2         
	//   31   62:aload_3         
	//   32   63:invokevirtual   #2480 <Method void RecyclerView$ViewFlinger.smoothScrollBy(int, int, Interpolator)>
				return;
	//   33   66:return          
			}
		}
	}

	public void smoothScrollToPosition(int i)
	{
		if(mLayoutFrozen)
	//*   0    0:aload_0         
	//*   1    1:getfield        #1769 <Field boolean mLayoutFrozen>
	//*   2    4:ifeq            8
			return;
	//    3    7:return          
		if(mLayout == null)
	//*   4    8:aload_0         
	//*   5    9:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//*   6   12:ifnonnull       25
		{
			Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
	//    7   15:ldc1            #168 <String "RecyclerView">
	//    8   17:ldc2            #2479 <String "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.">
	//    9   20:invokestatic    #1239 <Method int Log.e(String, String)>
	//   10   23:pop             
			return;
	//   11   24:return          
		} else
		{
			mLayout.smoothScrollToPosition(this, mState, i);
	//   12   25:aload_0         
	//   13   26:getfield        #954 <Field RecyclerView$LayoutManager mLayout>
	//   14   29:aload_0         
	//   15   30:aload_0         
	//   16   31:getfield        #431 <Field RecyclerView$State mState>
	//   17   34:iload_1         
	//   18   35:invokevirtual   #2484 <Method void RecyclerView$LayoutManager.smoothScrollToPosition(RecyclerView, RecyclerView$State, int)>
			return;
	//   19   38:return          
		}
	}

	public boolean startNestedScroll(int i)
	{
		return getScrollingChildHelper().startNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2486 <Method boolean NestedScrollingChildHelper.startNestedScroll(int)>
	//    4    8:ireturn         
	}

	public boolean startNestedScroll(int i, int j)
	{
		return getScrollingChildHelper().startNestedScroll(i, j);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:iload_2         
	//    4    6:invokevirtual   #2487 <Method boolean NestedScrollingChildHelper.startNestedScroll(int, int)>
	//    5    9:ireturn         
	}

	public void stopNestedScroll()
	{
		getScrollingChildHelper().stopNestedScroll();
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:invokevirtual   #2489 <Method void NestedScrollingChildHelper.stopNestedScroll()>
	//    3    7:return          
	}

	public void stopNestedScroll(int i)
	{
		getScrollingChildHelper().stopNestedScroll(i);
	//    0    0:aload_0         
	//    1    1:invokespecial   #1673 <Method NestedScrollingChildHelper getScrollingChildHelper()>
	//    2    4:iload_1         
	//    3    5:invokevirtual   #2490 <Method void NestedScrollingChildHelper.stopNestedScroll(int)>
	//    4    8:return          
	}

	public void stopScroll()
	{
		setScrollState(0);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #708 <Method void setScrollState(int)>
		stopScrollersInternal();
	//    3    5:aload_0         
	//    4    6:invokespecial   #2455 <Method void stopScrollersInternal()>
	//    5    9:return          
	}

	public void swapAdapter(Adapter adapter, boolean flag)
	{
		setLayoutFrozen(false);
	//    0    0:aload_0         
	//    1    1:iconst_0        
	//    2    2:invokevirtual   #2393 <Method void setLayoutFrozen(boolean)>
		setAdapterInternal(adapter, true, flag);
	//    3    5:aload_0         
	//    4    6:aload_1         
	//    5    7:iconst_1        
	//    6    8:iload_2         
	//    7    9:invokespecial   #2395 <Method void setAdapterInternal(RecyclerView$Adapter, boolean, boolean)>
		requestLayout();
	//    8   12:aload_0         
	//    9   13:invokevirtual   #1493 <Method void requestLayout()>
	//   10   16:return          
	}

	void viewRangeUpdate(int i, int j, Object obj)
	{
		int l = mChildHelper.getUnfilteredChildCount();
	//    0    0:aload_0         
	//    1    1:getfield        #663 <Field ChildHelper mChildHelper>
	//    2    4:invokevirtual   #1545 <Method int ChildHelper.getUnfilteredChildCount()>
	//    3    7:istore          5
		int k = 0;
	//    4    9:iconst_0        
	//    5   10:istore          4
		do
		{
			if(k >= l)
				break;
	//    6   12:iload           4
	//    7   14:iload           5
	//    8   16:icmpge          106
			View view = mChildHelper.getUnfilteredChildAt(k);
	//    9   19:aload_0         
	//   10   20:getfield        #663 <Field ChildHelper mChildHelper>
	//   11   23:iload           4
	//   12   25:invokevirtual   #1548 <Method View ChildHelper.getUnfilteredChildAt(int)>
	//   13   28:astore          6
			ViewHolder viewholder = getChildViewHolderInt(view);
	//   14   30:aload           6
	//   15   32:invokestatic    #907 <Method RecyclerView$ViewHolder getChildViewHolderInt(View)>
	//   16   35:astore          7
			if(viewholder != null && !viewholder.shouldIgnore() && viewholder.mPosition >= i && viewholder.mPosition < i + j)
	//*  17   37:aload           7
	//*  18   39:ifnull          50
	//*  19   42:aload           7
	//*  20   44:invokevirtual   #910 <Method boolean RecyclerView$ViewHolder.shouldIgnore()>
	//*  21   47:ifeq            59
	//*  22   50:iload           4
	//*  23   52:iconst_1        
	//*  24   53:iadd            
	//*  25   54:istore          4
	//*  26   56:goto            12
	//*  27   59:aload           7
	//*  28   61:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  29   64:iload_1         
	//*  30   65:icmplt          50
	//*  31   68:aload           7
	//*  32   70:getfield        #1842 <Field int RecyclerView$ViewHolder.mPosition>
	//*  33   73:iload_1         
	//*  34   74:iload_2         
	//*  35   75:iadd            
	//*  36   76:icmpge          50
			{
				viewholder.addFlags(2);
	//   37   79:aload           7
	//   38   81:iconst_2        
	//   39   82:invokevirtual   #2047 <Method void RecyclerView$ViewHolder.addFlags(int)>
				viewholder.addChangePayload(obj);
	//   40   85:aload           7
	//   41   87:aload_3         
	//   42   88:invokevirtual   #2497 <Method void RecyclerView$ViewHolder.addChangePayload(Object)>
				((LayoutParams)view.getLayoutParams()).mInsetsDirty = true;
	//   43   91:aload           6
	//   44   93:invokevirtual   #667 <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
	//   45   96:checkcast       #68  <Class RecyclerView$LayoutParams>
	//   46   99:iconst_1        
	//   47  100:putfield        #1391 <Field boolean RecyclerView$LayoutParams.mInsetsDirty>
			}
			k++;
		} while(true);
	//*  48  103:goto            50
		mRecycler.viewRangeUpdate(i, j);
	//   49  106:aload_0         
	//   50  107:getfield        #369 <Field RecyclerView$Recycler mRecycler>
	//   51  110:iload_1         
	//   52  111:iload_2         
	//   53  112:invokevirtual   #2499 <Method void RecyclerView$Recycler.viewRangeUpdate(int, int)>
	//   54  115:return          
	}

	static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC;
	private static final boolean ALLOW_THREAD_GAP_WORK;
	private static final int CLIP_TO_PADDING_ATTR[] = {
		0x10100eb
	};
	static final boolean DEBUG = false;
	static final boolean DISPATCH_TEMP_DETACH = false;
	private static final boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION;
	static final boolean FORCE_INVALIDATE_DISPLAY_LIST;
	static final long FOREVER_NS = 0xffffffffL;
	public static final int HORIZONTAL = 0;
	private static final boolean IGNORE_DETACHED_FOCUSED_CHILD;
	private static final int INVALID_POINTER = -1;
	public static final int INVALID_TYPE = -1;
	private static final Class LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE[];
	static final int MAX_SCROLL_DURATION = 2000;
	private static final int NESTED_SCROLLING_ATTRS[] = {
		0x1010436
	};
	public static final long NO_ID = -1L;
	public static final int NO_POSITION = -1;
	static final boolean POST_UPDATES_ON_ANIMATION;
	public static final int SCROLL_STATE_DRAGGING = 1;
	public static final int SCROLL_STATE_IDLE = 0;
	public static final int SCROLL_STATE_SETTLING = 2;
	static final String TAG = "RecyclerView";
	public static final int TOUCH_SLOP_DEFAULT = 0;
	public static final int TOUCH_SLOP_PAGING = 1;
	static final String TRACE_BIND_VIEW_TAG = "RV OnBindView";
	static final String TRACE_CREATE_VIEW_TAG = "RV CreateView";
	private static final String TRACE_HANDLE_ADAPTER_UPDATES_TAG = "RV PartialInvalidate";
	static final String TRACE_NESTED_PREFETCH_TAG = "RV Nested Prefetch";
	private static final String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = "RV FullInvalidate";
	private static final String TRACE_ON_LAYOUT_TAG = "RV OnLayout";
	static final String TRACE_PREFETCH_TAG = "RV Prefetch";
	static final String TRACE_SCROLL_TAG = "RV Scroll";
	static final boolean VERBOSE_TRACING = false;
	public static final int VERTICAL = 1;
	static final Interpolator sQuinticInterpolator = new Interpolator() {

		public float getInterpolation(float f)
		{
			f--;
		//    0    0:fload_1         
		//    1    1:fconst_1        
		//    2    2:fsub            
		//    3    3:fstore_1        
			return f * f * f * f * f + 1.0F;
		//    4    4:fload_1         
		//    5    5:fload_1         
		//    6    6:fmul            
		//    7    7:fload_1         
		//    8    8:fmul            
		//    9    9:fload_1         
		//   10   10:fmul            
		//   11   11:fload_1         
		//   12   12:fmul            
		//   13   13:fconst_1        
		//   14   14:fadd            
		//   15   15:freturn         
		}

	}
;
	RecyclerViewAccessibilityDelegate mAccessibilityDelegate;
	private final AccessibilityManager mAccessibilityManager;
	private OnItemTouchListener mActiveOnItemTouchListener;
	Adapter mAdapter;
	AdapterHelper mAdapterHelper;
	boolean mAdapterUpdateDuringMeasure;
	private EdgeEffect mBottomGlow;
	private ChildDrawingOrderCallback mChildDrawingOrderCallback;
	ChildHelper mChildHelper;
	boolean mClipToPadding;
	boolean mDataSetHasChangedAfterLayout;
	private int mDispatchScrollCounter;
	private int mEatRequestLayout;
	private int mEatenAccessibilityChangeFlags;
	boolean mEnableFastScroller;
	boolean mFirstLayoutComplete;
	GapWorker mGapWorker;
	boolean mHasFixedSize;
	private boolean mIgnoreMotionEventTillDown;
	private int mInitialTouchX;
	private int mInitialTouchY;
	boolean mIsAttached;
	ItemAnimator mItemAnimator;
	private ItemAnimator.ItemAnimatorListener mItemAnimatorListener;
	private Runnable mItemAnimatorRunner = new Runnable() {

		public void run()
		{
			if(mItemAnimator != null)
		//*   0    0:aload_0         
		//*   1    1:getfield        #14  <Field RecyclerView this$0>
		//*   2    4:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//*   3    7:ifnull          20
				mItemAnimator.runPendingAnimations();
		//    4   10:aload_0         
		//    5   11:getfield        #14  <Field RecyclerView this$0>
		//    6   14:getfield        #23  <Field RecyclerView$ItemAnimator RecyclerView.mItemAnimator>
		//    7   17:invokevirtual   #28  <Method void RecyclerView$ItemAnimator.runPendingAnimations()>
			mPostedAnimatorRunner = false;
		//    8   20:aload_0         
		//    9   21:getfield        #14  <Field RecyclerView this$0>
		//   10   24:iconst_0        
		//   11   25:putfield        #32  <Field boolean RecyclerView.mPostedAnimatorRunner>
		//   12   28:return          
		}

		final RecyclerView this$0;

			
			{
				this$0 = RecyclerView.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #14  <Field RecyclerView this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #17  <Method void Object()>
			//    5    9:return          
			}
	}
;
	final ArrayList mItemDecorations;
	boolean mItemsAddedOrRemoved;
	boolean mItemsChanged;
	private int mLastTouchX;
	private int mLastTouchY;
	LayoutManager mLayout;
	boolean mLayoutFrozen;
	private int mLayoutOrScrollCounter;
	boolean mLayoutRequestEaten;
	private EdgeEffect mLeftGlow;
	private final int mMaxFlingVelocity;
	private final int mMinFlingVelocity;
	private final int mMinMaxLayoutPositions[];
	private final int mNestedOffsets[];
	private final RecyclerViewDataObserver mObserver;
	private List mOnChildAttachStateListeners;
	private OnFlingListener mOnFlingListener;
	private final ArrayList mOnItemTouchListeners;
	final List mPendingAccessibilityImportanceChange;
	private SavedState mPendingSavedState;
	boolean mPostedAnimatorRunner;
	GapWorker.LayoutPrefetchRegistryImpl mPrefetchRegistry;
	private boolean mPreserveFocusAfterLayout;
	final Recycler mRecycler;
	RecyclerListener mRecyclerListener;
	private EdgeEffect mRightGlow;
	private float mScaledHorizontalScrollFactor;
	private float mScaledVerticalScrollFactor;
	private final int mScrollConsumed[];
	private OnScrollListener mScrollListener;
	private List mScrollListeners;
	private final int mScrollOffset[];
	private int mScrollPointerId;
	private int mScrollState;
	private NestedScrollingChildHelper mScrollingChildHelper;
	final State mState;
	final Rect mTempRect;
	private final Rect mTempRect2;
	final RectF mTempRectF;
	private EdgeEffect mTopGlow;
	private int mTouchSlop;
	final Runnable mUpdateChildViewsRunnable;
	private VelocityTracker mVelocityTracker;
	final ViewFlinger mViewFlinger;
	private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback;
	final ViewInfoStore mViewInfoStore;

	static 
	{
	//    0    0:iconst_1        
	//    1    1:newarray        int[]
	//    2    3:dup             
	//    3    4:iconst_0        
	//    4    5:ldc2            #309 <Int 0x1010436>
	//    5    8:iastore         
	//    6    9:putstatic       #311 <Field int[] NESTED_SCROLLING_ATTRS>
	//    7   12:iconst_1        
	//    8   13:newarray        int[]
	//    9   15:dup             
	//   10   16:iconst_0        
	//   11   17:ldc2            #312 <Int 0x10100eb>
	//   12   20:iastore         
	//   13   21:putstatic       #314 <Field int[] CLIP_TO_PADDING_ATTR>
		boolean flag;
		if(android.os.Build.VERSION.SDK_INT == 18 || android.os.Build.VERSION.SDK_INT == 19 || android.os.Build.VERSION.SDK_INT == 20)
	//*  14   24:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  15   27:bipush          18
	//*  16   29:icmpeq          48
	//*  17   32:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  18   35:bipush          19
	//*  19   37:icmpeq          48
	//*  20   40:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  21   43:bipush          20
	//*  22   45:icmpne          166
			flag = true;
	//   23   48:iconst_1        
	//   24   49:istore_0        
		else
	//*  25   50:iload_0         
	//*  26   51:putstatic       #321 <Field boolean FORCE_INVALIDATE_DISPLAY_LIST>
	//*  27   54:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  28   57:bipush          23
	//*  29   59:icmplt          171
	//*  30   62:iconst_1        
	//*  31   63:istore_0        
	//*  32   64:iload_0         
	//*  33   65:putstatic       #323 <Field boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC>
	//*  34   68:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  35   71:bipush          16
	//*  36   73:icmplt          176
	//*  37   76:iconst_1        
	//*  38   77:istore_0        
	//*  39   78:iload_0         
	//*  40   79:putstatic       #325 <Field boolean POST_UPDATES_ON_ANIMATION>
	//*  41   82:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  42   85:bipush          21
	//*  43   87:icmplt          181
	//*  44   90:iconst_1        
	//*  45   91:istore_0        
	//*  46   92:iload_0         
	//*  47   93:putstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//*  48   96:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  49   99:bipush          15
	//*  50  101:icmpgt          186
	//*  51  104:iconst_1        
	//*  52  105:istore_0        
	//*  53  106:iload_0         
	//*  54  107:putstatic       #329 <Field boolean FORCE_ABS_FOCUS_SEARCH_DIRECTION>
	//*  55  110:getstatic       #319 <Field int android.os.Build$VERSION.SDK_INT>
	//*  56  113:bipush          15
	//*  57  115:icmpgt          191
	//*  58  118:iconst_1        
	//*  59  119:istore_0        
	//*  60  120:iload_0         
	//*  61  121:putstatic       #331 <Field boolean IGNORE_DETACHED_FOCUSED_CHILD>
	//*  62  124:iconst_4        
	//*  63  125:anewarray       Class[]
	//*  64  128:dup             
	//*  65  129:iconst_0        
	//*  66  130:ldc2            #335 <Class Context>
	//*  67  133:aastore         
	//*  68  134:dup             
	//*  69  135:iconst_1        
	//*  70  136:ldc2            #337 <Class AttributeSet>
	//*  71  139:aastore         
	//*  72  140:dup             
	//*  73  141:iconst_2        
	//*  74  142:getstatic       #343 <Field Class Integer.TYPE>
	//*  75  145:aastore         
	//*  76  146:dup             
	//*  77  147:iconst_3        
	//*  78  148:getstatic       #343 <Field Class Integer.TYPE>
	//*  79  151:aastore         
	//*  80  152:putstatic       #345 <Field Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE>
	//*  81  155:new             #14  <Class RecyclerView$3>
	//*  82  158:dup             
	//*  83  159:invokespecial   #348 <Method void RecyclerView$3()>
	//*  84  162:putstatic       #350 <Field Interpolator sQuinticInterpolator>
	//*  85  165:return          
			flag = false;
	//   86  166:iconst_0        
	//   87  167:istore_0        
		FORCE_INVALIDATE_DISPLAY_LIST = flag;
		if(android.os.Build.VERSION.SDK_INT >= 23)
			flag = true;
		else
	//*  88  168:goto            50
			flag = false;
	//   89  171:iconst_0        
	//   90  172:istore_0        
		ALLOW_SIZE_IN_UNSPECIFIED_SPEC = flag;
		if(android.os.Build.VERSION.SDK_INT >= 16)
			flag = true;
		else
	//*  91  173:goto            64
			flag = false;
	//   92  176:iconst_0        
	//   93  177:istore_0        
		POST_UPDATES_ON_ANIMATION = flag;
		if(android.os.Build.VERSION.SDK_INT >= 21)
			flag = true;
		else
	//*  94  178:goto            78
			flag = false;
	//   95  181:iconst_0        
	//   96  182:istore_0        
		ALLOW_THREAD_GAP_WORK = flag;
		if(android.os.Build.VERSION.SDK_INT <= 15)
			flag = true;
		else
	//*  97  183:goto            92
			flag = false;
	//   98  186:iconst_0        
	//   99  187:istore_0        
		FORCE_ABS_FOCUS_SEARCH_DIRECTION = flag;
		if(android.os.Build.VERSION.SDK_INT <= 15)
			flag = true;
		else
	//* 100  188:goto            106
			flag = false;
	//  101  191:iconst_0        
	//  102  192:istore_0        
		IGNORE_DETACHED_FOCUSED_CHILD = flag;
		LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE = (new Class[] {
			android/content/Context, android/util/AttributeSet, Integer.TYPE, Integer.TYPE
		});
	//* 103  193:goto            120
	}


/*
	static void access$000(RecyclerView recyclerview, View view, int i, android.view.ViewGroup.LayoutParams layoutparams)
	{
		recyclerview.attachViewToParent(view, i, layoutparams);
	//    0    0:aload_0         
	//    1    1:aload_1         
	//    2    2:iload_2         
	//    3    3:aload_3         
	//    4    4:invokevirtual   #619 <Method void attachViewToParent(View, int, android.view.ViewGroup$LayoutParams)>
		return;
	//    5    7:return          
	}

*/


/*
	static void access$100(RecyclerView recyclerview, int i)
	{
		recyclerview.detachViewFromParent(i);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:invokevirtual   #624 <Method void detachViewFromParent(int)>
		return;
	//    3    5:return          
	}

*/


/*
	static void access$1200(RecyclerView recyclerview, int i, int j)
	{
		recyclerview.setMeasuredDimension(i, j);
	//    0    0:aload_0         
	//    1    1:iload_1         
	//    2    2:iload_2         
	//    3    3:invokevirtual   #630 <Method void setMeasuredDimension(int, int)>
		return;
	//    4    6:return          
	}

*/


/*
	static int[] access$500(RecyclerView recyclerview)
	{
		return recyclerview.mScrollConsumed;
	//    0    0:aload_0         
	//    1    1:getfield        #446 <Field int[] mScrollConsumed>
	//    2    4:areturn         
	}

*/


/*
	static boolean access$700(RecyclerView recyclerview)
	{
		return recyclerview.awakenScrollBars();
	//    0    0:aload_0         
	//    1    1:invokevirtual   #638 <Method boolean awakenScrollBars()>
	//    2    4:ireturn         
	}

*/


/*
	static boolean access$800()
	{
		return ALLOW_THREAD_GAP_WORK;
	//    0    0:getstatic       #327 <Field boolean ALLOW_THREAD_GAP_WORK>
	//    1    3:ireturn         
	}

*/

	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$1

/* anonymous class */
	class LayoutManager._cls1
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedRight(view) + layoutparams.rightMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedRight(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.rightMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedLeft(view) - layoutparams.leftMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedLeft(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.leftMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getWidth() - getPaddingRight();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getWidth()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingRight()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingLeft();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingLeft()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}


	// Unreferenced inner class android/support/v7/widget/RecyclerView$LayoutManager$2

/* anonymous class */
	class LayoutManager._cls2
		implements ViewBoundsCheck.Callback
	{

		public View getChildAt(int i)
		{
			return LayoutManager.this.getChildAt(i);
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:iload_1         
		//    3    5:invokevirtual   #25  <Method View RecyclerView$LayoutManager.getChildAt(int)>
		//    4    8:areturn         
		}

		public int getChildCount()
		{
			return LayoutManager.this.getChildCount();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #29  <Method int RecyclerView$LayoutManager.getChildCount()>
		//    3    7:ireturn         
		}

		public int getChildEnd(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedBottom(view) + layoutparams.bottomMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #42  <Method int RecyclerView$LayoutManager.getDecoratedBottom(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #46  <Field int RecyclerView$LayoutParams.bottomMargin>
		//   10   20:iadd            
		//   11   21:ireturn         
		}

		public int getChildStart(View view)
		{
			LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
		//    0    0:aload_1         
		//    1    1:invokevirtual   #37  <Method android.view.ViewGroup$LayoutParams View.getLayoutParams()>
		//    2    4:checkcast       #39  <Class RecyclerView$LayoutParams>
		//    3    7:astore_2        
			return getDecoratedTop(view) - layoutparams.topMargin;
		//    4    8:aload_0         
		//    5    9:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    6   12:aload_1         
		//    7   13:invokevirtual   #50  <Method int RecyclerView$LayoutManager.getDecoratedTop(View)>
		//    8   16:aload_2         
		//    9   17:getfield        #53  <Field int RecyclerView$LayoutParams.topMargin>
		//   10   20:isub            
		//   11   21:ireturn         
		}

		public View getParent()
		{
			return ((View) (mRecyclerView));
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:getfield        #59  <Field RecyclerView RecyclerView$LayoutManager.mRecyclerView>
		//    3    7:areturn         
		}

		public int getParentEnd()
		{
			return getHeight() - getPaddingBottom();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #63  <Method int RecyclerView$LayoutManager.getHeight()>
		//    3    7:aload_0         
		//    4    8:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    5   11:invokevirtual   #66  <Method int RecyclerView$LayoutManager.getPaddingBottom()>
		//    6   14:isub            
		//    7   15:ireturn         
		}

		public int getParentStart()
		{
			return getPaddingTop();
		//    0    0:aload_0         
		//    1    1:getfield        #17  <Field RecyclerView$LayoutManager this$0>
		//    2    4:invokevirtual   #70  <Method int RecyclerView$LayoutManager.getPaddingTop()>
		//    3    7:ireturn         
		}

		final LayoutManager this$0;

			
			{
				this$0 = LayoutManager.this;
			//    0    0:aload_0         
			//    1    1:aload_1         
			//    2    2:putfield        #17  <Field RecyclerView$LayoutManager this$0>
				super();
			//    3    5:aload_0         
			//    4    6:invokespecial   #20  <Method void Object()>
			//    5    9:return          
			}
	}

}
